ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject615
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 615
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VF
sS'age'
p31
V22
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I7
sS'_exp'
p41
I75102512
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I54
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I11
I55
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I11
I55
tg55
I00
S'\x00\x00 A\x00\x000A\x00\x00`A\x00\x00\xb8A\x00\x00\xc8A\x00\x00\x1cB\x00\x00\x96B\x00\x00\x98B\x00\x00\xa4B\x00\x00\xacB\x00\x00\xb4B\x00\x00\xecB\x00\x00\x19C\x00\x00.C\x00\x00/C\x00\x00SC\x00\x00WC\x00\x00aC\x00\x00~C\x00\x80\x8aC\x00\x00\x8eC\x00\x80\x8eC\x00\x00\x95C\x00\x80\x99C\x00\x80\x9aC\x00\x80\x9cC\x00\x00\xa1C\x00\x00\xa2C\x00\x80\xa3C\x00\x80\xa6C\x00\x00\xafC\x00\x00\xb3C\x00\x80\xb3C\x00\x00\xb6C\x00\x00\xb7C\x00\x80\xb7C\x00\x80\xb9C\x00\x00\xbaC\x00\x00\xc7C\x00\x00\xccC\x00\x80\xceC\x00\x00\xd7C\x00\x00\xf2C\x00\x80\xf3C\x00\x80\xf4C\x00\x00\xf7C\x00\x80\xf7C\x00@\x03D\x00\x00\x05D\x00\x80\x05D\x00@\tD\x00\x00\x0eD\x00\xc0\x0fD\x00@\x11D\x00\x00\x13D\x00\x00\x08B\x00\x000B\x00\x00\\B\x00\x00dB\x00\x00|B\x00\x00\x88B\x00\x00\x8aB\x00\x00\xe6B\x00\x00\xf2B\x00\x00\xf6B\x00\x00\xfaB\x00\x00\x01C\x00\x00\x15C\x00\x008C\x00\x00GC\x00\x00IC\x00\x00MC\x00\x00OC\x00\x00YC\x00\x00[C\x00\x80\x82C\x00\x80\x88C\x00\x00\x89C\x00\x00\x93C\x00\x80\x9dC\x00\x00\xabC\x00\x00\xadC\x00\x80\xaeC\x00\x00\xb5C\x00\x00\xb8C\x00\x80\xbfC\x00\x80\xc0C\x00\x80\xc1C\x00\x00\xcaC\x00\x80\xcdC\x00\x00\xd4C\x00\x80\xd9C\x00\x80\xdeC\x00\x80\xdfC\x00\x80\xe6C\x00\x00\xe9C\x00\x80\xe9C\x00\x80\xeaC\x00\x00\xf8C\x00\x00\x00D\x00@\x02D\x00\xc0\x02D\x00\x00\x03D\x00@\x06D\x00\x80\x07D\x00\x00\tD\x00\xc0\tD\x00@\x0eD\x00\x00\x0fD\x00@\x14D\x00\x00\x80?\x00\x00\x98A\x00\x00\x18B\x00\x00\x8cB\x00\x00\xa2B\x00\x00\xb2B\x00\x00\xc0B\x00\x00\x04C\x00\x00\x0fC\x00\x00,C\x00\x001C\x00\x00;C\x00\x00=C\x00\x00@C\x00\x00DC\x00\x00eC\x00\x00zC\x00\x00\x85C\x00\x00\x8cC\x00\x80\x8cC\x00\x80\x90C\x00\x00\x92C\x00\x80\x92C\x00\x80\x96C\x00\x80\x97C\x00\x00\x9bC\x00\x80\xa2C\x00\x80\xa4C\x00\x80\xa7C\x00\x80\xabC\x00\x00\xaeC\x00\x00\xb0C\x00\x80\xb4C\x00\x80\xb5C\x00\x80\xb8C\x00\x80\xc7C\x00\x80\xd0C\x00\x80\xd7C\x00\x00\xdaC\x00\x00\xddC\x00\x00\xdeC\x00\x00\xe0C\x00\x80\xedC\x00\x00\xfdC\x00\x00\xffC\x00\x00\x07D\x00\x80\x0bD\x00\x80\x0eD\x00\x80\x0fD\x00\xc0\x11D\x00\x80\x12D\x00@\x13D\x00\x00\x14D\x00\xc0\x14D\x00\x00\x00\x00\x00\x00\x80@\x00\x00,B\x00\x00HB\x00\x00\x92B\x00\x00\xe2B\x00\x00\xeeB\x00\x00\x00C\x00\x00\x03C\x00\x00\x0cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00(C\x00\x000C\x00\x00CC\x00\x00FC\x00\x00HC\x00\x00JC\x00\x00bC\x00\x00kC\x00\x00uC\x00\x00vC\x00\x00|C\x00\x00\x80C\x00\x80\x81C\x00\x80\x84C\x00\x80\x95C\x00\x00\x97C\x00\x80\xa0C\x00\x80\xa5C\x00\x80\xa9C\x00\x80\xbaC\x00\x80\xbdC\x00\x80\xc5C\x00\x00\xcbC\x00\x80\xd3C\x00\x80\xd5C\x00\x00\xdbC\x00\x00\xf6C\x00\x80\xf8C\x00\x00\xfcC\x00\x80\x01D\x00\x00\x02D\x00@\x05D\x00@\x07D\x00\x00\x08D\x00\x00\nD\x00\x80\nD\x00@\x0bD\x00\x80\x0cD\x00\x00\rD\x00@\rD\x00\xc0\x0eD\x00\xc0\x10D\x00\xc0\x12D\x00\x00\x15D\x00\x00\x00@\x00\x00\xa0@\x00\x00\x80A\x00\x00\xf0A\x00\x00\x00B\x00\x00\x10B\x00\x00DB\x00\x00XB\x00\x00hB\x00\x00pB\x00\x00\x90B\x00\x00\xc4B\x00\x00\xd8B\x00\x00\xdcB\x00\x00\x0bC\x00\x00\x0eC\x00\x00\x12C\x00\x00^C\x00\x00cC\x00\x00pC\x00\x80\x80C\x00\x00\xa5C\x00\x00\xa7C\x00\x00\xa8C\x00\x00\xa9C\x00\x80\xadC\x00\x80\xb2C\x00\x80\xb6C\x00\x80\xbbC\x00\x00\xc4C\x00\x80\xc4C\x00\x80\xc8C\x00\x80\xc9C\x00\x00\xd0C\x00\x00\xd2C\x00\x80\xe5C\x00\x00\xe6C\x00\x00\xeaC\x00\x00\xebC\x00\x80\xebC\x00\x00\xf1C\x00\x00\xf3C\x00\x00\xf9C\x00\x80\xf9C\x00\x00\xfbC\x00\x80\xfcC\x00@\x01D\x00\x80\x03D\x00\x80\x04D\x00@\x08D\x00\x80\x08D\x00\x00\x0bD\x00\x80\x10D\x00@\x12D\x00@\x15D\x00\x00\x88A\x00\x00(B\x00\x00LB\x00\x00\x80B\x00\x00\xa0B\x00\x00\xa8B\x00\x00\xbeB\x00\x00\xd2B\x00\x00\x1cC\x00\x00\x1fC\x00\x00!C\x00\x00"C\x00\x00%C\x00\x003C\x00\x004C\x00\x007C\x00\x00AC\x00\x00PC\x00\x00UC\x00\x00XC\x00\x00_C\x00\x00hC\x00\x00mC\x00\x00qC\x00\x00xC\x00\x00}C\x00\x00\x81C\x00\x00\x86C\x00\x80\x87C\x00\x00\x8aC\x00\x80\x93C\x00\x00\x9eC\x00\x00\xa0C\x00\x80\xaaC\x00\x80\xacC\x00\x00\xb9C\x00\x00\xbeC\x00\x80\xbeC\x00\x80\xc6C\x00\x00\xc8C\x00\x00\xceC\x00\x80\xd6C\x00\x00\xe3C\x00\x80\xe4C\x00\x80\xe8C\x00\x80\xecC\x00\x00\xedC\x00\x00\x01D\x00\xc0\x01D\x00\xc0\x06D\x00\x00\x10D\x00\x80\x11D\x00\x80\x13D\x00\x80\x14D\x00\x00\x00\x00\x00\x00@@\x00\x00\xe0@\x00\x00\x90A\x00\x00\xc0A\x00\x00\xe8A\x00\x00\x14B\x00\x008B\x00\x00<B\x00\x00tB\x00\x00\x84B\x00\x00\x9cB\x00\x00\xaaB\x00\x00\xaeB\x00\x00\xb6B\x00\x00\xcaB\x00\x00\xe0B\x00\x00\xe4B\x00\x00\x06C\x00\x00\x13C\x00\x00\x14C\x00\x00\x16C\x00\x00*C\x00\x00<C\x00\x00?C\x00\x00EC\x00\x00KC\x00\x00nC\x00\x00wC\x00\x00{C\x00\x00\x8bC\x00\x00\x91C\x00\x80\x9bC\x00\x00\x9fC\x00\x00\xa3C\x00\x00\xb2C\x00\x00\xbcC\x00\x00\xc0C\x00\x80\xc3C\x00\x80\xcbC\x00\x00\xd5C\x00\x00\xd6C\x00\x80\xe0C\x00\x80\xe1C\x00\x80\xe3C\x00\x00\xe4C\x00\x80\xe7C\x00\x80\xf0C\x00\x80\xfaC\x00\x80\xffC\x00@\x04D\x00@\x0fD\x00\x00\x12D\x00\xc0\x13D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00A\x00\x00@A\x00\x00PA\x00\x00\xa8A\x00\x00 B\x00\x00$B\x00\x00lB\x00\x00xB\x00\x00\x82B\x00\x00\x9aB\x00\x00\x9eB\x00\x00\xf4B\x00\x00\xfeB\x00\x00\x02C\x00\x00\x05C\x00\x00\x10C\x00\x00\x11C\x00\x00\x1aC\x00\x002C\x00\x006C\x00\x00>C\x00\x00QC\x00\x00RC\x00\x00VC\x00\x00\\C\x00\x00iC\x00\x00jC\x00\x00lC\x00\x00rC\x00\x00sC\x00\x00\x7fC\x00\x80\x83C\x00\x80\x85C\x00\x00\x87C\x00\x80\x89C\x00\x80\x8fC\x00\x00\x90C\x00\x00\x94C\x00\x80\x94C\x00\x00\x9dC\x00\x80\xa8C\x00\x80\xb1C\x00\x80\xbcC\x00\x80\xc2C\x00\x80\xdaC\x00\x80\xdbC\x00\x80\xddC\x00\x00\xecC\x00\x80\xefC\x00\x80\xf5C\x00\x80\xfdC\x00\xc0\x08D\x00\x80\rD\x00\x00\x11D\x00\xc0\x15D\x00\x00\x10A\x00\x00\xa0A\x00\x00\xb0A\x00\x00@B\x00\x00PB\x00\x00\xbaB\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xdaB\x00\x00\xeaB\x00\x00\x08C\x00\x00\nC\x00\x00#C\x00\x00$C\x00\x00\'C\x00\x00)C\x00\x00-C\x00\x00TC\x00\x00ZC\x00\x00oC\x00\x00\x82C\x00\x00\x88C\x00\x80\x8bC\x00\x80\x8dC\x00\x00\x96C\x00\x80\x98C\x00\x00\x9aC\x00\x00\xa4C\x00\x00\xbbC\x00\x00\xbdC\x00\x00\xc1C\x00\x00\xc3C\x00\x00\xc5C\x00\x00\xc9C\x00\x80\xccC\x00\x80\xcfC\x00\x00\xd3C\x00\x80\xd4C\x00\x00\xe1C\x00\x00\xe5C\x00\x00\xe7C\x00\x00\xe8C\x00\x00\xf4C\x00\x00\xfaC\x00\x80\xfbC\x00\x80\xfeC\x00\xc0\x00D\x00\xc0\x03D\x00\x00\x04D\x00\x00\x06D\x00@\nD\x00\xc0\x0bD\x00\x00\x0cD\x00@\x10D\x00\x80\x15D\x00\x00\x00\x00\x00\x00\xf8A\x00\x00\x04B\x00\x00TB\x00\x00\x86B\x00\x00\x94B\x00\x00\xb0B\x00\x00\xbcB\x00\x00\xc2B\x00\x00\xceB\x00\x00\xd4B\x00\x00\xf0B\x00\x00\xfcB\x00\x00\rC\x00\x00\x1bC\x00\x00 C\x00\x00&C\x00\x005C\x00\x009C\x00\x00BC\x00\x00LC\x00\x00NC\x00\x00dC\x00\x00gC\x00\x00tC\x00\x00\x84C\x00\x00\x8dC\x00\x00\x8fC\x00\x80\x91C\x00\x00\x99C\x00\x80\x9eC\x00\x00\xa6C\x00\x00\xacC\x00\x80\xafC\x00\x80\xb0C\x00\x00\xb4C\x00\x80\xcaC\x00\x00\xd1C\x00\x80\xd1C\x00\x00\xd8C\x00\x80\xd8C\x00\x80\xdcC\x00\x00\xdfC\x00\x80\xe2C\x00\x80\xeeC\x00\x00\xefC\x00\x80\xf2C\x00\x80\xf6C\x00\x80\x02D\x00\xc0\x04D\x00\xc0\x05D\x00\xc0\x07D\x00\xc0\nD\x00\xc0\x0cD\x00\xc0\rD\x00\x00\xc0@\x00\x00pA\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\x0cB\x00\x004B\x00\x00`B\x00\x00\x8eB\x00\x00\xa6B\x00\x00\xb8B\x00\x00\xccB\x00\x00\xd0B\x00\x00\xd6B\x00\x00\xdeB\x00\x00\xe8B\x00\x00\xf8B\x00\x00\x07C\x00\x00\tC\x00\x00\x17C\x00\x00\x18C\x00\x00+C\x00\x00:C\x00\x00]C\x00\x00`C\x00\x00fC\x00\x00yC\x00\x00\x83C\x00\x80\x86C\x00\x00\x98C\x00\x00\x9cC\x00\x80\x9fC\x00\x80\xa1C\x00\x00\xaaC\x00\x00\xb1C\x00\x00\xbfC\x00\x00\xc2C\x00\x00\xc6C\x00\x00\xcdC\x00\x00\xcfC\x00\x80\xd2C\x00\x00\xd9C\x00\x00\xdcC\x00\x00\xe2C\x00\x00\xeeC\x00\x00\xf0C\x00\x80\xf1C\x00\x00\xf5C\x00\x00\xfeC\x00@\x00D\x00\x80\x00D\x00\x80\x06D\x00\x80\tD\x00@\x0cD\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I11
aI55
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I11
I55
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I9
aI0
aI8
aI9
aI1
aI1
aI6
aI7
aI9
aI8
aI4
aI1
aI2
aI2
aI7
aI5
aI3
aI2
aI3
aI7
aI7
aI9
aI7
aI5
aI9
aI7
aI9
aI7
aI8
aI10
aI4
aI5
aI2
aI2
aI8
aI1
aI10
aI6
aI9
aI5
aI10
aI6
aI8
aI5
aI0
aI0
aI2
aI4
aI8
aI5
aI10
aI10
aI1
aI2
aI5
aI2
aI7
aI0
aI1
aI10
aI10
aI9
aI6
aI2
aI8
aI10
aI7
aI7
aI7
aI9
aI9
aI2
aI6
aI1
aI7
aI10
aI5
aI7
aI0
aI3
aI5
aI7
aI0
aI0
aI5
aI3
aI1
aI9
aI0
aI4
aI8
aI5
aI0
aI9
aI0
aI9
aI10
aI6
aI5
aI9
aI1
aI7
aI3
aI6
aI2
aI1
aI3
aI6
aI6
aI2
aI4
aI7
aI6
aI10
aI6
aI1
aI1
aI7
aI0
aI6
aI6
aI1
aI6
aI7
aI5
aI8
aI7
aI2
aI3
aI0
aI4
aI7
aI9
aI7
aI2
aI0
aI7
aI3
aI2
aI3
aI9
aI2
aI10
aI4
aI6
aI1
aI0
aI8
aI4
aI2
aI2
aI9
aI8
aI2
aI4
aI3
aI10
aI5
aI4
aI3
aI3
aI9
aI2
aI4
aI3
aI6
aI0
aI0
aI4
aI6
aI4
aI1
aI5
aI6
aI10
aI3
aI10
aI10
aI4
aI3
aI3
aI5
aI7
aI1
aI8
aI5
aI7
aI3
aI3
aI7
aI6
aI2
aI8
aI6
aI0
aI0
aI9
aI7
aI0
aI7
aI10
aI2
aI10
aI10
aI9
aI7
aI5
aI5
aI10
aI0
aI4
aI8
aI3
aI9
aI1
aI8
aI3
aI0
aI2
aI4
aI3
aI10
aI10
aI6
aI8
aI7
aI2
aI2
aI10
aI9
aI6
aI1
aI8
aI6
aI3
aI8
aI5
aI6
aI3
aI5
aI10
aI3
aI3
aI4
aI5
aI8
aI6
aI2
aI10
aI10
aI4
aI5
aI6
aI0
aI8
aI7
aI5
aI1
aI8
aI9
aI2
aI6
aI1
aI9
aI8
aI4
aI2
aI1
aI0
aI9
aI3
aI3
aI5
aI3
aI8
aI4
aI4
aI10
aI2
aI4
aI4
aI10
aI0
aI8
aI10
aI1
aI9
aI10
aI6
aI5
aI6
aI9
aI2
aI6
aI7
aI0
aI7
aI6
aI5
aI10
aI2
aI9
aI3
aI0
aI0
aI2
aI1
aI4
aI1
aI3
aI8
aI4
aI5
aI3
aI10
aI1
aI6
aI1
aI9
aI0
aI8
aI6
aI9
aI3
aI3
aI9
aI7
aI8
aI0
aI7
aI10
aI5
aI10
aI0
aI3
aI6
aI4
aI10
aI9
aI5
aI10
aI7
aI8
aI1
aI9
aI10
aI7
aI5
aI9
aI0
aI3
aI5
aI5
aI3
aI7
aI2
aI2
aI2
aI7
aI2
aI4
aI4
aI0
aI2
aI5
aI6
aI8
aI0
aI1
aI1
aI9
aI5
aI4
aI7
aI10
aI6
aI1
aI1
aI0
aI4
aI4
aI9
aI4
aI2
aI6
aI6
aI6
aI6
aI7
aI5
aI7
aI3
aI5
aI5
aI9
aI8
aI3
aI4
aI6
aI5
aI2
aI5
aI9
aI1
aI5
aI4
aI6
aI10
aI8
aI5
aI9
aI2
aI10
aI1
aI6
aI7
aI2
aI0
aI5
aI5
aI4
aI4
aI10
aI8
aI2
aI1
aI8
aI1
aI10
aI7
aI4
aI10
aI1
aI9
aI4
aI3
aI0
aI3
aI5
aI5
aI7
aI2
aI4
aI7
aI8
aI1
aI9
aI6
aI2
aI10
aI0
aI1
aI3
aI10
aI5
aI8
aI1
aI3
aI9
aI1
aI9
aI8
aI2
aI1
aI8
aI8
aI1
aI8
aI5
aI0
aI4
aI1
aI9
aI0
aI10
aI4
aI1
aI8
aI6
aI7
aI2
aI4
aI4
aI6
aI3
aI8
aI10
aI0
aI8
aI7
aI2
aI1
aI7
aI6
aI2
aI8
aI8
aI9
aI5
aI9
aI5
aI0
aI0
aI9
aI4
aI3
aI7
aI9
aI10
aI8
aI0
aI9
aI2
aI1
aI8
aI2
aI4
aI6
aI10
aI1
aI0
aI5
aI9
aI9
aI8
aI3
aI0
aI2
aI0
aI1
aI8
aI9
aI4
aI3
aI3
aI6
aI4
aI4
aI4
aI9
aI3
aI8
aI4
aI1
aI1
aI8
aI2
aI0
aI2
aI10
aI0
aI7
aI4
aI3
aI4
aI7
aI0
aI6
aI4
aI8
aI9
aI3
aI4
aI0
aI8
aI0
aI10
aI6
aI5
aI1
aI10
aI5
aI3
aI7
aI1
aI0
aI7
aI0
aI6
aI2
aI10
aI9
aI1
aI3
aI6
aI3
aI3
aI2
aI6
aI7
aI8
aI1
aI7
aI10
aI0
aI4
aI5
aI8
aI10
aI0
aI8
aI3
aI5
aI1
aI6
atbsS'finished'
p74
I00
sS'nReps'
p75
I55
sS'nRemaining'
p76
I5
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p79
NsS'thisIndex'
p80
I7
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I5
sS'nTotal'
p83
I605
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I9
sS'.thisRepN'
p96
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I9
sg15
(lp100
S'k'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'k'
asg95
I2
sS'.thisRepN'
p103
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I2
sg15
(lp107
S'd'
asg17
S'N'
sg14
I1
sa(dp108
g16
(lp109
S'd'
asg18
S'Y'
sS'.thisRepN'
p110
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I4
sg15
(lp114
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp115
g16
(lp116
S'd'
asg18
S'N'
sS'.thisRepN'
p117
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I6
sg15
(lp121
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp122
g16
(lp123
S'k'
asg18
S'N'
sS'.thisRepN'
p124
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p125
I4
sS'.thisN'
p126
I4
sS'.thisIndex'
p127
I3
sg15
(lp128
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp129
S'space'
p130
asg95
I3
sa(dp131
g16
(lp132
S'k'
asg18
S'Y'
sS'.thisRepN'
p133
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p134
I5
sS'.thisN'
p135
I5
sS'.thisIndex'
p136
I4
sg15
(lp137
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp138
S'space'
p139
asg95
I4
sa(dp140
g16
(lp141
S'd'
asg18
S'N'
sS'.thisRepN'
p142
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p143
I6
sS'.thisN'
p144
I6
sS'.thisIndex'
p145
I10
sg15
(lp146
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I10
sa(dp147
g16
(lp148
S'd'
asg18
S'Y'
sS'.thisRepN'
p149
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p150
I7
sS'.thisN'
p151
I7
sS'.thisIndex'
p152
I6
sg15
(lp153
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp154
S'space'
p155
asg95
I6
sa(dp156
g16
(lp157
S'd'
asg18
S'N'
sS'.thisRepN'
p158
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p159
I8
sS'.thisN'
p160
I8
sS'.thisIndex'
p161
I7
sg15
(lp162
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp163
g16
(lp164
S'k'
asg18
S'N'
sS'.thisRepN'
p165
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p166
I9
sS'.thisN'
p167
I9
sS'.thisIndex'
p168
I8
sg15
(lp169
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I8
sa(dp170
g16
(lp171
S'd'
asg18
S'Y'
sS'.thisRepN'
p172
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p173
I10
sS'.thisN'
p174
I10
sS'.thisIndex'
p175
I0
sg15
(lp176
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp177
S'space'
p178
asg95
I0
sa(dp179
g16
(lp180
S'd'
asg18
S'N'
sS'.thisRepN'
p181
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p182
I0
sS'.thisN'
p183
I11
sS'.thisIndex'
p184
I0
sg15
(lp185
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp186
g16
(lp187
S'k'
asg18
S'N'
sS'.thisRepN'
p188
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p189
I1
sS'.thisN'
p190
I12
sS'.thisIndex'
p191
I7
sg15
(lp192
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp193
g16
(lp194
S'k'
asg18
S'N'
sS'.thisRepN'
p195
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p196
I2
sS'.thisN'
p197
I13
sS'.thisIndex'
p198
I7
sg15
(lp199
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp200
S'space'
p201
asg95
I7
sa(dp202
g16
(lp203
S'd'
asg18
S'Y'
sS'.thisRepN'
p204
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p205
I3
sS'.thisN'
p206
I14
sS'.thisIndex'
p207
I0
sg15
(lp208
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp209
g16
(lp210
S'k'
asg18
S'N'
sS'.thisRepN'
p211
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p212
I4
sS'.thisN'
p213
I15
sS'.thisIndex'
p214
I10
sg15
(lp215
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp216
S'space'
p217
asg95
I10
sa(dp218
g16
(lp219
S'd'
asg18
S'N'
sS'.thisRepN'
p220
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p221
I5
sS'.thisN'
p222
I16
sS'.thisIndex'
p223
I4
sg15
(lp224
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp225
g16
(lp226
S'd'
asg18
S'Y'
sS'.thisRepN'
p227
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p228
I6
sS'.thisN'
p229
I17
sS'.thisIndex'
p230
I5
sg15
(lp231
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp232
S'd'
asg95
I5
sa(dp233
g16
(lp234
S'k'
asg18
S'N'
sS'.thisRepN'
p235
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p236
I7
sS'.thisN'
p237
I18
sS'.thisIndex'
p238
I6
sg15
(lp239
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp240
g16
(lp241
S'k'
asg18
S'Y'
sS'.thisRepN'
p242
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p243
I8
sS'.thisN'
p244
I19
sS'.thisIndex'
p245
I2
sg15
(lp246
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp247
S'space'
p248
asg95
I2
sa(dp249
g16
(lp250
S'd'
asg18
S'N'
sS'.thisRepN'
p251
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p252
I9
sS'.thisN'
p253
I20
sS'.thisIndex'
p254
I8
sg15
(lp255
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I8
sa(dp256
g16
(lp257
S'd'
asg18
S'Y'
sS'.thisRepN'
p258
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p259
I10
sS'.thisN'
p260
I21
sS'.thisIndex'
p261
I7
sg15
(lp262
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp263
g16
(lp264
S'd'
asg18
S'N'
sS'.thisRepN'
p265
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p266
I0
sS'.thisN'
p267
I22
sS'.thisIndex'
p268
I8
sg15
(lp269
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp270
g16
(lp271
S'd'
asg18
S'Y'
sS'.thisRepN'
p272
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p273
I1
sS'.thisN'
p274
I23
sS'.thisIndex'
p275
I0
sg15
(lp276
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp277
S'space'
p278
asg95
I0
sa(dp279
g16
(lp280
S'd'
asg18
S'Y'
sS'.thisRepN'
p281
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p282
I2
sS'.thisN'
p283
I24
sS'.thisIndex'
p284
I6
sg15
(lp285
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp286
S'space'
p287
asg95
I6
sa(dp288
g16
(lp289
S'd'
asg18
S'N'
sS'.thisRepN'
p290
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p291
I3
sS'.thisN'
p292
I25
sS'.thisIndex'
p293
I0
sg15
(lp294
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp295
g16
(lp296
S'd'
asg18
S'N'
sS'.thisRepN'
p297
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p298
I4
sS'.thisN'
p299
I26
sS'.thisIndex'
p300
I10
sg15
(lp301
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp302
S'space'
p303
asg95
I10
sa(dp304
g16
(lp305
S'd'
asg18
S'N'
sS'.thisRepN'
p306
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p307
I5
sS'.thisN'
p308
I27
sS'.thisIndex'
p309
I10
sg15
(lp310
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I10
sa(dp311
g16
(lp312
S'd'
asg18
S'N'
sS'.thisRepN'
p313
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p314
I6
sS'.thisN'
p315
I28
sS'.thisIndex'
p316
I10
sg15
(lp317
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp318
S'space'
p319
asg95
I10
sa(dp320
g16
(lp321
S'k'
asg18
S'N'
sS'.thisRepN'
p322
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p323
I7
sS'.thisN'
p324
I29
sS'.thisIndex'
p325
I6
sg15
(lp326
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp327
g16
(lp328
S'k'
asg18
S'N'
sS'.thisRepN'
p329
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p330
I8
sS'.thisN'
p331
I30
sS'.thisIndex'
p332
I4
sg15
(lp333
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp334
S'space'
p335
asg95
I4
sa(dp336
g16
(lp337
S'd'
asg18
S'Y'
sS'.thisRepN'
p338
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p339
I9
sS'.thisN'
p340
I31
sS'.thisIndex'
p341
I9
sg15
(lp342
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp343
S'space'
p344
asg95
I9
sa(dp345
g16
(lp346
S'd'
asg18
S'N'
sS'.thisRepN'
p347
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p348
I10
sS'.thisN'
p349
I32
sS'.thisIndex'
p350
I4
sg15
(lp351
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp352
S'space'
p353
asg95
I4
sa(dp354
g16
(lp355
S'd'
asg18
S'N'
sS'.thisRepN'
p356
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p357
I0
sS'.thisN'
p358
I33
sS'.thisIndex'
p359
I9
sg15
(lp360
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp361
g16
(lp362
S'd'
asg18
S'N'
sS'.thisRepN'
p363
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p364
I1
sS'.thisN'
p365
I34
sS'.thisIndex'
p366
I1
sg15
(lp367
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp368
g16
(lp369
S'k'
asg18
S'N'
sS'.thisRepN'
p370
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p371
I2
sS'.thisN'
p372
I35
sS'.thisIndex'
p373
I10
sg15
(lp374
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp375
S'space'
p376
asg95
I10
sa(dp377
g16
(lp378
S'd'
asg18
S'N'
sS'.thisRepN'
p379
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p380
I3
sS'.thisN'
p381
I36
sS'.thisIndex'
p382
I4
sg15
(lp383
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp384
S'space'
p385
asg95
I4
sa(dp386
g16
(lp387
S'd'
asg18
S'N'
sS'.thisRepN'
p388
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p389
I4
sS'.thisN'
p390
I37
sS'.thisIndex'
p391
I6
sg15
(lp392
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp393
g16
(lp394
S'd'
asg18
S'Y'
sS'.thisRepN'
p395
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p396
I5
sS'.thisN'
p397
I38
sS'.thisIndex'
p398
I2
sg15
(lp399
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp400
S'space'
p401
asg95
I2
sa(dp402
g16
(lp403
S'k'
asg18
S'N'
sS'.thisRepN'
p404
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p405
I6
sS'.thisN'
p406
I39
sS'.thisIndex'
p407
I0
sg15
(lp408
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp409
g16
(lp410
S'd'
asg18
S'N'
sS'.thisRepN'
p411
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p412
I7
sS'.thisN'
p413
I40
sS'.thisIndex'
p414
I7
sg15
(lp415
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp416
g16
(lp417
S'k'
asg18
S'Y'
sS'.thisRepN'
p418
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p419
I8
sS'.thisN'
p420
I41
sS'.thisIndex'
p421
I7
sg15
(lp422
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp423
g16
(lp424
S'k'
asg18
S'N'
sS'.thisRepN'
p425
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p426
I9
sS'.thisN'
p427
I42
sS'.thisIndex'
p428
I5
sg15
(lp429
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp430
g16
(lp431
S'k'
asg18
S'Y'
sS'.thisRepN'
p432
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p433
I10
sS'.thisN'
p434
I43
sS'.thisIndex'
p435
I3
sg15
(lp436
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp437
S'space'
p438
asg95
I3
sa(dp439
g16
(lp440
S'k'
asg18
S'Y'
sS'.thisRepN'
p441
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p442
I0
sS'.thisN'
p443
I44
sS'.thisIndex'
p444
I1
sg15
(lp445
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp446
S'space'
p447
asg95
I1
sa(dp448
g16
(lp449
S'd'
asg18
S'Y'
sS'.thisRepN'
p450
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p451
I1
sS'.thisN'
p452
I45
sS'.thisIndex'
p453
I10
sg15
(lp454
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp455
S'space'
p456
asg95
I10
sa(dp457
g16
(lp458
S'k'
asg18
S'N'
sS'.thisRepN'
p459
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p460
I2
sS'.thisN'
p461
I46
sS'.thisIndex'
p462
I6
sg15
(lp463
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp464
g16
(lp465
S'd'
asg18
S'N'
sS'.thisRepN'
p466
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p467
I3
sS'.thisN'
p468
I47
sS'.thisIndex'
p469
I6
sg15
(lp470
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp471
g16
(lp472
S'd'
asg18
S'N'
sS'.thisRepN'
p473
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p474
I4
sS'.thisN'
p475
I48
sS'.thisIndex'
p476
I8
sg15
(lp477
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp478
g16
(lp479
S'd'
asg18
S'Y'
sg22
I34
sS'.thisN'
p480
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p481
I5
sS'.thisRepN'
p482
I4
sg21
I26
sS'.thisIndex'
p483
I4
sg23
I17
sg15
(lp484
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp485
S'space'
p486
asg95
I4
sa(dp487
g16
(lp488
S'd'
asg95
I3
sS'.thisRepN'
p489
I4
sg30
VF
sg31
g32
sS'.thisTrialN'
p490
I6
sS'.thisN'
p491
I50
sS'.thisIndex'
p492
I3
sg15
(lp493
S'd'
asg17
S'Y'
sg14
I2
sa(dp494
g16
(lp495
S'k'
asg95
I5
sS'.thisRepN'
p496
I4
sg30
VF
sg31
g32
sS'.thisTrialN'
p497
I7
sS'.thisN'
p498
I51
sS'.thisIndex'
p499
I5
sg15
(lp500
S'k'
asg17
S'Y'
sg14
I2
sa(dp501
g16
(lp502
S'k'
asg18
S'N'
sS'.thisRepN'
p503
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p504
I8
sS'.thisN'
p505
I52
sS'.thisIndex'
p506
I8
sg15
(lp507
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I8
sa(dp508
g16
(lp509
S'd'
asg18
S'Y'
sS'.thisRepN'
p510
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p511
I9
sS'.thisN'
p512
I53
sS'.thisIndex'
p513
I9
sg15
(lp514
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp515
S'space'
p516
asg95
I9
sa(dp517
g16
(lp518
S'k'
asg18
S'N'
sS'.thisRepN'
p519
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p520
I10
sS'.thisN'
p521
I54
sS'.thisIndex'
p522
I4
sg15
(lp523
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp524
g16
(lp525
S'k'
asg18
S'N'
sS'.thisRepN'
p526
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p527
I0
sS'.thisN'
p528
I55
sS'.thisIndex'
p529
I1
sg15
(lp530
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp531
g16
(lp532
S'd'
asg18
S'N'
sS'.thisRepN'
p533
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p534
I1
sS'.thisN'
p535
I56
sS'.thisIndex'
p536
I10
sg15
(lp537
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I10
sa(dp538
g16
(lp539
S'k'
asg18
S'Y'
sS'.thisRepN'
p540
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p541
I2
sS'.thisN'
p542
I57
sS'.thisIndex'
p543
I1
sg15
(lp544
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp545
S'space'
p546
asg95
I1
sa(dp547
g16
(lp548
S'k'
asg18
S'Y'
sS'.thisRepN'
p549
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p550
I3
sS'.thisN'
p551
I58
sS'.thisIndex'
p552
I4
sg15
(lp553
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp554
S'space'
p555
asg95
I4
sa(dp556
g16
(lp557
S'd'
asg18
S'N'
sS'.thisRepN'
p558
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p559
I4
sS'.thisN'
p560
I59
sS'.thisIndex'
p561
I7
sg15
(lp562
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I7
sa(dp563
g16
(lp564
S'k'
asg18
S'N'
sS'.thisRepN'
p565
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p566
I5
sS'.thisN'
p567
I60
sS'.thisIndex'
p568
I4
sg15
(lp569
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp570
g16
(lp571
S'd'
asg18
S'N'
sS'.thisRepN'
p572
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p573
I6
sS'.thisN'
p574
I61
sS'.thisIndex'
p575
I6
sg15
(lp576
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp577
g16
(lp578
S'k'
asg18
S'Y'
sS'.thisRepN'
p579
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p580
I7
sS'.thisN'
p581
I62
sS'.thisIndex'
p582
I7
sg15
(lp583
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp584
S'space'
p585
asg95
I7
sa(dp586
g16
(lp587
S'k'
asg18
S'N'
sS'.thisRepN'
p588
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p589
I8
sS'.thisN'
p590
I63
sS'.thisIndex'
p591
I1
sg15
(lp592
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp593
g16
(lp594
S'd'
asg18
S'N'
sS'.thisRepN'
p595
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p596
I9
sS'.thisN'
p597
I64
sS'.thisIndex'
p598
I5
sg15
(lp599
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I5
sa(dp600
g16
(lp601
S'd'
asg18
S'Y'
sS'.thisRepN'
p602
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p603
I10
sS'.thisN'
p604
I65
sS'.thisIndex'
p605
I7
sg15
(lp606
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp607
S'space'
p608
asg95
I7
sa(dp609
g16
(lp610
S'k'
asg18
S'Y'
sS'.thisRepN'
p611
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p612
I0
sS'.thisN'
p613
I66
sS'.thisIndex'
p614
I6
sg15
(lp615
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp616
S'space'
p617
asg95
I6
sa(dp618
g16
(lp619
S'k'
asg18
S'N'
sS'.thisRepN'
p620
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p621
I1
sS'.thisN'
p622
I67
sS'.thisIndex'
p623
I9
sg15
(lp624
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp625
g16
(lp626
S'k'
asg18
S'N'
sS'.thisRepN'
p627
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p628
I2
sS'.thisN'
p629
I68
sS'.thisIndex'
p630
I1
sg15
(lp631
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp632
g16
(lp633
S'k'
asg18
S'Y'
sS'.thisRepN'
p634
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p635
I3
sS'.thisN'
p636
I69
sS'.thisIndex'
p637
I1
sg15
(lp638
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp639
S'space'
p640
asg95
I1
sa(dp641
g16
(lp642
S'k'
asg18
S'Y'
sS'.thisRepN'
p643
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p644
I4
sS'.thisN'
p645
I70
sS'.thisIndex'
p646
I2
sg15
(lp647
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp648
S'space'
p649
asg95
I2
sa(dp650
g16
(lp651
S'd'
asg18
S'Y'
sS'.thisRepN'
p652
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p653
I5
sS'.thisN'
p654
I71
sS'.thisIndex'
p655
I10
sg15
(lp656
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp657
S'space'
p658
asg95
I10
sa(dp659
g16
(lp660
S'k'
asg18
S'N'
sS'.thisRepN'
p661
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p662
I6
sS'.thisN'
p663
I72
sS'.thisIndex'
p664
I4
sg15
(lp665
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp666
g16
(lp667
S'k'
asg18
S'N'
sS'.thisRepN'
p668
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p669
I7
sS'.thisN'
p670
I73
sS'.thisIndex'
p671
I3
sg15
(lp672
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp673
g16
(lp674
S'd'
asg18
S'Y'
sS'.thisRepN'
p675
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p676
I8
sS'.thisN'
p677
I74
sS'.thisIndex'
p678
I9
sg15
(lp679
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp680
S'space'
p681
asg95
I9
sa(dp682
g16
(lp683
S'k'
asg18
S'N'
sS'.thisRepN'
p684
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p685
I9
sS'.thisN'
p686
I75
sS'.thisIndex'
p687
I0
sg15
(lp688
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp689
g16
(lp690
S'd'
asg18
S'Y'
sS'.thisRepN'
p691
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p692
I10
sS'.thisN'
p693
I76
sS'.thisIndex'
p694
I0
sg15
(lp695
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp696
g16
(lp697
S'k'
asg18
S'N'
sS'.thisRepN'
p698
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p699
I0
sS'.thisN'
p700
I77
sS'.thisIndex'
p701
I7
sg15
(lp702
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp703
g16
(lp704
S'k'
asg18
S'N'
sS'.thisRepN'
p705
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p706
I1
sS'.thisN'
p707
I78
sS'.thisIndex'
p708
I6
sg15
(lp709
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp710
g16
(lp711
S'd'
asg18
S'Y'
sS'.thisRepN'
p712
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p713
I2
sS'.thisN'
p714
I79
sS'.thisIndex'
p715
I7
sg15
(lp716
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp717
S'space'
p718
asg95
I7
sa(dp719
g16
(lp720
S'd'
asg18
S'Y'
sS'.thisRepN'
p721
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p722
I3
sS'.thisN'
p723
I80
sS'.thisIndex'
p724
I5
sg15
(lp725
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp726
S'space'
p727
asg95
I5
sa(dp728
g16
(lp729
S'k'
asg18
S'N'
sS'.thisRepN'
p730
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p731
I4
sS'.thisN'
p732
I81
sS'.thisIndex'
p733
I2
sg15
(lp734
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I2
sa(dp735
g16
(lp736
S'k'
asg18
S'N'
sS'.thisRepN'
p737
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p738
I5
sS'.thisN'
p739
I82
sS'.thisIndex'
p740
I0
sg15
(lp741
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp742
g16
(lp743
S'd'
asg18
S'Y'
sS'.thisRepN'
p744
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p745
I6
sS'.thisN'
p746
I83
sS'.thisIndex'
p747
I10
sg15
(lp748
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp749
g16
(lp750
S'k'
asg18
S'N'
sS'.thisRepN'
p751
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p752
I7
sS'.thisN'
p753
I84
sS'.thisIndex'
p754
I5
sg15
(lp755
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I5
sa(dp756
g16
(lp757
S'k'
asg18
S'Y'
sS'.thisRepN'
p758
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p759
I8
sS'.thisN'
p760
I85
sS'.thisIndex'
p761
I6
sg15
(lp762
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp763
S'space'
p764
asg95
I6
sa(dp765
g16
(lp766
S'k'
asg18
S'N'
sS'.thisRepN'
p767
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p768
I9
sS'.thisN'
p769
I86
sS'.thisIndex'
p770
I0
sg15
(lp771
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp772
g16
(lp773
S'k'
asg18
S'Y'
sS'.thisRepN'
p774
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p775
I10
sS'.thisN'
p776
I87
sS'.thisIndex'
p777
I6
sg15
(lp778
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp779
g16
(lp780
S'k'
asg18
S'Y'
sS'.thisRepN'
p781
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p782
I0
sS'.thisN'
p783
I88
sS'.thisIndex'
p784
I9
sg15
(lp785
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp786
S'space'
p787
asg95
I9
sa(dp788
g16
(lp789
S'd'
asg18
S'N'
sS'.thisRepN'
p790
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p791
I1
sS'.thisN'
p792
I89
sS'.thisIndex'
p793
I2
sg15
(lp794
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp795
S'space'
p796
asg95
I2
sa(dp797
g16
(lp798
S'd'
asg18
S'Y'
sS'.thisRepN'
p799
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p800
I2
sS'.thisN'
p801
I90
sS'.thisIndex'
p802
I0
sg15
(lp803
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp804
g16
(lp805
S'd'
asg18
S'Y'
sS'.thisRepN'
p806
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p807
I3
sS'.thisN'
p808
I91
sS'.thisIndex'
p809
I6
sg15
(lp810
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp811
S'space'
p812
asg95
I6
sa(dp813
g16
(lp814
S'd'
asg18
S'Y'
sS'.thisRepN'
p815
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p816
I4
sS'.thisN'
p817
I92
sS'.thisIndex'
p818
I10
sg15
(lp819
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp820
S'space'
p821
asg95
I10
sa(dp822
g16
(lp823
S'd'
asg18
S'Y'
sS'.thisRepN'
p824
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p825
I5
sS'.thisN'
p826
I93
sS'.thisIndex'
p827
I8
sg15
(lp828
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp829
S'space'
p830
asg95
I8
sa(dp831
g16
(lp832
S'd'
asg18
S'N'
sS'.thisRepN'
p833
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p834
I6
sS'.thisN'
p835
I94
sS'.thisIndex'
p836
I9
sg15
(lp837
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp838
g16
(lp839
S'k'
asg18
S'Y'
sS'.thisRepN'
p840
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p841
I7
sS'.thisN'
p842
I95
sS'.thisIndex'
p843
I5
sg15
(lp844
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp845
S'space'
p846
asg95
I5
sa(dp847
g16
(lp848
S'k'
asg18
S'Y'
sS'.thisRepN'
p849
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p850
I8
sS'.thisN'
p851
I96
sS'.thisIndex'
p852
I2
sg15
(lp853
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp854
S'space'
p855
asg95
I2
sa(dp856
g16
(lp857
S'd'
asg18
S'N'
sS'.thisRepN'
p858
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p859
I9
sS'.thisN'
p860
I97
sS'.thisIndex'
p861
I9
sg15
(lp862
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp863
g16
(lp864
S'd'
asg18
S'Y'
sS'.thisRepN'
p865
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p866
I10
sS'.thisN'
p867
I98
sS'.thisIndex'
p868
I4
sg15
(lp869
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp870
S'space'
p871
asg95
I4
sa(dp872
g16
(lp873
S'k'
asg18
S'N'
sg22
I43
sS'.thisN'
p874
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p875
I0
sS'.thisRepN'
p876
I9
sg21
I28
sS'.thisIndex'
p877
I8
sg23
I24
sg15
(lp878
S'd'
aS'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I8
sa(dp879
g16
(lp880
S'k'
asg95
I8
sS'.thisRepN'
p881
I9
sg30
VF
sg31
g32
sS'.thisTrialN'
p882
I1
sS'.thisN'
p883
I100
sS'.thisIndex'
p884
I8
sg15
(lp885
S'd'
asg17
S'N'
sg14
I3
sa(dp886
g16
(lp887
S'd'
asg95
I6
sS'.thisRepN'
p888
I9
sg30
VF
sg31
g32
sS'.thisTrialN'
p889
I2
sS'.thisN'
p890
I101
sS'.thisIndex'
p891
I6
sg15
(lp892
S'd'
asg17
S'Y'
sg14
I3
sa(dp893
g16
(lp894
S'd'
asg18
S'N'
sS'.thisRepN'
p895
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p896
I3
sS'.thisN'
p897
I102
sS'.thisIndex'
p898
I10
sg15
(lp899
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I10
sa(dp900
g16
(lp901
S'd'
asg18
S'Y'
sS'.thisRepN'
p902
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p903
I4
sS'.thisN'
p904
I103
sS'.thisIndex'
p905
I9
sg15
(lp906
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp907
S'space'
p908
asg95
I9
sa(dp909
g16
(lp910
S'd'
asg18
S'N'
sS'.thisRepN'
p911
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p912
I5
sS'.thisN'
p913
I104
sS'.thisIndex'
p914
I10
sg15
(lp915
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I10
sa(dp916
g16
(lp917
S'd'
asg18
S'Y'
sS'.thisRepN'
p918
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p919
I6
sS'.thisN'
p920
I105
sS'.thisIndex'
p921
I5
sg15
(lp922
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp923
S'space'
p924
asg95
I5
sa(dp925
g16
(lp926
S'k'
asg18
S'Y'
sS'.thisRepN'
p927
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p928
I7
sS'.thisN'
p929
I106
sS'.thisIndex'
p930
I9
sg15
(lp931
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp932
S'space'
p933
asg95
I9
sa(dp934
g16
(lp935
S'd'
asg18
S'Y'
sS'.thisRepN'
p936
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p937
I8
sS'.thisN'
p938
I107
sS'.thisIndex'
p939
I10
sg15
(lp940
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp941
S'space'
p942
asg95
I10
sa(dp943
g16
(lp944
S'd'
asg18
S'Y'
sS'.thisRepN'
p945
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p946
I9
sS'.thisN'
p947
I108
sS'.thisIndex'
p948
I4
sg15
(lp949
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp950
S'space'
p951
asg95
I4
sa(dp952
g16
(lp953
S'k'
asg18
S'Y'
sS'.thisRepN'
p954
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p955
I10
sS'.thisN'
p956
I109
sS'.thisIndex'
p957
I8
sg15
(lp958
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp959
S'space'
p960
asg95
I8
sa(dp961
g16
(lp962
S'd'
asg18
S'N'
sS'.thisRepN'
p963
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p964
I0
sS'.thisN'
p965
I110
sS'.thisIndex'
p966
I4
sg15
(lp967
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp968
g16
(lp969
S'k'
asg18
S'N'
sS'.thisRepN'
p970
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p971
I1
sS'.thisN'
p972
I111
sS'.thisIndex'
p973
I10
sg15
(lp974
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp975
g16
(lp976
S'd'
asg18
S'Y'
sS'.thisRepN'
p977
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p978
I2
sS'.thisN'
p979
I112
sS'.thisIndex'
p980
I6
sg15
(lp981
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp982
S'space'
p983
asg95
I6
sa(dp984
g16
(lp985
S'k'
asg18
S'N'
sS'.thisRepN'
p986
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p987
I3
sS'.thisN'
p988
I113
sS'.thisIndex'
p989
I3
sg15
(lp990
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp991
g16
(lp992
S'd'
asg18
S'N'
sS'.thisRepN'
p993
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p994
I4
sS'.thisN'
p995
I114
sS'.thisIndex'
p996
I6
sg15
(lp997
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp998
g16
(lp999
S'k'
asg18
S'N'
sS'.thisRepN'
p1000
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1001
I5
sS'.thisN'
p1002
I115
sS'.thisIndex'
p1003
I1
sg15
(lp1004
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp1005
g16
(lp1006
S'd'
asg18
S'N'
sS'.thisRepN'
p1007
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1008
I6
sS'.thisN'
p1009
I116
sS'.thisIndex'
p1010
I10
sg15
(lp1011
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I10
sa(dp1012
g16
(lp1013
S'k'
asg18
S'N'
sS'.thisRepN'
p1014
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1015
I7
sS'.thisN'
p1016
I117
sS'.thisIndex'
p1017
I8
sg15
(lp1018
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I8
sa(dp1019
g16
(lp1020
S'k'
asg18
S'N'
sS'.thisRepN'
p1021
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1022
I8
sS'.thisN'
p1023
I118
sS'.thisIndex'
p1024
I0
sg15
(lp1025
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1026
g16
(lp1027
S'd'
asg18
S'Y'
sS'.thisRepN'
p1028
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1029
I9
sS'.thisN'
p1030
I119
sS'.thisIndex'
p1031
I3
sg15
(lp1032
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1033
S'space'
p1034
asg95
I3
sa(dp1035
g16
(lp1036
S'd'
asg18
S'N'
sS'.thisRepN'
p1037
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1038
I10
sS'.thisN'
p1039
I120
sS'.thisIndex'
p1040
I9
sg15
(lp1041
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp1042
g16
(lp1043
S'k'
asg18
S'Y'
sS'.thisRepN'
p1044
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1045
I0
sS'.thisN'
p1046
I121
sS'.thisIndex'
p1047
I1
sg15
(lp1048
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1049
S'space'
p1050
asg95
I1
sa(dp1051
g16
(lp1052
S'd'
asg18
S'Y'
sS'.thisRepN'
p1053
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1054
I1
sS'.thisN'
p1055
I122
sS'.thisIndex'
p1056
I7
sg15
(lp1057
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1058
S'space'
p1059
asg95
I7
sa(dp1060
g16
(lp1061
S'k'
asg18
S'Y'
sS'.thisRepN'
p1062
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1063
I2
sS'.thisN'
p1064
I123
sS'.thisIndex'
p1065
I1
sg15
(lp1066
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1067
S'space'
p1068
asg95
I1
sa(dp1069
g16
(lp1070
S'd'
asg18
S'Y'
sS'.thisRepN'
p1071
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1072
I3
sS'.thisN'
p1073
I124
sS'.thisIndex'
p1074
I10
sg15
(lp1075
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1076
S'space'
p1077
asg95
I10
sa(dp1078
g16
(lp1079
S'k'
asg18
S'Y'
sS'.thisRepN'
p1080
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1081
I4
sS'.thisN'
p1082
I125
sS'.thisIndex'
p1083
I1
sg15
(lp1084
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1085
S'space'
p1086
asg95
I1
sa(dp1087
g16
(lp1088
S'd'
asg18
S'Y'
sS'.thisRepN'
p1089
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1090
I5
sS'.thisN'
p1091
I126
sS'.thisIndex'
p1092
I9
sg15
(lp1093
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1094
S'space'
p1095
asg95
I9
sa(dp1096
g16
(lp1097
S'k'
asg18
S'N'
sS'.thisRepN'
p1098
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1099
I6
sS'.thisN'
p1100
I127
sS'.thisIndex'
p1101
I7
sg15
(lp1102
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp1103
g16
(lp1104
S'd'
asg18
S'N'
sS'.thisRepN'
p1105
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1106
I7
sS'.thisN'
p1107
I128
sS'.thisIndex'
p1108
I3
sg15
(lp1109
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1110
g16
(lp1111
S'd'
asg18
S'Y'
sS'.thisRepN'
p1112
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1113
I8
sS'.thisN'
p1114
I129
sS'.thisIndex'
p1115
I1
sg15
(lp1116
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1117
S'space'
p1118
asg95
I1
sa(dp1119
g16
(lp1120
S'k'
asg18
S'Y'
sS'.thisRepN'
p1121
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1122
I9
sS'.thisN'
p1123
I130
sS'.thisIndex'
p1124
I7
sg15
(lp1125
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1126
S'space'
p1127
asg95
I7
sa(dp1128
g16
(lp1129
S'k'
asg18
S'Y'
sS'.thisRepN'
p1130
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1131
I10
sS'.thisN'
p1132
I131
sS'.thisIndex'
p1133
I3
sg15
(lp1134
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1135
S'space'
p1136
asg95
I3
sa(dp1137
g16
(lp1138
S'd'
asg18
S'Y'
sS'.thisRepN'
p1139
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1140
I0
sS'.thisN'
p1141
I132
sS'.thisIndex'
p1142
I2
sg15
(lp1143
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1144
S'space'
p1145
asg95
I2
sa(dp1146
g16
(lp1147
S'k'
asg18
S'N'
sS'.thisRepN'
p1148
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1149
I1
sS'.thisN'
p1150
I133
sS'.thisIndex'
p1151
I7
sg15
(lp1152
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1153
S'space'
p1154
asg95
I7
sa(dp1155
g16
(lp1156
S'k'
asg18
S'N'
sS'.thisRepN'
p1157
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1158
I2
sS'.thisN'
p1159
I134
sS'.thisIndex'
p1160
I6
sg15
(lp1161
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1162
g16
(lp1163
S'k'
asg18
S'N'
sS'.thisRepN'
p1164
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1165
I3
sS'.thisN'
p1166
I135
sS'.thisIndex'
p1167
I10
sg15
(lp1168
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1169
g16
(lp1170
S'k'
asg18
S'Y'
sS'.thisRepN'
p1171
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1172
I4
sS'.thisN'
p1173
I136
sS'.thisIndex'
p1174
I8
sg15
(lp1175
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1176
S'space'
p1177
asg95
I8
sa(dp1178
g16
(lp1179
S'd'
asg18
S'N'
sS'.thisRepN'
p1180
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1181
I5
sS'.thisN'
p1182
I137
sS'.thisIndex'
p1183
I10
sg15
(lp1184
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1185
S'space'
p1186
asg95
I10
sa(dp1187
g16
(lp1188
S'k'
asg18
S'Y'
sS'.thisRepN'
p1189
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1190
I6
sS'.thisN'
p1191
I138
sS'.thisIndex'
p1192
I8
sg15
(lp1193
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1194
S'space'
p1195
asg95
I8
sa(dp1196
g16
(lp1197
S'd'
asg18
S'Y'
sS'.thisRepN'
p1198
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1199
I7
sS'.thisN'
p1200
I139
sS'.thisIndex'
p1201
I4
sg15
(lp1202
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1203
S'space'
p1204
asg95
I4
sa(dp1205
g16
(lp1206
S'd'
asg18
S'N'
sS'.thisRepN'
p1207
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1208
I8
sS'.thisN'
p1209
I140
sS'.thisIndex'
p1210
I3
sg15
(lp1211
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1212
g16
(lp1213
S'd'
asg18
S'N'
sS'.thisRepN'
p1214
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1215
I9
sS'.thisN'
p1216
I141
sS'.thisIndex'
p1217
I9
sg15
(lp1218
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp1219
g16
(lp1220
S'd'
asg18
S'N'
sS'.thisRepN'
p1221
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1222
I10
sS'.thisN'
p1223
I142
sS'.thisIndex'
p1224
I4
sg15
(lp1225
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1226
g16
(lp1227
S'k'
asg18
S'N'
sS'.thisRepN'
p1228
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1229
I0
sS'.thisN'
p1230
I143
sS'.thisIndex'
p1231
I2
sg15
(lp1232
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1233
g16
(lp1234
S'k'
asg18
S'Y'
sS'.thisRepN'
p1235
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1236
I1
sS'.thisN'
p1237
I144
sS'.thisIndex'
p1238
I7
sg15
(lp1239
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1240
g16
(lp1241
S'k'
asg18
S'N'
sS'.thisRepN'
p1242
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1243
I2
sS'.thisN'
p1244
I145
sS'.thisIndex'
p1245
I7
sg15
(lp1246
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1247
S'space'
p1248
asg95
I7
sa(dp1249
g16
(lp1250
S'd'
asg18
S'N'
sS'.thisRepN'
p1251
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1252
I3
sS'.thisN'
p1253
I146
sS'.thisIndex'
p1254
I4
sg15
(lp1255
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp1256
g16
(lp1257
S'd'
asg18
S'N'
sS'.thisRepN'
p1258
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1259
I4
sS'.thisN'
p1260
I147
sS'.thisIndex'
p1261
I6
sg15
(lp1262
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1263
S'space'
p1264
asg95
I6
sa(dp1265
g16
(lp1266
S'k'
asg18
S'N'
sS'.thisRepN'
p1267
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1268
I5
sS'.thisN'
p1269
I148
sS'.thisIndex'
p1270
I6
sg15
(lp1271
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1272
g16
(lp1273
S'd'
asg18
S'N'
sg22
I43
sS'.thisN'
p1274
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1275
I6
sS'.thisRepN'
p1276
I13
sg21
I29
sS'.thisIndex'
p1277
I1
sg23
I22
sg15
(lp1278
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp1279
g16
(lp1280
S'k'
asg95
I6
sS'.thisRepN'
p1281
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1282
I7
sS'.thisN'
p1283
I150
sS'.thisIndex'
p1284
I6
sg15
(lp1285
S'k'
asg17
S'Y'
sg14
I4
sa(dp1286
g16
(lp1287
S'k'
asg95
I10
sS'.thisRepN'
p1288
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1289
I8
sS'.thisN'
p1290
I151
sS'.thisIndex'
p1291
I10
sg15
(lp1292
S'k'
asg17
S'Y'
sg14
I4
sa(dp1293
g16
(lp1294
S'k'
asg18
S'N'
sS'.thisRepN'
p1295
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1296
I9
sS'.thisN'
p1297
I152
sS'.thisIndex'
p1298
I10
sg15
(lp1299
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1300
S'space'
p1301
asg95
I10
sa(dp1302
g16
(lp1303
S'k'
asg18
S'Y'
sS'.thisRepN'
p1304
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1305
I10
sS'.thisN'
p1306
I153
sS'.thisIndex'
p1307
I0
sg15
(lp1308
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1309
S'space'
p1310
asg95
I0
sa(dp1311
g16
(lp1312
S'k'
asg18
S'N'
sS'.thisRepN'
p1313
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1314
I0
sS'.thisN'
p1315
I154
sS'.thisIndex'
p1316
I7
sg15
(lp1317
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1318
g16
(lp1319
S'k'
asg18
S'N'
sS'.thisRepN'
p1320
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1321
I1
sS'.thisN'
p1322
I155
sS'.thisIndex'
p1323
I9
sg15
(lp1324
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1325
g16
(lp1326
S'k'
asg18
S'Y'
sS'.thisRepN'
p1327
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1328
I2
sS'.thisN'
p1329
I156
sS'.thisIndex'
p1330
I5
sg15
(lp1331
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1332
S'space'
p1333
asg95
I5
sa(dp1334
g16
(lp1335
S'd'
asg18
S'Y'
sS'.thisRepN'
p1336
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1337
I3
sS'.thisN'
p1338
I157
sS'.thisIndex'
p1339
I3
sg15
(lp1340
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1341
S'space'
p1342
asg95
I3
sa(dp1343
g16
(lp1344
S'k'
asg18
S'N'
sS'.thisRepN'
p1345
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1346
I4
sS'.thisN'
p1347
I158
sS'.thisIndex'
p1348
I3
sg15
(lp1349
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1350
g16
(lp1351
S'k'
asg18
S'Y'
sS'.thisRepN'
p1352
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1353
I5
sS'.thisN'
p1354
I159
sS'.thisIndex'
p1355
I5
sg15
(lp1356
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1357
S'space'
p1358
asg95
I5
sa(dp1359
g16
(lp1360
S'd'
asg18
S'N'
sS'.thisRepN'
p1361
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1362
I6
sS'.thisN'
p1363
I160
sS'.thisIndex'
p1364
I9
sg15
(lp1365
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1366
S'space'
p1367
asg95
I9
sa(dp1368
g16
(lp1369
S'k'
asg18
S'N'
sS'.thisRepN'
p1370
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1371
I7
sS'.thisN'
p1372
I161
sS'.thisIndex'
p1373
I5
sg15
(lp1374
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1375
g16
(lp1376
S'k'
asg18
S'Y'
sS'.thisRepN'
p1377
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1378
I8
sS'.thisN'
p1379
I162
sS'.thisIndex'
p1380
I5
sg15
(lp1381
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1382
S'space'
p1383
asg95
I5
sa(dp1384
g16
(lp1385
S'k'
asg18
S'N'
sS'.thisRepN'
p1386
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1387
I9
sS'.thisN'
p1388
I163
sS'.thisIndex'
p1389
I8
sg15
(lp1390
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1391
g16
(lp1392
S'd'
asg18
S'Y'
sS'.thisRepN'
p1393
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1394
I10
sS'.thisN'
p1395
I164
sS'.thisIndex'
p1396
I8
sg15
(lp1397
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1398
S'space'
p1399
asg95
I8
sa(dp1400
g16
(lp1401
S'k'
asg18
S'N'
sS'.thisRepN'
p1402
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1403
I0
sS'.thisN'
p1404
I165
sS'.thisIndex'
p1405
I5
sg15
(lp1406
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1407
g16
(lp1408
S'd'
asg18
S'Y'
sS'.thisRepN'
p1409
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1410
I1
sS'.thisN'
p1411
I166
sS'.thisIndex'
p1412
I9
sg15
(lp1413
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1414
S'space'
p1415
asg95
I9
sa(dp1416
g16
(lp1417
S'd'
asg18
S'N'
sS'.thisRepN'
p1418
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1419
I2
sS'.thisN'
p1420
I167
sS'.thisIndex'
p1421
I8
sg15
(lp1422
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1423
g16
(lp1424
S'd'
asg18
S'N'
sS'.thisRepN'
p1425
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1426
I3
sS'.thisN'
p1427
I168
sS'.thisIndex'
p1428
I3
sg15
(lp1429
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I3
sa(dp1430
g16
(lp1431
S'd'
asg18
S'N'
sS'.thisRepN'
p1432
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1433
I4
sS'.thisN'
p1434
I169
sS'.thisIndex'
p1435
I8
sg15
(lp1436
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I8
sa(dp1437
g16
(lp1438
S'k'
asg18
S'Y'
sS'.thisRepN'
p1439
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1440
I5
sS'.thisN'
p1441
I170
sS'.thisIndex'
p1442
I6
sg15
(lp1443
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1444
S'space'
p1445
asg95
I6
sa(dp1446
g16
(lp1447
S'd'
asg18
S'N'
sS'.thisRepN'
p1448
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1449
I6
sS'.thisN'
p1450
I171
sS'.thisIndex'
p1451
I10
sg15
(lp1452
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I10
sa(dp1453
g16
(lp1454
S'k'
asg18
S'N'
sS'.thisRepN'
p1455
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1456
I7
sS'.thisN'
p1457
I172
sS'.thisIndex'
p1458
I2
sg15
(lp1459
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1460
g16
(lp1461
S'd'
asg18
S'Y'
sS'.thisRepN'
p1462
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1463
I8
sS'.thisN'
p1464
I173
sS'.thisIndex'
p1465
I8
sg15
(lp1466
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1467
S'space'
p1468
asg95
I8
sa(dp1469
g16
(lp1470
S'd'
asg18
S'Y'
sS'.thisRepN'
p1471
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1472
I9
sS'.thisN'
p1473
I174
sS'.thisIndex'
p1474
I0
sg15
(lp1475
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1476
g16
(lp1477
S'k'
asg18
S'Y'
sS'.thisRepN'
p1478
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1479
I10
sS'.thisN'
p1480
I175
sS'.thisIndex'
p1481
I0
sg15
(lp1482
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1483
S'space'
p1484
asg95
I0
sa(dp1485
g16
(lp1486
S'd'
asg18
S'Y'
sS'.thisRepN'
p1487
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1488
I0
sS'.thisN'
p1489
I176
sS'.thisIndex'
p1490
I3
sg15
(lp1491
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1492
S'space'
p1493
asg95
I3
sa(dp1494
g16
(lp1495
S'k'
asg18
S'N'
sS'.thisRepN'
p1496
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1497
I1
sS'.thisN'
p1498
I177
sS'.thisIndex'
p1499
I2
sg15
(lp1500
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1501
S'space'
p1502
asg95
I2
sa(dp1503
g16
(lp1504
S'k'
asg18
S'Y'
sS'.thisRepN'
p1505
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1506
I2
sS'.thisN'
p1507
I178
sS'.thisIndex'
p1508
I7
sg15
(lp1509
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1510
S'space'
p1511
asg95
I7
sa(dp1512
g16
(lp1513
S'd'
asg18
S'N'
sS'.thisRepN'
p1514
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1515
I3
sS'.thisN'
p1516
I179
sS'.thisIndex'
p1517
I5
sg15
(lp1518
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I5
sa(dp1519
g16
(lp1520
S'd'
asg18
S'Y'
sS'.thisRepN'
p1521
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1522
I4
sS'.thisN'
p1523
I180
sS'.thisIndex'
p1524
I5
sg15
(lp1525
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1526
S'space'
p1527
asg95
I5
sa(dp1528
g16
(lp1529
S'd'
asg18
S'N'
sS'.thisRepN'
p1530
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1531
I5
sS'.thisN'
p1532
I181
sS'.thisIndex'
p1533
I9
sg15
(lp1534
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I9
sa(dp1535
g16
(lp1536
S'd'
asg18
S'N'
sS'.thisRepN'
p1537
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1538
I6
sS'.thisN'
p1539
I182
sS'.thisIndex'
p1540
I7
sg15
(lp1541
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1542
g16
(lp1543
S'd'
asg18
S'Y'
sS'.thisRepN'
p1544
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1545
I7
sS'.thisN'
p1546
I183
sS'.thisIndex'
p1547
I5
sg15
(lp1548
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1549
S'space'
p1550
asg95
I5
sa(dp1551
g16
(lp1552
S'k'
asg18
S'N'
sS'.thisRepN'
p1553
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1554
I8
sS'.thisN'
p1555
I184
sS'.thisIndex'
p1556
I1
sg15
(lp1557
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1558
g16
(lp1559
S'k'
asg18
S'Y'
sS'.thisRepN'
p1560
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1561
I9
sS'.thisN'
p1562
I185
sS'.thisIndex'
p1563
I9
sg15
(lp1564
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1565
S'space'
p1566
asg95
I9
sa(dp1567
g16
(lp1568
S'k'
asg18
S'Y'
sS'.thisRepN'
p1569
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1570
I10
sS'.thisN'
p1571
I186
sS'.thisIndex'
p1572
I10
sg15
(lp1573
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1574
S'space'
p1575
asg95
I10
sa(dp1576
g16
(lp1577
S'k'
asg18
S'N'
sS'.thisRepN'
p1578
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1579
I0
sS'.thisN'
p1580
I187
sS'.thisIndex'
p1581
I2
sg15
(lp1582
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1583
g16
(lp1584
S'k'
asg18
S'N'
sS'.thisRepN'
p1585
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1586
I1
sS'.thisN'
p1587
I188
sS'.thisIndex'
p1588
I6
sg15
(lp1589
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I6
sa(dp1590
g16
(lp1591
S'd'
asg18
S'Y'
sS'.thisRepN'
p1592
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1593
I2
sS'.thisN'
p1594
I189
sS'.thisIndex'
p1595
I2
sg15
(lp1596
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1597
S'space'
p1598
asg95
I2
sa(dp1599
g16
(lp1600
S'd'
asg18
S'Y'
sS'.thisRepN'
p1601
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1602
I3
sS'.thisN'
p1603
I190
sS'.thisIndex'
p1604
I7
sg15
(lp1605
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1606
S'space'
p1607
asg95
I7
sa(dp1608
g16
(lp1609
S'd'
asg18
S'N'
sS'.thisRepN'
p1610
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1611
I4
sS'.thisN'
p1612
I191
sS'.thisIndex'
p1613
I6
sg15
(lp1614
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1615
S'space'
p1616
asg95
I6
sa(dp1617
g16
(lp1618
S'd'
asg18
S'N'
sS'.thisRepN'
p1619
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1620
I5
sS'.thisN'
p1621
I192
sS'.thisIndex'
p1622
I2
sg15
(lp1623
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1624
g16
(lp1625
S'd'
asg18
S'Y'
sS'.thisRepN'
p1626
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1627
I6
sS'.thisN'
p1628
I193
sS'.thisIndex'
p1629
I5
sg15
(lp1630
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1631
S'space'
p1632
asg95
I5
sa(dp1633
g16
(lp1634
S'd'
asg18
S'Y'
sS'.thisRepN'
p1635
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1636
I7
sS'.thisN'
p1637
I194
sS'.thisIndex'
p1638
I9
sg15
(lp1639
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1640
S'space'
p1641
asg95
I9
sa(dp1642
g16
(lp1643
S'd'
asg18
S'N'
sS'.thisRepN'
p1644
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1645
I8
sS'.thisN'
p1646
I195
sS'.thisIndex'
p1647
I3
sg15
(lp1648
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I3
sa(dp1649
g16
(lp1650
S'd'
asg18
S'N'
sS'.thisRepN'
p1651
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1652
I9
sS'.thisN'
p1653
I196
sS'.thisIndex'
p1654
I2
sg15
(lp1655
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1656
g16
(lp1657
S'd'
asg18
S'N'
sS'.thisRepN'
p1658
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1659
I10
sS'.thisN'
p1660
I197
sS'.thisIndex'
p1661
I6
sg15
(lp1662
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1663
S'space'
p1664
asg95
I6
sa(dp1665
g16
(lp1666
S'd'
asg18
S'Y'
sS'.thisRepN'
p1667
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1668
I0
sS'.thisN'
p1669
I198
sS'.thisIndex'
p1670
I3
sg15
(lp1671
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1672
S'space'
p1673
asg95
I3
sa(dp1674
g16
(lp1675
S'd'
asg18
S'Y'
sg22
I42
sS'.thisN'
p1676
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1677
I1
sS'.thisRepN'
p1678
I18
sg21
I28
sS'.thisIndex'
p1679
I1
sg23
I23
sg15
(lp1680
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1681
S'space'
p1682
asg95
I1
sa(dp1683
g16
(lp1684
S'd'
asg95
I3
sS'.thisRepN'
p1685
I18
sg30
VF
sg31
g32
sS'.thisTrialN'
p1686
I2
sS'.thisN'
p1687
I200
sS'.thisIndex'
p1688
I3
sg15
(lp1689
S'd'
asg17
S'Y'
sg14
I5
sa(dp1690
g16
(lp1691
S'd'
asg95
I1
sS'.thisRepN'
p1692
I18
sg30
VF
sg31
g32
sS'.thisTrialN'
p1693
I3
sS'.thisN'
p1694
I201
sS'.thisIndex'
p1695
I1
sg15
(lp1696
S'd'
asg17
S'Y'
sg14
I5
sa(dp1697
g16
(lp1698
S'k'
asg18
S'N'
sS'.thisRepN'
p1699
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1700
I4
sS'.thisN'
p1701
I202
sS'.thisIndex'
p1702
I3
sg15
(lp1703
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I3
sa(dp1704
g16
(lp1705
S'k'
asg18
S'N'
sS'.thisRepN'
p1706
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1707
I5
sS'.thisN'
p1708
I203
sS'.thisIndex'
p1709
I6
sg15
(lp1710
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I6
sa(dp1711
g16
(lp1712
S'k'
asg18
S'Y'
sS'.thisRepN'
p1713
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1714
I6
sS'.thisN'
p1715
I204
sS'.thisIndex'
p1716
I9
sg15
(lp1717
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1718
S'space'
p1719
asg95
I9
sa(dp1720
g16
(lp1721
S'd'
asg18
S'N'
sS'.thisRepN'
p1722
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1723
I7
sS'.thisN'
p1724
I205
sS'.thisIndex'
p1725
I1
sg15
(lp1726
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1727
g16
(lp1728
S'd'
asg18
S'N'
sS'.thisRepN'
p1729
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1730
I8
sS'.thisN'
p1731
I206
sS'.thisIndex'
p1732
I9
sg15
(lp1733
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1734
g16
(lp1735
S'd'
asg18
S'Y'
sS'.thisRepN'
p1736
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1737
I9
sS'.thisN'
p1738
I207
sS'.thisIndex'
p1739
I1
sg15
(lp1740
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1741
S'space'
p1742
asg95
I1
sa(dp1743
g16
(lp1744
S'd'
asg18
S'N'
sS'.thisRepN'
p1745
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1746
I10
sS'.thisN'
p1747
I208
sS'.thisIndex'
p1748
I5
sg15
(lp1749
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1750
g16
(lp1751
S'd'
asg18
S'N'
sS'.thisRepN'
p1752
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1753
I0
sS'.thisN'
p1754
I209
sS'.thisIndex'
p1755
I7
sg15
(lp1756
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1757
g16
(lp1758
S'd'
asg18
S'Y'
sS'.thisRepN'
p1759
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1760
I1
sS'.thisN'
p1761
I210
sS'.thisIndex'
p1762
I7
sg15
(lp1763
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1764
S'space'
p1765
asg95
I7
sa(dp1766
g16
(lp1767
S'k'
asg18
S'N'
sS'.thisRepN'
p1768
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1769
I2
sS'.thisN'
p1770
I211
sS'.thisIndex'
p1771
I0
sg15
(lp1772
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1773
g16
(lp1774
S'd'
asg18
S'N'
sS'.thisRepN'
p1775
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1776
I3
sS'.thisN'
p1777
I212
sS'.thisIndex'
p1778
I8
sg15
(lp1779
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1780
g16
(lp1781
S'k'
asg18
S'N'
sS'.thisRepN'
p1782
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1783
I4
sS'.thisN'
p1784
I213
sS'.thisIndex'
p1785
I5
sg15
(lp1786
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1787
S'space'
p1788
asg95
I5
sa(dp1789
g16
(lp1790
S'k'
asg18
S'Y'
sS'.thisRepN'
p1791
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1792
I5
sS'.thisN'
p1793
I214
sS'.thisIndex'
p1794
I7
sg15
(lp1795
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1796
S'space'
p1797
asg95
I7
sa(dp1798
g16
(lp1799
S'k'
asg18
S'N'
sS'.thisRepN'
p1800
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1801
I6
sS'.thisN'
p1802
I215
sS'.thisIndex'
p1803
I0
sg15
(lp1804
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1805
g16
(lp1806
S'k'
asg18
S'Y'
sS'.thisRepN'
p1807
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1808
I7
sS'.thisN'
p1809
I216
sS'.thisIndex'
p1810
I5
sg15
(lp1811
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1812
S'space'
p1813
asg95
I5
sa(dp1814
g16
(lp1815
S'k'
asg18
S'N'
sS'.thisRepN'
p1816
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1817
I8
sS'.thisN'
p1818
I217
sS'.thisIndex'
p1819
I1
sg15
(lp1820
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I1
sa(dp1821
g16
(lp1822
S'k'
asg18
S'Y'
sS'.thisRepN'
p1823
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1824
I9
sS'.thisN'
p1825
I218
sS'.thisIndex'
p1826
I8
sg15
(lp1827
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1828
S'space'
p1829
asg95
I8
sa(dp1830
g16
(lp1831
S'd'
asg18
S'Y'
sS'.thisRepN'
p1832
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1833
I10
sS'.thisN'
p1834
I219
sS'.thisIndex'
p1835
I1
sg15
(lp1836
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1837
S'space'
p1838
asg95
I1
sa(dp1839
g16
(lp1840
S'k'
asg18
S'N'
sS'.thisRepN'
p1841
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1842
I0
sS'.thisN'
p1843
I220
sS'.thisIndex'
p1844
I7
sg15
(lp1845
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I7
sa(dp1846
g16
(lp1847
S'd'
asg18
S'Y'
sS'.thisRepN'
p1848
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1849
I1
sS'.thisN'
p1850
I221
sS'.thisIndex'
p1851
I10
sg15
(lp1852
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1853
S'space'
p1854
asg95
I10
sa(dp1855
g16
(lp1856
S'd'
asg18
S'Y'
sS'.thisRepN'
p1857
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1858
I2
sS'.thisN'
p1859
I222
sS'.thisIndex'
p1860
I4
sg15
(lp1861
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1862
S'space'
p1863
asg95
I4
sa(dp1864
g16
(lp1865
S'k'
asg18
S'N'
sS'.thisRepN'
p1866
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1867
I3
sS'.thisN'
p1868
I223
sS'.thisIndex'
p1869
I5
sg15
(lp1870
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp1871
g16
(lp1872
S'd'
asg18
S'Y'
sS'.thisRepN'
p1873
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1874
I4
sS'.thisN'
p1875
I224
sS'.thisIndex'
p1876
I10
sg15
(lp1877
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1878
S'space'
p1879
asg95
I10
sa(dp1880
g16
(lp1881
S'd'
asg18
S'Y'
sS'.thisRepN'
p1882
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1883
I5
sS'.thisN'
p1884
I225
sS'.thisIndex'
p1885
I0
sg15
(lp1886
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1887
S'space'
p1888
asg95
I0
sa(dp1889
g16
(lp1890
S'd'
asg18
S'N'
sS'.thisRepN'
p1891
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1892
I6
sS'.thisN'
p1893
I226
sS'.thisIndex'
p1894
I3
sg15
(lp1895
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1896
g16
(lp1897
S'k'
asg18
S'N'
sS'.thisRepN'
p1898
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1899
I7
sS'.thisN'
p1900
I227
sS'.thisIndex'
p1901
I4
sg15
(lp1902
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I4
sa(dp1903
g16
(lp1904
S'd'
asg18
S'N'
sS'.thisRepN'
p1905
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1906
I8
sS'.thisN'
p1907
I228
sS'.thisIndex'
p1908
I9
sg15
(lp1909
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1910
g16
(lp1911
S'd'
asg18
S'Y'
sS'.thisRepN'
p1912
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1913
I9
sS'.thisN'
p1914
I229
sS'.thisIndex'
p1915
I2
sg15
(lp1916
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1917
S'space'
p1918
asg95
I2
sa(dp1919
g16
(lp1920
S'd'
asg18
S'Y'
sS'.thisRepN'
p1921
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1922
I10
sS'.thisN'
p1923
I230
sS'.thisIndex'
p1924
I10
sg15
(lp1925
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1926
S'space'
p1927
asg95
I10
sa(dp1928
g16
(lp1929
S'k'
asg18
S'N'
sS'.thisRepN'
p1930
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1931
I0
sS'.thisN'
p1932
I231
sS'.thisIndex'
p1933
I9
sg15
(lp1934
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1935
S'space'
p1936
asg95
I9
sa(dp1937
g16
(lp1938
S'd'
asg18
S'N'
sS'.thisRepN'
p1939
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1940
I1
sS'.thisN'
p1941
I232
sS'.thisIndex'
p1942
I5
sg15
(lp1943
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp1944
g16
(lp1945
S'k'
asg18
S'Y'
sS'.thisRepN'
p1946
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1947
I2
sS'.thisN'
p1948
I233
sS'.thisIndex'
p1949
I7
sg15
(lp1950
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1951
S'space'
p1952
asg95
I7
sa(dp1953
g16
(lp1954
S'k'
asg18
S'Y'
sS'.thisRepN'
p1955
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1956
I3
sS'.thisN'
p1957
I234
sS'.thisIndex'
p1958
I7
sg15
(lp1959
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1960
S'space'
p1961
asg95
I7
sa(dp1962
g16
(lp1963
S'd'
asg18
S'Y'
sS'.thisRepN'
p1964
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1965
I4
sS'.thisN'
p1966
I235
sS'.thisIndex'
p1967
I3
sg15
(lp1968
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1969
S'space'
p1970
asg95
I3
sa(dp1971
g16
(lp1972
S'd'
asg18
S'Y'
sS'.thisRepN'
p1973
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1974
I5
sS'.thisN'
p1975
I236
sS'.thisIndex'
p1976
I7
sg15
(lp1977
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1978
S'space'
p1979
asg95
I7
sa(dp1980
g16
(lp1981
S'd'
asg18
S'N'
sS'.thisRepN'
p1982
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1983
I6
sS'.thisN'
p1984
I237
sS'.thisIndex'
p1985
I5
sg15
(lp1986
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp1987
g16
(lp1988
S'k'
asg18
S'N'
sS'.thisRepN'
p1989
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1990
I7
sS'.thisN'
p1991
I238
sS'.thisIndex'
p1992
I6
sg15
(lp1993
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I6
sa(dp1994
g16
(lp1995
S'k'
asg18
S'Y'
sS'.thisRepN'
p1996
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1997
I8
sS'.thisN'
p1998
I239
sS'.thisIndex'
p1999
I8
sg15
(lp2000
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2001
S'space'
p2002
asg95
I8
sa(dp2003
g16
(lp2004
S'd'
asg18
S'N'
sS'.thisRepN'
p2005
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2006
I9
sS'.thisN'
p2007
I240
sS'.thisIndex'
p2008
I4
sg15
(lp2009
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I4
sa(dp2010
g16
(lp2011
S'k'
asg18
S'N'
sS'.thisRepN'
p2012
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2013
I10
sS'.thisN'
p2014
I241
sS'.thisIndex'
p2015
I5
sg15
(lp2016
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp2017
g16
(lp2018
S'k'
asg18
S'Y'
sS'.thisRepN'
p2019
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2020
I0
sS'.thisN'
p2021
I242
sS'.thisIndex'
p2022
I7
sg15
(lp2023
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp2024
S'space'
p2025
asg95
I7
sa(dp2026
g16
(lp2027
S'd'
asg18
S'N'
sS'.thisRepN'
p2028
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2029
I1
sS'.thisN'
p2030
I243
sS'.thisIndex'
p2031
I7
sg15
(lp2032
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I7
sa(dp2033
g16
(lp2034
S'd'
asg18
S'Y'
sS'.thisRepN'
p2035
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2036
I2
sS'.thisN'
p2037
I244
sS'.thisIndex'
p2038
I9
sg15
(lp2039
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp2040
S'space'
p2041
asg95
I9
sa(dp2042
g16
(lp2043
S'd'
asg18
S'Y'
sS'.thisRepN'
p2044
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2045
I3
sS'.thisN'
p2046
I245
sS'.thisIndex'
p2047
I3
sg15
(lp2048
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2049
S'space'
p2050
asg95
I3
sa(dp2051
g16
(lp2052
S'd'
asg18
S'N'
sS'.thisRepN'
p2053
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2054
I4
sS'.thisN'
p2055
I246
sS'.thisIndex'
p2056
I3
sg15
(lp2057
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp2058
g16
(lp2059
S'd'
asg18
S'N'
sS'.thisRepN'
p2060
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2061
I5
sS'.thisN'
p2062
I247
sS'.thisIndex'
p2063
I6
sg15
(lp2064
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I6
sa(dp2065
g16
(lp2066
S'd'
asg18
S'Y'
sS'.thisRepN'
p2067
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2068
I6
sS'.thisN'
p2069
I248
sS'.thisIndex'
p2070
I5
sg15
(lp2071
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2072
S'space'
p2073
asg95
I5
sa(dp2074
g16
(lp2075
S'd'
asg18
S'Y'
sg22
I46
sS'.thisN'
p2076
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2077
I7
sS'.thisRepN'
p2078
I22
sg21
I25
sS'.thisIndex'
p2079
I10
sg23
I23
sg15
(lp2080
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp2081
S'space'
p2082
asg95
I10
sa(dp2083
g16
(lp2084
S'd'
asg95
I2
sS'.thisRepN'
p2085
I22
sg30
VF
sg31
g32
sS'.thisTrialN'
p2086
I8
sS'.thisN'
p2087
I250
sS'.thisIndex'
p2088
I2
sg15
(lp2089
S'k'
asg17
S'N'
sg14
I6
sa(dp2090
g16
(lp2091
S'd'
asg95
I6
sS'.thisRepN'
p2092
I22
sg30
VF
sg31
g32
sS'.thisTrialN'
p2093
I9
sS'.thisN'
p2094
I251
sS'.thisIndex'
p2095
I6
sg15
(lp2096
S'k'
asg17
S'N'
sg14
I6
sa(dp2097
g16
(lp2098
S'k'
asg18
S'N'
sS'.thisRepN'
p2099
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2100
I10
sS'.thisN'
p2101
I252
sS'.thisIndex'
p2102
I3
sg15
(lp2103
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2104
S'space'
p2105
asg95
I3
sa(dp2106
g16
(lp2107
S'k'
asg18
S'Y'
sS'.thisRepN'
p2108
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2109
I0
sS'.thisN'
p2110
I253
sS'.thisIndex'
p2111
I5
sg15
(lp2112
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2113
S'space'
p2114
asg95
I5
sa(dp2115
g16
(lp2116
S'd'
asg18
S'N'
sS'.thisRepN'
p2117
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2118
I1
sS'.thisN'
p2119
I254
sS'.thisIndex'
p2120
I0
sg15
(lp2121
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2122
g16
(lp2123
S'd'
asg18
S'Y'
sS'.thisRepN'
p2124
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2125
I2
sS'.thisN'
p2126
I255
sS'.thisIndex'
p2127
I7
sg15
(lp2128
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2129
S'space'
p2130
asg95
I7
sa(dp2131
g16
(lp2132
S'k'
asg18
S'N'
sS'.thisRepN'
p2133
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2134
I3
sS'.thisN'
p2135
I256
sS'.thisIndex'
p2136
I3
sg15
(lp2137
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2138
g16
(lp2139
S'd'
asg18
S'N'
sS'.thisRepN'
p2140
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2141
I4
sS'.thisN'
p2142
I257
sS'.thisIndex'
p2143
I4
sg15
(lp2144
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2145
g16
(lp2146
S'd'
asg18
S'Y'
sS'.thisRepN'
p2147
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2148
I5
sS'.thisN'
p2149
I258
sS'.thisIndex'
p2150
I5
sg15
(lp2151
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2152
S'space'
p2153
asg95
I5
sa(dp2154
g16
(lp2155
S'k'
asg18
S'Y'
sS'.thisRepN'
p2156
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2157
I6
sS'.thisN'
p2158
I259
sS'.thisIndex'
p2159
I3
sg15
(lp2160
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2161
S'space'
p2162
asg95
I3
sa(dp2163
g16
(lp2164
S'd'
asg18
S'Y'
sS'.thisRepN'
p2165
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2166
I7
sS'.thisN'
p2167
I260
sS'.thisIndex'
p2168
I8
sg15
(lp2169
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I8
sa(dp2170
g16
(lp2171
S'k'
asg18
S'Y'
sS'.thisRepN'
p2172
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2173
I8
sS'.thisN'
p2174
I261
sS'.thisIndex'
p2175
I1
sg15
(lp2176
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2177
g16
(lp2178
S'k'
asg18
S'N'
sS'.thisRepN'
p2179
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2180
I9
sS'.thisN'
p2181
I262
sS'.thisIndex'
p2182
I10
sg15
(lp2183
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2184
g16
(lp2185
S'd'
asg18
S'N'
sS'.thisRepN'
p2186
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2187
I10
sS'.thisN'
p2188
I263
sS'.thisIndex'
p2189
I7
sg15
(lp2190
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2191
g16
(lp2192
S'd'
asg18
S'N'
sS'.thisRepN'
p2193
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2194
I0
sS'.thisN'
p2195
I264
sS'.thisIndex'
p2196
I9
sg15
(lp2197
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2198
g16
(lp2199
S'k'
asg18
S'N'
sS'.thisRepN'
p2200
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2201
I1
sS'.thisN'
p2202
I265
sS'.thisIndex'
p2203
I3
sg15
(lp2204
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2205
g16
(lp2206
S'd'
asg18
S'N'
sS'.thisRepN'
p2207
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2208
I2
sS'.thisN'
p2209
I266
sS'.thisIndex'
p2210
I2
sg15
(lp2211
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I2
sa(dp2212
g16
(lp2213
S'k'
asg18
S'Y'
sS'.thisRepN'
p2214
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2215
I3
sS'.thisN'
p2216
I267
sS'.thisIndex'
p2217
I7
sg15
(lp2218
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2219
S'space'
p2220
asg95
I7
sa(dp2221
g16
(lp2222
S'd'
asg18
S'Y'
sS'.thisRepN'
p2223
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2224
I4
sS'.thisN'
p2225
I268
sS'.thisIndex'
p2226
I5
sg15
(lp2227
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2228
S'k'
asg95
I5
sa(dp2229
g16
(lp2230
S'k'
asg18
S'Y'
sS'.thisRepN'
p2231
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2232
I5
sS'.thisN'
p2233
I269
sS'.thisIndex'
p2234
I10
sg15
(lp2235
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2236
g16
(lp2237
S'd'
asg18
S'Y'
sS'.thisRepN'
p2238
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2239
I6
sS'.thisN'
p2240
I270
sS'.thisIndex'
p2241
I7
sg15
(lp2242
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I7
sa(dp2243
g16
(lp2244
S'k'
asg18
S'N'
sS'.thisRepN'
p2245
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2246
I7
sS'.thisN'
p2247
I271
sS'.thisIndex'
p2248
I5
sg15
(lp2249
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2250
g16
(lp2251
S'd'
asg18
S'Y'
sS'.thisRepN'
p2252
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2253
I8
sS'.thisN'
p2254
I272
sS'.thisIndex'
p2255
I8
sg15
(lp2256
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2257
S'space'
p2258
asg95
I8
sa(dp2259
g16
(lp2260
S'k'
asg18
S'Y'
sS'.thisRepN'
p2261
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2262
I9
sS'.thisN'
p2263
I273
sS'.thisIndex'
p2264
I1
sg15
(lp2265
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2266
S'space'
p2267
asg95
I1
sa(dp2268
g16
(lp2269
S'k'
asg18
S'N'
sS'.thisRepN'
p2270
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2271
I10
sS'.thisN'
p2272
I274
sS'.thisIndex'
p2273
I1
sg15
(lp2274
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2275
g16
(lp2276
S'k'
asg18
S'N'
sS'.thisRepN'
p2277
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2278
I0
sS'.thisN'
p2279
I275
sS'.thisIndex'
p2280
I7
sg15
(lp2281
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I7
sa(dp2282
g16
(lp2283
S'd'
asg18
S'Y'
sS'.thisRepN'
p2284
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2285
I1
sS'.thisN'
p2286
I276
sS'.thisIndex'
p2287
I5
sg15
(lp2288
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2289
S'space'
p2290
asg95
I5
sa(dp2291
g16
(lp2292
S'd'
asg18
S'N'
sS'.thisRepN'
p2293
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2294
I2
sS'.thisN'
p2295
I277
sS'.thisIndex'
p2296
I0
sg15
(lp2297
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2298
g16
(lp2299
S'd'
asg18
S'Y'
sS'.thisRepN'
p2300
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2301
I3
sS'.thisN'
p2302
I278
sS'.thisIndex'
p2303
I6
sg15
(lp2304
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I6
sa(dp2305
g16
(lp2306
S'd'
asg18
S'Y'
sS'.thisRepN'
p2307
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2308
I4
sS'.thisN'
p2309
I279
sS'.thisIndex'
p2310
I8
sg15
(lp2311
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2312
S'space'
p2313
asg95
I8
sa(dp2314
g16
(lp2315
S'k'
asg18
S'Y'
sS'.thisRepN'
p2316
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2317
I5
sS'.thisN'
p2318
I280
sS'.thisIndex'
p2319
I2
sg15
(lp2320
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2321
S'space'
p2322
asg95
I2
sa(dp2323
g16
(lp2324
S'k'
asg18
S'N'
sS'.thisRepN'
p2325
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2326
I6
sS'.thisN'
p2327
I281
sS'.thisIndex'
p2328
I2
sg15
(lp2329
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2330
g16
(lp2331
S'd'
asg18
S'N'
sS'.thisRepN'
p2332
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2333
I7
sS'.thisN'
p2334
I282
sS'.thisIndex'
p2335
I9
sg15
(lp2336
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2337
g16
(lp2338
S'd'
asg18
S'Y'
sS'.thisRepN'
p2339
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2340
I8
sS'.thisN'
p2341
I283
sS'.thisIndex'
p2342
I8
sg15
(lp2343
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2344
S'space'
p2345
asg95
I8
sa(dp2346
g16
(lp2347
S'k'
asg18
S'Y'
sS'.thisRepN'
p2348
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2349
I9
sS'.thisN'
p2350
I284
sS'.thisIndex'
p2351
I0
sg15
(lp2352
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I0
sa(dp2353
g16
(lp2354
S'k'
asg18
S'N'
sS'.thisRepN'
p2355
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2356
I10
sS'.thisN'
p2357
I285
sS'.thisIndex'
p2358
I0
sg15
(lp2359
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2360
g16
(lp2361
S'k'
asg18
S'N'
sS'.thisRepN'
p2362
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2363
I0
sS'.thisN'
p2364
I286
sS'.thisIndex'
p2365
I9
sg15
(lp2366
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2367
g16
(lp2368
S'k'
asg18
S'N'
sS'.thisRepN'
p2369
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2370
I1
sS'.thisN'
p2371
I287
sS'.thisIndex'
p2372
I7
sg15
(lp2373
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2374
g16
(lp2375
S'k'
asg18
S'Y'
sS'.thisRepN'
p2376
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2377
I2
sS'.thisN'
p2378
I288
sS'.thisIndex'
p2379
I7
sg15
(lp2380
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2381
S'space'
p2382
asg95
I7
sa(dp2383
g16
(lp2384
S'k'
asg18
S'N'
sS'.thisRepN'
p2385
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2386
I3
sS'.thisN'
p2387
I289
sS'.thisIndex'
p2388
I2
sg15
(lp2389
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I2
sa(dp2390
g16
(lp2391
S'd'
asg18
S'N'
sS'.thisRepN'
p2392
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2393
I4
sS'.thisN'
p2394
I290
sS'.thisIndex'
p2395
I6
sg15
(lp2396
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I6
sa(dp2397
g16
(lp2398
S'd'
asg18
S'N'
sS'.thisRepN'
p2399
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2400
I5
sS'.thisN'
p2401
I291
sS'.thisIndex'
p2402
I9
sg15
(lp2403
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2404
g16
(lp2405
S'd'
asg18
S'Y'
sS'.thisRepN'
p2406
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2407
I6
sS'.thisN'
p2408
I292
sS'.thisIndex'
p2409
I2
sg15
(lp2410
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2411
S'space'
p2412
asg95
I2
sa(dp2413
g16
(lp2414
S'k'
asg18
S'N'
sS'.thisRepN'
p2415
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2416
I7
sS'.thisN'
p2417
I293
sS'.thisIndex'
p2418
I2
sg15
(lp2419
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2420
g16
(lp2421
S'd'
asg18
S'N'
sS'.thisRepN'
p2422
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2423
I8
sS'.thisN'
p2424
I294
sS'.thisIndex'
p2425
I1
sg15
(lp2426
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2427
g16
(lp2428
S'k'
asg18
S'Y'
sS'.thisRepN'
p2429
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2430
I9
sS'.thisN'
p2431
I295
sS'.thisIndex'
p2432
I5
sg15
(lp2433
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2434
S'space'
p2435
asg95
I5
sa(dp2436
g16
(lp2437
S'd'
asg18
S'N'
sS'.thisRepN'
p2438
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2439
I10
sS'.thisN'
p2440
I296
sS'.thisIndex'
p2441
I7
sg15
(lp2442
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I7
sa(dp2443
g16
(lp2444
S'd'
asg18
S'Y'
sS'.thisRepN'
p2445
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2446
I0
sS'.thisN'
p2447
I297
sS'.thisIndex'
p2448
I7
sg15
(lp2449
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2450
S'space'
p2451
asg95
I7
sa(dp2452
g16
(lp2453
S'k'
asg18
S'N'
sS'.thisRepN'
p2454
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2455
I1
sS'.thisN'
p2456
I298
sS'.thisIndex'
p2457
I0
sg15
(lp2458
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I0
sa(dp2459
g16
(lp2460
S'k'
asg18
S'Y'
sg22
I40
sS'.thisN'
p2461
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2462
I2
sS'.thisRepN'
p2463
I27
sg21
I23
sS'.thisIndex'
p2464
I3
sg23
I23
sg15
(lp2465
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2466
S'space'
p2467
asg95
I3
sa(dp2468
g16
(lp2469
S'd'
asg95
I8
sS'.thisRepN'
p2470
I27
sg30
VF
sg31
g32
sS'.thisTrialN'
p2471
I3
sS'.thisN'
p2472
I300
sS'.thisIndex'
p2473
I8
sg15
(lp2474
S'd'
asg17
S'Y'
sg14
I7
sa(dp2475
g16
(lp2476
S'k'
asg95
I2
sS'.thisRepN'
p2477
I27
sg30
VF
sg31
g32
sS'.thisTrialN'
p2478
I4
sS'.thisN'
p2479
I301
sS'.thisIndex'
p2480
I2
sg15
(lp2481
S'd'
asg17
S'N'
sg14
I7
sa(dp2482
g16
(lp2483
S'k'
asg18
S'Y'
sS'.thisRepN'
p2484
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2485
I5
sS'.thisN'
p2486
I302
sS'.thisIndex'
p2487
I3
sg15
(lp2488
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2489
S'space'
p2490
asg95
I3
sa(dp2491
g16
(lp2492
S'k'
asg18
S'N'
sS'.thisRepN'
p2493
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2494
I6
sS'.thisN'
p2495
I303
sS'.thisIndex'
p2496
I2
sg15
(lp2497
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2498
g16
(lp2499
S'd'
asg18
S'Y'
sS'.thisRepN'
p2500
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2501
I7
sS'.thisN'
p2502
I304
sS'.thisIndex'
p2503
I10
sg15
(lp2504
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2505
S'space'
p2506
asg95
I10
sa(dp2507
g16
(lp2508
S'd'
asg18
S'N'
sS'.thisRepN'
p2509
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2510
I8
sS'.thisN'
p2511
I305
sS'.thisIndex'
p2512
I8
sg15
(lp2513
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2514
S'space'
p2515
asg95
I8
sa(dp2516
g16
(lp2517
S'k'
asg18
S'N'
sS'.thisRepN'
p2518
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2519
I9
sS'.thisN'
p2520
I306
sS'.thisIndex'
p2521
I9
sg15
(lp2522
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I9
sa(dp2523
g16
(lp2524
S'k'
asg18
S'N'
sS'.thisRepN'
p2525
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2526
I10
sS'.thisN'
p2527
I307
sS'.thisIndex'
p2528
I0
sg15
(lp2529
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2530
g16
(lp2531
S'd'
asg18
S'Y'
sS'.thisRepN'
p2532
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2533
I0
sS'.thisN'
p2534
I308
sS'.thisIndex'
p2535
I8
sg15
(lp2536
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2537
S'space'
p2538
asg95
I8
sa(dp2539
g16
(lp2540
S'k'
asg18
S'N'
sS'.thisRepN'
p2541
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2542
I1
sS'.thisN'
p2543
I309
sS'.thisIndex'
p2544
I0
sg15
(lp2545
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I0
sa(dp2546
g16
(lp2547
S'd'
asg18
S'Y'
sS'.thisRepN'
p2548
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2549
I2
sS'.thisN'
p2550
I310
sS'.thisIndex'
p2551
I2
sg15
(lp2552
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2553
S'space'
p2554
asg95
I2
sa(dp2555
g16
(lp2556
S'd'
asg18
S'Y'
sS'.thisRepN'
p2557
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2558
I3
sS'.thisN'
p2559
I311
sS'.thisIndex'
p2560
I6
sg15
(lp2561
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2562
S'space'
p2563
asg95
I6
sa(dp2564
g16
(lp2565
S'k'
asg18
S'Y'
sS'.thisRepN'
p2566
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2567
I4
sS'.thisN'
p2568
I312
sS'.thisIndex'
p2569
I10
sg15
(lp2570
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2571
S'space'
p2572
asg95
I10
sa(dp2573
g16
(lp2574
S'd'
asg18
S'N'
sS'.thisRepN'
p2575
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2576
I5
sS'.thisN'
p2577
I313
sS'.thisIndex'
p2578
I0
sg15
(lp2579
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2580
g16
(lp2581
S'k'
asg18
S'Y'
sS'.thisRepN'
p2582
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2583
I6
sS'.thisN'
p2584
I314
sS'.thisIndex'
p2585
I7
sg15
(lp2586
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2587
S'space'
p2588
asg95
I7
sa(dp2589
g16
(lp2590
S'd'
asg18
S'Y'
sS'.thisRepN'
p2591
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2592
I7
sS'.thisN'
p2593
I315
sS'.thisIndex'
p2594
I1
sg15
(lp2595
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2596
S'space'
p2597
asg95
I1
sa(dp2598
g16
(lp2599
S'k'
asg18
S'Y'
sS'.thisRepN'
p2600
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2601
I8
sS'.thisN'
p2602
I316
sS'.thisIndex'
p2603
I5
sg15
(lp2604
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2605
S'space'
p2606
asg95
I5
sa(dp2607
g16
(lp2608
S'k'
asg18
S'Y'
sS'.thisRepN'
p2609
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2610
I9
sS'.thisN'
p2611
I317
sS'.thisIndex'
p2612
I9
sg15
(lp2613
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2614
S'space'
p2615
asg95
I9
sa(dp2616
g16
(lp2617
S'd'
asg18
S'Y'
sS'.thisRepN'
p2618
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2619
I10
sS'.thisN'
p2620
I318
sS'.thisIndex'
p2621
I6
sg15
(lp2622
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2623
S'space'
p2624
asg95
I6
sa(dp2625
g16
(lp2626
S'd'
asg18
S'N'
sS'.thisRepN'
p2627
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2628
I0
sS'.thisN'
p2629
I319
sS'.thisIndex'
p2630
I10
sg15
(lp2631
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I10
sa(dp2632
g16
(lp2633
S'd'
asg18
S'Y'
sS'.thisRepN'
p2634
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2635
I1
sS'.thisN'
p2636
I320
sS'.thisIndex'
p2637
I5
sg15
(lp2638
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2639
S'space'
p2640
asg95
I5
sa(dp2641
g16
(lp2642
S'k'
asg18
S'N'
sS'.thisRepN'
p2643
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2644
I2
sS'.thisN'
p2645
I321
sS'.thisIndex'
p2646
I3
sg15
(lp2647
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2648
g16
(lp2649
S'k'
asg18
S'Y'
sS'.thisRepN'
p2650
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2651
I3
sS'.thisN'
p2652
I322
sS'.thisIndex'
p2653
I0
sg15
(lp2654
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2655
S'space'
p2656
asg95
I0
sa(dp2657
g16
(lp2658
S'd'
asg18
S'Y'
sS'.thisRepN'
p2659
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2660
I4
sS'.thisN'
p2661
I323
sS'.thisIndex'
p2662
I10
sg15
(lp2663
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2664
S'space'
p2665
asg95
I10
sa(dp2666
g16
(lp2667
S'k'
asg18
S'N'
sS'.thisRepN'
p2668
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2669
I5
sS'.thisN'
p2670
I324
sS'.thisIndex'
p2671
I0
sg15
(lp2672
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2673
S'space'
p2674
asg95
I0
sa(dp2675
g16
(lp2676
S'k'
asg18
S'N'
sS'.thisRepN'
p2677
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2678
I6
sS'.thisN'
p2679
I325
sS'.thisIndex'
p2680
I2
sg15
(lp2681
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2682
g16
(lp2683
S'k'
asg18
S'N'
sS'.thisRepN'
p2684
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2685
I7
sS'.thisN'
p2686
I326
sS'.thisIndex'
p2687
I6
sg15
(lp2688
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I6
sa(dp2689
g16
(lp2690
S'k'
asg18
S'N'
sS'.thisRepN'
p2691
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2692
I8
sS'.thisN'
p2693
I327
sS'.thisIndex'
p2694
I0
sg15
(lp2695
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2696
S'space'
p2697
asg95
I0
sa(dp2698
g16
(lp2699
S'd'
asg18
S'N'
sS'.thisRepN'
p2700
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2701
I9
sS'.thisN'
p2702
I328
sS'.thisIndex'
p2703
I8
sg15
(lp2704
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I8
sa(dp2705
g16
(lp2706
S'd'
asg18
S'Y'
sS'.thisRepN'
p2707
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2708
I10
sS'.thisN'
p2709
I329
sS'.thisIndex'
p2710
I2
sg15
(lp2711
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2712
S'space'
p2713
asg95
I2
sa(dp2714
g16
(lp2715
S'd'
asg18
S'Y'
sS'.thisRepN'
p2716
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2717
I0
sS'.thisN'
p2718
I330
sS'.thisIndex'
p2719
I4
sg15
(lp2720
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2721
S'space'
p2722
asg95
I4
sa(dp2723
g16
(lp2724
S'k'
asg18
S'Y'
sS'.thisRepN'
p2725
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2726
I1
sS'.thisN'
p2727
I331
sS'.thisIndex'
p2728
I3
sg15
(lp2729
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2730
S'space'
p2731
asg95
I3
sa(dp2732
g16
(lp2733
S'k'
asg18
S'Y'
sS'.thisRepN'
p2734
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2735
I2
sS'.thisN'
p2736
I332
sS'.thisIndex'
p2737
I9
sg15
(lp2738
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2739
S'space'
p2740
asg95
I9
sa(dp2741
g16
(lp2742
S'd'
asg18
S'Y'
sS'.thisRepN'
p2743
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2744
I3
sS'.thisN'
p2745
I333
sS'.thisIndex'
p2746
I0
sg15
(lp2747
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2748
S'space'
p2749
asg95
I0
sa(dp2750
g16
(lp2751
S'd'
asg18
S'Y'
sS'.thisRepN'
p2752
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2753
I4
sS'.thisN'
p2754
I334
sS'.thisIndex'
p2755
I4
sg15
(lp2756
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2757
S'space'
p2758
asg95
I4
sa(dp2759
g16
(lp2760
S'k'
asg18
S'N'
sS'.thisRepN'
p2761
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2762
I5
sS'.thisN'
p2763
I335
sS'.thisIndex'
p2764
I2
sg15
(lp2765
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2766
g16
(lp2767
S'k'
asg18
S'Y'
sS'.thisRepN'
p2768
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2769
I6
sS'.thisN'
p2770
I336
sS'.thisIndex'
p2771
I4
sg15
(lp2772
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2773
S'space'
p2774
asg95
I4
sa(dp2775
g16
(lp2776
S'k'
asg18
S'Y'
sS'.thisRepN'
p2777
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2778
I7
sS'.thisN'
p2779
I337
sS'.thisIndex'
p2780
I7
sg15
(lp2781
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2782
S'space'
p2783
asg95
I7
sa(dp2784
g16
(lp2785
S'k'
asg18
S'Y'
sS'.thisRepN'
p2786
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2787
I8
sS'.thisN'
p2788
I338
sS'.thisIndex'
p2789
I4
sg15
(lp2790
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2791
S'space'
p2792
asg95
I4
sa(dp2793
g16
(lp2794
S'k'
asg18
S'N'
sS'.thisRepN'
p2795
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2796
I9
sS'.thisN'
p2797
I339
sS'.thisIndex'
p2798
I3
sg15
(lp2799
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2800
g16
(lp2801
S'k'
asg18
S'N'
sS'.thisRepN'
p2802
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2803
I10
sS'.thisN'
p2804
I340
sS'.thisIndex'
p2805
I10
sg15
(lp2806
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2807
g16
(lp2808
S'd'
asg18
S'N'
sS'.thisRepN'
p2809
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2810
I0
sS'.thisN'
p2811
I341
sS'.thisIndex'
p2812
I5
sg15
(lp2813
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I5
sa(dp2814
g16
(lp2815
S'k'
asg18
S'Y'
sS'.thisRepN'
p2816
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2817
I1
sS'.thisN'
p2818
I342
sS'.thisIndex'
p2819
I1
sg15
(lp2820
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2821
S'space'
p2822
asg95
I1
sa(dp2823
g16
(lp2824
S'k'
asg18
S'Y'
sS'.thisRepN'
p2825
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2826
I2
sS'.thisN'
p2827
I343
sS'.thisIndex'
p2828
I2
sg15
(lp2829
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2830
S'space'
p2831
asg95
I2
sa(dp2832
g16
(lp2833
S'k'
asg18
S'N'
sS'.thisRepN'
p2834
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2835
I3
sS'.thisN'
p2836
I344
sS'.thisIndex'
p2837
I9
sg15
(lp2838
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I9
sa(dp2839
g16
(lp2840
S'k'
asg18
S'N'
sS'.thisRepN'
p2841
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2842
I4
sS'.thisN'
p2843
I345
sS'.thisIndex'
p2844
I5
sg15
(lp2845
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2846
g16
(lp2847
S'd'
asg18
S'N'
sS'.thisRepN'
p2848
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2849
I5
sS'.thisN'
p2850
I346
sS'.thisIndex'
p2851
I1
sg15
(lp2852
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I1
sa(dp2853
g16
(lp2854
S'd'
asg18
S'N'
sS'.thisRepN'
p2855
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2856
I6
sS'.thisN'
p2857
I347
sS'.thisIndex'
p2858
I4
sg15
(lp2859
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2860
g16
(lp2861
S'd'
asg18
S'N'
sS'.thisRepN'
p2862
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2863
I7
sS'.thisN'
p2864
I348
sS'.thisIndex'
p2865
I2
sg15
(lp2866
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2867
g16
(lp2868
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p2869
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2870
I8
sS'.thisRepN'
p2871
I31
sg21
I22
sS'.thisIndex'
p2872
I1
sg23
I25
sg15
(lp2873
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I1
sa(dp2874
g16
(lp2875
S'd'
asg95
I0
sS'.thisRepN'
p2876
I31
sg30
VF
sg31
g32
sS'.thisTrialN'
p2877
I9
sS'.thisN'
p2878
I350
sS'.thisIndex'
p2879
I0
sg15
(lp2880
S'd'
asg17
S'Y'
sg14
I8
sa(dp2881
g16
(lp2882
S'k'
asg95
I9
sS'.thisRepN'
p2883
I31
sg30
VF
sg31
g32
sS'.thisTrialN'
p2884
I10
sS'.thisN'
p2885
I351
sS'.thisIndex'
p2886
I9
sg15
(lp2887
S'k'
asg17
S'Y'
sg14
I8
sa(dp2888
g16
(lp2889
S'k'
asg18
S'Y'
sS'.thisRepN'
p2890
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2891
I0
sS'.thisN'
p2892
I352
sS'.thisIndex'
p2893
I2
sg15
(lp2894
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2895
S'space'
p2896
asg95
I2
sa(dp2897
g16
(lp2898
S'k'
asg18
S'N'
sS'.thisRepN'
p2899
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2900
I1
sS'.thisN'
p2901
I353
sS'.thisIndex'
p2902
I9
sg15
(lp2903
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I9
sa(dp2904
g16
(lp2905
S'k'
asg18
S'Y'
sS'.thisRepN'
p2906
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2907
I2
sS'.thisN'
p2908
I354
sS'.thisIndex'
p2909
I10
sg15
(lp2910
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2911
S'space'
p2912
asg95
I10
sa(dp2913
g16
(lp2914
S'd'
asg18
S'N'
sS'.thisRepN'
p2915
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2916
I3
sS'.thisN'
p2917
I355
sS'.thisIndex'
p2918
I7
sg15
(lp2919
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2920
g16
(lp2921
S'k'
asg18
S'N'
sS'.thisRepN'
p2922
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2923
I4
sS'.thisN'
p2924
I356
sS'.thisIndex'
p2925
I6
sg15
(lp2926
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I6
sa(dp2927
g16
(lp2928
S'k'
asg18
S'N'
sS'.thisRepN'
p2929
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2930
I5
sS'.thisN'
p2931
I357
sS'.thisIndex'
p2932
I4
sg15
(lp2933
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2934
g16
(lp2935
S'd'
asg18
S'N'
sS'.thisRepN'
p2936
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2937
I6
sS'.thisN'
p2938
I358
sS'.thisIndex'
p2939
I0
sg15
(lp2940
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I0
sa(dp2941
g16
(lp2942
S'k'
asg18
S'Y'
sS'.thisRepN'
p2943
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2944
I7
sS'.thisN'
p2945
I359
sS'.thisIndex'
p2946
I0
sg15
(lp2947
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2948
S'space'
p2949
asg95
I0
sa(dp2950
g16
(lp2951
S'k'
asg18
S'N'
sS'.thisRepN'
p2952
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2953
I8
sS'.thisN'
p2954
I360
sS'.thisIndex'
p2955
I9
sg15
(lp2956
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2957
g16
(lp2958
S'd'
asg18
S'Y'
sS'.thisRepN'
p2959
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2960
I9
sS'.thisN'
p2961
I361
sS'.thisIndex'
p2962
I2
sg15
(lp2963
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2964
S'space'
p2965
asg95
I2
sa(dp2966
g16
(lp2967
S'k'
asg18
S'N'
sS'.thisRepN'
p2968
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2969
I10
sS'.thisN'
p2970
I362
sS'.thisIndex'
p2971
I1
sg15
(lp2972
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I1
sa(dp2973
g16
(lp2974
S'k'
asg18
S'Y'
sS'.thisRepN'
p2975
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2976
I0
sS'.thisN'
p2977
I363
sS'.thisIndex'
p2978
I2
sg15
(lp2979
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2980
S'space'
p2981
asg95
I2
sa(dp2982
g16
(lp2983
S'd'
asg18
S'N'
sS'.thisRepN'
p2984
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2985
I1
sS'.thisN'
p2986
I364
sS'.thisIndex'
p2987
I0
sg15
(lp2988
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I0
sa(dp2989
g16
(lp2990
S'k'
asg18
S'N'
sS'.thisRepN'
p2991
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2992
I2
sS'.thisN'
p2993
I365
sS'.thisIndex'
p2994
I4
sg15
(lp2995
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2996
g16
(lp2997
S'k'
asg18
S'N'
sS'.thisRepN'
p2998
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2999
I3
sS'.thisN'
p3000
I366
sS'.thisIndex'
p3001
I0
sg15
(lp3002
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3003
g16
(lp3004
S'k'
asg18
S'N'
sS'.thisRepN'
p3005
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3006
I4
sS'.thisN'
p3007
I367
sS'.thisIndex'
p3008
I0
sg15
(lp3009
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3010
g16
(lp3011
S'd'
asg18
S'N'
sS'.thisRepN'
p3012
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3013
I5
sS'.thisN'
p3014
I368
sS'.thisIndex'
p3015
I1
sg15
(lp3016
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3017
g16
(lp3018
S'k'
asg18
S'Y'
sS'.thisRepN'
p3019
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3020
I6
sS'.thisN'
p3021
I369
sS'.thisIndex'
p3022
I2
sg15
(lp3023
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3024
S'space'
p3025
asg95
I2
sa(dp3026
g16
(lp3027
S'd'
asg18
S'N'
sS'.thisRepN'
p3028
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3029
I7
sS'.thisN'
p3030
I370
sS'.thisIndex'
p3031
I5
sg15
(lp3032
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I5
sa(dp3033
g16
(lp3034
S'k'
asg18
S'N'
sS'.thisRepN'
p3035
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3036
I8
sS'.thisN'
p3037
I371
sS'.thisIndex'
p3038
I0
sg15
(lp3039
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I0
sa(dp3040
g16
(lp3041
S'k'
asg18
S'N'
sS'.thisRepN'
p3042
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3043
I9
sS'.thisN'
p3044
I372
sS'.thisIndex'
p3045
I0
sg15
(lp3046
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3047
S'space'
p3048
asg95
I0
sa(dp3049
g16
(lp3050
S'k'
asg18
S'N'
sS'.thisRepN'
p3051
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3052
I10
sS'.thisN'
p3053
I373
sS'.thisIndex'
p3054
I3
sg15
(lp3055
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3056
g16
(lp3057
S'd'
asg18
S'Y'
sS'.thisRepN'
p3058
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3059
I0
sS'.thisN'
p3060
I374
sS'.thisIndex'
p3061
I8
sg15
(lp3062
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3063
S'space'
p3064
asg95
I8
sa(dp3065
g16
(lp3066
S'k'
asg18
S'Y'
sS'.thisRepN'
p3067
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3068
I1
sS'.thisN'
p3069
I375
sS'.thisIndex'
p3070
I4
sg15
(lp3071
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3072
S'space'
p3073
asg95
I4
sa(dp3074
g16
(lp3075
S'k'
asg18
S'N'
sS'.thisRepN'
p3076
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3077
I2
sS'.thisN'
p3078
I376
sS'.thisIndex'
p3079
I6
sg15
(lp3080
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3081
g16
(lp3082
S'd'
asg18
S'N'
sS'.thisRepN'
p3083
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3084
I3
sS'.thisN'
p3085
I377
sS'.thisIndex'
p3086
I7
sg15
(lp3087
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3088
g16
(lp3089
S'k'
asg18
S'Y'
sS'.thisRepN'
p3090
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3091
I4
sS'.thisN'
p3092
I378
sS'.thisIndex'
p3093
I8
sg15
(lp3094
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3095
S'space'
p3096
asg95
I8
sa(dp3097
g16
(lp3098
S'd'
asg18
S'N'
sS'.thisRepN'
p3099
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3100
I5
sS'.thisN'
p3101
I379
sS'.thisIndex'
p3102
I3
sg15
(lp3103
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3104
S'space'
p3105
asg95
I3
sa(dp3106
g16
(lp3107
S'k'
asg18
S'Y'
sS'.thisRepN'
p3108
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3109
I6
sS'.thisN'
p3110
I380
sS'.thisIndex'
p3111
I5
sg15
(lp3112
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I5
sa(dp3113
g16
(lp3114
S'd'
asg18
S'N'
sS'.thisRepN'
p3115
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3116
I7
sS'.thisN'
p3117
I381
sS'.thisIndex'
p3118
I5
sg15
(lp3119
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I5
sa(dp3120
g16
(lp3121
S'd'
asg18
S'N'
sS'.thisRepN'
p3122
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3123
I8
sS'.thisN'
p3124
I382
sS'.thisIndex'
p3125
I10
sg15
(lp3126
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I10
sa(dp3127
g16
(lp3128
S'k'
asg18
S'Y'
sS'.thisRepN'
p3129
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3130
I9
sS'.thisN'
p3131
I383
sS'.thisIndex'
p3132
I1
sg15
(lp3133
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3134
S'space'
p3135
asg95
I1
sa(dp3136
g16
(lp3137
S'd'
asg18
S'N'
sS'.thisRepN'
p3138
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3139
I10
sS'.thisN'
p3140
I384
sS'.thisIndex'
p3141
I6
sg15
(lp3142
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3143
g16
(lp3144
S'd'
asg18
S'N'
sS'.thisRepN'
p3145
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3146
I0
sS'.thisN'
p3147
I385
sS'.thisIndex'
p3148
I1
sg15
(lp3149
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3150
g16
(lp3151
S'k'
asg18
S'N'
sS'.thisRepN'
p3152
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3153
I1
sS'.thisN'
p3154
I386
sS'.thisIndex'
p3155
I8
sg15
(lp3156
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I8
sa(dp3157
g16
(lp3158
S'd'
asg18
S'Y'
sS'.thisRepN'
p3159
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3160
I2
sS'.thisN'
p3161
I387
sS'.thisIndex'
p3162
I1
sg15
(lp3163
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3164
S'space'
p3165
asg95
I1
sa(dp3166
g16
(lp3167
S'k'
asg18
S'Y'
sS'.thisRepN'
p3168
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3169
I3
sS'.thisN'
p3170
I388
sS'.thisIndex'
p3171
I10
sg15
(lp3172
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3173
S'space'
p3174
asg95
I10
sa(dp3175
g16
(lp3176
S'd'
asg18
S'Y'
sS'.thisRepN'
p3177
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3178
I4
sS'.thisN'
p3179
I389
sS'.thisIndex'
p3180
I7
sg15
(lp3181
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3182
S'space'
p3183
asg95
I7
sa(dp3184
g16
(lp3185
S'k'
asg18
S'Y'
sS'.thisRepN'
p3186
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3187
I5
sS'.thisN'
p3188
I390
sS'.thisIndex'
p3189
I8
sg15
(lp3190
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3191
S'space'
p3192
asg95
I8
sa(dp3193
g16
(lp3194
S'd'
asg18
S'N'
sS'.thisRepN'
p3195
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3196
I6
sS'.thisN'
p3197
I391
sS'.thisIndex'
p3198
I6
sg15
(lp3199
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I6
sa(dp3200
g16
(lp3201
S'd'
asg18
S'N'
sS'.thisRepN'
p3202
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3203
I7
sS'.thisN'
p3204
I392
sS'.thisIndex'
p3205
I4
sg15
(lp3206
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp3207
g16
(lp3208
S'k'
asg18
S'Y'
sS'.thisRepN'
p3209
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3210
I8
sS'.thisN'
p3211
I393
sS'.thisIndex'
p3212
I4
sg15
(lp3213
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3214
S'space'
p3215
asg95
I4
sa(dp3216
g16
(lp3217
S'd'
asg18
S'N'
sS'.thisRepN'
p3218
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3219
I9
sS'.thisN'
p3220
I394
sS'.thisIndex'
p3221
I8
sg15
(lp3222
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3223
g16
(lp3224
S'd'
asg18
S'Y'
sS'.thisRepN'
p3225
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3226
I10
sS'.thisN'
p3227
I395
sS'.thisIndex'
p3228
I3
sg15
(lp3229
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3230
S'space'
p3231
asg95
I3
sa(dp3232
g16
(lp3233
S'k'
asg18
S'Y'
sS'.thisRepN'
p3234
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3235
I0
sS'.thisN'
p3236
I396
sS'.thisIndex'
p3237
I10
sg15
(lp3238
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3239
S'space'
p3240
asg95
I10
sa(dp3241
g16
(lp3242
S'd'
asg18
S'N'
sS'.thisRepN'
p3243
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3244
I1
sS'.thisN'
p3245
I397
sS'.thisIndex'
p3246
I5
sg15
(lp3247
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3248
g16
(lp3249
S'd'
asg18
S'N'
sS'.thisRepN'
p3250
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3251
I2
sS'.thisN'
p3252
I398
sS'.thisIndex'
p3253
I0
sg15
(lp3254
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3255
g16
(lp3256
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p3257
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3258
I3
sS'.thisRepN'
p3259
I36
sg21
I32
sS'.thisIndex'
p3260
I2
sg23
I18
sg15
(lp3261
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3262
g16
(lp3263
S'd'
asg95
I5
sS'.thisRepN'
p3264
I36
sg30
VF
sg31
g32
sS'.thisTrialN'
p3265
I4
sS'.thisN'
p3266
I400
sS'.thisIndex'
p3267
I5
sg15
(lp3268
S'd'
asg17
S'Y'
sg14
I9
sa(dp3269
g16
(lp3270
S'd'
asg95
I4
sS'.thisRepN'
p3271
I36
sg30
VF
sg31
g32
sS'.thisTrialN'
p3272
I5
sS'.thisN'
p3273
I401
sS'.thisIndex'
p3274
I4
sg15
(lp3275
S'd'
asg17
S'Y'
sg14
I9
sa(dp3276
g16
(lp3277
S'd'
asg18
S'Y'
sS'.thisRepN'
p3278
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3279
I6
sS'.thisN'
p3280
I402
sS'.thisIndex'
p3281
I8
sg15
(lp3282
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3283
S'space'
p3284
asg95
I8
sa(dp3285
g16
(lp3286
S'd'
asg18
S'Y'
sS'.thisRepN'
p3287
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3288
I7
sS'.thisN'
p3289
I403
sS'.thisIndex'
p3290
I4
sg15
(lp3291
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3292
S'space'
p3293
asg95
I4
sa(dp3294
g16
(lp3295
S'd'
asg18
S'N'
sS'.thisRepN'
p3296
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3297
I8
sS'.thisN'
p3298
I404
sS'.thisIndex'
p3299
I1
sg15
(lp3300
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3301
g16
(lp3302
S'k'
asg18
S'Y'
sS'.thisRepN'
p3303
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3304
I9
sS'.thisN'
p3305
I405
sS'.thisIndex'
p3306
I9
sg15
(lp3307
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3308
S'space'
p3309
asg95
I9
sa(dp3310
g16
(lp3311
S'k'
asg18
S'Y'
sS'.thisRepN'
p3312
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3313
I10
sS'.thisN'
p3314
I406
sS'.thisIndex'
p3315
I3
sg15
(lp3316
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3317
S'space'
p3318
asg95
I3
sa(dp3319
g16
(lp3320
S'd'
asg18
S'Y'
sS'.thisRepN'
p3321
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3322
I0
sS'.thisN'
p3323
I407
sS'.thisIndex'
p3324
I6
sg15
(lp3325
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3326
S'space'
p3327
asg95
I6
sa(dp3328
g16
(lp3329
S'k'
asg18
S'N'
sS'.thisRepN'
p3330
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3331
I1
sS'.thisN'
p3332
I408
sS'.thisIndex'
p3333
I0
sg15
(lp3334
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3335
g16
(lp3336
S'k'
asg18
S'Y'
sS'.thisRepN'
p3337
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3338
I2
sS'.thisN'
p3339
I409
sS'.thisIndex'
p3340
I8
sg15
(lp3341
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3342
S'space'
p3343
asg95
I8
sa(dp3344
g16
(lp3345
S'd'
asg18
S'N'
sS'.thisRepN'
p3346
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3347
I3
sS'.thisN'
p3348
I410
sS'.thisIndex'
p3349
I10
sg15
(lp3350
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3351
g16
(lp3352
S'd'
asg18
S'N'
sS'.thisRepN'
p3353
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3354
I4
sS'.thisN'
p3355
I411
sS'.thisIndex'
p3356
I1
sg15
(lp3357
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3358
g16
(lp3359
S'd'
asg18
S'N'
sS'.thisRepN'
p3360
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3361
I5
sS'.thisN'
p3362
I412
sS'.thisIndex'
p3363
I5
sg15
(lp3364
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3365
g16
(lp3366
S'd'
asg18
S'N'
sS'.thisRepN'
p3367
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3368
I6
sS'.thisN'
p3369
I413
sS'.thisIndex'
p3370
I0
sg15
(lp3371
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3372
g16
(lp3373
S'k'
asg18
S'N'
sS'.thisRepN'
p3374
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3375
I7
sS'.thisN'
p3376
I414
sS'.thisIndex'
p3377
I10
sg15
(lp3378
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3379
g16
(lp3380
S'd'
asg18
S'Y'
sS'.thisRepN'
p3381
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3382
I8
sS'.thisN'
p3383
I415
sS'.thisIndex'
p3384
I8
sg15
(lp3385
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3386
S'space'
p3387
asg95
I8
sa(dp3388
g16
(lp3389
S'k'
asg18
S'N'
sS'.thisRepN'
p3390
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3391
I9
sS'.thisN'
p3392
I416
sS'.thisIndex'
p3393
I4
sg15
(lp3394
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3395
g16
(lp3396
S'k'
asg18
S'N'
sS'.thisRepN'
p3397
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3398
I10
sS'.thisN'
p3399
I417
sS'.thisIndex'
p3400
I2
sg15
(lp3401
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3402
g16
(lp3403
S'k'
asg18
S'Y'
sS'.thisRepN'
p3404
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3405
I0
sS'.thisN'
p3406
I418
sS'.thisIndex'
p3407
I9
sg15
(lp3408
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3409
S'space'
p3410
asg95
I9
sa(dp3411
g16
(lp3412
S'k'
asg18
S'Y'
sS'.thisRepN'
p3413
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3414
I1
sS'.thisN'
p3415
I419
sS'.thisIndex'
p3416
I9
sg15
(lp3417
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3418
S'space'
p3419
asg95
I9
sa(dp3420
g16
(lp3421
S'd'
asg18
S'Y'
sS'.thisRepN'
p3422
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3423
I2
sS'.thisN'
p3424
I420
sS'.thisIndex'
p3425
I4
sg15
(lp3426
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3427
S'space'
p3428
asg95
I4
sa(dp3429
g16
(lp3430
S'k'
asg18
S'Y'
sS'.thisRepN'
p3431
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3432
I3
sS'.thisN'
p3433
I421
sS'.thisIndex'
p3434
I10
sg15
(lp3435
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3436
S'space'
p3437
asg95
I10
sa(dp3438
g16
(lp3439
S'k'
asg18
S'N'
sS'.thisRepN'
p3440
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3441
I4
sS'.thisN'
p3442
I422
sS'.thisIndex'
p3443
I8
sg15
(lp3444
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3445
g16
(lp3446
S'k'
asg18
S'Y'
sS'.thisRepN'
p3447
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3448
I5
sS'.thisN'
p3449
I423
sS'.thisIndex'
p3450
I3
sg15
(lp3451
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3452
S'space'
p3453
asg95
I3
sa(dp3454
g16
(lp3455
S'k'
asg18
S'N'
sS'.thisRepN'
p3456
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3457
I6
sS'.thisN'
p3458
I424
sS'.thisIndex'
p3459
I1
sg15
(lp3460
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3461
g16
(lp3462
S'k'
asg18
S'N'
sS'.thisRepN'
p3463
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3464
I7
sS'.thisN'
p3465
I425
sS'.thisIndex'
p3466
I8
sg15
(lp3467
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3468
g16
(lp3469
S'k'
asg18
S'N'
sS'.thisRepN'
p3470
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3471
I8
sS'.thisN'
p3472
I426
sS'.thisIndex'
p3473
I6
sg15
(lp3474
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3475
g16
(lp3476
S'k'
asg18
S'N'
sS'.thisRepN'
p3477
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3478
I9
sS'.thisN'
p3479
I427
sS'.thisIndex'
p3480
I3
sg15
(lp3481
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3482
g16
(lp3483
S'd'
asg18
S'N'
sS'.thisRepN'
p3484
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3485
I10
sS'.thisN'
p3486
I428
sS'.thisIndex'
p3487
I6
sg15
(lp3488
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I6
sa(dp3489
g16
(lp3490
S'd'
asg18
S'N'
sS'.thisRepN'
p3491
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3492
I0
sS'.thisN'
p3493
I429
sS'.thisIndex'
p3494
I5
sg15
(lp3495
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3496
g16
(lp3497
S'k'
asg18
S'Y'
sS'.thisRepN'
p3498
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3499
I1
sS'.thisN'
p3500
I430
sS'.thisIndex'
p3501
I0
sg15
(lp3502
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3503
S'space'
p3504
asg95
I0
sa(dp3505
g16
(lp3506
S'd'
asg18
S'N'
sS'.thisRepN'
p3507
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3508
I2
sS'.thisN'
p3509
I431
sS'.thisIndex'
p3510
I2
sg15
(lp3511
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3512
g16
(lp3513
S'd'
asg18
S'Y'
sS'.thisRepN'
p3514
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3515
I3
sS'.thisN'
p3516
I432
sS'.thisIndex'
p3517
I9
sg15
(lp3518
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3519
S'space'
p3520
asg95
I9
sa(dp3521
g16
(lp3522
S'd'
asg18
S'N'
sS'.thisRepN'
p3523
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3524
I4
sS'.thisN'
p3525
I433
sS'.thisIndex'
p3526
I9
sg15
(lp3527
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I9
sa(dp3528
g16
(lp3529
S'd'
asg18
S'Y'
sS'.thisRepN'
p3530
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3531
I5
sS'.thisN'
p3532
I434
sS'.thisIndex'
p3533
I10
sg15
(lp3534
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3535
S'space'
p3536
asg95
I10
sa(dp3537
g16
(lp3538
S'k'
asg18
S'Y'
sS'.thisRepN'
p3539
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3540
I6
sS'.thisN'
p3541
I435
sS'.thisIndex'
p3542
I1
sg15
(lp3543
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3544
S'space'
p3545
asg95
I1
sa(dp3546
g16
(lp3547
S'k'
asg18
S'N'
sS'.thisRepN'
p3548
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3549
I7
sS'.thisN'
p3550
I436
sS'.thisIndex'
p3551
I2
sg15
(lp3552
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3553
g16
(lp3554
S'k'
asg18
S'Y'
sS'.thisRepN'
p3555
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3556
I8
sS'.thisN'
p3557
I437
sS'.thisIndex'
p3558
I7
sg15
(lp3559
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3560
S'space'
p3561
asg95
I7
sa(dp3562
g16
(lp3563
S'd'
asg18
S'N'
sS'.thisRepN'
p3564
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3565
I9
sS'.thisN'
p3566
I438
sS'.thisIndex'
p3567
I3
sg15
(lp3568
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3569
g16
(lp3570
S'd'
asg18
S'Y'
sS'.thisRepN'
p3571
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3572
I10
sS'.thisN'
p3573
I439
sS'.thisIndex'
p3574
I7
sg15
(lp3575
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3576
S'space'
p3577
asg95
I7
sa(dp3578
g16
(lp3579
S'd'
asg18
S'N'
sS'.thisRepN'
p3580
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3581
I0
sS'.thisN'
p3582
I440
sS'.thisIndex'
p3583
I10
sg15
(lp3584
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3585
g16
(lp3586
S'd'
asg18
S'Y'
sS'.thisRepN'
p3587
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3588
I1
sS'.thisN'
p3589
I441
sS'.thisIndex'
p3590
I9
sg15
(lp3591
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3592
S'space'
p3593
asg95
I9
sa(dp3594
g16
(lp3595
S'k'
asg18
S'Y'
sS'.thisRepN'
p3596
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3597
I2
sS'.thisN'
p3598
I442
sS'.thisIndex'
p3599
I2
sg15
(lp3600
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3601
S'space'
p3602
asg95
I2
sa(dp3603
g16
(lp3604
S'd'
asg18
S'Y'
sS'.thisRepN'
p3605
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3606
I3
sS'.thisN'
p3607
I443
sS'.thisIndex'
p3608
I7
sg15
(lp3609
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3610
S'space'
p3611
asg95
I7
sa(dp3612
g16
(lp3613
S'd'
asg18
S'Y'
sS'.thisRepN'
p3614
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3615
I4
sS'.thisN'
p3616
I444
sS'.thisIndex'
p3617
I2
sg15
(lp3618
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3619
S'space'
p3620
asg95
I2
sa(dp3621
g16
(lp3622
S'd'
asg18
S'Y'
sS'.thisRepN'
p3623
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3624
I5
sS'.thisN'
p3625
I445
sS'.thisIndex'
p3626
I1
sg15
(lp3627
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3628
S'space'
p3629
asg95
I1
sa(dp3630
g16
(lp3631
S'd'
asg18
S'N'
sS'.thisRepN'
p3632
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3633
I6
sS'.thisN'
p3634
I446
sS'.thisIndex'
p3635
I9
sg15
(lp3636
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3637
g16
(lp3638
S'k'
asg18
S'Y'
sS'.thisRepN'
p3639
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3640
I7
sS'.thisN'
p3641
I447
sS'.thisIndex'
p3642
I1
sg15
(lp3643
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3644
S'space'
p3645
asg95
I1
sa(dp3646
g16
(lp3647
S'd'
asg18
S'Y'
sS'.thisRepN'
p3648
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3649
I8
sS'.thisN'
p3650
I448
sS'.thisIndex'
p3651
I2
sg15
(lp3652
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3653
S'space'
p3654
asg95
I2
sa(dp3655
g16
(lp3656
S'k'
asg18
S'N'
sg22
I48
sS'.thisN'
p3657
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3658
I9
sS'.thisRepN'
p3659
I40
sg21
I45
sS'.thisIndex'
p3660
I6
sg23
I25
sg15
(lp3661
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3662
g16
(lp3663
S'k'
asg95
I8
sS'.thisRepN'
p3664
I40
sg30
VF
sg31
g32
sS'.thisTrialN'
p3665
I10
sS'.thisN'
p3666
I450
sS'.thisIndex'
p3667
I8
sg15
(lp3668
S'd'
asg17
S'N'
sg14
I10
sa(dp3669
g16
(lp3670
S'k'
asg95
I6
sS'.thisRepN'
p3671
I41
sg30
VF
sg31
g32
sS'.thisTrialN'
p3672
I0
sS'.thisN'
p3673
I451
sS'.thisIndex'
p3674
I6
sg15
(lp3675
S'd'
asg17
S'N'
sg14
I10
sa(dp3676
g16
(lp3677
S'k'
asg18
S'N'
sS'.thisRepN'
p3678
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3679
I1
sS'.thisN'
p3680
I452
sS'.thisIndex'
p3681
I10
sg15
(lp3682
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3683
g16
(lp3684
S'd'
asg18
S'N'
sS'.thisRepN'
p3685
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3686
I2
sS'.thisN'
p3687
I453
sS'.thisIndex'
p3688
I9
sg15
(lp3689
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3690
g16
(lp3691
S'd'
asg18
S'Y'
sS'.thisRepN'
p3692
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3693
I3
sS'.thisN'
p3694
I454
sS'.thisIndex'
p3695
I5
sg15
(lp3696
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3697
S'space'
p3698
asg95
I5
sa(dp3699
g16
(lp3700
S'd'
asg18
S'N'
sS'.thisRepN'
p3701
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3702
I4
sS'.thisN'
p3703
I455
sS'.thisIndex'
p3704
I6
sg15
(lp3705
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3706
g16
(lp3707
S'k'
asg18
S'Y'
sS'.thisRepN'
p3708
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3709
I5
sS'.thisN'
p3710
I456
sS'.thisIndex'
p3711
I6
sg15
(lp3712
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3713
S'space'
p3714
asg95
I6
sa(dp3715
g16
(lp3716
S'k'
asg18
S'Y'
sS'.thisRepN'
p3717
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3718
I6
sS'.thisN'
p3719
I457
sS'.thisIndex'
p3720
I5
sg15
(lp3721
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3722
S'space'
p3723
asg95
I5
sa(dp3724
g16
(lp3725
S'd'
asg18
S'N'
sS'.thisRepN'
p3726
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3727
I7
sS'.thisN'
p3728
I458
sS'.thisIndex'
p3729
I8
sg15
(lp3730
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3731
g16
(lp3732
S'd'
asg18
S'N'
sS'.thisRepN'
p3733
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3734
I8
sS'.thisN'
p3735
I459
sS'.thisIndex'
p3736
I4
sg15
(lp3737
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I4
sa(dp3738
g16
(lp3739
S'k'
asg18
S'N'
sS'.thisRepN'
p3740
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3741
I9
sS'.thisN'
p3742
I460
sS'.thisIndex'
p3743
I4
sg15
(lp3744
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3745
S'space'
p3746
asg95
I4
sa(dp3747
g16
(lp3748
S'k'
asg18
S'Y'
sS'.thisRepN'
p3749
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3750
I10
sS'.thisN'
p3751
I461
sS'.thisIndex'
p3752
I1
sg15
(lp3753
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3754
S'space'
p3755
asg95
I1
sa(dp3756
g16
(lp3757
S'k'
asg18
S'Y'
sS'.thisRepN'
p3758
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3759
I0
sS'.thisN'
p3760
I462
sS'.thisIndex'
p3761
I8
sg15
(lp3762
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3763
S'space'
p3764
asg95
I8
sa(dp3765
g16
(lp3766
S'k'
asg18
S'Y'
sS'.thisRepN'
p3767
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3768
I1
sS'.thisN'
p3769
I463
sS'.thisIndex'
p3770
I6
sg15
(lp3771
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3772
S'space'
p3773
asg95
I6
sa(dp3774
g16
(lp3775
S'd'
asg18
S'N'
sS'.thisRepN'
p3776
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3777
I2
sS'.thisN'
p3778
I464
sS'.thisIndex'
p3779
I8
sg15
(lp3780
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3781
g16
(lp3782
S'd'
asg18
S'N'
sS'.thisRepN'
p3783
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3784
I3
sS'.thisN'
p3785
I465
sS'.thisIndex'
p3786
I5
sg15
(lp3787
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3788
g16
(lp3789
S'd'
asg18
S'N'
sS'.thisRepN'
p3790
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3791
I4
sS'.thisN'
p3792
I466
sS'.thisIndex'
p3793
I1
sg15
(lp3794
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3795
g16
(lp3796
S'k'
asg18
S'N'
sS'.thisRepN'
p3797
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3798
I5
sS'.thisN'
p3799
I467
sS'.thisIndex'
p3800
I1
sg15
(lp3801
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3802
S'space'
p3803
asg95
I1
sa(dp3804
g16
(lp3805
S'd'
asg18
S'N'
sS'.thisRepN'
p3806
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3807
I6
sS'.thisN'
p3808
I468
sS'.thisIndex'
p3809
I4
sg15
(lp3810
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3811
g16
(lp3812
S'k'
asg18
S'Y'
sS'.thisRepN'
p3813
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3814
I7
sS'.thisN'
p3815
I469
sS'.thisIndex'
p3816
I1
sg15
(lp3817
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3818
S'space'
p3819
asg95
I1
sa(dp3820
g16
(lp3821
S'd'
asg18
S'Y'
sS'.thisRepN'
p3822
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3823
I8
sS'.thisN'
p3824
I470
sS'.thisIndex'
p3825
I4
sg15
(lp3826
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3827
S'space'
p3828
asg95
I4
sa(dp3829
g16
(lp3830
S'd'
asg18
S'N'
sS'.thisRepN'
p3831
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3832
I9
sS'.thisN'
p3833
I471
sS'.thisIndex'
p3834
I4
sg15
(lp3835
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3836
S'space'
p3837
asg95
I4
sa(dp3838
g16
(lp3839
S'd'
asg18
S'Y'
sS'.thisRepN'
p3840
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3841
I10
sS'.thisN'
p3842
I472
sS'.thisIndex'
p3843
I7
sg15
(lp3844
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3845
S'space'
p3846
asg95
I7
sa(dp3847
g16
(lp3848
S'd'
asg18
S'N'
sS'.thisRepN'
p3849
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3850
I0
sS'.thisN'
p3851
I473
sS'.thisIndex'
p3852
I5
sg15
(lp3853
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3854
g16
(lp3855
S'd'
asg18
S'Y'
sS'.thisRepN'
p3856
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3857
I1
sS'.thisN'
p3858
I474
sS'.thisIndex'
p3859
I5
sg15
(lp3860
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3861
S'space'
p3862
asg95
I5
sa(dp3863
g16
(lp3864
S'd'
asg18
S'Y'
sS'.thisRepN'
p3865
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3866
I2
sS'.thisN'
p3867
I475
sS'.thisIndex'
p3868
I2
sg15
(lp3869
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3870
S'space'
p3871
asg95
I2
sa(dp3872
g16
(lp3873
S'd'
asg18
S'N'
sS'.thisRepN'
p3874
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3875
I3
sS'.thisN'
p3876
I476
sS'.thisIndex'
p3877
I10
sg15
(lp3878
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3879
g16
(lp3880
S'k'
asg18
S'Y'
sS'.thisRepN'
p3881
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3882
I4
sS'.thisN'
p3883
I477
sS'.thisIndex'
p3884
I9
sg15
(lp3885
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3886
S'space'
p3887
asg95
I9
sa(dp3888
g16
(lp3889
S'd'
asg18
S'Y'
sS'.thisRepN'
p3890
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3891
I5
sS'.thisN'
p3892
I478
sS'.thisIndex'
p3893
I9
sg15
(lp3894
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3895
S'space'
p3896
asg95
I9
sa(dp3897
g16
(lp3898
S'd'
asg18
S'Y'
sS'.thisRepN'
p3899
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3900
I6
sS'.thisN'
p3901
I479
sS'.thisIndex'
p3902
I7
sg15
(lp3903
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3904
S'space'
p3905
asg95
I7
sa(dp3906
g16
(lp3907
S'k'
asg18
S'Y'
sS'.thisRepN'
p3908
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3909
I7
sS'.thisN'
p3910
I480
sS'.thisIndex'
p3911
I10
sg15
(lp3912
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3913
S'space'
p3914
asg95
I10
sa(dp3915
g16
(lp3916
S'k'
asg18
S'Y'
sS'.thisRepN'
p3917
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3918
I8
sS'.thisN'
p3919
I481
sS'.thisIndex'
p3920
I6
sg15
(lp3921
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3922
S'space'
p3923
asg95
I6
sa(dp3924
g16
(lp3925
S'k'
asg18
S'N'
sS'.thisRepN'
p3926
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3927
I9
sS'.thisN'
p3928
I482
sS'.thisIndex'
p3929
I4
sg15
(lp3930
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3931
g16
(lp3932
S'd'
asg18
S'Y'
sS'.thisRepN'
p3933
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3934
I10
sS'.thisN'
p3935
I483
sS'.thisIndex'
p3936
I10
sg15
(lp3937
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3938
S'space'
p3939
asg95
I10
sa(dp3940
g16
(lp3941
S'd'
asg18
S'N'
sS'.thisRepN'
p3942
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3943
I0
sS'.thisN'
p3944
I484
sS'.thisIndex'
p3945
I0
sg15
(lp3946
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3947
g16
(lp3948
S'd'
asg18
S'Y'
sS'.thisRepN'
p3949
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3950
I1
sS'.thisN'
p3951
I485
sS'.thisIndex'
p3952
I9
sg15
(lp3953
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3954
S'space'
p3955
asg95
I9
sa(dp3956
g16
(lp3957
S'd'
asg18
S'Y'
sS'.thisRepN'
p3958
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3959
I2
sS'.thisN'
p3960
I486
sS'.thisIndex'
p3961
I4
sg15
(lp3962
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3963
S'space'
p3964
asg95
I4
sa(dp3965
g16
(lp3966
S'd'
asg18
S'N'
sS'.thisRepN'
p3967
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3968
I3
sS'.thisN'
p3969
I487
sS'.thisIndex'
p3970
I0
sg15
(lp3971
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3972
S'space'
p3973
asg95
I0
sa(dp3974
g16
(lp3975
S'k'
asg18
S'N'
sS'.thisRepN'
p3976
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3977
I4
sS'.thisN'
p3978
I488
sS'.thisIndex'
p3979
I8
sg15
(lp3980
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3981
g16
(lp3982
S'd'
asg18
S'N'
sS'.thisRepN'
p3983
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3984
I5
sS'.thisN'
p3985
I489
sS'.thisIndex'
p3986
I0
sg15
(lp3987
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3988
g16
(lp3989
S'd'
asg18
S'Y'
sS'.thisRepN'
p3990
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3991
I6
sS'.thisN'
p3992
I490
sS'.thisIndex'
p3993
I10
sg15
(lp3994
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3995
S'space'
p3996
asg95
I10
sa(dp3997
g16
(lp3998
S'd'
asg18
S'Y'
sS'.thisRepN'
p3999
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4000
I7
sS'.thisN'
p4001
I491
sS'.thisIndex'
p4002
I7
sg15
(lp4003
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4004
S'space'
p4005
asg95
I7
sa(dp4006
g16
(lp4007
S'k'
asg18
S'Y'
sS'.thisRepN'
p4008
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4009
I8
sS'.thisN'
p4010
I492
sS'.thisIndex'
p4011
I3
sg15
(lp4012
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4013
S'space'
p4014
asg95
I3
sa(dp4015
g16
(lp4016
S'd'
asg18
S'N'
sS'.thisRepN'
p4017
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4018
I9
sS'.thisN'
p4019
I493
sS'.thisIndex'
p4020
I9
sg15
(lp4021
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp4022
g16
(lp4023
S'k'
asg18
S'N'
sS'.thisRepN'
p4024
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4025
I10
sS'.thisN'
p4026
I494
sS'.thisIndex'
p4027
I0
sg15
(lp4028
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp4029
g16
(lp4030
S'k'
asg18
S'Y'
sS'.thisRepN'
p4031
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4032
I0
sS'.thisN'
p4033
I495
sS'.thisIndex'
p4034
I0
sg15
(lp4035
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4036
S'space'
p4037
asg95
I0
sa(dp4038
g16
(lp4039
S'k'
asg18
S'N'
sS'.thisRepN'
p4040
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4041
I1
sS'.thisN'
p4042
I496
sS'.thisIndex'
p4043
I1
sg15
(lp4044
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp4045
g16
(lp4046
S'd'
asg18
S'Y'
sS'.thisRepN'
p4047
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4048
I2
sS'.thisN'
p4049
I497
sS'.thisIndex'
p4050
I3
sg15
(lp4051
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4052
S'space'
p4053
asg95
I3
sa(dp4054
g16
(lp4055
S'k'
asg18
S'N'
sS'.thisRepN'
p4056
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4057
I3
sS'.thisN'
p4058
I498
sS'.thisIndex'
p4059
I4
sg15
(lp4060
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp4061
g16
(lp4062
S'd'
asg18
S'Y'
sg22
I44
sS'.thisN'
p4063
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4064
I4
sS'.thisRepN'
p4065
I45
sg21
I47
sS'.thisIndex'
p4066
I4
sg23
I25
sg15
(lp4067
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4068
S'space'
p4069
asg95
I4
sa(dp4070
g16
(lp4071
S'k'
asS'.thisIndex'
p4072
I8
sS'.thisRepN'
p4073
I45
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4074
I5
sS'.thisN'
p4075
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4076
S'd'
asg17
S'Y'
sg14
I11
sg95
I8
sa(dp4077
g16
(lp4078
S'd'
asS'.thisIndex'
p4079
I6
sS'.thisRepN'
p4080
I45
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4081
I6
sS'.thisN'
p4082
I501
sg25
S'Y'
sg15
(lp4083
S'k'
asg17
S'Y'
sg14
I11
sg95
I6
sa(dp4084
g16
(lp4085
S'k'
asg18
S'N'
sS'.thisRepN'
p4086
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4087
I7
sS'.thisN'
p4088
I502
sg25
S'Y'
sg15
(lp4089
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4090
I4
sa(dp4091
g16
(lp4092
S'd'
asg18
S'Y'
sS'.thisRepN'
p4093
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4094
I8
sS'.thisN'
p4095
I503
sg25
S'Y'
sg15
(lp4096
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4097
S'space'
p4098
asg95
I8
sS'.thisIndex'
p4099
I8
sa(dp4100
g16
(lp4101
S'd'
asg18
S'Y'
sS'.thisRepN'
p4102
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4103
I9
sS'.thisN'
p4104
I504
sg25
S'Y'
sg15
(lp4105
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4106
S'space'
p4107
asg95
I3
sS'.thisIndex'
p4108
I3
sa(dp4109
g16
(lp4110
S'd'
asg18
S'Y'
sS'.thisRepN'
p4111
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4112
I10
sS'.thisN'
p4113
I505
sg25
S'Y'
sg15
(lp4114
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4115
S'space'
p4116
asg95
I4
sS'.thisIndex'
p4117
I4
sa(dp4118
g16
(lp4119
S'k'
asg18
S'Y'
sS'.thisRepN'
p4120
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4121
I0
sS'.thisN'
p4122
I506
sg25
S'Y'
sg15
(lp4123
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4124
S'space'
p4125
asg95
I2
sS'.thisIndex'
p4126
I2
sa(dp4127
g16
(lp4128
S'k'
asg18
S'Y'
sS'.thisRepN'
p4129
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4130
I1
sS'.thisN'
p4131
I507
sg25
S'Y'
sg15
(lp4132
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4133
S'space'
p4134
asg95
I7
sS'.thisIndex'
p4135
I7
sa(dp4136
g16
(lp4137
S'd'
asg18
S'Y'
sS'.thisRepN'
p4138
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4139
I2
sS'.thisN'
p4140
I508
sg25
S'Y'
sg15
(lp4141
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4142
S'space'
p4143
asg95
I10
sS'.thisIndex'
p4144
I10
sa(dp4145
g16
(lp4146
S'k'
asg18
S'N'
sS'.thisRepN'
p4147
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4148
I3
sS'.thisN'
p4149
I509
sg25
S'Y'
sg15
(lp4150
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4151
I8
sa(dp4152
g16
(lp4153
S'd'
asg18
S'Y'
sS'.thisRepN'
p4154
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4155
I4
sS'.thisN'
p4156
I510
sg25
S'Y'
sg15
(lp4157
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4158
S'space'
p4159
asg95
I2
sS'.thisIndex'
p4160
I2
sa(dp4161
g16
(lp4162
S'd'
asg18
S'N'
sS'.thisRepN'
p4163
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4164
I5
sS'.thisN'
p4165
I511
sg25
S'Y'
sg15
(lp4166
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4167
I6
sa(dp4168
g16
(lp4169
S'd'
asg18
S'Y'
sS'.thisRepN'
p4170
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4171
I6
sS'.thisN'
p4172
I512
sg25
S'Y'
sg15
(lp4173
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4174
S'space'
p4175
asg95
I1
sS'.thisIndex'
p4176
I1
sa(dp4177
g16
(lp4178
S'k'
asg18
S'Y'
sS'.thisRepN'
p4179
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4180
I7
sS'.thisN'
p4181
I513
sg25
S'Y'
sg15
(lp4182
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4183
S'space'
p4184
asg95
I10
sS'.thisIndex'
p4185
I10
sa(dp4186
g16
(lp4187
S'k'
asg18
S'Y'
sS'.thisRepN'
p4188
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4189
I8
sS'.thisN'
p4190
I514
sg25
S'Y'
sg15
(lp4191
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4192
S'space'
p4193
asg95
I10
sS'.thisIndex'
p4194
I10
sa(dp4195
g16
(lp4196
S'k'
asg18
S'Y'
sS'.thisRepN'
p4197
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4198
I9
sS'.thisN'
p4199
I515
sg25
S'Y'
sg15
(lp4200
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4201
S'space'
p4202
asg95
I8
sS'.thisIndex'
p4203
I8
sa(dp4204
g16
(lp4205
S'k'
asg18
S'Y'
sS'.thisRepN'
p4206
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4207
I10
sS'.thisN'
p4208
I516
sg25
S'Y'
sg15
(lp4209
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4210
S'space'
p4211
asg95
I5
sS'.thisIndex'
p4212
I5
sa(dp4213
g16
(lp4214
S'd'
asg18
S'N'
sS'.thisRepN'
p4215
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4216
I0
sS'.thisN'
p4217
I517
sg25
S'Y'
sg15
(lp4218
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4219
I4
sa(dp4220
g16
(lp4221
S'd'
asg18
S'Y'
sS'.thisRepN'
p4222
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4223
I1
sS'.thisN'
p4224
I518
sg25
S'Y'
sg15
(lp4225
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4226
S'space'
p4227
asg95
I3
sS'.thisIndex'
p4228
I3
sa(dp4229
g16
(lp4230
S'd'
asg18
S'Y'
sS'.thisRepN'
p4231
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4232
I2
sS'.thisN'
p4233
I519
sg25
S'Y'
sg15
(lp4234
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4235
S'space'
p4236
asg95
I5
sS'.thisIndex'
p4237
I5
sa(dp4238
g16
(lp4239
S'k'
asg18
S'Y'
sS'.thisRepN'
p4240
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4241
I3
sS'.thisN'
p4242
I520
sg25
S'Y'
sg15
(lp4243
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4244
S'space'
p4245
asg95
I3
sS'.thisIndex'
p4246
I3
sa(dp4247
g16
(lp4248
S'd'
asg18
S'Y'
sS'.thisRepN'
p4249
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4250
I4
sS'.thisN'
p4251
I521
sg25
S'Y'
sg15
(lp4252
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4253
S'space'
p4254
asg95
I1
sS'.thisIndex'
p4255
I1
sa(dp4256
g16
(lp4257
S'd'
asg18
S'Y'
sS'.thisRepN'
p4258
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4259
I5
sS'.thisN'
p4260
I522
sg25
S'Y'
sg15
(lp4261
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4262
S'space'
p4263
asg95
I9
sS'.thisIndex'
p4264
I9
sa(dp4265
g16
(lp4266
S'k'
asg18
S'N'
sS'.thisRepN'
p4267
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4268
I6
sS'.thisN'
p4269
I523
sg25
S'Y'
sg15
(lp4270
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4271
I1
sa(dp4272
g16
(lp4273
S'k'
asg18
S'N'
sS'.thisRepN'
p4274
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4275
I7
sS'.thisN'
p4276
I524
sg25
S'Y'
sg15
(lp4277
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4278
I1
sa(dp4279
g16
(lp4280
S'k'
asg18
S'Y'
sS'.thisRepN'
p4281
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4282
I8
sS'.thisN'
p4283
I525
sg25
S'Y'
sg15
(lp4284
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4285
S'space'
p4286
asg95
I0
sS'.thisIndex'
p4287
I0
sa(dp4288
g16
(lp4289
S'k'
asg18
S'N'
sS'.thisRepN'
p4290
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4291
I9
sS'.thisN'
p4292
I526
sg25
S'Y'
sg15
(lp4293
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4294
I4
sa(dp4295
g16
(lp4296
S'k'
asg18
S'Y'
sS'.thisRepN'
p4297
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4298
I10
sS'.thisN'
p4299
I527
sg25
S'Y'
sg15
(lp4300
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4301
S'space'
p4302
asg95
I8
sS'.thisIndex'
p4303
I8
sa(dp4304
g16
(lp4305
S'k'
asg18
S'Y'
sS'.thisRepN'
p4306
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4307
I0
sS'.thisN'
p4308
I528
sg25
S'Y'
sg15
(lp4309
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4310
S'space'
p4311
asg95
I8
sS'.thisIndex'
p4312
I8
sa(dp4313
g16
(lp4314
S'k'
asg18
S'Y'
sS'.thisRepN'
p4315
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4316
I1
sS'.thisN'
p4317
I529
sg25
S'Y'
sg15
(lp4318
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4319
S'space'
p4320
asg95
I6
sS'.thisIndex'
p4321
I6
sa(dp4322
g16
(lp4323
S'k'
asg18
S'N'
sS'.thisRepN'
p4324
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4325
I2
sS'.thisN'
p4326
I530
sg25
S'Y'
sg15
(lp4327
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4328
I4
sa(dp4329
g16
(lp4330
S'k'
asg18
S'Y'
sS'.thisRepN'
p4331
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4332
I3
sS'.thisN'
p4333
I531
sg25
S'Y'
sg15
(lp4334
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4335
S'space'
p4336
asg95
I9
sS'.thisIndex'
p4337
I9
sa(dp4338
g16
(lp4339
S'k'
asg18
S'N'
sS'.thisRepN'
p4340
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4341
I4
sS'.thisN'
p4342
I532
sg25
S'Y'
sg15
(lp4343
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4344
I0
sa(dp4345
g16
(lp4346
S'd'
asg18
S'N'
sS'.thisRepN'
p4347
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4348
I5
sS'.thisN'
p4349
I533
sg25
S'Y'
sg15
(lp4350
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4351
I3
sa(dp4352
g16
(lp4353
S'k'
asg18
S'Y'
sS'.thisRepN'
p4354
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4355
I6
sS'.thisN'
p4356
I534
sg25
S'Y'
sg15
(lp4357
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4358
S'space'
p4359
asg95
I0
sS'.thisIndex'
p4360
I0
sa(dp4361
g16
(lp4362
S'd'
asg18
S'Y'
sS'.thisRepN'
p4363
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4364
I7
sS'.thisN'
p4365
I535
sg25
S'Y'
sg15
(lp4366
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4367
S'space'
p4368
asg95
I9
sS'.thisIndex'
p4369
I9
sa(dp4370
g16
(lp4371
S'k'
asg18
S'Y'
sS'.thisRepN'
p4372
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4373
I8
sS'.thisN'
p4374
I536
sg25
S'Y'
sg15
(lp4375
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4376
S'space'
p4377
asg95
I8
sS'.thisIndex'
p4378
I8
sa(dp4379
g16
(lp4380
S'k'
asg18
S'N'
sS'.thisRepN'
p4381
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4382
I9
sS'.thisN'
p4383
I537
sg25
S'Y'
sg15
(lp4384
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4385
I1
sa(dp4386
g16
(lp4387
S'd'
asg18
S'N'
sS'.thisRepN'
p4388
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4389
I10
sS'.thisN'
p4390
I538
sg25
S'Y'
sg15
(lp4391
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4392
I10
sa(dp4393
g16
(lp4394
S'k'
asg18
S'N'
sS'.thisRepN'
p4395
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4396
I0
sS'.thisN'
p4397
I539
sg25
S'Y'
sg15
(lp4398
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4399
I5
sa(dp4400
g16
(lp4401
S'k'
asg18
S'N'
sS'.thisRepN'
p4402
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4403
I1
sS'.thisN'
p4404
I540
sg25
S'Y'
sg15
(lp4405
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4406
I2
sa(dp4407
g16
(lp4408
S'd'
asg18
S'N'
sS'.thisRepN'
p4409
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4410
I2
sS'.thisN'
p4411
I541
sg25
S'Y'
sg15
(lp4412
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4413
I3
sa(dp4414
g16
(lp4415
S'k'
asg18
S'N'
sS'.thisRepN'
p4416
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4417
I3
sS'.thisN'
p4418
I542
sg25
S'Y'
sg15
(lp4419
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4420
I1
sa(dp4421
g16
(lp4422
S'k'
asg18
S'N'
sS'.thisRepN'
p4423
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4424
I4
sS'.thisN'
p4425
I543
sg25
S'Y'
sg15
(lp4426
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4427
I9
sa(dp4428
g16
(lp4429
S'd'
asg18
S'N'
sS'.thisRepN'
p4430
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4431
I5
sS'.thisN'
p4432
I544
sg25
S'Y'
sg15
(lp4433
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4434
I3
sa(dp4435
g16
(lp4436
S'k'
asg18
S'N'
sS'.thisRepN'
p4437
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4438
I6
sS'.thisN'
p4439
I545
sg25
S'Y'
sg15
(lp4440
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4441
I4
sa(dp4442
g16
(lp4443
S'k'
asg18
S'N'
sS'.thisRepN'
p4444
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4445
I7
sS'.thisN'
p4446
I546
sg25
S'Y'
sg15
(lp4447
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4448
S'space'
p4449
asg95
I4
sS'.thisIndex'
p4450
I4
sa(dp4451
g16
(lp4452
S'k'
asg18
S'N'
sS'.thisRepN'
p4453
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4454
I8
sS'.thisN'
p4455
I547
sg25
S'Y'
sg15
(lp4456
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4457
I7
sa(dp4458
g16
(lp4459
S'd'
asg18
S'N'
sS'.thisRepN'
p4460
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4461
I9
sS'.thisN'
p4462
I548
sg25
S'Y'
sg15
(lp4463
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4464
I1
sa(dp4465
g16
(lp4466
S'k'
asg18
S'N'
sg22
I47
sg26
S'Y'
sS'.thisN'
p4467
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4468
I10
sS'.thisRepN'
p4469
I49
sg21
I44
sg25
S'Y'
sg23
I25
sg15
(lp4470
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4471
I0
sa(dp4472
g16
(lp4473
S'd'
asS'.thisIndex'
p4474
I10
sS'.thisRepN'
p4475
I50
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4476
I0
sS'.thisN'
p4477
I550
sg25
S'Y'
sg15
(lp4478
S'k'
asg17
S'Y'
sg14
I12
sg95
I10
sa(dp4479
g16
(lp4480
S'k'
asS'.thisIndex'
p4481
I1
sS'.thisRepN'
p4482
I50
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4483
I1
sS'.thisN'
p4484
I551
sg25
S'Y'
sg15
(lp4485
S'd'
asg17
S'Y'
sg14
I12
sg95
I1
sa(dp4486
g16
(lp4487
S'd'
asg18
S'N'
sS'.thisRepN'
p4488
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4489
I2
sS'.thisN'
p4490
I552
sg25
S'Y'
sg15
(lp4491
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4492
I3
sa(dp4493
g16
(lp4494
S'k'
asg18
S'Y'
sS'.thisRepN'
p4495
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4496
I3
sS'.thisN'
p4497
I553
sg25
S'Y'
sg15
(lp4498
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4499
S'space'
p4500
asg95
I8
sS'.thisIndex'
p4501
I8
sa(dp4502
g16
(lp4503
S'k'
asg18
S'Y'
sS'.thisRepN'
p4504
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4505
I4
sS'.thisN'
p4506
I554
sg25
S'Y'
sg15
(lp4507
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4508
S'space'
p4509
asg95
I3
sS'.thisIndex'
p4510
I3
sa(dp4511
g16
(lp4512
S'd'
asg18
S'Y'
sS'.thisRepN'
p4513
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4514
I5
sS'.thisN'
p4515
I555
sg25
S'Y'
sg15
(lp4516
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4517
S'space'
p4518
asg95
I9
sS'.thisIndex'
p4519
I9
sa(dp4520
g16
(lp4521
S'd'
asg18
S'Y'
sS'.thisRepN'
p4522
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4523
I6
sS'.thisN'
p4524
I556
sg25
S'Y'
sg15
(lp4525
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4526
S'space'
p4527
asg95
I4
sS'.thisIndex'
p4528
I4
sa(dp4529
g16
(lp4530
S'k'
asg18
S'N'
sS'.thisRepN'
p4531
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4532
I7
sS'.thisN'
p4533
I557
sg25
S'Y'
sg15
(lp4534
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4535
I3
sa(dp4536
g16
(lp4537
S'k'
asg18
S'Y'
sS'.thisRepN'
p4538
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4539
I8
sS'.thisN'
p4540
I558
sg25
S'Y'
sg15
(lp4541
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4542
S'space'
p4543
asg95
I2
sS'.thisIndex'
p4544
I2
sa(dp4545
g16
(lp4546
S'k'
asg18
S'N'
sS'.thisRepN'
p4547
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4548
I9
sS'.thisN'
p4549
I559
sg25
S'Y'
sg15
(lp4550
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4551
I8
sa(dp4552
g16
(lp4553
S'd'
asg18
S'Y'
sS'.thisRepN'
p4554
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4555
I10
sS'.thisN'
p4556
I560
sg25
S'Y'
sg15
(lp4557
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4558
S'space'
p4559
asg95
I8
sS'.thisIndex'
p4560
I8
sa(dp4561
g16
(lp4562
S'k'
asg18
S'N'
sS'.thisRepN'
p4563
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4564
I0
sS'.thisN'
p4565
I561
sg25
S'Y'
sg15
(lp4566
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4567
I10
sa(dp4568
g16
(lp4569
S'k'
asg18
S'N'
sS'.thisRepN'
p4570
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4571
I1
sS'.thisN'
p4572
I562
sg25
S'Y'
sg15
(lp4573
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4574
I3
sa(dp4575
g16
(lp4576
S'd'
asg18
S'Y'
sS'.thisRepN'
p4577
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4578
I2
sS'.thisN'
p4579
I563
sg25
S'Y'
sg15
(lp4580
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4581
S'space'
p4582
asg95
I9
sS'.thisIndex'
p4583
I9
sa(dp4584
g16
(lp4585
S'd'
asg18
S'N'
sS'.thisRepN'
p4586
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4587
I3
sS'.thisN'
p4588
I564
sg25
S'Y'
sg15
(lp4589
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4590
I3
sa(dp4591
g16
(lp4592
S'k'
asg18
S'Y'
sS'.thisRepN'
p4593
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4594
I4
sS'.thisN'
p4595
I565
sg25
S'Y'
sg15
(lp4596
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4597
S'space'
p4598
asg95
I3
sS'.thisIndex'
p4599
I3
sa(dp4600
g16
(lp4601
S'k'
asg18
S'N'
sS'.thisRepN'
p4602
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4603
I5
sS'.thisN'
p4604
I566
sg25
S'Y'
sg15
(lp4605
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4606
I7
sa(dp4607
g16
(lp4608
S'k'
asg18
S'N'
sS'.thisRepN'
p4609
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4610
I6
sS'.thisN'
p4611
I567
sg25
S'Y'
sg15
(lp4612
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4613
I9
sa(dp4614
g16
(lp4615
S'k'
asg18
S'N'
sS'.thisRepN'
p4616
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4617
I7
sS'.thisN'
p4618
I568
sg25
S'Y'
sg15
(lp4619
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4620
I0
sa(dp4621
g16
(lp4622
S'k'
asg18
S'Y'
sS'.thisRepN'
p4623
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4624
I8
sS'.thisN'
p4625
I569
sg25
S'Y'
sg15
(lp4626
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4627
S'space'
p4628
asg95
I1
sS'.thisIndex'
p4629
I1
sa(dp4630
g16
(lp4631
S'd'
asg18
S'N'
sS'.thisRepN'
p4632
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4633
I9
sS'.thisN'
p4634
I570
sg25
S'Y'
sg15
(lp4635
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4636
I2
sa(dp4637
g16
(lp4638
S'd'
asg18
S'N'
sS'.thisRepN'
p4639
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4640
I10
sS'.thisN'
p4641
I571
sg25
S'Y'
sg15
(lp4642
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4643
I3
sa(dp4644
g16
(lp4645
S'k'
asg18
S'Y'
sS'.thisRepN'
p4646
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4647
I0
sS'.thisN'
p4648
I572
sg25
S'Y'
sg15
(lp4649
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4650
S'space'
p4651
asg95
I1
sS'.thisIndex'
p4652
I1
sa(dp4653
g16
(lp4654
S'k'
asg18
S'Y'
sS'.thisRepN'
p4655
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4656
I1
sS'.thisN'
p4657
I573
sg25
S'Y'
sg15
(lp4658
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4659
S'space'
p4660
asg95
I6
sS'.thisIndex'
p4661
I6
sa(dp4662
g16
(lp4663
S'k'
asg18
S'N'
sS'.thisRepN'
p4664
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4665
I2
sS'.thisN'
p4666
I574
sg25
S'Y'
sg15
(lp4667
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4668
I2
sa(dp4669
g16
(lp4670
S'k'
asg18
S'N'
sS'.thisRepN'
p4671
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4672
I3
sS'.thisN'
p4673
I575
sg25
S'Y'
sg15
(lp4674
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4675
S'space'
p4676
asg95
I0
sS'.thisIndex'
p4677
I0
sa(dp4678
g16
(lp4679
S'd'
asg18
S'N'
sS'.thisRepN'
p4680
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4681
I4
sS'.thisN'
p4682
I576
sg25
S'Y'
sg15
(lp4683
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4684
I5
sa(dp4685
g16
(lp4686
S'k'
asg18
S'N'
sS'.thisRepN'
p4687
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4688
I5
sS'.thisN'
p4689
I577
sg25
S'Y'
sg15
(lp4690
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4691
I8
sa(dp4692
g16
(lp4693
S'k'
asg18
S'Y'
sS'.thisRepN'
p4694
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4695
I6
sS'.thisN'
p4696
I578
sg25
S'Y'
sg15
(lp4697
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4698
S'space'
p4699
asg95
I4
sS'.thisIndex'
p4700
I4
sa(dp4701
g16
(lp4702
S'k'
asg18
S'N'
sS'.thisRepN'
p4703
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4704
I7
sS'.thisN'
p4705
I579
sg25
S'Y'
sg15
(lp4706
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4707
I3
sa(dp4708
g16
(lp4709
S'd'
asg18
S'N'
sS'.thisRepN'
p4710
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4711
I8
sS'.thisN'
p4712
I580
sg25
S'Y'
sg15
(lp4713
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4714
I7
sa(dp4715
g16
(lp4716
S'd'
asg18
S'N'
sS'.thisRepN'
p4717
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4718
I9
sS'.thisN'
p4719
I581
sg25
S'Y'
sg15
(lp4720
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4721
I0
sa(dp4722
g16
(lp4723
S'd'
asg18
S'Y'
sS'.thisRepN'
p4724
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4725
I10
sS'.thisN'
p4726
I582
sg25
S'Y'
sg15
(lp4727
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4728
S'space'
p4729
asg95
I5
sS'.thisIndex'
p4730
I5
sa(dp4731
g16
(lp4732
S'k'
asg18
S'Y'
sS'.thisRepN'
p4733
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4734
I0
sS'.thisN'
p4735
I583
sg25
S'Y'
sg15
(lp4736
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4737
S'space'
p4738
asg95
I2
sS'.thisIndex'
p4739
I2
sa(dp4740
g16
(lp4741
S'd'
asg18
S'N'
sS'.thisRepN'
p4742
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4743
I1
sS'.thisN'
p4744
I584
sg25
S'Y'
sg15
(lp4745
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4746
I6
sa(dp4747
g16
(lp4748
S'k'
asg18
S'N'
sS'.thisRepN'
p4749
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4750
I2
sS'.thisN'
p4751
I585
sg25
S'Y'
sg15
(lp4752
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4753
I4
sa(dp4754
g16
(lp4755
S'k'
asg18
S'N'
sS'.thisRepN'
p4756
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4757
I3
sS'.thisN'
p4758
I586
sg25
S'Y'
sg15
(lp4759
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4760
I2
sa(dp4761
g16
(lp4762
S'd'
asg18
S'Y'
sS'.thisRepN'
p4763
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4764
I4
sS'.thisN'
p4765
I587
sg25
S'Y'
sg15
(lp4766
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4767
S'space'
p4768
asg95
I3
sS'.thisIndex'
p4769
I3
sa(dp4770
g16
(lp4771
S'k'
asg18
S'Y'
sS'.thisRepN'
p4772
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4773
I5
sS'.thisN'
p4774
I588
sg25
S'Y'
sg15
(lp4775
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4776
S'space'
p4777
asg95
I0
sS'.thisIndex'
p4778
I0
sa(dp4779
g16
(lp4780
S'k'
asg18
S'N'
sS'.thisRepN'
p4781
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4782
I6
sS'.thisN'
p4783
I589
sg25
S'Y'
sg15
(lp4784
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4785
S'space'
p4786
asg95
I2
sS'.thisIndex'
p4787
I2
sa(dp4788
g16
(lp4789
S'd'
asg18
S'Y'
sS'.thisRepN'
p4790
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4791
I7
sS'.thisN'
p4792
I590
sg25
S'Y'
sg15
(lp4793
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4794
S'space'
p4795
asg95
I5
sS'.thisIndex'
p4796
I5
sa(dp4797
g16
(lp4798
S'd'
asg18
S'Y'
sS'.thisRepN'
p4799
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4800
I8
sS'.thisN'
p4801
I591
sg25
S'Y'
sg15
(lp4802
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4803
S'space'
p4804
asg95
I6
sS'.thisIndex'
p4805
I6
sa(dp4806
g16
(lp4807
S'd'
asg18
S'N'
sS'.thisRepN'
p4808
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4809
I9
sS'.thisN'
p4810
I592
sg25
S'Y'
sg15
(lp4811
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4812
I2
sa(dp4813
g16
(lp4814
S'k'
asg18
S'Y'
sS'.thisRepN'
p4815
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4816
I10
sS'.thisN'
p4817
I593
sg25
S'Y'
sg15
(lp4818
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4819
S'space'
p4820
asg95
I1
sS'.thisIndex'
p4821
I1
sa(dp4822
g16
(lp4823
S'k'
asg18
S'N'
sS'.thisRepN'
p4824
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4825
I0
sS'.thisN'
p4826
I594
sg25
S'Y'
sg15
(lp4827
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4828
I5
sa(dp4829
g16
(lp4830
S'k'
asg18
S'N'
sS'.thisRepN'
p4831
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4832
I1
sS'.thisN'
p4833
I595
sg25
S'Y'
sg15
(lp4834
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4835
I2
sa(dp4836
g16
(lp4837
S'k'
asg18
S'Y'
sS'.thisRepN'
p4838
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4839
I2
sS'.thisN'
p4840
I596
sg25
S'Y'
sg15
(lp4841
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4842
S'space'
p4843
asg95
I3
sS'.thisIndex'
p4844
I3
sa(dp4845
g16
(lp4846
S'k'
asg18
S'Y'
sS'.thisRepN'
p4847
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4848
I3
sS'.thisN'
p4849
I597
sg25
S'Y'
sg15
(lp4850
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4851
S'space'
p4852
asg95
I4
sS'.thisIndex'
p4853
I4
sa(dp4854
g16
(lp4855
S'k'
asg18
S'Y'
sS'.thisRepN'
p4856
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4857
I4
sS'.thisN'
p4858
I598
sg25
S'Y'
sg15
(lp4859
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4860
S'space'
p4861
asg95
I8
sS'.thisIndex'
p4862
I8
sa(dp4863
g16
(lp4864
S'd'
asg18
S'Y'
sg22
I46
sg26
S'Y'
sS'.thisN'
p4865
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4866
I5
sS'.thisRepN'
p4867
I54
sg21
I48
sg25
S'Y'
sg23
I23
sg15
(lp4868
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4869
S'space'
p4870
asg95
I7
sS'.thisIndex'
p4871
I7
sasS'loops'
p4872
(lp4873
g1
(g35
g3
NtRp4874
(dp4875
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4876
sg40
(lp4877
sg41
I75102512
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4878
g48
g49
(g50
g51
g52
S'b'
tRp4879
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4880
(I1
(I600
I1
tg55
I00
S'\x00\x80\x8dC\x00\x00\xc0@\x00\x00\x08B\x00\x00tB\x00\x00GC\x00\x80\x11D\x00\x00BC\x00\x80\xd8C\x00\x00[C\x00\x80\x0eD\x00\x80\xa1C\x00\x00\xc8C\x00\x00\xd0B\x00\x80\xefC\x00\x00\x1dC\x00\x00\x12C\x00@\x01D\x00\x00\xb8B\x00\x00\xaeC\x00\x80\xceC\x00\x00kC\x00\x00\xd8A\x00\x00\xdeC\x00\x00\x98B\x00\x00\x8bC\x00\x80\tD\x00\x00tC\x00\x80\xbdC\x00\x80\x9bC\x00\x00mC\x00\x00hC\x00\x80\x80C\x00\x00\x80B\x00\x80\xf5C\x00\x00\xdbC\x00\x00\xe5C\x00\x00\xf4B\x00\x80\xdeC\x00\x00\x00D\x00\x00\xc8A\x00\x00\xcaB\x00\x00\xb2B\x00\x00\xc0A\x00\x80\xd7C\x00\x80\x9fC\x00\x00\x0cD\x00\x00\x9aC\x00\x80\xd6C\x00\x00eC\x00\x00\x88C\x00\xc0\x12D\x00\x00\x0bC\x00\x00\xd0A\x00\x80\xf9C\x00\x00\x0bD\x00\x80\xb4C\x00\x00\xc4B\x00\x00\xbbC\x00\x80\xa6C\x00\x000C\x00\x80\xa4C\x00\x00-C\x00\x00\x04C\x00\xc0\x01D\x00\x00\xd6C\x00\x80\xf4C\x00\x00\xb9C\x00\x00\xe8C\x00\x00\xffC\x00\x00\xb3C\x00\x00OC\x00\x00\xb8C\x00\x00\x00B\x00\x00(C\x00\x00HB\x00\x00MC\x00\x000A\x00\x80\xbcC\x00\x00\x10B\x00\x80\xdcC\x00\x00\xa0A\x00\x80\xebC\x00\x80\xc9C\x00\x00\tD\x00\x80\x01D\x00\x00lB\x00@\x11D\x00\x00\tC\x00\x00\xe9C\x00\x80\xedC\x00\x00\x82C\x00\x00\xa4C\x00\x00@@\x00\x00\x7fC\x00\x00QC\x00\x00\x85C\x00\x00=C\x00\x00\xa8A\x00\x80\xcbC\x00\x00\x93C\x00\x80\xc3C\x00\x00\x14D\x00\x00$C\x00\x00\xb0A\x00\x80\xe3C\x00\x00\xc9C\x00\x00\xd9C\x00\x00\xebC\x00\x80\xb1C\x00\x00\xeeC\x00\x00\xd8B\x00\x80\xc1C\x00\x00\x18B\x00\x004C\x00\x80\x83C\x00\x003C\x00\x00\x00C\x00\x00 A\x00\x00fC\x00\x00 B\x00\x80\x91C\x00\x00\x0eC\x00\x00.C\x00\x00\x87C\x00\x80\xfbC\x00\x00\xcdC\x00\x00{C\x00\x80\xc6C\x00\x00\x8eB\x00\x00\xe0A\x00\x00RC\x00\x00\x9fC\x00\x80\x8aC\x00\x00\xe0@\x00\x00\x08D\x00\x00\x94B\x00\x00@C\x00\x80\x02D\x00\x80\xfaC\x00\x80\xf1C\x00\x00\xc4C\x00\x00\xb8A\x00\x00\xecC\x00\x00\nD\x00\x00\xe3C\x00\x00\x91C\x00\x00aC\x00\x00\xadC\x00\x00\x11D\x00\x00bC\x00\x00\xd6B\x00\x80\x8bC\x00\x00\x12D\x00\x00>C\x00\x00\xe0C\x00\x00PC\x00\x00<B\x00\x80\xe8C\x00\x00\xc0C\x00\x00DB\x00\x00\xb6B\x00\xc0\x13D\x00\x00\x84C\x00\x80\xcfC\x00\x004B\x00\x00\x8dC\x00\x00?C\x00\x00\xccB\x00\x00\x10D\x00\x80\xffC\x00\x80\xf8C\x00\x00\x82B\x00\x00\x88A\x00\x00\x01C\x00\x00TC\x00\x80\xf2C\x00\x00IC\x00\x00\xf2C\x00\x00\x94C\x00\x00\xbfC\x00\x00\x98C\x00\x00AC\x00\x00\x9bC\x00\x80\x06D\x00\x00)C\x00\x00\x80A\x00\x00\x86C\x00\x00`A\x00@\x05D\x00\x00\xb6C\x00\x00\xc2B\x00\x00\xd8C\x00\x00\xbcB\x00\x80\xc7C\x00\x00\x14B\x00\x80\xdbC\x00\x00\xf8B\x00\x80\xcdC\x00\x00\xafC\x00\x00\xa5C\x00\x80\xc8C\x00\x00\xe4B\x00\x00\xe8B\x00@\x07D\x00\x80\xf3C\x00\x00\x00@\x00\x80\x9cC\x00\x00\xceB\x00\x80\xe5C\x00\xc0\nD\x00\x00\rD\x00\x80\xaeC\x00\x00&C\x00\x00\xefC\x00\x00\x00A\x00\x00]C\x00\x00\xf8A\x00\x80\x94C\x00\x00@B\x00\x00\rC\x00\x00\xdcC\x00\x00\x04B\x00\x00wC\x00\xc0\x15D\x00\x80\xfcC\x00\x00\xc5C\x00\x00lC\x00\x80\x13D\x00\x007C\x00\x00\xfcB\x00\x00\xdcB\x00\x00xC\x00\x00\xf0B\x00\x80\xc0C\x00\x00+C\x00\x00\xedC\x00\x005C\x00\x00\xd2C\x00\x00zC\x00\x00\x9eB\x00\x00\xa6B\x00\x00pC\x00\x00DC\x00\x80\xddC\x00\x00\xdfC\x00\x00CC\x00\x00\x13C\x00\x00vC\x00\x00\x15C\x00\x00\xb4B\x00\x00\'C\x00\x00sC\x00\x00\x0cC\x00\x00\xc7C\x00\x00\x8aC\x00\x00NC\x00\x00EC\x00\x80\x9dC\x00\x00\xeeB\x00\x00FC\x00\x00\xf3C\x00\x00~C\x00\x00\xd2B\x00\xc0\x05D\x00\x00\xf5C\x00\x00\xe0B\x00\x00TB\x00\x00yC\x00\x00\xa0C\x00\x80\xaaC\x00\x00`B\x00\x80\xc2C\x00\x80\xc5C\x00\x00\xa0B\x00\x00\xceC\x00\x00\x96C\x00\x00`C\x00\x00^C\x00\x00\xa7C\x00\x00\xcaC\x00\x006C\x00\xc0\x0eD\x00\x80\xbeC\x00\x00dC\x00\x00\xfeC\x00@\x02D\x00\x00HC\x00\x00 C\x00\x80\x98C\x00\x00\xfcC\x00\x80\xe2C\x00\x80\xadC\x00\xc0\x0cD\x00\x00\x92C\x00\x00\x81C\x00\x00\xbaB\x00\x80\xf6C\x00\x00\xeaC\x00\x80\xecC\x00\x00uC\x00\x80\x12D\x00\x00\x80C\x00\x00\xf0A\x00\x00XC\x00\x00\xa2B\x00\x00\x99C\x00\x00\xc6B\x00\x00\xf1C\x00\x00\xc2C\x00\x80\rD\x00\x00pA\x00\x80\x0cD\x00\x80\xd9C\x00\x80\x8cC\x00\x80\xa7C\x00\x80\xbaC\x00\x00\xabC\x00\x00\x1eC\x00\x00JC\x00@\x03D\x00\x00}C\x00\x80\xdaC\x00\x80\xabC\x00\x80\xd1C\x00\x00$B\x00\x80\x07D\x00\x80\x0fD\x00@\x0fD\x00\x00\xe4C\x00\x00*C\x00\x00\xfaB\x00\x00\x92B\x00\x00\xe2B\x00\x80\xfeC\x00\x00PA\x00\x00,B\x00\x00\x97C\x00\x80\xd4C\x00\x00\xbaC\x00\x00\x90A\x00\x00\xe7C\x00\x00xB\x00\x00qC\x00\x00nC\x00\x00\x80?\x00\x00\x84B\x00@\tD\x00\x80\x15D\x00\x80\xe4C\x00\x00\x08C\x00\x00_C\x00\x00\xf7C\x00\x80\xbbC\x00\x00\x9cC\x00\x00\\C\x00\x00\x98A\x00\x00;C\x00\x00\xa4B\x00\x00\xc3C\x00\x00\x80@\x00\x00\xc0B\x00\x80\xe7C\x00\x00\x02C\x00\x00\xf2B\x00\x80\xd2C\x00\x00\xcbC\x00\xc0\x00D\x00\x80\x82C\x00\x80\xeeC\x00\x00\x86B\x00\x80\x8fC\x00\x80\xdfC\x00\x00rC\x00\x00\x15D\x00\x80\x81C\x00\xc0\x07D\x00@\x10D\x00\x00\xa9C\x00\xc0\x0fD\x00\x80\x99C\x00\x80\x10D\x00\x00UC\x00\x00@A\x00\x00/C\x00\x00\x0eD\x00\x80\xa2C\x00\x00"C\x00\x00\x16C\x00\x00\x90C\x00@\x14D\x00\x00\x01D\x00\x000B\x00\xc0\x06D\x00\x00\xbdC\x00\x00\x1cB\x00\x80\xccC\x00\x00\xd4C\x00\x00\\B\x00@\x13D\x00\x00\xbcC\x00\xc0\x04D\x00\x80\x93C\x00\x80\x05D\x00\x00\xa3C\x00\x00\xdeB\x00\x00\xfeB\x00\x00<C\x00\x80\x08D\x00\xc0\tD\x00\x00\x17C\x00@\x06D\x00\x00\xa6C\x00\x00\x10A\x00\x00\x1fC\x00\x80\xb2C\x00\x00\xddC\x00\x00\xf8C\x00\x80\x95C\x00\x00\xc6C\x00\x00\x03D\x00\x00\xeaB\x00@\x12D\x00\x00\x89C\x00\x80\xb9C\x00\x00PB\x00\x80\x84C\x00\x80\xb5C\x00@\x04D\x00\x00\x07D\x00\x80\xd0C\x00\x00\xf6B\x00\x00\xa1C\x00\x00!C\x00\x00VC\x00\x00#C\x00\x00\x10C\x00\x00hB\x00\x00\xd0C\x00\x00LC\x00\x00\x90B\x00\x00\x0fC\x00\x80\x97C\x00\x00\xa0@\x00\x80\x92C\x00@\x0cD\x00\x80\xb3C\x00\x80\xb7C\x00\x00\x96B\x00\x00\xbeC\x00\x00\xdaC\x00\x00\xfdC\x00\x00\xccC\x00\x00dB\x00\xc0\x11D\x00\x00jC\x00\x00\xacC\x00\x00\x0fD\x00\x00\x9cB\x00\x00\x05C\x00\x00WC\x00\x00\x11C\x00\x00\x8cB\x00\x00:C\x00\x80\x96C\x00\x80\xe0C\x00\x80\xb8C\x00\x80\x87C\x00\x80\x8eC\x00\x00iC\x00\x00\xd7C\x00\x00,C\x00\x00\xecB\x00\x80\x9eC\x00\x80\xa0C\x00\x80\x04D\x00\x80\xafC\x00\x00\xcfC\x00\x00\x02D\x00@\x15D\x00\x80\xf0C\x00\x00\xb1C\x00\x00\xa8B\x00\x00\xe1C\x00\x80\xe1C\x00\x80\xd5C\x00\x80\x9aC\x00\x00\xf9C\x00\x00pB\x00\x80\xf7C\x00\x00\xd3C\x00\x00\xd1C\x00@\x00D\x00\x00\x06C\x00\x80\xbfC\x00\x00\xfaC\x00\x001C\x00@\nD\x00\x00\x95C\x00\x80\nD\x00\xc0\x08D\x00\x00\xe8A\x00\x002C\x00\x00|B\x00\x00\x1cC\x00\x80\xe9C\x00\x00\x03C\x00\x008B\x00\x00|C\x00\x00\x04D\x00\x00\xa8C\x00\x00LB\x00\x80\x89C\x00\x00\x14C\x00\x00\x1bC\x00\x00\xe6B\x00\x00ZC\x00\x00(B\x00\x00\xaaB\x00\x00\xd5C\x00\x80\xb6C\x00\x00\xb7C\x00\x00\xaaC\x00\x00\xb0C\x00\x00\xaeB\x00\x00XB\x00\x80\x86C\x00\x00\x00\x00\x00\x00\x0cB\x00\x00KC\x00\x80\xe6C\x00\x00\x05D\x00\xc0\x02D\x00\x80\xa3C\x00\xc0\x03D\x00\x00\xf6C\x00\x00\x8aB\x00\x008C\x00\x80\xc4C\x00\x00YC\x00@\rD\x00\xc0\rD\x00\x80\xacC\x00\x00\xc8B\x00\x00\xa2C\x00\x00\xf0C\x00\x80\x88C\x00\x00\xb2C\x00\x00\xacB\x00\x00\xfbC\x00\x00cC\x00\x80\xa8C\x00\x00gC\x00\x00\xbeB\x00\x80\x90C\x00\x00\x9aB\x00\x00\xb4C\x00\x00\x06D\x00@\x08D\x00\x80\xa5C\x00\x00\xf4C\x00\x00\xe6C\x00\x00SC\x00\x00\x1aC\x00\x00\x18C\x00\x80\xeaC\x00\x00\x07C\x00@\x0eD\x00@\x0bD\x00\x00\x13D\x00\x80\xd3C\x00\x00\nC\x00\x00\x8cC\x00\x80\xcaC\x00\x00\xb0B\x00\x00oC\x00\x00\x19C\x00\x80\x00D\x00\x00%C\x00\x80\x03D\x00\x00\x9eC\x00\x80\x14D\x00\x00\xe2C\x00\x80\xfdC\x00\x80\x85C\x00\xc0\x14D\x00\x00\x8fC\x00\x80\xa9C\x00\x00\xc1C\x00\x00\x9dC\x00\x00\xd4B\x00\x80\xb0C\x00\x00\xdaB\x00\xc0\x0bD\x00\x00\x8eC\x00\x00\x88B\x00\x00\x83C\x00\x00\xb5C\x00\xc0\x10D\x00\x009C\x00\x80\x0bD'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4881
(dp4882
g60
(dp4883
g48
I01
sg56
I01
ssg62
g4874
sg63
(lp4884
g48
ag56
asg65
(lp4885
I600
aI1
asbsg67
S'random'
p4886
sg69
g70
(g51
(I0
tS'b'
tRp4887
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4888
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\x0e\x02\x00\x00X\x01\x00\x00\xcd\x00\x00\x00\\\x00\x00\x00g\x01\x00\x00\xba\x01\x00\x00\x01\x00\x00\x00\x85\x00\x00\x00\xd6\x00\x00\x00\x9c\x01\x00\x00u\x00\x00\x00L\x00\x00\x00~\x01\x00\x00N\x01\x00\x00\xbb\x00\x00\x006\x01\x00\x00\xb9\x00\x00\x00\xac\x00\x00\x00S\x01\x00\x00c\x01\x00\x00P\x00\x00\x00a\x00\x00\x00g\x00\x00\x00\x8d\x00\x00\x00*\x00\x00\x00\'\x00\x00\x004\x00\x00\x00\x15\x00\x00\x00\x81\x00\x00\x00\xf4\x01\x00\x00.\x01\x00\x00\xd8\x00\x00\x00H\x00\x00\x00\xdd\x00\x00\x00\x02\x00\x00\x00\x0f\x02\x00\x00N\x00\x00\x00\xc2\x00\x00\x00p\x00\x00\x00\x8a\x01\x00\x00w\x00\x00\x00D\x01\x00\x00\x04\x02\x00\x00O\x01\x00\x00\x87\x01\x00\x00\xa4\x00\x00\x00\xfa\x01\x00\x00\x9c\x00\x00\x00\xda\x00\x00\x00\x9f\x00\x00\x00J\x00\x00\x00\xfe\x01\x00\x00\xa8\x01\x00\x00\n\x01\x00\x00\x0c\x02\x00\x00\x8d\x01\x00\x00\x0e\x01\x00\x00\xc4\x01\x00\x00\xb4\x01\x00\x00U\x00\x00\x00\xe7\x01\x00\x00\x03\x00\x00\x00U\x01\x00\x00\xf6\x01\x00\x00 \x00\x00\x00\xab\x00\x00\x00Y\x01\x00\x00q\x01\x00\x00R\x02\x00\x00\x17\x02\x00\x00\xcd\x01\x00\x00\x80\x00\x00\x00\xb7\x01\x00\x00K\x01\x00\x00\x87\x00\x00\x00\xbf\x01\x00\x00\x17\x00\x00\x00*\x02\x00\x00\xc9\x01\x00\x00\xef\x00\x00\x00\x11\x01\x00\x000\x01\x00\x00e\x01\x00\x00\xf0\x00\x00\x00\xe1\x01\x00\x00\x05\x02\x00\x00#\x02\x00\x00\x0b\x02\x00\x00=\x02\x00\x00)\x00\x00\x00\xf9\x00\x00\x00\xa0\x00\x00\x00\x11\x00\x00\x00\'\x01\x00\x00\xc0\x00\x00\x00(\x02\x00\x00h\x01\x00\x00\xbe\x00\x00\x008\x00\x00\x002\x01\x00\x00\x1e\x02\x00\x00(\x00\x00\x00\xa7\x00\x00\x00\xcf\x00\x00\x00\x0c\x00\x00\x00\x06\x01\x00\x00M\x02\x00\x00\x96\x00\x00\x00n\x00\x00\x00O\x02\x00\x00\xe6\x00\x00\x00\x94\x01\x00\x00\t\x01\x00\x00L\x01\x00\x00\xc9\x00\x00\x00\x02\x02\x00\x00\xca\x00\x00\x00\xa4\x01\x00\x00\xd7\x01\x00\x00\x02\x01\x00\x00\xe8\x00\x00\x00k\x01\x00\x00$\x00\x00\x00\xae\x01\x00\x00\xc4\x00\x00\x00J\x01\x00\x00\xe5\x00\x00\x00\x95\x01\x00\x00t\x00\x00\x00\xad\x00\x00\x00j\x01\x00\x00\xf9\x01\x00\x00>\x00\x00\x00\xca\x01\x00\x00\xec\x01\x00\x005\x02\x00\x00]\x01\x00\x00W\x00\x00\x00:\x02\x00\x003\x00\x00\x00\xfc\x00\x00\x00\xdb\x00\x00\x00y\x00\x00\x00\xb8\x01\x00\x00\xb3\x01\x00\x00\xcc\x01\x00\x00\x0f\x00\x00\x00\xf6\x00\x00\x00\x00\x02\x00\x00\xf8\x00\x00\x00\x83\x01\x00\x00\x99\x01\x00\x003\x02\x00\x00?\x02\x00\x002\x02\x00\x00\x01\x02\x00\x00\xf7\x01\x00\x00\x0e\x00\x00\x00=\x01\x00\x00\x9d\x01\x00\x00\x1f\x01\x00\x00\xb0\x01\x00\x00\x82\x01\x00\x00\xb2\x01\x00\x00f\x00\x00\x00A\x02\x00\x00\xd4\x00\x00\x00\xfa\x00\x00\x00I\x00\x00\x00\xb8\x00\x00\x00I\x01\x00\x00\xea\x00\x00\x00\xd6\x01\x00\x00=\x00\x00\x00z\x00\x00\x00\x7f\x01\x00\x00;\x00\x00\x00\xef\x01\x00\x00\xf5\x01\x00\x00s\x00\x00\x00q\x00\x00\x00\xec\x00\x00\x00\x18\x01\x00\x00\xe4\x00\x00\x00\x18\x02\x00\x00V\x02\x00\x00\xce\x01\x00\x00d\x01\x00\x00\x96\x01\x00\x00`\x00\x00\x00\x99\x00\x00\x00\xa6\x00\x00\x00\x88\x00\x00\x00\xb5\x00\x00\x00\x06\x00\x00\x00\xf5\x00\x00\x00\xf2\x00\x00\x00\x00\x01\x00\x00\x03\x01\x00\x00\x04\x00\x00\x00\x1e\x01\x00\x00\xb0\x00\x00\x00>\x01\x00\x00\x10\x02\x00\x00\xb6\x01\x00\x00K\x00\x00\x00\xff\x00\x00\x00F\x00\x00\x00\x9b\x00\x00\x00^\x00\x00\x00\x82\x00\x00\x001\x02\x00\x00\xae\x00\x00\x00}\x01\x00\x00\xb1\x01\x00\x00\xcb\x01\x00\x00/\x01\x00\x00\x1a\x02\x00\x00\x03\x02\x00\x00\x08\x00\x00\x00b\x01\x00\x00\xd7\x00\x00\x00\x15\x01\x00\x00^\x01\x00\x00\x14\x01\x00\x00\x92\x00\x00\x00\x95\x00\x00\x00%\x02\x00\x00\x1b\x01\x00\x000\x00\x00\x00v\x00\x00\x00\'\x02\x00\x00\x1e\x00\x00\x00\xd4\x01\x00\x00\xc6\x01\x00\x00\x14\x00\x00\x00\xe2\x00\x00\x00\x1d\x00\x00\x00W\x01\x00\x00>\x02\x00\x00\xf1\x00\x00\x00V\x01\x00\x00t\x01\x00\x00\xfb\x00\x00\x00\x1a\x00\x00\x00+\x01\x00\x00\xf7\x00\x00\x00\xde\x00\x00\x00\xe7\x00\x00\x00\x0b\x01\x00\x00\xee\x00\x00\x00~\x00\x00\x00\xfb\x01\x00\x00@\x01\x00\x00\x05\x01\x00\x00]\x00\x00\x00-\x01\x00\x00\x1f\x00\x00\x00&\x01\x00\x00v\x01\x00\x00Z\x00\x00\x00o\x01\x00\x00S\x02\x00\x00r\x00\x00\x00\xa2\x00\x00\x00\xa9\x01\x00\x00_\x00\x00\x00G\x02\x00\x00\xba\x00\x00\x00\r\x02\x00\x00{\x00\x00\x00\xd2\x01\x00\x001\x00\x00\x00!\x02\x00\x00\xa6\x01\x00\x00\xff\x01\x00\x00\xfe\x00\x00\x00\x84\x00\x00\x00\x18\x00\x00\x00\x97\x00\x00\x00;\x02\x00\x009\x01\x00\x00\xa5\x00\x00\x00\x00\x00\x00\x00Q\x02\x00\x00\xd3\x01\x00\x00I\x02\x00\x00r\x01\x00\x00\x84\x01\x00\x00)\x02\x00\x00\x91\x00\x00\x00x\x00\x00\x00%\x01\x00\x00\xbb\x01\x00\x00c\x00\x00\x00\x91\x01\x00\x00\xb2\x00\x00\x00\xd9\x00\x00\x00\xf1\x01\x00\x00\xa1\x01\x00\x00\x13\x01\x00\x00\xcf\x01\x00\x00P\x01\x00\x00\xb9\x01\x00\x00\xb4\x00\x00\x00 \x01\x00\x001\x01\x00\x00{\x01\x00\x00.\x00\x00\x00\xe5\x01\x00\x00\xb6\x00\x00\x00\x1c\x00\x00\x00a\x01\x00\x00\xce\x00\x00\x00L\x02\x00\x00\x01\x01\x00\x00C\x02\x00\x00\xd8\x01\x00\x00\x83\x00\x00\x00,\x00\x00\x00\x0c\x01\x00\x00\xd9\x01\x00\x00\xaf\x01\x00\x00\n\x00\x00\x00\x1f\x02\x00\x00\x81\x01\x00\x00\x93\x01\x00\x00\x14\x02\x00\x00[\x00\x00\x00<\x00\x00\x00\xc7\x00\x00\x00.\x02\x00\x00\x9b\x01\x00\x00:\x00\x00\x00\x16\x01\x00\x00:\x01\x00\x00\xfd\x01\x00\x00&\x02\x00\x00y\x01\x00\x00J\x02\x00\x00\t\x02\x00\x00\r\x01\x00\x00<\x01\x00\x00B\x01\x00\x00\xc7\x01\x00\x00\x1d\x02\x00\x00\x93\x00\x00\x00#\x01\x00\x00\x12\x00\x00\x00\xd3\x00\x00\x00\xc6\x00\x00\x00\xdb\x01\x00\x00\n\x02\x00\x00N\x02\x00\x00\xe0\x01\x00\x00l\x00\x00\x00"\x02\x00\x00\x9e\x01\x00\x00E\x00\x00\x00\xbd\x01\x00\x00+\x02\x00\x007\x00\x00\x00T\x02\x00\x00\xaa\x01\x00\x00\xbd\x00\x00\x00\x07\x02\x00\x00\x08\x02\x00\x00\xbe\x01\x00\x00G\x00\x00\x00\xd1\x01\x00\x00B\x00\x00\x00\xa7\x01\x00\x00R\x01\x00\x00;\x01\x00\x009\x00\x00\x00`\x01\x00\x00\x8f\x01\x00\x00M\x00\x00\x00\x89\x01\x00\x00\x1b\x00\x00\x00\xc0\x01\x00\x00\x1a\x01\x00\x00\xb3\x00\x00\x00\xed\x01\x00\x00\x9e\x00\x00\x00\xe9\x00\x00\x00K\x02\x00\x00o\x00\x00\x004\x01\x00\x00\x0f\x01\x00\x00f\x01\x00\x00d\x00\x00\x00\x8c\x00\x00\x00\x19\x02\x00\x00\xe1\x00\x00\x00\x10\x01\x00\x00\xa2\x01\x00\x00\x7f\x00\x00\x00\xfd\x00\x00\x00\xc1\x00\x00\x00\x0b\x00\x00\x00\xc8\x00\x00\x00i\x00\x00\x00R\x00\x00\x00\x17\x01\x00\x00<\x02\x00\x00m\x01\x00\x00b\x00\x00\x00\xc3\x01\x00\x00\x8b\x01\x00\x00}\x00\x00\x00\xc5\x00\x00\x00\x12\x01\x00\x00\x13\x00\x00\x00\xdc\x01\x00\x00\xa3\x00\x00\x00\xb5\x01\x00\x00\xad\x01\x00\x00\xea\x01\x00\x00C\x01\x00\x00\xed\x00\x00\x00l\x01\x00\x00\xe9\x01\x00\x009\x02\x00\x00\x8c\x01\x00\x00Q\x01\x00\x00\x06\x02\x00\x00\xe4\x01\x00\x00@\x00\x00\x00/\x00\x00\x00\xd5\x01\x00\x00+\x00\x00\x00\xbf\x00\x00\x00\x07\x00\x00\x00j\x00\x00\x008\x01\x00\x00\xc1\x01\x00\x00A\x01\x00\x00"\x00\x00\x00\xc3\x00\x00\x00\xdc\x00\x00\x00O\x00\x00\x00\x9f\x01\x00\x00\xf3\x00\x00\x00\x16\x00\x00\x00%\x00\x00\x00\xf4\x00\x00\x00s\x01\x00\x00\x9a\x00\x00\x00\xd0\x01\x00\x00\xe2\x01\x00\x00\xe3\x01\x00\x00E\x02\x00\x00"\x01\x00\x00\x90\x00\x00\x00h\x00\x00\x00H\x01\x00\x00\\\x01\x00\x00#\x00\x00\x00\xd0\x00\x00\x000\x02\x00\x00\x11\x02\x00\x00T\x01\x00\x00i\x01\x00\x00C\x00\x00\x00\x9d\x00\x00\x00X\x00\x00\x00\xf8\x01\x00\x00)\x01\x00\x004\x02\x00\x00k\x00\x00\x00Q\x00\x00\x00\x8e\x00\x00\x00*\x01\x00\x00\xeb\x00\x00\x00Y\x00\x00\x00m\x00\x00\x00p\x01\x00\x00\xd5\x00\x00\x00\r\x00\x00\x00 \x02\x00\x00\xdf\x01\x00\x003\x01\x00\x00\x8b\x00\x00\x00\xb1\x00\x00\x00\xaf\x00\x00\x00\x04\x01\x00\x00\xcc\x00\x00\x00/\x02\x00\x00A\x00\x00\x00\x08\x01\x00\x00!\x00\x00\x00\x16\x02\x00\x00(\x01\x00\x00_\x01\x00\x00\xe8\x01\x00\x00\xa0\x01\x00\x00\xaa\x00\x00\x00\xe6\x01\x00\x005\x00\x00\x00\xee\x01\x00\x00\x8a\x00\x00\x00$\x02\x00\x00|\x00\x00\x00!\x01\x00\x00\xe0\x00\x00\x00\xc2\x01\x00\x00F\x02\x00\x00\x1c\x01\x00\x00M\x01\x00\x00D\x00\x00\x00\xa9\x00\x00\x00&\x00\x00\x00\xeb\x01\x00\x00@\x02\x00\x00n\x01\x00\x00\x86\x01\x00\x00\x10\x00\x00\x00T\x00\x00\x00?\x00\x00\x00\xdd\x01\x00\x00\x1d\x01\x00\x00\x89\x00\x00\x00\x13\x02\x00\x00\xa3\x01\x00\x00?\x01\x00\x00B\x02\x00\x00\x15\x02\x00\x00\xfc\x01\x00\x00\xab\x01\x00\x00\xda\x01\x00\x00\x90\x01\x00\x00\x12\x02\x00\x00\xbc\x00\x00\x00\x92\x01\x00\x00\x07\x01\x00\x00,\x02\x00\x00\x9a\x01\x00\x00\xb7\x00\x00\x00\x88\x01\x00\x00\xac\x01\x00\x00\xcb\x00\x00\x00E\x01\x00\x00w\x01\x00\x00\x86\x00\x00\x00-\x02\x00\x00\x97\x01\x00\x00\xf3\x01\x00\x00S\x00\x00\x00Z\x01\x00\x00\x19\x00\x00\x00\x98\x01\x00\x00\x8f\x00\x00\x00\xf0\x01\x00\x00\xf2\x01\x00\x00\xd1\x00\x00\x006\x00\x00\x007\x02\x00\x00W\x02\x00\x00P\x02\x00\x00-\x00\x00\x00\xbc\x01\x00\x007\x01\x00\x00$\x01\x00\x00\xd2\x00\x00\x00\x1b\x02\x00\x005\x01\x00\x00\x1c\x02\x00\x00\x80\x01\x00\x006\x02\x00\x00\t\x00\x00\x00\x19\x01\x00\x00\xc8\x01\x00\x00G\x01\x00\x00F\x01\x00\x00z\x01\x00\x00\xa8\x00\x00\x00x\x01\x00\x00|\x01\x00\x00U\x02\x00\x00\x94\x00\x00\x00V\x00\x00\x00\x05\x00\x00\x00\xc5\x01\x00\x00\x98\x00\x00\x00\xa5\x01\x00\x00,\x01\x00\x002\x00\x00\x008\x02\x00\x00\x8e\x01\x00\x00\xe3\x00\x00\x00\xa1\x00\x00\x00e\x00\x00\x00\x85\x01\x00\x00D\x02\x00\x00H\x02\x00\x00u\x01\x00\x00\xde\x01\x00\x00[\x01\x00\x00\xdf\x00\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4889
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4890
(g4888
S'\xdf\x00\x00\x00'
tRp4891
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4892
I01
sb.