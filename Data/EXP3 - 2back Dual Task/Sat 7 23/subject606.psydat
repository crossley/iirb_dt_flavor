ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject606
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 606
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vm
sS'age'
p31
V19
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I3
sS'_exp'
p41
I73140560
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I54
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I11
I55
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I11
I55
tg55
I00
S'\x00\x00\x00\x00\x00\x00@@\x00\x00\x00A\x00\x000A\x00\x00(B\x00\x00`B\x00\x00\xaeB\x00\x00\xbcB\x00\x00\xccB\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xe4B\x00\x00\xeaB\x00\x00\xeeB\x00\x00\xfaB\x00\x00\x07C\x00\x00\x10C\x00\x00\x12C\x00\x00\x19C\x00\x00\x1aC\x00\x00*C\x00\x00;C\x00\x00@C\x00\x00EC\x00\x00FC\x00\x00HC\x00\x00QC\x00\x00_C\x00\x00fC\x00\x00\x97C\x00\x00\x99C\x00\x80\xa0C\x00\x80\xa5C\x00\x80\xafC\x00\x80\xb0C\x00\x00\xb1C\x00\x80\xb7C\x00\x80\xbbC\x00\x80\xbfC\x00\x80\xc3C\x00\x80\xcaC\x00\x00\xcbC\x00\x00\xceC\x00\x00\xd3C\x00\x00\xdbC\x00\x80\xe4C\x00\x00\xe5C\x00\x80\xf4C\x00\x00\x00D\x00\x00\x02D\x00@\x04D\x00\xc0\x07D\x00\x00\x08D\x00\x80\nD\x00@\x0cD\x00\x00\xe0@\x00\x00`A\x00\x00\x90A\x00\x00\xb8A\x00\x004B\x00\x008B\x00\x00pB\x00\x00\x82B\x00\x00\xa0B\x00\x00\xa4B\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc4B\x00\x00\xc8B\x00\x00\xceB\x00\x00\x0fC\x00\x00\x17C\x00\x00>C\x00\x00KC\x00\x00SC\x00\x00dC\x00\x00kC\x00\x00oC\x00\x00}C\x00\x80\x85C\x00\x00\x87C\x00\x80\x88C\x00\x00\x89C\x00\x00\x8fC\x00\x80\x8fC\x00\x00\x93C\x00\x00\x9aC\x00\x00\x9bC\x00\x00\x9eC\x00\x00\xa4C\x00\x00\xa6C\x00\x00\xbaC\x00\x80\xbdC\x00\x00\xbfC\x00\x80\xc7C\x00\x00\xcaC\x00\x80\xccC\x00\x80\xd0C\x00\x00\xd6C\x00\x80\xf3C\x00\x00\xffC\x00\x00\x03D\x00\x80\x05D\x00\xc0\x08D\x00\x00\tD\x00@\nD\x00\x00\x0eD\x00\xc0\x13D\x00\x80\x14D\x00\x00\x15D\x00\x00\x80?\x00\x00\xa8A\x00\x00\xe0A\x00\x00\x84B\x00\x00\x9aB\x00\x00\xa2B\x00\x00\xb2B\x00\x00\xb6B\x00\x00\xe2B\x00\x00\xe8B\x00\x00\xf0B\x00\x00\xf8B\x00\x00\x05C\x00\x00\x08C\x00\x00\x14C\x00\x00\x1cC\x00\x00\x1fC\x00\x00,C\x00\x00-C\x00\x006C\x00\x00WC\x00\x00`C\x00\x00bC\x00\x00\x83C\x00\x80\x84C\x00\x80\x9aC\x00\x00\xa3C\x00\x00\xaeC\x00\x00\xb5C\x00\x00\xb9C\x00\x80\xbaC\x00\x80\xc1C\x00\x00\xc6C\x00\x00\xc8C\x00\x80\xc8C\x00\x80\xc9C\x00\x00\xccC\x00\x80\xdaC\x00\x80\xddC\x00\x00\xe0C\x00\x80\xe2C\x00\x00\xe3C\x00\x80\xe7C\x00\x00\xeeC\x00\x80\xeeC\x00\x00\xfeC\x00\x80\x00D\x00\x80\x03D\x00\x00\x07D\x00\x80\x07D\x00\x80\x08D\x00\xc0\nD\x00\x80\x0cD\x00\xc0\x0cD\x00@\x0fD\x00\x00\x00@\x00\x00<B\x00\x00@B\x00\x00HB\x00\x00LB\x00\x00xB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x94B\x00\x00\x9eB\x00\x00\xb0B\x00\x00\xe0B\x00\x00\x03C\x00\x00(C\x00\x00)C\x00\x00+C\x00\x00/C\x00\x00AC\x00\x00UC\x00\x00YC\x00\x00\\C\x00\x00aC\x00\x00mC\x00\x00uC\x00\x00\x80C\x00\x80\x81C\x00\x80\x90C\x00\x00\x96C\x00\x80\x99C\x00\x80\x9dC\x00\x80\x9eC\x00\x00\xa7C\x00\x00\xa9C\x00\x80\xacC\x00\x00\xbbC\x00\x00\xbdC\x00\x00\xc0C\x00\x80\xd2C\x00\x80\xd4C\x00\x80\xd7C\x00\x80\xd8C\x00\x00\xe2C\x00\x80\xeaC\x00\x00\xf4C\x00\x00\xf5C\x00\x80\xf6C\x00\x80\xf8C\x00\x00\xf9C\x00\x80\x04D\x00\x80\x06D\x00@\rD\x00\xc0\x15D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0@\x00\x00PA\x00\x00\x14B\x00\x000B\x00\x00PB\x00\x00|B\x00\x00\x80B\x00\x00\x92B\x00\x00\x9cB\x00\x00\xfcB\x00\x00 C\x00\x00&C\x00\x00.C\x00\x00GC\x00\x00^C\x00\x00jC\x00\x00pC\x00\x00sC\x00\x00xC\x00\x00\x86C\x00\x80\x89C\x00\x80\x8dC\x00\x00\x8eC\x00\x00\x92C\x00\x80\x96C\x00\x80\x98C\x00\x00\x9dC\x00\x80\xa2C\x00\x00\xa8C\x00\x00\xadC\x00\x80\xaeC\x00\x00\xb6C\x00\x00\xb8C\x00\x00\xbcC\x00\x00\xc1C\x00\x00\xc2C\x00\x00\xd8C\x00\x00\xdaC\x00\x00\xe1C\x00\x80\xf0C\x00\x80\xf9C\x00\x00\x01D\x00\xc0\x01D\x00\xc0\x03D\x00\xc0\x05D\x00@\x07D\x00@\x08D\x00\xc0\x0bD\x00\xc0\x0eD\x00\xc0\x0fD\x00\xc0\x10D\x00\x80\x11D\x00\x00\x13D\x00\x00\x14D\x00\x00\x00\x00\x00\x00\x98A\x00\x00\xb0A\x00\x00\xc8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x08B\x00\x00\x10B\x00\x00,B\x00\x00\xb8B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xdeB\x00\x00\xecB\x00\x00\x0bC\x00\x00\x0cC\x00\x00$C\x00\x001C\x00\x004C\x00\x008C\x00\x00=C\x00\x00IC\x00\x00LC\x00\x00MC\x00\x00TC\x00\x00eC\x00\x00gC\x00\x00qC\x00\x00yC\x00\x00zC\x00\x80\x9bC\x00\x00\xa0C\x00\x00\xa1C\x00\x80\xa1C\x00\x80\xa3C\x00\x00\xa5C\x00\x80\xc0C\x00\x00\xc3C\x00\x00\xc4C\x00\x80\xcbC\x00\x80\xcfC\x00\x00\xd4C\x00\x80\xd6C\x00\x80\xd9C\x00\x80\xe0C\x00\x80\xe3C\x00\x00\xe6C\x00\x80\xe8C\x00\x00\xedC\x00\x00\xf2C\x00\x80\x01D\x00\x80\x02D\x00\xc0\tD\x00\x00\x0cD\x00\x80\x0fD\x00\x00\x10D\x00\x00\x80@\x00\x00 A\x00\x00XB\x00\x00dB\x00\x00\xc2B\x00\x00\xd6B\x00\x00\xf6B\x00\x00\xfeB\x00\x00\x06C\x00\x00\rC\x00\x00\x1eC\x00\x00#C\x00\x00%C\x00\x002C\x00\x007C\x00\x009C\x00\x00CC\x00\x00VC\x00\x00hC\x00\x00lC\x00\x00|C\x00\x00\x85C\x00\x80\x87C\x00\x80\x8bC\x00\x00\x8cC\x00\x00\x90C\x00\x80\x91C\x00\x00\x94C\x00\x80\x94C\x00\x80\x95C\x00\x80\xa8C\x00\x80\xadC\x00\x00\xb2C\x00\x80\xb2C\x00\x00\xb3C\x00\x80\xb3C\x00\x80\xc2C\x00\x80\xc5C\x00\x80\xc6C\x00\x00\xc7C\x00\x00\xcfC\x00\x80\xd3C\x00\x00\xdeC\x00\x80\xe5C\x00\x00\xe8C\x00\x00\xeaC\x00\x00\xebC\x00\x80\xedC\x00\x80\xf7C\x00\x80\xfeC\x00\x80\xffC\x00\xc0\x06D\x00\xc0\rD\x00@\x14D\x00\x80\x15D\x00\x00\xc0@\x00\x00\x80A\x00\x00\xa0A\x00\x00\xd8A\x00\x00\x00B\x00\x00$B\x00\x00DB\x00\x00hB\x00\x00tB\x00\x00\x88B\x00\x00\xe6B\x00\x00\tC\x00\x00\x16C\x00\x00!C\x00\x00"C\x00\x000C\x00\x00BC\x00\x00NC\x00\x00iC\x00\x00nC\x00\x00tC\x00\x00vC\x00\x00wC\x00\x00{C\x00\x80\x80C\x00\x00\x81C\x00\x80\x82C\x00\x00\x84C\x00\x00\x91C\x00\x00\xa2C\x00\x80\xa7C\x00\x80\xa9C\x00\x80\xaaC\x00\x00\xacC\x00\x80\xb8C\x00\x80\xbcC\x00\x80\xceC\x00\x00\xd7C\x00\x00\xd9C\x00\x80\xdbC\x00\x80\xdfC\x00\x80\xe1C\x00\x00\xe4C\x00\x80\xe9C\x00\x00\xf1C\x00\x80\xf2C\x00\x80\xfbC\x00\x00\x04D\x00@\x06D\x00\x80\tD\x00\x00\x0bD\x00\x80\x10D\x00\x00\x12D\x00\x80\x13D\x00\x00\x00\x00\x00\x00\x10A\x00\x00@A\x00\x00pA\x00\x00\xd0A\x00\x00\x04B\x00\x00\x18B\x00\x00\xc6B\x00\x00\xcaB\x00\x00\xd8B\x00\x00\x01C\x00\x00\x02C\x00\x00\x11C\x00\x00\x15C\x00\x00\x1dC\x00\x005C\x00\x00?C\x00\x00DC\x00\x00PC\x00\x00]C\x00\x80\x83C\x00\x80\x86C\x00\x00\x88C\x00\x80\x8aC\x00\x00\x8bC\x00\x80\x8cC\x00\x80\x9fC\x00\x00\xaaC\x00\x80\xb1C\x00\x80\xb6C\x00\x80\xbeC\x00\x00\xc5C\x00\x00\xc9C\x00\x00\xd0C\x00\x00\xd2C\x00\x00\xd5C\x00\x00\xe7C\x00\x80\xebC\x00\x00\xefC\x00\x80\xefC\x00\x00\xf3C\x00\x80\xf5C\x00\x00\xf8C\x00\x00\xfdC\x00\x80\xfdC\x00@\x01D\x00\xc0\x04D\x00\x00\x05D\x00@\x05D\x00\x00\nD\x00\x80\x0bD\x00\x80\rD\x00\x00\x0fD\x00@\x11D\x00\xc0\x11D\x00@\x15D\x00\x00\x88A\x00\x00\xc0A\x00\x00\x0cB\x00\x00 B\x00\x00\\B\x00\x00\x86B\x00\x00\x96B\x00\x00\x98B\x00\x00\xb4B\x00\x00\xd0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\x04C\x00\x00\x0eC\x00\x00\x18C\x00\x00\'C\x00\x003C\x00\x00:C\x00\x00<C\x00\x00JC\x00\x00OC\x00\x00RC\x00\x00XC\x00\x00ZC\x00\x00cC\x00\x00rC\x00\x00~C\x00\x00\x7fC\x00\x00\x8dC\x00\x00\x95C\x00\x80\xa4C\x00\x80\xa6C\x00\x00\xabC\x00\x80\xabC\x00\x00\xb0C\x00\x00\xb4C\x00\x80\xb9C\x00\x80\xc4C\x00\x00\xd1C\x00\x00\xdcC\x00\x00\xddC\x00\x80\xdeC\x00\x80\xecC\x00\x80\xf1C\x00\x00\xf6C\x00\x00\xf7C\x00\xc0\x00D\x00@\x02D\x00@\x03D\x00\x80\x0eD\x00@\x10D\x00\x00\x11D\x00\x80\x12D\x00@\x13D\x00\x00\x00\x00\x00\x00\xe8A\x00\x00\x1cB\x00\x00TB\x00\x00lB\x00\x00\x8aB\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xbaB\x00\x00\x00C\x00\x00\nC\x00\x00\x13C\x00\x00\x1bC\x00\x00[C\x00\x00\x82C\x00\x00\x8aC\x00\x80\x8eC\x00\x80\x92C\x00\x80\x93C\x00\x80\x97C\x00\x00\x98C\x00\x00\x9cC\x00\x80\x9cC\x00\x00\x9fC\x00\x00\xafC\x00\x80\xb4C\x00\x80\xb5C\x00\x00\xb7C\x00\x00\xbeC\x00\x00\xcdC\x00\x80\xcdC\x00\x80\xd1C\x00\x80\xd5C\x00\x80\xdcC\x00\x00\xdfC\x00\x80\xe6C\x00\x00\xe9C\x00\x00\xecC\x00\x00\xf0C\x00\x00\xfaC\x00\x80\xfaC\x00\x00\xfbC\x00\x00\xfcC\x00\x80\xfcC\x00@\x00D\x00\xc0\x02D\x00\x00\x06D\x00@\tD\x00@\x0bD\x00\x00\rD\x00@\x0eD\x00@\x12D\x00\xc0\x12D\x00\xc0\x14D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I11
aI55
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I11
I55
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I0
aI0
aI5
aI8
aI4
aI9
aI2
aI2
aI3
aI8
aI0
aI9
aI9
aI1
aI0
aI6
aI7
aI0
aI0
aI0
aI3
aI5
aI9
aI1
aI7
aI4
aI1
aI6
aI1
aI8
aI5
aI7
aI9
aI10
aI3
aI5
aI2
aI5
aI9
aI5
aI9
aI7
aI8
aI9
aI5
aI6
aI8
aI8
aI7
aI6
aI7
aI0
aI8
aI8
aI1
aI2
aI8
aI1
aI5
aI1
aI0
aI9
aI4
aI2
aI1
aI5
aI9
aI2
aI0
aI10
aI4
aI5
aI9
aI4
aI9
aI8
aI6
aI4
aI9
aI2
aI10
aI1
aI9
aI2
aI5
aI0
aI9
aI0
aI4
aI0
aI4
aI6
aI2
aI10
aI7
aI10
aI3
aI2
aI5
aI7
aI8
aI8
aI5
aI0
aI2
aI5
aI2
aI2
aI7
aI10
aI3
aI4
aI9
aI9
aI1
aI6
aI7
aI3
aI9
aI8
aI3
aI6
aI6
aI8
aI2
aI9
aI6
aI5
aI0
aI1
aI4
aI7
aI7
aI9
aI6
aI8
aI6
aI6
aI1
aI0
aI1
aI9
aI0
aI8
aI4
aI2
aI6
aI1
aI8
aI3
aI9
aI2
aI6
aI6
aI8
aI3
aI2
aI4
aI3
aI4
aI8
aI2
aI5
aI10
aI1
aI0
aI1
aI5
aI5
aI3
aI7
aI10
aI1
aI2
aI0
aI2
aI2
aI0
aI0
aI8
aI3
aI9
aI1
aI5
aI5
aI0
aI4
aI3
aI3
aI1
aI8
aI3
aI3
aI5
aI5
aI9
aI7
aI8
aI10
aI7
aI4
aI1
aI10
aI3
aI4
aI2
aI2
aI5
aI2
aI1
aI3
aI6
aI0
aI8
aI2
aI1
aI10
aI4
aI9
aI8
aI6
aI8
aI8
aI4
aI3
aI10
aI3
aI2
aI5
aI1
aI0
aI0
aI2
aI10
aI6
aI3
aI5
aI8
aI9
aI3
aI2
aI1
aI7
aI7
aI4
aI6
aI7
aI4
aI10
aI5
aI3
aI3
aI6
aI0
aI3
aI6
aI2
aI10
aI0
aI3
aI6
aI5
aI10
aI2
aI3
aI4
aI1
aI9
aI8
aI0
aI0
aI3
aI5
aI10
aI6
aI4
aI7
aI7
aI8
aI7
aI1
aI3
aI1
aI10
aI9
aI7
aI4
aI7
aI2
aI2
aI0
aI8
aI0
aI1
aI6
aI3
aI6
aI7
aI7
aI8
aI6
aI6
aI0
aI10
aI7
aI7
aI4
aI6
aI4
aI1
aI5
aI2
aI0
aI6
aI7
aI9
aI7
aI7
aI8
aI0
aI10
aI6
aI5
aI8
aI0
aI2
aI8
aI9
aI4
aI3
aI7
aI9
aI2
aI10
aI3
aI7
aI3
aI10
aI0
aI5
aI2
aI6
aI10
aI8
aI4
aI3
aI2
aI3
aI5
aI2
aI2
aI3
aI4
aI3
aI1
aI8
aI4
aI10
aI4
aI4
aI4
aI6
aI6
aI7
aI10
aI0
aI8
aI7
aI5
aI5
aI10
aI0
aI6
aI8
aI3
aI10
aI0
aI10
aI1
aI4
aI7
aI6
aI7
aI9
aI7
aI1
aI1
aI10
aI9
aI3
aI3
aI4
aI10
aI1
aI5
aI0
aI10
aI5
aI7
aI7
aI2
aI6
aI7
aI5
aI9
aI9
aI7
aI5
aI10
aI6
aI9
aI10
aI10
aI3
aI2
aI6
aI2
aI6
aI2
aI8
aI5
aI2
aI6
aI3
aI4
aI7
aI0
aI3
aI10
aI8
aI10
aI10
aI1
aI4
aI2
aI10
aI1
aI4
aI7
aI4
aI0
aI5
aI5
aI7
aI4
aI4
aI3
aI10
aI1
aI6
aI5
aI8
aI5
aI1
aI7
aI2
aI5
aI6
aI7
aI3
aI1
aI1
aI5
aI7
aI8
aI4
aI1
aI4
aI1
aI5
aI3
aI4
aI9
aI9
aI1
aI9
aI1
aI5
aI8
aI2
aI2
aI6
aI6
aI4
aI9
aI7
aI2
aI9
aI10
aI1
aI8
aI10
aI9
aI1
aI9
aI8
aI7
aI5
aI0
aI10
aI4
aI9
aI10
aI6
aI8
aI0
aI8
aI6
aI9
aI6
aI4
aI6
aI8
aI9
aI9
aI5
aI4
aI7
aI2
aI1
aI4
aI10
aI0
aI3
aI1
aI7
aI10
aI10
aI1
aI0
aI8
aI0
aI8
aI10
aI0
aI5
aI5
aI8
aI7
aI3
aI10
aI9
aI2
aI7
aI1
aI4
aI9
aI8
aI4
aI3
aI6
aI2
aI7
aI5
aI6
aI1
aI9
aI0
aI1
aI0
aI2
aI3
aI9
aI0
aI5
aI3
aI9
aI0
aI8
aI10
aI0
aI5
aI6
aI8
aI1
aI10
aI6
aI3
aI10
aI9
aI8
aI0
aI2
aI2
aI3
aI6
aI0
aI1
aI1
aI7
aI4
aI10
aI10
aI9
aI9
aI10
aI4
aI4
aI3
aI10
aI5
aI4
aI4
aI6
aI3
atbsS'finished'
p74
I00
sS'nReps'
p75
I55
sS'nRemaining'
p76
I5
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p79
NsS'thisIndex'
p80
I3
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I5
sS'nTotal'
p83
I605
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'd'
asS'.thisTrial'
p95
I0
sS'.thisRepN'
p96
I0
sg30
Vm
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I0
sg15
(lp100
S'd'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'd'
asg95
I2
sS'.thisRepN'
p103
I0
sg30
Vm
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I2
sg15
(lp107
S'k'
asg17
S'N'
sg14
I1
sa(dp108
g16
(lp109
S'k'
asg18
S'N'
sS'.thisRepN'
p110
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I3
sg15
(lp114
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp115
g18
S'N'
sS'.thisRepN'
p116
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p117
I3
sS'.thisN'
p118
I3
sS'.thisIndex'
p119
I0
sg15
Nsg30
Vm
sg17
S'Timed out'
p120
sg14
I1
sg19
Nsg95
I0
sa(dp121
g16
(lp122
S'k'
asg18
S'N'
sS'.thisRepN'
p123
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p124
I4
sS'.thisN'
p125
I4
sS'.thisIndex'
p126
I6
sg15
(lp127
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp128
g16
(lp129
S'k'
asg18
S'Y'
sS'.thisRepN'
p130
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p131
I5
sS'.thisN'
p132
I5
sS'.thisIndex'
p133
I4
sg15
(lp134
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp135
g16
(lp136
S'k'
asg18
S'Y'
sS'.thisRepN'
p137
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p138
I6
sS'.thisN'
p139
I6
sS'.thisIndex'
p140
I7
sg15
(lp141
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp142
g16
(lp143
S'k'
asg18
S'Y'
sS'.thisRepN'
p144
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p145
I7
sS'.thisN'
p146
I7
sS'.thisIndex'
p147
I1
sg15
(lp148
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp149
g16
(lp150
S'k'
asg18
S'Y'
sS'.thisRepN'
p151
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p152
I8
sS'.thisN'
p153
I8
sS'.thisIndex'
p154
I0
sg15
(lp155
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp156
g16
(lp157
S'k'
asg18
S'N'
sS'.thisRepN'
p158
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p159
I9
sS'.thisN'
p160
I9
sS'.thisIndex'
p161
I8
sg15
(lp162
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp163
g16
(lp164
S'd'
asg18
S'Y'
sS'.thisRepN'
p165
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p166
I10
sS'.thisN'
p167
I10
sS'.thisIndex'
p168
I6
sg15
(lp169
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp170
g16
(lp171
S'k'
asg18
S'Y'
sS'.thisRepN'
p172
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p173
I0
sS'.thisN'
p174
I11
sS'.thisIndex'
p175
I0
sg15
(lp176
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp177
g16
(lp178
S'd'
asg18
S'Y'
sS'.thisRepN'
p179
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p180
I1
sS'.thisN'
p181
I12
sS'.thisIndex'
p182
I8
sg15
(lp183
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I8
sa(dp184
g16
(lp185
S'k'
asg18
S'Y'
sS'.thisRepN'
p186
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p187
I2
sS'.thisN'
p188
I13
sS'.thisIndex'
p189
I4
sg15
(lp190
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp191
g16
(lp192
S'd'
asg18
S'N'
sS'.thisRepN'
p193
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p194
I3
sS'.thisN'
p195
I14
sS'.thisIndex'
p196
I1
sg15
(lp197
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp198
g16
(lp199
S'd'
asg18
S'Y'
sS'.thisRepN'
p200
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p201
I4
sS'.thisN'
p202
I15
sS'.thisIndex'
p203
I8
sg15
(lp204
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp205
g16
(lp206
S'd'
asg18
S'Y'
sS'.thisRepN'
p207
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p208
I5
sS'.thisN'
p209
I16
sS'.thisIndex'
p210
I7
sg15
(lp211
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp212
g16
(lp213
S'k'
asg18
S'Y'
sS'.thisRepN'
p214
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p215
I6
sS'.thisN'
p216
I17
sS'.thisIndex'
p217
I9
sg15
(lp218
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp219
g16
(lp220
S'd'
asg18
S'N'
sS'.thisRepN'
p221
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p222
I7
sS'.thisN'
p223
I18
sS'.thisIndex'
p224
I1
sg15
(lp225
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp226
g16
(lp227
S'd'
asg18
S'N'
sS'.thisRepN'
p228
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p229
I8
sS'.thisN'
p230
I19
sS'.thisIndex'
p231
I5
sg15
(lp232
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp233
g16
(lp234
S'k'
asg18
S'N'
sS'.thisRepN'
p235
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p236
I9
sS'.thisN'
p237
I20
sS'.thisIndex'
p238
I7
sg15
(lp239
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp240
g16
(lp241
S'k'
asg18
S'N'
sS'.thisRepN'
p242
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p243
I10
sS'.thisN'
p244
I21
sS'.thisIndex'
p245
I2
sg15
(lp246
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp247
g16
(lp248
S'k'
asg18
S'N'
sS'.thisRepN'
p249
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p250
I0
sS'.thisN'
p251
I22
sS'.thisIndex'
p252
I5
sg15
(lp253
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp254
g16
(lp255
S'k'
asg18
S'Y'
sS'.thisRepN'
p256
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p257
I1
sS'.thisN'
p258
I23
sS'.thisIndex'
p259
I1
sg15
(lp260
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp261
g16
(lp262
S'd'
asg18
S'Y'
sS'.thisRepN'
p263
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p264
I2
sS'.thisN'
p265
I24
sS'.thisIndex'
p266
I9
sg15
(lp267
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp268
g16
(lp269
S'd'
asg18
S'Y'
sS'.thisRepN'
p270
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p271
I3
sS'.thisN'
p272
I25
sS'.thisIndex'
p273
I5
sg15
(lp274
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp275
g16
(lp276
S'k'
asg18
S'N'
sS'.thisRepN'
p277
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p278
I4
sS'.thisN'
p279
I26
sS'.thisIndex'
p280
I8
sg15
(lp281
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp282
g16
(lp283
S'k'
asg18
S'N'
sS'.thisRepN'
p284
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p285
I5
sS'.thisN'
p286
I27
sS'.thisIndex'
p287
I7
sg15
(lp288
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp289
g16
(lp290
S'd'
asg18
S'N'
sS'.thisRepN'
p291
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p292
I6
sS'.thisN'
p293
I28
sS'.thisIndex'
p294
I2
sg15
(lp295
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp296
g16
(lp297
S'd'
asg18
S'N'
sS'.thisRepN'
p298
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p299
I7
sS'.thisN'
p300
I29
sS'.thisIndex'
p301
I10
sg15
(lp302
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp303
g16
(lp304
S'k'
asg18
S'Y'
sS'.thisRepN'
p305
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p306
I8
sS'.thisN'
p307
I30
sS'.thisIndex'
p308
I5
sg15
(lp309
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp310
g16
(lp311
S'd'
asg18
S'Y'
sS'.thisRepN'
p312
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p313
I9
sS'.thisN'
p314
I31
sS'.thisIndex'
p315
I5
sg15
(lp316
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp317
g16
(lp318
S'k'
asg18
S'Y'
sS'.thisRepN'
p319
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p320
I10
sS'.thisN'
p321
I32
sS'.thisIndex'
p322
I7
sg15
(lp323
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp324
g16
(lp325
S'd'
asg18
S'N'
sS'.thisRepN'
p326
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p327
I0
sS'.thisN'
p328
I33
sS'.thisIndex'
p329
I8
sg15
(lp330
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp331
g16
(lp332
S'k'
asg18
S'N'
sS'.thisRepN'
p333
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p334
I1
sS'.thisN'
p335
I34
sS'.thisIndex'
p336
I5
sg15
(lp337
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp338
g16
(lp339
S'k'
asg18
S'Y'
sS'.thisRepN'
p340
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p341
I2
sS'.thisN'
p342
I35
sS'.thisIndex'
p343
I9
sg15
(lp344
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp345
g16
(lp346
S'k'
asg18
S'N'
sS'.thisRepN'
p347
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p348
I3
sS'.thisN'
p349
I36
sS'.thisIndex'
p350
I5
sg15
(lp351
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp352
g16
(lp353
S'd'
asg18
S'N'
sS'.thisRepN'
p354
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p355
I4
sS'.thisN'
p356
I37
sS'.thisIndex'
p357
I4
sg15
(lp358
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp359
g16
(lp360
S'k'
asg18
S'Y'
sS'.thisRepN'
p361
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p362
I5
sS'.thisN'
p363
I38
sS'.thisIndex'
p364
I8
sg15
(lp365
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I8
sa(dp366
g16
(lp367
S'd'
asg18
S'N'
sS'.thisRepN'
p368
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p369
I6
sS'.thisN'
p370
I39
sS'.thisIndex'
p371
I10
sg15
(lp372
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp373
g16
(lp374
S'd'
asg18
S'Y'
sS'.thisRepN'
p375
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p376
I7
sS'.thisN'
p377
I40
sS'.thisIndex'
p378
I9
sg15
(lp379
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp380
g16
(lp381
S'k'
asg18
S'N'
sS'.thisRepN'
p382
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p383
I8
sS'.thisN'
p384
I41
sS'.thisIndex'
p385
I7
sg15
(lp386
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp387
g16
(lp388
S'k'
asg18
S'Y'
sS'.thisRepN'
p389
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p390
I9
sS'.thisN'
p391
I42
sS'.thisIndex'
p392
I0
sg15
(lp393
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp394
g16
(lp395
S'k'
asg18
S'Y'
sS'.thisRepN'
p396
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p397
I10
sS'.thisN'
p398
I43
sS'.thisIndex'
p399
I5
sg15
(lp400
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp401
g16
(lp402
S'd'
asg18
S'N'
sS'.thisRepN'
p403
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p404
I0
sS'.thisN'
p405
I44
sS'.thisIndex'
p406
I4
sg15
(lp407
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp408
g16
(lp409
S'd'
asg18
S'Y'
sS'.thisRepN'
p410
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p411
I1
sS'.thisN'
p412
I45
sS'.thisIndex'
p413
I1
sg15
(lp414
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp415
g16
(lp416
S'd'
asg18
S'Y'
sS'.thisRepN'
p417
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p418
I2
sS'.thisN'
p419
I46
sS'.thisIndex'
p420
I1
sg15
(lp421
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp422
g16
(lp423
S'k'
asg18
S'N'
sS'.thisRepN'
p424
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p425
I3
sS'.thisN'
p426
I47
sS'.thisIndex'
p427
I3
sg15
(lp428
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp429
g16
(lp430
S'k'
asg18
S'Y'
sS'.thisRepN'
p431
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p432
I4
sS'.thisN'
p433
I48
sS'.thisIndex'
p434
I3
sg15
(lp435
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp436
g16
(lp437
S'k'
asg18
S'N'
sg22
I23
sS'.thisN'
p438
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p439
I5
sS'.thisRepN'
p440
I4
sg21
I29
sS'.thisIndex'
p441
I7
sg23
I25
sg15
(lp442
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp443
g16
(lp444
S'k'
asg95
I3
sS'.thisRepN'
p445
I4
sg30
Vm
sg31
g32
sS'.thisTrialN'
p446
I6
sS'.thisN'
p447
I50
sS'.thisIndex'
p448
I3
sg15
(lp449
S'k'
asg17
S'Y'
sg14
I2
sa(dp450
g16
(lp451
S'k'
asg95
I3
sS'.thisRepN'
p452
I4
sg30
Vm
sg31
g32
sS'.thisTrialN'
p453
I7
sS'.thisN'
p454
I51
sS'.thisIndex'
p455
I3
sg15
(lp456
S'k'
asg17
S'Y'
sg14
I2
sa(dp457
g16
(lp458
S'k'
asg18
S'Y'
sS'.thisRepN'
p459
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p460
I8
sS'.thisN'
p461
I52
sS'.thisIndex'
p462
I4
sg15
(lp463
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp464
g16
(lp465
S'd'
asg18
S'Y'
sS'.thisRepN'
p466
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p467
I9
sS'.thisN'
p468
I53
sS'.thisIndex'
p469
I10
sg15
(lp470
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp471
g16
(lp472
S'k'
asg18
S'Y'
sS'.thisRepN'
p473
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p474
I10
sS'.thisN'
p475
I54
sS'.thisIndex'
p476
I6
sg15
(lp477
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp478
g16
(lp479
S'k'
asg18
S'Y'
sS'.thisRepN'
p480
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p481
I0
sS'.thisN'
p482
I55
sS'.thisIndex'
p483
I9
sg15
(lp484
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp485
g16
(lp486
S'k'
asg18
S'Y'
sS'.thisRepN'
p487
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p488
I1
sS'.thisN'
p489
I56
sS'.thisIndex'
p490
I0
sg15
(lp491
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp492
g16
(lp493
S'd'
asg18
S'Y'
sS'.thisRepN'
p494
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p495
I2
sS'.thisN'
p496
I57
sS'.thisIndex'
p497
I6
sg15
(lp498
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp499
g16
(lp500
S'k'
asg18
S'N'
sS'.thisRepN'
p501
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p502
I3
sS'.thisN'
p503
I58
sS'.thisIndex'
p504
I7
sg15
(lp505
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp506
g16
(lp507
S'd'
asg18
S'Y'
sS'.thisRepN'
p508
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p509
I4
sS'.thisN'
p510
I59
sS'.thisIndex'
p511
I10
sg15
(lp512
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I10
sa(dp513
g16
(lp514
S'k'
asg18
S'N'
sS'.thisRepN'
p515
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p516
I5
sS'.thisN'
p517
I60
sS'.thisIndex'
p518
I1
sg15
(lp519
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp520
g16
(lp521
S'd'
asg18
S'N'
sS'.thisRepN'
p522
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p523
I6
sS'.thisN'
p524
I61
sS'.thisIndex'
p525
I7
sg15
(lp526
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp527
g16
(lp528
S'k'
asg18
S'Y'
sS'.thisRepN'
p529
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p530
I7
sS'.thisN'
p531
I62
sS'.thisIndex'
p532
I3
sg15
(lp533
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp534
g16
(lp535
S'k'
asg18
S'Y'
sS'.thisRepN'
p536
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p537
I8
sS'.thisN'
p538
I63
sS'.thisIndex'
p539
I4
sg15
(lp540
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp541
g16
(lp542
S'k'
asg18
S'N'
sS'.thisRepN'
p543
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p544
I9
sS'.thisN'
p545
I64
sS'.thisIndex'
p546
I4
sg15
(lp547
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp548
g16
(lp549
S'd'
asg18
S'Y'
sS'.thisRepN'
p550
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p551
I10
sS'.thisN'
p552
I65
sS'.thisIndex'
p553
I1
sg15
(lp554
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp555
g16
(lp556
S'k'
asg18
S'Y'
sS'.thisRepN'
p557
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p558
I0
sS'.thisN'
p559
I66
sS'.thisIndex'
p560
I2
sg15
(lp561
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp562
g16
(lp563
S'd'
asg18
S'N'
sS'.thisRepN'
p564
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p565
I1
sS'.thisN'
p566
I67
sS'.thisIndex'
p567
I9
sg15
(lp568
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp569
g16
(lp570
S'd'
asg18
S'Y'
sS'.thisRepN'
p571
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p572
I2
sS'.thisN'
p573
I68
sS'.thisIndex'
p574
I7
sg15
(lp575
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I7
sa(dp576
g16
(lp577
S'd'
asg18
S'Y'
sS'.thisRepN'
p578
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p579
I3
sS'.thisN'
p580
I69
sS'.thisIndex'
p581
I10
sg15
(lp582
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp583
g16
(lp584
S'd'
asg18
S'Y'
sS'.thisRepN'
p585
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p586
I4
sS'.thisN'
p587
I70
sS'.thisIndex'
p588
I3
sg15
(lp589
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp590
g16
(lp591
S'd'
asg18
S'Y'
sS'.thisRepN'
p592
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p593
I5
sS'.thisN'
p594
I71
sS'.thisIndex'
p595
I3
sg15
(lp596
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp597
g16
(lp598
S'd'
asg18
S'Y'
sS'.thisRepN'
p599
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p600
I6
sS'.thisN'
p601
I72
sS'.thisIndex'
p602
I3
sg15
(lp603
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp604
g16
(lp605
S'k'
asg18
S'Y'
sS'.thisRepN'
p606
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p607
I7
sS'.thisN'
p608
I73
sS'.thisIndex'
p609
I4
sg15
(lp610
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp611
g16
(lp612
S'k'
asg18
S'Y'
sS'.thisRepN'
p613
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p614
I8
sS'.thisN'
p615
I74
sS'.thisIndex'
p616
I3
sg15
(lp617
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp618
g16
(lp619
S'k'
asg18
S'Y'
sS'.thisRepN'
p620
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p621
I9
sS'.thisN'
p622
I75
sS'.thisIndex'
p623
I9
sg15
(lp624
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp625
g16
(lp626
S'k'
asg18
S'Y'
sS'.thisRepN'
p627
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p628
I10
sS'.thisN'
p629
I76
sS'.thisIndex'
p630
I9
sg15
(lp631
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp632
g16
(lp633
S'k'
asg18
S'Y'
sS'.thisRepN'
p634
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p635
I0
sS'.thisN'
p636
I77
sS'.thisIndex'
p637
I2
sg15
(lp638
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp639
g16
(lp640
S'd'
asg18
S'Y'
sS'.thisRepN'
p641
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p642
I1
sS'.thisN'
p643
I78
sS'.thisIndex'
p644
I4
sg15
(lp645
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp646
g16
(lp647
S'd'
asg18
S'N'
sS'.thisRepN'
p648
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p649
I2
sS'.thisN'
p650
I79
sS'.thisIndex'
p651
I3
sg15
(lp652
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp653
g16
(lp654
S'd'
asg18
S'Y'
sS'.thisRepN'
p655
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p656
I3
sS'.thisN'
p657
I80
sS'.thisIndex'
p658
I1
sg15
(lp659
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp660
g16
(lp661
S'k'
asg18
S'N'
sS'.thisRepN'
p662
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p663
I4
sS'.thisN'
p664
I81
sS'.thisIndex'
p665
I2
sg15
(lp666
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I2
sa(dp667
g16
(lp668
S'd'
asg18
S'Y'
sS'.thisRepN'
p669
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p670
I5
sS'.thisN'
p671
I82
sS'.thisIndex'
p672
I1
sg15
(lp673
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp674
g16
(lp675
S'd'
asg18
S'N'
sS'.thisRepN'
p676
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p677
I6
sS'.thisN'
p678
I83
sS'.thisIndex'
p679
I10
sg15
(lp680
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I10
sa(dp681
g16
(lp682
S'k'
asg18
S'N'
sS'.thisRepN'
p683
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p684
I7
sS'.thisN'
p685
I84
sS'.thisIndex'
p686
I10
sg15
(lp687
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp688
g16
(lp689
S'k'
asg18
S'N'
sS'.thisRepN'
p690
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p691
I8
sS'.thisN'
p692
I85
sS'.thisIndex'
p693
I10
sg15
(lp694
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp695
g16
(lp696
S'd'
asg18
S'N'
sS'.thisRepN'
p697
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p698
I9
sS'.thisN'
p699
I86
sS'.thisIndex'
p700
I10
sg15
(lp701
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp702
g16
(lp703
S'k'
asg18
S'N'
sS'.thisRepN'
p704
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p705
I10
sS'.thisN'
p706
I87
sS'.thisIndex'
p707
I0
sg15
(lp708
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp709
g16
(lp710
S'd'
asg18
S'N'
sS'.thisRepN'
p711
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p712
I0
sS'.thisN'
p713
I88
sS'.thisIndex'
p714
I3
sg15
(lp715
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp716
g16
(lp717
S'd'
asg18
S'N'
sS'.thisRepN'
p718
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p719
I1
sS'.thisN'
p720
I89
sS'.thisIndex'
p721
I2
sg15
(lp722
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I2
sa(dp723
g16
(lp724
S'd'
asg18
S'Y'
sS'.thisRepN'
p725
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p726
I2
sS'.thisN'
p727
I90
sS'.thisIndex'
p728
I9
sg15
(lp729
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp730
g16
(lp731
S'd'
asg18
S'N'
sS'.thisRepN'
p732
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p733
I3
sS'.thisN'
p734
I91
sS'.thisIndex'
p735
I2
sg15
(lp736
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I2
sa(dp737
g16
(lp738
S'k'
asg18
S'N'
sS'.thisRepN'
p739
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p740
I4
sS'.thisN'
p741
I92
sS'.thisIndex'
p742
I5
sg15
(lp743
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp744
g16
(lp745
S'k'
asg18
S'N'
sS'.thisRepN'
p746
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p747
I5
sS'.thisN'
p748
I93
sS'.thisIndex'
p749
I10
sg15
(lp750
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp751
g16
(lp752
S'k'
asg18
S'N'
sS'.thisRepN'
p753
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p754
I6
sS'.thisN'
p755
I94
sS'.thisIndex'
p756
I0
sg15
(lp757
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp758
g16
(lp759
S'k'
asg18
S'N'
sS'.thisRepN'
p760
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p761
I7
sS'.thisN'
p762
I95
sS'.thisIndex'
p763
I1
sg15
(lp764
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp765
g16
(lp766
S'd'
asg18
S'N'
sS'.thisRepN'
p767
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p768
I8
sS'.thisN'
p769
I96
sS'.thisIndex'
p770
I1
sg15
(lp771
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp772
g16
(lp773
S'd'
asg18
S'N'
sS'.thisRepN'
p774
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p775
I9
sS'.thisN'
p776
I97
sS'.thisIndex'
p777
I6
sg15
(lp778
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp779
g16
(lp780
S'k'
asg18
S'N'
sS'.thisRepN'
p781
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p782
I10
sS'.thisN'
p783
I98
sS'.thisIndex'
p784
I1
sg15
(lp785
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp786
g16
(lp787
S'k'
asg18
S'N'
sg22
I23
sS'.thisN'
p788
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p789
I0
sS'.thisRepN'
p790
I9
sg21
I28
sS'.thisIndex'
p791
I8
sg23
I25
sg15
(lp792
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp793
g16
(lp794
S'd'
asg95
I1
sS'.thisRepN'
p795
I9
sg30
Vm
sg31
g32
sS'.thisTrialN'
p796
I1
sS'.thisN'
p797
I100
sS'.thisIndex'
p798
I1
sg15
(lp799
S'k'
asg17
S'N'
sg14
I3
sa(dp800
g16
(lp801
S'k'
asg95
I8
sS'.thisRepN'
p802
I9
sg30
Vm
sg31
g32
sS'.thisTrialN'
p803
I2
sS'.thisN'
p804
I101
sS'.thisIndex'
p805
I8
sg15
(lp806
S'd'
asg17
S'N'
sg14
I3
sa(dp807
g16
(lp808
S'd'
asg18
S'N'
sS'.thisRepN'
p809
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p810
I3
sS'.thisN'
p811
I102
sS'.thisIndex'
p812
I0
sg15
(lp813
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp814
g16
(lp815
S'k'
asg18
S'N'
sS'.thisRepN'
p816
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p817
I4
sS'.thisN'
p818
I103
sS'.thisIndex'
p819
I1
sg15
(lp820
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp821
g16
(lp822
S'k'
asg18
S'Y'
sS'.thisRepN'
p823
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p824
I5
sS'.thisN'
p825
I104
sS'.thisIndex'
p826
I9
sg15
(lp827
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp828
g16
(lp829
S'k'
asg18
S'N'
sS'.thisRepN'
p830
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p831
I6
sS'.thisN'
p832
I105
sS'.thisIndex'
p833
I5
sg15
(lp834
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp835
g16
(lp836
S'd'
asg18
S'N'
sS'.thisRepN'
p837
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p838
I7
sS'.thisN'
p839
I106
sS'.thisIndex'
p840
I5
sg15
(lp841
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp842
g16
(lp843
S'k'
asg18
S'Y'
sS'.thisRepN'
p844
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p845
I8
sS'.thisN'
p846
I107
sS'.thisIndex'
p847
I6
sg15
(lp848
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp849
g16
(lp850
S'k'
asg18
S'N'
sS'.thisRepN'
p851
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p852
I9
sS'.thisN'
p853
I108
sS'.thisIndex'
p854
I8
sg15
(lp855
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp856
g16
(lp857
S'k'
asg18
S'Y'
sS'.thisRepN'
p858
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p859
I10
sS'.thisN'
p860
I109
sS'.thisIndex'
p861
I0
sg15
(lp862
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp863
g16
(lp864
S'k'
asg18
S'Y'
sS'.thisRepN'
p865
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p866
I0
sS'.thisN'
p867
I110
sS'.thisIndex'
p868
I0
sg15
(lp869
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp870
g16
(lp871
S'd'
asg18
S'N'
sS'.thisRepN'
p872
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p873
I1
sS'.thisN'
p874
I111
sS'.thisIndex'
p875
I5
sg15
(lp876
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I5
sa(dp877
g16
(lp878
S'k'
asg18
S'Y'
sS'.thisRepN'
p879
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p880
I2
sS'.thisN'
p881
I112
sS'.thisIndex'
p882
I3
sg15
(lp883
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp884
g16
(lp885
S'd'
asg18
S'Y'
sS'.thisRepN'
p886
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p887
I3
sS'.thisN'
p888
I113
sS'.thisIndex'
p889
I2
sg15
(lp890
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I2
sa(dp891
g16
(lp892
S'k'
asg18
S'Y'
sS'.thisRepN'
p893
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p894
I4
sS'.thisN'
p895
I114
sS'.thisIndex'
p896
I0
sg15
(lp897
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp898
g16
(lp899
S'k'
asg18
S'N'
sS'.thisRepN'
p900
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p901
I5
sS'.thisN'
p902
I115
sS'.thisIndex'
p903
I7
sg15
(lp904
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp905
g16
(lp906
S'd'
asg18
S'Y'
sS'.thisRepN'
p907
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p908
I6
sS'.thisN'
p909
I116
sS'.thisIndex'
p910
I2
sg15
(lp911
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I2
sa(dp912
g16
(lp913
S'd'
asg18
S'Y'
sS'.thisRepN'
p914
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p915
I7
sS'.thisN'
p916
I117
sS'.thisIndex'
p917
I0
sg15
(lp918
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp919
g16
(lp920
S'k'
asg18
S'N'
sS'.thisRepN'
p921
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p922
I8
sS'.thisN'
p923
I118
sS'.thisIndex'
p924
I5
sg15
(lp925
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I5
sa(dp926
g16
(lp927
S'k'
asg18
S'N'
sS'.thisRepN'
p928
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p929
I9
sS'.thisN'
p930
I119
sS'.thisIndex'
p931
I0
sg15
(lp932
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp933
g16
(lp934
S'k'
asg18
S'N'
sS'.thisRepN'
p935
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p936
I10
sS'.thisN'
p937
I120
sS'.thisIndex'
p938
I2
sg15
(lp939
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp940
g16
(lp941
S'd'
asg18
S'N'
sS'.thisRepN'
p942
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p943
I0
sS'.thisN'
p944
I121
sS'.thisIndex'
p945
I9
sg15
(lp946
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp947
g16
(lp948
S'd'
asg18
S'N'
sS'.thisRepN'
p949
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p950
I1
sS'.thisN'
p951
I122
sS'.thisIndex'
p952
I9
sg15
(lp953
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp954
g16
(lp955
S'd'
asg18
S'N'
sS'.thisRepN'
p956
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p957
I2
sS'.thisN'
p958
I123
sS'.thisIndex'
p959
I6
sg15
(lp960
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp961
g16
(lp962
S'k'
asg18
S'Y'
sS'.thisRepN'
p963
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p964
I3
sS'.thisN'
p965
I124
sS'.thisIndex'
p966
I2
sg15
(lp967
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp968
g16
(lp969
S'k'
asg18
S'Y'
sS'.thisRepN'
p970
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p971
I4
sS'.thisN'
p972
I125
sS'.thisIndex'
p973
I0
sg15
(lp974
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp975
g16
(lp976
S'k'
asg18
S'N'
sS'.thisRepN'
p977
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p978
I5
sS'.thisN'
p979
I126
sS'.thisIndex'
p980
I4
sg15
(lp981
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp982
g16
(lp983
S'd'
asg18
S'Y'
sS'.thisRepN'
p984
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p985
I6
sS'.thisN'
p986
I127
sS'.thisIndex'
p987
I6
sg15
(lp988
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp989
g16
(lp990
S'k'
asg18
S'N'
sS'.thisRepN'
p991
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p992
I7
sS'.thisN'
p993
I128
sS'.thisIndex'
p994
I10
sg15
(lp995
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp996
g16
(lp997
S'k'
asg18
S'N'
sS'.thisRepN'
p998
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p999
I8
sS'.thisN'
p1000
I129
sS'.thisIndex'
p1001
I8
sg15
(lp1002
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1003
g16
(lp1004
S'k'
asg18
S'Y'
sS'.thisRepN'
p1005
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1006
I9
sS'.thisN'
p1007
I130
sS'.thisIndex'
p1008
I8
sg15
(lp1009
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1010
g16
(lp1011
S'k'
asg18
S'Y'
sS'.thisRepN'
p1012
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1013
I10
sS'.thisN'
p1014
I131
sS'.thisIndex'
p1015
I3
sg15
(lp1016
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1017
g16
(lp1018
S'd'
asg18
S'N'
sS'.thisRepN'
p1019
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1020
I0
sS'.thisN'
p1021
I132
sS'.thisIndex'
p1022
I9
sg15
(lp1023
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp1024
g16
(lp1025
S'k'
asg18
S'N'
sS'.thisRepN'
p1026
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1027
I1
sS'.thisN'
p1028
I133
sS'.thisIndex'
p1029
I2
sg15
(lp1030
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1031
g16
(lp1032
S'd'
asg18
S'N'
sS'.thisRepN'
p1033
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1034
I2
sS'.thisN'
p1035
I134
sS'.thisIndex'
p1036
I6
sg15
(lp1037
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp1038
g16
(lp1039
S'k'
asg18
S'Y'
sS'.thisRepN'
p1040
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1041
I3
sS'.thisN'
p1042
I135
sS'.thisIndex'
p1043
I0
sg15
(lp1044
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp1045
g16
(lp1046
S'd'
asg18
S'N'
sS'.thisRepN'
p1047
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1048
I4
sS'.thisN'
p1049
I136
sS'.thisIndex'
p1050
I2
sg15
(lp1051
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I2
sa(dp1052
g16
(lp1053
S'd'
asg18
S'Y'
sS'.thisRepN'
p1054
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1055
I5
sS'.thisN'
p1056
I137
sS'.thisIndex'
p1057
I7
sg15
(lp1058
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp1059
g16
(lp1060
S'd'
asg18
S'N'
sS'.thisRepN'
p1061
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1062
I6
sS'.thisN'
p1063
I138
sS'.thisIndex'
p1064
I10
sg15
(lp1065
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I10
sa(dp1066
g16
(lp1067
S'k'
asg18
S'N'
sS'.thisRepN'
p1068
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1069
I7
sS'.thisN'
p1070
I139
sS'.thisIndex'
p1071
I5
sg15
(lp1072
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1073
g16
(lp1074
S'd'
asg18
S'Y'
sS'.thisRepN'
p1075
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1076
I8
sS'.thisN'
p1077
I140
sS'.thisIndex'
p1078
I5
sg15
(lp1079
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I5
sa(dp1080
g16
(lp1081
S'd'
asg18
S'Y'
sS'.thisRepN'
p1082
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1083
I9
sS'.thisN'
p1084
I141
sS'.thisIndex'
p1085
I6
sg15
(lp1086
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp1087
g16
(lp1088
S'd'
asg18
S'Y'
sS'.thisRepN'
p1089
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1090
I10
sS'.thisN'
p1091
I142
sS'.thisIndex'
p1092
I9
sg15
(lp1093
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp1094
g16
(lp1095
S'k'
asg18
S'N'
sS'.thisRepN'
p1096
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1097
I0
sS'.thisN'
p1098
I143
sS'.thisIndex'
p1099
I1
sg15
(lp1100
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1101
g16
(lp1102
S'k'
asg18
S'N'
sS'.thisRepN'
p1103
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1104
I1
sS'.thisN'
p1105
I144
sS'.thisIndex'
p1106
I0
sg15
(lp1107
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1108
g16
(lp1109
S'd'
asg18
S'N'
sS'.thisRepN'
p1110
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1111
I2
sS'.thisN'
p1112
I145
sS'.thisIndex'
p1113
I8
sg15
(lp1114
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I8
sa(dp1115
g16
(lp1116
S'd'
asg18
S'Y'
sS'.thisRepN'
p1117
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1118
I3
sS'.thisN'
p1119
I146
sS'.thisIndex'
p1120
I0
sg15
(lp1121
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1122
g16
(lp1123
S'd'
asg18
S'N'
sS'.thisRepN'
p1124
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1125
I4
sS'.thisN'
p1126
I147
sS'.thisIndex'
p1127
I10
sg15
(lp1128
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I10
sa(dp1129
g16
(lp1130
S'd'
asg18
S'N'
sS'.thisRepN'
p1131
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1132
I5
sS'.thisN'
p1133
I148
sS'.thisIndex'
p1134
I2
sg15
(lp1135
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I2
sa(dp1136
g16
(lp1137
S'd'
asg18
S'N'
sg22
I28
sS'.thisN'
p1138
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1139
I6
sS'.thisRepN'
p1140
I13
sg21
I22
sS'.thisIndex'
p1141
I8
sg23
I20
sg15
(lp1142
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I8
sa(dp1143
g16
(lp1144
S'k'
asg95
I7
sS'.thisRepN'
p1145
I13
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1146
I7
sS'.thisN'
p1147
I150
sS'.thisIndex'
p1148
I7
sg15
(lp1149
S'k'
asg17
S'Y'
sg14
I4
sa(dp1150
g16
(lp1151
S'd'
asg95
I1
sS'.thisRepN'
p1152
I13
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1153
I8
sS'.thisN'
p1154
I151
sS'.thisIndex'
p1155
I1
sg15
(lp1156
S'k'
asg17
S'N'
sg14
I4
sa(dp1157
g16
(lp1158
S'k'
asg18
S'N'
sS'.thisRepN'
p1159
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1160
I9
sS'.thisN'
p1161
I152
sS'.thisIndex'
p1162
I9
sg15
(lp1163
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1164
g16
(lp1165
S'k'
asg18
S'N'
sS'.thisRepN'
p1166
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1167
I10
sS'.thisN'
p1168
I153
sS'.thisIndex'
p1169
I0
sg15
(lp1170
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1171
g16
(lp1172
S'k'
asg18
S'N'
sS'.thisRepN'
p1173
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1174
I0
sS'.thisN'
p1175
I154
sS'.thisIndex'
p1176
I0
sg15
(lp1177
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1178
g16
(lp1179
S'k'
asg18
S'Y'
sS'.thisRepN'
p1180
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1181
I1
sS'.thisN'
p1182
I155
sS'.thisIndex'
p1183
I10
sg15
(lp1184
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1185
g16
(lp1186
S'd'
asg18
S'N'
sS'.thisRepN'
p1187
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1188
I2
sS'.thisN'
p1189
I156
sS'.thisIndex'
p1190
I2
sg15
(lp1191
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1192
g16
(lp1193
S'k'
asg18
S'N'
sS'.thisRepN'
p1194
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1195
I3
sS'.thisN'
p1196
I157
sS'.thisIndex'
p1197
I8
sg15
(lp1198
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1199
g16
(lp1200
S'k'
asg18
S'Y'
sS'.thisRepN'
p1201
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1202
I4
sS'.thisN'
p1203
I158
sS'.thisIndex'
p1204
I6
sg15
(lp1205
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1206
g16
(lp1207
S'd'
asg18
S'Y'
sS'.thisRepN'
p1208
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1209
I5
sS'.thisN'
p1210
I159
sS'.thisIndex'
p1211
I2
sg15
(lp1212
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1213
g16
(lp1214
S'd'
asg18
S'N'
sS'.thisRepN'
p1215
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1216
I6
sS'.thisN'
p1217
I160
sS'.thisIndex'
p1218
I4
sg15
(lp1219
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I4
sa(dp1220
g16
(lp1221
S'k'
asg18
S'Y'
sS'.thisRepN'
p1222
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1223
I7
sS'.thisN'
p1224
I161
sS'.thisIndex'
p1225
I7
sg15
(lp1226
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I7
sa(dp1227
g16
(lp1228
S'd'
asg18
S'N'
sS'.thisRepN'
p1229
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1230
I8
sS'.thisN'
p1231
I162
sS'.thisIndex'
p1232
I7
sg15
(lp1233
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I7
sa(dp1234
g16
(lp1235
S'd'
asg18
S'N'
sS'.thisRepN'
p1236
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1237
I9
sS'.thisN'
p1238
I163
sS'.thisIndex'
p1239
I6
sg15
(lp1240
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1241
S'd'
asg95
I6
sa(dp1242
g16
(lp1243
S'k'
asg18
S'Y'
sS'.thisRepN'
p1244
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1245
I10
sS'.thisN'
p1246
I164
sS'.thisIndex'
p1247
I5
sg15
(lp1248
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1249
g16
(lp1250
S'd'
asg18
S'Y'
sS'.thisRepN'
p1251
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1252
I0
sS'.thisN'
p1253
I165
sS'.thisIndex'
p1254
I6
sg15
(lp1255
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I6
sa(dp1256
g16
(lp1257
S'k'
asg18
S'Y'
sS'.thisRepN'
p1258
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1259
I1
sS'.thisN'
p1260
I166
sS'.thisIndex'
p1261
I4
sg15
(lp1262
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I4
sa(dp1263
g16
(lp1264
S'd'
asg18
S'N'
sS'.thisRepN'
p1265
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1266
I2
sS'.thisN'
p1267
I167
sS'.thisIndex'
p1268
I9
sg15
(lp1269
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1270
g16
(lp1271
S'd'
asg18
S'N'
sS'.thisRepN'
p1272
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1273
I3
sS'.thisN'
p1274
I168
sS'.thisIndex'
p1275
I3
sg15
(lp1276
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1277
g16
(lp1278
S'k'
asg18
S'N'
sS'.thisRepN'
p1279
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1280
I4
sS'.thisN'
p1281
I169
sS'.thisIndex'
p1282
I3
sg15
(lp1283
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I3
sa(dp1284
g16
(lp1285
S'k'
asg18
S'N'
sS'.thisRepN'
p1286
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1287
I5
sS'.thisN'
p1288
I170
sS'.thisIndex'
p1289
I0
sg15
(lp1290
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I0
sa(dp1291
g16
(lp1292
S'k'
asg18
S'Y'
sS'.thisRepN'
p1293
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1294
I6
sS'.thisN'
p1295
I171
sS'.thisIndex'
p1296
I3
sg15
(lp1297
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1298
g16
(lp1299
S'k'
asg18
S'N'
sS'.thisRepN'
p1300
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1301
I7
sS'.thisN'
p1302
I172
sS'.thisIndex'
p1303
I2
sg15
(lp1304
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1305
g16
(lp1306
S'd'
asg18
S'Y'
sS'.thisRepN'
p1307
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1308
I8
sS'.thisN'
p1309
I173
sS'.thisIndex'
p1310
I2
sg15
(lp1311
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1312
g16
(lp1313
S'd'
asg18
S'N'
sS'.thisRepN'
p1314
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1315
I9
sS'.thisN'
p1316
I174
sS'.thisIndex'
p1317
I4
sg15
(lp1318
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I4
sa(dp1319
g16
(lp1320
S'k'
asg18
S'N'
sS'.thisRepN'
p1321
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1322
I10
sS'.thisN'
p1323
I175
sS'.thisIndex'
p1324
I3
sg15
(lp1325
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1326
g16
(lp1327
S'd'
asg18
S'N'
sS'.thisRepN'
p1328
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1329
I0
sS'.thisN'
p1330
I176
sS'.thisIndex'
p1331
I7
sg15
(lp1332
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1333
g16
(lp1334
S'd'
asg18
S'Y'
sS'.thisRepN'
p1335
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1336
I1
sS'.thisN'
p1337
I177
sS'.thisIndex'
p1338
I5
sg15
(lp1339
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1340
g16
(lp1341
S'k'
asg18
S'Y'
sS'.thisRepN'
p1342
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1343
I2
sS'.thisN'
p1344
I178
sS'.thisIndex'
p1345
I6
sg15
(lp1346
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1347
g16
(lp1348
S'd'
asg18
S'Y'
sS'.thisRepN'
p1349
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1350
I3
sS'.thisN'
p1351
I179
sS'.thisIndex'
p1352
I9
sg15
(lp1353
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I9
sa(dp1354
g16
(lp1355
S'k'
asg18
S'Y'
sS'.thisRepN'
p1356
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1357
I4
sS'.thisN'
p1358
I180
sS'.thisIndex'
p1359
I5
sg15
(lp1360
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1361
g16
(lp1362
S'd'
asg18
S'Y'
sS'.thisRepN'
p1363
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1364
I5
sS'.thisN'
p1365
I181
sS'.thisIndex'
p1366
I8
sg15
(lp1367
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I8
sa(dp1368
g16
(lp1369
S'd'
asg18
S'N'
sS'.thisRepN'
p1370
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1371
I6
sS'.thisN'
p1372
I182
sS'.thisIndex'
p1373
I2
sg15
(lp1374
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1375
g16
(lp1376
S'd'
asg18
S'Y'
sS'.thisRepN'
p1377
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1378
I7
sS'.thisN'
p1379
I183
sS'.thisIndex'
p1380
I6
sg15
(lp1381
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1382
g16
(lp1383
S'd'
asg18
S'N'
sS'.thisRepN'
p1384
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1385
I8
sS'.thisN'
p1386
I184
sS'.thisIndex'
p1387
I5
sg15
(lp1388
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1389
g16
(lp1390
S'k'
asg18
S'Y'
sS'.thisRepN'
p1391
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1392
I9
sS'.thisN'
p1393
I185
sS'.thisIndex'
p1394
I6
sg15
(lp1395
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1396
g16
(lp1397
S'k'
asg18
S'Y'
sS'.thisRepN'
p1398
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1399
I10
sS'.thisN'
p1400
I186
sS'.thisIndex'
p1401
I9
sg15
(lp1402
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I9
sa(dp1403
g16
(lp1404
S'd'
asg18
S'N'
sS'.thisRepN'
p1405
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1406
I0
sS'.thisN'
p1407
I187
sS'.thisIndex'
p1408
I0
sg15
(lp1409
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1410
g16
(lp1411
S'd'
asg18
S'N'
sS'.thisRepN'
p1412
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1413
I1
sS'.thisN'
p1414
I188
sS'.thisIndex'
p1415
I9
sg15
(lp1416
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1417
g16
(lp1418
S'd'
asg18
S'Y'
sS'.thisRepN'
p1419
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1420
I2
sS'.thisN'
p1421
I189
sS'.thisIndex'
p1422
I5
sg15
(lp1423
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1424
g16
(lp1425
S'k'
asg18
S'N'
sS'.thisRepN'
p1426
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1427
I3
sS'.thisN'
p1428
I190
sS'.thisIndex'
p1429
I1
sg15
(lp1430
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1431
g16
(lp1432
S'd'
asg18
S'N'
sS'.thisRepN'
p1433
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1434
I4
sS'.thisN'
p1435
I191
sS'.thisIndex'
p1436
I8
sg15
(lp1437
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1438
g16
(lp1439
S'd'
asg18
S'N'
sS'.thisRepN'
p1440
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1441
I5
sS'.thisN'
p1442
I192
sS'.thisIndex'
p1443
I0
sg15
(lp1444
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I0
sa(dp1445
g16
(lp1446
S'd'
asg18
S'N'
sS'.thisRepN'
p1447
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1448
I6
sS'.thisN'
p1449
I193
sS'.thisIndex'
p1450
I3
sg15
(lp1451
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1452
g16
(lp1453
S'd'
asg18
S'N'
sS'.thisRepN'
p1454
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1455
I7
sS'.thisN'
p1456
I194
sS'.thisIndex'
p1457
I7
sg15
(lp1458
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1459
g16
(lp1460
S'd'
asg18
S'N'
sS'.thisRepN'
p1461
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1462
I8
sS'.thisN'
p1463
I195
sS'.thisIndex'
p1464
I6
sg15
(lp1465
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I6
sa(dp1466
g16
(lp1467
S'd'
asg18
S'N'
sS'.thisRepN'
p1468
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1469
I9
sS'.thisN'
p1470
I196
sS'.thisIndex'
p1471
I8
sg15
(lp1472
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I8
sa(dp1473
g16
(lp1474
S'd'
asg18
S'N'
sS'.thisRepN'
p1475
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1476
I10
sS'.thisN'
p1477
I197
sS'.thisIndex'
p1478
I0
sg15
(lp1479
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1480
g16
(lp1481
S'k'
asg18
S'Y'
sS'.thisRepN'
p1482
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1483
I0
sS'.thisN'
p1484
I198
sS'.thisIndex'
p1485
I0
sg15
(lp1486
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1487
g16
(lp1488
S'k'
asg18
S'N'
sg22
I28
sS'.thisN'
p1489
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1490
I1
sS'.thisRepN'
p1491
I18
sg21
I30
sS'.thisIndex'
p1492
I4
sg23
I19
sg15
(lp1493
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1494
g16
(lp1495
S'd'
asg95
I0
sS'.thisRepN'
p1496
I18
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1497
I2
sS'.thisN'
p1498
I200
sS'.thisIndex'
p1499
I0
sg15
(lp1500
S'k'
asg17
S'N'
sg14
I5
sa(dp1501
g16
(lp1502
S'k'
asg95
I5
sS'.thisRepN'
p1503
I18
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1504
I3
sS'.thisN'
p1505
I201
sS'.thisIndex'
p1506
I5
sg15
(lp1507
S'd'
asg17
S'N'
sg14
I5
sa(dp1508
g16
(lp1509
S'k'
asg18
S'N'
sS'.thisRepN'
p1510
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1511
I4
sS'.thisN'
p1512
I202
sS'.thisIndex'
p1513
I9
sg15
(lp1514
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1515
g16
(lp1516
S'd'
asg18
S'Y'
sS'.thisRepN'
p1517
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1518
I5
sS'.thisN'
p1519
I203
sS'.thisIndex'
p1520
I1
sg15
(lp1521
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1522
g16
(lp1523
S'd'
asg18
S'Y'
sS'.thisRepN'
p1524
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1525
I6
sS'.thisN'
p1526
I204
sS'.thisIndex'
p1527
I5
sg15
(lp1528
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1529
g16
(lp1530
S'd'
asg18
S'Y'
sS'.thisRepN'
p1531
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1532
I7
sS'.thisN'
p1533
I205
sS'.thisIndex'
p1534
I5
sg15
(lp1535
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1536
g16
(lp1537
S'k'
asg18
S'N'
sS'.thisRepN'
p1538
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1539
I8
sS'.thisN'
p1540
I206
sS'.thisIndex'
p1541
I7
sg15
(lp1542
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1543
g16
(lp1544
S'd'
asg18
S'N'
sS'.thisRepN'
p1545
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1546
I9
sS'.thisN'
p1547
I207
sS'.thisIndex'
p1548
I9
sg15
(lp1549
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I9
sa(dp1550
g16
(lp1551
S'd'
asg18
S'N'
sS'.thisRepN'
p1552
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1553
I10
sS'.thisN'
p1554
I208
sS'.thisIndex'
p1555
I8
sg15
(lp1556
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1557
g16
(lp1558
S'k'
asg18
S'Y'
sS'.thisRepN'
p1559
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1560
I0
sS'.thisN'
p1561
I209
sS'.thisIndex'
p1562
I0
sg15
(lp1563
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1564
g16
(lp1565
S'd'
asg18
S'N'
sS'.thisRepN'
p1566
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1567
I1
sS'.thisN'
p1568
I210
sS'.thisIndex'
p1569
I9
sg15
(lp1570
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1571
g16
(lp1572
S'k'
asg18
S'N'
sS'.thisRepN'
p1573
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1574
I2
sS'.thisN'
p1575
I211
sS'.thisIndex'
p1576
I1
sg15
(lp1577
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I1
sa(dp1578
g16
(lp1579
S'k'
asg18
S'N'
sS'.thisRepN'
p1580
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1581
I3
sS'.thisN'
p1582
I212
sS'.thisIndex'
p1583
I5
sg15
(lp1584
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp1585
g16
(lp1586
S'd'
asg18
S'N'
sS'.thisRepN'
p1587
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1588
I4
sS'.thisN'
p1589
I213
sS'.thisIndex'
p1590
I3
sg15
(lp1591
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I3
sa(dp1592
g16
(lp1593
S'k'
asg18
S'Y'
sS'.thisRepN'
p1594
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1595
I5
sS'.thisN'
p1596
I214
sS'.thisIndex'
p1597
I6
sg15
(lp1598
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1599
g16
(lp1600
S'k'
asg18
S'N'
sS'.thisRepN'
p1601
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1602
I6
sS'.thisN'
p1603
I215
sS'.thisIndex'
p1604
I2
sg15
(lp1605
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1606
g16
(lp1607
S'k'
asg18
S'Y'
sS'.thisRepN'
p1608
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1609
I7
sS'.thisN'
p1610
I216
sS'.thisIndex'
p1611
I9
sg15
(lp1612
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1613
g16
(lp1614
S'd'
asg18
S'N'
sS'.thisRepN'
p1615
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1616
I8
sS'.thisN'
p1617
I217
sS'.thisIndex'
p1618
I3
sg15
(lp1619
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1620
g16
(lp1621
S'k'
asg18
S'N'
sS'.thisRepN'
p1622
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1623
I9
sS'.thisN'
p1624
I218
sS'.thisIndex'
p1625
I9
sg15
(lp1626
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1627
g16
(lp1628
S'd'
asg18
S'Y'
sS'.thisRepN'
p1629
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1630
I10
sS'.thisN'
p1631
I219
sS'.thisIndex'
p1632
I10
sg15
(lp1633
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I10
sa(dp1634
g16
(lp1635
S'd'
asg18
S'N'
sS'.thisRepN'
p1636
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1637
I0
sS'.thisN'
p1638
I220
sS'.thisIndex'
p1639
I3
sg15
(lp1640
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1641
g16
(lp1642
S'k'
asg18
S'Y'
sS'.thisRepN'
p1643
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1644
I1
sS'.thisN'
p1645
I221
sS'.thisIndex'
p1646
I8
sg15
(lp1647
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1648
g16
(lp1649
S'd'
asg18
S'N'
sS'.thisRepN'
p1650
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1651
I2
sS'.thisN'
p1652
I222
sS'.thisIndex'
p1653
I4
sg15
(lp1654
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1655
g16
(lp1656
S'd'
asg18
S'N'
sS'.thisRepN'
p1657
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1658
I3
sS'.thisN'
p1659
I223
sS'.thisIndex'
p1660
I0
sg15
(lp1661
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1662
g16
(lp1663
S'k'
asg18
S'Y'
sS'.thisRepN'
p1664
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1665
I4
sS'.thisN'
p1666
I224
sS'.thisIndex'
p1667
I2
sg15
(lp1668
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1669
g16
(lp1670
S'd'
asg18
S'N'
sS'.thisRepN'
p1671
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1672
I5
sS'.thisN'
p1673
I225
sS'.thisIndex'
p1674
I3
sg15
(lp1675
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I3
sa(dp1676
g16
(lp1677
S'k'
asg18
S'Y'
sS'.thisRepN'
p1678
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1679
I6
sS'.thisN'
p1680
I226
sS'.thisIndex'
p1681
I2
sg15
(lp1682
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1683
g16
(lp1684
S'k'
asg18
S'N'
sS'.thisRepN'
p1685
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1686
I7
sS'.thisN'
p1687
I227
sS'.thisIndex'
p1688
I9
sg15
(lp1689
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1690
g16
(lp1691
S'k'
asg18
S'N'
sS'.thisRepN'
p1692
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1693
I8
sS'.thisN'
p1694
I228
sS'.thisIndex'
p1695
I1
sg15
(lp1696
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I1
sa(dp1697
g16
(lp1698
S'd'
asg18
S'Y'
sS'.thisRepN'
p1699
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1700
I9
sS'.thisN'
p1701
I229
sS'.thisIndex'
p1702
I5
sg15
(lp1703
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1704
g16
(lp1705
S'k'
asg18
S'Y'
sS'.thisRepN'
p1706
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1707
I10
sS'.thisN'
p1708
I230
sS'.thisIndex'
p1709
I0
sg15
(lp1710
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1711
g16
(lp1712
S'k'
asg18
S'Y'
sS'.thisRepN'
p1713
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1714
I0
sS'.thisN'
p1715
I231
sS'.thisIndex'
p1716
I5
sg15
(lp1717
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp1718
g16
(lp1719
S'k'
asg18
S'N'
sS'.thisRepN'
p1720
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1721
I1
sS'.thisN'
p1722
I232
sS'.thisIndex'
p1723
I6
sg15
(lp1724
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1725
g16
(lp1726
S'k'
asg18
S'N'
sS'.thisRepN'
p1727
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1728
I2
sS'.thisN'
p1729
I233
sS'.thisIndex'
p1730
I7
sg15
(lp1731
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I7
sa(dp1732
g16
(lp1733
S'k'
asg18
S'N'
sS'.thisRepN'
p1734
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1735
I3
sS'.thisN'
p1736
I234
sS'.thisIndex'
p1737
I4
sg15
(lp1738
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1739
g16
(lp1740
S'd'
asg18
S'N'
sS'.thisRepN'
p1741
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1742
I4
sS'.thisN'
p1743
I235
sS'.thisIndex'
p1744
I1
sg15
(lp1745
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1746
g16
(lp1747
S'k'
asg18
S'N'
sS'.thisRepN'
p1748
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1749
I5
sS'.thisN'
p1750
I236
sS'.thisIndex'
p1751
I6
sg15
(lp1752
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1753
g16
(lp1754
S'd'
asg18
S'N'
sS'.thisRepN'
p1755
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1756
I6
sS'.thisN'
p1757
I237
sS'.thisIndex'
p1758
I3
sg15
(lp1759
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1760
g16
(lp1761
S'k'
asg18
S'N'
sS'.thisRepN'
p1762
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1763
I7
sS'.thisN'
p1764
I238
sS'.thisIndex'
p1765
I7
sg15
(lp1766
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1767
g16
(lp1768
S'd'
asg18
S'N'
sS'.thisRepN'
p1769
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1770
I8
sS'.thisN'
p1771
I239
sS'.thisIndex'
p1772
I1
sg15
(lp1773
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I1
sa(dp1774
g16
(lp1775
S'd'
asg18
S'Y'
sS'.thisRepN'
p1776
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1777
I9
sS'.thisN'
p1778
I240
sS'.thisIndex'
p1779
I4
sg15
(lp1780
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1781
g16
(lp1782
S'k'
asg18
S'Y'
sS'.thisRepN'
p1783
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1784
I10
sS'.thisN'
p1785
I241
sS'.thisIndex'
p1786
I5
sg15
(lp1787
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1788
g16
(lp1789
S'd'
asg18
S'N'
sS'.thisRepN'
p1790
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1791
I0
sS'.thisN'
p1792
I242
sS'.thisIndex'
p1793
I9
sg15
(lp1794
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1795
g16
(lp1796
S'd'
asg18
S'N'
sS'.thisRepN'
p1797
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1798
I1
sS'.thisN'
p1799
I243
sS'.thisIndex'
p1800
I4
sg15
(lp1801
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1802
g16
(lp1803
S'k'
asg18
S'Y'
sS'.thisRepN'
p1804
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1805
I2
sS'.thisN'
p1806
I244
sS'.thisIndex'
p1807
I7
sg15
(lp1808
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1809
g16
(lp1810
S'k'
asg18
S'Y'
sS'.thisRepN'
p1811
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1812
I3
sS'.thisN'
p1813
I245
sS'.thisIndex'
p1814
I3
sg15
(lp1815
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1816
g16
(lp1817
S'd'
asg18
S'Y'
sS'.thisRepN'
p1818
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1819
I4
sS'.thisN'
p1820
I246
sS'.thisIndex'
p1821
I7
sg15
(lp1822
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1823
g16
(lp1824
S'd'
asg18
S'N'
sS'.thisRepN'
p1825
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1826
I5
sS'.thisN'
p1827
I247
sS'.thisIndex'
p1828
I7
sg15
(lp1829
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I7
sa(dp1830
g16
(lp1831
S'd'
asg18
S'N'
sS'.thisRepN'
p1832
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1833
I6
sS'.thisN'
p1834
I248
sS'.thisIndex'
p1835
I4
sg15
(lp1836
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I4
sa(dp1837
g16
(lp1838
S'd'
asg18
S'N'
sg22
I30
sS'.thisN'
p1839
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1840
I7
sS'.thisRepN'
p1841
I22
sg21
I33
sS'.thisIndex'
p1842
I5
sg23
I18
sg15
(lp1843
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp1844
g16
(lp1845
S'k'
asg95
I5
sS'.thisRepN'
p1846
I22
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1847
I8
sS'.thisN'
p1848
I250
sS'.thisIndex'
p1849
I5
sg15
(lp1850
S'k'
asg17
S'Y'
sg14
I6
sa(dp1851
g16
(lp1852
S'k'
asg95
I7
sS'.thisRepN'
p1853
I22
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1854
I9
sS'.thisN'
p1855
I251
sS'.thisIndex'
p1856
I7
sg15
(lp1857
S'd'
asg17
S'N'
sg14
I6
sa(dp1858
g16
(lp1859
S'k'
asg18
S'N'
sS'.thisRepN'
p1860
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1861
I10
sS'.thisN'
p1862
I252
sS'.thisIndex'
p1863
I6
sg15
(lp1864
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp1865
g16
(lp1866
S'k'
asg18
S'N'
sS'.thisRepN'
p1867
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1868
I0
sS'.thisN'
p1869
I253
sS'.thisIndex'
p1870
I1
sg15
(lp1871
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I1
sa(dp1872
g16
(lp1873
S'd'
asg18
S'N'
sS'.thisRepN'
p1874
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1875
I1
sS'.thisN'
p1876
I254
sS'.thisIndex'
p1877
I9
sg15
(lp1878
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp1879
g16
(lp1880
S'd'
asg18
S'Y'
sS'.thisRepN'
p1881
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1882
I2
sS'.thisN'
p1883
I255
sS'.thisIndex'
p1884
I9
sg15
(lp1885
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp1886
g16
(lp1887
S'd'
asg18
S'N'
sS'.thisRepN'
p1888
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1889
I3
sS'.thisN'
p1890
I256
sS'.thisIndex'
p1891
I3
sg15
(lp1892
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp1893
g16
(lp1894
S'k'
asg18
S'N'
sS'.thisRepN'
p1895
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1896
I4
sS'.thisN'
p1897
I257
sS'.thisIndex'
p1898
I7
sg15
(lp1899
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp1900
g16
(lp1901
S'k'
asg18
S'N'
sS'.thisRepN'
p1902
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1903
I5
sS'.thisN'
p1904
I258
sS'.thisIndex'
p1905
I7
sg15
(lp1906
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I7
sa(dp1907
g16
(lp1908
S'd'
asg18
S'Y'
sS'.thisRepN'
p1909
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1910
I6
sS'.thisN'
p1911
I259
sS'.thisIndex'
p1912
I3
sg15
(lp1913
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I3
sa(dp1914
g16
(lp1915
S'k'
asg18
S'N'
sS'.thisRepN'
p1916
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1917
I7
sS'.thisN'
p1918
I260
sS'.thisIndex'
p1919
I10
sg15
(lp1920
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp1921
g16
(lp1922
S'd'
asg18
S'N'
sS'.thisRepN'
p1923
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1924
I8
sS'.thisN'
p1925
I261
sS'.thisIndex'
p1926
I7
sg15
(lp1927
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp1928
S'k'
asg95
I7
sa(dp1929
g16
(lp1930
S'k'
asg18
S'Y'
sS'.thisRepN'
p1931
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1932
I9
sS'.thisN'
p1933
I262
sS'.thisIndex'
p1934
I2
sg15
(lp1935
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I2
sa(dp1936
g16
(lp1937
S'k'
asg18
S'N'
sS'.thisRepN'
p1938
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1939
I10
sS'.thisN'
p1940
I263
sS'.thisIndex'
p1941
I8
sg15
(lp1942
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp1943
S'n'
asg95
I8
sa(dp1944
g16
(lp1945
S'd'
asg18
S'Y'
sS'.thisRepN'
p1946
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1947
I0
sS'.thisN'
p1948
I264
sS'.thisIndex'
p1949
I7
sg15
(lp1950
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp1951
S'backspace'
p1952
asg95
I7
sa(dp1953
g16
(lp1954
S'd'
asg18
S'Y'
sS'.thisRepN'
p1955
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1956
I1
sS'.thisN'
p1957
I265
sS'.thisIndex'
p1958
I2
sg15
(lp1959
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I2
sa(dp1960
g16
(lp1961
S'k'
asg18
S'Y'
sS'.thisRepN'
p1962
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1963
I2
sS'.thisN'
p1964
I266
sS'.thisIndex'
p1965
I6
sg15
(lp1966
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I6
sa(dp1967
g16
(lp1968
S'd'
asg18
S'Y'
sS'.thisRepN'
p1969
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1970
I3
sS'.thisN'
p1971
I267
sS'.thisIndex'
p1972
I1
sg15
(lp1973
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I1
sa(dp1974
g16
(lp1975
S'd'
asg18
S'N'
sS'.thisRepN'
p1976
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1977
I4
sS'.thisN'
p1978
I268
sS'.thisIndex'
p1979
I4
sg15
(lp1980
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp1981
S'return'
p1982
asg95
I4
sa(dp1983
g16
(lp1984
S'd'
asg18
S'N'
sS'.thisRepN'
p1985
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1986
I5
sS'.thisN'
p1987
I269
sS'.thisIndex'
p1988
I8
sg15
(lp1989
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I8
sa(dp1990
g16
(lp1991
S'k'
asg18
S'Y'
sS'.thisRepN'
p1992
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1993
I6
sS'.thisN'
p1994
I270
sS'.thisIndex'
p1995
I1
sg15
(lp1996
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I1
sa(dp1997
g16
(lp1998
S'k'
asg18
S'N'
sS'.thisRepN'
p1999
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2000
I7
sS'.thisN'
p2001
I271
sS'.thisIndex'
p2002
I6
sg15
(lp2003
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2004
g16
(lp2005
S'k'
asg18
S'Y'
sS'.thisRepN'
p2006
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2007
I8
sS'.thisN'
p2008
I272
sS'.thisIndex'
p2009
I8
sg15
(lp2010
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I8
sa(dp2011
g16
(lp2012
S'd'
asg18
S'Y'
sS'.thisRepN'
p2013
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2014
I9
sS'.thisN'
p2015
I273
sS'.thisIndex'
p2016
I1
sg15
(lp2017
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I1
sa(dp2018
g16
(lp2019
S'd'
asg18
S'N'
sS'.thisRepN'
p2020
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2021
I10
sS'.thisN'
p2022
I274
sS'.thisIndex'
p2023
I1
sg15
(lp2024
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2025
S'd'
aS'k'
asg95
I1
sa(dp2026
g16
(lp2027
S'd'
asg18
S'Y'
sS'.thisRepN'
p2028
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2029
I0
sS'.thisN'
p2030
I275
sS'.thisIndex'
p2031
I4
sg15
(lp2032
S'd'
aS'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2033
S'k'
asg95
I4
sa(dp2034
g16
(lp2035
S'd'
asg18
S'N'
sS'.thisRepN'
p2036
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2037
I1
sS'.thisN'
p2038
I276
sS'.thisIndex'
p2039
I10
sg15
(lp2040
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I10
sa(dp2041
g16
(lp2042
S'd'
asg18
S'N'
sS'.thisRepN'
p2043
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2044
I2
sS'.thisN'
p2045
I277
sS'.thisIndex'
p2046
I8
sg15
(lp2047
S'd'
aS'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I8
sa(dp2048
g16
(lp2049
S'd'
asg18
S'Y'
sS'.thisRepN'
p2050
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2051
I3
sS'.thisN'
p2052
I278
sS'.thisIndex'
p2053
I8
sg15
(lp2054
S'd'
aS'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2055
S'd'
asg95
I8
sa(dp2056
g16
(lp2057
S'k'
asg18
S'N'
sS'.thisRepN'
p2058
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2059
I4
sS'.thisN'
p2060
I279
sS'.thisIndex'
p2061
I6
sg15
(lp2062
S'd'
aS'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2063
S'd'
aS'k'
asg95
I6
sa(dp2064
g16
(lp2065
S'k'
asg18
S'N'
sS'.thisRepN'
p2066
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2067
I5
sS'.thisN'
p2068
I280
sS'.thisIndex'
p2069
I6
sg15
(lp2070
S'd'
aS'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I6
sa(dp2071
g16
(lp2072
S'd'
asg18
S'N'
sS'.thisRepN'
p2073
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2074
I6
sS'.thisN'
p2075
I281
sS'.thisIndex'
p2076
I8
sg15
(lp2077
S'd'
aS'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I8
sa(dp2078
g16
(lp2079
S'k'
asg18
S'N'
sS'.thisRepN'
p2080
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2081
I7
sS'.thisN'
p2082
I282
sS'.thisIndex'
p2083
I9
sg15
(lp2084
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2085
g16
(lp2086
S'k'
asg18
S'Y'
sS'.thisRepN'
p2087
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2088
I8
sS'.thisN'
p2089
I283
sS'.thisIndex'
p2090
I4
sg15
(lp2091
S'd'
aS'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I4
sa(dp2092
g16
(lp2093
S'd'
asg18
S'N'
sS'.thisRepN'
p2094
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2095
I9
sS'.thisN'
p2096
I284
sS'.thisIndex'
p2097
I4
sg15
(lp2098
S'd'
aS'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I4
sa(dp2099
g16
(lp2100
S'k'
asg18
S'N'
sS'.thisRepN'
p2101
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2102
I10
sS'.thisN'
p2103
I285
sS'.thisIndex'
p2104
I10
sg15
(lp2105
S'd'
aS'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I10
sa(dp2106
g16
(lp2107
S'k'
asg18
S'Y'
sS'.thisRepN'
p2108
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2109
I0
sS'.thisN'
p2110
I286
sS'.thisIndex'
p2111
I1
sg15
(lp2112
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2113
g16
(lp2114
S'k'
asg18
S'Y'
sS'.thisRepN'
p2115
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2116
I1
sS'.thisN'
p2117
I287
sS'.thisIndex'
p2118
I1
sg15
(lp2119
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2120
g16
(lp2121
S'k'
asg18
S'N'
sS'.thisRepN'
p2122
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2123
I2
sS'.thisN'
p2124
I288
sS'.thisIndex'
p2125
I6
sg15
(lp2126
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2127
g16
(lp2128
S'k'
asg18
S'N'
sS'.thisRepN'
p2129
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2130
I3
sS'.thisN'
p2131
I289
sS'.thisIndex'
p2132
I3
sg15
(lp2133
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2134
g16
(lp2135
S'd'
asg18
S'Y'
sS'.thisRepN'
p2136
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2137
I4
sS'.thisN'
p2138
I290
sS'.thisIndex'
p2139
I7
sg15
(lp2140
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I7
sa(dp2141
g16
(lp2142
S'k'
asg18
S'Y'
sS'.thisRepN'
p2143
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2144
I5
sS'.thisN'
p2145
I291
sS'.thisIndex'
p2146
I6
sg15
(lp2147
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I6
sa(dp2148
g16
(lp2149
S'k'
asg18
S'Y'
sS'.thisRepN'
p2150
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2151
I6
sS'.thisN'
p2152
I292
sS'.thisIndex'
p2153
I4
sg15
(lp2154
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2155
g16
(lp2156
S'd'
asg18
S'Y'
sS'.thisRepN'
p2157
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2158
I7
sS'.thisN'
p2159
I293
sS'.thisIndex'
p2160
I10
sg15
(lp2161
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I10
sa(dp2162
g16
(lp2163
S'k'
asg18
S'Y'
sS'.thisRepN'
p2164
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2165
I8
sS'.thisN'
p2166
I294
sS'.thisIndex'
p2167
I1
sg15
(lp2168
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2169
g16
(lp2170
S'k'
asg18
S'N'
sS'.thisRepN'
p2171
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2172
I9
sS'.thisN'
p2173
I295
sS'.thisIndex'
p2174
I10
sg15
(lp2175
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I10
sa(dp2176
g16
(lp2177
S'd'
asg18
S'Y'
sS'.thisRepN'
p2178
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2179
I10
sS'.thisN'
p2180
I296
sS'.thisIndex'
p2181
I6
sg15
(lp2182
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2183
g16
(lp2184
S'k'
asg18
S'N'
sS'.thisRepN'
p2185
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2186
I0
sS'.thisN'
p2187
I297
sS'.thisIndex'
p2188
I6
sg15
(lp2189
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2190
g16
(lp2191
S'd'
asg18
S'Y'
sS'.thisRepN'
p2192
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2193
I1
sS'.thisN'
p2194
I298
sS'.thisIndex'
p2195
I9
sg15
(lp2196
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2197
g16
(lp2198
S'k'
asg18
S'N'
sg22
I21
sS'.thisN'
p2199
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2200
I2
sS'.thisRepN'
p2201
I27
sg21
I19
sS'.thisIndex'
p2202
I6
sg23
I22
sg15
(lp2203
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2204
g16
(lp2205
S'd'
asg95
I3
sS'.thisRepN'
p2206
I27
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2207
I3
sS'.thisN'
p2208
I300
sS'.thisIndex'
p2209
I3
sg15
(lp2210
S'k'
asg17
S'N'
sg14
I7
sa(dp2211
g16
(lp2212
S'd'
asg95
I4
sS'.thisRepN'
p2213
I27
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2214
I4
sS'.thisN'
p2215
I301
sS'.thisIndex'
p2216
I4
sg15
(lp2217
S'd'
asg17
S'Y'
sg14
I7
sa(dp2218
g16
(lp2219
S'd'
asg18
S'Y'
sS'.thisRepN'
p2220
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2221
I5
sS'.thisN'
p2222
I302
sS'.thisIndex'
p2223
I0
sg15
(lp2224
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I0
sa(dp2225
g16
(lp2226
S'd'
asg18
S'N'
sS'.thisRepN'
p2227
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2228
I6
sS'.thisN'
p2229
I303
sS'.thisIndex'
p2230
I10
sg15
(lp2231
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2232
g16
(lp2233
S'd'
asg18
S'N'
sS'.thisRepN'
p2234
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2235
I7
sS'.thisN'
p2236
I304
sS'.thisIndex'
p2237
I10
sg15
(lp2238
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2239
g16
(lp2240
S'd'
asg18
S'N'
sS'.thisRepN'
p2241
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2242
I8
sS'.thisN'
p2243
I305
sS'.thisIndex'
p2244
I4
sg15
(lp2245
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I4
sa(dp2246
g16
(lp2247
S'd'
asg18
S'N'
sS'.thisRepN'
p2248
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2249
I9
sS'.thisN'
p2250
I306
sS'.thisIndex'
p2251
I0
sg15
(lp2252
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2253
g16
(lp2254
S'd'
asg18
S'Y'
sS'.thisRepN'
p2255
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2256
I10
sS'.thisN'
p2257
I307
sS'.thisIndex'
p2258
I3
sg15
(lp2259
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2260
g16
(lp2261
S'k'
asg18
S'Y'
sS'.thisRepN'
p2262
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2263
I0
sS'.thisN'
p2264
I308
sS'.thisIndex'
p2265
I1
sg15
(lp2266
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I1
sa(dp2267
g16
(lp2268
S'k'
asg18
S'N'
sS'.thisRepN'
p2269
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2270
I1
sS'.thisN'
p2271
I309
sS'.thisIndex'
p2272
I2
sg15
(lp2273
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2274
g16
(lp2275
S'd'
asg18
S'Y'
sS'.thisRepN'
p2276
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2277
I2
sS'.thisN'
p2278
I310
sS'.thisIndex'
p2279
I1
sg15
(lp2280
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I1
sa(dp2281
g16
(lp2282
S'k'
asg18
S'Y'
sS'.thisRepN'
p2283
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2284
I3
sS'.thisN'
p2285
I311
sS'.thisIndex'
p2286
I5
sg15
(lp2287
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2288
g16
(lp2289
S'k'
asg18
S'N'
sS'.thisRepN'
p2290
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2291
I4
sS'.thisN'
p2292
I312
sS'.thisIndex'
p2293
I10
sg15
(lp2294
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2295
g16
(lp2296
S'k'
asg18
S'Y'
sS'.thisRepN'
p2297
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2298
I5
sS'.thisN'
p2299
I313
sS'.thisIndex'
p2300
I10
sg15
(lp2301
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2302
g16
(lp2303
S'd'
asg18
S'N'
sS'.thisRepN'
p2304
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2305
I6
sS'.thisN'
p2306
I314
sS'.thisIndex'
p2307
I4
sg15
(lp2308
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I4
sa(dp2309
g16
(lp2310
S'd'
asg18
S'Y'
sS'.thisRepN'
p2311
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2312
I7
sS'.thisN'
p2313
I315
sS'.thisIndex'
p2314
I3
sg15
(lp2315
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2316
g16
(lp2317
S'd'
asg18
S'N'
sS'.thisRepN'
p2318
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2319
I8
sS'.thisN'
p2320
I316
sS'.thisIndex'
p2321
I1
sg15
(lp2322
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2323
g16
(lp2324
S'd'
asg18
S'Y'
sS'.thisRepN'
p2325
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2326
I9
sS'.thisN'
p2327
I317
sS'.thisIndex'
p2328
I3
sg15
(lp2329
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2330
g16
(lp2331
S'd'
asg18
S'Y'
sS'.thisRepN'
p2332
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2333
I10
sS'.thisN'
p2334
I318
sS'.thisIndex'
p2335
I10
sg15
(lp2336
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2337
g16
(lp2338
S'd'
asg18
S'Y'
sS'.thisRepN'
p2339
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2340
I0
sS'.thisN'
p2341
I319
sS'.thisIndex'
p2342
I8
sg15
(lp2343
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2344
g16
(lp2345
S'd'
asg18
S'Y'
sS'.thisRepN'
p2346
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2347
I1
sS'.thisN'
p2348
I320
sS'.thisIndex'
p2349
I5
sg15
(lp2350
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2351
g16
(lp2352
S'k'
asg18
S'N'
sS'.thisRepN'
p2353
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2354
I2
sS'.thisN'
p2355
I321
sS'.thisIndex'
p2356
I0
sg15
(lp2357
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I0
sa(dp2358
g16
(lp2359
S'd'
asg18
S'N'
sS'.thisRepN'
p2360
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2361
I3
sS'.thisN'
p2362
I322
sS'.thisIndex'
p2363
I5
sg15
(lp2364
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2365
g16
(lp2366
S'k'
asg18
S'Y'
sS'.thisRepN'
p2367
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2368
I4
sS'.thisN'
p2369
I323
sS'.thisIndex'
p2370
I5
sg15
(lp2371
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I5
sa(dp2372
g16
(lp2373
S'k'
asg18
S'Y'
sS'.thisRepN'
p2374
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2375
I5
sS'.thisN'
p2376
I324
sS'.thisIndex'
p2377
I7
sg15
(lp2378
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I7
sa(dp2379
g16
(lp2380
S'd'
asg18
S'N'
sS'.thisRepN'
p2381
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2382
I6
sS'.thisN'
p2383
I325
sS'.thisIndex'
p2384
I4
sg15
(lp2385
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2386
g16
(lp2387
S'd'
asg18
S'Y'
sS'.thisRepN'
p2388
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2389
I7
sS'.thisN'
p2390
I326
sS'.thisIndex'
p2391
I2
sg15
(lp2392
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2393
g16
(lp2394
S'k'
asg18
S'N'
sS'.thisRepN'
p2395
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2396
I8
sS'.thisN'
p2397
I327
sS'.thisIndex'
p2398
I5
sg15
(lp2399
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I5
sa(dp2400
g16
(lp2401
S'd'
asg18
S'N'
sS'.thisRepN'
p2402
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2403
I9
sS'.thisN'
p2404
I328
sS'.thisIndex'
p2405
I1
sg15
(lp2406
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2407
g16
(lp2408
S'd'
asg18
S'Y'
sS'.thisRepN'
p2409
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2410
I10
sS'.thisN'
p2411
I329
sS'.thisIndex'
p2412
I9
sg15
(lp2413
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2414
g16
(lp2415
S'k'
asg18
S'N'
sS'.thisRepN'
p2416
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2417
I0
sS'.thisN'
p2418
I330
sS'.thisIndex'
p2419
I5
sg15
(lp2420
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I5
sa(dp2421
g16
(lp2422
S'd'
asg18
S'Y'
sS'.thisRepN'
p2423
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2424
I1
sS'.thisN'
p2425
I331
sS'.thisIndex'
p2426
I0
sg15
(lp2427
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2428
g16
(lp2429
S'd'
asg18
S'Y'
sS'.thisRepN'
p2430
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2431
I2
sS'.thisN'
p2432
I332
sS'.thisIndex'
p2433
I1
sg15
(lp2434
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2435
g16
(lp2436
S'd'
asg18
S'N'
sS'.thisRepN'
p2437
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2438
I3
sS'.thisN'
p2439
I333
sS'.thisIndex'
p2440
I9
sg15
(lp2441
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2442
g16
(lp2443
S'k'
asg18
S'N'
sS'.thisRepN'
p2444
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2445
I4
sS'.thisN'
p2446
I334
sS'.thisIndex'
p2447
I3
sg15
(lp2448
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I3
sa(dp2449
g16
(lp2450
S'k'
asg18
S'N'
sS'.thisRepN'
p2451
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2452
I5
sS'.thisN'
p2453
I335
sS'.thisIndex'
p2454
I7
sg15
(lp2455
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I7
sa(dp2456
g16
(lp2457
S'd'
asg18
S'N'
sS'.thisRepN'
p2458
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2459
I6
sS'.thisN'
p2460
I336
sS'.thisIndex'
p2461
I4
sg15
(lp2462
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2463
g16
(lp2464
S'k'
asg18
S'Y'
sS'.thisRepN'
p2465
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2466
I7
sS'.thisN'
p2467
I337
sS'.thisIndex'
p2468
I6
sg15
(lp2469
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2470
S'd'
asg95
I6
sa(dp2471
g16
(lp2472
S'k'
asg18
S'N'
sS'.thisRepN'
p2473
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2474
I8
sS'.thisN'
p2475
I338
sS'.thisIndex'
p2476
I3
sg15
(lp2477
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I3
sa(dp2478
g16
(lp2479
S'k'
asg18
S'Y'
sS'.thisRepN'
p2480
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2481
I9
sS'.thisN'
p2482
I339
sS'.thisIndex'
p2483
I7
sg15
(lp2484
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2485
g16
(lp2486
S'k'
asg18
S'Y'
sS'.thisRepN'
p2487
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2488
I10
sS'.thisN'
p2489
I340
sS'.thisIndex'
p2490
I8
sg15
(lp2491
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2492
g16
(lp2493
S'k'
asg18
S'Y'
sS'.thisRepN'
p2494
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2495
I0
sS'.thisN'
p2496
I341
sS'.thisIndex'
p2497
I7
sg15
(lp2498
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I7
sa(dp2499
g16
(lp2500
S'k'
asg18
S'Y'
sS'.thisRepN'
p2501
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2502
I1
sS'.thisN'
p2503
I342
sS'.thisIndex'
p2504
I9
sg15
(lp2505
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2506
g16
(lp2507
S'k'
asg18
S'N'
sS'.thisRepN'
p2508
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2509
I2
sS'.thisN'
p2510
I343
sS'.thisIndex'
p2511
I9
sg15
(lp2512
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I9
sa(dp2513
g16
(lp2514
S'k'
asg18
S'Y'
sS'.thisRepN'
p2515
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2516
I3
sS'.thisN'
p2517
I344
sS'.thisIndex'
p2518
I7
sg15
(lp2519
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2520
g16
(lp2521
S'k'
asg18
S'Y'
sS'.thisRepN'
p2522
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2523
I4
sS'.thisN'
p2524
I345
sS'.thisIndex'
p2525
I3
sg15
(lp2526
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2527
g16
(lp2528
S'k'
asg18
S'N'
sS'.thisRepN'
p2529
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2530
I5
sS'.thisN'
p2531
I346
sS'.thisIndex'
p2532
I4
sg15
(lp2533
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2534
g16
(lp2535
S'd'
asg18
S'N'
sS'.thisRepN'
p2536
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2537
I6
sS'.thisN'
p2538
I347
sS'.thisIndex'
p2539
I6
sg15
(lp2540
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2541
g16
(lp2542
S'k'
asg18
S'Y'
sS'.thisRepN'
p2543
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2544
I7
sS'.thisN'
p2545
I348
sS'.thisIndex'
p2546
I2
sg15
(lp2547
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2548
g16
(lp2549
S'k'
asg18
S'N'
sg22
I23
sS'.thisN'
p2550
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2551
I8
sS'.thisRepN'
p2552
I31
sg21
I31
sS'.thisIndex'
p2553
I4
sg23
I25
sg15
(lp2554
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2555
g16
(lp2556
S'd'
asg95
I10
sS'.thisRepN'
p2557
I31
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2558
I9
sS'.thisN'
p2559
I350
sS'.thisIndex'
p2560
I10
sg15
(lp2561
S'd'
asg17
S'Y'
sg14
I8
sa(dp2562
g16
(lp2563
S'k'
asg95
I0
sS'.thisRepN'
p2564
I31
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2565
I10
sS'.thisN'
p2566
I351
sS'.thisIndex'
p2567
I0
sg15
(lp2568
S'k'
asg17
S'Y'
sg14
I8
sa(dp2569
g16
(lp2570
S'k'
asg18
S'Y'
sS'.thisRepN'
p2571
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2572
I0
sS'.thisN'
p2573
I352
sS'.thisIndex'
p2574
I9
sg15
(lp2575
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2576
g16
(lp2577
S'd'
asg18
S'N'
sS'.thisRepN'
p2578
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2579
I1
sS'.thisN'
p2580
I353
sS'.thisIndex'
p2581
I0
sg15
(lp2582
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I0
sa(dp2583
g16
(lp2584
S'k'
asg18
S'Y'
sS'.thisRepN'
p2585
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2586
I2
sS'.thisN'
p2587
I354
sS'.thisIndex'
p2588
I0
sg15
(lp2589
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2590
g16
(lp2591
S'k'
asg18
S'Y'
sS'.thisRepN'
p2592
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2593
I3
sS'.thisN'
p2594
I355
sS'.thisIndex'
p2595
I8
sg15
(lp2596
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I8
sa(dp2597
g16
(lp2598
S'd'
asg18
S'N'
sS'.thisRepN'
p2599
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2600
I4
sS'.thisN'
p2601
I356
sS'.thisIndex'
p2602
I6
sg15
(lp2603
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2604
g16
(lp2605
S'k'
asg18
S'N'
sS'.thisRepN'
p2606
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2607
I5
sS'.thisN'
p2608
I357
sS'.thisIndex'
p2609
I6
sg15
(lp2610
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2611
g16
(lp2612
S'k'
asg18
S'Y'
sS'.thisRepN'
p2613
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2614
I6
sS'.thisN'
p2615
I358
sS'.thisIndex'
p2616
I6
sg15
(lp2617
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I6
sa(dp2618
g16
(lp2619
S'k'
asg18
S'N'
sS'.thisRepN'
p2620
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2621
I7
sS'.thisN'
p2622
I359
sS'.thisIndex'
p2623
I6
sg15
(lp2624
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2625
g16
(lp2626
S'd'
asg18
S'Y'
sS'.thisRepN'
p2627
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2628
I8
sS'.thisN'
p2629
I360
sS'.thisIndex'
p2630
I9
sg15
(lp2631
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I9
sa(dp2632
g16
(lp2633
S'd'
asg18
S'N'
sS'.thisRepN'
p2634
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2635
I9
sS'.thisN'
p2636
I361
sS'.thisIndex'
p2637
I10
sg15
(lp2638
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2639
S'd'
asg95
I10
sa(dp2640
g16
(lp2641
S'd'
asg18
S'Y'
sS'.thisRepN'
p2642
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2643
I10
sS'.thisN'
p2644
I362
sS'.thisIndex'
p2645
I2
sg15
(lp2646
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I2
sa(dp2647
g16
(lp2648
S'd'
asg18
S'Y'
sS'.thisRepN'
p2649
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2650
I0
sS'.thisN'
p2651
I363
sS'.thisIndex'
p2652
I10
sg15
(lp2653
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I10
sa(dp2654
g16
(lp2655
S'd'
asg18
S'N'
sS'.thisRepN'
p2656
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2657
I1
sS'.thisN'
p2658
I364
sS'.thisIndex'
p2659
I4
sg15
(lp2660
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp2661
g16
(lp2662
S'k'
asg18
S'Y'
sS'.thisRepN'
p2663
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2664
I2
sS'.thisN'
p2665
I365
sS'.thisIndex'
p2666
I8
sg15
(lp2667
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2668
g16
(lp2669
S'd'
asg18
S'N'
sS'.thisRepN'
p2670
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2671
I3
sS'.thisN'
p2672
I366
sS'.thisIndex'
p2673
I10
sg15
(lp2674
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp2675
g16
(lp2676
S'd'
asg18
S'Y'
sS'.thisRepN'
p2677
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2678
I4
sS'.thisN'
p2679
I367
sS'.thisIndex'
p2680
I0
sg15
(lp2681
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I0
sa(dp2682
g16
(lp2683
S'd'
asg18
S'N'
sS'.thisRepN'
p2684
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2685
I5
sS'.thisN'
p2686
I368
sS'.thisIndex'
p2687
I4
sg15
(lp2688
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp2689
g16
(lp2690
S'k'
asg18
S'N'
sS'.thisRepN'
p2691
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2692
I6
sS'.thisN'
p2693
I369
sS'.thisIndex'
p2694
I7
sg15
(lp2695
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2696
g16
(lp2697
S'k'
asg18
S'N'
sS'.thisRepN'
p2698
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2699
I7
sS'.thisN'
p2700
I370
sS'.thisIndex'
p2701
I2
sg15
(lp2702
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I2
sa(dp2703
g16
(lp2704
S'k'
asg18
S'Y'
sS'.thisRepN'
p2705
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2706
I8
sS'.thisN'
p2707
I371
sS'.thisIndex'
p2708
I9
sg15
(lp2709
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I9
sa(dp2710
g16
(lp2711
S'd'
asg18
S'N'
sS'.thisRepN'
p2712
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2713
I9
sS'.thisN'
p2714
I372
sS'.thisIndex'
p2715
I1
sg15
(lp2716
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp2717
g16
(lp2718
S'd'
asg18
S'N'
sS'.thisRepN'
p2719
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2720
I10
sS'.thisN'
p2721
I373
sS'.thisIndex'
p2722
I2
sg15
(lp2723
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I2
sa(dp2724
g16
(lp2725
S'd'
asg18
S'N'
sS'.thisRepN'
p2726
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2727
I0
sS'.thisN'
p2728
I374
sS'.thisIndex'
p2729
I3
sg15
(lp2730
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I3
sa(dp2731
g16
(lp2732
S'd'
asg18
S'N'
sS'.thisRepN'
p2733
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2734
I1
sS'.thisN'
p2735
I375
sS'.thisIndex'
p2736
I0
sg15
(lp2737
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I0
sa(dp2738
g16
(lp2739
S'k'
asg18
S'Y'
sS'.thisRepN'
p2740
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2741
I2
sS'.thisN'
p2742
I376
sS'.thisIndex'
p2743
I4
sg15
(lp2744
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2745
g16
(lp2746
S'k'
asg18
S'Y'
sS'.thisRepN'
p2747
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2748
I3
sS'.thisN'
p2749
I377
sS'.thisIndex'
p2750
I7
sg15
(lp2751
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2752
g16
(lp2753
S'k'
asg18
S'N'
sS'.thisRepN'
p2754
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2755
I4
sS'.thisN'
p2756
I378
sS'.thisIndex'
p2757
I3
sg15
(lp2758
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I3
sa(dp2759
g16
(lp2760
S'd'
asg18
S'Y'
sS'.thisRepN'
p2761
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2762
I5
sS'.thisN'
p2763
I379
sS'.thisIndex'
p2764
I1
sg15
(lp2765
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp2766
g16
(lp2767
S'k'
asg18
S'N'
sS'.thisRepN'
p2768
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2769
I6
sS'.thisN'
p2770
I380
sS'.thisIndex'
p2771
I10
sg15
(lp2772
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I10
sa(dp2773
g16
(lp2774
S'k'
asg18
S'N'
sS'.thisRepN'
p2775
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2776
I7
sS'.thisN'
p2777
I381
sS'.thisIndex'
p2778
I8
sg15
(lp2779
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2780
g16
(lp2781
S'k'
asg18
S'N'
sS'.thisRepN'
p2782
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2783
I8
sS'.thisN'
p2784
I382
sS'.thisIndex'
p2785
I1
sg15
(lp2786
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp2787
g16
(lp2788
S'd'
asg18
S'Y'
sS'.thisRepN'
p2789
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2790
I9
sS'.thisN'
p2791
I383
sS'.thisIndex'
p2792
I0
sg15
(lp2793
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2794
S'k'
asg95
I0
sa(dp2795
g16
(lp2796
S'k'
asg18
S'Y'
sS'.thisRepN'
p2797
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2798
I10
sS'.thisN'
p2799
I384
sS'.thisIndex'
p2800
I3
sg15
(lp2801
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp2802
g16
(lp2803
S'k'
asg18
S'N'
sS'.thisRepN'
p2804
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2805
I0
sS'.thisN'
p2806
I385
sS'.thisIndex'
p2807
I5
sg15
(lp2808
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2809
g16
(lp2810
S'd'
asg18
S'Y'
sS'.thisRepN'
p2811
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2812
I1
sS'.thisN'
p2813
I386
sS'.thisIndex'
p2814
I4
sg15
(lp2815
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2816
S'k'
asg95
I4
sa(dp2817
g16
(lp2818
S'd'
asg18
S'N'
sS'.thisRepN'
p2819
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2820
I2
sS'.thisN'
p2821
I387
sS'.thisIndex'
p2822
I2
sg15
(lp2823
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I2
sa(dp2824
g16
(lp2825
S'k'
asg18
S'Y'
sS'.thisRepN'
p2826
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2827
I3
sS'.thisN'
p2828
I388
sS'.thisIndex'
p2829
I4
sg15
(lp2830
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp2831
g16
(lp2832
S'k'
asg18
S'N'
sS'.thisRepN'
p2833
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2834
I4
sS'.thisN'
p2835
I389
sS'.thisIndex'
p2836
I6
sg15
(lp2837
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I6
sa(dp2838
g16
(lp2839
S'k'
asg18
S'Y'
sS'.thisRepN'
p2840
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2841
I5
sS'.thisN'
p2842
I390
sS'.thisIndex'
p2843
I5
sg15
(lp2844
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2845
g16
(lp2846
S'k'
asg18
S'N'
sS'.thisRepN'
p2847
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2848
I6
sS'.thisN'
p2849
I391
sS'.thisIndex'
p2850
I0
sg15
(lp2851
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2852
g16
(lp2853
S'k'
asg18
S'N'
sS'.thisRepN'
p2854
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2855
I7
sS'.thisN'
p2856
I392
sS'.thisIndex'
p2857
I5
sg15
(lp2858
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2859
g16
(lp2860
S'k'
asg18
S'Y'
sS'.thisRepN'
p2861
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2862
I8
sS'.thisN'
p2863
I393
sS'.thisIndex'
p2864
I9
sg15
(lp2865
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I9
sa(dp2866
g16
(lp2867
S'k'
asg18
S'N'
sS'.thisRepN'
p2868
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2869
I9
sS'.thisN'
p2870
I394
sS'.thisIndex'
p2871
I8
sg15
(lp2872
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2873
g16
(lp2874
S'd'
asg18
S'N'
sS'.thisRepN'
p2875
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2876
I10
sS'.thisN'
p2877
I395
sS'.thisIndex'
p2878
I6
sg15
(lp2879
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2880
g16
(lp2881
S'k'
asg18
S'N'
sS'.thisRepN'
p2882
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2883
I0
sS'.thisN'
p2884
I396
sS'.thisIndex'
p2885
I2
sg15
(lp2886
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I2
sa(dp2887
g16
(lp2888
S'k'
asg18
S'N'
sS'.thisRepN'
p2889
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2890
I1
sS'.thisN'
p2891
I397
sS'.thisIndex'
p2892
I6
sg15
(lp2893
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2894
g16
(lp2895
S'k'
asg18
S'Y'
sS'.thisRepN'
p2896
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2897
I2
sS'.thisN'
p2898
I398
sS'.thisIndex'
p2899
I6
sg15
(lp2900
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2901
g16
(lp2902
S'd'
asg18
S'Y'
sg22
I26
sS'.thisN'
p2903
I399
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2904
I3
sS'.thisRepN'
p2905
I36
sg21
I25
sS'.thisIndex'
p2906
I1
sg23
I21
sg15
(lp2907
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I1
sa(dp2908
g16
(lp2909
S'd'
asg95
I2
sS'.thisRepN'
p2910
I36
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2911
I4
sS'.thisN'
p2912
I400
sS'.thisIndex'
p2913
I2
sg15
(lp2914
S'k'
asg17
S'N'
sg14
I9
sa(dp2915
g16
(lp2916
S'd'
asg95
I2
sS'.thisRepN'
p2917
I36
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2918
I5
sS'.thisN'
p2919
I401
sS'.thisIndex'
p2920
I2
sg15
(lp2921
S'k'
asg17
S'N'
sg14
I9
sa(dp2922
g16
(lp2923
S'd'
asg18
S'Y'
sS'.thisRepN'
p2924
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2925
I6
sS'.thisN'
p2926
I402
sS'.thisIndex'
p2927
I8
sg15
(lp2928
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I8
sa(dp2929
g16
(lp2930
S'k'
asg18
S'Y'
sS'.thisRepN'
p2931
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2932
I7
sS'.thisN'
p2933
I403
sS'.thisIndex'
p2934
I2
sg15
(lp2935
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp2936
g16
(lp2937
S'd'
asg18
S'N'
sS'.thisRepN'
p2938
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2939
I8
sS'.thisN'
p2940
I404
sS'.thisIndex'
p2941
I1
sg15
(lp2942
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp2943
g16
(lp2944
S'k'
asg18
S'Y'
sS'.thisRepN'
p2945
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2946
I9
sS'.thisN'
p2947
I405
sS'.thisIndex'
p2948
I0
sg15
(lp2949
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I0
sa(dp2950
g16
(lp2951
S'k'
asg18
S'N'
sS'.thisRepN'
p2952
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2953
I10
sS'.thisN'
p2954
I406
sS'.thisIndex'
p2955
I0
sg15
(lp2956
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I0
sa(dp2957
g16
(lp2958
S'd'
asg18
S'N'
sS'.thisRepN'
p2959
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2960
I0
sS'.thisN'
p2961
I407
sS'.thisIndex'
p2962
I5
sg15
(lp2963
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp2964
g16
(lp2965
S'd'
asg18
S'N'
sS'.thisRepN'
p2966
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2967
I1
sS'.thisN'
p2968
I408
sS'.thisIndex'
p2969
I2
sg15
(lp2970
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I2
sa(dp2971
g16
(lp2972
S'k'
asg18
S'N'
sS'.thisRepN'
p2973
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2974
I2
sS'.thisN'
p2975
I409
sS'.thisIndex'
p2976
I1
sg15
(lp2977
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I1
sa(dp2978
g16
(lp2979
S'k'
asg18
S'Y'
sS'.thisRepN'
p2980
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2981
I3
sS'.thisN'
p2982
I410
sS'.thisIndex'
p2983
I10
sg15
(lp2984
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp2985
g16
(lp2986
S'k'
asg18
S'Y'
sS'.thisRepN'
p2987
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2988
I4
sS'.thisN'
p2989
I411
sS'.thisIndex'
p2990
I10
sg15
(lp2991
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I10
sa(dp2992
g16
(lp2993
S'k'
asg18
S'Y'
sS'.thisRepN'
p2994
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2995
I5
sS'.thisN'
p2996
I412
sS'.thisIndex'
p2997
I0
sg15
(lp2998
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I0
sa(dp2999
g16
(lp3000
S'd'
asg18
S'N'
sS'.thisRepN'
p3001
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3002
I6
sS'.thisN'
p3003
I413
sS'.thisIndex'
p3004
I7
sg15
(lp3005
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3006
g16
(lp3007
S'd'
asg18
S'N'
sS'.thisRepN'
p3008
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3009
I7
sS'.thisN'
p3010
I414
sS'.thisIndex'
p3011
I6
sg15
(lp3012
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I6
sa(dp3013
g16
(lp3014
S'd'
asg18
S'Y'
sS'.thisRepN'
p3015
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3016
I8
sS'.thisN'
p3017
I415
sS'.thisIndex'
p3018
I5
sg15
(lp3019
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3020
g16
(lp3021
S'k'
asg18
S'N'
sS'.thisRepN'
p3022
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3023
I9
sS'.thisN'
p3024
I416
sS'.thisIndex'
p3025
I8
sg15
(lp3026
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I8
sa(dp3027
g16
(lp3028
S'k'
asg18
S'N'
sS'.thisRepN'
p3029
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3030
I10
sS'.thisN'
p3031
I417
sS'.thisIndex'
p3032
I1
sg15
(lp3033
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3034
g16
(lp3035
S'k'
asg18
S'N'
sS'.thisRepN'
p3036
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3037
I0
sS'.thisN'
p3038
I418
sS'.thisIndex'
p3039
I9
sg15
(lp3040
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I9
sa(dp3041
g16
(lp3042
S'k'
asg18
S'Y'
sS'.thisRepN'
p3043
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3044
I1
sS'.thisN'
p3045
I419
sS'.thisIndex'
p3046
I10
sg15
(lp3047
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3048
g16
(lp3049
S'k'
asg18
S'N'
sS'.thisRepN'
p3050
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3051
I2
sS'.thisN'
p3052
I420
sS'.thisIndex'
p3053
I8
sg15
(lp3054
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3055
g16
(lp3056
S'k'
asg18
S'N'
sS'.thisRepN'
p3057
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3058
I3
sS'.thisN'
p3059
I421
sS'.thisIndex'
p3060
I3
sg15
(lp3061
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I3
sa(dp3062
g16
(lp3063
S'k'
asg18
S'N'
sS'.thisRepN'
p3064
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3065
I4
sS'.thisN'
p3066
I422
sS'.thisIndex'
p3067
I0
sg15
(lp3068
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3069
g16
(lp3070
S'd'
asg18
S'N'
sS'.thisRepN'
p3071
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3072
I5
sS'.thisN'
p3073
I423
sS'.thisIndex'
p3074
I6
sg15
(lp3075
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3076
g16
(lp3077
S'd'
asg18
S'N'
sS'.thisRepN'
p3078
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3079
I6
sS'.thisN'
p3080
I424
sS'.thisIndex'
p3081
I5
sg15
(lp3082
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I5
sa(dp3083
g16
(lp3084
S'k'
asg18
S'N'
sS'.thisRepN'
p3085
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3086
I7
sS'.thisN'
p3087
I425
sS'.thisIndex'
p3088
I3
sg15
(lp3089
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I3
sa(dp3090
g16
(lp3091
S'k'
asg18
S'Y'
sS'.thisRepN'
p3092
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3093
I8
sS'.thisN'
p3094
I426
sS'.thisIndex'
p3095
I8
sg15
(lp3096
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3097
g16
(lp3098
S'd'
asg18
S'Y'
sS'.thisRepN'
p3099
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3100
I9
sS'.thisN'
p3101
I427
sS'.thisIndex'
p3102
I10
sg15
(lp3103
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I10
sa(dp3104
g16
(lp3105
S'd'
asg18
S'N'
sS'.thisRepN'
p3106
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3107
I10
sS'.thisN'
p3108
I428
sS'.thisIndex'
p3109
I1
sg15
(lp3110
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I1
sa(dp3111
g16
(lp3112
S'd'
asg18
S'N'
sS'.thisRepN'
p3113
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3114
I0
sS'.thisN'
p3115
I429
sS'.thisIndex'
p3116
I5
sg15
(lp3117
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I5
sa(dp3118
g16
(lp3119
S'd'
asg18
S'N'
sS'.thisRepN'
p3120
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3121
I1
sS'.thisN'
p3122
I430
sS'.thisIndex'
p3123
I7
sg15
(lp3124
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I7
sa(dp3125
g16
(lp3126
S'k'
asg18
S'N'
sS'.thisRepN'
p3127
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3128
I2
sS'.thisN'
p3129
I431
sS'.thisIndex'
p3130
I3
sg15
(lp3131
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I3
sa(dp3132
g16
(lp3133
S'k'
asg18
S'N'
sS'.thisRepN'
p3134
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3135
I3
sS'.thisN'
p3136
I432
sS'.thisIndex'
p3137
I4
sg15
(lp3138
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I4
sa(dp3139
g16
(lp3140
S'k'
asg18
S'N'
sS'.thisRepN'
p3141
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3142
I4
sS'.thisN'
p3143
I433
sS'.thisIndex'
p3144
I3
sg15
(lp3145
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I3
sa(dp3146
g16
(lp3147
S'k'
asg18
S'Y'
sS'.thisRepN'
p3148
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3149
I5
sS'.thisN'
p3150
I434
sS'.thisIndex'
p3151
I7
sg15
(lp3152
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3153
g16
(lp3154
S'd'
asg18
S'N'
sS'.thisRepN'
p3155
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3156
I6
sS'.thisN'
p3157
I435
sS'.thisIndex'
p3158
I5
sg15
(lp3159
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I5
sa(dp3160
g16
(lp3161
S'd'
asg18
S'N'
sS'.thisRepN'
p3162
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3163
I7
sS'.thisN'
p3164
I436
sS'.thisIndex'
p3165
I4
sg15
(lp3166
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3167
g16
(lp3168
S'k'
asg18
S'N'
sS'.thisRepN'
p3169
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3170
I8
sS'.thisN'
p3171
I437
sS'.thisIndex'
p3172
I2
sg15
(lp3173
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3174
g16
(lp3175
S'k'
asg18
S'Y'
sS'.thisRepN'
p3176
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3177
I9
sS'.thisN'
p3178
I438
sS'.thisIndex'
p3179
I0
sg15
(lp3180
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3181
g16
(lp3182
S'd'
asg18
S'Y'
sS'.thisRepN'
p3183
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3184
I10
sS'.thisN'
p3185
I439
sS'.thisIndex'
p3186
I7
sg15
(lp3187
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3188
g16
(lp3189
S'k'
asg18
S'N'
sS'.thisRepN'
p3190
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3191
I0
sS'.thisN'
p3192
I440
sS'.thisIndex'
p3193
I9
sg15
(lp3194
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3195
g16
(lp3196
S'k'
asg18
S'Y'
sS'.thisRepN'
p3197
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3198
I1
sS'.thisN'
p3199
I441
sS'.thisIndex'
p3200
I10
sg15
(lp3201
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3202
g16
(lp3203
S'd'
asg18
S'N'
sS'.thisRepN'
p3204
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3205
I2
sS'.thisN'
p3206
I442
sS'.thisIndex'
p3207
I9
sg15
(lp3208
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3209
g16
(lp3210
S'd'
asg18
S'N'
sS'.thisRepN'
p3211
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3212
I3
sS'.thisN'
p3213
I443
sS'.thisIndex'
p3214
I2
sg15
(lp3215
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I2
sa(dp3216
g16
(lp3217
S'k'
asg18
S'N'
sS'.thisRepN'
p3218
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3219
I4
sS'.thisN'
p3220
I444
sS'.thisIndex'
p3221
I6
sg15
(lp3222
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3223
g16
(lp3224
S'k'
asg18
S'N'
sS'.thisRepN'
p3225
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3226
I5
sS'.thisN'
p3227
I445
sS'.thisIndex'
p3228
I9
sg15
(lp3229
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3230
g16
(lp3231
S'k'
asg18
S'Y'
sS'.thisRepN'
p3232
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3233
I6
sS'.thisN'
p3234
I446
sS'.thisIndex'
p3235
I10
sg15
(lp3236
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I10
sa(dp3237
g16
(lp3238
S'k'
asg18
S'N'
sS'.thisRepN'
p3239
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3240
I7
sS'.thisN'
p3241
I447
sS'.thisIndex'
p3242
I7
sg15
(lp3243
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I7
sa(dp3244
g16
(lp3245
S'k'
asg18
S'N'
sS'.thisRepN'
p3246
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3247
I8
sS'.thisN'
p3248
I448
sS'.thisIndex'
p3249
I2
sg15
(lp3250
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I2
sa(dp3251
g16
(lp3252
S'd'
asg18
S'N'
sg22
I33
sS'.thisN'
p3253
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3254
I9
sS'.thisRepN'
p3255
I40
sg21
I22
sS'.thisIndex'
p3256
I5
sg23
I15
sg15
(lp3257
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I5
sa(dp3258
g16
(lp3259
S'k'
asg95
I4
sS'.thisRepN'
p3260
I40
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3261
I10
sS'.thisN'
p3262
I450
sS'.thisIndex'
p3263
I4
sg15
(lp3264
S'k'
asg17
S'Y'
sg14
I10
sa(dp3265
g16
(lp3266
S'd'
asg95
I7
sS'.thisRepN'
p3267
I41
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3268
I0
sS'.thisN'
p3269
I451
sS'.thisIndex'
p3270
I7
sg15
(lp3271
S'd'
asg17
S'Y'
sg14
I10
sa(dp3272
g16
(lp3273
S'k'
asg18
S'Y'
sS'.thisRepN'
p3274
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3275
I1
sS'.thisN'
p3276
I452
sS'.thisIndex'
p3277
I3
sg15
(lp3278
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3279
g16
(lp3280
S'd'
asg18
S'N'
sS'.thisRepN'
p3281
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3282
I2
sS'.thisN'
p3283
I453
sS'.thisIndex'
p3284
I2
sg15
(lp3285
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I2
sa(dp3286
g16
(lp3287
S'd'
asg18
S'Y'
sS'.thisRepN'
p3288
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3289
I3
sS'.thisN'
p3290
I454
sS'.thisIndex'
p3291
I2
sg15
(lp3292
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3293
g16
(lp3294
S'd'
asg18
S'Y'
sS'.thisRepN'
p3295
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3296
I4
sS'.thisN'
p3297
I455
sS'.thisIndex'
p3298
I5
sg15
(lp3299
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I5
sa(dp3300
g16
(lp3301
S'd'
asg18
S'N'
sS'.thisRepN'
p3302
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3303
I5
sS'.thisN'
p3304
I456
sS'.thisIndex'
p3305
I7
sg15
(lp3306
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3307
g16
(lp3308
S'k'
asg18
S'N'
sS'.thisRepN'
p3309
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3310
I6
sS'.thisN'
p3311
I457
sS'.thisIndex'
p3312
I0
sg15
(lp3313
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I0
sa(dp3314
g16
(lp3315
S'd'
asg18
S'Y'
sS'.thisRepN'
p3316
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3317
I7
sS'.thisN'
p3318
I458
sS'.thisIndex'
p3319
I0
sg15
(lp3320
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I0
sa(dp3321
g16
(lp3322
S'd'
asg18
S'Y'
sS'.thisRepN'
p3323
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3324
I8
sS'.thisN'
p3325
I459
sS'.thisIndex'
p3326
I6
sg15
(lp3327
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I6
sa(dp3328
g16
(lp3329
S'd'
asg18
S'N'
sS'.thisRepN'
p3330
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3331
I9
sS'.thisN'
p3332
I460
sS'.thisIndex'
p3333
I5
sg15
(lp3334
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I5
sa(dp3335
g16
(lp3336
S'd'
asg18
S'N'
sS'.thisRepN'
p3337
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3338
I10
sS'.thisN'
p3339
I461
sS'.thisIndex'
p3340
I10
sg15
(lp3341
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp3342
g16
(lp3343
S'k'
asg18
S'N'
sS'.thisRepN'
p3344
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3345
I0
sS'.thisN'
p3346
I462
sS'.thisIndex'
p3347
I8
sg15
(lp3348
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3349
g16
(lp3350
S'k'
asg18
S'N'
sS'.thisRepN'
p3351
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3352
I1
sS'.thisN'
p3353
I463
sS'.thisIndex'
p3354
I2
sg15
(lp3355
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3356
g16
(lp3357
S'd'
asg18
S'N'
sS'.thisRepN'
p3358
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3359
I2
sS'.thisN'
p3360
I464
sS'.thisIndex'
p3361
I6
sg15
(lp3362
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I6
sa(dp3363
g16
(lp3364
S'k'
asg18
S'Y'
sS'.thisRepN'
p3365
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3366
I3
sS'.thisN'
p3367
I465
sS'.thisIndex'
p3368
I5
sg15
(lp3369
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I5
sa(dp3370
g16
(lp3371
S'd'
asg18
S'Y'
sS'.thisRepN'
p3372
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3373
I4
sS'.thisN'
p3374
I466
sS'.thisIndex'
p3375
I10
sg15
(lp3376
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp3377
g16
(lp3378
S'd'
asg18
S'N'
sS'.thisRepN'
p3379
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3380
I5
sS'.thisN'
p3381
I467
sS'.thisIndex'
p3382
I7
sg15
(lp3383
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I7
sa(dp3384
g16
(lp3385
S'd'
asg18
S'N'
sS'.thisRepN'
p3386
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3387
I6
sS'.thisN'
p3388
I468
sS'.thisIndex'
p3389
I6
sg15
(lp3390
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3391
g16
(lp3392
S'd'
asg18
S'N'
sS'.thisRepN'
p3393
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3394
I7
sS'.thisN'
p3395
I469
sS'.thisIndex'
p3396
I3
sg15
(lp3397
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3398
g16
(lp3399
S'k'
asg18
S'N'
sS'.thisRepN'
p3400
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3401
I8
sS'.thisN'
p3402
I470
sS'.thisIndex'
p3403
I6
sg15
(lp3404
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3405
g16
(lp3406
S'd'
asg18
S'Y'
sS'.thisRepN'
p3407
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3408
I9
sS'.thisN'
p3409
I471
sS'.thisIndex'
p3410
I8
sg15
(lp3411
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I8
sa(dp3412
g16
(lp3413
S'k'
asg18
S'N'
sS'.thisRepN'
p3414
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3415
I10
sS'.thisN'
p3416
I472
sS'.thisIndex'
p3417
I10
sg15
(lp3418
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp3419
g16
(lp3420
S'k'
asg18
S'N'
sS'.thisRepN'
p3421
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3422
I0
sS'.thisN'
p3423
I473
sS'.thisIndex'
p3424
I9
sg15
(lp3425
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3426
g16
(lp3427
S'k'
asg18
S'Y'
sS'.thisRepN'
p3428
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3429
I1
sS'.thisN'
p3430
I474
sS'.thisIndex'
p3431
I5
sg15
(lp3432
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I5
sa(dp3433
g16
(lp3434
S'd'
asg18
S'N'
sS'.thisRepN'
p3435
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3436
I2
sS'.thisN'
p3437
I475
sS'.thisIndex'
p3438
I6
sg15
(lp3439
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I6
sa(dp3440
g16
(lp3441
S'd'
asg18
S'Y'
sS'.thisRepN'
p3442
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3443
I3
sS'.thisN'
p3444
I476
sS'.thisIndex'
p3445
I2
sg15
(lp3446
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3447
g16
(lp3448
S'd'
asg18
S'Y'
sS'.thisRepN'
p3449
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3450
I4
sS'.thisN'
p3451
I477
sS'.thisIndex'
p3452
I2
sg15
(lp3453
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3454
g16
(lp3455
S'k'
asg18
S'N'
sS'.thisRepN'
p3456
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3457
I5
sS'.thisN'
p3458
I478
sS'.thisIndex'
p3459
I8
sg15
(lp3460
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3461
g16
(lp3462
S'd'
asg18
S'N'
sS'.thisRepN'
p3463
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3464
I6
sS'.thisN'
p3465
I479
sS'.thisIndex'
p3466
I8
sg15
(lp3467
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I8
sa(dp3468
g16
(lp3469
S'd'
asg18
S'N'
sS'.thisRepN'
p3470
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3471
I7
sS'.thisN'
p3472
I480
sS'.thisIndex'
p3473
I10
sg15
(lp3474
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3475
g16
(lp3476
S'd'
asg18
S'Y'
sS'.thisRepN'
p3477
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3478
I8
sS'.thisN'
p3479
I481
sS'.thisIndex'
p3480
I4
sg15
(lp3481
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I4
sa(dp3482
g16
(lp3483
S'd'
asg18
S'Y'
sS'.thisRepN'
p3484
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3485
I9
sS'.thisN'
p3486
I482
sS'.thisIndex'
p3487
I7
sg15
(lp3488
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3489
g16
(lp3490
S'd'
asg18
S'N'
sS'.thisRepN'
p3491
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3492
I10
sS'.thisN'
p3493
I483
sS'.thisIndex'
p3494
I9
sg15
(lp3495
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I9
sa(dp3496
g16
(lp3497
S'd'
asg18
S'Y'
sS'.thisRepN'
p3498
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3499
I0
sS'.thisN'
p3500
I484
sS'.thisIndex'
p3501
I5
sg15
(lp3502
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3503
g16
(lp3504
S'd'
asg18
S'N'
sS'.thisRepN'
p3505
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3506
I1
sS'.thisN'
p3507
I485
sS'.thisIndex'
p3508
I7
sg15
(lp3509
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3510
g16
(lp3511
S'k'
asg18
S'Y'
sS'.thisRepN'
p3512
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3513
I2
sS'.thisN'
p3514
I486
sS'.thisIndex'
p3515
I8
sg15
(lp3516
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3517
g16
(lp3518
S'k'
asg18
S'Y'
sS'.thisRepN'
p3519
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3520
I3
sS'.thisN'
p3521
I487
sS'.thisIndex'
p3522
I1
sg15
(lp3523
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I1
sa(dp3524
g16
(lp3525
S'k'
asg18
S'Y'
sS'.thisRepN'
p3526
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3527
I4
sS'.thisN'
p3528
I488
sS'.thisIndex'
p3529
I3
sg15
(lp3530
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I3
sa(dp3531
g16
(lp3532
S'd'
asg18
S'Y'
sS'.thisRepN'
p3533
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3534
I5
sS'.thisN'
p3535
I489
sS'.thisIndex'
p3536
I0
sg15
(lp3537
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I0
sa(dp3538
g16
(lp3539
S'k'
asg18
S'Y'
sS'.thisRepN'
p3540
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3541
I6
sS'.thisN'
p3542
I490
sS'.thisIndex'
p3543
I3
sg15
(lp3544
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3545
g16
(lp3546
S'k'
asg18
S'N'
sS'.thisRepN'
p3547
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3548
I7
sS'.thisN'
p3549
I491
sS'.thisIndex'
p3550
I8
sg15
(lp3551
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3552
g16
(lp3553
S'k'
asg18
S'N'
sS'.thisRepN'
p3554
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3555
I8
sS'.thisN'
p3556
I492
sS'.thisIndex'
p3557
I9
sg15
(lp3558
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3559
g16
(lp3560
S'd'
asg18
S'Y'
sS'.thisRepN'
p3561
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3562
I9
sS'.thisN'
p3563
I493
sS'.thisIndex'
p3564
I3
sg15
(lp3565
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I3
sa(dp3566
g16
(lp3567
S'k'
asg18
S'Y'
sS'.thisRepN'
p3568
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3569
I10
sS'.thisN'
p3570
I494
sS'.thisIndex'
p3571
I9
sg15
(lp3572
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I9
sa(dp3573
g16
(lp3574
S'd'
asg18
S'Y'
sS'.thisRepN'
p3575
I45
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3576
I0
sS'.thisN'
p3577
I495
sS'.thisIndex'
p3578
I6
sg15
(lp3579
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3580
g16
(lp3581
S'k'
asg18
S'N'
sS'.thisRepN'
p3582
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3583
I1
sS'.thisN'
p3584
I496
sS'.thisIndex'
p3585
I8
sg15
(lp3586
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I8
sa(dp3587
g16
(lp3588
S'k'
asg18
S'N'
sS'.thisRepN'
p3589
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3590
I2
sS'.thisN'
p3591
I497
sS'.thisIndex'
p3592
I3
sg15
(lp3593
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I3
sa(dp3594
g16
(lp3595
S'k'
asg18
S'Y'
sS'.thisRepN'
p3596
I45
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3597
I3
sS'.thisN'
p3598
I498
sS'.thisIndex'
p3599
I3
sg15
(lp3600
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3601
g16
(lp3602
S'd'
asg18
S'Y'
sg22
I24
sS'.thisN'
p3603
I499
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3604
I4
sS'.thisRepN'
p3605
I45
sg21
I24
sS'.thisIndex'
p3606
I4
sg23
I24
sg15
(lp3607
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I4
sa(dp3608
g16
(lp3609
S'k'
asS'.thisIndex'
p3610
I10
sS'.thisRepN'
p3611
I45
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3612
I5
sS'.thisN'
p3613
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp3614
S'k'
asg17
S'N'
sg14
I11
sg95
I10
sa(dp3615
g16
(lp3616
S'k'
asS'.thisIndex'
p3617
I10
sS'.thisRepN'
p3618
I45
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3619
I6
sS'.thisN'
p3620
I501
sg25
S'Y'
sg15
(lp3621
S'k'
asg17
S'N'
sg14
I11
sg95
I10
sa(dp3622
g16
(lp3623
S'k'
asg18
S'Y'
sS'.thisRepN'
p3624
I45
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3625
I7
sS'.thisN'
p3626
I502
sg25
S'Y'
sg15
(lp3627
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p3628
I10
sa(dp3629
g16
(lp3630
S'd'
asg18
S'Y'
sS'.thisRepN'
p3631
I45
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3632
I8
sS'.thisN'
p3633
I503
sg25
S'Y'
sg15
(lp3634
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p3635
I7
sa(dp3636
g16
(lp3637
S'd'
asg18
S'Y'
sS'.thisRepN'
p3638
I45
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3639
I9
sS'.thisN'
p3640
I504
sg25
S'Y'
sg15
(lp3641
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p3642
I10
sa(dp3643
g16
(lp3644
S'd'
asg18
S'N'
sS'.thisRepN'
p3645
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3646
I10
sS'.thisN'
p3647
I505
sg25
S'Y'
sg15
(lp3648
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p3649
I10
sa(dp3650
g16
(lp3651
S'd'
asg18
S'N'
sS'.thisRepN'
p3652
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3653
I0
sS'.thisN'
p3654
I506
sg25
S'Y'
sg15
(lp3655
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p3656
I8
sa(dp3657
g16
(lp3658
S'k'
asg18
S'Y'
sS'.thisRepN'
p3659
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3660
I1
sS'.thisN'
p3661
I507
sg25
S'Y'
sg15
(lp3662
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p3663
I8
sa(dp3664
g16
(lp3665
S'd'
asg18
S'Y'
sS'.thisRepN'
p3666
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3667
I2
sS'.thisN'
p3668
I508
sg25
S'Y'
sg15
(lp3669
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p3670
I2
sa(dp3671
g16
(lp3672
S'd'
asg18
S'Y'
sS'.thisRepN'
p3673
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3674
I3
sS'.thisN'
p3675
I509
sg25
S'Y'
sg15
(lp3676
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p3677
I6
sa(dp3678
g16
(lp3679
S'd'
asg18
S'N'
sS'.thisRepN'
p3680
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3681
I4
sS'.thisN'
p3682
I510
sg25
S'Y'
sg15
(lp3683
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p3684
I1
sa(dp3685
g16
(lp3686
S'd'
asg18
S'Y'
sS'.thisRepN'
p3687
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3688
I5
sS'.thisN'
p3689
I511
sg25
S'Y'
sg15
(lp3690
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p3691
I6
sa(dp3692
g16
(lp3693
S'k'
asg18
S'Y'
sS'.thisRepN'
p3694
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3695
I6
sS'.thisN'
p3696
I512
sg25
S'Y'
sg15
(lp3697
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p3698
I0
sa(dp3699
g16
(lp3700
S'k'
asg18
S'Y'
sS'.thisRepN'
p3701
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3702
I7
sS'.thisN'
p3703
I513
sg25
S'Y'
sg15
(lp3704
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p3705
I10
sa(dp3706
g16
(lp3707
S'd'
asg18
S'N'
sS'.thisRepN'
p3708
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3709
I8
sS'.thisN'
p3710
I514
sg25
S'Y'
sg15
(lp3711
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p3712
I2
sa(dp3713
g16
(lp3714
S'd'
asg18
S'N'
sS'.thisRepN'
p3715
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3716
I9
sS'.thisN'
p3717
I515
sg25
S'Y'
sg15
(lp3718
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p3719
I9
sa(dp3720
g16
(lp3721
S'd'
asg18
S'N'
sS'.thisRepN'
p3722
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3723
I10
sS'.thisN'
p3724
I516
sg25
S'Y'
sg15
(lp3725
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p3726
I4
sa(dp3727
g16
(lp3728
S'd'
asg18
S'N'
sS'.thisRepN'
p3729
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3730
I0
sS'.thisN'
p3731
I517
sg25
S'Y'
sg15
(lp3732
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p3733
I8
sa(dp3734
g16
(lp3735
S'd'
asg18
S'Y'
sS'.thisRepN'
p3736
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3737
I1
sS'.thisN'
p3738
I518
sg25
S'Y'
sg15
(lp3739
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p3740
I5
sa(dp3741
g16
(lp3742
S'k'
asg18
S'Y'
sS'.thisRepN'
p3743
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3744
I2
sS'.thisN'
p3745
I519
sg25
S'Y'
sg15
(lp3746
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p3747
I4
sa(dp3748
g16
(lp3749
S'k'
asg18
S'N'
sS'.thisRepN'
p3750
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3751
I3
sS'.thisN'
p3752
I520
sg25
S'Y'
sg15
(lp3753
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p3754
I0
sa(dp3755
g16
(lp3756
S'd'
asg18
S'Y'
sS'.thisRepN'
p3757
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3758
I4
sS'.thisN'
p3759
I521
sg25
S'Y'
sg15
(lp3760
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p3761
I9
sa(dp3762
g16
(lp3763
S'k'
asg18
S'N'
sS'.thisRepN'
p3764
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3765
I5
sS'.thisN'
p3766
I522
sg25
S'Y'
sg15
(lp3767
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p3768
I5
sa(dp3769
g16
(lp3770
S'd'
asg18
S'N'
sS'.thisRepN'
p3771
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3772
I6
sS'.thisN'
p3773
I523
sg25
S'Y'
sg15
(lp3774
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p3775
I10
sa(dp3776
g16
(lp3777
S'd'
asg18
S'N'
sS'.thisRepN'
p3778
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3779
I7
sS'.thisN'
p3780
I524
sg25
S'Y'
sg15
(lp3781
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p3782
I1
sa(dp3783
g16
(lp3784
S'k'
asg18
S'N'
sS'.thisRepN'
p3785
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3786
I8
sS'.thisN'
p3787
I525
sg25
S'Y'
sg15
(lp3788
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p3789
I9
sa(dp3790
g16
(lp3791
S'd'
asg18
S'N'
sS'.thisRepN'
p3792
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3793
I9
sS'.thisN'
p3794
I526
sg25
S'Y'
sg15
(lp3795
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p3796
I2
sa(dp3797
g16
(lp3798
S'k'
asg18
S'Y'
sS'.thisRepN'
p3799
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3800
I10
sS'.thisN'
p3801
I527
sg25
S'Y'
sg15
(lp3802
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p3803
I4
sa(dp3804
g18
S'Y'
sS'.thisRepN'
p3805
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3806
I0
sS'.thisN'
p3807
I528
sg25
S'Y'
sg15
Nsg30
Vm
sg17
g120
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p3808
I7
sa(dp3809
g16
(lp3810
S'd'
asg18
S'N'
sS'.thisRepN'
p3811
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3812
I1
sS'.thisN'
p3813
I529
sg25
S'Y'
sg15
(lp3814
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp3815
S'd'
asg95
I0
sS'.thisIndex'
p3816
I0
sa(dp3817
g16
(lp3818
S'k'
asg18
S'Y'
sS'.thisRepN'
p3819
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3820
I2
sS'.thisN'
p3821
I530
sg25
S'Y'
sg15
(lp3822
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p3823
I3
sa(dp3824
g16
(lp3825
S'k'
asg18
S'N'
sS'.thisRepN'
p3826
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3827
I3
sS'.thisN'
p3828
I531
sg25
S'Y'
sg15
(lp3829
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p3830
I8
sa(dp3831
g16
(lp3832
S'd'
asg18
S'Y'
sS'.thisRepN'
p3833
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3834
I4
sS'.thisN'
p3835
I532
sg25
S'Y'
sg15
(lp3836
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p3837
I8
sa(dp3838
g16
(lp3839
S'd'
asg18
S'Y'
sS'.thisRepN'
p3840
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3841
I5
sS'.thisN'
p3842
I533
sg25
S'Y'
sg15
(lp3843
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p3844
I8
sa(dp3845
g16
(lp3846
S'd'
asg18
S'N'
sS'.thisRepN'
p3847
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3848
I6
sS'.thisN'
p3849
I534
sg25
S'Y'
sg15
(lp3850
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p3851
I1
sa(dp3852
g16
(lp3853
S'd'
asg18
S'Y'
sS'.thisRepN'
p3854
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3855
I7
sS'.thisN'
p3856
I535
sg25
S'Y'
sg15
(lp3857
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p3858
I4
sa(dp3859
g16
(lp3860
S'd'
asg18
S'Y'
sS'.thisRepN'
p3861
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3862
I8
sS'.thisN'
p3863
I536
sg25
S'Y'
sg15
(lp3864
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p3865
I10
sa(dp3866
g16
(lp3867
S'd'
asg18
S'N'
sS'.thisRepN'
p3868
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3869
I9
sS'.thisN'
p3870
I537
sg25
S'Y'
sg15
(lp3871
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p3872
I7
sa(dp3873
g16
(lp3874
S'd'
asg18
S'Y'
sS'.thisRepN'
p3875
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3876
I10
sS'.thisN'
p3877
I538
sg25
S'Y'
sg15
(lp3878
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p3879
I3
sa(dp3880
g16
(lp3881
S'k'
asg18
S'N'
sS'.thisRepN'
p3882
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3883
I0
sS'.thisN'
p3884
I539
sg25
S'Y'
sg15
(lp3885
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p3886
I6
sa(dp3887
g16
(lp3888
S'd'
asg18
S'N'
sS'.thisRepN'
p3889
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3890
I1
sS'.thisN'
p3891
I540
sg25
S'Y'
sg15
(lp3892
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p3893
I2
sa(dp3894
g16
(lp3895
S'd'
asg18
S'N'
sS'.thisRepN'
p3896
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3897
I2
sS'.thisN'
p3898
I541
sg25
S'Y'
sg15
(lp3899
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p3900
I4
sa(dp3901
g16
(lp3902
S'd'
asg18
S'Y'
sS'.thisRepN'
p3903
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3904
I3
sS'.thisN'
p3905
I542
sg25
S'Y'
sg15
(lp3906
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p3907
I2
sa(dp3908
g16
(lp3909
S'k'
asg18
S'N'
sS'.thisRepN'
p3910
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3911
I4
sS'.thisN'
p3912
I543
sg25
S'Y'
sg15
(lp3913
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p3914
I0
sa(dp3915
g16
(lp3916
S'd'
asg18
S'Y'
sS'.thisRepN'
p3917
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3918
I5
sS'.thisN'
p3919
I544
sg25
S'Y'
sg15
(lp3920
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p3921
I0
sa(dp3922
g16
(lp3923
S'k'
asg18
S'Y'
sS'.thisRepN'
p3924
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3925
I6
sS'.thisN'
p3926
I545
sg25
S'Y'
sg15
(lp3927
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p3928
I4
sa(dp3929
g16
(lp3930
S'k'
asg18
S'N'
sS'.thisRepN'
p3931
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3932
I7
sS'.thisN'
p3933
I546
sg25
S'Y'
sg15
(lp3934
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p3935
I2
sa(dp3936
g16
(lp3937
S'd'
asg18
S'N'
sS'.thisRepN'
p3938
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3939
I8
sS'.thisN'
p3940
I547
sg25
S'Y'
sg15
(lp3941
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p3942
I1
sa(dp3943
g16
(lp3944
S'd'
asg18
S'N'
sS'.thisRepN'
p3945
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3946
I9
sS'.thisN'
p3947
I548
sg25
S'Y'
sg15
(lp3948
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p3949
I1
sa(dp3950
g16
(lp3951
S'd'
asg18
S'N'
sg22
I24
sg26
S'Y'
sS'.thisN'
p3952
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3953
I10
sS'.thisRepN'
p3954
I49
sg21
I18
sg25
S'Y'
sg23
I23
sg15
(lp3955
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p3956
I10
sa(dp3957
g16
(lp3958
S'd'
asS'.thisIndex'
p3959
I7
sS'.thisRepN'
p3960
I50
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3961
I0
sS'.thisN'
p3962
I550
sg25
S'Y'
sg15
(lp3963
S'd'
asg17
S'N'
sg14
I12
sg95
I7
sa(dp3964
S'.thisIndex'
p3965
I5
sS'.thisRepN'
p3966
I50
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3967
I1
sS'.thisN'
p3968
I551
sg25
S'Y'
sg15
Nsg17
g120
sg14
I12
sg95
I5
sa(dp3969
g16
(lp3970
S'd'
asg18
S'Y'
sS'.thisRepN'
p3971
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3972
I2
sS'.thisN'
p3973
I552
sg25
S'Y'
sg15
(lp3974
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p3975
I8
sa(dp3976
g16
(lp3977
S'd'
asg18
S'N'
sS'.thisRepN'
p3978
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3979
I3
sS'.thisN'
p3980
I553
sg25
S'Y'
sg15
(lp3981
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p3982
I1
sa(dp3983
g16
(lp3984
S'd'
asg18
S'N'
sS'.thisRepN'
p3985
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3986
I4
sS'.thisN'
p3987
I554
sg25
S'Y'
sg15
(lp3988
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p3989
I0
sa(dp3990
g16
(lp3991
S'd'
asg18
S'N'
sS'.thisRepN'
p3992
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3993
I5
sS'.thisN'
p3994
I555
sg25
S'Y'
sg15
(lp3995
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p3996
I2
sa(dp3997
g16
(lp3998
S'd'
asg18
S'Y'
sS'.thisRepN'
p3999
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4000
I6
sS'.thisN'
p4001
I556
sg25
S'Y'
sg15
(lp4002
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4003
I7
sa(dp4004
g16
(lp4005
S'd'
asg18
S'Y'
sS'.thisRepN'
p4006
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4007
I7
sS'.thisN'
p4008
I557
sg25
S'Y'
sg15
(lp4009
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4010
I10
sa(dp4011
g16
(lp4012
S'd'
asg18
S'N'
sS'.thisRepN'
p4013
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4014
I8
sS'.thisN'
p4015
I558
sg25
S'Y'
sg15
(lp4016
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4017
I8
sa(dp4018
g16
(lp4019
S'd'
asg18
S'N'
sS'.thisRepN'
p4020
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4021
I9
sS'.thisN'
p4022
I559
sg25
S'Y'
sg15
(lp4023
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4024
I4
sa(dp4025
g16
(lp4026
S'd'
asg18
S'Y'
sS'.thisRepN'
p4027
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4028
I10
sS'.thisN'
p4029
I560
sg25
S'Y'
sg15
(lp4030
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4031
I5
sa(dp4032
g16
(lp4033
S'd'
asg18
S'Y'
sS'.thisRepN'
p4034
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4035
I0
sS'.thisN'
p4036
I561
sg25
S'Y'
sg15
(lp4037
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4038
I0
sa(dp4039
g16
(lp4040
S'd'
asg18
S'N'
sS'.thisRepN'
p4041
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4042
I1
sS'.thisN'
p4043
I562
sg25
S'Y'
sg15
(lp4044
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4045
I2
sa(dp4046
g16
(lp4047
S'd'
asg18
S'N'
sS'.thisRepN'
p4048
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4049
I2
sS'.thisN'
p4050
I563
sg25
S'Y'
sg15
(lp4051
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4052
I2
sa(dp4053
g16
(lp4054
S'k'
asg18
S'N'
sS'.thisRepN'
p4055
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4056
I3
sS'.thisN'
p4057
I564
sg25
S'Y'
sg15
(lp4058
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4059
I10
sa(dp4060
g16
(lp4061
S'k'
asg18
S'Y'
sS'.thisRepN'
p4062
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4063
I4
sS'.thisN'
p4064
I565
sg25
S'Y'
sg15
(lp4065
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4066
I3
sa(dp4067
g16
(lp4068
S'k'
asg18
S'N'
sS'.thisRepN'
p4069
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4070
I5
sS'.thisN'
p4071
I566
sg25
S'Y'
sg15
(lp4072
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4073
I8
sa(dp4074
g16
(lp4075
S'k'
asg18
S'N'
sS'.thisRepN'
p4076
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4077
I6
sS'.thisN'
p4078
I567
sg25
S'Y'
sg15
(lp4079
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4080
I6
sa(dp4081
g16
(lp4082
S'k'
asg18
S'N'
sS'.thisRepN'
p4083
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4084
I7
sS'.thisN'
p4085
I568
sg25
S'Y'
sg15
(lp4086
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4087
I1
sa(dp4088
g16
(lp4089
S'k'
asg18
S'Y'
sS'.thisRepN'
p4090
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4091
I8
sS'.thisN'
p4092
I569
sg25
S'Y'
sg15
(lp4093
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4094
I10
sa(dp4095
g16
(lp4096
S'd'
asg18
S'Y'
sS'.thisRepN'
p4097
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4098
I9
sS'.thisN'
p4099
I570
sg25
S'Y'
sg15
(lp4100
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4101
I9
sa(dp4102
g16
(lp4103
S'k'
asg18
S'N'
sS'.thisRepN'
p4104
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4105
I10
sS'.thisN'
p4106
I571
sg25
S'Y'
sg15
(lp4107
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4108
I4
sa(dp4109
g16
(lp4110
S'k'
asg18
S'Y'
sS'.thisRepN'
p4111
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4112
I0
sS'.thisN'
p4113
I572
sg25
S'Y'
sg15
(lp4114
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4115
I8
sa(dp4116
g16
(lp4117
S'k'
asg18
S'N'
sS'.thisRepN'
p4118
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4119
I1
sS'.thisN'
p4120
I573
sg25
S'Y'
sg15
(lp4121
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4122
I2
sa(dp4123
g16
(lp4124
S'k'
asg18
S'N'
sS'.thisRepN'
p4125
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4126
I2
sS'.thisN'
p4127
I574
sg25
S'Y'
sg15
(lp4128
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4129
I5
sa(dp4130
g16
(lp4131
S'd'
asg18
S'Y'
sS'.thisRepN'
p4132
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4133
I3
sS'.thisN'
p4134
I575
sg25
S'Y'
sg15
(lp4135
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4136
I4
sa(dp4137
g16
(lp4138
S'k'
asg18
S'N'
sS'.thisRepN'
p4139
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4140
I4
sS'.thisN'
p4141
I576
sg25
S'Y'
sg15
(lp4142
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4143
I5
sa(dp4144
g16
(lp4145
S'd'
asg18
S'N'
sS'.thisRepN'
p4146
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4147
I5
sS'.thisN'
p4148
I577
sg25
S'Y'
sg15
(lp4149
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4150
I9
sa(dp4151
g16
(lp4152
S'k'
asg18
S'N'
sS'.thisRepN'
p4153
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4154
I6
sS'.thisN'
p4155
I578
sg25
S'Y'
sg15
(lp4156
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4157
I7
sa(dp4158
g16
(lp4159
S'd'
asg18
S'N'
sS'.thisRepN'
p4160
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4161
I7
sS'.thisN'
p4162
I579
sg25
S'Y'
sg15
(lp4163
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4164
I4
sa(dp4165
g16
(lp4166
S'k'
asg18
S'N'
sS'.thisRepN'
p4167
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4168
I8
sS'.thisN'
p4169
I580
sg25
S'Y'
sg15
(lp4170
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4171
I9
sa(dp4172
g16
(lp4173
S'k'
asg18
S'Y'
sS'.thisRepN'
p4174
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4175
I9
sS'.thisN'
p4176
I581
sg25
S'Y'
sg15
(lp4177
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4178
I8
sa(dp4179
g16
(lp4180
S'k'
asg18
S'Y'
sS'.thisRepN'
p4181
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4182
I10
sS'.thisN'
p4183
I582
sg25
S'Y'
sg15
(lp4184
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4185
I4
sa(dp4186
g16
(lp4187
S'd'
asg18
S'Y'
sS'.thisRepN'
p4188
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4189
I0
sS'.thisN'
p4190
I583
sg25
S'Y'
sg15
(lp4191
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4192
I8
sa(dp4193
g16
(lp4194
S'k'
asg18
S'N'
sS'.thisRepN'
p4195
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4196
I1
sS'.thisN'
p4197
I584
sg25
S'Y'
sg15
(lp4198
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4199
I7
sa(dp4200
g16
(lp4201
S'k'
asg18
S'N'
sS'.thisRepN'
p4202
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4203
I2
sS'.thisN'
p4204
I585
sg25
S'Y'
sg15
(lp4205
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4206
I10
sa(dp4207
g16
(lp4208
S'd'
asg18
S'N'
sS'.thisRepN'
p4209
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4210
I3
sS'.thisN'
p4211
I586
sg25
S'Y'
sg15
(lp4212
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4213
I9
sa(dp4214
g16
(lp4215
S'd'
asg18
S'N'
sS'.thisRepN'
p4216
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4217
I4
sS'.thisN'
p4218
I587
sg25
S'Y'
sg15
(lp4219
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4220
I10
sa(dp4221
g16
(lp4222
S'k'
asg18
S'Y'
sS'.thisRepN'
p4223
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4224
I5
sS'.thisN'
p4225
I588
sg25
S'Y'
sg15
(lp4226
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4227
I4
sa(dp4228
g16
(lp4229
S'd'
asg18
S'Y'
sS'.thisRepN'
p4230
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4231
I6
sS'.thisN'
p4232
I589
sg25
S'Y'
sg15
(lp4233
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4234
I9
sa(dp4235
g16
(lp4236
S'd'
asg18
S'N'
sS'.thisRepN'
p4237
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4238
I7
sS'.thisN'
p4239
I590
sg25
S'Y'
sg15
(lp4240
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4241
I7
sa(dp4242
g16
(lp4243
S'k'
asg18
S'Y'
sS'.thisRepN'
p4244
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4245
I8
sS'.thisN'
p4246
I591
sg25
S'Y'
sg15
(lp4247
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4248
I1
sa(dp4249
g16
(lp4250
S'd'
asg18
S'N'
sS'.thisRepN'
p4251
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4252
I9
sS'.thisN'
p4253
I592
sg25
S'Y'
sg15
(lp4254
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4255
I4
sa(dp4256
g16
(lp4257
S'd'
asg18
S'Y'
sS'.thisRepN'
p4258
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4259
I10
sS'.thisN'
p4260
I593
sg25
S'Y'
sg15
(lp4261
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4262
I6
sa(dp4263
g16
(lp4264
S'k'
asg18
S'N'
sS'.thisRepN'
p4265
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4266
I0
sS'.thisN'
p4267
I594
sg25
S'Y'
sg15
(lp4268
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4269
I1
sa(dp4270
g16
(lp4271
S'k'
asg18
S'Y'
sS'.thisRepN'
p4272
I54
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4273
I1
sS'.thisN'
p4274
I595
sg25
S'Y'
sg15
(lp4275
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4276
I10
sa(dp4277
g16
(lp4278
S'd'
asg18
S'N'
sS'.thisRepN'
p4279
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4280
I2
sS'.thisN'
p4281
I596
sg25
S'Y'
sg15
(lp4282
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4283
I1
sa(dp4284
g16
(lp4285
S'd'
asg18
S'Y'
sS'.thisRepN'
p4286
I54
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4287
I3
sS'.thisN'
p4288
I597
sg25
S'Y'
sg15
(lp4289
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4290
I8
sa(dp4291
g16
(lp4292
S'k'
asg18
S'N'
sS'.thisRepN'
p4293
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4294
I4
sS'.thisN'
p4295
I598
sg25
S'Y'
sg15
(lp4296
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4297
I6
sa(dp4298
g16
(lp4299
S'd'
asg18
S'Y'
sg22
I28
sg26
S'Y'
sS'.thisN'
p4300
I599
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4301
I5
sS'.thisRepN'
p4302
I54
sg21
I26
sg25
S'Y'
sg23
I20
sg15
(lp4303
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4304
I3
sasS'loops'
p4305
(lp4306
g1
(g35
g3
NtRp4307
(dp4308
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4309
sg40
(lp4310
sg41
I73140560
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4311
g48
g49
(g50
g51
g52
S'b'
tRp4312
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4313
(I1
(I600
I1
tg55
I00
S'\x00\x80\xc5C\x00\x00\x14C\x00\x00CC\x00\x00pC\x00\x80\x0eD\x00\x00\xc0B\x00\x00\xe3C\x00\x80\x07D\x00\x00\xa8C\x00\x00(C\x00\x00\xa0B\x00\x80\xb0C\x00\x00\x0cC\x00\x80\xbbC\x00\x00\x1cB\x00\x00\xb6B\x00\x00TB\x00\x80\xf2C\x00\x80\x88C\x00@\x13D\x00\xc0\nD\x00\x00\x98C\x00\x00\x0bD\x00\x00\x08D\x00\x80\x98C\x00\x80\x81C\x00\x00\x97C\x00\x00\xeaC\x00\x80\xebC\x00\x00 B\x00\x80\xe1C\x00\x80\xeaC\x00@\x10D\x00@\x14D\x00\x00PC\x00\x00\xa4C\x00\xc0\x12D\x00\x00\x08C\x00\x80\xe0C\x00\x00\xe2B\x00\x00\xe8C\x00\x80\x13D\x00\x00MC\x00\x80\xeeC\x00\x00\x11C\x00\xc0\x0cD\x00\x80\xb5C\x00\x00yC\x00\x00aC\x00\x80\x96C\x00\x00\x82B\x00\x00HC\x00\x80\xa4C\x00\x80\xceC\x00\x00\xe4C\x00\x00sC\x00\x00\x89C\x00\x80\xfbC\x00\x00vC\x00\x00\x9fC\x00\x80\x99C\x00\x00\x9eB\x00\x00BC\x00\x00\xb2C\x00\x00\xfeB\x00\x00\x8eC\x00\x80\xbaC\x00\x80\xbdC\x00\x80\xc1C\x00\x80\xffC\x00\x00\xeaB\x00\xc0\x0bD\x00\x00\xacB\x00\x00#C\x00\xc0\x0fD\x00\x80\xd6C\x00\x008B\x00\x00\x80C\x00\x00\xf6B\x00\x00\x8aB\x00\x00xC\x00\x00@A\x00\x00"C\x00\x80\x97C\x00\x00eC\x00\x80\x03D\x00\x80\xa6C\x00\x00 C\x00\x80\x0bD\x00@\x02D\x00\x00\xd7C\x00\x80\xd3C\x00\x00\xcfC\x00\x00\x01D\x00@\x0bD\x00\x00\xb4C\x00\x00\x9bC\x00\x00\xb8C\x00\x000C\x00\x00oC\x00\x00\x90A\x00\x80\xdbC\x00\x80\xa5C\x00@\x0cD\x00\x00\xe9C\x00\xc0\tD\x00\x00\xb7C\x00\x00\x00\x00\x00\x00\xdeB\x00\x80\xc7C\x00\x00\x90B\x00\x00\tD\x00\x00AC\x00\x80\xe3C\x00\x80\xe2C\x00\xc0\x02D\x00\x00\nC\x00\x00\xb5C\x00\x80\xadC\x00\x00[C\x00\x00~C\x00\x00\xeeC\x00\x00\x7fC\x00\x00\x14D\x00\x80\xfcC\x00\x00\x99C\x00\x006C\x00\x00EC\x00\x00\x98A\x00\x00\xc8C\x00\x00\xa3C\x00\x00LC\x00\x00\x07D\x00\x00pA\x00\x00\xa0C\x00\x00\xc9C\x00\x80\x12D\x00\x003C\x00@\x07D\x00\x00\xccB\x00\x80\tD\x00\x00\xbbC\x00\x80\x9fC\x00\x80\xd5C\x00\x80\xf7C\x00\x80\xfeC\x00\x00\xe8B\x00\x00\xe6C\x00\x80\x00D\x00\x00\xf0C\x00\x00\xd4B\x00\x00\xd4C\x00\x00?C\x00\x00\xbaC\x00\x80\xedC\x00\x80\x89C\x00\x00OC\x00\x00\xe8A\x00\x00\xb2B\x00\x80\x8aC\x00\x000B\x00\x00\x95C\x00\x80\xf4C\x00\x00\xdaC\x00\x00\x06C\x00\x00\xf8A\x00\x00\x8eB\x00\x00\x8cB\x00\x00\x80?\x00\x00\xc0A\x00\x00\nD\x00\xc0\x15D\x00\x00\x91C\x00\x00%C\x00\x00\xa6B\x00\x00\xa4B\x00\x00\x17C\x00@\x05D\x00\x00\x8aC\x00\x00\\C\x00\x00YC\x00\x00\xb4B\x00@\tD\x00\x00\x12C\x00\x80\xa2C\x00\xc0\x11D\x00\x00\x9dC\x00\x00-C\x00\x80\xcfC\x00\x80\xddC\x00\x80\x05D\x00\x80\xbfC\x00\x00\xafC\x00\x00\x04C\x00\x00\x03D\x00\x001C\x00\x80\x9dC\x00\x80\x9eC\x00\xc0\x10D\x00\x00mC\x00@\x15D\x00\x00\xe0A\x00\x00\xb6C\x00\x00\xfeC\x00\x007C\x00\x008C\x00\x00\xc2B\x00\x00;C\x00\x80\nD\x00\x00\xffC\x00\x80\xe9C\x00\x80\x92C\x00\x00\x06D\x00\x00@C\x00\x00\xc8A\x00\x80\xd9C\x00\x00\x86B\x00\x00\xa1C\x00\x00\x9eC\x00\x00<C\x00\x004B\x00\x80\xf0C\x00\x00rC\x00\x80\x8cC\x00@\x06D\x00\x00tB\x00\x00\xccC\x00\x00`A\x00\x80\xf1C\x00\xc0\x08D\x00\x00\x1cC\x00\x80\xe5C\x00\x00\x80A\x00\x00\x94C\x00\x00\x0eC\x00\x00\x15D\x00\x80\xcbC\x00\x00\xf2C\x00\x00\x8bC\x00@\x01D\x00\x80\xc8C\x00\x00\xc8B\x00\x80\x01D\x00\x00\xb0B\x00\x00\xe5C\x00\x00\x88B\x00\x00\xf2B\x00\x00\x9cB\x00\x00^C\x00\x00\x86C\x00\x80\xefC\x00\xc0\x05D\x00\x005C\x00\x00\tC\x00\x00\x0cD\x00\x00kC\x00\x00\xfdC\x00\x80\xb4C\x00\x80\xf6C\x00\x00\xddC\x00\x00UC\x00\x80\xf9C\x00\x80\xe6C\x00\x00\x96C\x00\x00KC\x00\x00 A\x00\x00\x05D\x00\x00lB\x00\x00\xf1C\x00\x00\x15C\x00\x00=C\x00\x00\x04B\x00\x00wC\x00\x00\rC\x00\x00.C\x00@\x04D\x00\x80\x82C\x00\x00\'C\x00\x00RC\x00\x80\x06D\x00\x00\xc1C\x00\x00_C\x00\x00DC\x00\x00\x13C\x00\x00\xfcC\x00\x00\x1fC\x00\x80\x86C\x00@\nD\x00\x00\xcaC\x00\x00\xd6C\x00\x80\x85C\x00\x00\x14B\x00\x00\x84C\x00\x00dB\x00\x00\xa6C\x00\x80\xb7C\x00\xc0\x00D\x00\x80\x0cD\x00\x80\x84C\x00\x00\xf4B\x00\x00XC\x00\x00\x93C\x00\x80\xc3C\x00\x00\x87C\x00\x00\xcdC\x00\x00\xd8B\x00\x00\xc0C\x00\x00\xbfC\x00\x00\xb1C\x00\x80\xd4C\x00\x00PA\x00\x80\xa9C\x00\x00\x88A\x00\x80\x9bC\x00\x00\x90C\x00\x00\x9aC\x00\x80\x14D\x00\x00\xe1C\x00\x00\xb9C\x00\x80\x87C\x00\x00\xfcB\x00\x00IC\x00\x80\xd0C\x00\x00\xaeB\x00\xc0\rD\x00\x80\x9cC\x00\x004C\x00\x00\xa9C\x00\x80\xecC\x00\x00\xbeB\x00\x80\xa1C\x00\x00\xaaC\x00\x80\x93C\x00\x00\xf4C\x00\x00\xe2C\x00\x00\x19C\x00\x80\xdeC\x00\x00\x0fC\x00\x00TC\x00\x00\xfbC\x00\x80\xbeC\x00\x00\xdeC\x00\x00lC\x00\x00\xfaC\x00\x00\x8dC\x00\x00LB\x00\x00\x10B\x00\x00ZC\x00\x80\xfdC\x00\x00\x9cC\x00\x00\xc4B\x00\x00XB\x00\x80\x8bC\x00\x80\xa7C\x00\x00\xd0A\x00\x80\xd2C\x00\x00\x0cB\x00\x00!C\x00\x00\xf9C\x00\xc0\x14D\x00\x00SC\x00\x00\x02C\x00\x00\xcbC\x00\x00pB\x00\x80\xc9C\x00\x80\xa0C\x00\x80\x91C\x00\x00\xd5C\x00\x00\xbdC\x00\x00:C\x00\x00jC\x00\x00\x98B\x00\x00\xdcC\x00\x00PB\x00\x00{C\x00\x00\x18C\x00\x00\x05C\x00\x80\x0fD\x00\x002C\x00\x00|C\x00\x80\x94C\x00\x00\x1eC\x00\x00\x00C\x00\x80\xc0C\x00\x00\x07C\x00\x80\xdcC\x00\x00\xb8A\x00\x80\x10D\x00\x00(B\x00\x00bC\x00\x00<B\x00@\x0eD\x00\x00\xa0@\x00\x80\x8dC\x00\x00\x92B\x00\x00\xd2C\x00\x00\xf0A\x00\x00\x80B\x00@\x11D\x00@\x00D\x00\x80\xe8C\x00\x80\x80C\x00\x00)C\x00\x00uC\x00\x00\xdbC\x00\x80\xaeC\x00\x00\xc2C\x00\x00\xaeC\x00\x00\xadC\x00\x00\x02D\x00\x80\xd8C\x00\x00\xf8B\x00\x00\xc6B\x00\x00\x16C\x00\x00\xe6B\x00\x00\xbeC\x00\x00@@\x00\x00JC\x00\x00\x1aC\x00\x00xB\x00\x00\xa0A\x00\x00\\B\x00\x80\xacC\x00\x80\xd7C\x00\x00\xdaB\x00\x00\xf3C\x00\x80\xb2C\x00\x00$C\x00\x80\xe4C\x00\x00nC\x00\x00\x0eD\x00\x00\xc5C\x00\x00\xe0@\x00\x00\xbaB\x00\x00\xd9C\x00\x00\xdcB\x00\x00\xa8A\x00\x00iC\x00\x00tC\x00\x80\xf5C\x00\x80\xdfC\x00\x00\xc4C\x00\x00\xe7C\x00\x80\xb1C\x00\x00\xf0B\x00\x00zC\x00\x80\xccC\x00\x00hB\x00\x80\xabC\x00\xc0\x04D\x00\x00\xebC\x00\xc0\x03D\x00\x00\x96B\x00\x00&C\x00\x00gC\x00\x00\xa7C\x00@\x08D\x00\x00\x1dC\x00\x80\xd1C\x00\x00/C\x00\x00\x00B\x00\x80\x08D\x00\x009C\x00\x00\xaaB\x00\x00\rD\x00\x00\xc7C\x00\x00\x03C\x00\x00\xeeB\x00\x00qC\x00\x00\xecB\x00\x00\x84B\x00\x00\x01C\x00\x80\xafC\x00\x80\x90C\x00\x80\xc4C\x00\x00\xcaB\x00\x80\x8fC\x00\x00\x80@\x00\x00\x8cC\x00\x00]C\x00\x80\xb3C\x00\x00\xfaB\x00\x00cC\x00\x80\xc2C\x00\x80\x02D\x00\x00\x00D\x00\x00\xb8B\x00\xc0\x07D\x00\x00dC\x00\x00hC\x00\x00\x00A\x00\x00*C\x00\x80\x15D\x00\x00\x0bC\x00\x00\xf5C\x00\x00\xc0@\x00\x00\x85C\x00\x00\x13D\x00\x00\x10C\x00\x00\xd3C\x00@\x12D\x00\x00fC\x00\x00QC\x00\x80\xb9C\x00\x00\xb3C\x00\x000A\x00\x80\xf3C\x00\x00\x18B\x00\x00\xbcB\x00\xc0\x01D\x00\x80\x04D\x00\x00\x10A\x00\x00`C\x00\x00\xa5C\x00\x00\xecC\x00\x00\x81C\x00\x80\xcaC\x00\x00\xd0B\x00\x00HB\x00\x00\xb0A\x00\x00\xacC\x00\x00\xefC\x00\x80\xbcC\x00\x00>C\x00\x00\xceB\x00\x00\xc6C\x00\x00\xe0C\x00\x00FC\x00\x00\x82C\x00\x80\xa8C\x00\x00\xf7C\x00\x00\x12D\x00\x00\xbcC\x00\x00\xabC\x00\x80\xb6C\x00\x00\xa2B\x00\x00\xc3C\x00\x00\x88C\x00\x00\x11D\x00\x80\xa3C\x00\x00\x00@\x00\x00\xd8C\x00\x80\xdaC\x00\x00\xdfC\x00\x00`B\x00\x00,B\x00\x00\xd8A\x00\xc0\x13D\x00@\x03D\x00\x00\xd6B\x00\x00\x1bC\x00\x00@B\x00\x80\xb8C\x00\x80\x83C\x00\x00\xd1C\x00\x00\xedC\x00\x00DB\x00\x00,C\x00\x00+C\x00\x00\xceC\x00\x80\x8eC\x00\x00WC\x00\x00\x92C\x00\x00VC\x00\x80\x11D\x00\x00\x08B\x00\x00\x0fD\x00\x00\x10D\x00\x00NC\x00\x80\xf8C\x00\x80\xfaC\x00\x80\x95C\x00\x00\x94B\x00\x00$B\x00\x80\xcdC\x00\x00\x9aB\x00\x00\xa2C\x00\x00\x04D\x00\x00|B\x00@\rD\x00\x80\xaaC\x00\x00\xb0C\x00\xc0\x06D\x00\xc0\x0eD\x00\x00\xe0B\x00\x80\xe7C\x00\x00\xf6C\x00\x00GC\x00\x00\xe4B\x00\x00\xa8B\x00@\x0fD\x00\x00\x8fC\x00\x00\xd0C\x00\x80\x9aC\x00\x00\xd2B\x00\x00}C\x00\x00\xf8C\x00\x00\x83C\x00\x80\rD\x00\x80\xc6C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4314
(dp4315
g60
(dp4316
g48
I01
sg56
I01
ssg62
g4307
sg63
(lp4317
g48
ag56
asg65
(lp4318
I600
aI1
asbsg67
S'random'
p4319
sg69
g70
(g51
(I0
tS'b'
tRp4320
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4321
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'k\x00\x00\x00\xa8\x00\x00\x00\x1c\x02\x00\x00\xa0\x01\x00\x00\xdd\x01\x00\x00\x88\x01\x00\x00\xef\x01\x00\x00\xb0\x01\x00\x00\xea\x01\x00\x00\xff\x01\x00\x00\t\x01\x00\x00\xf9\x01\x00\x00Q\x00\x00\x006\x01\x00\x00\xe3\x00\x00\x00\x85\x00\x00\x00\xe8\x00\x00\x008\x01\x00\x00d\x00\x00\x00\x80\x00\x00\x00\xa4\x01\x00\x00\xb4\x01\x00\x00\x07\x02\x00\x00\x82\x01\x00\x00\xa9\x00\x00\x00\xd6\x00\x00\x00b\x01\x00\x00"\x02\x00\x00\xc9\x00\x00\x00\x9d\x00\x00\x00\x8c\x01\x00\x00\xa5\x00\x00\x00\xcc\x01\x00\x00\x0f\x01\x00\x005\x02\x00\x00d\x01\x00\x00Z\x01\x00\x00#\x01\x00\x00\xfb\x01\x00\x00\x0e\x00\x00\x00\x1d\x00\x00\x00=\x02\x00\x00\x84\x01\x00\x00!\x02\x00\x00\xa0\x00\x00\x00\xdc\x00\x00\x00L\x00\x00\x00\x86\x01\x00\x00\'\x02\x00\x00,\x02\x00\x00\x06\x02\x00\x00Y\x01\x00\x00u\x01\x00\x00\x10\x00\x00\x00_\x01\x00\x00\xa5\x01\x00\x00 \x02\x00\x00%\x01\x00\x00\xbf\x01\x00\x00\x0b\x01\x00\x00k\x01\x00\x00\xe1\x00\x00\x00\xa3\x01\x00\x00B\x02\x00\x00\x8d\x01\x00\x002\x00\x00\x00\xd6\x01\x00\x00\xd8\x00\x00\x00\xf5\x00\x00\x00O\x00\x00\x00\xa7\x00\x00\x00\xa6\x00\x00\x00n\x00\x00\x00\x8a\x01\x00\x00<\x02\x00\x00\xc4\x01\x00\x00s\x01\x00\x00?\x02\x00\x00\xf7\x00\x00\x00=\x00\x00\x00\n\x00\x00\x00\x17\x02\x00\x00\xaf\x00\x00\x00\xae\x00\x00\x00M\x02\x00\x00\xcf\x01\x00\x00H\x00\x00\x00C\x01\x00\x00\xf3\x00\x00\x00\x9e\x00\x00\x00\xb5\x00\x00\x00\x0f\x00\x00\x00\xe6\x01\x00\x00\xb1\x01\x00\x00\xfc\x01\x00\x00I\x01\x00\x00\x05\x00\x00\x00\xce\x00\x00\x00^\x01\x00\x00\x9c\x01\x00\x00\xf1\x00\x00\x00\xdb\x01\x00\x00\x8b\x00\x00\x00\x0c\x02\x00\x00\x05\x02\x00\x00R\x02\x00\x00\x96\x00\x00\x00%\x02\x00\x001\x01\x00\x00\xa8\x01\x00\x00\xb3\x01\x00\x00l\x00\x00\x00H\x02\x00\x00\'\x00\x00\x00L\x02\x00\x00\x9e\x01\x00\x00\x92\x00\x00\x00F\x00\x00\x00\xd5\x01\x00\x00\xd3\x01\x00\x00\xbc\x01\x00\x00\xf6\x00\x00\x00+\x01\x00\x00N\x00\x00\x00\x9b\x01\x00\x00\xe1\x01\x00\x00@\x01\x00\x00@\x00\x00\x00~\x01\x00\x00\xd7\x01\x00\x00i\x01\x00\x00\xd2\x01\x00\x00\xc1\x00\x00\x00x\x01\x00\x00\xa4\x00\x00\x00\x80\x01\x00\x00%\x00\x00\x00\xfd\x00\x00\x00t\x00\x00\x00\xed\x01\x00\x00\x0c\x00\x00\x00\x11\x01\x00\x00\xea\x00\x00\x00Q\x01\x00\x00\xf2\x01\x00\x00,\x00\x00\x00\xb7\x00\x00\x00\x1b\x01\x00\x00\x01\x00\x00\x00\r\x01\x00\x00\x9d\x01\x00\x00\xb0\x00\x00\x00w\x01\x00\x00O\x01\x00\x00\xa2\x01\x00\x00&\x02\x00\x00\xe6\x00\x00\x00\xc9\x01\x00\x00}\x01\x00\x00\x1d\x01\x00\x00W\x00\x00\x00e\x01\x00\x00R\x00\x00\x00I\x00\x00\x00\xab\x01\x00\x00\xad\x00\x00\x00\xc5\x01\x00\x00\x15\x01\x00\x00\t\x00\x00\x00\x92\x01\x00\x00\xeb\x01\x00\x00.\x02\x00\x00-\x02\x00\x00\xbb\x00\x00\x00\x12\x01\x00\x00\xcb\x01\x00\x00b\x00\x00\x00\xc3\x00\x00\x00z\x01\x00\x00\x89\x00\x00\x00F\x01\x00\x00\xfc\x00\x00\x00~\x00\x00\x00\xcc\x00\x00\x00\xcd\x00\x00\x00\xce\x01\x00\x00q\x01\x00\x00\xcf\x00\x00\x00\xdb\x00\x00\x00\x0e\x01\x00\x00\x0b\x02\x00\x00\x98\x00\x00\x00\xd5\x00\x00\x00p\x00\x00\x00>\x00\x00\x00\x02\x00\x00\x00\x1a\x01\x00\x00\x7f\x00\x00\x00\x0f\x02\x00\x00K\x02\x00\x003\x00\x00\x00A\x01\x00\x00\xa1\x01\x00\x00\x08\x01\x00\x00\x83\x00\x00\x00*\x00\x00\x008\x02\x00\x00\x9c\x00\x00\x00"\x00\x00\x00\xf6\x01\x00\x00\x16\x01\x00\x00h\x01\x00\x00R\x01\x00\x00\x04\x01\x00\x003\x02\x00\x001\x02\x00\x00,\x01\x00\x00\xb4\x00\x00\x00[\x01\x00\x00w\x00\x00\x00\xb3\x00\x00\x00\xdf\x01\x00\x00\xf8\x00\x00\x00\x19\x01\x00\x00\x00\x02\x00\x000\x00\x00\x00\x85\x01\x00\x00\xe2\x01\x00\x00\xe8\x01\x00\x00T\x00\x00\x00\xf5\x01\x00\x00\xc6\x01\x00\x00\xe9\x01\x00\x00\xb5\x01\x00\x00r\x01\x00\x00\xff\x00\x00\x00V\x01\x00\x00\xc7\x00\x00\x00\xad\x01\x00\x00c\x00\x00\x00\x03\x00\x00\x00\xd4\x01\x00\x00\xde\x00\x00\x007\x00\x00\x00\xb6\x01\x00\x00\x93\x01\x00\x00:\x00\x00\x00\x10\x01\x00\x00P\x00\x00\x00/\x00\x00\x00\xbd\x01\x00\x00v\x01\x00\x00{\x01\x00\x00S\x02\x00\x00x\x00\x00\x00z\x00\x00\x00M\x00\x00\x00\x91\x01\x00\x00\x03\x02\x00\x00\x19\x00\x00\x00\x10\x02\x00\x00\x14\x01\x00\x00U\x02\x00\x00)\x02\x00\x00$\x01\x00\x00*\x01\x00\x00\xf0\x01\x00\x00"\x01\x00\x00\xf9\x00\x00\x00\x1e\x01\x00\x00/\x01\x00\x00?\x01\x00\x00\x19\x02\x00\x00\x12\x00\x00\x008\x00\x00\x00\x9b\x00\x00\x00\xb2\x00\x00\x00\x9f\x00\x00\x00\xee\x00\x00\x00`\x01\x00\x00\xde\x01\x00\x00\xdf\x00\x00\x00X\x01\x00\x00\x89\x01\x00\x00A\x00\x00\x000\x02\x00\x00O\x02\x00\x00\xdc\x01\x00\x00:\x01\x00\x00\xd9\x01\x00\x00\xac\x00\x00\x00n\x01\x00\x002\x02\x00\x00\xd3\x00\x00\x00-\x01\x00\x00L\x01\x00\x00\xe9\x00\x00\x00|\x01\x00\x00\xa1\x00\x00\x00;\x02\x00\x00\x07\x01\x00\x001\x00\x00\x00\x1a\x00\x00\x00S\x00\x00\x00\x15\x00\x00\x00\x18\x00\x00\x00}\x00\x00\x00<\x00\x00\x00;\x01\x00\x00Q\x02\x00\x00`\x00\x00\x009\x01\x00\x00]\x01\x00\x00E\x01\x00\x00\xba\x00\x00\x00\xc4\x00\x00\x00\xda\x00\x00\x00\xc5\x00\x00\x00;\x00\x00\x00\x8e\x00\x00\x00\x86\x00\x00\x00m\x01\x00\x00\xd9\x00\x00\x00J\x01\x00\x00@\x02\x00\x00\xb8\x00\x00\x00\x82\x00\x00\x00\x1b\x02\x00\x00#\x00\x00\x004\x00\x00\x00\x01\x02\x00\x00f\x00\x00\x00&\x01\x00\x00V\x00\x00\x00\xc7\x01\x00\x00a\x01\x00\x00\x08\x00\x00\x00\x11\x02\x00\x00G\x01\x00\x007\x01\x00\x00K\x01\x00\x00D\x02\x00\x00\x15\x02\x00\x00\xc0\x01\x00\x00\x08\x02\x00\x00\xa6\x01\x00\x00\x98\x01\x00\x00v\x00\x00\x00\x97\x01\x00\x00\x95\x01\x00\x00\xc0\x00\x00\x00\xd8\x01\x00\x00E\x02\x00\x00\x0b\x00\x00\x004\x01\x00\x00\xbb\x01\x00\x00?\x00\x00\x00\xaa\x01\x00\x00\xf8\x01\x00\x00\xe0\x01\x00\x00_\x00\x00\x00\x01\x01\x00\x00u\x00\x00\x00.\x00\x00\x00\xca\x00\x00\x00\x16\x02\x00\x00j\x00\x00\x00\'\x01\x00\x00a\x00\x00\x00(\x02\x00\x00>\x01\x00\x00\xf7\x01\x00\x00\x99\x00\x00\x00B\x00\x00\x00\x8d\x00\x00\x00\r\x00\x00\x00\x14\x02\x00\x00\n\x02\x00\x00p\x01\x00\x00C\x00\x00\x00\x9f\x01\x00\x00T\x01\x00\x003\x01\x00\x00\xbf\x00\x00\x002\x01\x00\x00\x7f\x01\x00\x00\x18\x01\x00\x00D\x00\x00\x00\x96\x01\x00\x00\xe3\x01\x00\x00\x18\x02\x00\x00.\x01\x00\x00\xb9\x01\x00\x00\xda\x01\x00\x00\xaf\x01\x00\x00\x00\x00\x00\x00\r\x02\x00\x00W\x02\x00\x00\xd1\x01\x00\x00m\x00\x00\x00\x81\x00\x00\x00\xf0\x00\x00\x00\x87\x00\x00\x00l\x01\x00\x00 \x01\x00\x00\x04\x02\x00\x00j\x01\x00\x00\xec\x00\x00\x00\xe2\x00\x00\x00\xbe\x01\x00\x000\x01\x00\x00>\x02\x00\x00/\x02\x00\x005\x00\x00\x00\\\x00\x00\x00\xbc\x00\x00\x00P\x02\x00\x00B\x01\x00\x00*\x02\x00\x00\xca\x01\x00\x00\x8b\x01\x00\x00c\x01\x00\x00\xf3\x01\x00\x00[\x00\x00\x00\x97\x00\x00\x005\x01\x00\x00o\x01\x00\x00\x8f\x00\x00\x00!\x01\x00\x00K\x00\x00\x00Z\x00\x00\x00\xa7\x01\x00\x00\x1d\x02\x00\x00\x9a\x01\x00\x00\xb2\x01\x00\x00\xd7\x00\x00\x00\xa3\x00\x00\x00\x1e\x02\x00\x00\x94\x01\x00\x00e\x00\x00\x00t\x01\x00\x00\x81\x01\x00\x00\x03\x01\x00\x00\xbd\x00\x00\x00U\x01\x00\x00P\x01\x00\x00\x1f\x02\x00\x00\xb8\x01\x00\x00\x0e\x02\x00\x00&\x00\x00\x00=\x01\x00\x00\x1e\x00\x00\x00N\x01\x00\x00r\x00\x00\x00\x06\x00\x00\x00q\x00\x00\x006\x00\x00\x00\xac\x01\x00\x00\xf4\x00\x00\x00\xe7\x00\x00\x00\x93\x00\x00\x00\x06\x01\x00\x00\xba\x01\x00\x00I\x02\x00\x00(\x00\x00\x00\x90\x01\x00\x00h\x00\x00\x00\xd2\x00\x00\x00\x1b\x00\x00\x00\x1f\x00\x00\x00\xc2\x01\x00\x00\x1c\x00\x00\x00\x02\x02\x00\x00H\x01\x00\x00+\x02\x00\x00\x9a\x00\x00\x00y\x00\x00\x00+\x00\x00\x00\t\x02\x00\x00\xfa\x00\x00\x00\x95\x00\x00\x00\xdd\x00\x00\x00\x0c\x01\x00\x00\xe4\x00\x00\x00\xed\x00\x00\x00\x11\x00\x00\x00\xa9\x01\x00\x00\xfa\x01\x00\x00M\x01\x00\x00\xa2\x00\x00\x00\xee\x01\x00\x00\xb7\x01\x00\x00J\x02\x00\x00\x02\x01\x00\x00\x12\x02\x00\x00\x90\x00\x00\x00T\x02\x00\x009\x02\x00\x00f\x01\x00\x00\x05\x01\x00\x00W\x01\x00\x00:\x02\x00\x00S\x01\x00\x009\x00\x00\x00\x1c\x01\x00\x00|\x00\x00\x00\x00\x01\x00\x00\\\x01\x00\x00\xcb\x00\x00\x00\x91\x00\x00\x00\xd1\x00\x00\x00E\x00\x00\x00\xe5\x01\x00\x00\x8f\x01\x00\x00\x94\x00\x00\x00(\x01\x00\x00]\x00\x00\x00\xef\x00\x00\x00\xf2\x00\x00\x00\xfd\x01\x00\x00\x99\x01\x00\x00Y\x00\x00\x00\xe4\x01\x00\x00s\x00\x00\x00\xc2\x00\x00\x00$\x02\x00\x00U\x00\x00\x00\xc3\x01\x00\x00A\x02\x00\x00\x13\x01\x00\x00\xfe\x01\x00\x00\xc1\x01\x00\x00\n\x01\x00\x00\xb1\x00\x00\x00\xbe\x00\x00\x00\xfb\x00\x00\x00\xd4\x00\x00\x00\xe0\x00\x00\x00\x17\x01\x00\x00F\x02\x00\x00\x84\x00\x00\x00\x8a\x00\x00\x00\x07\x00\x00\x00\xe7\x01\x00\x00\x17\x00\x00\x00\xc8\x01\x00\x00\xcd\x01\x00\x00\xe5\x00\x00\x00o\x00\x00\x00\xb6\x00\x00\x00\x8c\x00\x00\x00i\x00\x00\x00\xaa\x00\x00\x00\x1f\x01\x00\x00\xd0\x00\x00\x00\x14\x00\x00\x00\x16\x00\x00\x00^\x00\x00\x00X\x00\x00\x00G\x00\x00\x00\xfe\x00\x00\x00g\x00\x00\x00)\x01\x00\x00-\x00\x00\x00\xd0\x01\x00\x00C\x02\x00\x00V\x02\x00\x00D\x01\x00\x00\xae\x01\x00\x00\x87\x01\x00\x00\x04\x00\x00\x00G\x02\x00\x006\x02\x00\x00N\x02\x00\x00y\x01\x00\x00J\x00\x00\x007\x02\x00\x00 \x00\x00\x00\x83\x01\x00\x00\xc6\x00\x00\x00\x1a\x02\x00\x00\x8e\x01\x00\x004\x02\x00\x00\xb9\x00\x00\x00\x13\x02\x00\x00\xf4\x01\x00\x00\x88\x00\x00\x00$\x00\x00\x00\xf1\x01\x00\x00\x13\x00\x00\x00)\x00\x00\x00#\x02\x00\x00{\x00\x00\x00!\x00\x00\x00<\x01\x00\x00g\x01\x00\x00\xeb\x00\x00\x00\xc8\x00\x00\x00\xec\x01\x00\x00\xab\x00\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4322
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4323
(g4321
S'\xab\x00\x00\x00'
tRp4324
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4325
I01
sb.