ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject610
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 610
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vm
sS'age'
p31
V19
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I4
sS'_exp'
p41
I75499856
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I54
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I11
I55
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I11
I55
tg55
I00
S'\x00\x00\x00B\x00\x00LB\x00\x00XB\x00\x00\x8cB\x00\x00\x9eB\x00\x00\xcaB\x00\x00\xdaB\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xfaB\x00\x00\x00C\x00\x00\x01C\x00\x00\x16C\x00\x00!C\x00\x00*C\x00\x00IC\x00\x00QC\x00\x00RC\x00\x00UC\x00\x00XC\x00\x00\x85C\x00\x00\x86C\x00\x80\x8aC\x00\x00\x8cC\x00\x80\x92C\x00\x00\x96C\x00\x80\x9bC\x00\x80\xa3C\x00\x80\xa4C\x00\x80\xa6C\x00\x80\xa9C\x00\x00\xadC\x00\x80\xb6C\x00\x80\xbbC\x00\x80\xbfC\x00\x00\xc1C\x00\x80\xcdC\x00\x80\xceC\x00\x80\xcfC\x00\x00\xd0C\x00\x00\xd7C\x00\x80\xddC\x00\x80\xe1C\x00\x00\xe6C\x00\x80\xe7C\x00\x80\xe9C\x00\x80\xfbC\x00\x80\x01D\x00@\x04D\x00@\x06D\x00@\x0fD\x00\x80\x11D\x00\x00\x13D\x00@\x15D\x00\x00\x00\x00\x00\x00\x00A\x00\x00 A\x00\x00\xa0A\x00\x00$B\x00\x00\x82B\x00\x00\x84B\x00\x00\x96B\x00\x00\xb8B\x00\x00\xc2B\x00\x00\xc8B\x00\x00\xd4B\x00\x00\xdeB\x00\x00\x06C\x00\x00\x0bC\x00\x00\x0fC\x00\x00\x19C\x00\x00\x1bC\x00\x006C\x00\x00EC\x00\x00MC\x00\x00SC\x00\x00YC\x00\x00ZC\x00\x00bC\x00\x00cC\x00\x00fC\x00\x00jC\x00\x00nC\x00\x00|C\x00\x80\x88C\x00\x80\x8cC\x00\x00\x9cC\x00\x00\xbeC\x00\x80\xc2C\x00\x00\xc4C\x00\x00\xcdC\x00\x00\xdbC\x00\x80\xe0C\x00\x00\xe5C\x00\x00\xe8C\x00\x00\xecC\x00\x00\xedC\x00\x80\xf2C\x00\x80\xf4C\x00\x80\xf5C\x00\x80\xf7C\x00\x00\xfbC\x00\x00\xfeC\x00\x00\x00D\x00\xc0\x01D\x00\x00\x05D\x00@\x0bD\x00@\x10D\x00@\x13D\x00\x80\x15D\x00\x00@A\x00\x00pA\x00\x00\xe0A\x00\x00\x04B\x00\x00\x08B\x00\x00(B\x00\x00lB\x00\x00\x8eB\x00\x00\x98B\x00\x00\xa0B\x00\x00\xeeB\x00\x00\xf4B\x00\x00\xfeB\x00\x00\x10C\x00\x00\x11C\x00\x00\x17C\x00\x00\x1cC\x00\x004C\x00\x009C\x00\x00;C\x00\x00FC\x00\x00NC\x00\x00^C\x00\x00hC\x00\x00lC\x00\x00qC\x00\x00}C\x00\x00~C\x00\x80\x87C\x00\x80\x8bC\x00\x80\x9cC\x00\x80\x9fC\x00\x00\xabC\x00\x00\xaeC\x00\x00\xafC\x00\x00\xb2C\x00\x80\xb2C\x00\x00\xb4C\x00\x00\xbdC\x00\x00\xc2C\x00\x80\xc5C\x00\x80\xc6C\x00\x00\xcfC\x00\x80\xd1C\x00\x80\xd6C\x00\x80\xd9C\x00\x00\xdcC\x00\x80\xfeC\x00@\x03D\x00\x00\x04D\x00\x80\x08D\x00\x00\x0bD\x00\x80\x0fD\x00\x00\x15D\x00\x00\x00\x00\x00\x00\x80@\x00\x00`A\x00\x00\xc0A\x00\x00\xd8A\x00\x00\xf0A\x00\x00\x9cB\x00\x00\xa8B\x00\x00\xc0B\x00\x00\xd6B\x00\x00\rC\x00\x005C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00BC\x00\x00[C\x00\x00\\C\x00\x00gC\x00\x00kC\x00\x00mC\x00\x00\x7fC\x00\x80\x83C\x00\x00\x84C\x00\x80\x84C\x00\x80\x85C\x00\x00\x8aC\x00\x00\x90C\x00\x80\x90C\x00\x00\x95C\x00\x80\x98C\x00\x80\x9eC\x00\x00\xa3C\x00\x00\xa7C\x00\x00\xb1C\x00\x00\xb7C\x00\x80\xbdC\x00\x80\xc4C\x00\x00\xcaC\x00\x00\xd1C\x00\x00\xd4C\x00\x80\xe3C\x00\x00\xe4C\x00\x00\xe9C\x00\x00\xeeC\x00\x80\xf9C\x00\x80\xfcC\x00\x00\x01D\x00\x80\x03D\x00\x80\x07D\x00\xc0\x08D\x00\x80\x0bD\x00\xc0\x0cD\x00\x00\rD\x00\x00\x10D\x00\x00\x00\x00\x00\x00\x80?\x00\x00@@\x00\x00\xc0@\x00\x00\xd0A\x00\x00\x0cB\x00\x00,B\x00\x00@B\x00\x00tB\x00\x00\x92B\x00\x00\xa6B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xdcB\x00\x00\xecB\x00\x00\x04C\x00\x00\x13C\x00\x00JC\x00\x00sC\x00\x00wC\x00\x00zC\x00\x80\x80C\x00\x00\x89C\x00\x80\x8eC\x00\x00\x92C\x00\x00\x99C\x00\x80\x99C\x00\x80\x9aC\x00\x00\xa1C\x00\x00\xa6C\x00\x80\xa8C\x00\x00\xb5C\x00\x80\xb5C\x00\x80\xb9C\x00\x00\xbaC\x00\x80\xbeC\x00\x80\xc7C\x00\x00\xd5C\x00\x80\xd7C\x00\x00\xd8C\x00\x80\xdeC\x00\x00\xdfC\x00\x80\xe5C\x00\x80\xedC\x00\x80\xf1C\x00\x00\xf2C\x00\xc0\x02D\x00\x80\x06D\x00\xc0\x07D\x00@\x0eD\x00\x00\x11D\x00\x00\x12D\x00\xc0\x14D\x00\xc0\x15D\x00\x00\xe0@\x00\x00PA\x00\x00\x88A\x00\x00\x98A\x00\x00\xa8A\x00\x00\xb8A\x00\x00\xf8A\x00\x00\x10B\x00\x00\x18B\x00\x00\x1cB\x00\x00DB\x00\x00\xaaB\x00\x00\xb0B\x00\x00\xceB\x00\x00\xf6B\x00\x00\x1aC\x00\x00&C\x00\x00(C\x00\x00/C\x00\x00AC\x00\x00LC\x00\x00WC\x00\x00iC\x00\x00xC\x00\x00\x80C\x00\x80\x82C\x00\x00\x8fC\x00\x00\x9bC\x00\x00\xa5C\x00\x00\xa9C\x00\x80\xb0C\x00\x00\xb3C\x00\x00\xb6C\x00\x00\xb8C\x00\x00\xb9C\x00\x00\xbbC\x00\x80\xbcC\x00\x80\xc0C\x00\x00\xc5C\x00\x80\xd8C\x00\x80\xe6C\x00\x80\xefC\x00\x00\xf3C\x00\x80\xf6C\x00\x00\xfaC\x00\x80\xfdC\x00@\x01D\x00\x80\x05D\x00\x00\x06D\x00\x80\tD\x00\x80\rD\x00\xc0\x0eD\x00\xc0\x10D\x00@\x11D\x00\xc0\x13D\x00\x00\x80A\x00\x00\x90A\x00\x00\xc8A\x00\x00\x14B\x00\x000B\x00\x00<B\x00\x00\x80B\x00\x00\x9aB\x00\x00\xbaB\x00\x00\x08C\x00\x00\x0eC\x00\x00\x14C\x00\x00\x18C\x00\x00\x1fC\x00\x00 C\x00\x00"C\x00\x00#C\x00\x00+C\x00\x00:C\x00\x00_C\x00\x00rC\x00\x00\x81C\x00\x80\x81C\x00\x00\x82C\x00\x00\x87C\x00\x80\x96C\x00\x00\x9eC\x00\x80\xa0C\x00\x80\xa2C\x00\x00\xa8C\x00\x80\xb7C\x00\x80\xc3C\x00\x00\xc8C\x00\x00\xc9C\x00\x00\xcbC\x00\x80\xccC\x00\x00\xd2C\x00\x80\xd2C\x00\x80\xe8C\x00\x80\xecC\x00\x00\xefC\x00\x00\xf1C\x00\x80\xf3C\x00\x00\xf5C\x00\xc0\x03D\x00\xc0\x06D\x00@\x08D\x00\x00\tD\x00@\nD\x00@\rD\x00\x80\x12D\x00\xc0\x12D\x00\x00\x14D\x00\x80\x14D\x00\x00\x00\x00\x00\x00\x00@\x00\x00\xa0@\x00\x00\x10A\x00\x004B\x00\x008B\x00\x00\x86B\x00\x00\x88B\x00\x00\x90B\x00\x00\x94B\x00\x00\xaeB\x00\x00\xeaB\x00\x00\x02C\x00\x00\x15C\x00\x00\x1eC\x00\x000C\x00\x002C\x00\x00<C\x00\x00PC\x00\x00dC\x00\x00eC\x00\x00tC\x00\x00\x83C\x00\x00\x8eC\x00\x80\x8fC\x00\x80\x93C\x00\x00\x98C\x00\x00\x9aC\x00\x80\xa5C\x00\x80\xacC\x00\x80\xadC\x00\x80\xb1C\x00\x80\xb4C\x00\x80\xc8C\x00\x80\xc9C\x00\x80\xcbC\x00\x00\xd3C\x00\x00\xdaC\x00\x80\xdbC\x00\x80\xdcC\x00\x80\xe2C\x00\x00\xf9C\x00\x00\xfcC\x00\x00\xfdC\x00\x80\x00D\x00\x00\x02D\x00\x00\x03D\x00\x00\x08D\x00\xc0\tD\x00\x80\nD\x00\x00\x0cD\x00\xc0\rD\x00\x80\x10D\x00@\x12D\x00@\x14D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000A\x00\x00\xb0A\x00\x00\xa2B\x00\x00\xb2B\x00\x00\xd8B\x00\x00\xe0B\x00\x00\xf0B\x00\x00\xfcB\x00\x00\x07C\x00\x00\x0cC\x00\x00\x12C\x00\x00)C\x00\x003C\x00\x008C\x00\x00=C\x00\x00DC\x00\x00HC\x00\x00TC\x00\x00VC\x00\x00`C\x00\x00aC\x00\x00uC\x00\x00yC\x00\x80\x86C\x00\x00\x88C\x00\x80\x8dC\x00\x80\x91C\x00\x00\x93C\x00\x80\x97C\x00\x80\x9dC\x00\x00\xa0C\x00\x00\xa2C\x00\x00\xaaC\x00\x80\xaaC\x00\x80\xabC\x00\x80\xb3C\x00\x80\xcaC\x00\x00\xceC\x00\x80\xd3C\x00\x80\xd4C\x00\x80\xd5C\x00\x80\xdaC\x00\x00\xe3C\x00\x80\xeaC\x00\x00\xebC\x00\x80\xebC\x00\x00\xf0C\x00\x00\xf7C\x00\x80\xfaC\x00@\x00D\x00\x00\x07D\x00\xc0\nD\x00\x00\x0eD\x00\x80\x13D\x00\x00 B\x00\x00PB\x00\x00TB\x00\x00hB\x00\x00pB\x00\x00\x8aB\x00\x00\xacB\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xe6B\x00\x00\xf8B\x00\x00\tC\x00\x00\x1dC\x00\x00,C\x00\x00-C\x00\x001C\x00\x00GC\x00\x00KC\x00\x00oC\x00\x00pC\x00\x00{C\x00\x00\x8bC\x00\x00\x8dC\x00\x00\x91C\x00\x80\x95C\x00\x00\x97C\x00\x00\xa4C\x00\x80\xa7C\x00\x80\xaeC\x00\x80\xafC\x00\x80\xb8C\x00\x80\xbaC\x00\x00\xbfC\x00\x00\xc0C\x00\x80\xc1C\x00\x00\xc7C\x00\x00\xccC\x00\x80\xd0C\x00\x00\xd6C\x00\x00\xd9C\x00\x00\xdeC\x00\x80\xdfC\x00\x00\xeaC\x00\x80\xeeC\x00\x00\xf6C\x00\x00\xf8C\x00\x80\xf8C\x00\x80\xffC\x00\x80\x02D\x00\x80\x04D\x00\xc0\x0bD\x00@\x0cD\x00\x80\x0cD\x00\x00\x0fD\x00\xc0\x11D\x00\x00\xe8A\x00\x00HB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00xB\x00\x00|B\x00\x00\xa4B\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xccB\x00\x00\xe8B\x00\x00\xf2B\x00\x00\x03C\x00\x00\x05C\x00\x00\nC\x00\x00$C\x00\x00%C\x00\x00\'C\x00\x00.C\x00\x007C\x00\x00CC\x00\x00OC\x00\x00]C\x00\x00vC\x00\x80\x89C\x00\x00\x94C\x00\x80\x94C\x00\x00\x9dC\x00\x00\x9fC\x00\x80\xa1C\x00\x00\xacC\x00\x00\xb0C\x00\x00\xbcC\x00\x00\xc3C\x00\x00\xc6C\x00\x00\xddC\x00\x00\xe0C\x00\x00\xe1C\x00\x00\xe2C\x00\x80\xe4C\x00\x00\xe7C\x00\x80\xf0C\x00\x00\xf4C\x00\x00\xffC\x00\xc0\x00D\x00@\x02D\x00\xc0\x04D\x00@\x05D\x00\xc0\x05D\x00@\x07D\x00@\tD\x00\x00\nD\x00\x80\x0eD\x00\xc0\x0fD'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I11
aI55
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I11
I55
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I8
aI8
aI8
aI2
aI6
aI10
aI1
aI6
aI5
aI9
aI4
aI10
aI4
aI1
aI5
aI10
aI7
aI2
aI2
aI0
aI3
aI3
aI6
aI2
aI3
aI10
aI5
aI10
aI7
aI2
aI5
aI8
aI10
aI4
aI5
aI5
aI10
aI7
aI3
aI2
aI2
aI0
aI10
aI6
aI4
aI1
aI7
aI5
aI2
aI6
aI5
aI9
aI9
aI9
aI6
aI4
aI2
aI5
aI2
aI7
aI10
aI7
aI3
aI8
aI1
aI1
aI2
aI10
aI2
aI1
aI5
aI9
aI7
aI9
aI0
aI10
aI2
aI4
aI2
aI3
aI3
aI7
aI3
aI4
aI8
aI7
aI2
aI5
aI5
aI0
aI0
aI2
aI9
aI2
aI0
aI7
aI10
aI0
aI1
aI1
aI9
aI5
aI0
aI0
aI8
aI7
aI9
aI0
aI4
aI4
aI7
aI5
aI3
aI4
aI7
aI10
aI7
aI0
aI4
aI0
aI8
aI5
aI1
aI2
aI2
aI10
aI7
aI8
aI8
aI1
aI2
aI5
aI7
aI3
aI0
aI0
aI3
aI9
aI5
aI6
aI4
aI8
aI3
aI0
aI10
aI9
aI9
aI6
aI6
aI4
aI10
aI7
aI1
aI4
aI5
aI9
aI1
aI1
aI9
aI10
aI10
aI3
aI2
aI7
aI2
aI4
aI3
aI6
aI5
aI6
aI9
aI9
aI2
aI4
aI10
aI0
aI9
aI8
aI8
aI9
aI5
aI8
aI3
aI0
aI8
aI6
aI1
aI8
aI5
aI3
aI9
aI3
aI0
aI0
aI4
aI0
aI10
aI7
aI3
aI5
aI2
aI4
aI1
aI6
aI4
aI0
aI8
aI6
aI3
aI6
aI7
aI2
aI7
aI10
aI3
aI6
aI3
aI10
aI6
aI0
aI3
aI2
aI4
aI6
aI4
aI2
aI0
aI8
aI1
aI5
aI0
aI0
aI6
aI4
aI7
aI8
aI2
aI3
aI4
aI0
aI8
aI3
aI10
aI4
aI0
aI2
aI9
aI6
aI1
aI10
aI3
aI7
aI2
aI6
aI2
aI1
aI6
aI0
aI7
aI5
aI9
aI3
aI3
aI9
aI10
aI3
aI10
aI10
aI1
aI4
aI7
aI6
aI3
aI6
aI1
aI7
aI6
aI3
aI5
aI5
aI9
aI2
aI10
aI6
aI4
aI9
aI8
aI9
aI6
aI6
aI0
aI3
aI3
aI9
aI8
aI8
aI2
aI4
aI6
aI8
aI0
aI8
aI9
aI2
aI8
aI9
aI0
aI2
aI5
aI3
aI10
aI7
aI8
aI8
aI9
aI4
aI3
aI0
aI6
aI1
aI5
aI9
aI9
aI10
aI7
aI8
aI5
aI1
aI0
aI4
aI4
aI5
aI2
aI5
aI10
aI4
aI7
aI4
aI10
aI4
aI10
aI2
aI10
aI7
aI6
aI6
aI1
aI5
aI5
aI5
aI1
aI3
aI5
aI6
aI6
aI1
aI4
aI8
aI10
aI6
aI6
aI7
aI5
aI9
aI1
aI6
aI6
aI0
aI3
aI2
aI4
aI10
aI9
aI5
aI6
aI8
aI1
aI4
aI5
aI6
aI2
aI7
aI7
aI1
aI7
aI5
aI6
aI10
aI9
aI0
aI10
aI4
aI3
aI10
aI1
aI7
aI0
aI1
aI0
aI0
aI9
aI10
aI3
aI1
aI0
aI1
aI1
aI8
aI6
aI2
aI9
aI0
aI7
aI8
aI3
aI4
aI2
aI8
aI5
aI4
aI1
aI7
aI2
aI8
aI7
aI9
aI1
aI8
aI8
aI1
aI1
aI8
aI7
aI10
aI2
aI1
aI8
aI5
aI8
aI0
aI1
aI5
aI3
aI1
aI9
aI10
aI7
aI5
aI3
aI3
aI4
aI0
aI8
aI2
aI6
aI9
aI8
aI10
aI2
aI1
aI7
aI9
aI4
aI5
aI8
aI8
aI8
aI3
aI6
aI0
aI5
aI9
aI2
aI4
aI9
aI3
aI3
aI0
aI4
aI8
aI10
aI4
aI8
aI10
aI9
aI0
aI7
aI2
aI5
aI3
aI3
aI4
aI4
aI5
aI6
aI7
aI1
aI5
aI2
aI9
aI6
aI1
aI9
aI1
aI8
aI2
aI7
aI3
aI6
aI6
aI10
aI2
aI8
aI10
aI1
aI7
aI9
aI9
aI7
aI1
aI7
aI7
aI4
aI3
aI9
aI0
aI2
aI7
aI4
aI0
aI5
aI8
aI0
aI8
aI1
aI1
aI0
aI8
aI6
aI5
aI7
aI10
aI3
aI0
aI6
aI9
aI10
aI5
aI6
aI3
aI1
aI5
aI0
aI4
aI0
aI1
aI2
aI7
aI9
aI0
aI8
aI10
aI6
aI1
aI10
aI5
aI6
aI1
aI7
aI3
aI1
aI2
aI1
aI3
aI4
aI4
aI10
aI4
aI10
aI0
aI8
aI9
aI4
aI9
aI9
aI2
aI6
aI9
aI9
aI7
aI10
aI5
aI1
aI4
aI8
aI3
aI3
aI6
aI4
aI10
aI7
aI5
aI0
aI7
aI2
atbsS'finished'
p74
I00
sS'nReps'
p75
I55
sS'nRemaining'
p76
I5
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p79
NsS'thisIndex'
p80
I4
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I5
sS'nTotal'
p83
I605
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I8
sS'.thisRepN'
p96
I0
sg30
Vm
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I8
sg15
(lp100
S'd'
asg17
S'N'
sg14
I1
sa(dp101
g16
(lp102
S'k'
asg95
I4
sS'.thisRepN'
p103
I0
sg30
Vm
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I4
sg15
(lp107
S'k'
asg17
S'Y'
sg14
I1
sa(dp108
g16
(lp109
S'k'
asg18
S'N'
sS'.thisRepN'
p110
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I7
sg15
(lp114
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp115
S'space'
p116
asg95
I7
sa(dp117
g16
(lp118
S'd'
asg18
S'N'
sS'.thisRepN'
p119
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p120
I3
sS'.thisN'
p121
I3
sS'.thisIndex'
p122
I4
sg15
(lp123
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp124
S'space'
p125
asg95
I4
sa(dp126
g16
(lp127
S'd'
asg18
S'N'
sS'.thisRepN'
p128
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p129
I4
sS'.thisN'
p130
I4
sS'.thisIndex'
p131
I3
sg15
(lp132
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp133
g16
(lp134
S'd'
asg18
S'Y'
sS'.thisRepN'
p135
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p136
I5
sS'.thisN'
p137
I5
sS'.thisIndex'
p138
I7
sg15
(lp139
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp140
S'space'
p141
asg95
I7
sa(dp142
g16
(lp143
S'k'
asg18
S'N'
sS'.thisRepN'
p144
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p145
I6
sS'.thisN'
p146
I6
sS'.thisIndex'
p147
I4
sg15
(lp148
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp149
g16
(lp150
S'k'
asg18
S'N'
sS'.thisRepN'
p151
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p152
I7
sS'.thisN'
p153
I7
sS'.thisIndex'
p154
I5
sg15
(lp155
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp156
g16
(lp157
S'd'
asg18
S'N'
sS'.thisRepN'
p158
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p159
I8
sS'.thisN'
p160
I8
sS'.thisIndex'
p161
I1
sg15
(lp162
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp163
g16
(lp164
S'd'
asg18
S'Y'
sS'.thisRepN'
p165
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p166
I9
sS'.thisN'
p167
I9
sS'.thisIndex'
p168
I7
sg15
(lp169
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp170
S'space'
p171
asg95
I7
sa(dp172
g16
(lp173
S'k'
asg18
S'Y'
sS'.thisRepN'
p174
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p175
I10
sS'.thisN'
p176
I10
sS'.thisIndex'
p177
I1
sg15
(lp178
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp179
g16
(lp180
S'k'
asg18
S'Y'
sS'.thisRepN'
p181
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p182
I0
sS'.thisN'
p183
I11
sS'.thisIndex'
p184
I8
sg15
(lp185
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp186
S'space'
p187
asg95
I8
sa(dp188
g16
(lp189
S'k'
asg18
S'Y'
sS'.thisRepN'
p190
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p191
I1
sS'.thisN'
p192
I12
sS'.thisIndex'
p193
I2
sg15
(lp194
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp195
g16
(lp196
S'd'
asg18
S'Y'
sS'.thisRepN'
p197
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p198
I2
sS'.thisN'
p199
I13
sS'.thisIndex'
p200
I5
sg15
(lp201
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp202
S'space'
p203
asg95
I5
sa(dp204
g16
(lp205
S'k'
asg18
S'Y'
sS'.thisRepN'
p206
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p207
I3
sS'.thisN'
p208
I14
sS'.thisIndex'
p209
I3
sg15
(lp210
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp211
S'space'
p212
asg95
I3
sa(dp213
g16
(lp214
S'k'
asg18
S'N'
sS'.thisRepN'
p215
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p216
I4
sS'.thisN'
p217
I15
sS'.thisIndex'
p218
I2
sg15
(lp219
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp220
g16
(lp221
S'd'
asg18
S'Y'
sS'.thisRepN'
p222
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p223
I5
sS'.thisN'
p224
I16
sS'.thisIndex'
p225
I6
sg15
(lp226
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp227
g16
(lp228
S'k'
asg18
S'N'
sS'.thisRepN'
p229
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p230
I6
sS'.thisN'
p231
I17
sS'.thisIndex'
p232
I5
sg15
(lp233
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp234
g16
(lp235
S'd'
asg18
S'N'
sS'.thisRepN'
p236
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p237
I7
sS'.thisN'
p238
I18
sS'.thisIndex'
p239
I6
sg15
(lp240
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp241
g16
(lp242
S'd'
asg18
S'Y'
sS'.thisRepN'
p243
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p244
I8
sS'.thisN'
p245
I19
sS'.thisIndex'
p246
I5
sg15
(lp247
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp248
g16
(lp249
S'd'
asg18
S'Y'
sS'.thisRepN'
p250
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p251
I9
sS'.thisN'
p252
I20
sS'.thisIndex'
p253
I1
sg15
(lp254
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp255
g16
(lp256
S'k'
asg18
S'Y'
sS'.thisRepN'
p257
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p258
I10
sS'.thisN'
p259
I21
sS'.thisIndex'
p260
I5
sg15
(lp261
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp262
g16
(lp263
S'k'
asg18
S'N'
sS'.thisRepN'
p264
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p265
I0
sS'.thisN'
p266
I22
sS'.thisIndex'
p267
I8
sg15
(lp268
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp269
g16
(lp270
S'd'
asg18
S'N'
sS'.thisRepN'
p271
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p272
I1
sS'.thisN'
p273
I23
sS'.thisIndex'
p274
I5
sg15
(lp275
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp276
g16
(lp277
S'k'
asg18
S'N'
sS'.thisRepN'
p278
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p279
I2
sS'.thisN'
p280
I24
sS'.thisIndex'
p281
I3
sg15
(lp282
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp283
g16
(lp284
S'd'
asg18
S'N'
sS'.thisRepN'
p285
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p286
I3
sS'.thisN'
p287
I25
sS'.thisIndex'
p288
I6
sg15
(lp289
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp290
g16
(lp291
S'd'
asg18
S'N'
sS'.thisRepN'
p292
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p293
I4
sS'.thisN'
p294
I26
sS'.thisIndex'
p295
I4
sg15
(lp296
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp297
g16
(lp298
S'k'
asg18
S'Y'
sS'.thisRepN'
p299
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p300
I5
sS'.thisN'
p301
I27
sS'.thisIndex'
p302
I3
sg15
(lp303
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp304
S'space'
p305
asg95
I3
sa(dp306
g16
(lp307
S'k'
asg18
S'N'
sS'.thisRepN'
p308
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p309
I6
sS'.thisN'
p310
I28
sS'.thisIndex'
p311
I2
sg15
(lp312
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp313
g16
(lp314
S'k'
asg18
S'N'
sS'.thisRepN'
p315
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p316
I7
sS'.thisN'
p317
I29
sS'.thisIndex'
p318
I10
sg15
(lp319
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp320
g16
(lp321
S'k'
asg18
S'Y'
sS'.thisRepN'
p322
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p323
I8
sS'.thisN'
p324
I30
sS'.thisIndex'
p325
I3
sg15
(lp326
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp327
S'space'
p328
asg95
I3
sa(dp329
g16
(lp330
S'd'
asg18
S'Y'
sS'.thisRepN'
p331
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p332
I9
sS'.thisN'
p333
I31
sS'.thisIndex'
p334
I5
sg15
(lp335
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp336
g16
(lp337
S'k'
asg18
S'Y'
sS'.thisRepN'
p338
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p339
I10
sS'.thisN'
p340
I32
sS'.thisIndex'
p341
I0
sg15
(lp342
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp343
S'space'
p344
asg95
I0
sa(dp345
g16
(lp346
S'd'
asg18
S'Y'
sS'.thisRepN'
p347
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p348
I0
sS'.thisN'
p349
I33
sS'.thisIndex'
p350
I2
sg15
(lp351
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp352
g16
(lp353
S'k'
asg18
S'N'
sS'.thisRepN'
p354
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p355
I1
sS'.thisN'
p356
I34
sS'.thisIndex'
p357
I2
sg15
(lp358
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp359
g16
(lp360
S'd'
asg18
S'Y'
sS'.thisRepN'
p361
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p362
I2
sS'.thisN'
p363
I35
sS'.thisIndex'
p364
I4
sg15
(lp365
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp366
S'space'
p367
asg95
I4
sa(dp368
g16
(lp369
S'k'
asg18
S'Y'
sS'.thisRepN'
p370
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p371
I3
sS'.thisN'
p372
I36
sS'.thisIndex'
p373
I5
sg15
(lp374
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp375
S'space'
p376
asg95
I5
sa(dp377
g16
(lp378
S'k'
asg18
S'N'
sS'.thisRepN'
p379
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p380
I4
sS'.thisN'
p381
I37
sS'.thisIndex'
p382
I6
sg15
(lp383
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp384
g16
(lp385
S'd'
asg18
S'Y'
sS'.thisRepN'
p386
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p387
I5
sS'.thisN'
p388
I38
sS'.thisIndex'
p389
I5
sg15
(lp390
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp391
g16
(lp392
S'k'
asg18
S'N'
sS'.thisRepN'
p393
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p394
I6
sS'.thisN'
p395
I39
sS'.thisIndex'
p396
I5
sg15
(lp397
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp398
g16
(lp399
S'd'
asg18
S'N'
sS'.thisRepN'
p400
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p401
I7
sS'.thisN'
p402
I40
sS'.thisIndex'
p403
I9
sg15
(lp404
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp405
g16
(lp406
S'k'
asg18
S'Y'
sS'.thisRepN'
p407
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p408
I8
sS'.thisN'
p409
I41
sS'.thisIndex'
p410
I1
sg15
(lp411
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp412
S'space'
p413
asg95
I1
sa(dp414
g16
(lp415
S'd'
asg18
S'N'
sS'.thisRepN'
p416
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p417
I9
sS'.thisN'
p418
I42
sS'.thisIndex'
p419
I2
sg15
(lp420
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp421
g16
(lp422
S'd'
asg18
S'N'
sS'.thisRepN'
p423
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p424
I10
sS'.thisN'
p425
I43
sS'.thisIndex'
p426
I4
sg15
(lp427
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp428
g16
(lp429
S'd'
asg18
S'Y'
sS'.thisRepN'
p430
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p431
I0
sS'.thisN'
p432
I44
sS'.thisIndex'
p433
I6
sg15
(lp434
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp435
g16
(lp436
S'd'
asg18
S'N'
sS'.thisRepN'
p437
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p438
I1
sS'.thisN'
p439
I45
sS'.thisIndex'
p440
I7
sg15
(lp441
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp442
g16
(lp443
S'd'
asg18
S'N'
sS'.thisRepN'
p444
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p445
I2
sS'.thisN'
p446
I46
sS'.thisIndex'
p447
I7
sg15
(lp448
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp449
g16
(lp450
S'd'
asg18
S'Y'
sS'.thisRepN'
p451
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p452
I3
sS'.thisN'
p453
I47
sS'.thisIndex'
p454
I6
sg15
(lp455
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp456
S'space'
p457
asg95
I6
sa(dp458
g16
(lp459
S'k'
asg18
S'Y'
sS'.thisRepN'
p460
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p461
I4
sS'.thisN'
p462
I48
sS'.thisIndex'
p463
I4
sg15
(lp464
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp465
S'space'
p466
asg95
I4
sa(dp467
g16
(lp468
S'k'
asg18
S'Y'
sg22
I36
sS'.thisN'
p469
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p470
I5
sS'.thisRepN'
p471
I4
sg21
I22
sS'.thisIndex'
p472
I5
sg23
I24
sg15
(lp473
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp474
S'space'
p475
asg95
I5
sa(dp476
g16
(lp477
S'd'
asg95
I10
sS'.thisRepN'
p478
I4
sg30
Vm
sg31
g32
sS'.thisTrialN'
p479
I6
sS'.thisN'
p480
I50
sS'.thisIndex'
p481
I10
sg15
(lp482
S'k'
asg17
S'N'
sg14
I2
sa(dp483
g16
(lp484
S'd'
asg95
I0
sS'.thisRepN'
p485
I4
sg30
Vm
sg31
g32
sS'.thisTrialN'
p486
I7
sS'.thisN'
p487
I51
sS'.thisIndex'
p488
I0
sg15
(lp489
S'k'
asg17
S'N'
sg14
I2
sa(dp490
g16
(lp491
S'k'
asg18
S'N'
sS'.thisRepN'
p492
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p493
I8
sS'.thisN'
p494
I52
sS'.thisIndex'
p495
I9
sg15
(lp496
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp497
g16
(lp498
S'd'
asg18
S'Y'
sS'.thisRepN'
p499
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p500
I9
sS'.thisN'
p501
I53
sS'.thisIndex'
p502
I9
sg15
(lp503
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp504
S'space'
p505
asg95
I9
sa(dp506
g16
(lp507
S'k'
asg18
S'Y'
sS'.thisRepN'
p508
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p509
I10
sS'.thisN'
p510
I54
sS'.thisIndex'
p511
I0
sg15
(lp512
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp513
S'space'
p514
asg95
I0
sa(dp515
g16
(lp516
S'k'
asg18
S'N'
sS'.thisRepN'
p517
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p518
I0
sS'.thisN'
p519
I55
sS'.thisIndex'
p520
I10
sg15
(lp521
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp522
S'space'
p523
asg95
I10
sa(dp524
g16
(lp525
S'k'
asg18
S'N'
sS'.thisRepN'
p526
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p527
I1
sS'.thisN'
p528
I56
sS'.thisIndex'
p529
I10
sg15
(lp530
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I10
sa(dp531
g16
(lp532
S'd'
asg18
S'Y'
sS'.thisRepN'
p533
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p534
I2
sS'.thisN'
p535
I57
sS'.thisIndex'
p536
I10
sg15
(lp537
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I10
sa(dp538
g16
(lp539
S'd'
asg18
S'N'
sS'.thisRepN'
p540
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p541
I3
sS'.thisN'
p542
I58
sS'.thisIndex'
p543
I9
sg15
(lp544
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp545
g16
(lp546
S'k'
asg18
S'Y'
sS'.thisRepN'
p547
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p548
I4
sS'.thisN'
p549
I59
sS'.thisIndex'
p550
I2
sg15
(lp551
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I2
sa(dp552
g16
(lp553
S'k'
asg18
S'Y'
sS'.thisRepN'
p554
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p555
I5
sS'.thisN'
p556
I60
sS'.thisIndex'
p557
I9
sg15
(lp558
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp559
S'space'
p560
asg95
I9
sa(dp561
g16
(lp562
S'k'
asg18
S'Y'
sS'.thisRepN'
p563
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p564
I6
sS'.thisN'
p565
I61
sS'.thisIndex'
p566
I4
sg15
(lp567
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp568
g16
(lp569
S'k'
asg18
S'N'
sS'.thisRepN'
p570
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p571
I7
sS'.thisN'
p572
I62
sS'.thisIndex'
p573
I10
sg15
(lp574
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp575
g16
(lp576
S'd'
asg18
S'Y'
sS'.thisRepN'
p577
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p578
I8
sS'.thisN'
p579
I63
sS'.thisIndex'
p580
I10
sg15
(lp581
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp582
S'space'
p583
asg95
I10
sa(dp584
g16
(lp585
S'd'
asg18
S'N'
sS'.thisRepN'
p586
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p587
I9
sS'.thisN'
p588
I64
sS'.thisIndex'
p589
I6
sg15
(lp590
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp591
g16
(lp592
S'd'
asg18
S'N'
sS'.thisRepN'
p593
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p594
I10
sS'.thisN'
p595
I65
sS'.thisIndex'
p596
I1
sg15
(lp597
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp598
S'space'
p599
asg95
I1
sa(dp600
g16
(lp601
S'k'
asg18
S'N'
sS'.thisRepN'
p602
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p603
I0
sS'.thisN'
p604
I66
sS'.thisIndex'
p605
I1
sg15
(lp606
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp607
g16
(lp608
S'k'
asg18
S'Y'
sS'.thisRepN'
p609
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p610
I1
sS'.thisN'
p611
I67
sS'.thisIndex'
p612
I7
sg15
(lp613
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp614
S'space'
p615
asg95
I7
sa(dp616
g16
(lp617
S'd'
asg18
S'N'
sS'.thisRepN'
p618
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p619
I2
sS'.thisN'
p620
I68
sS'.thisIndex'
p621
I7
sg15
(lp622
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp623
g16
(lp624
S'd'
asg18
S'N'
sS'.thisRepN'
p625
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p626
I3
sS'.thisN'
p627
I69
sS'.thisIndex'
p628
I9
sg15
(lp629
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp630
g16
(lp631
S'd'
asg18
S'Y'
sS'.thisRepN'
p632
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p633
I4
sS'.thisN'
p634
I70
sS'.thisIndex'
p635
I0
sg15
(lp636
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp637
g16
(lp638
S'd'
asg18
S'N'
sS'.thisRepN'
p639
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p640
I5
sS'.thisN'
p641
I71
sS'.thisIndex'
p642
I2
sg15
(lp643
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp644
g16
(lp645
S'k'
asg18
S'N'
sS'.thisRepN'
p646
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p647
I6
sS'.thisN'
p648
I72
sS'.thisIndex'
p649
I7
sg15
(lp650
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I7
sa(dp651
g16
(lp652
S'k'
asg18
S'N'
sS'.thisRepN'
p653
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p654
I7
sS'.thisN'
p655
I73
sS'.thisIndex'
p656
I4
sg15
(lp657
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp658
g16
(lp659
S'k'
asg18
S'Y'
sS'.thisRepN'
p660
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p661
I8
sS'.thisN'
p662
I74
sS'.thisIndex'
p663
I7
sg15
(lp664
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp665
S'space'
p666
asg95
I7
sa(dp667
g16
(lp668
S'k'
asg18
S'Y'
sS'.thisRepN'
p669
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p670
I9
sS'.thisN'
p671
I75
sS'.thisIndex'
p672
I1
sg15
(lp673
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp674
S'space'
p675
asg95
I1
sa(dp676
g16
(lp677
S'd'
asg18
S'Y'
sS'.thisRepN'
p678
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p679
I10
sS'.thisN'
p680
I76
sS'.thisIndex'
p681
I2
sg15
(lp682
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp683
S'space'
p684
asg95
I2
sa(dp685
g16
(lp686
S'k'
asg18
S'N'
sS'.thisRepN'
p687
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p688
I0
sS'.thisN'
p689
I77
sS'.thisIndex'
p690
I6
sg15
(lp691
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp692
g16
(lp693
S'k'
asg18
S'N'
sS'.thisRepN'
p694
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p695
I1
sS'.thisN'
p696
I78
sS'.thisIndex'
p697
I3
sg15
(lp698
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp699
g16
(lp700
S'k'
asg18
S'Y'
sS'.thisRepN'
p701
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p702
I2
sS'.thisN'
p703
I79
sS'.thisIndex'
p704
I0
sg15
(lp705
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp706
S'space'
p707
asg95
I0
sa(dp708
g16
(lp709
S'd'
asg18
S'Y'
sS'.thisRepN'
p710
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p711
I3
sS'.thisN'
p712
I80
sS'.thisIndex'
p713
I2
sg15
(lp714
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp715
S'space'
p716
asg95
I2
sa(dp717
g16
(lp718
S'k'
asg18
S'N'
sS'.thisRepN'
p719
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p720
I4
sS'.thisN'
p721
I81
sS'.thisIndex'
p722
I8
sg15
(lp723
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I8
sa(dp724
g16
(lp725
S'd'
asg18
S'N'
sS'.thisRepN'
p726
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p727
I5
sS'.thisN'
p728
I82
sS'.thisIndex'
p729
I10
sg15
(lp730
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp731
g16
(lp732
S'k'
asg18
S'N'
sS'.thisRepN'
p733
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p734
I6
sS'.thisN'
p735
I83
sS'.thisIndex'
p736
I4
sg15
(lp737
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp738
g16
(lp739
S'k'
asg18
S'Y'
sS'.thisRepN'
p740
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p741
I7
sS'.thisN'
p742
I84
sS'.thisIndex'
p743
I3
sg15
(lp744
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp745
S'space'
p746
asg95
I3
sa(dp747
g16
(lp748
S'd'
asg18
S'Y'
sS'.thisRepN'
p749
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p750
I8
sS'.thisN'
p751
I85
sS'.thisIndex'
p752
I5
sg15
(lp753
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp754
S'space'
p755
asg95
I5
sa(dp756
g16
(lp757
S'k'
asg18
S'N'
sS'.thisRepN'
p758
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p759
I9
sS'.thisN'
p760
I86
sS'.thisIndex'
p761
I9
sg15
(lp762
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp763
g16
(lp764
S'k'
asg18
S'N'
sS'.thisRepN'
p765
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p766
I10
sS'.thisN'
p767
I87
sS'.thisIndex'
p768
I7
sg15
(lp769
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I7
sa(dp770
g16
(lp771
S'k'
asg18
S'N'
sS'.thisRepN'
p772
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p773
I0
sS'.thisN'
p774
I88
sS'.thisIndex'
p775
I5
sg15
(lp776
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp777
g16
(lp778
S'k'
asg18
S'N'
sS'.thisRepN'
p779
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p780
I1
sS'.thisN'
p781
I89
sS'.thisIndex'
p782
I8
sg15
(lp783
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp784
g16
(lp785
S'd'
asg18
S'N'
sS'.thisRepN'
p786
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p787
I2
sS'.thisN'
p788
I90
sS'.thisIndex'
p789
I4
sg15
(lp790
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp791
g16
(lp792
S'd'
asg18
S'Y'
sS'.thisRepN'
p793
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p794
I3
sS'.thisN'
p795
I91
sS'.thisIndex'
p796
I4
sg15
(lp797
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp798
g16
(lp799
S'd'
asg18
S'N'
sS'.thisRepN'
p800
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p801
I4
sS'.thisN'
p802
I92
sS'.thisIndex'
p803
I1
sg15
(lp804
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp805
g16
(lp806
S'k'
asg18
S'Y'
sS'.thisRepN'
p807
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p808
I5
sS'.thisN'
p809
I93
sS'.thisIndex'
p810
I6
sg15
(lp811
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp812
g16
(lp813
S'd'
asg18
S'Y'
sS'.thisRepN'
p814
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p815
I6
sS'.thisN'
p816
I94
sS'.thisIndex'
p817
I10
sg15
(lp818
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp819
g16
(lp820
S'k'
asg18
S'Y'
sS'.thisRepN'
p821
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p822
I7
sS'.thisN'
p823
I95
sS'.thisIndex'
p824
I10
sg15
(lp825
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp826
S'space'
p827
asg95
I10
sa(dp828
g16
(lp829
S'd'
asg18
S'N'
sS'.thisRepN'
p830
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p831
I8
sS'.thisN'
p832
I96
sS'.thisIndex'
p833
I3
sg15
(lp834
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp835
g16
(lp836
S'k'
asg18
S'Y'
sS'.thisRepN'
p837
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p838
I9
sS'.thisN'
p839
I97
sS'.thisIndex'
p840
I1
sg15
(lp841
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp842
g16
(lp843
S'd'
asg18
S'Y'
sS'.thisRepN'
p844
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p845
I10
sS'.thisN'
p846
I98
sS'.thisIndex'
p847
I9
sg15
(lp848
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp849
S'space'
p850
asg95
I9
sa(dp851
g16
(lp852
S'd'
asg18
S'N'
sg22
I38
sS'.thisN'
p853
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p854
I0
sS'.thisRepN'
p855
I9
sg21
I25
sS'.thisIndex'
p856
I9
sg23
I22
sg15
(lp857
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp858
g16
(lp859
S'd'
asg95
I1
sS'.thisRepN'
p860
I9
sg30
Vm
sg31
g32
sS'.thisTrialN'
p861
I1
sS'.thisN'
p862
I100
sS'.thisIndex'
p863
I1
sg15
(lp864
S'k'
asg17
S'N'
sg14
I3
sa(dp865
g16
(lp866
S'd'
asg95
I0
sS'.thisRepN'
p867
I9
sg30
Vm
sg31
g32
sS'.thisTrialN'
p868
I2
sS'.thisN'
p869
I101
sS'.thisIndex'
p870
I0
sg15
(lp871
S'd'
asg17
S'Y'
sg14
I3
sa(dp872
g16
(lp873
S'k'
asg18
S'Y'
sS'.thisRepN'
p874
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p875
I3
sS'.thisN'
p876
I102
sS'.thisIndex'
p877
I10
sg15
(lp878
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp879
S'space'
p880
asg95
I10
sa(dp881
g16
(lp882
S'k'
asg18
S'Y'
sS'.thisRepN'
p883
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p884
I4
sS'.thisN'
p885
I103
sS'.thisIndex'
p886
I5
sg15
(lp887
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp888
S'space'
p889
asg95
I5
sa(dp890
g16
(lp891
S'd'
asg18
S'N'
sS'.thisRepN'
p892
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p893
I5
sS'.thisN'
p894
I104
sS'.thisIndex'
p895
I4
sg15
(lp896
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp897
g16
(lp898
S'd'
asg18
S'Y'
sS'.thisRepN'
p899
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p900
I6
sS'.thisN'
p901
I105
sS'.thisIndex'
p902
I4
sg15
(lp903
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp904
S'space'
p905
asg95
I4
sa(dp906
g16
(lp907
S'k'
asg18
S'N'
sS'.thisRepN'
p908
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p909
I7
sS'.thisN'
p910
I106
sS'.thisIndex'
p911
I1
sg15
(lp912
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp913
g16
(lp914
S'k'
asg18
S'Y'
sS'.thisRepN'
p915
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p916
I8
sS'.thisN'
p917
I107
sS'.thisIndex'
p918
I3
sg15
(lp919
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp920
S'space'
p921
asg95
I3
sa(dp922
g16
(lp923
S'd'
asg18
S'Y'
sS'.thisRepN'
p924
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p925
I9
sS'.thisN'
p926
I108
sS'.thisIndex'
p927
I8
sg15
(lp928
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp929
S'space'
p930
asg95
I8
sa(dp931
g16
(lp932
S'd'
asg18
S'Y'
sS'.thisRepN'
p933
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p934
I10
sS'.thisN'
p935
I109
sS'.thisIndex'
p936
I0
sg15
(lp937
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp938
S'space'
p939
asg95
I0
sa(dp940
g16
(lp941
S'k'
asg18
S'N'
sS'.thisRepN'
p942
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p943
I0
sS'.thisN'
p944
I110
sS'.thisIndex'
p945
I4
sg15
(lp946
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp947
g16
(lp948
S'k'
asg18
S'N'
sS'.thisRepN'
p949
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p950
I1
sS'.thisN'
p951
I111
sS'.thisIndex'
p952
I1
sg15
(lp953
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp954
g16
(lp955
S'd'
asg18
S'N'
sS'.thisRepN'
p956
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p957
I2
sS'.thisN'
p958
I112
sS'.thisIndex'
p959
I8
sg15
(lp960
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I8
sa(dp961
g16
(lp962
S'k'
asg18
S'N'
sS'.thisRepN'
p963
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p964
I3
sS'.thisN'
p965
I113
sS'.thisIndex'
p966
I0
sg15
(lp967
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp968
g16
(lp969
S'k'
asg18
S'N'
sS'.thisRepN'
p970
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p971
I4
sS'.thisN'
p972
I114
sS'.thisIndex'
p973
I0
sg15
(lp974
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp975
g16
(lp976
S'k'
asg18
S'N'
sS'.thisRepN'
p977
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p978
I5
sS'.thisN'
p979
I115
sS'.thisIndex'
p980
I9
sg15
(lp981
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp982
g16
(lp983
S'd'
asg18
S'N'
sS'.thisRepN'
p984
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p985
I6
sS'.thisN'
p986
I116
sS'.thisIndex'
p987
I10
sg15
(lp988
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp989
g16
(lp990
S'k'
asg18
S'N'
sS'.thisRepN'
p991
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p992
I7
sS'.thisN'
p993
I117
sS'.thisIndex'
p994
I7
sg15
(lp995
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp996
g16
(lp997
S'd'
asg18
S'N'
sS'.thisRepN'
p998
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p999
I8
sS'.thisN'
p1000
I118
sS'.thisIndex'
p1001
I4
sg15
(lp1002
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp1003
g16
(lp1004
S'k'
asg18
S'N'
sS'.thisRepN'
p1005
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1006
I9
sS'.thisN'
p1007
I119
sS'.thisIndex'
p1008
I2
sg15
(lp1009
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I2
sa(dp1010
g16
(lp1011
S'k'
asg18
S'N'
sS'.thisRepN'
p1012
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1013
I10
sS'.thisN'
p1014
I120
sS'.thisIndex'
p1015
I8
sg15
(lp1016
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1017
g16
(lp1018
S'd'
asg18
S'N'
sS'.thisRepN'
p1019
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1020
I0
sS'.thisN'
p1021
I121
sS'.thisIndex'
p1022
I10
sg15
(lp1023
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1024
g16
(lp1025
S'k'
asg18
S'N'
sS'.thisRepN'
p1026
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1027
I1
sS'.thisN'
p1028
I122
sS'.thisIndex'
p1029
I2
sg15
(lp1030
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1031
S'k'
asg95
I2
sa(dp1032
g16
(lp1033
S'k'
asg18
S'N'
sS'.thisRepN'
p1034
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1035
I2
sS'.thisN'
p1036
I123
sS'.thisIndex'
p1037
I5
sg15
(lp1038
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1039
g16
(lp1040
S'k'
asg18
S'N'
sS'.thisRepN'
p1041
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1042
I3
sS'.thisN'
p1043
I124
sS'.thisIndex'
p1044
I9
sg15
(lp1045
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp1046
g16
(lp1047
S'd'
asg18
S'Y'
sS'.thisRepN'
p1048
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1049
I4
sS'.thisN'
p1050
I125
sS'.thisIndex'
p1051
I0
sg15
(lp1052
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1053
S'space'
p1054
asg95
I0
sa(dp1055
g16
(lp1056
S'd'
asg18
S'N'
sS'.thisRepN'
p1057
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1058
I5
sS'.thisN'
p1059
I126
sS'.thisIndex'
p1060
I8
sg15
(lp1061
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1062
g16
(lp1063
S'k'
asg18
S'Y'
sS'.thisRepN'
p1064
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1065
I6
sS'.thisN'
p1066
I127
sS'.thisIndex'
p1067
I2
sg15
(lp1068
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1069
S'd'
asg95
I2
sa(dp1070
g16
(lp1071
S'k'
asg18
S'N'
sS'.thisRepN'
p1072
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1073
I7
sS'.thisN'
p1074
I128
sS'.thisIndex'
p1075
I0
sg15
(lp1076
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1077
S'space'
p1078
asg95
I0
sa(dp1079
g16
(lp1080
S'd'
asg18
S'Y'
sS'.thisRepN'
p1081
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1082
I8
sS'.thisN'
p1083
I129
sS'.thisIndex'
p1084
I0
sg15
(lp1085
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp1086
S'space'
p1087
asg95
I0
sa(dp1088
g16
(lp1089
S'd'
asg18
S'N'
sS'.thisRepN'
p1090
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1091
I9
sS'.thisN'
p1092
I130
sS'.thisIndex'
p1093
I7
sg15
(lp1094
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp1095
g16
(lp1096
S'd'
asg18
S'N'
sS'.thisRepN'
p1097
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1098
I10
sS'.thisN'
p1099
I131
sS'.thisIndex'
p1100
I10
sg15
(lp1101
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1102
g16
(lp1103
S'd'
asg18
S'N'
sS'.thisRepN'
p1104
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1105
I0
sS'.thisN'
p1106
I132
sS'.thisIndex'
p1107
I4
sg15
(lp1108
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1109
g16
(lp1110
S'd'
asg18
S'N'
sS'.thisRepN'
p1111
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1112
I1
sS'.thisN'
p1113
I133
sS'.thisIndex'
p1114
I10
sg15
(lp1115
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I10
sa(dp1116
g16
(lp1117
S'k'
asg18
S'Y'
sS'.thisRepN'
p1118
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1119
I2
sS'.thisN'
p1120
I134
sS'.thisIndex'
p1121
I1
sg15
(lp1122
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp1123
S'space'
p1124
asg95
I1
sa(dp1125
g16
(lp1126
S'k'
asg18
S'N'
sS'.thisRepN'
p1127
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1128
I3
sS'.thisN'
p1129
I135
sS'.thisIndex'
p1130
I8
sg15
(lp1131
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1132
g16
(lp1133
S'd'
asg18
S'Y'
sS'.thisRepN'
p1134
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1135
I4
sS'.thisN'
p1136
I136
sS'.thisIndex'
p1137
I6
sg15
(lp1138
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp1139
S'space'
p1140
asg95
I6
sa(dp1141
g16
(lp1142
S'k'
asg18
S'Y'
sS'.thisRepN'
p1143
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1144
I5
sS'.thisN'
p1145
I137
sS'.thisIndex'
p1146
I9
sg15
(lp1147
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1148
S'space'
p1149
asg95
I9
sa(dp1150
g16
(lp1151
S'k'
asg18
S'N'
sS'.thisRepN'
p1152
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1153
I6
sS'.thisN'
p1154
I138
sS'.thisIndex'
p1155
I10
sg15
(lp1156
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1157
g16
(lp1158
S'd'
asg18
S'Y'
sS'.thisRepN'
p1159
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1160
I7
sS'.thisN'
p1161
I139
sS'.thisIndex'
p1162
I1
sg15
(lp1163
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1164
S'space'
p1165
asg95
I1
sa(dp1166
g16
(lp1167
S'd'
asg18
S'Y'
sS'.thisRepN'
p1168
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1169
I8
sS'.thisN'
p1170
I140
sS'.thisIndex'
p1171
I8
sg15
(lp1172
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp1173
S'space'
p1174
asg95
I8
sa(dp1175
g16
(lp1176
S'k'
asg18
S'Y'
sS'.thisRepN'
p1177
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1178
I9
sS'.thisN'
p1179
I141
sS'.thisIndex'
p1180
I3
sg15
(lp1181
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1182
S'space'
p1183
asg95
I3
sa(dp1184
g16
(lp1185
S'k'
asg18
S'Y'
sS'.thisRepN'
p1186
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1187
I10
sS'.thisN'
p1188
I142
sS'.thisIndex'
p1189
I6
sg15
(lp1190
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1191
S'space'
p1192
asg95
I6
sa(dp1193
g16
(lp1194
S'k'
asg18
S'N'
sS'.thisRepN'
p1195
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1196
I0
sS'.thisN'
p1197
I143
sS'.thisIndex'
p1198
I1
sg15
(lp1199
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp1200
g16
(lp1201
S'k'
asg18
S'N'
sS'.thisRepN'
p1202
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1203
I1
sS'.thisN'
p1204
I144
sS'.thisIndex'
p1205
I2
sg15
(lp1206
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1207
g16
(lp1208
S'd'
asg18
S'Y'
sS'.thisRepN'
p1209
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1210
I2
sS'.thisN'
p1211
I145
sS'.thisIndex'
p1212
I2
sg15
(lp1213
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1214
S'space'
p1215
asg95
I2
sa(dp1216
g16
(lp1217
S'k'
asg18
S'N'
sS'.thisRepN'
p1218
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1219
I3
sS'.thisN'
p1220
I146
sS'.thisIndex'
p1221
I8
sg15
(lp1222
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I8
sa(dp1223
g16
(lp1224
S'd'
asg18
S'N'
sS'.thisRepN'
p1225
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1226
I4
sS'.thisN'
p1227
I147
sS'.thisIndex'
p1228
I4
sg15
(lp1229
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp1230
g16
(lp1231
S'k'
asg18
S'N'
sS'.thisRepN'
p1232
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1233
I5
sS'.thisN'
p1234
I148
sS'.thisIndex'
p1235
I6
sg15
(lp1236
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp1237
g16
(lp1238
S'k'
asg18
S'Y'
sg22
I44
sS'.thisN'
p1239
I149
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1240
I6
sS'.thisRepN'
p1241
I13
sg21
I29
sS'.thisIndex'
p1242
I7
sg23
I18
sg15
(lp1243
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1244
g16
(lp1245
S'd'
asg95
I0
sS'.thisRepN'
p1246
I13
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1247
I7
sS'.thisN'
p1248
I150
sS'.thisIndex'
p1249
I0
sg15
(lp1250
S'k'
asg17
S'N'
sg14
I4
sa(dp1251
g16
(lp1252
S'k'
asg95
I2
sS'.thisRepN'
p1253
I13
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1254
I8
sS'.thisN'
p1255
I151
sS'.thisIndex'
p1256
I2
sg15
(lp1257
S'd'
asg17
S'N'
sg14
I4
sa(dp1258
g16
(lp1259
S'k'
asg18
S'N'
sS'.thisRepN'
p1260
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1261
I9
sS'.thisN'
p1262
I152
sS'.thisIndex'
p1263
I6
sg15
(lp1264
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I6
sa(dp1265
g16
(lp1266
S'k'
asg18
S'Y'
sS'.thisRepN'
p1267
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1268
I10
sS'.thisN'
p1269
I153
sS'.thisIndex'
p1270
I1
sg15
(lp1271
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1272
S'space'
p1273
asg95
I1
sa(dp1274
g16
(lp1275
S'd'
asg18
S'N'
sS'.thisRepN'
p1276
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1277
I0
sS'.thisN'
p1278
I154
sS'.thisIndex'
p1279
I5
sg15
(lp1280
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I5
sa(dp1281
g16
(lp1282
S'k'
asg18
S'N'
sS'.thisRepN'
p1283
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1284
I1
sS'.thisN'
p1285
I155
sS'.thisIndex'
p1286
I1
sg15
(lp1287
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1288
g16
(lp1289
S'k'
asg18
S'N'
sS'.thisRepN'
p1290
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1291
I2
sS'.thisN'
p1292
I156
sS'.thisIndex'
p1293
I2
sg15
(lp1294
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1295
g16
(lp1296
S'k'
asg18
S'N'
sS'.thisRepN'
p1297
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1298
I3
sS'.thisN'
p1299
I157
sS'.thisIndex'
p1300
I9
sg15
(lp1301
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1302
g16
(lp1303
S'd'
asg18
S'N'
sS'.thisRepN'
p1304
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1305
I4
sS'.thisN'
p1306
I158
sS'.thisIndex'
p1307
I7
sg15
(lp1308
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I7
sa(dp1309
g16
(lp1310
S'd'
asg18
S'N'
sS'.thisRepN'
p1311
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1312
I5
sS'.thisN'
p1313
I159
sS'.thisIndex'
p1314
I6
sg15
(lp1315
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1316
g16
(lp1317
S'k'
asg18
S'N'
sS'.thisRepN'
p1318
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1319
I6
sS'.thisN'
p1320
I160
sS'.thisIndex'
p1321
I6
sg15
(lp1322
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1323
g16
(lp1324
S'k'
asg18
S'Y'
sS'.thisRepN'
p1325
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1326
I7
sS'.thisN'
p1327
I161
sS'.thisIndex'
p1328
I0
sg15
(lp1329
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1330
S'space'
p1331
asg95
I0
sa(dp1332
g16
(lp1333
S'd'
asg18
S'N'
sS'.thisRepN'
p1334
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1335
I8
sS'.thisN'
p1336
I162
sS'.thisIndex'
p1337
I6
sg15
(lp1338
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I6
sa(dp1339
g16
(lp1340
S'd'
asg18
S'Y'
sS'.thisRepN'
p1341
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1342
I9
sS'.thisN'
p1343
I163
sS'.thisIndex'
p1344
I6
sg15
(lp1345
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1346
S'space'
p1347
asg95
I6
sa(dp1348
g16
(lp1349
S'd'
asg18
S'Y'
sS'.thisRepN'
p1350
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1351
I10
sS'.thisN'
p1352
I164
sS'.thisIndex'
p1353
I10
sg15
(lp1354
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1355
g16
(lp1356
S'd'
asg18
S'N'
sS'.thisRepN'
p1357
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1358
I0
sS'.thisN'
p1359
I165
sS'.thisIndex'
p1360
I10
sg15
(lp1361
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I10
sa(dp1362
g16
(lp1363
S'k'
asg18
S'N'
sS'.thisRepN'
p1364
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1365
I1
sS'.thisN'
p1366
I166
sS'.thisIndex'
p1367
I5
sg15
(lp1368
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1369
g16
(lp1370
S'k'
asg18
S'Y'
sS'.thisRepN'
p1371
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1372
I2
sS'.thisN'
p1373
I167
sS'.thisIndex'
p1374
I10
sg15
(lp1375
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1376
S'space'
p1377
asg95
I10
sa(dp1378
g16
(lp1379
S'd'
asg18
S'Y'
sS'.thisRepN'
p1380
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1381
I3
sS'.thisN'
p1382
I168
sS'.thisIndex'
p1383
I5
sg15
(lp1384
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1385
S'space'
p1386
asg95
I5
sa(dp1387
g16
(lp1388
S'd'
asg18
S'Y'
sS'.thisRepN'
p1389
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1390
I4
sS'.thisN'
p1391
I169
sS'.thisIndex'
p1392
I8
sg15
(lp1393
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1394
S'space'
p1395
asg95
I8
sa(dp1396
g16
(lp1397
S'd'
asg18
S'N'
sS'.thisRepN'
p1398
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1399
I5
sS'.thisN'
p1400
I170
sS'.thisIndex'
p1401
I0
sg15
(lp1402
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I0
sa(dp1403
g16
(lp1404
S'd'
asg18
S'Y'
sS'.thisRepN'
p1405
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1406
I6
sS'.thisN'
p1407
I171
sS'.thisIndex'
p1408
I6
sg15
(lp1409
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1410
S'space'
p1411
asg95
I6
sa(dp1412
g16
(lp1413
S'd'
asg18
S'Y'
sS'.thisRepN'
p1414
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1415
I7
sS'.thisN'
p1416
I172
sS'.thisIndex'
p1417
I9
sg15
(lp1418
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1419
S'space'
p1420
asg95
I9
sa(dp1421
g16
(lp1422
S'k'
asg18
S'Y'
sS'.thisRepN'
p1423
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1424
I8
sS'.thisN'
p1425
I173
sS'.thisIndex'
p1426
I9
sg15
(lp1427
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1428
S'space'
p1429
asg95
I9
sa(dp1430
g16
(lp1431
S'd'
asg18
S'N'
sS'.thisRepN'
p1432
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1433
I9
sS'.thisN'
p1434
I174
sS'.thisIndex'
p1435
I10
sg15
(lp1436
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1437
S'space'
p1438
asg95
I10
sa(dp1439
g16
(lp1440
S'd'
asg18
S'Y'
sS'.thisRepN'
p1441
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1442
I10
sS'.thisN'
p1443
I175
sS'.thisIndex'
p1444
I5
sg15
(lp1445
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1446
S'space'
p1447
asg95
I5
sa(dp1448
g16
(lp1449
S'k'
asg18
S'N'
sS'.thisRepN'
p1450
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1451
I0
sS'.thisN'
p1452
I176
sS'.thisIndex'
p1453
I7
sg15
(lp1454
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1455
g16
(lp1456
S'd'
asg18
S'N'
sS'.thisRepN'
p1457
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1458
I1
sS'.thisN'
p1459
I177
sS'.thisIndex'
p1460
I9
sg15
(lp1461
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1462
g16
(lp1463
S'd'
asg18
S'Y'
sS'.thisRepN'
p1464
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1465
I2
sS'.thisN'
p1466
I178
sS'.thisIndex'
p1467
I7
sg15
(lp1468
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1469
S'space'
p1470
asg95
I7
sa(dp1471
g16
(lp1472
S'k'
asg18
S'N'
sS'.thisRepN'
p1473
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1474
I3
sS'.thisN'
p1475
I179
sS'.thisIndex'
p1476
I8
sg15
(lp1477
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1478
g16
(lp1479
S'k'
asg18
S'Y'
sS'.thisRepN'
p1480
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1481
I4
sS'.thisN'
p1482
I180
sS'.thisIndex'
p1483
I2
sg15
(lp1484
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1485
g16
(lp1486
S'd'
asg18
S'Y'
sS'.thisRepN'
p1487
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1488
I5
sS'.thisN'
p1489
I181
sS'.thisIndex'
p1490
I3
sg15
(lp1491
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I3
sa(dp1492
g16
(lp1493
S'd'
asg18
S'Y'
sS'.thisRepN'
p1494
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1495
I6
sS'.thisN'
p1496
I182
sS'.thisIndex'
p1497
I1
sg15
(lp1498
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1499
S'space'
p1500
asg95
I1
sa(dp1501
g16
(lp1502
S'd'
asg18
S'Y'
sS'.thisRepN'
p1503
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1504
I7
sS'.thisN'
p1505
I183
sS'.thisIndex'
p1506
I10
sg15
(lp1507
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1508
S'space'
p1509
asg95
I10
sa(dp1510
g16
(lp1511
S'k'
asg18
S'N'
sS'.thisRepN'
p1512
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1513
I8
sS'.thisN'
p1514
I184
sS'.thisIndex'
p1515
I8
sg15
(lp1516
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1517
g16
(lp1518
S'k'
asg18
S'N'
sS'.thisRepN'
p1519
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1520
I9
sS'.thisN'
p1521
I185
sS'.thisIndex'
p1522
I2
sg15
(lp1523
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1524
g16
(lp1525
S'k'
asg18
S'N'
sS'.thisRepN'
p1526
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1527
I10
sS'.thisN'
p1528
I186
sS'.thisIndex'
p1529
I6
sg15
(lp1530
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1531
g16
(lp1532
S'k'
asg18
S'Y'
sS'.thisRepN'
p1533
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1534
I0
sS'.thisN'
p1535
I187
sS'.thisIndex'
p1536
I2
sg15
(lp1537
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1538
S'space'
p1539
asg95
I2
sa(dp1540
g16
(lp1541
S'k'
asg18
S'N'
sS'.thisRepN'
p1542
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1543
I1
sS'.thisN'
p1544
I188
sS'.thisIndex'
p1545
I7
sg15
(lp1546
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1547
g16
(lp1548
S'd'
asg18
S'Y'
sS'.thisRepN'
p1549
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1550
I2
sS'.thisN'
p1551
I189
sS'.thisIndex'
p1552
I8
sg15
(lp1553
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1554
S'space'
p1555
asg95
I8
sa(dp1556
g16
(lp1557
S'k'
asg18
S'Y'
sS'.thisRepN'
p1558
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1559
I3
sS'.thisN'
p1560
I190
sS'.thisIndex'
p1561
I3
sg15
(lp1562
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1563
S'space'
p1564
asg95
I3
sa(dp1565
g16
(lp1566
S'k'
asg18
S'N'
sS'.thisRepN'
p1567
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1568
I4
sS'.thisN'
p1569
I191
sS'.thisIndex'
p1570
I3
sg15
(lp1571
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1572
g16
(lp1573
S'd'
asg18
S'Y'
sS'.thisRepN'
p1574
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1575
I5
sS'.thisN'
p1576
I192
sS'.thisIndex'
p1577
I3
sg15
(lp1578
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1579
S'space'
p1580
asg95
I3
sa(dp1581
g16
(lp1582
S'k'
asg18
S'Y'
sS'.thisRepN'
p1583
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1584
I6
sS'.thisN'
p1585
I193
sS'.thisIndex'
p1586
I5
sg15
(lp1587
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1588
S'space'
p1589
asg95
I5
sa(dp1590
g16
(lp1591
S'd'
asg18
S'N'
sS'.thisRepN'
p1592
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1593
I7
sS'.thisN'
p1594
I194
sS'.thisIndex'
p1595
I3
sg15
(lp1596
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1597
g16
(lp1598
S'd'
asg18
S'N'
sS'.thisRepN'
p1599
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1600
I8
sS'.thisN'
p1601
I195
sS'.thisIndex'
p1602
I10
sg15
(lp1603
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1604
g16
(lp1605
S'k'
asg18
S'Y'
sS'.thisRepN'
p1606
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1607
I9
sS'.thisN'
p1608
I196
sS'.thisIndex'
p1609
I8
sg15
(lp1610
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1611
S'space'
p1612
asg95
I8
sa(dp1613
g16
(lp1614
S'd'
asg18
S'Y'
sS'.thisRepN'
p1615
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1616
I10
sS'.thisN'
p1617
I197
sS'.thisIndex'
p1618
I1
sg15
(lp1619
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1620
S'space'
p1621
asg95
I1
sa(dp1622
g16
(lp1623
S'k'
asg18
S'N'
sS'.thisRepN'
p1624
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1625
I0
sS'.thisN'
p1626
I198
sS'.thisIndex'
p1627
I2
sg15
(lp1628
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1629
g16
(lp1630
S'k'
asg18
S'Y'
sg22
I44
sS'.thisN'
p1631
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1632
I1
sS'.thisRepN'
p1633
I18
sg21
I34
sS'.thisIndex'
p1634
I9
sg23
I24
sg15
(lp1635
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1636
S'space'
p1637
asg95
I9
sa(dp1638
g16
(lp1639
S'k'
asg95
I8
sS'.thisRepN'
p1640
I18
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1641
I2
sS'.thisN'
p1642
I200
sS'.thisIndex'
p1643
I8
sg15
(lp1644
S'k'
asg17
S'Y'
sg14
I5
sa(dp1645
g16
(lp1646
S'k'
asg95
I0
sS'.thisRepN'
p1647
I18
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1648
I3
sS'.thisN'
p1649
I201
sS'.thisIndex'
p1650
I0
sg15
(lp1651
S'd'
asg17
S'N'
sg14
I5
sa(dp1652
g16
(lp1653
S'k'
asg18
S'Y'
sS'.thisRepN'
p1654
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1655
I4
sS'.thisN'
p1656
I202
sS'.thisIndex'
p1657
I4
sg15
(lp1658
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1659
S'space'
p1660
asg95
I4
sa(dp1661
g16
(lp1662
S'k'
asg18
S'N'
sS'.thisRepN'
p1663
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1664
I5
sS'.thisN'
p1665
I203
sS'.thisIndex'
p1666
I9
sg15
(lp1667
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I9
sa(dp1668
g16
(lp1669
S'd'
asg18
S'Y'
sS'.thisRepN'
p1670
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1671
I6
sS'.thisN'
p1672
I204
sS'.thisIndex'
p1673
I5
sg15
(lp1674
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1675
S'space'
p1676
asg95
I5
sa(dp1677
g16
(lp1678
S'd'
asg18
S'Y'
sS'.thisRepN'
p1679
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1680
I7
sS'.thisN'
p1681
I205
sS'.thisIndex'
p1682
I1
sg15
(lp1683
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1684
S'space'
p1685
asg95
I1
sa(dp1686
g16
(lp1687
S'd'
asg18
S'Y'
sS'.thisRepN'
p1688
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1689
I8
sS'.thisN'
p1690
I206
sS'.thisIndex'
p1691
I2
sg15
(lp1692
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1693
S'space'
p1694
asg95
I2
sa(dp1695
g16
(lp1696
S'k'
asg18
S'Y'
sS'.thisRepN'
p1697
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1698
I9
sS'.thisN'
p1699
I207
sS'.thisIndex'
p1700
I10
sg15
(lp1701
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1702
S'space'
p1703
asg95
I10
sa(dp1704
g16
(lp1705
S'k'
asg18
S'N'
sS'.thisRepN'
p1706
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1707
I10
sS'.thisN'
p1708
I208
sS'.thisIndex'
p1709
I7
sg15
(lp1710
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1711
g16
(lp1712
S'k'
asg18
S'N'
sS'.thisRepN'
p1713
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1714
I0
sS'.thisN'
p1715
I209
sS'.thisIndex'
p1716
I0
sg15
(lp1717
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1718
g16
(lp1719
S'k'
asg18
S'Y'
sS'.thisRepN'
p1720
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1721
I1
sS'.thisN'
p1722
I210
sS'.thisIndex'
p1723
I0
sg15
(lp1724
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1725
S'space'
p1726
asg95
I0
sa(dp1727
g16
(lp1728
S'k'
asg18
S'N'
sS'.thisRepN'
p1729
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1730
I2
sS'.thisN'
p1731
I211
sS'.thisIndex'
p1732
I1
sg15
(lp1733
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1734
g16
(lp1735
S'd'
asg18
S'N'
sS'.thisRepN'
p1736
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1737
I3
sS'.thisN'
p1738
I212
sS'.thisIndex'
p1739
I8
sg15
(lp1740
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I8
sa(dp1741
g16
(lp1742
S'k'
asg18
S'Y'
sS'.thisRepN'
p1743
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1744
I4
sS'.thisN'
p1745
I213
sS'.thisIndex'
p1746
I0
sg15
(lp1747
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1748
S'space'
p1749
asg95
I0
sa(dp1750
g16
(lp1751
S'k'
asg18
S'N'
sS'.thisRepN'
p1752
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1753
I5
sS'.thisN'
p1754
I214
sS'.thisIndex'
p1755
I8
sg15
(lp1756
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I8
sa(dp1757
g16
(lp1758
S'k'
asg18
S'Y'
sS'.thisRepN'
p1759
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1760
I6
sS'.thisN'
p1761
I215
sS'.thisIndex'
p1762
I5
sg15
(lp1763
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1764
S'space'
p1765
asg95
I5
sa(dp1766
g16
(lp1767
S'k'
asg18
S'N'
sS'.thisRepN'
p1768
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1769
I7
sS'.thisN'
p1770
I216
sS'.thisIndex'
p1771
I0
sg15
(lp1772
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1773
g16
(lp1774
S'd'
asg18
S'N'
sS'.thisRepN'
p1775
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1776
I8
sS'.thisN'
p1777
I217
sS'.thisIndex'
p1778
I1
sg15
(lp1779
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1780
g16
(lp1781
S'd'
asg18
S'N'
sS'.thisRepN'
p1782
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1783
I9
sS'.thisN'
p1784
I218
sS'.thisIndex'
p1785
I1
sg15
(lp1786
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I1
sa(dp1787
g16
(lp1788
S'd'
asg18
S'Y'
sS'.thisRepN'
p1789
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1790
I10
sS'.thisN'
p1791
I219
sS'.thisIndex'
p1792
I3
sg15
(lp1793
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1794
g16
(lp1795
S'k'
asg18
S'Y'
sS'.thisRepN'
p1796
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1797
I0
sS'.thisN'
p1798
I220
sS'.thisIndex'
p1799
I3
sg15
(lp1800
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1801
S'space'
p1802
asg95
I3
sa(dp1803
g16
(lp1804
S'd'
asg18
S'Y'
sS'.thisRepN'
p1805
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1806
I1
sS'.thisN'
p1807
I221
sS'.thisIndex'
p1808
I10
sg15
(lp1809
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1810
S'space'
p1811
asg95
I10
sa(dp1812
g16
(lp1813
S'd'
asg18
S'Y'
sS'.thisRepN'
p1814
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1815
I2
sS'.thisN'
p1816
I222
sS'.thisIndex'
p1817
I2
sg15
(lp1818
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1819
S'space'
p1820
asg95
I2
sa(dp1821
g16
(lp1822
S'k'
asg18
S'Y'
sS'.thisRepN'
p1823
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1824
I3
sS'.thisN'
p1825
I223
sS'.thisIndex'
p1826
I6
sg15
(lp1827
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1828
S'space'
p1829
asg95
I6
sa(dp1830
g16
(lp1831
S'k'
asg18
S'Y'
sS'.thisRepN'
p1832
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1833
I4
sS'.thisN'
p1834
I224
sS'.thisIndex'
p1835
I8
sg15
(lp1836
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1837
S'space'
p1838
asg95
I8
sa(dp1839
g16
(lp1840
S'k'
asg18
S'N'
sS'.thisRepN'
p1841
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1842
I5
sS'.thisN'
p1843
I225
sS'.thisIndex'
p1844
I8
sg15
(lp1845
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1846
S'space'
p1847
asg95
I8
sa(dp1848
g16
(lp1849
S'k'
asg18
S'N'
sS'.thisRepN'
p1850
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1851
I6
sS'.thisN'
p1852
I226
sS'.thisIndex'
p1853
I1
sg15
(lp1854
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1855
g16
(lp1856
S'k'
asg18
S'N'
sS'.thisRepN'
p1857
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1858
I7
sS'.thisN'
p1859
I227
sS'.thisIndex'
p1860
I1
sg15
(lp1861
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1862
g16
(lp1863
S'k'
asg18
S'Y'
sS'.thisRepN'
p1864
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1865
I8
sS'.thisN'
p1866
I228
sS'.thisIndex'
p1867
I7
sg15
(lp1868
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1869
S'space'
p1870
asg95
I7
sa(dp1871
g16
(lp1872
S'k'
asg18
S'N'
sS'.thisRepN'
p1873
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1874
I9
sS'.thisN'
p1875
I229
sS'.thisIndex'
p1876
I7
sg15
(lp1877
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I7
sa(dp1878
g16
(lp1879
S'd'
asg18
S'Y'
sS'.thisRepN'
p1880
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1881
I10
sS'.thisN'
p1882
I230
sS'.thisIndex'
p1883
I1
sg15
(lp1884
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1885
S'space'
p1886
asg95
I1
sa(dp1887
g16
(lp1888
S'k'
asg18
S'Y'
sS'.thisRepN'
p1889
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1890
I0
sS'.thisN'
p1891
I231
sS'.thisIndex'
p1892
I3
sg15
(lp1893
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1894
S'space'
p1895
asg95
I3
sa(dp1896
g16
(lp1897
S'd'
asg18
S'Y'
sS'.thisRepN'
p1898
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1899
I1
sS'.thisN'
p1900
I232
sS'.thisIndex'
p1901
I2
sg15
(lp1902
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1903
S'space'
p1904
asg95
I2
sa(dp1905
g16
(lp1906
S'd'
asg18
S'Y'
sS'.thisRepN'
p1907
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1908
I2
sS'.thisN'
p1909
I233
sS'.thisIndex'
p1910
I5
sg15
(lp1911
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1912
S'space'
p1913
asg95
I5
sa(dp1914
g16
(lp1915
S'k'
asg18
S'Y'
sS'.thisRepN'
p1916
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1917
I3
sS'.thisN'
p1918
I234
sS'.thisIndex'
p1919
I1
sg15
(lp1920
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1921
S'space'
p1922
asg95
I1
sa(dp1923
g16
(lp1924
S'k'
asg18
S'N'
sS'.thisRepN'
p1925
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1926
I4
sS'.thisN'
p1927
I235
sS'.thisIndex'
p1928
I3
sg15
(lp1929
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I3
sa(dp1930
g16
(lp1931
S'k'
asg18
S'Y'
sS'.thisRepN'
p1932
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1933
I5
sS'.thisN'
p1934
I236
sS'.thisIndex'
p1935
I2
sg15
(lp1936
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1937
S'space'
p1938
asg95
I2
sa(dp1939
g16
(lp1940
S'd'
asg18
S'Y'
sS'.thisRepN'
p1941
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1942
I6
sS'.thisN'
p1943
I237
sS'.thisIndex'
p1944
I3
sg15
(lp1945
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1946
S'space'
p1947
asg95
I3
sa(dp1948
g16
(lp1949
S'k'
asg18
S'N'
sS'.thisRepN'
p1950
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1951
I7
sS'.thisN'
p1952
I238
sS'.thisIndex'
p1953
I1
sg15
(lp1954
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1955
g16
(lp1956
S'k'
asg18
S'Y'
sS'.thisRepN'
p1957
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1958
I8
sS'.thisN'
p1959
I239
sS'.thisIndex'
p1960
I9
sg15
(lp1961
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1962
S'space'
p1963
asg95
I9
sa(dp1964
g16
(lp1965
S'k'
asg18
S'Y'
sS'.thisRepN'
p1966
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1967
I9
sS'.thisN'
p1968
I240
sS'.thisIndex'
p1969
I9
sg15
(lp1970
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1971
S'space'
p1972
asg95
I9
sa(dp1973
g16
(lp1974
S'k'
asg18
S'N'
sS'.thisRepN'
p1975
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1976
I10
sS'.thisN'
p1977
I241
sS'.thisIndex'
p1978
I2
sg15
(lp1979
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1980
g16
(lp1981
S'd'
asg18
S'Y'
sS'.thisRepN'
p1982
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1983
I0
sS'.thisN'
p1984
I242
sS'.thisIndex'
p1985
I6
sg15
(lp1986
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1987
g16
(lp1988
S'd'
asg18
S'N'
sS'.thisRepN'
p1989
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1990
I1
sS'.thisN'
p1991
I243
sS'.thisIndex'
p1992
I4
sg15
(lp1993
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I4
sa(dp1994
g16
(lp1995
S'k'
asg18
S'N'
sS'.thisRepN'
p1996
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1997
I2
sS'.thisN'
p1998
I244
sS'.thisIndex'
p1999
I7
sg15
(lp2000
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I7
sa(dp2001
g16
(lp2002
S'k'
asg18
S'N'
sS'.thisRepN'
p2003
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2004
I3
sS'.thisN'
p2005
I245
sS'.thisIndex'
p2006
I8
sg15
(lp2007
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I8
sa(dp2008
g16
(lp2009
S'd'
asg18
S'N'
sS'.thisRepN'
p2010
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2011
I4
sS'.thisN'
p2012
I246
sS'.thisIndex'
p2013
I10
sg15
(lp2014
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I10
sa(dp2015
g16
(lp2016
S'd'
asg18
S'N'
sS'.thisRepN'
p2017
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2018
I5
sS'.thisN'
p2019
I247
sS'.thisIndex'
p2020
I4
sg15
(lp2021
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I4
sa(dp2022
g16
(lp2023
S'd'
asg18
S'N'
sS'.thisRepN'
p2024
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2025
I6
sS'.thisN'
p2026
I248
sS'.thisIndex'
p2027
I5
sg15
(lp2028
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp2029
g16
(lp2030
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p2031
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2032
I7
sS'.thisRepN'
p2033
I22
sg21
I22
sS'.thisIndex'
p2034
I8
sg23
I25
sg15
(lp2035
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I8
sa(dp2036
g16
(lp2037
S'd'
asg95
I4
sS'.thisRepN'
p2038
I22
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2039
I8
sS'.thisN'
p2040
I250
sS'.thisIndex'
p2041
I4
sg15
(lp2042
S'k'
asg17
S'N'
sg14
I6
sa(dp2043
g16
(lp2044
S'd'
asg95
I9
sS'.thisRepN'
p2045
I22
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2046
I9
sS'.thisN'
p2047
I251
sS'.thisIndex'
p2048
I9
sg15
(lp2049
S'k'
asg17
S'N'
sg14
I6
sa(dp2050
g16
(lp2051
S'k'
asg18
S'Y'
sS'.thisRepN'
p2052
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2053
I10
sS'.thisN'
p2054
I252
sS'.thisIndex'
p2055
I1
sg15
(lp2056
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2057
S'space'
p2058
asg95
I1
sa(dp2059
g16
(lp2060
S'k'
asg18
S'Y'
sS'.thisRepN'
p2061
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2062
I0
sS'.thisN'
p2063
I253
sS'.thisIndex'
p2064
I2
sg15
(lp2065
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2066
S'space'
p2067
asg95
I2
sa(dp2068
g16
(lp2069
S'd'
asg18
S'N'
sS'.thisRepN'
p2070
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2071
I1
sS'.thisN'
p2072
I254
sS'.thisIndex'
p2073
I2
sg15
(lp2074
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2075
g16
(lp2076
S'k'
asg18
S'N'
sS'.thisRepN'
p2077
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2078
I2
sS'.thisN'
p2079
I255
sS'.thisIndex'
p2080
I3
sg15
(lp2081
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2082
g16
(lp2083
S'd'
asg18
S'N'
sS'.thisRepN'
p2084
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2085
I3
sS'.thisN'
p2086
I256
sS'.thisIndex'
p2087
I5
sg15
(lp2088
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2089
S'space'
p2090
asg95
I5
sa(dp2091
g16
(lp2092
S'd'
asg18
S'N'
sS'.thisRepN'
p2093
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2094
I4
sS'.thisN'
p2095
I257
sS'.thisIndex'
p2096
I4
sg15
(lp2097
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2098
g16
(lp2099
S'd'
asg18
S'N'
sS'.thisRepN'
p2100
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2101
I5
sS'.thisN'
p2102
I258
sS'.thisIndex'
p2103
I6
sg15
(lp2104
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2105
g16
(lp2106
S'k'
asg18
S'N'
sS'.thisRepN'
p2107
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2108
I6
sS'.thisN'
p2109
I259
sS'.thisIndex'
p2110
I6
sg15
(lp2111
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I6
sa(dp2112
g16
(lp2113
S'd'
asg18
S'N'
sS'.thisRepN'
p2114
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2115
I7
sS'.thisN'
p2116
I260
sS'.thisIndex'
p2117
I6
sg15
(lp2118
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2119
g16
(lp2120
S'd'
asg18
S'N'
sS'.thisRepN'
p2121
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2122
I8
sS'.thisN'
p2123
I261
sS'.thisIndex'
p2124
I5
sg15
(lp2125
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2126
g16
(lp2127
S'd'
asg18
S'N'
sS'.thisRepN'
p2128
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2129
I9
sS'.thisN'
p2130
I262
sS'.thisIndex'
p2131
I7
sg15
(lp2132
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2133
g16
(lp2134
S'k'
asg18
S'N'
sS'.thisRepN'
p2135
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2136
I10
sS'.thisN'
p2137
I263
sS'.thisIndex'
p2138
I3
sg15
(lp2139
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2140
g16
(lp2141
S'k'
asg18
S'N'
sS'.thisRepN'
p2142
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2143
I0
sS'.thisN'
p2144
I264
sS'.thisIndex'
p2145
I3
sg15
(lp2146
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I3
sa(dp2147
g16
(lp2148
S'd'
asg18
S'Y'
sS'.thisRepN'
p2149
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2150
I1
sS'.thisN'
p2151
I265
sS'.thisIndex'
p2152
I3
sg15
(lp2153
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2154
S'space'
p2155
asg95
I3
sa(dp2156
g16
(lp2157
S'k'
asg18
S'N'
sS'.thisRepN'
p2158
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2159
I2
sS'.thisN'
p2160
I266
sS'.thisIndex'
p2161
I0
sg15
(lp2162
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2163
g16
(lp2164
S'd'
asg18
S'Y'
sS'.thisRepN'
p2165
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2166
I3
sS'.thisN'
p2167
I267
sS'.thisIndex'
p2168
I3
sg15
(lp2169
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2170
S'space'
p2171
asg95
I3
sa(dp2172
g16
(lp2173
S'd'
asg18
S'N'
sS'.thisRepN'
p2174
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2175
I4
sS'.thisN'
p2176
I268
sS'.thisIndex'
p2177
I0
sg15
(lp2178
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2179
g16
(lp2180
S'd'
asg18
S'N'
sS'.thisRepN'
p2181
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2182
I5
sS'.thisN'
p2183
I269
sS'.thisIndex'
p2184
I8
sg15
(lp2185
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I8
sa(dp2186
g16
(lp2187
S'd'
asg18
S'N'
sS'.thisRepN'
p2188
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2189
I6
sS'.thisN'
p2190
I270
sS'.thisIndex'
p2191
I6
sg15
(lp2192
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2193
g16
(lp2194
S'd'
asg18
S'N'
sS'.thisRepN'
p2195
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2196
I7
sS'.thisN'
p2197
I271
sS'.thisIndex'
p2198
I2
sg15
(lp2199
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I2
sa(dp2200
g16
(lp2201
S'k'
asg18
S'Y'
sS'.thisRepN'
p2202
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2203
I8
sS'.thisN'
p2204
I272
sS'.thisIndex'
p2205
I8
sg15
(lp2206
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2207
g16
(lp2208
S'd'
asg18
S'N'
sS'.thisRepN'
p2209
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2210
I9
sS'.thisN'
p2211
I273
sS'.thisIndex'
p2212
I1
sg15
(lp2213
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I1
sa(dp2214
g16
(lp2215
S'd'
asg18
S'N'
sS'.thisRepN'
p2216
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2217
I10
sS'.thisN'
p2218
I274
sS'.thisIndex'
p2219
I4
sg15
(lp2220
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2221
g16
(lp2222
S'k'
asg18
S'Y'
sS'.thisRepN'
p2223
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2224
I0
sS'.thisN'
p2225
I275
sS'.thisIndex'
p2226
I10
sg15
(lp2227
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2228
g16
(lp2229
S'k'
asg18
S'N'
sS'.thisRepN'
p2230
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2231
I1
sS'.thisN'
p2232
I276
sS'.thisIndex'
p2233
I3
sg15
(lp2234
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I3
sa(dp2235
g16
(lp2236
S'd'
asg18
S'Y'
sS'.thisRepN'
p2237
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2238
I2
sS'.thisN'
p2239
I277
sS'.thisIndex'
p2240
I0
sg15
(lp2241
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2242
S'space'
p2243
asg95
I0
sa(dp2244
g16
(lp2245
S'd'
asg18
S'N'
sS'.thisRepN'
p2246
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2247
I3
sS'.thisN'
p2248
I278
sS'.thisIndex'
p2249
I9
sg15
(lp2250
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2251
g16
(lp2252
S'd'
asg18
S'Y'
sS'.thisRepN'
p2253
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2254
I4
sS'.thisN'
p2255
I279
sS'.thisIndex'
p2256
I2
sg15
(lp2257
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2258
S'space'
p2259
asg95
I2
sa(dp2260
g16
(lp2261
S'k'
asg18
S'N'
sS'.thisRepN'
p2262
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2263
I5
sS'.thisN'
p2264
I280
sS'.thisIndex'
p2265
I0
sg15
(lp2266
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2267
g16
(lp2268
S'd'
asg18
S'Y'
sS'.thisRepN'
p2269
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2270
I6
sS'.thisN'
p2271
I281
sS'.thisIndex'
p2272
I1
sg15
(lp2273
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2274
S'space'
p2275
asg95
I1
sa(dp2276
g16
(lp2277
S'd'
asg18
S'N'
sS'.thisRepN'
p2278
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2279
I7
sS'.thisN'
p2280
I282
sS'.thisIndex'
p2281
I9
sg15
(lp2282
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2283
g16
(lp2284
S'k'
asg18
S'N'
sS'.thisRepN'
p2285
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2286
I8
sS'.thisN'
p2287
I283
sS'.thisIndex'
p2288
I8
sg15
(lp2289
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I8
sa(dp2290
g16
(lp2291
S'k'
asg18
S'N'
sS'.thisRepN'
p2292
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2293
I9
sS'.thisN'
p2294
I284
sS'.thisIndex'
p2295
I7
sg15
(lp2296
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I7
sa(dp2297
g16
(lp2298
S'k'
asg18
S'N'
sS'.thisRepN'
p2299
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2300
I10
sS'.thisN'
p2301
I285
sS'.thisIndex'
p2302
I4
sg15
(lp2303
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I4
sa(dp2304
g16
(lp2305
S'd'
asg18
S'Y'
sS'.thisRepN'
p2306
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2307
I0
sS'.thisN'
p2308
I286
sS'.thisIndex'
p2309
I5
sg15
(lp2310
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2311
S'space'
p2312
asg95
I5
sa(dp2313
g16
(lp2314
S'd'
asg18
S'Y'
sS'.thisRepN'
p2315
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2316
I1
sS'.thisN'
p2317
I287
sS'.thisIndex'
p2318
I7
sg15
(lp2319
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2320
S'space'
p2321
asg95
I7
sa(dp2322
g16
(lp2323
S'd'
asg18
S'Y'
sS'.thisRepN'
p2324
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2325
I2
sS'.thisN'
p2326
I288
sS'.thisIndex'
p2327
I3
sg15
(lp2328
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2329
S'space'
p2330
asg95
I3
sa(dp2331
g16
(lp2332
S'k'
asg18
S'Y'
sS'.thisRepN'
p2333
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2334
I3
sS'.thisN'
p2335
I289
sS'.thisIndex'
p2336
I3
sg15
(lp2337
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2338
g16
(lp2339
S'd'
asg18
S'N'
sS'.thisRepN'
p2340
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2341
I4
sS'.thisN'
p2342
I290
sS'.thisIndex'
p2343
I9
sg15
(lp2344
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2345
g16
(lp2346
S'k'
asg18
S'N'
sS'.thisRepN'
p2347
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2348
I5
sS'.thisN'
p2349
I291
sS'.thisIndex'
p2350
I8
sg15
(lp2351
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2352
g16
(lp2353
S'd'
asg18
S'N'
sS'.thisRepN'
p2354
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2355
I6
sS'.thisN'
p2356
I292
sS'.thisIndex'
p2357
I4
sg15
(lp2358
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2359
g16
(lp2360
S'd'
asg18
S'Y'
sS'.thisRepN'
p2361
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2362
I7
sS'.thisN'
p2363
I293
sS'.thisIndex'
p2364
I0
sg15
(lp2365
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2366
S'space'
p2367
asg95
I0
sa(dp2368
g16
(lp2369
S'd'
asg18
S'Y'
sS'.thisRepN'
p2370
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2371
I8
sS'.thisN'
p2372
I294
sS'.thisIndex'
p2373
I8
sg15
(lp2374
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2375
S'space'
p2376
asg95
I8
sa(dp2377
g16
(lp2378
S'd'
asg18
S'N'
sS'.thisRepN'
p2379
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2380
I9
sS'.thisN'
p2381
I295
sS'.thisIndex'
p2382
I7
sg15
(lp2383
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2384
g16
(lp2385
S'd'
asg18
S'Y'
sS'.thisRepN'
p2386
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2387
I10
sS'.thisN'
p2388
I296
sS'.thisIndex'
p2389
I10
sg15
(lp2390
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2391
S'space'
p2392
asg95
I10
sa(dp2393
g16
(lp2394
S'd'
asg18
S'Y'
sS'.thisRepN'
p2395
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2396
I0
sS'.thisN'
p2397
I297
sS'.thisIndex'
p2398
I10
sg15
(lp2399
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2400
S'space'
p2401
asg95
I10
sa(dp2402
g16
(lp2403
S'k'
asg18
S'N'
sS'.thisRepN'
p2404
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2405
I1
sS'.thisN'
p2406
I298
sS'.thisIndex'
p2407
I3
sg15
(lp2408
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2409
g16
(lp2410
S'k'
asg18
S'N'
sg22
I44
sS'.thisN'
p2411
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2412
I2
sS'.thisRepN'
p2413
I27
sg21
I28
sS'.thisIndex'
p2414
I9
sg23
I17
sg15
(lp2415
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2416
g16
(lp2417
S'd'
asg95
I0
sS'.thisRepN'
p2418
I27
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2419
I3
sS'.thisN'
p2420
I300
sS'.thisIndex'
p2421
I0
sg15
(lp2422
S'k'
asg17
S'N'
sg14
I7
sa(dp2423
g16
(lp2424
S'k'
asg95
I6
sS'.thisRepN'
p2425
I27
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2426
I4
sS'.thisN'
p2427
I301
sS'.thisIndex'
p2428
I6
sg15
(lp2429
S'k'
asg17
S'Y'
sg14
I7
sa(dp2430
g16
(lp2431
S'd'
asg18
S'Y'
sS'.thisRepN'
p2432
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2433
I5
sS'.thisN'
p2434
I302
sS'.thisIndex'
p2435
I9
sg15
(lp2436
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2437
S'space'
p2438
asg95
I9
sa(dp2439
g16
(lp2440
S'd'
asg18
S'N'
sS'.thisRepN'
p2441
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2442
I6
sS'.thisN'
p2443
I303
sS'.thisIndex'
p2444
I8
sg15
(lp2445
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I8
sa(dp2446
g16
(lp2447
S'k'
asg18
S'N'
sS'.thisRepN'
p2448
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2449
I7
sS'.thisN'
p2450
I304
sS'.thisIndex'
p2451
I7
sg15
(lp2452
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I7
sa(dp2453
g16
(lp2454
S'd'
asg18
S'N'
sS'.thisRepN'
p2455
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2456
I8
sS'.thisN'
p2457
I305
sS'.thisIndex'
p2458
I3
sg15
(lp2459
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I3
sa(dp2460
g16
(lp2461
S'd'
asg18
S'N'
sS'.thisRepN'
p2462
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2463
I9
sS'.thisN'
p2464
I306
sS'.thisIndex'
p2465
I4
sg15
(lp2466
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2467
g16
(lp2468
S'k'
asg18
S'Y'
sS'.thisRepN'
p2469
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2470
I10
sS'.thisN'
p2471
I307
sS'.thisIndex'
p2472
I4
sg15
(lp2473
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2474
S'space'
p2475
asg95
I4
sa(dp2476
g16
(lp2477
S'd'
asg18
S'Y'
sS'.thisRepN'
p2478
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2479
I0
sS'.thisN'
p2480
I308
sS'.thisIndex'
p2481
I7
sg15
(lp2482
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2483
S'space'
p2484
asg95
I7
sa(dp2485
g16
(lp2486
S'k'
asg18
S'N'
sS'.thisRepN'
p2487
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2488
I1
sS'.thisN'
p2489
I309
sS'.thisIndex'
p2490
I4
sg15
(lp2491
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2492
S'space'
p2493
asg95
I4
sa(dp2494
g16
(lp2495
S'd'
asg18
S'N'
sS'.thisRepN'
p2496
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2497
I2
sS'.thisN'
p2498
I310
sS'.thisIndex'
p2499
I5
sg15
(lp2500
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2501
g16
(lp2502
S'd'
asg18
S'N'
sS'.thisRepN'
p2503
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2504
I3
sS'.thisN'
p2505
I311
sS'.thisIndex'
p2506
I0
sg15
(lp2507
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I0
sa(dp2508
g16
(lp2509
S'k'
asg18
S'N'
sS'.thisRepN'
p2510
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2511
I4
sS'.thisN'
p2512
I312
sS'.thisIndex'
p2513
I1
sg15
(lp2514
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2515
g16
(lp2516
S'k'
asg18
S'Y'
sS'.thisRepN'
p2517
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2518
I5
sS'.thisN'
p2519
I313
sS'.thisIndex'
p2520
I2
sg15
(lp2521
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2522
S'space'
p2523
asg95
I2
sa(dp2524
g16
(lp2525
S'd'
asg18
S'Y'
sS'.thisRepN'
p2526
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2527
I6
sS'.thisN'
p2528
I314
sS'.thisIndex'
p2529
I10
sg15
(lp2530
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2531
S'space'
p2532
asg95
I10
sa(dp2533
g16
(lp2534
S'k'
asg18
S'N'
sS'.thisRepN'
p2535
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2536
I7
sS'.thisN'
p2537
I315
sS'.thisIndex'
p2538
I8
sg15
(lp2539
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2540
g16
(lp2541
S'k'
asg18
S'Y'
sS'.thisRepN'
p2542
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2543
I8
sS'.thisN'
p2544
I316
sS'.thisIndex'
p2545
I6
sg15
(lp2546
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2547
S'space'
p2548
asg95
I6
sa(dp2549
g16
(lp2550
S'k'
asg18
S'Y'
sS'.thisRepN'
p2551
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2552
I9
sS'.thisN'
p2553
I317
sS'.thisIndex'
p2554
I3
sg15
(lp2555
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I3
sa(dp2556
g16
(lp2557
S'd'
asg18
S'N'
sS'.thisRepN'
p2558
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2559
I10
sS'.thisN'
p2560
I318
sS'.thisIndex'
p2561
I10
sg15
(lp2562
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I10
sa(dp2563
g16
(lp2564
S'k'
asg18
S'Y'
sS'.thisRepN'
p2565
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2566
I0
sS'.thisN'
p2567
I319
sS'.thisIndex'
p2568
I2
sg15
(lp2569
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2570
g16
(lp2571
S'k'
asg18
S'Y'
sS'.thisRepN'
p2572
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2573
I1
sS'.thisN'
p2574
I320
sS'.thisIndex'
p2575
I8
sg15
(lp2576
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2577
S'space'
p2578
asg95
I8
sa(dp2579
g16
(lp2580
S'd'
asg18
S'Y'
sS'.thisRepN'
p2581
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2582
I2
sS'.thisN'
p2583
I321
sS'.thisIndex'
p2584
I6
sg15
(lp2585
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2586
S'space'
p2587
asg95
I6
sa(dp2588
g16
(lp2589
S'k'
asg18
S'N'
sS'.thisRepN'
p2590
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2591
I3
sS'.thisN'
p2592
I322
sS'.thisIndex'
p2593
I4
sg15
(lp2594
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I4
sa(dp2595
g16
(lp2596
S'k'
asg18
S'Y'
sS'.thisRepN'
p2597
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2598
I4
sS'.thisN'
p2599
I323
sS'.thisIndex'
p2600
I10
sg15
(lp2601
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2602
S'space'
p2603
asg95
I10
sa(dp2604
g16
(lp2605
S'd'
asg18
S'Y'
sS'.thisRepN'
p2606
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2607
I5
sS'.thisN'
p2608
I324
sS'.thisIndex'
p2609
I8
sg15
(lp2610
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2611
S'space'
p2612
asg95
I8
sa(dp2613
g16
(lp2614
S'd'
asg18
S'Y'
sS'.thisRepN'
p2615
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2616
I6
sS'.thisN'
p2617
I325
sS'.thisIndex'
p2618
I6
sg15
(lp2619
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2620
S'space'
p2621
asg95
I6
sa(dp2622
g16
(lp2623
S'k'
asg18
S'N'
sS'.thisRepN'
p2624
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2625
I7
sS'.thisN'
p2626
I326
sS'.thisIndex'
p2627
I3
sg15
(lp2628
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2629
g16
(lp2630
S'd'
asg18
S'N'
sS'.thisRepN'
p2631
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2632
I8
sS'.thisN'
p2633
I327
sS'.thisIndex'
p2634
I0
sg15
(lp2635
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I0
sa(dp2636
g16
(lp2637
S'd'
asg18
S'Y'
sS'.thisRepN'
p2638
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2639
I9
sS'.thisN'
p2640
I328
sS'.thisIndex'
p2641
I9
sg15
(lp2642
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2643
S'space'
p2644
asg95
I9
sa(dp2645
g16
(lp2646
S'd'
asg18
S'Y'
sS'.thisRepN'
p2647
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2648
I10
sS'.thisN'
p2649
I329
sS'.thisIndex'
p2650
I0
sg15
(lp2651
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2652
S'space'
p2653
asg95
I0
sa(dp2654
g16
(lp2655
S'd'
asg18
S'N'
sS'.thisRepN'
p2656
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2657
I0
sS'.thisN'
p2658
I330
sS'.thisIndex'
p2659
I5
sg15
(lp2660
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I5
sa(dp2661
g16
(lp2662
S'd'
asg18
S'N'
sS'.thisRepN'
p2663
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2664
I1
sS'.thisN'
p2665
I331
sS'.thisIndex'
p2666
I7
sg15
(lp2667
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2668
g16
(lp2669
S'k'
asg18
S'N'
sS'.thisRepN'
p2670
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2671
I2
sS'.thisN'
p2672
I332
sS'.thisIndex'
p2673
I4
sg15
(lp2674
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2675
g16
(lp2676
S'k'
asg18
S'N'
sS'.thisRepN'
p2677
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2678
I3
sS'.thisN'
p2679
I333
sS'.thisIndex'
p2680
I0
sg15
(lp2681
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2682
g16
(lp2683
S'd'
asg18
S'Y'
sS'.thisRepN'
p2684
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2685
I4
sS'.thisN'
p2686
I334
sS'.thisIndex'
p2687
I3
sg15
(lp2688
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2689
S'space'
p2690
asg95
I3
sa(dp2691
g16
(lp2692
S'd'
asg18
S'N'
sS'.thisRepN'
p2693
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2694
I5
sS'.thisN'
p2695
I335
sS'.thisIndex'
p2696
I9
sg15
(lp2697
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2698
g16
(lp2699
S'd'
asg18
S'Y'
sS'.thisRepN'
p2700
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2701
I6
sS'.thisN'
p2702
I336
sS'.thisIndex'
p2703
I6
sg15
(lp2704
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2705
g16
(lp2706
S'd'
asg18
S'Y'
sS'.thisRepN'
p2707
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2708
I7
sS'.thisN'
p2709
I337
sS'.thisIndex'
p2710
I4
sg15
(lp2711
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2712
S'space'
p2713
asg95
I4
sa(dp2714
g16
(lp2715
S'd'
asg18
S'Y'
sS'.thisRepN'
p2716
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2717
I8
sS'.thisN'
p2718
I338
sS'.thisIndex'
p2719
I5
sg15
(lp2720
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I5
sa(dp2721
g16
(lp2722
S'd'
asg18
S'Y'
sS'.thisRepN'
p2723
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2724
I9
sS'.thisN'
p2725
I339
sS'.thisIndex'
p2726
I0
sg15
(lp2727
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2728
S'space'
p2729
asg95
I0
sa(dp2730
g16
(lp2731
S'k'
asg18
S'Y'
sS'.thisRepN'
p2732
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2733
I10
sS'.thisN'
p2734
I340
sS'.thisIndex'
p2735
I8
sg15
(lp2736
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2737
S'space'
p2738
asg95
I8
sa(dp2739
g16
(lp2740
S'k'
asg18
S'Y'
sS'.thisRepN'
p2741
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2742
I0
sS'.thisN'
p2743
I341
sS'.thisIndex'
p2744
I8
sg15
(lp2745
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2746
S'space'
p2747
asg95
I8
sa(dp2748
g16
(lp2749
S'd'
asg18
S'Y'
sS'.thisRepN'
p2750
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2751
I1
sS'.thisN'
p2752
I342
sS'.thisIndex'
p2753
I2
sg15
(lp2754
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2755
S'space'
p2756
asg95
I2
sa(dp2757
g16
(lp2758
S'd'
asg18
S'N'
sS'.thisRepN'
p2759
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2760
I2
sS'.thisN'
p2761
I343
sS'.thisIndex'
p2762
I8
sg15
(lp2763
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2764
g16
(lp2765
S'k'
asg18
S'Y'
sS'.thisRepN'
p2766
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2767
I3
sS'.thisN'
p2768
I344
sS'.thisIndex'
p2769
I10
sg15
(lp2770
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2771
g16
(lp2772
S'd'
asg18
S'N'
sS'.thisRepN'
p2773
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2774
I4
sS'.thisN'
p2775
I345
sS'.thisIndex'
p2776
I7
sg15
(lp2777
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I7
sa(dp2778
g16
(lp2779
S'k'
asg18
S'Y'
sS'.thisRepN'
p2780
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2781
I5
sS'.thisN'
p2782
I346
sS'.thisIndex'
p2783
I0
sg15
(lp2784
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I0
sa(dp2785
g16
(lp2786
S'd'
asg18
S'N'
sS'.thisRepN'
p2787
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2788
I6
sS'.thisN'
p2789
I347
sS'.thisIndex'
p2790
I7
sg15
(lp2791
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2792
S'space'
p2793
asg95
I7
sa(dp2794
g16
(lp2795
S'k'
asg18
S'N'
sS'.thisRepN'
p2796
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2797
I7
sS'.thisN'
p2798
I348
sS'.thisIndex'
p2799
I2
sg15
(lp2800
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2801
g16
(lp2802
S'd'
asg18
S'N'
sg22
I40
sS'.thisN'
p2803
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2804
I8
sS'.thisRepN'
p2805
I31
sg21
I25
sS'.thisIndex'
p2806
I9
sg23
I25
sg15
(lp2807
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2808
g16
(lp2809
S'd'
asg95
I2
sS'.thisRepN'
p2810
I31
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2811
I9
sS'.thisN'
p2812
I350
sS'.thisIndex'
p2813
I2
sg15
(lp2814
S'k'
asg17
S'N'
sg14
I8
sa(dp2815
g16
(lp2816
S'd'
asg95
I9
sS'.thisRepN'
p2817
I31
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2818
I10
sS'.thisN'
p2819
I351
sS'.thisIndex'
p2820
I9
sg15
(lp2821
S'k'
asg17
S'N'
sg14
I8
sa(dp2822
g16
(lp2823
S'd'
asg18
S'N'
sS'.thisRepN'
p2824
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2825
I0
sS'.thisN'
p2826
I352
sS'.thisIndex'
p2827
I10
sg15
(lp2828
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp2829
g16
(lp2830
S'd'
asg18
S'N'
sS'.thisRepN'
p2831
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2832
I1
sS'.thisN'
p2833
I353
sS'.thisIndex'
p2834
I5
sg15
(lp2835
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I5
sa(dp2836
g16
(lp2837
S'k'
asg18
S'N'
sS'.thisRepN'
p2838
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2839
I2
sS'.thisN'
p2840
I354
sS'.thisIndex'
p2841
I3
sg15
(lp2842
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I3
sa(dp2843
g16
(lp2844
S'd'
asg18
S'N'
sS'.thisRepN'
p2845
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2846
I3
sS'.thisN'
p2847
I355
sS'.thisIndex'
p2848
I7
sg15
(lp2849
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I7
sa(dp2850
g16
(lp2851
S'd'
asg18
S'Y'
sS'.thisRepN'
p2852
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2853
I4
sS'.thisN'
p2854
I356
sS'.thisIndex'
p2855
I2
sg15
(lp2856
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2857
S'space'
p2858
asg95
I2
sa(dp2859
g16
(lp2860
S'd'
asg18
S'N'
sS'.thisRepN'
p2861
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2862
I5
sS'.thisN'
p2863
I357
sS'.thisIndex'
p2864
I2
sg15
(lp2865
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2866
g16
(lp2867
S'd'
asg18
S'N'
sS'.thisRepN'
p2868
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2869
I6
sS'.thisN'
p2870
I358
sS'.thisIndex'
p2871
I5
sg15
(lp2872
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2873
g16
(lp2874
S'k'
asg18
S'Y'
sS'.thisRepN'
p2875
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2876
I7
sS'.thisN'
p2877
I359
sS'.thisIndex'
p2878
I8
sg15
(lp2879
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2880
S'space'
p2881
asg95
I8
sa(dp2882
g16
(lp2883
S'd'
asg18
S'N'
sS'.thisRepN'
p2884
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2885
I8
sS'.thisN'
p2886
I360
sS'.thisIndex'
p2887
I2
sg15
(lp2888
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2889
S'space'
p2890
asg95
I2
sa(dp2891
g16
(lp2892
S'k'
asg18
S'Y'
sS'.thisRepN'
p2893
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2894
I9
sS'.thisN'
p2895
I361
sS'.thisIndex'
p2896
I7
sg15
(lp2897
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2898
S'space'
p2899
asg95
I7
sa(dp2900
g16
(lp2901
S'd'
asg18
S'N'
sS'.thisRepN'
p2902
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2903
I10
sS'.thisN'
p2904
I362
sS'.thisIndex'
p2905
I4
sg15
(lp2906
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp2907
g16
(lp2908
S'k'
asg18
S'Y'
sS'.thisRepN'
p2909
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2910
I0
sS'.thisN'
p2911
I363
sS'.thisIndex'
p2912
I4
sg15
(lp2913
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2914
g16
(lp2915
S'd'
asg18
S'Y'
sS'.thisRepN'
p2916
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2917
I1
sS'.thisN'
p2918
I364
sS'.thisIndex'
p2919
I5
sg15
(lp2920
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2921
S'space'
p2922
asg95
I5
sa(dp2923
g16
(lp2924
S'd'
asg18
S'Y'
sS'.thisRepN'
p2925
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2926
I2
sS'.thisN'
p2927
I365
sS'.thisIndex'
p2928
I0
sg15
(lp2929
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2930
S'space'
p2931
asg95
I0
sa(dp2932
g16
(lp2933
S'k'
asg18
S'Y'
sS'.thisRepN'
p2934
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2935
I3
sS'.thisN'
p2936
I366
sS'.thisIndex'
p2937
I3
sg15
(lp2938
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2939
S'space'
p2940
asg95
I3
sa(dp2941
g16
(lp2942
S'k'
asg18
S'Y'
sS'.thisRepN'
p2943
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2944
I4
sS'.thisN'
p2945
I367
sS'.thisIndex'
p2946
I6
sg15
(lp2947
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2948
S'space'
p2949
asg95
I6
sa(dp2950
g16
(lp2951
S'k'
asg18
S'N'
sS'.thisRepN'
p2952
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2953
I5
sS'.thisN'
p2954
I368
sS'.thisIndex'
p2955
I5
sg15
(lp2956
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I5
sa(dp2957
g16
(lp2958
S'k'
asg18
S'N'
sS'.thisRepN'
p2959
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2960
I6
sS'.thisN'
p2961
I369
sS'.thisIndex'
p2962
I9
sg15
(lp2963
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I9
sa(dp2964
g16
(lp2965
S'd'
asg18
S'Y'
sS'.thisRepN'
p2966
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2967
I7
sS'.thisN'
p2968
I370
sS'.thisIndex'
p2969
I5
sg15
(lp2970
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2971
S'space'
p2972
asg95
I5
sa(dp2973
g16
(lp2974
S'd'
asg18
S'Y'
sS'.thisRepN'
p2975
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2976
I8
sS'.thisN'
p2977
I371
sS'.thisIndex'
p2978
I4
sg15
(lp2979
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2980
S'space'
p2981
asg95
I4
sa(dp2982
g16
(lp2983
S'k'
asg18
S'N'
sS'.thisRepN'
p2984
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2985
I9
sS'.thisN'
p2986
I372
sS'.thisIndex'
p2987
I4
sg15
(lp2988
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2989
g16
(lp2990
S'k'
asg18
S'Y'
sS'.thisRepN'
p2991
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2992
I10
sS'.thisN'
p2993
I373
sS'.thisIndex'
p2994
I9
sg15
(lp2995
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2996
S'space'
p2997
asg95
I9
sa(dp2998
g16
(lp2999
S'd'
asg18
S'Y'
sS'.thisRepN'
p3000
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3001
I0
sS'.thisN'
p3002
I374
sS'.thisIndex'
p3003
I5
sg15
(lp3004
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp3005
S'space'
p3006
asg95
I5
sa(dp3007
g16
(lp3008
S'k'
asg18
S'Y'
sS'.thisRepN'
p3009
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3010
I1
sS'.thisN'
p3011
I375
sS'.thisIndex'
p3012
I0
sg15
(lp3013
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp3014
S'space'
p3015
asg95
I0
sa(dp3016
g16
(lp3017
S'd'
asg18
S'Y'
sS'.thisRepN'
p3018
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3019
I2
sS'.thisN'
p3020
I376
sS'.thisIndex'
p3021
I10
sg15
(lp3022
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3023
S'space'
p3024
asg95
I10
sa(dp3025
g16
(lp3026
S'd'
asg18
S'Y'
sS'.thisRepN'
p3027
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3028
I3
sS'.thisN'
p3029
I377
sS'.thisIndex'
p3030
I5
sg15
(lp3031
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp3032
S'space'
p3033
asg95
I5
sa(dp3034
g16
(lp3035
S'k'
asg18
S'N'
sS'.thisRepN'
p3036
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3037
I4
sS'.thisN'
p3038
I378
sS'.thisIndex'
p3039
I2
sg15
(lp3040
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I2
sa(dp3041
g16
(lp3042
S'd'
asg18
S'N'
sS'.thisRepN'
p3043
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3044
I5
sS'.thisN'
p3045
I379
sS'.thisIndex'
p3046
I3
sg15
(lp3047
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I3
sa(dp3048
g16
(lp3049
S'k'
asg18
S'Y'
sS'.thisRepN'
p3050
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3051
I6
sS'.thisN'
p3052
I380
sS'.thisIndex'
p3053
I1
sg15
(lp3054
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3055
S'space'
p3056
asg95
I1
sa(dp3057
g16
(lp3058
S'k'
asg18
S'N'
sS'.thisRepN'
p3059
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3060
I7
sS'.thisN'
p3061
I381
sS'.thisIndex'
p3062
I4
sg15
(lp3063
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp3064
g16
(lp3065
S'd'
asg18
S'N'
sS'.thisRepN'
p3066
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3067
I8
sS'.thisN'
p3068
I382
sS'.thisIndex'
p3069
I9
sg15
(lp3070
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I9
sa(dp3071
g16
(lp3072
S'd'
asg18
S'N'
sS'.thisRepN'
p3073
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3074
I9
sS'.thisN'
p3075
I383
sS'.thisIndex'
p3076
I0
sg15
(lp3077
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3078
g16
(lp3079
S'k'
asg18
S'N'
sS'.thisRepN'
p3080
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3081
I10
sS'.thisN'
p3082
I384
sS'.thisIndex'
p3083
I9
sg15
(lp3084
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I9
sa(dp3085
g16
(lp3086
S'k'
asg18
S'N'
sS'.thisRepN'
p3087
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3088
I0
sS'.thisN'
p3089
I385
sS'.thisIndex'
p3090
I5
sg15
(lp3091
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3092
g16
(lp3093
S'k'
asg18
S'N'
sS'.thisRepN'
p3094
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3095
I1
sS'.thisN'
p3096
I386
sS'.thisIndex'
p3097
I0
sg15
(lp3098
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3099
S'space'
p3100
asg95
I0
sa(dp3101
g16
(lp3102
S'd'
asg18
S'Y'
sS'.thisRepN'
p3103
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3104
I2
sS'.thisN'
p3105
I387
sS'.thisIndex'
p3106
I9
sg15
(lp3107
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3108
S'space'
p3109
asg95
I9
sa(dp3110
g16
(lp3111
S'd'
asg18
S'Y'
sS'.thisRepN'
p3112
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3113
I3
sS'.thisN'
p3114
I388
sS'.thisIndex'
p3115
I2
sg15
(lp3116
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp3117
S'space'
p3118
asg95
I2
sa(dp3119
g16
(lp3120
S'k'
asg18
S'N'
sS'.thisRepN'
p3121
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3122
I4
sS'.thisN'
p3123
I389
sS'.thisIndex'
p3124
I1
sg15
(lp3125
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I1
sa(dp3126
g16
(lp3127
S'k'
asg18
S'Y'
sS'.thisRepN'
p3128
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3129
I5
sS'.thisN'
p3130
I390
sS'.thisIndex'
p3131
I10
sg15
(lp3132
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3133
g16
(lp3134
S'k'
asg18
S'N'
sS'.thisRepN'
p3135
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3136
I6
sS'.thisN'
p3137
I391
sS'.thisIndex'
p3138
I6
sg15
(lp3139
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3140
g16
(lp3141
S'k'
asg18
S'Y'
sS'.thisRepN'
p3142
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3143
I7
sS'.thisN'
p3144
I392
sS'.thisIndex'
p3145
I1
sg15
(lp3146
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3147
S'space'
p3148
asg95
I1
sa(dp3149
g16
(lp3150
S'k'
asg18
S'N'
sS'.thisRepN'
p3151
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3152
I8
sS'.thisN'
p3153
I393
sS'.thisIndex'
p3154
I3
sg15
(lp3155
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I3
sa(dp3156
g16
(lp3157
S'k'
asg18
S'N'
sS'.thisRepN'
p3158
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3159
I9
sS'.thisN'
p3160
I394
sS'.thisIndex'
p3161
I5
sg15
(lp3162
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I5
sa(dp3163
g16
(lp3164
S'k'
asg18
S'Y'
sS'.thisRepN'
p3165
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3166
I10
sS'.thisN'
p3167
I395
sS'.thisIndex'
p3168
I2
sg15
(lp3169
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3170
S'space'
p3171
asg95
I2
sa(dp3172
g16
(lp3173
S'd'
asg18
S'Y'
sS'.thisRepN'
p3174
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3175
I0
sS'.thisN'
p3176
I396
sS'.thisIndex'
p3177
I10
sg15
(lp3178
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3179
S'space'
p3180
asg95
I10
sa(dp3181
g16
(lp3182
S'd'
asg18
S'Y'
sS'.thisRepN'
p3183
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3184
I1
sS'.thisN'
p3185
I397
sS'.thisIndex'
p3186
I2
sg15
(lp3187
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I2
sa(dp3188
g16
(lp3189
S'k'
asg18
S'N'
sS'.thisRepN'
p3190
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3191
I2
sS'.thisN'
p3192
I398
sS'.thisIndex'
p3193
I9
sg15
(lp3194
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3195
g16
(lp3196
S'd'
asg18
S'N'
sg22
I43
sS'.thisN'
p3197
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3198
I3
sS'.thisRepN'
p3199
I36
sg21
I20
sS'.thisIndex'
p3200
I4
sg23
I23
sg15
(lp3201
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp3202
g16
(lp3203
S'k'
asg95
I6
sS'.thisRepN'
p3204
I36
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3205
I4
sS'.thisN'
p3206
I400
sS'.thisIndex'
p3207
I6
sg15
(lp3208
S'k'
asg17
S'Y'
sg14
I9
sa(dp3209
g16
(lp3210
S'd'
asg95
I7
sS'.thisRepN'
p3211
I36
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3212
I5
sS'.thisN'
p3213
I401
sS'.thisIndex'
p3214
I7
sg15
(lp3215
S'k'
asg17
S'N'
sg14
I9
sa(dp3216
g16
(lp3217
S'd'
asg18
S'N'
sS'.thisRepN'
p3218
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3219
I6
sS'.thisN'
p3220
I402
sS'.thisIndex'
p3221
I6
sg15
(lp3222
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I6
sa(dp3223
g16
(lp3224
S'd'
asg18
S'Y'
sS'.thisRepN'
p3225
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3226
I7
sS'.thisN'
p3227
I403
sS'.thisIndex'
p3228
I7
sg15
(lp3229
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3230
S'k'
asg95
I7
sa(dp3231
g16
(lp3232
S'k'
asg18
S'N'
sS'.thisRepN'
p3233
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3234
I8
sS'.thisN'
p3235
I404
sS'.thisIndex'
p3236
I3
sg15
(lp3237
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I3
sa(dp3238
g16
(lp3239
S'k'
asg18
S'Y'
sS'.thisRepN'
p3240
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3241
I9
sS'.thisN'
p3242
I405
sS'.thisIndex'
p3243
I8
sg15
(lp3244
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3245
S'space'
p3246
asg95
I8
sa(dp3247
g16
(lp3248
S'k'
asg18
S'Y'
sS'.thisRepN'
p3249
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3250
I10
sS'.thisN'
p3251
I406
sS'.thisIndex'
p3252
I6
sg15
(lp3253
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3254
S'space'
p3255
asg95
I6
sa(dp3256
g16
(lp3257
S'k'
asg18
S'N'
sS'.thisRepN'
p3258
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3259
I0
sS'.thisN'
p3260
I407
sS'.thisIndex'
p3261
I7
sg15
(lp3262
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I7
sa(dp3263
g16
(lp3264
S'd'
asg18
S'N'
sS'.thisRepN'
p3265
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3266
I1
sS'.thisN'
p3267
I408
sS'.thisIndex'
p3268
I9
sg15
(lp3269
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3270
S'space'
p3271
asg95
I9
sa(dp3272
g16
(lp3273
S'd'
asg18
S'N'
sS'.thisRepN'
p3274
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3275
I2
sS'.thisN'
p3276
I409
sS'.thisIndex'
p3277
I6
sg15
(lp3278
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3279
g16
(lp3280
S'd'
asg18
S'Y'
sS'.thisRepN'
p3281
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3282
I3
sS'.thisN'
p3283
I410
sS'.thisIndex'
p3284
I1
sg15
(lp3285
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I1
sa(dp3286
g16
(lp3287
S'd'
asg18
S'Y'
sS'.thisRepN'
p3288
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3289
I4
sS'.thisN'
p3290
I411
sS'.thisIndex'
p3291
I0
sg15
(lp3292
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I0
sa(dp3293
g16
(lp3294
S'k'
asg18
S'Y'
sS'.thisRepN'
p3295
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3296
I5
sS'.thisN'
p3297
I412
sS'.thisIndex'
p3298
I8
sg15
(lp3299
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I8
sa(dp3300
g16
(lp3301
S'k'
asg18
S'Y'
sS'.thisRepN'
p3302
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3303
I6
sS'.thisN'
p3304
I413
sS'.thisIndex'
p3305
I0
sg15
(lp3306
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3307
S'space'
p3308
asg95
I0
sa(dp3309
g16
(lp3310
S'k'
asg18
S'Y'
sS'.thisRepN'
p3311
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3312
I7
sS'.thisN'
p3313
I414
sS'.thisIndex'
p3314
I2
sg15
(lp3315
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3316
S'space'
p3317
asg95
I2
sa(dp3318
g16
(lp3319
S'd'
asg18
S'Y'
sS'.thisRepN'
p3320
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3321
I8
sS'.thisN'
p3322
I415
sS'.thisIndex'
p3323
I0
sg15
(lp3324
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3325
S'space'
p3326
asg95
I0
sa(dp3327
g16
(lp3328
S'd'
asg18
S'N'
sS'.thisRepN'
p3329
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3330
I9
sS'.thisN'
p3331
I416
sS'.thisIndex'
p3332
I0
sg15
(lp3333
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3334
g16
(lp3335
S'd'
asg18
S'N'
sS'.thisRepN'
p3336
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3337
I10
sS'.thisN'
p3338
I417
sS'.thisIndex'
p3339
I9
sg15
(lp3340
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I9
sa(dp3341
g16
(lp3342
S'k'
asg18
S'Y'
sS'.thisRepN'
p3343
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3344
I0
sS'.thisN'
p3345
I418
sS'.thisIndex'
p3346
I3
sg15
(lp3347
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3348
S'space'
p3349
asg95
I3
sa(dp3350
g16
(lp3351
S'd'
asg18
S'N'
sS'.thisRepN'
p3352
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3353
I1
sS'.thisN'
p3354
I419
sS'.thisIndex'
p3355
I2
sg15
(lp3356
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I2
sa(dp3357
g16
(lp3358
S'd'
asg18
S'Y'
sS'.thisRepN'
p3359
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3360
I2
sS'.thisN'
p3361
I420
sS'.thisIndex'
p3362
I6
sg15
(lp3363
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3364
S'space'
p3365
asg95
I6
sa(dp3366
g16
(lp3367
S'k'
asg18
S'N'
sS'.thisRepN'
p3368
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3369
I3
sS'.thisN'
p3370
I421
sS'.thisIndex'
p3371
I6
sg15
(lp3372
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3373
g16
(lp3374
S'k'
asg18
S'Y'
sS'.thisRepN'
p3375
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3376
I4
sS'.thisN'
p3377
I422
sS'.thisIndex'
p3378
I7
sg15
(lp3379
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3380
S'space'
p3381
asg95
I7
sa(dp3382
g16
(lp3383
S'k'
asg18
S'Y'
sS'.thisRepN'
p3384
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3385
I5
sS'.thisN'
p3386
I423
sS'.thisIndex'
p3387
I8
sg15
(lp3388
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3389
S'space'
p3390
asg95
I8
sa(dp3391
g16
(lp3392
S'k'
asg18
S'N'
sS'.thisRepN'
p3393
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3394
I6
sS'.thisN'
p3395
I424
sS'.thisIndex'
p3396
I3
sg15
(lp3397
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3398
g16
(lp3399
S'k'
asg18
S'N'
sS'.thisRepN'
p3400
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3401
I7
sS'.thisN'
p3402
I425
sS'.thisIndex'
p3403
I8
sg15
(lp3404
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I8
sa(dp3405
g16
(lp3406
S'd'
asg18
S'Y'
sS'.thisRepN'
p3407
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3408
I8
sS'.thisN'
p3409
I426
sS'.thisIndex'
p3410
I4
sg15
(lp3411
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3412
S'space'
p3413
asg95
I4
sa(dp3414
g16
(lp3415
S'd'
asg18
S'N'
sS'.thisRepN'
p3416
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3417
I9
sS'.thisN'
p3418
I427
sS'.thisIndex'
p3419
I8
sg15
(lp3420
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3421
S'k'
asg95
I8
sa(dp3422
g16
(lp3423
S'd'
asg18
S'N'
sS'.thisRepN'
p3424
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3425
I10
sS'.thisN'
p3426
I428
sS'.thisIndex'
p3427
I9
sg15
(lp3428
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3429
S'space'
p3430
asg95
I9
sa(dp3431
g16
(lp3432
S'd'
asg18
S'Y'
sS'.thisRepN'
p3433
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3434
I0
sS'.thisN'
p3435
I429
sS'.thisIndex'
p3436
I2
sg15
(lp3437
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I2
sa(dp3438
g16
(lp3439
S'k'
asg18
S'N'
sS'.thisRepN'
p3440
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3441
I1
sS'.thisN'
p3442
I430
sS'.thisIndex'
p3443
I0
sg15
(lp3444
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3445
g16
(lp3446
S'd'
asg18
S'Y'
sS'.thisRepN'
p3447
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3448
I2
sS'.thisN'
p3449
I431
sS'.thisIndex'
p3450
I4
sg15
(lp3451
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3452
S'space'
p3453
asg95
I4
sa(dp3454
g16
(lp3455
S'd'
asg18
S'Y'
sS'.thisRepN'
p3456
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3457
I3
sS'.thisN'
p3458
I432
sS'.thisIndex'
p3459
I4
sg15
(lp3460
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3461
S'space'
p3462
asg95
I4
sa(dp3463
g16
(lp3464
S'd'
asg18
S'N'
sS'.thisRepN'
p3465
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3466
I4
sS'.thisN'
p3467
I433
sS'.thisIndex'
p3468
I5
sg15
(lp3469
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3470
g16
(lp3471
S'd'
asg18
S'N'
sS'.thisRepN'
p3472
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3473
I5
sS'.thisN'
p3474
I434
sS'.thisIndex'
p3475
I9
sg15
(lp3476
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3477
g16
(lp3478
S'k'
asg18
S'N'
sS'.thisRepN'
p3479
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3480
I6
sS'.thisN'
p3481
I435
sS'.thisIndex'
p3482
I2
sg15
(lp3483
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I2
sa(dp3484
g16
(lp3485
S'k'
asg18
S'Y'
sS'.thisRepN'
p3486
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3487
I7
sS'.thisN'
p3488
I436
sS'.thisIndex'
p3489
I7
sg15
(lp3490
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3491
S'space'
p3492
asg95
I7
sa(dp3493
g16
(lp3494
S'k'
asg18
S'N'
sS'.thisRepN'
p3495
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3496
I8
sS'.thisN'
p3497
I437
sS'.thisIndex'
p3498
I8
sg15
(lp3499
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I8
sa(dp3500
g16
(lp3501
S'k'
asg18
S'Y'
sS'.thisRepN'
p3502
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3503
I9
sS'.thisN'
p3504
I438
sS'.thisIndex'
p3505
I1
sg15
(lp3506
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3507
S'space'
p3508
asg95
I1
sa(dp3509
g16
(lp3510
S'd'
asg18
S'Y'
sS'.thisRepN'
p3511
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3512
I10
sS'.thisN'
p3513
I439
sS'.thisIndex'
p3514
I7
sg15
(lp3515
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3516
S'space'
p3517
asg95
I7
sa(dp3518
g16
(lp3519
S'd'
asg18
S'Y'
sS'.thisRepN'
p3520
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3521
I0
sS'.thisN'
p3522
I440
sS'.thisIndex'
p3523
I2
sg15
(lp3524
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3525
S'space'
p3526
asg95
I2
sa(dp3527
g16
(lp3528
S'k'
asg18
S'Y'
sS'.thisRepN'
p3529
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3530
I1
sS'.thisN'
p3531
I441
sS'.thisIndex'
p3532
I7
sg15
(lp3533
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3534
S'space'
p3535
asg95
I7
sa(dp3536
g16
(lp3537
S'd'
asg18
S'N'
sS'.thisRepN'
p3538
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3539
I2
sS'.thisN'
p3540
I442
sS'.thisIndex'
p3541
I10
sg15
(lp3542
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3543
g16
(lp3544
S'd'
asg18
S'Y'
sS'.thisRepN'
p3545
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3546
I3
sS'.thisN'
p3547
I443
sS'.thisIndex'
p3548
I0
sg15
(lp3549
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3550
S'space'
p3551
asg95
I0
sa(dp3552
g16
(lp3553
S'k'
asg18
S'N'
sS'.thisRepN'
p3554
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3555
I4
sS'.thisN'
p3556
I444
sS'.thisIndex'
p3557
I9
sg15
(lp3558
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I9
sa(dp3559
g16
(lp3560
S'k'
asg18
S'Y'
sS'.thisRepN'
p3561
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3562
I5
sS'.thisN'
p3563
I445
sS'.thisIndex'
p3564
I4
sg15
(lp3565
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3566
g16
(lp3567
S'd'
asg18
S'Y'
sS'.thisRepN'
p3568
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3569
I6
sS'.thisN'
p3570
I446
sS'.thisIndex'
p3571
I4
sg15
(lp3572
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I4
sa(dp3573
g16
(lp3574
S'd'
asg18
S'N'
sS'.thisRepN'
p3575
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3576
I7
sS'.thisN'
p3577
I447
sS'.thisIndex'
p3578
I9
sg15
(lp3579
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3580
g16
(lp3581
S'k'
asg18
S'N'
sS'.thisRepN'
p3582
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3583
I8
sS'.thisN'
p3584
I448
sS'.thisIndex'
p3585
I10
sg15
(lp3586
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3587
g16
(lp3588
S'k'
asg18
S'N'
sg22
I38
sS'.thisN'
p3589
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3590
I9
sS'.thisRepN'
p3591
I40
sg21
I23
sS'.thisIndex'
p3592
I1
sg23
I25
sg15
(lp3593
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3594
g16
(lp3595
S'k'
asg95
I10
sS'.thisRepN'
p3596
I40
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3597
I10
sS'.thisN'
p3598
I450
sS'.thisIndex'
p3599
I10
sg15
(lp3600
S'd'
asg17
S'N'
sg14
I10
sa(dp3601
g16
(lp3602
S'd'
asg95
I0
sS'.thisRepN'
p3603
I41
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3604
I0
sS'.thisN'
p3605
I451
sS'.thisIndex'
p3606
I0
sg15
(lp3607
S'd'
asg17
S'Y'
sg14
I10
sa(dp3608
g16
(lp3609
S'd'
asg18
S'N'
sS'.thisRepN'
p3610
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3611
I1
sS'.thisN'
p3612
I452
sS'.thisIndex'
p3613
I10
sg15
(lp3614
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp3615
g16
(lp3616
S'k'
asg18
S'Y'
sS'.thisRepN'
p3617
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3618
I2
sS'.thisN'
p3619
I453
sS'.thisIndex'
p3620
I7
sg15
(lp3621
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3622
S'space'
p3623
asg95
I7
sa(dp3624
g16
(lp3625
S'k'
asg18
S'Y'
sS'.thisRepN'
p3626
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3627
I3
sS'.thisN'
p3628
I454
sS'.thisIndex'
p3629
I8
sg15
(lp3630
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3631
S'space'
p3632
asg95
I8
sa(dp3633
g16
(lp3634
S'd'
asg18
S'Y'
sS'.thisRepN'
p3635
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3636
I4
sS'.thisN'
p3637
I455
sS'.thisIndex'
p3638
I3
sg15
(lp3639
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3640
S'space'
p3641
asg95
I3
sa(dp3642
g16
(lp3643
S'd'
asg18
S'N'
sS'.thisRepN'
p3644
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3645
I5
sS'.thisN'
p3646
I456
sS'.thisIndex'
p3647
I3
sg15
(lp3648
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I3
sa(dp3649
g16
(lp3650
S'k'
asg18
S'Y'
sS'.thisRepN'
p3651
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3652
I6
sS'.thisN'
p3653
I457
sS'.thisIndex'
p3654
I10
sg15
(lp3655
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3656
S'space'
p3657
asg95
I10
sa(dp3658
g16
(lp3659
S'k'
asg18
S'N'
sS'.thisRepN'
p3660
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3661
I7
sS'.thisN'
p3662
I458
sS'.thisIndex'
p3663
I1
sg15
(lp3664
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3665
S'space'
p3666
asg95
I1
sa(dp3667
g16
(lp3668
S'k'
asg18
S'Y'
sS'.thisRepN'
p3669
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3670
I8
sS'.thisN'
p3671
I459
sS'.thisIndex'
p3672
I4
sg15
(lp3673
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3674
S'space'
p3675
asg95
I4
sa(dp3676
g16
(lp3677
S'd'
asg18
S'N'
sS'.thisRepN'
p3678
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3679
I9
sS'.thisN'
p3680
I460
sS'.thisIndex'
p3681
I0
sg15
(lp3682
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3683
S'space'
p3684
asg95
I0
sa(dp3685
g16
(lp3686
S'k'
asg18
S'Y'
sS'.thisRepN'
p3687
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3688
I10
sS'.thisN'
p3689
I461
sS'.thisIndex'
p3690
I5
sg15
(lp3691
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I5
sa(dp3692
g16
(lp3693
S'k'
asg18
S'N'
sS'.thisRepN'
p3694
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3695
I0
sS'.thisN'
p3696
I462
sS'.thisIndex'
p3697
I10
sg15
(lp3698
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3699
g16
(lp3700
S'd'
asg18
S'N'
sS'.thisRepN'
p3701
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3702
I1
sS'.thisN'
p3703
I463
sS'.thisIndex'
p3704
I0
sg15
(lp3705
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3706
g16
(lp3707
S'd'
asg18
S'N'
sS'.thisRepN'
p3708
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3709
I2
sS'.thisN'
p3710
I464
sS'.thisIndex'
p3711
I1
sg15
(lp3712
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3713
g16
(lp3714
S'd'
asg18
S'Y'
sS'.thisRepN'
p3715
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3716
I3
sS'.thisN'
p3717
I465
sS'.thisIndex'
p3718
I6
sg15
(lp3719
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I6
sa(dp3720
g16
(lp3721
S'k'
asg18
S'N'
sS'.thisRepN'
p3722
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3723
I4
sS'.thisN'
p3724
I466
sS'.thisIndex'
p3725
I3
sg15
(lp3726
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3727
g16
(lp3728
S'k'
asg18
S'N'
sS'.thisRepN'
p3729
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3730
I5
sS'.thisN'
p3731
I467
sS'.thisIndex'
p3732
I0
sg15
(lp3733
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I0
sa(dp3734
g16
(lp3735
S'k'
asg18
S'Y'
sS'.thisRepN'
p3736
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3737
I6
sS'.thisN'
p3738
I468
sS'.thisIndex'
p3739
I9
sg15
(lp3740
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3741
S'space'
p3742
asg95
I9
sa(dp3743
g16
(lp3744
S'd'
asg18
S'Y'
sS'.thisRepN'
p3745
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3746
I7
sS'.thisN'
p3747
I469
sS'.thisIndex'
p3748
I8
sg15
(lp3749
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3750
S'space'
p3751
asg95
I8
sa(dp3752
g16
(lp3753
S'd'
asg18
S'Y'
sS'.thisRepN'
p3754
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3755
I8
sS'.thisN'
p3756
I470
sS'.thisIndex'
p3757
I8
sg15
(lp3758
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3759
S'space'
p3760
asg95
I8
sa(dp3761
g16
(lp3762
S'k'
asg18
S'Y'
sS'.thisRepN'
p3763
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3764
I9
sS'.thisN'
p3765
I471
sS'.thisIndex'
p3766
I8
sg15
(lp3767
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3768
S'space'
p3769
asg95
I8
sa(dp3770
g16
(lp3771
S'd'
asg18
S'N'
sS'.thisRepN'
p3772
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3773
I10
sS'.thisN'
p3774
I472
sS'.thisIndex'
p3775
I1
sg15
(lp3776
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3777
g16
(lp3778
S'd'
asg18
S'N'
sS'.thisRepN'
p3779
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3780
I0
sS'.thisN'
p3781
I473
sS'.thisIndex'
p3782
I6
sg15
(lp3783
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3784
g16
(lp3785
S'k'
asg18
S'N'
sS'.thisRepN'
p3786
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3787
I1
sS'.thisN'
p3788
I474
sS'.thisIndex'
p3789
I1
sg15
(lp3790
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I1
sa(dp3791
g16
(lp3792
S'd'
asg18
S'N'
sS'.thisRepN'
p3793
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3794
I2
sS'.thisN'
p3795
I475
sS'.thisIndex'
p3796
I4
sg15
(lp3797
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3798
g16
(lp3799
S'd'
asg18
S'Y'
sS'.thisRepN'
p3800
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3801
I3
sS'.thisN'
p3802
I476
sS'.thisIndex'
p3803
I3
sg15
(lp3804
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3805
S'space'
p3806
asg95
I3
sa(dp3807
g16
(lp3808
S'd'
asg18
S'N'
sS'.thisRepN'
p3809
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3810
I4
sS'.thisN'
p3811
I477
sS'.thisIndex'
p3812
I9
sg15
(lp3813
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I9
sa(dp3814
g16
(lp3815
S'd'
asg18
S'N'
sS'.thisRepN'
p3816
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3817
I5
sS'.thisN'
p3818
I478
sS'.thisIndex'
p3819
I6
sg15
(lp3820
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I6
sa(dp3821
g16
(lp3822
S'd'
asg18
S'Y'
sS'.thisRepN'
p3823
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3824
I6
sS'.thisN'
p3825
I479
sS'.thisIndex'
p3826
I5
sg15
(lp3827
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3828
S'space'
p3829
asg95
I5
sa(dp3830
g16
(lp3831
S'k'
asg18
S'Y'
sS'.thisRepN'
p3832
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3833
I7
sS'.thisN'
p3834
I480
sS'.thisIndex'
p3835
I8
sg15
(lp3836
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3837
S'space'
p3838
asg95
I8
sa(dp3839
g16
(lp3840
S'k'
asg18
S'N'
sS'.thisRepN'
p3841
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3842
I8
sS'.thisN'
p3843
I481
sS'.thisIndex'
p3844
I10
sg15
(lp3845
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3846
g16
(lp3847
S'd'
asg18
S'Y'
sS'.thisRepN'
p3848
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3849
I9
sS'.thisN'
p3850
I482
sS'.thisIndex'
p3851
I6
sg15
(lp3852
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3853
S'space'
p3854
asg95
I6
sa(dp3855
g16
(lp3856
S'k'
asg18
S'N'
sS'.thisRepN'
p3857
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3858
I10
sS'.thisN'
p3859
I483
sS'.thisIndex'
p3860
I4
sg15
(lp3861
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3862
g16
(lp3863
S'd'
asg18
S'Y'
sS'.thisRepN'
p3864
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3865
I0
sS'.thisN'
p3866
I484
sS'.thisIndex'
p3867
I4
sg15
(lp3868
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I4
sa(dp3869
g16
(lp3870
S'k'
asg18
S'N'
sS'.thisRepN'
p3871
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3872
I1
sS'.thisN'
p3873
I485
sS'.thisIndex'
p3874
I1
sg15
(lp3875
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I1
sa(dp3876
g16
(lp3877
S'k'
asg18
S'N'
sS'.thisRepN'
p3878
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3879
I2
sS'.thisN'
p3880
I486
sS'.thisIndex'
p3881
I5
sg15
(lp3882
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3883
g16
(lp3884
S'd'
asg18
S'N'
sS'.thisRepN'
p3885
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3886
I3
sS'.thisN'
p3887
I487
sS'.thisIndex'
p3888
I6
sg15
(lp3889
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I6
sa(dp3890
g16
(lp3891
S'k'
asg18
S'N'
sS'.thisRepN'
p3892
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3893
I4
sS'.thisN'
p3894
I488
sS'.thisIndex'
p3895
I10
sg15
(lp3896
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp3897
g16
(lp3898
S'd'
asg18
S'Y'
sS'.thisRepN'
p3899
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3900
I5
sS'.thisN'
p3901
I489
sS'.thisIndex'
p3902
I1
sg15
(lp3903
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3904
S'k'
asg95
I1
sa(dp3905
g16
(lp3906
S'd'
asg18
S'N'
sS'.thisRepN'
p3907
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3908
I6
sS'.thisN'
p3909
I490
sS'.thisIndex'
p3910
I6
sg15
(lp3911
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3912
S'space'
p3913
asg95
I6
sa(dp3914
g16
(lp3915
S'd'
asg18
S'Y'
sS'.thisRepN'
p3916
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3917
I7
sS'.thisN'
p3918
I491
sS'.thisIndex'
p3919
I1
sg15
(lp3920
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3921
S'space'
p3922
asg95
I1
sa(dp3923
g16
(lp3924
S'd'
asg18
S'N'
sS'.thisRepN'
p3925
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3926
I8
sS'.thisN'
p3927
I492
sS'.thisIndex'
p3928
I9
sg15
(lp3929
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I9
sa(dp3930
g16
(lp3931
S'k'
asg18
S'Y'
sS'.thisRepN'
p3932
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3933
I9
sS'.thisN'
p3934
I493
sS'.thisIndex'
p3935
I5
sg15
(lp3936
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3937
S'space'
p3938
asg95
I5
sa(dp3939
g16
(lp3940
S'k'
asg18
S'N'
sS'.thisRepN'
p3941
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3942
I10
sS'.thisN'
p3943
I494
sS'.thisIndex'
p3944
I8
sg15
(lp3945
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3946
g16
(lp3947
S'k'
asg18
S'N'
sS'.thisRepN'
p3948
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3949
I0
sS'.thisN'
p3950
I495
sS'.thisIndex'
p3951
I1
sg15
(lp3952
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3953
g16
(lp3954
S'd'
asg18
S'N'
sS'.thisRepN'
p3955
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3956
I1
sS'.thisN'
p3957
I496
sS'.thisIndex'
p3958
I9
sg15
(lp3959
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3960
g16
(lp3961
S'd'
asg18
S'N'
sS'.thisRepN'
p3962
I45
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3963
I2
sS'.thisN'
p3964
I497
sS'.thisIndex'
p3965
I9
sg15
(lp3966
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3967
S'space'
p3968
asg95
I9
sa(dp3969
g16
(lp3970
S'd'
asg18
S'N'
sS'.thisRepN'
p3971
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3972
I3
sS'.thisN'
p3973
I498
sS'.thisIndex'
p3974
I7
sg15
(lp3975
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I7
sa(dp3976
g16
(lp3977
S'd'
asg18
S'N'
sg22
I40
sS'.thisN'
p3978
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3979
I4
sS'.thisRepN'
p3980
I45
sg21
I26
sS'.thisIndex'
p3981
I3
sg23
I19
sg15
(lp3982
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3983
g16
(lp3984
S'd'
asS'.thisIndex'
p3985
I5
sS'.thisRepN'
p3986
I45
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3987
I5
sS'.thisN'
p3988
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp3989
S'k'
asg17
S'Y'
sg14
I11
sg95
I5
sa(dp3990
g16
(lp3991
S'k'
asS'.thisIndex'
p3992
I8
sS'.thisRepN'
p3993
I45
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3994
I6
sS'.thisN'
p3995
I501
sg25
S'Y'
sg15
(lp3996
S'k'
asg17
S'N'
sg14
I11
sg95
I8
sa(dp3997
g16
(lp3998
S'd'
asg18
S'N'
sS'.thisRepN'
p3999
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4000
I7
sS'.thisN'
p4001
I502
sg25
S'Y'
sg15
(lp4002
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4003
I1
sa(dp4004
g16
(lp4005
S'd'
asg18
S'Y'
sS'.thisRepN'
p4006
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4007
I8
sS'.thisN'
p4008
I503
sg25
S'Y'
sg15
(lp4009
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4010
S'space'
p4011
asg95
I0
sS'.thisIndex'
p4012
I0
sa(dp4013
g16
(lp4014
S'd'
asg18
S'N'
sS'.thisRepN'
p4015
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4016
I9
sS'.thisN'
p4017
I504
sg25
S'Y'
sg15
(lp4018
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4019
I7
sa(dp4020
g16
(lp4021
S'k'
asg18
S'Y'
sS'.thisRepN'
p4022
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4023
I10
sS'.thisN'
p4024
I505
sg25
S'Y'
sg15
(lp4025
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4026
S'space'
p4027
asg95
I3
sS'.thisIndex'
p4028
I3
sa(dp4029
g16
(lp4030
S'd'
asg18
S'N'
sS'.thisRepN'
p4031
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4032
I0
sS'.thisN'
p4033
I506
sg25
S'Y'
sg15
(lp4034
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4035
I7
sa(dp4036
g16
(lp4037
S'd'
asg18
S'N'
sS'.thisRepN'
p4038
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4039
I1
sS'.thisN'
p4040
I507
sg25
S'Y'
sg15
(lp4041
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4042
I5
sa(dp4043
g16
(lp4044
S'd'
asg18
S'N'
sS'.thisRepN'
p4045
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4046
I2
sS'.thisN'
p4047
I508
sg25
S'Y'
sg15
(lp4048
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4049
I1
sa(dp4050
g16
(lp4051
S'd'
asg18
S'N'
sS'.thisRepN'
p4052
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4053
I3
sS'.thisN'
p4054
I509
sg25
S'Y'
sg15
(lp4055
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4056
I2
sa(dp4057
g16
(lp4058
S'k'
asg18
S'Y'
sS'.thisRepN'
p4059
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4060
I4
sS'.thisN'
p4061
I510
sg25
S'Y'
sg15
(lp4062
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4063
S'space'
p4064
asg95
I10
sS'.thisIndex'
p4065
I10
sa(dp4066
g16
(lp4067
S'd'
asg18
S'N'
sS'.thisRepN'
p4068
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4069
I5
sS'.thisN'
p4070
I511
sg25
S'Y'
sg15
(lp4071
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4072
I9
sa(dp4073
g16
(lp4074
S'k'
asg18
S'N'
sS'.thisRepN'
p4075
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4076
I6
sS'.thisN'
p4077
I512
sg25
S'Y'
sg15
(lp4078
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4079
I1
sa(dp4080
g16
(lp4081
S'k'
asg18
S'Y'
sS'.thisRepN'
p4082
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4083
I7
sS'.thisN'
p4084
I513
sg25
S'Y'
sg15
(lp4085
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4086
S'space'
p4087
asg95
I8
sS'.thisIndex'
p4088
I8
sa(dp4089
g16
(lp4090
S'k'
asg18
S'N'
sS'.thisRepN'
p4091
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4092
I8
sS'.thisN'
p4093
I514
sg25
S'Y'
sg15
(lp4094
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4095
I7
sa(dp4096
g16
(lp4097
S'd'
asg18
S'N'
sS'.thisRepN'
p4098
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4099
I9
sS'.thisN'
p4100
I515
sg25
S'Y'
sg15
(lp4101
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4102
I10
sa(dp4103
g16
(lp4104
S'd'
asg18
S'Y'
sS'.thisRepN'
p4105
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4106
I10
sS'.thisN'
p4107
I516
sg25
S'Y'
sg15
(lp4108
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4109
S'space'
p4110
asg95
I3
sS'.thisIndex'
p4111
I3
sa(dp4112
g16
(lp4113
S'd'
asg18
S'N'
sS'.thisRepN'
p4114
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4115
I0
sS'.thisN'
p4116
I517
sg25
S'Y'
sg15
(lp4117
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4118
I5
sa(dp4119
g16
(lp4120
S'd'
asg18
S'Y'
sS'.thisRepN'
p4121
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4122
I1
sS'.thisN'
p4123
I518
sg25
S'Y'
sg15
(lp4124
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4125
S'space'
p4126
asg95
I0
sS'.thisIndex'
p4127
I0
sa(dp4128
g16
(lp4129
S'd'
asg18
S'N'
sS'.thisRepN'
p4130
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4131
I2
sS'.thisN'
p4132
I519
sg25
S'Y'
sg15
(lp4133
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4134
I1
sa(dp4135
g16
(lp4136
S'd'
asg18
S'Y'
sS'.thisRepN'
p4137
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4138
I3
sS'.thisN'
p4139
I520
sg25
S'Y'
sg15
(lp4140
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4141
S'space'
p4142
asg95
I7
sS'.thisIndex'
p4143
I7
sa(dp4144
g16
(lp4145
S'k'
asg18
S'Y'
sS'.thisRepN'
p4146
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4147
I4
sS'.thisN'
p4148
I521
sg25
S'Y'
sg15
(lp4149
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4150
S'space'
p4151
asg95
I10
sS'.thisIndex'
p4152
I10
sa(dp4153
g18
S'N'
sS'.thisRepN'
p4154
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4155
I5
sS'.thisN'
p4156
I522
sg25
S'Y'
sg15
Nsg30
Vm
sg17
S'Timed out'
p4157
sg14
I11
sg19
(lp4158
S'space'
p4159
asg95
I9
sS'.thisIndex'
p4160
I9
sa(dp4161
g16
(lp4162
S'd'
asg18
S'N'
sS'.thisRepN'
p4163
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4164
I6
sS'.thisN'
p4165
I523
sg25
S'Y'
sg15
(lp4166
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4167
I4
sa(dp4168
g16
(lp4169
S'd'
asg18
S'N'
sS'.thisRepN'
p4170
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4171
I7
sS'.thisN'
p4172
I524
sg25
S'Y'
sg15
(lp4173
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4174
S'space'
p4175
asg95
I7
sS'.thisIndex'
p4176
I7
sa(dp4177
g16
(lp4178
S'k'
asg18
S'Y'
sS'.thisRepN'
p4179
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4180
I8
sS'.thisN'
p4181
I525
sg25
S'Y'
sg15
(lp4182
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4183
S'space'
p4184
asg95
I2
sS'.thisIndex'
p4185
I2
sa(dp4186
g16
(lp4187
S'k'
asg18
S'N'
sS'.thisRepN'
p4188
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4189
I9
sS'.thisN'
p4190
I526
sg25
S'Y'
sg15
(lp4191
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4192
I3
sa(dp4193
g16
(lp4194
S'd'
asg18
S'N'
sS'.thisRepN'
p4195
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4196
I10
sS'.thisN'
p4197
I527
sg25
S'Y'
sg15
(lp4198
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4199
I6
sa(dp4200
g16
(lp4201
S'd'
asg18
S'N'
sS'.thisRepN'
p4202
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4203
I0
sS'.thisN'
p4204
I528
sg25
S'Y'
sg15
(lp4205
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4206
I2
sa(dp4207
g16
(lp4208
S'd'
asg18
S'Y'
sS'.thisRepN'
p4209
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4210
I1
sS'.thisN'
p4211
I529
sg25
S'Y'
sg15
(lp4212
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4213
S'space'
p4214
asg95
I0
sS'.thisIndex'
p4215
I0
sa(dp4216
g16
(lp4217
S'k'
asg18
S'Y'
sS'.thisRepN'
p4218
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4219
I2
sS'.thisN'
p4220
I530
sg25
S'Y'
sg15
(lp4221
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4222
S'space'
p4223
asg95
I9
sS'.thisIndex'
p4224
I9
sa(dp4225
g18
S'N'
sS'.thisRepN'
p4226
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4227
I3
sS'.thisN'
p4228
I531
sg25
S'Y'
sg15
Nsg30
Vm
sg17
g4157
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4229
I10
sa(dp4230
g16
(lp4231
S'k'
asg18
S'Y'
sS'.thisRepN'
p4232
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4233
I4
sS'.thisN'
p4234
I532
sg25
S'Y'
sg15
(lp4235
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4236
S'space'
p4237
asg95
I1
sS'.thisIndex'
p4238
I1
sa(dp4239
g16
(lp4240
S'k'
asg18
S'N'
sS'.thisRepN'
p4241
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4242
I5
sS'.thisN'
p4243
I533
sg25
S'Y'
sg15
(lp4244
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4245
I10
sa(dp4246
g16
(lp4247
S'd'
asg18
S'Y'
sS'.thisRepN'
p4248
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4249
I6
sS'.thisN'
p4250
I534
sg25
S'Y'
sg15
(lp4251
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4252
S'space'
p4253
asg95
I5
sS'.thisIndex'
p4254
I5
sa(dp4255
g16
(lp4256
S'd'
asg18
S'Y'
sS'.thisRepN'
p4257
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4258
I7
sS'.thisN'
p4259
I535
sg25
S'Y'
sg15
(lp4260
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4261
S'space'
p4262
asg95
I10
sS'.thisIndex'
p4263
I10
sa(dp4264
g16
(lp4265
S'k'
asg18
S'N'
sS'.thisRepN'
p4266
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4267
I8
sS'.thisN'
p4268
I536
sg25
S'Y'
sg15
(lp4269
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4270
I5
sa(dp4271
g16
(lp4272
S'k'
asg18
S'Y'
sS'.thisRepN'
p4273
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4274
I9
sS'.thisN'
p4275
I537
sg25
S'Y'
sg15
(lp4276
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4277
I0
sa(dp4278
g16
(lp4279
S'k'
asg18
S'N'
sS'.thisRepN'
p4280
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4281
I10
sS'.thisN'
p4282
I538
sg25
S'Y'
sg15
(lp4283
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4284
I4
sa(dp4285
g16
(lp4286
S'k'
asg18
S'N'
sS'.thisRepN'
p4287
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4288
I0
sS'.thisN'
p4289
I539
sg25
S'Y'
sg15
(lp4290
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4291
I6
sa(dp4292
g16
(lp4293
S'd'
asg18
S'N'
sS'.thisRepN'
p4294
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4295
I1
sS'.thisN'
p4296
I540
sg25
S'Y'
sg15
(lp4297
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4298
I8
sa(dp4299
g16
(lp4300
S'k'
asg18
S'Y'
sS'.thisRepN'
p4301
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4302
I2
sS'.thisN'
p4303
I541
sg25
S'Y'
sg15
(lp4304
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4305
S'space'
p4306
asg95
I10
sS'.thisIndex'
p4307
I10
sa(dp4308
g16
(lp4309
S'd'
asg18
S'N'
sS'.thisRepN'
p4310
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4311
I3
sS'.thisN'
p4312
I542
sg25
S'Y'
sg15
(lp4313
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4314
I3
sa(dp4315
g16
(lp4316
S'k'
asg18
S'N'
sS'.thisRepN'
p4317
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4318
I4
sS'.thisN'
p4319
I543
sg25
S'Y'
sg15
(lp4320
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4321
I4
sa(dp4322
g16
(lp4323
S'k'
asg18
S'N'
sS'.thisRepN'
p4324
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4325
I5
sS'.thisN'
p4326
I544
sg25
S'Y'
sg15
(lp4327
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4328
I7
sa(dp4329
g16
(lp4330
S'k'
asg18
S'Y'
sS'.thisRepN'
p4331
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4332
I6
sS'.thisN'
p4333
I545
sg25
S'Y'
sg15
(lp4334
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4335
I6
sa(dp4336
g16
(lp4337
S'k'
asg18
S'N'
sS'.thisRepN'
p4338
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4339
I7
sS'.thisN'
p4340
I546
sg25
S'Y'
sg15
(lp4341
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4342
I2
sa(dp4343
g16
(lp4344
S'd'
asg18
S'Y'
sS'.thisRepN'
p4345
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4346
I8
sS'.thisN'
p4347
I547
sg25
S'Y'
sg15
(lp4348
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4349
I3
sa(dp4350
g16
(lp4351
S'k'
asg18
S'Y'
sS'.thisRepN'
p4352
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4353
I9
sS'.thisN'
p4354
I548
sg25
S'Y'
sg15
(lp4355
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4356
S'space'
p4357
asg95
I6
sS'.thisIndex'
p4358
I6
sa(dp4359
g16
(lp4360
S'k'
asg18
S'N'
sg22
I43
sg26
S'Y'
sS'.thisN'
p4361
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4362
I10
sS'.thisRepN'
p4363
I49
sg21
I26
sg25
S'Y'
sg23
I19
sg15
(lp4364
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4365
I10
sa(dp4366
g16
(lp4367
S'k'
asS'.thisIndex'
p4368
I5
sS'.thisRepN'
p4369
I50
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p4370
I0
sS'.thisN'
p4371
I550
sg25
S'Y'
sg15
(lp4372
S'd'
asg17
S'Y'
sg14
I12
sg95
I5
sa(dp4373
g16
(lp4374
S'd'
asS'.thisIndex'
p4375
I7
sS'.thisRepN'
p4376
I50
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p4377
I1
sS'.thisN'
p4378
I551
sg25
S'Y'
sg15
(lp4379
S'd'
asg17
S'N'
sg14
I12
sg95
I7
sa(dp4380
g16
(lp4381
S'k'
asg18
S'Y'
sS'.thisRepN'
p4382
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4383
I2
sS'.thisN'
p4384
I552
sg25
S'Y'
sg15
(lp4385
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4386
S'space'
p4387
asg95
I10
sS'.thisIndex'
p4388
I10
sa(dp4389
g16
(lp4390
S'k'
asg18
S'Y'
sS'.thisRepN'
p4391
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4392
I3
sS'.thisN'
p4393
I553
sg25
S'Y'
sg15
(lp4394
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4395
S'space'
p4396
asg95
I6
sS'.thisIndex'
p4397
I6
sa(dp4398
g16
(lp4399
S'k'
asg18
S'Y'
sS'.thisRepN'
p4400
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4401
I4
sS'.thisN'
p4402
I554
sg25
S'Y'
sg15
(lp4403
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4404
S'space'
p4405
asg95
I7
sS'.thisIndex'
p4406
I7
sa(dp4407
g16
(lp4408
S'd'
asg18
S'Y'
sS'.thisRepN'
p4409
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4410
I5
sS'.thisN'
p4411
I555
sg25
S'Y'
sg15
(lp4412
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4413
S'space'
p4414
asg95
I8
sS'.thisIndex'
p4415
I8
sa(dp4416
g16
(lp4417
S'd'
asg18
S'Y'
sS'.thisRepN'
p4418
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4419
I6
sS'.thisN'
p4420
I556
sg25
S'Y'
sg15
(lp4421
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4422
S'space'
p4423
asg95
I2
sS'.thisIndex'
p4424
I2
sa(dp4425
g16
(lp4426
S'k'
asg18
S'Y'
sS'.thisRepN'
p4427
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4428
I7
sS'.thisN'
p4429
I557
sg25
S'Y'
sg15
(lp4430
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4431
S'space'
p4432
asg95
I1
sS'.thisIndex'
p4433
I1
sa(dp4434
g16
(lp4435
S'k'
asg18
S'N'
sS'.thisRepN'
p4436
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4437
I8
sS'.thisN'
p4438
I558
sg25
S'Y'
sg15
(lp4439
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4440
I3
sa(dp4441
g16
(lp4442
S'd'
asg18
S'Y'
sS'.thisRepN'
p4443
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4444
I9
sS'.thisN'
p4445
I559
sg25
S'Y'
sg15
(lp4446
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4447
S'space'
p4448
asg95
I9
sS'.thisIndex'
p4449
I9
sa(dp4450
g16
(lp4451
S'd'
asg18
S'N'
sS'.thisRepN'
p4452
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4453
I10
sS'.thisN'
p4454
I560
sg25
S'Y'
sg15
(lp4455
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4456
I7
sa(dp4457
g16
(lp4458
S'k'
asg18
S'Y'
sS'.thisRepN'
p4459
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4460
I0
sS'.thisN'
p4461
I561
sg25
S'Y'
sg15
(lp4462
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4463
I9
sa(dp4464
g16
(lp4465
S'd'
asg18
S'Y'
sS'.thisRepN'
p4466
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4467
I1
sS'.thisN'
p4468
I562
sg25
S'Y'
sg15
(lp4469
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4470
S'space'
p4471
asg95
I9
sS'.thisIndex'
p4472
I9
sa(dp4473
g16
(lp4474
S'k'
asg18
S'Y'
sS'.thisRepN'
p4475
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4476
I2
sS'.thisN'
p4477
I563
sg25
S'Y'
sg15
(lp4478
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4479
S'space'
p4480
asg95
I3
sS'.thisIndex'
p4481
I3
sa(dp4482
g16
(lp4483
S'k'
asg18
S'Y'
sS'.thisRepN'
p4484
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4485
I3
sS'.thisN'
p4486
I564
sg25
S'Y'
sg15
(lp4487
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4488
S'space'
p4489
asg95
I3
sS'.thisIndex'
p4490
I3
sa(dp4491
g16
(lp4492
S'd'
asg18
S'N'
sS'.thisRepN'
p4493
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4494
I4
sS'.thisN'
p4495
I565
sg25
S'Y'
sg15
(lp4496
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4497
I6
sa(dp4498
g16
(lp4499
S'd'
asg18
S'N'
sS'.thisRepN'
p4500
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4501
I5
sS'.thisN'
p4502
I566
sg25
S'Y'
sg15
(lp4503
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4504
I5
sa(dp4505
g16
(lp4506
S'k'
asg18
S'Y'
sS'.thisRepN'
p4507
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4508
I6
sS'.thisN'
p4509
I567
sg25
S'Y'
sg15
(lp4510
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4511
S'space'
p4512
asg95
I7
sS'.thisIndex'
p4513
I7
sa(dp4514
g16
(lp4515
S'k'
asg18
S'Y'
sS'.thisRepN'
p4516
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4517
I7
sS'.thisN'
p4518
I568
sg25
S'Y'
sg15
(lp4519
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4520
S'space'
p4521
asg95
I8
sS'.thisIndex'
p4522
I8
sa(dp4523
g16
(lp4524
S'k'
asg18
S'Y'
sS'.thisRepN'
p4525
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4526
I8
sS'.thisN'
p4527
I569
sg25
S'Y'
sg15
(lp4528
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4529
S'space'
p4530
asg95
I4
sS'.thisIndex'
p4531
I4
sa(dp4532
g16
(lp4533
S'k'
asg18
S'N'
sS'.thisRepN'
p4534
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4535
I9
sS'.thisN'
p4536
I570
sg25
S'Y'
sg15
(lp4537
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4538
I10
sa(dp4539
g16
(lp4540
S'k'
asg18
S'Y'
sS'.thisRepN'
p4541
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4542
I10
sS'.thisN'
p4543
I571
sg25
S'Y'
sg15
(lp4544
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4545
S'space'
p4546
asg95
I5
sS'.thisIndex'
p4547
I5
sa(dp4548
g16
(lp4549
S'd'
asg18
S'Y'
sS'.thisRepN'
p4550
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4551
I0
sS'.thisN'
p4552
I572
sg25
S'Y'
sg15
(lp4553
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4554
S'space'
p4555
asg95
I9
sS'.thisIndex'
p4556
I9
sa(dp4557
g16
(lp4558
S'd'
asg18
S'Y'
sS'.thisRepN'
p4559
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4560
I1
sS'.thisN'
p4561
I573
sg25
S'Y'
sg15
(lp4562
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4563
I0
sa(dp4564
g16
(lp4565
S'd'
asg18
S'Y'
sS'.thisRepN'
p4566
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4567
I2
sS'.thisN'
p4568
I574
sg25
S'Y'
sg15
(lp4569
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4570
S'space'
p4571
asg95
I2
sS'.thisIndex'
p4572
I2
sa(dp4573
g16
(lp4574
S'k'
asg18
S'Y'
sS'.thisRepN'
p4575
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4576
I3
sS'.thisN'
p4577
I575
sg25
S'Y'
sg15
(lp4578
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4579
S'space'
p4580
asg95
I10
sS'.thisIndex'
p4581
I10
sa(dp4582
g16
(lp4583
S'd'
asg18
S'N'
sS'.thisRepN'
p4584
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4585
I4
sS'.thisN'
p4586
I576
sg25
S'Y'
sg15
(lp4587
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4588
I3
sa(dp4589
g16
(lp4590
S'k'
asg18
S'N'
sS'.thisRepN'
p4591
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4592
I5
sS'.thisN'
p4593
I577
sg25
S'Y'
sg15
(lp4594
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4595
S'space'
p4596
asg95
I1
sS'.thisIndex'
p4597
I1
sa(dp4598
g16
(lp4599
S'k'
asg18
S'Y'
sS'.thisRepN'
p4600
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4601
I6
sS'.thisN'
p4602
I578
sg25
S'Y'
sg15
(lp4603
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4604
S'space'
p4605
asg95
I7
sS'.thisIndex'
p4606
I7
sa(dp4607
g16
(lp4608
S'd'
asg18
S'Y'
sS'.thisRepN'
p4609
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4610
I7
sS'.thisN'
p4611
I579
sg25
S'Y'
sg15
(lp4612
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4613
S'space'
p4614
asg95
I5
sS'.thisIndex'
p4615
I5
sa(dp4616
g16
(lp4617
S'k'
asg18
S'N'
sS'.thisRepN'
p4618
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4619
I8
sS'.thisN'
p4620
I580
sg25
S'Y'
sg15
(lp4621
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4622
I4
sa(dp4623
g16
(lp4624
S'k'
asg18
S'N'
sS'.thisRepN'
p4625
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4626
I9
sS'.thisN'
p4627
I581
sg25
S'Y'
sg15
(lp4628
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4629
I5
sa(dp4630
g16
(lp4631
S'k'
asg18
S'N'
sS'.thisRepN'
p4632
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4633
I10
sS'.thisN'
p4634
I582
sg25
S'Y'
sg15
(lp4635
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4636
I0
sa(dp4637
g16
(lp4638
S'k'
asg18
S'Y'
sS'.thisRepN'
p4639
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4640
I0
sS'.thisN'
p4641
I583
sg25
S'Y'
sg15
(lp4642
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4643
S'space'
p4644
asg95
I9
sS'.thisIndex'
p4645
I9
sa(dp4646
g16
(lp4647
S'd'
asg18
S'N'
sS'.thisRepN'
p4648
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4649
I1
sS'.thisN'
p4650
I584
sg25
S'Y'
sg15
(lp4651
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4652
I4
sa(dp4653
g16
(lp4654
S'd'
asg18
S'Y'
sS'.thisRepN'
p4655
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4656
I2
sS'.thisN'
p4657
I585
sg25
S'Y'
sg15
(lp4658
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4659
I7
sa(dp4660
g16
(lp4661
S'k'
asg18
S'Y'
sS'.thisRepN'
p4662
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4663
I3
sS'.thisN'
p4664
I586
sg25
S'Y'
sg15
(lp4665
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4666
S'space'
p4667
asg95
I6
sS'.thisIndex'
p4668
I6
sa(dp4669
g16
(lp4670
S'd'
asg18
S'Y'
sS'.thisRepN'
p4671
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4672
I4
sS'.thisN'
p4673
I587
sg25
S'Y'
sg15
(lp4674
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4675
S'space'
p4676
asg95
I6
sS'.thisIndex'
p4677
I6
sa(dp4678
g16
(lp4679
S'k'
asg18
S'N'
sS'.thisRepN'
p4680
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4681
I5
sS'.thisN'
p4682
I588
sg25
S'Y'
sg15
(lp4683
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4684
I0
sa(dp4685
g16
(lp4686
S'd'
asg18
S'N'
sS'.thisRepN'
p4687
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4688
I6
sS'.thisN'
p4689
I589
sg25
S'Y'
sg15
(lp4690
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4691
I1
sa(dp4692
g16
(lp4693
S'k'
asg18
S'N'
sS'.thisRepN'
p4694
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4695
I7
sS'.thisN'
p4696
I590
sg25
S'Y'
sg15
(lp4697
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4698
I8
sa(dp4699
g16
(lp4700
S'd'
asg18
S'N'
sS'.thisRepN'
p4701
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4702
I8
sS'.thisN'
p4703
I591
sg25
S'Y'
sg15
(lp4704
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4705
I5
sa(dp4706
g16
(lp4707
S'k'
asg18
S'N'
sS'.thisRepN'
p4708
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4709
I9
sS'.thisN'
p4710
I592
sg25
S'Y'
sg15
(lp4711
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4712
I6
sa(dp4713
g16
(lp4714
S'k'
asg18
S'N'
sS'.thisRepN'
p4715
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4716
I10
sS'.thisN'
p4717
I593
sg25
S'Y'
sg15
(lp4718
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4719
I7
sa(dp4720
g16
(lp4721
S'k'
asg18
S'N'
sS'.thisRepN'
p4722
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4723
I0
sS'.thisN'
p4724
I594
sg25
S'Y'
sg15
(lp4725
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4726
I6
sa(dp4727
g16
(lp4728
S'k'
asg18
S'N'
sS'.thisRepN'
p4729
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4730
I1
sS'.thisN'
p4731
I595
sg25
S'Y'
sg15
(lp4732
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4733
I4
sa(dp4734
g16
(lp4735
S'd'
asg18
S'N'
sS'.thisRepN'
p4736
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4737
I2
sS'.thisN'
p4738
I596
sg25
S'Y'
sg15
(lp4739
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4740
I2
sa(dp4741
g16
(lp4742
S'k'
asg18
S'N'
sS'.thisRepN'
p4743
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4744
I3
sS'.thisN'
p4745
I597
sg25
S'Y'
sg15
(lp4746
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4747
I0
sa(dp4748
g16
(lp4749
S'k'
asg18
S'N'
sS'.thisRepN'
p4750
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4751
I4
sS'.thisN'
p4752
I598
sg25
S'Y'
sg15
(lp4753
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4754
I1
sa(dp4755
g16
(lp4756
S'd'
asg18
S'N'
sg22
I44
sg26
S'Y'
sS'.thisN'
p4757
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4758
I5
sS'.thisRepN'
p4759
I54
sg21
I25
sg25
S'Y'
sg23
I25
sg15
(lp4760
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4761
I4
sasS'loops'
p4762
(lp4763
g1
(g35
g3
NtRp4764
(dp4765
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4766
sg40
(lp4767
sg41
I75499856
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4768
g48
g49
(g50
g51
g52
S'b'
tRp4769
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4770
(I1
(I600
I1
tg55
I00
S'\x00\x00\x99C\x00\x00\x0fD\x00\x80\xe8C\x00\x00\xd0C\x00\x00]C\x00\x00CC\x00\x00\x82B\x00\x00\xfaB\x00\x80\xa7C\x00\x00\xa4B\x00\x00\x8fC\x00\x00\xb9C\x00\x00sC\x00\x00\xa5C\x00\x00\xfeC\x00\x80\xd7C\x00\x00\xe6C\x00\x80\xbdC\x00\x00\x15D\x00\x80\xd5C\x00\x00\x94C\x00\x00\xf5C\x00\x80\xecC\x00\xc0\x08D\x00\x80\x92C\x00\x80\xf8C\x00\x80\xabC\x00\x00\xe8B\x00\x00<B\x00@\x13D\x00\x00\x83C\x00\x00\xa0A\x00\x00ZC\x00\x80\xa5C\x00\x00\xb8A\x00\x00~C\x00\x00\xfcB\x00\x00\x80A\x00\x00\x0bD\x00\x00HB\x00\x80\xacC\x00\x00^C\x00\x00\x07D\x00\x00\xcdC\x00\x80\xe1C\x00\x80\xd1C\x00\x00\xefC\x00\x80\x0cD\x00\x00\x0cC\x00\x00\xd5C\x00\x00\xb2C\x00\x00.C\x00\x00\xa0@\x00\x00hB\x00\x80\xafC\x00\x80\x88C\x00\xc0\x10D\x00\x00\x0bC\x00\x00,B\x00\x00\xfbC\x00\x80\x02D\x00\x00\xa0B\x00\x80\x97C\x00\x80\xcdC\x00\x00LC\x00\x00=C\x00\x00\xb3C\x00\x80\xdfC\x00\x00mC\x00\x80\x0fD\x00@\rD\x00\x00\xb4B\x00\x00|B\x00\x00{C\x00\x00\x1fC\x00\x00\xbfC\x00\x80\xc7C\x00\x00\xf6C\x00\x80\xe7C\x00\x00\x80B\x00\x007C\x00\x00\x98B\x00\x00/C\x00\x00rC\x00\x80\xd6C\x00\x00\xc4B\x00\x00\xf1C\x00\x00\xd2C\x00\x00\xbcB\x00\x00EC\x00\x00\xf9C\x00\x80\xd8C\x00\x00\xc6B\x00\x00NC\x00\x80\xfeC\x00\x00\xf8C\x00\x00TB\x00\x00(B\x00\x00\xd8B\x00\x80\xdbC\x00\x00"C\x00\x80\xbcC\x00\x00\xfaC\x00\x80\xbfC\x00\x00\x00A\x00\x80\x9bC\x00\x00\x98A\x00\x00\x0cB\x00\x80\x94C\x00\xc0\x04D\x00\x00TC\x00\x00\xc2C\x00\x80\x07D\x00\xc0\x12D\x00\x00\x03D\x00\x001C\x00\x00\xa7C\x00\x00\xf2C\x00\x80\x8aC\x00\x00\x02C\x00\x00\x80@\x00\x00\xdcC\x00\x00\xb6B\x00\x00\x13C\x00\x00@@\x00\x00\x9dC\x00\x80\xd0C\x00\x80\xa3C\x00@\x01D\x00\x00\xb8B\x00\x005C\x00\x00\x18B\x00\x00\x97C\x00\x00@C\x00\x80\xefC\x00\x80\xf5C\x00\x80\xccC\x00\x80\x8cC\x00\x00\x01C\x00\x80\x82C\x00\x00hC\x00\x00\xcaB\x00\x00\xdfC\x00\x00\x04B\x00\x004B\x00\x00\xccC\x00\x00,C\x00\x00\x81C\x00\x00\xddC\x00\x00\xd6C\x00\x80\x85C\x00\x00zC\x00\x00 B\x00\x00\xabC\x00\x00\x89C\x00\x00+C\x00\x00\xbcC\x00\x00\x11C\x00\x00\xe8C\x00\x00\xecC\x00\x80\xf9C\x00\x80\x84C\x00\x00\x8eB\x00\x00LB\x00\x00[C\x00\x80\x8bC\x00\x00\xf8A\x00\x00\x08C\x00\x00\xfcC\x00\x00\xd0A\x00\x00\x8aB\x00\x00\xc8A\x00\x80\xf4C\x00\x80\xddC\x00\x00\xb4C\x00\x00\xf2B\x00\x008B\x00\x00(C\x00\x80\x86C\x00\x80\xadC\x00\x80\xc9C\x00\x80\xa8C\x00\x00\xc6C\x00\x80\xb2C\x00\x80\xffC\x00\x00\xe0B\x00\x00iC\x00\x80\x98C\x00\x00\x82C\x00\x00\xe4C\x00\x80\xc8C\x00\xc0\x00D\x00\x00\xa9C\x00\x80\xfbC\x00\x00\xecB\x00\x00\x03C\x00\x00\x9fC\x00\xc0\x15D\x00\x80\xa2C\x00\x00\x04D\x00@\x12D\x00\x00BC\x00\x80\xc1C\x00\x00\x0cD\x00\x00\x88B\x00\x00\x1eC\x00\x80\x93C\x00\x80\rD\x00\x00\x1aC\x00\x80\xfdC\x00\x00\xd0B\x00\x80\xb0C\x00\x00\x8cB\x00\x80\xcfC\x00\x00\x8dC\x00\x00\xc8B\x00\x00\xaaB\x00\x006C\x00\x00xC\x00\x00\x02D\x00\x80\xa9C\x00\x00%C\x00\x00\xbbC\x00\x80\xa0C\x00\x00\x93C\x00\x00\xb6C\x00\x00\xd9C\x00\xc0\x02D\x00\x80\x87C\x00\x80\x05D\x00\x00\x90C\x00\x00\x96C\x00\x00vC\x00\x00\xeeC\x00\xc0\x05D\x00\x80\x01D\x00\x00\x91C\x00\xc0\x0bD\x00\x00\x01D\x00\x00\xfdC\x00\x00\xdaB\x00\x80\xb9C\x00@\x0fD\x00\x00\x9bC\x00\x00yC\x00\x80\xc6C\x00\x00dB\x00\x80\xedC\x00\x80\xeeC\x00\x00\xd8C\x00\x00\x90A\x00\x80\xaeC\x00\xc0\x13D\x00\x00$C\x00\x00\x8bC\x00\x00\x05C\x00\x00wC\x00\x80\xb6C\x00\xc0\tD\x00\x80\xb1C\x00\x00\xe2C\x00@\x04D\x00\x00\x9aC\x00\x00#C\x00\x00\xc0B\x00\x00MC\x00\x00\xafC\x00\x00YC\x00\xc0\x03D\x00\x00\x87C\x00\x00\x92C\x00\x80\xf3C\x00\x00PA\x00\x80\xe3C\x00\xc0\nD\x00\x000B\x00\x00\x12D\x00\x80\xeaC\x00\xc0\x01D\x00\x002C\x00\x00\x04C\x00\x00\xa2C\x00\x00\xc9C\x00\x00\x10D\x00\x00\xd2B\x00\x00\x80C\x00\x00\xa4C\x00\x00\x16C\x00\x80\x80C\x00\x00\xa8C\x00\x80\x8fC\x00\x00\x10A\x00\x00\xb5C\x00\x00fC\x00\x00)C\x00\x00*C\x00\x00\xb0C\x00\x00\xebC\x00\x00\x86C\x00\x80\xa4C\x00@\x06D\x00\x008C\x00\x00tC\x00\x00\xc5C\x00\x00\xbdC\x00\x00RC\x00\x80\xc4C\x00\x80\xcaC\x00\x00\xa0C\x00\x80\xe0C\x00\x00\nC\x00\x00IC\x00\x00\xb7C\x00\x80\x06D\x00\x00\xacC\x00\x00\nD\x00\x00\xf0C\x00\x00jC\x00\x80\x00D\x00\x00lC\x00\x00\xbeB\x00\x00\xa8B\x00\x80\x83C\x00\x00\xc7C\x00\x80\x89C\x00\x00\tD\x00\x00@A\x00\x80\xb5C\x00\x00\\C\x00\xc0\x11D\x00\x00\xe1C\x00\x00\xb0B\x00\x00bC\x00\x00AC\x00\x00HC\x00\x00\x15C\x00\x80\xfcC\x00\x80\xf1C\x00\x00\x0fC\x00\x00\xf8B\x00\x00\rD\x00\x00tB\x00\x00\xd3C\x00\x00\x14C\x00\x00\x1dC\x00\x80\xd3C\x00\x00uC\x00\x00`C\x00\x80\xd4C\x00\x80\x91C\x00\x00\xd7C\x00@\x11D\x00\x80\xbbC\x00\x00\xa6B\x00\x80\x8eC\x00\x00\x84C\x00\x00}C\x00\x00GC\x00\xc0\rD\x00\x80\xf2C\x00\x80\xb4C\x00\x80\xbaC\x00\x80\x95C\x00\x80\xd9C\x00\x80\xe6C\x00\x00lB\x00@\x10D\x00\x00\xf7C\x00\x00SC\x00\x00\xe5C\x00\x00\x9eC\x00\x80\xdaC\x00\xc0\x07D\x00\x00\xd1C\x00\x009C\x00\x00qC\x00\x00\xa3C\x00\x00\xceB\x00\x00xB\x00\x80\xa1C\x00@\x0cD\x00@\x0eD\x00\x80\x04D\x00\x00\xa1C\x00@\x02D\x00\x00\xc4C\x00\x00\xffC\x00\x80\x96C\x00\x00\xb1C\x00\x00\xe2B\x00\x80\xc3C\x00\x00\xceC\x00\x00\x17C\x00\x80\x11D\x00\x00\xf6B\x00\x00\xc0A\x00\x00\x1cC\x00\x00\xe0@\x00\x00\xa2B\x00\x80\xd2C\x00\x80\x15D\x00\x00\xbaC\x00\x80\x9eC\x00\x00 A\x00\x00\xf0A\x00\x00`B\x00\x00!C\x00\x80\x13D\x00@\x03D\x00\x80\x10D\x00\x00\x9cC\x00\x00\xb0A\x00\xc0\x0cD\x00\x00pB\x00\x80\tD\x00\x00\xf4B\x00\x003C\x00\x00UC\x00\x00OC\x00\x00\xe0A\x00\x80\xf6C\x00\x00\x11D\x00\x80\x14D\x00\x00\xa8A\x00\x00\\B\x00\x00\xdbC\x00\x00:C\x00\x00\xaaC\x00\x00\x80?\x00\x00@B\x00@\tD\x00\x00PC\x00\x80\xc2C\x00\x00$B\x00\x00\xd8A\x00\x00\tC\x00\x00\x14D\x00\x00?C\x00\x00\xf0B\x00\x80\xe5C\x00\x80\xcbC\x00\x80\xb8C\x00\xc0\x0fD\x00\x80\xdcC\x00\x00\xe3C\x00\x00\x1bC\x00\x00\x7fC\x00\x80\x08D\x00@\x00D\x00\x00gC\x00\x00\xdeB\x00\x00\x0eD\x00\x00-C\x00@\nD\x00\x80\xaaC\x00\x80\xbeC\x00\x80\x9fC\x00\x00\x10B\x00\x00\x9aB\x00\x00\xcbC\x00\x00\x08D\x00\x80\xc5C\x00\x00_C\x00\x00\x18C\x00\x00\xe7C\x00\x00\x9eB\x00\x000A\x00\x00\x95C\x00\x00\xa6C\x00\x00\x00@\x00\x00 C\x00@\x14D\x00\x00\xc3C\x00\x00\x8eC\x00\x00VC\x00\x00\x06C\x00\x00>C\x00\x00\xd6B\x00\x00kC\x00\x80\x12D\x00\x00<C\x00\x80\x9aC\x00\x00QC\x00\x00&C\x00\x80\x03D\x00\x00\xb8C\x00\x00\xd4B\x00\x00\xe9C\x00\x00\x88A\x00\x00\x06D\x00\x00\xf3C\x00\x80\xceC\x00\x00\xe8A\x00\x00\x84B\x00\x00\x0eC\x00\x80\x90C\x00\x80\x9dC\x00\x00\x12C\x00\x00\xdaC\x00\x00\'C\x00\x00\xc0C\x00\x00WC\x00@\x05D\x00\x00\xe4B\x00\x00\x9cB\x00\x000C\x00\x00\x05D\x00\x80\xb3C\x00\xc0\x14D\x00\x00\x86B\x00\x00\x13D\x00\x00dC\x00\x00\xf4C\x00\x80\xf0C\x00\x00FC\x00\x00;C\x00\x00JC\x00\x00\x8cC\x00\x00oC\x00\x00pA\x00\x80\nD\x00\x00\xccB\x00\x00\xb2B\x00\x80\x0bD\x00\x80\x8dC\x00\x00\x08B\x00\x00DB\x00\x00`A\x00\x00\x85C\x00\x00\xeaC\x00\x00nC\x00\x00\x94B\x00\x00\x00D\x00\x00\xc8C\x00\x80\xe4C\x00\x80\xe2C\x00\x00\xdcB\x00\x00PB\x00\x00\rC\x00\xc0\x06D\x00\x00\x92B\x00\x80\xf7C\x00\x00\xe0C\x00\x00\x8aC\x00@\x0bD\x00\x00\xd4C\x00\x00KC\x00\x80\x99C\x00\x00\xcaC\x00@\x15D\x00\x00\x00C\x00\x00\xdeC\x00\x00\x19C\x00\x80\xa6C\x00\x00\xbaB\x00\x00|C\x00\x00\x07C\x00\x00\xc1C\x00\x80\xe9C\x00\x00\xadC\x00\x00\x90B\x00\x80\xebC\x00\x004C\x00\x00\xbeC\x00\x00XC\x00\x00eC\x00\x00\xeeB\x00\x80\x9cC\x00\x00\x00B\x00\x80\x0eD\x00\x00\xfeB\x00\x00aC\x00\x00pC\x00\x00\xaeC\x00\x00XB\x00\x00\xeaB\x00\x00\x00\x00\x00\x00DC\x00\x00\x88C\x00\x00\x96B\x00\x00cC\x00\x00\x14B\x00\x00\xe6B\x00\x00\xcfC\x00\x00\xc2B\x00\x80\xc0C\x00\x00\x98C\x00\x80\x81C\x00\x00\xaeB\x00\x00\xacB\x00\x00\x10C\x00\x00\xc0@\x00\x80\xdeC\x00\xc0\x0eD\x00\x00\xedC\x00\x00\x1cB\x00\x80\xfaC\x00\x80\xb7C\x00@\x07D\x00@\x08D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4771
(dp4772
g60
(dp4773
g48
I01
sg56
I01
ssg62
g4764
sg63
(lp4774
g48
ag56
asg65
(lp4775
I600
aI1
asbsg67
S'random'
p4776
sg69
g70
(g51
(I0
tS'b'
tRp4777
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4778
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'@\x02\x00\x00\xac\x01\x00\x00\xd5\x01\x00\x00|\x00\x00\x00x\x00\x00\x004\x00\x00\x00O\x02\x00\x00\x8d\x01\x00\x00h\x00\x00\x00#\x01\x00\x00\x93\x01\x00\x00\xd2\x01\x00\x00F\x01\x00\x00\x10\x01\x00\x00\x0f\x02\x00\x00\x07\x02\x00\x00%\x00\x00\x00\xe8\x01\x00\x00\xfa\x00\x00\x00j\x00\x00\x00\x1f\x00\x00\x00\xa7\x01\x00\x00\x9b\x01\x00\x00"\x00\x00\x00\x8b\x01\x00\x00\xab\x00\x00\x00\xa9\x00\x00\x00\xb2\x01\x00\x00\xa3\x01\x00\x00\xec\x01\x00\x00\x94\x01\x00\x00\xa6\x00\x00\x008\x02\x00\x00\x8f\x00\x00\x00\r\x02\x00\x00k\x00\x00\x00\xc9\x01\x00\x00E\x02\x00\x00\x83\x00\x00\x00S\x02\x00\x00\x98\x00\x00\x00\xb1\x01\x00\x00a\x00\x00\x00:\x00\x00\x00\x13\x01\x00\x00\x90\x00\x00\x00\xb0\x00\x00\x00\x1c\x00\x00\x00\xad\x01\x00\x00\x0e\x02\x00\x00\'\x00\x00\x00\xa3\x00\x00\x00\x19\x02\x00\x00`\x00\x00\x00>\x02\x00\x00\xa8\x01\x00\x00\x95\x01\x00\x00\xf6\x00\x00\x005\x00\x00\x00m\x01\x00\x00\x9d\x01\x00\x00U\x01\x00\x00z\x01\x00\x00H\x00\x00\x00O\x00\x00\x00\x06\x00\x00\x00\xed\x01\x00\x00\xfd\x01\x00\x00\xcc\x00\x00\x00\xaa\x00\x00\x00\xd4\x00\x00\x00\xa2\x00\x00\x000\x02\x00\x00\x1c\x02\x00\x00\x13\x02\x00\x00C\x02\x00\x00Q\x00\x00\x00\xca\x01\x00\x00\xf8\x01\x00\x00\xd1\x01\x00\x00=\x00\x00\x00\x8e\x01\x00\x00\t\x00\x00\x00a\x01\x00\x00A\x01\x00\x00\xd8\x00\x00\x00M\x02\x00\x00L\x02\x00\x00K\x01\x00\x00\n\x02\x00\x00G\x00\x00\x00z\x00\x00\x00\x81\x00\x00\x00*\x02\x00\x00X\x00\x00\x00@\x01\x00\x00\x08\x01\x00\x00H\x02\x00\x00U\x00\x00\x00\\\x00\x00\x00\xd7\x00\x00\x00\x8d\x00\x00\x00\t\x02\x00\x00y\x01\x00\x00\xd2\x00\x00\x00\x1c\x01\x00\x00\xe6\x01\x00\x00\xdd\x01\x00\x00b\x00\x00\x00\xf0\x00\x00\x00\x18\x02\x00\x00\xc2\x01\x00\x00\xb9\x00\x00\x00\x85\x01\x00\x00\xf7\x01\x00\x00F\x02\x00\x00\x1b\x00\x00\x00?\x02\x00\x00\xc2\x00\x00\x006\x02\x00\x00\xb6\x01\x00\x00\xaf\x00\x00\x00\x9f\x01\x00\x00\x8a\x01\x00\x00S\x01\x00\x00\x07\x00\x00\x00$\x00\x00\x00:\x02\x00\x00&\x02\x00\x00\x8a\x00\x00\x00w\x00\x00\x00\xc3\x00\x00\x00\x18\x01\x00\x00\xff\x00\x00\x00\xdb\x01\x00\x00,\x02\x00\x00\xa7\x00\x00\x00\xb3\x01\x00\x006\x01\x00\x009\x00\x00\x000\x00\x00\x00\x1a\x02\x00\x00\xee\x01\x00\x00R\x01\x00\x00N\x02\x00\x00\x9d\x00\x00\x00\xf1\x01\x00\x00{\x00\x00\x00W\x01\x00\x00O\x01\x00\x00\x1f\x01\x00\x00\x88\x01\x00\x00\xcf\x01\x00\x00(\x02\x00\x00\xd0\x00\x00\x00\xbd\x01\x00\x00\x8c\x01\x00\x00X\x01\x00\x00\xcd\x00\x00\x00J\x00\x00\x00\xd6\x01\x00\x00\x96\x01\x00\x00d\x00\x00\x00\x07\x01\x00\x00\xfd\x00\x00\x00\xdd\x00\x00\x00\xe3\x01\x00\x00\xf3\x01\x00\x00\xb1\x00\x00\x00&\x01\x00\x00\'\x01\x00\x00\x9b\x00\x00\x00\x92\x00\x00\x00\xc4\x01\x00\x003\x00\x00\x00R\x00\x00\x00\xf9\x01\x00\x00s\x00\x00\x00\x17\x01\x00\x00\xa0\x01\x00\x002\x02\x00\x00\x82\x00\x00\x00\xd9\x00\x00\x00P\x00\x00\x00-\x01\x00\x00v\x01\x00\x00\xaa\x01\x00\x00\x03\x02\x00\x00\xe0\x01\x00\x00A\x00\x00\x00\xdc\x01\x00\x00\xb5\x01\x00\x00\x85\x00\x00\x00M\x01\x00\x00\xc9\x00\x00\x00\x05\x00\x00\x00A\x02\x00\x00Y\x00\x00\x00\x02\x02\x00\x00e\x01\x00\x00N\x01\x00\x007\x01\x00\x00\x04\x02\x00\x00"\x02\x00\x00@\x00\x00\x00\t\x01\x00\x00]\x00\x00\x00\xa2\x01\x00\x00\xaf\x01\x00\x00\xe2\x01\x00\x001\x01\x00\x00p\x01\x00\x00n\x00\x00\x00\xa1\x01\x00\x00\xda\x01\x00\x00\xf5\x01\x00\x004\x02\x00\x00\x0b\x01\x00\x00 \x00\x00\x00\xa4\x00\x00\x00H\x01\x00\x00\x04\x00\x00\x00)\x00\x00\x00\xce\x01\x00\x00[\x01\x00\x00;\x02\x00\x00L\x01\x00\x00D\x02\x00\x00\xff\x01\x00\x005\x02\x00\x00%\x01\x00\x00\xc1\x01\x00\x00\x8c\x00\x00\x00\xba\x00\x00\x00=\x01\x00\x00\xde\x01\x00\x00?\x01\x00\x00D\x00\x00\x00\x12\x02\x00\x00\x06\x02\x00\x00<\x02\x00\x00w\x01\x00\x00S\x00\x00\x00\x0c\x00\x00\x00.\x01\x00\x00Z\x01\x00\x00\xe8\x00\x00\x00\x00\x01\x00\x00\xda\x00\x00\x00\xf4\x00\x00\x00\x97\x00\x00\x00I\x00\x00\x00+\x02\x00\x00d\x01\x00\x00#\x00\x00\x00\xbe\x01\x00\x00\x1d\x01\x00\x00 \x01\x00\x00\x93\x00\x00\x00K\x02\x00\x00\xbc\x00\x00\x00\x8b\x00\x00\x00\x1e\x00\x00\x00B\x01\x00\x00c\x01\x00\x00\xa1\x00\x00\x00\x10\x02\x00\x00\x96\x00\x00\x00*\x01\x00\x00\xb2\x00\x00\x00\r\x01\x00\x00\xe4\x00\x00\x00B\x02\x00\x007\x00\x00\x00\x9a\x00\x00\x00D\x01\x00\x00\x1f\x02\x00\x00v\x00\x00\x00\xfe\x00\x00\x00\xa5\x00\x00\x00\x05\x02\x00\x00\x89\x00\x00\x00\xd6\x00\x00\x00\x0c\x02\x00\x00\xd9\x01\x00\x00b\x01\x00\x00\n\x00\x00\x00"\x01\x00\x00\xe6\x00\x00\x00\xef\x01\x00\x00\xec\x00\x00\x00]\x01\x00\x00\x0e\x01\x00\x00\x18\x00\x00\x00\xe0\x00\x00\x00\xce\x00\x00\x00\x14\x00\x00\x00l\x00\x00\x00\xd3\x01\x00\x00j\x01\x00\x00\xe7\x00\x00\x00\x83\x01\x00\x00\x84\x00\x00\x00>\x00\x00\x00J\x02\x00\x00\xbb\x00\x00\x00\x00\x00\x00\x00#\x02\x00\x00\x06\x01\x00\x00\xe1\x01\x00\x00\xf3\x00\x00\x00i\x00\x00\x00\x9a\x01\x00\x007\x02\x00\x00}\x00\x00\x00\xf0\x01\x00\x00r\x01\x00\x00\x92\x01\x00\x00\xc4\x00\x00\x00\xc8\x01\x00\x004\x01\x00\x00\xdf\x00\x00\x00\x7f\x01\x00\x00{\x01\x00\x00\x19\x01\x00\x00\xc6\x00\x00\x00x\x01\x00\x00\x7f\x00\x00\x00\x1e\x01\x00\x00+\x01\x00\x00\r\x00\x00\x00!\x00\x00\x00\xd4\x01\x00\x00)\x02\x00\x00t\x00\x00\x00\x08\x00\x00\x00!\x01\x00\x00\xb5\x00\x00\x00\xc0\x00\x00\x00\xdc\x00\x00\x00\xab\x01\x00\x00\xc6\x01\x00\x00\x99\x00\x00\x00\x1a\x00\x00\x00:\x01\x00\x00(\x00\x00\x00/\x02\x00\x00\xb3\x00\x00\x00=\x02\x00\x00\xfb\x00\x00\x00\n\x01\x00\x006\x00\x00\x00(\x01\x00\x00\xd3\x00\x00\x00\x84\x01\x00\x00\x03\x01\x00\x002\x00\x00\x00\xb7\x00\x00\x00B\x00\x00\x00\xfb\x01\x00\x00\xae\x00\x00\x00h\x01\x00\x00$\x01\x00\x00G\x01\x00\x00\xe1\x00\x00\x00\x01\x01\x00\x008\x01\x00\x00U\x02\x00\x00\xe5\x01\x00\x00\xb9\x01\x00\x00\x0b\x00\x00\x00\xf1\x00\x00\x00\x91\x01\x00\x00i\x01\x00\x00\xde\x00\x00\x00`\x01\x00\x00\x9c\x00\x00\x00e\x00\x00\x000\x01\x00\x00\x11\x00\x00\x003\x02\x00\x00\xc7\x01\x00\x00K\x00\x00\x00g\x00\x00\x00\xf4\x01\x00\x00I\x02\x00\x00-\x02\x00\x00\xca\x00\x00\x00o\x00\x00\x00\xb0\x01\x00\x00\xd8\x01\x00\x00\x86\x01\x00\x00\x81\x01\x00\x002\x01\x00\x00/\x01\x00\x00\xcd\x01\x00\x00\xb6\x00\x00\x00\xf5\x00\x00\x00C\x01\x00\x00L\x00\x00\x00\x15\x02\x00\x00\xbe\x00\x00\x00\x1a\x01\x00\x00\xb4\x00\x00\x00$\x02\x00\x003\x01\x00\x00\xcb\x01\x00\x00\xb8\x01\x00\x00\x91\x00\x00\x00\x88\x00\x00\x00+\x00\x00\x00?\x00\x00\x00\x87\x01\x00\x00\xeb\x01\x00\x00G\x02\x00\x00\xd5\x00\x00\x00\x03\x00\x00\x00~\x00\x00\x00u\x01\x00\x00-\x00\x00\x00W\x00\x00\x00\x8f\x01\x00\x00V\x01\x00\x00Y\x01\x00\x00!\x02\x00\x00\\\x01\x00\x001\x00\x00\x00\x13\x00\x00\x00\x95\x00\x00\x00T\x00\x00\x00^\x01\x00\x00\x0f\x00\x00\x00\xf9\x00\x00\x00[\x00\x00\x00\xe2\x00\x00\x00k\x01\x00\x00\xf2\x01\x00\x00s\x01\x00\x00\xa9\x01\x00\x00c\x00\x00\x00y\x00\x00\x00\xbb\x01\x00\x00\x94\x00\x00\x00\xad\x00\x00\x00\'\x02\x00\x00P\x02\x00\x00\x8e\x00\x00\x00C\x00\x00\x00\x1e\x02\x00\x005\x01\x00\x00J\x01\x00\x00,\x00\x00\x00\x04\x01\x00\x00\x17\x02\x00\x00\xbc\x01\x00\x00\x11\x01\x00\x00\xbd\x00\x00\x00\x16\x02\x00\x00q\x01\x00\x00\xb7\x01\x00\x00\x10\x00\x00\x00l\x01\x00\x00\xd0\x01\x00\x00N\x00\x00\x00\x9e\x00\x00\x00\x02\x00\x00\x00\xe7\x01\x00\x00.\x02\x00\x00\x11\x02\x00\x00\x15\x01\x00\x00)\x01\x00\x001\x02\x00\x00\x9f\x00\x00\x00\x16\x00\x00\x00R\x02\x00\x00\xf7\x00\x00\x00\xe9\x00\x00\x00\xf8\x00\x00\x00.\x00\x00\x00\x86\x00\x00\x00<\x01\x00\x00\x01\x02\x00\x00V\x00\x00\x00Q\x01\x00\x00u\x00\x00\x00g\x01\x00\x00\xea\x01\x00\x00\x0f\x01\x00\x00\x00\x02\x00\x00\xac\x00\x00\x00\x15\x00\x00\x00\x87\x00\x00\x00M\x00\x00\x00\xa4\x01\x00\x00o\x01\x00\x00\x1d\x02\x00\x00_\x00\x00\x00\x19\x00\x00\x00Z\x00\x00\x00\xa0\x00\x00\x00f\x00\x00\x00T\x02\x00\x00;\x00\x00\x00\xc1\x00\x00\x00\xa8\x00\x00\x00P\x01\x00\x00\xef\x00\x00\x00\xd1\x00\x00\x00\x0e\x00\x00\x00^\x00\x00\x00\x82\x01\x00\x00\xb8\x00\x00\x00\x14\x02\x00\x00\xc0\x01\x00\x00>\x01\x00\x00\xbf\x00\x00\x00\xee\x00\x00\x00\x80\x00\x00\x00\xeb\x00\x00\x00\x16\x01\x00\x00\xdb\x00\x00\x00\x80\x01\x00\x00<\x00\x00\x00\xe3\x00\x00\x00r\x00\x00\x00\x98\x01\x00\x00\xe4\x01\x00\x00\x0c\x01\x00\x00\xc7\x00\x00\x00\x05\x01\x00\x00~\x01\x00\x00m\x00\x00\x00\xfa\x01\x00\x00\xf6\x01\x00\x00\xe5\x00\x00\x00\xea\x00\x00\x00\xe9\x01\x00\x00,\x01\x00\x009\x01\x00\x00\x1b\x02\x00\x00*\x00\x00\x00V\x02\x00\x00p\x00\x00\x00t\x01\x00\x00\xcc\x01\x00\x00W\x02\x00\x00\xbf\x01\x00\x00\x17\x00\x00\x00E\x01\x00\x00\xae\x01\x00\x00\x9e\x01\x00\x00\x02\x01\x00\x00;\x01\x00\x00\xc5\x01\x00\x00\x08\x02\x00\x00\x12\x01\x00\x00&\x00\x00\x00 \x02\x00\x00\x0b\x02\x00\x00\xed\x00\x00\x00\xcb\x00\x00\x00|\x01\x00\x00/\x00\x00\x00\x9c\x01\x00\x00T\x01\x00\x00F\x00\x00\x00\xcf\x00\x00\x00f\x01\x00\x00\xc3\x01\x00\x00}\x01\x00\x009\x02\x00\x00Q\x02\x00\x00\x01\x00\x00\x00\xf2\x00\x00\x00E\x00\x00\x00\xba\x01\x00\x00\x1b\x01\x00\x00n\x01\x00\x00\x99\x01\x00\x008\x00\x00\x00\xa5\x01\x00\x00_\x01\x00\x00\x89\x01\x00\x00I\x01\x00\x00\x14\x01\x00\x00\xc8\x00\x00\x00\xdf\x01\x00\x00q\x00\x00\x00\xfe\x01\x00\x00\x1d\x00\x00\x00\x97\x01\x00\x00\xfc\x00\x00\x00\xb4\x01\x00\x00\xd7\x01\x00\x00\xa6\x01\x00\x00\xfc\x01\x00\x00\x12\x00\x00\x00%\x02\x00\x00\x90\x01\x00\x00\xc5\x00\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4779
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4780
(g4778
S'\xc5\x00\x00\x00'
tRp4781
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4782
I01
sb.