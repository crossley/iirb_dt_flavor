ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject607
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 607
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Correct?'
p16
aS'Int Match?'
p17
aS'Int Response'
p18
aS'Int Correct?'
p19
aS'Category'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VF
sS'age'
p31
V21
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I1
sS'_exp'
p41
I73779536
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I54
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I11
I55
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I11
I55
tg55
I00
S'\x00\x00\x00A\x00\x00\xa8A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xe8A\x00\x00\x0cB\x00\x00@B\x00\x00lB\x00\x00\xcaB\x00\x00\x0cC\x00\x00(C\x00\x00-C\x00\x00<C\x00\x00?C\x00\x00WC\x00\x00]C\x00\x00_C\x00\x00aC\x00\x00pC\x00\x00qC\x00\x00~C\x00\x00\x7fC\x00\x00\x83C\x00\x80\x83C\x00\x80\x86C\x00\x80\x8aC\x00\x80\x8bC\x00\x80\x8cC\x00\x00\x90C\x00\x00\x92C\x00\x00\xa7C\x00\x00\xabC\x00\x00\xacC\x00\x80\xb4C\x00\x00\xbbC\x00\x80\xc5C\x00\x80\xd8C\x00\x00\xdfC\x00\x80\xe1C\x00\x80\xe3C\x00\x00\xe8C\x00\x80\xe9C\x00\x80\xeeC\x00\xc0\x02D\x00@\x03D\x00\x00\x04D\x00@\x05D\x00\x80\x07D\x00@\x08D\x00@\x0cD\x00\x00\rD\x00@\rD\x00@\x0eD\x00\x00\x10D\x00\x00\x13D\x00\x00\x00@\x00\x00@@\x00\x00pA\x00\x00\xd8A\x00\x00<B\x00\x00LB\x00\x00pB\x00\x00\x88B\x00\x00\x96B\x00\x00\xb2B\x00\x00\xccB\x00\x00\xd8B\x00\x00\tC\x00\x00\x14C\x00\x00\x15C\x00\x00\'C\x00\x001C\x00\x002C\x00\x004C\x00\x005C\x00\x00HC\x00\x00MC\x00\x00RC\x00\x00iC\x00\x80\x85C\x00\x00\x87C\x00\x80\xbbC\x00\x00\xbcC\x00\x80\xbdC\x00\x00\xc2C\x00\x80\xc4C\x00\x80\xc6C\x00\x00\xd2C\x00\x00\xd6C\x00\x80\xd9C\x00\x80\xddC\x00\x80\xe7C\x00\x80\xe8C\x00\x80\xf7C\x00\x80\xfaC\x00\x80\x01D\x00\x80\x03D\x00@\x04D\x00\x80\x06D\x00\xc0\tD\x00@\nD\x00\xc0\nD\x00\xc0\x0cD\x00\x80\x0fD\x00\x00\x11D\x00@\x11D\x00\xc0\x12D\x00\x80\x14D\x00\x00\x15D\x00\xc0\x15D\x00\x00\x00\x00\x00\x00\x80?\x00\x00\xe0@\x00\x00\xa0A\x00\x00\xe0A\x00\x00\x04B\x00\x00\x18B\x00\x004B\x00\x008B\x00\x00xB\x00\x00\x80B\x00\x00\x84B\x00\x00\x8eB\x00\x00\x98B\x00\x00\xa6B\x00\x00\xd4B\x00\x00\xe0B\x00\x00\xe8B\x00\x00\xeeB\x00\x00\xfcB\x00\x00\x05C\x00\x00\x1dC\x00\x008C\x00\x00;C\x00\x00>C\x00\x00LC\x00\x00kC\x00\x00lC\x00\x00nC\x00\x00vC\x00\x00\x80C\x00\x00\x84C\x00\x00\x88C\x00\x00\x8cC\x00\x80\x97C\x00\x80\x9eC\x00\x80\xa0C\x00\x00\xbaC\x00\x80\xbcC\x00\x80\xbfC\x00\x00\xcaC\x00\x80\xccC\x00\x00\xd0C\x00\x00\xd5C\x00\x80\xdeC\x00\x80\xe6C\x00\x00\xeaC\x00\x80\xefC\x00\x80\xf4C\x00\x80\xf6C\x00\x80\xf8C\x00\x00\x0cD\x00\xc0\x11D\x00\x80\x12D\x00@\x13D\x00\x00\xf0A\x00\x00\x14B\x00\x00 B\x00\x000B\x00\x00PB\x00\x00\x9aB\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc8B\x00\x00\xd0B\x00\x00\xe2B\x00\x00\xf2B\x00\x00\xfeB\x00\x00\x00C\x00\x00\rC\x00\x00\x11C\x00\x00\x16C\x00\x00"C\x00\x00*C\x00\x00BC\x00\x00VC\x00\x00XC\x00\x00fC\x00\x00zC\x00\x00}C\x00\x80\x81C\x00\x00\x86C\x00\x00\x9aC\x00\x00\x9cC\x00\x80\x9cC\x00\x80\xa5C\x00\x80\xaaC\x00\x80\xabC\x00\x80\xafC\x00\x00\xb3C\x00\x00\xb5C\x00\x80\xb9C\x00\x80\xbaC\x00\x00\xbdC\x00\x80\xd0C\x00\x00\xd3C\x00\x80\xd3C\x00\x80\xdcC\x00\x00\xe1C\x00\x00\xe2C\x00\x80\xe5C\x00\x00\xe6C\x00\x80\xebC\x00\x80\xf1C\x00\x00\xf3C\x00@\x02D\x00\x80\x02D\x00\x00\tD\x00\x80\nD\x00\xc0\rD\x00\x00\x80A\x00\x00\x00B\x00\x00\x10B\x00\x00TB\x00\x00hB\x00\x00|B\x00\x00\x82B\x00\x00\x9cB\x00\x00\xaaB\x00\x00\xb4B\x00\x00\xbeB\x00\x00\xf0B\x00\x00\xf6B\x00\x00\x01C\x00\x00\x04C\x00\x00\x19C\x00\x00\x1bC\x00\x00\x1eC\x00\x00\x1fC\x00\x00,C\x00\x00/C\x00\x003C\x00\x00@C\x00\x00FC\x00\x00GC\x00\x00dC\x00\x00gC\x00\x00hC\x00\x00sC\x00\x00|C\x00\x80\x87C\x00\x80\x8dC\x00\x80\x8fC\x00\x80\x9dC\x00\x00\xa1C\x00\x80\xa6C\x00\x80\xb0C\x00\x00\xb4C\x00\x00\xb8C\x00\x00\xc8C\x00\x80\xcaC\x00\x00\xd1C\x00\x80\xdbC\x00\x80\xe4C\x00\x80\xecC\x00\x00\xefC\x00\x80\xf5C\x00\x00\xffC\x00\x80\x00D\x00\xc0\x01D\x00\x00\x05D\x00\xc0\x05D\x00\xc0\x08D\x00\xc0\x0fD\x00\x80\x13D\x00\x00\x80@\x00\x00\x10A\x00\x00DB\x00\x00\x86B\x00\x00\x8aB\x00\x00\xa8B\x00\x00\xc0B\x00\x00\xceB\x00\x00\xe4B\x00\x00\x06C\x00\x00\x0eC\x00\x00\x0fC\x00\x00)C\x00\x00:C\x00\x00IC\x00\x00NC\x00\x00SC\x00\x00[C\x00\x00`C\x00\x00cC\x00\x00xC\x00\x00{C\x00\x80\x91C\x00\x80\x93C\x00\x80\x9aC\x00\x80\xa7C\x00\x80\xacC\x00\x00\xadC\x00\x80\xb2C\x00\x80\xb3C\x00\x80\xbeC\x00\x00\xc6C\x00\x00\xc7C\x00\x00\xc9C\x00\x00\xcdC\x00\x80\xcdC\x00\x80\xd6C\x00\x00\xd9C\x00\x80\xdaC\x00\x00\xdcC\x00\x00\xdeC\x00\x80\xe0C\x00\x00\xe4C\x00\x00\xebC\x00\x00\xedC\x00\x00\xfbC\x00\x80\xfdC\x00\x80\xffC\x00\x00\x03D\x00\x00\x07D\x00@\x0bD\x00\x80\x0cD\x00\x00\x0eD\x00\x00\x12D\x00\x00\x00\x00\x00\x00\x98A\x00\x00\xb8A\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xb6B\x00\x00\xbaB\x00\x00\xd2B\x00\x00\xd6B\x00\x00\xe6B\x00\x00\xecB\x00\x00\x07C\x00\x00\nC\x00\x00\x10C\x00\x00!C\x00\x00%C\x00\x000C\x00\x007C\x00\x009C\x00\x00CC\x00\x00DC\x00\x00KC\x00\x00ZC\x00\x00\\C\x00\x00\x81C\x00\x80\x90C\x00\x80\x94C\x00\x00\xa2C\x00\x80\xa4C\x00\x00\xa9C\x00\x00\xafC\x00\x80\xb7C\x00\x80\xc0C\x00\x80\xc2C\x00\x80\xc9C\x00\x80\xceC\x00\x00\xcfC\x00\x00\xd7C\x00\x80\xdfC\x00\x00\xe3C\x00\x00\xe7C\x00\x80\xf0C\x00\x00\xf4C\x00\x00\xf5C\x00\x00\xf7C\x00\x00\xfeC\x00\xc0\x00D\x00\x80\x0bD\x00\x80\x0eD\x00\x00\x0fD\x00@\x0fD\x00\x80\x10D\x00\xc0\x10D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0@\x00\x000A\x00\x00@A\x00\x00\x88A\x00\x00,B\x00\x00\\B\x00\x00`B\x00\x00\x8cB\x00\x00\x9eB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xfaB\x00\x00\x08C\x00\x00\x12C\x00\x00\x17C\x00\x00\x18C\x00\x00 C\x00\x006C\x00\x00PC\x00\x00UC\x00\x80\x80C\x00\x00\x85C\x00\x00\x8eC\x00\x00\x95C\x00\x80\x96C\x00\x00\x97C\x00\x00\x99C\x00\x80\x9fC\x00\x00\xa3C\x00\x00\xa6C\x00\x80\xadC\x00\x00\xb0C\x00\x00\xb9C\x00\x00\xbfC\x00\x00\xc0C\x00\x80\xc1C\x00\x00\xc3C\x00\x00\xc5C\x00\x80\xcbC\x00\x00\xceC\x00\x00\xd4C\x00\x80\xd4C\x00\x80\xd5C\x00\x80\xd7C\x00\x00\xe0C\x00\x00\xe9C\x00\x80\xedC\x00\x00\xeeC\x00\x00\xfdC\x00\x80\x04D\x00\x00\x08D\x00\x00\x0bD\x00\xc0\x0eD\x00@\x12D\x00\xc0\x14D\x00\x00\xc0@\x00\x00 A\x00\x00`A\x00\x00\x90A\x00\x00\x08B\x00\x00HB\x00\x00tB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\xb8B\x00\x00\xbcB\x00\x00\xdaB\x00\x00\xdeB\x00\x00\xf4B\x00\x00\x02C\x00\x00\x0bC\x00\x00\x1aC\x00\x00&C\x00\x00OC\x00\x00QC\x00\x00^C\x00\x00bC\x00\x00uC\x00\x00\x8bC\x00\x80\x8eC\x00\x00\x93C\x00\x00\x9bC\x00\x00\x9dC\x00\x80\xa8C\x00\x00\xb1C\x00\x80\xb1C\x00\x00\xb6C\x00\x00\xb7C\x00\x00\xc4C\x00\x80\xc7C\x00\x00\xcbC\x00\x00\xccC\x00\x00\xd8C\x00\x00\xdaC\x00\x00\xecC\x00\x80\xf2C\x00\x00\xf8C\x00\x00\xfcC\x00\x80\xfeC\x00@\x00D\x00\x00\x01D\x00\xc0\x03D\x00\xc0\x04D\x00\xc0\x0bD\x00\x80\rD\x00@\x10D\x00\x00\x14D\x00@\x14D\x00@\x15D\x00\x00PA\x00\x00\xb0A\x00\x00\xf8A\x00\x00$B\x00\x00(B\x00\x00XB\x00\x00dB\x00\x00\xc6B\x00\x00\xdcB\x00\x00\xf8B\x00\x00\x03C\x00\x00\x1cC\x00\x00#C\x00\x00$C\x00\x00.C\x00\x00=C\x00\x00AC\x00\x00TC\x00\x00eC\x00\x00jC\x00\x00mC\x00\x00rC\x00\x00wC\x00\x00yC\x00\x80\x82C\x00\x80\x84C\x00\x00\x89C\x00\x00\x8aC\x00\x00\x8fC\x00\x00\x91C\x00\x00\x94C\x00\x00\x96C\x00\x00\x98C\x00\x00\xa0C\x00\x80\xa1C\x00\x80\xa2C\x00\x00\xa4C\x00\x80\xaeC\x00\x80\xb8C\x00\x00\xbeC\x00\x80\xeaC\x00\x00\xf0C\x00\x00\xf2C\x00\x80\xf3C\x00\x80\xf9C\x00\x00\xfaC\x00\x80\x05D\x00\x00\x06D\x00@\x07D\x00\x80\x08D\x00\x00\nD\x00\x80\x11D\x00\xc0\x13D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0A\x00\x00\x1cB\x00\x00\xb0B\x00\x00\xeaB\x00\x00\x13C\x00\x00+C\x00\x00EC\x00\x00JC\x00\x00YC\x00\x00oC\x00\x00tC\x00\x00\x82C\x00\x80\x88C\x00\x80\x89C\x00\x00\x8dC\x00\x80\x92C\x00\x80\x95C\x00\x80\x98C\x00\x80\x99C\x00\x80\x9bC\x00\x00\x9eC\x00\x00\x9fC\x00\x80\xa3C\x00\x00\xa5C\x00\x00\xa8C\x00\x80\xa9C\x00\x00\xaaC\x00\x00\xaeC\x00\x00\xb2C\x00\x80\xb5C\x00\x80\xb6C\x00\x00\xc1C\x00\x80\xc3C\x00\x80\xc8C\x00\x80\xcfC\x00\x80\xd1C\x00\x80\xd2C\x00\x00\xdbC\x00\x00\xddC\x00\x80\xe2C\x00\x00\xe5C\x00\x00\xf1C\x00\x00\xf6C\x00\x00\xf9C\x00\x80\xfbC\x00\x80\xfcC\x00\x00\x00D\x00@\x01D\x00\x00\x02D\x00@\x06D\x00\xc0\x06D\x00\xc0\x07D\x00@\tD\x00\x80\tD\x00\x80\x15D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I11
aI55
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I11
I55
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I2
aI7
aI9
aI2
aI3
aI7
aI2
aI3
aI10
aI9
aI9
aI3
aI4
aI5
aI8
aI6
aI6
aI2
aI4
aI8
aI6
aI4
aI9
aI3
aI2
aI10
aI9
aI6
aI3
aI7
aI10
aI3
aI7
aI10
aI0
aI6
aI5
aI7
aI4
aI5
aI5
aI0
aI6
aI4
aI9
aI1
aI7
aI10
aI0
aI10
aI10
aI0
aI6
aI2
aI1
aI2
aI7
aI6
aI8
aI2
aI7
aI5
aI4
aI1
aI3
aI8
aI8
aI2
aI6
aI4
aI8
aI1
aI0
aI4
aI1
aI0
aI4
aI4
aI0
aI9
aI9
aI4
aI7
aI5
aI9
aI3
aI0
aI4
aI8
aI1
aI10
aI1
aI8
aI10
aI6
aI3
aI3
aI1
aI5
aI8
aI8
aI5
aI1
aI1
aI5
aI1
aI5
aI6
aI5
aI7
aI1
aI9
aI10
aI0
aI2
aI9
aI1
aI7
aI4
aI0
aI2
aI4
aI5
aI3
aI9
aI1
aI1
aI9
aI1
aI5
aI8
aI1
aI10
aI0
aI7
aI0
aI0
aI10
aI8
aI2
aI7
aI3
aI8
aI10
aI1
aI7
aI5
aI2
aI1
aI7
aI10
aI10
aI0
aI7
aI3
aI2
aI6
aI4
aI7
aI9
aI9
aI1
aI1
aI7
aI1
aI1
aI8
aI0
aI4
aI1
aI4
aI5
aI6
aI6
aI1
aI3
aI9
aI6
aI7
aI2
aI0
aI4
aI2
aI5
aI9
aI0
aI9
aI8
aI2
aI1
aI8
aI6
aI9
aI10
aI4
aI4
aI0
aI8
aI8
aI2
aI1
aI8
aI5
aI10
aI8
aI1
aI6
aI1
aI7
aI9
aI10
aI8
aI10
aI8
aI0
aI1
aI0
aI4
aI2
aI8
aI5
aI1
aI0
aI3
aI0
aI0
aI7
aI6
aI8
aI5
aI5
aI7
aI7
aI10
aI4
aI5
aI1
aI0
aI10
aI7
aI5
aI2
aI2
aI7
aI3
aI0
aI9
aI7
aI3
aI9
aI0
aI5
aI10
aI6
aI3
aI6
aI4
aI5
aI3
aI0
aI5
aI0
aI7
aI0
aI6
aI9
aI4
aI3
aI4
aI10
aI3
aI0
aI0
aI1
aI10
aI7
aI4
aI1
aI2
aI5
aI1
aI2
aI6
aI6
aI3
aI6
aI2
aI1
aI1
aI4
aI3
aI1
aI4
aI6
aI3
aI0
aI2
aI9
aI6
aI0
aI2
aI5
aI7
aI3
aI6
aI5
aI5
aI5
aI4
aI1
aI7
aI10
aI7
aI3
aI5
aI2
aI5
aI0
aI4
aI2
aI9
aI5
aI3
aI0
aI7
aI1
aI8
aI8
aI0
aI1
aI8
aI7
aI2
aI10
aI8
aI8
aI8
aI2
aI8
aI6
aI2
aI3
aI6
aI1
aI7
aI10
aI7
aI9
aI2
aI0
aI8
aI9
aI5
aI3
aI1
aI0
aI0
aI2
aI8
aI9
aI10
aI7
aI3
aI9
aI9
aI10
aI5
aI6
aI7
aI1
aI0
aI4
aI2
aI2
aI6
aI1
aI10
aI0
aI9
aI0
aI7
aI3
aI6
aI2
aI6
aI2
aI8
aI0
aI3
aI1
aI2
aI8
aI5
aI4
aI2
aI10
aI3
aI8
aI3
aI6
aI4
aI6
aI3
aI1
aI3
aI5
aI2
aI9
aI10
aI4
aI10
aI10
aI9
aI4
aI7
aI8
aI10
aI5
aI7
aI5
aI8
aI6
aI6
aI7
aI8
aI6
aI10
aI9
aI9
aI4
aI5
aI8
aI5
aI4
aI9
aI5
aI5
aI6
aI4
aI9
aI0
aI6
aI3
aI9
aI3
aI4
aI8
aI4
aI5
aI6
aI6
aI4
aI0
aI7
aI3
aI0
aI2
aI6
aI5
aI10
aI4
aI10
aI3
aI9
aI2
aI4
aI8
aI10
aI10
aI10
aI6
aI9
aI4
aI3
aI7
aI1
aI2
aI10
aI2
aI5
aI7
aI3
aI5
aI6
aI10
aI10
aI4
aI0
aI9
aI4
aI6
aI0
aI1
aI9
aI5
aI5
aI2
aI9
aI9
aI4
aI2
aI1
aI7
aI3
aI1
aI2
aI8
aI3
aI7
aI9
aI9
aI6
aI6
aI8
aI6
aI9
aI0
aI5
aI0
aI10
aI7
aI5
aI7
aI2
aI9
aI10
aI6
aI0
aI2
aI2
aI7
aI4
aI2
aI7
aI10
aI5
aI3
aI3
aI10
aI2
aI8
aI6
aI1
aI10
aI3
aI8
aI6
aI1
aI8
aI9
aI8
aI0
aI4
aI7
aI9
aI4
aI2
aI7
aI3
aI8
aI4
aI9
aI5
aI4
aI9
aI4
aI5
aI10
aI7
aI5
aI3
aI0
aI4
aI0
aI9
aI8
aI9
aI10
aI10
aI6
aI10
aI3
aI3
aI3
aI7
aI0
aI8
aI3
aI1
aI4
aI3
aI2
aI8
aI3
aI6
aI10
aI8
aI8
aI1
aI10
aI2
aI7
aI9
aI8
aI6
atbsS'finished'
p74
I00
sS'nReps'
p75
I55
sS'nRemaining'
p76
I5
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p79
NsS'thisIndex'
p80
I1
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I5
sS'nTotal'
p83
I605
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
S'.thisTrial'
p94
I2
sS'.thisN'
p95
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p96
I0
sS'.thisRepN'
p97
I0
sS'.thisIndex'
p98
I2
sg15
Nsg16
S'Timed out'
p99
sg14
I1
sa(dp100
g94
I2
sS'.thisN'
p101
I1
sg30
VF
sg31
g32
sS'.thisTrialN'
p102
I1
sS'.thisRepN'
p103
I0
sS'.thisIndex'
p104
I2
sg15
Nsg16
g99
sg14
I1
sa(dp105
g20
(lp106
S'k'
asg17
S'Y'
sS'.thisRepN'
p107
I0
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p108
I2
sS'.thisN'
p109
I2
sS'.thisIndex'
p110
I1
sg15
(lp111
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp112
S'space'
p113
asg94
I1
sa(dp114
g20
(lp115
S'k'
asg17
S'N'
sS'.thisRepN'
p116
I0
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p117
I3
sS'.thisN'
p118
I3
sS'.thisIndex'
p119
I1
sg15
(lp120
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg18
Nsg94
I1
sa(dp121
g20
(lp122
S'k'
asg17
S'Y'
sS'.thisRepN'
p123
I0
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p124
I4
sS'.thisN'
p125
I4
sS'.thisIndex'
p126
I5
sg15
(lp127
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp128
S'space'
p129
asg94
I5
sa(dp130
g20
(lp131
S'k'
asg17
S'Y'
sS'.thisRepN'
p132
I0
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p133
I5
sS'.thisN'
p134
I5
sS'.thisIndex'
p135
I7
sg15
(lp136
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg18
(lp137
S'space'
p138
asg94
I7
sa(dp139
g20
(lp140
S'd'
asg17
S'N'
sS'.thisRepN'
p141
I0
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p142
I6
sS'.thisN'
p143
I6
sS'.thisIndex'
p144
I8
sg15
(lp145
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg18
Nsg94
I8
sa(dp146
g20
(lp147
S'k'
asg17
S'N'
sS'.thisRepN'
p148
I0
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p149
I7
sS'.thisN'
p150
I7
sS'.thisIndex'
p151
I2
sg15
(lp152
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg18
(lp153
S'space'
p154
asg94
I2
sa(dp155
g20
(lp156
S'k'
asg17
S'N'
sS'.thisRepN'
p157
I0
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p158
I8
sS'.thisN'
p159
I8
sS'.thisIndex'
p160
I0
sg15
(lp161
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
Nsg94
I0
sa(dp162
g20
(lp163
S'd'
asg17
S'N'
sS'.thisRepN'
p164
I0
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p165
I9
sS'.thisN'
p166
I9
sS'.thisIndex'
p167
I5
sg15
(lp168
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
Nsg94
I5
sa(dp169
g20
(lp170
S'd'
asg17
S'Y'
sS'.thisRepN'
p171
I0
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p172
I10
sS'.thisN'
p173
I10
sS'.thisIndex'
p174
I8
sg15
(lp175
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg18
(lp176
S'space'
p177
asg94
I8
sa(dp178
g20
(lp179
S'd'
asg17
S'Y'
sS'.thisRepN'
p180
I1
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p181
I0
sS'.thisN'
p182
I11
sS'.thisIndex'
p183
I7
sg15
(lp184
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg18
(lp185
S'space'
p186
asg94
I7
sa(dp187
g20
(lp188
S'd'
asg17
S'Y'
sS'.thisRepN'
p189
I1
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p190
I1
sS'.thisN'
p191
I12
sS'.thisIndex'
p192
I7
sg15
(lp193
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp194
S'space'
p195
asg94
I7
sa(dp196
g20
(lp197
S'd'
asg17
S'N'
sS'.thisRepN'
p198
I1
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p199
I2
sS'.thisN'
p200
I13
sS'.thisIndex'
p201
I9
sg15
(lp202
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg18
Nsg94
I9
sa(dp203
g20
(lp204
S'd'
asg17
S'N'
sS'.thisRepN'
p205
I1
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p206
I3
sS'.thisN'
p207
I14
sS'.thisIndex'
p208
I8
sg15
(lp209
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp210
S'space'
p211
asg94
I8
sa(dp212
g20
(lp213
S'd'
asg17
S'Y'
sS'.thisRepN'
p214
I1
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p215
I4
sS'.thisN'
p216
I15
sS'.thisIndex'
p217
I1
sg15
(lp218
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg18
(lp219
S'space'
p220
asg94
I1
sa(dp221
g20
(lp222
S'k'
asg17
S'N'
sS'.thisRepN'
p223
I1
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p224
I5
sS'.thisN'
p225
I16
sS'.thisIndex'
p226
I4
sg15
(lp227
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
Nsg94
I4
sa(dp228
g20
(lp229
S'k'
asg17
S'N'
sS'.thisRepN'
p230
I1
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p231
I6
sS'.thisN'
p232
I17
sS'.thisIndex'
p233
I7
sg15
(lp234
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
Nsg94
I7
sa(dp235
g20
(lp236
S'k'
asg17
S'Y'
sS'.thisRepN'
p237
I1
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p238
I7
sS'.thisN'
p239
I18
sS'.thisIndex'
p240
I8
sg15
(lp241
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp242
S'space'
p243
asg94
I8
sa(dp244
g20
(lp245
S'd'
asg17
S'Y'
sS'.thisRepN'
p246
I1
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p247
I8
sS'.thisN'
p248
I19
sS'.thisIndex'
p249
I6
sg15
(lp250
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp251
S'space'
p252
asg94
I6
sa(dp253
g20
(lp254
S'k'
asg17
S'Y'
sS'.thisRepN'
p255
I1
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p256
I9
sS'.thisN'
p257
I20
sS'.thisIndex'
p258
I2
sg15
(lp259
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
Nsg94
I2
sa(dp260
g20
(lp261
S'k'
asg17
S'Y'
sS'.thisRepN'
p262
I1
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p263
I10
sS'.thisN'
p264
I21
sS'.thisIndex'
p265
I0
sg15
(lp266
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp267
S'space'
p268
asg94
I0
sa(dp269
g20
(lp270
S'k'
asg17
S'N'
sS'.thisRepN'
p271
I2
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p272
I0
sS'.thisN'
p273
I22
sS'.thisIndex'
p274
I9
sg15
(lp275
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp276
S'space'
p277
asg94
I9
sa(dp278
g20
(lp279
S'k'
asg17
S'Y'
sS'.thisRepN'
p280
I2
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p281
I1
sS'.thisN'
p282
I23
sS'.thisIndex'
p283
I6
sg15
(lp284
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg18
Nsg94
I6
sa(dp285
g20
(lp286
S'k'
asg17
S'N'
sS'.thisRepN'
p287
I2
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p288
I2
sS'.thisN'
p289
I24
sS'.thisIndex'
p290
I10
sg15
(lp291
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
Nsg94
I10
sa(dp292
g20
(lp293
S'd'
asg17
S'N'
sS'.thisRepN'
p294
I2
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p295
I3
sS'.thisN'
p296
I25
sS'.thisIndex'
p297
I0
sg15
(lp298
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg18
Nsg94
I0
sa(dp299
g20
(lp300
S'd'
asg17
S'Y'
sS'.thisRepN'
p301
I2
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p302
I4
sS'.thisN'
p303
I26
sS'.thisIndex'
p304
I0
sg15
(lp305
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp306
S'space'
p307
asg94
I0
sa(dp308
g20
(lp309
S'd'
asg17
S'Y'
sS'.thisRepN'
p310
I2
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p311
I5
sS'.thisN'
p312
I27
sS'.thisIndex'
p313
I1
sg15
(lp314
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp315
S'space'
p316
asg94
I1
sa(dp317
g20
(lp318
S'd'
asg17
S'Y'
sS'.thisRepN'
p319
I2
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p320
I6
sS'.thisN'
p321
I28
sS'.thisIndex'
p322
I2
sg15
(lp323
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp324
S'space'
p325
asg94
I2
sa(dp326
g20
(lp327
S'k'
asg17
S'N'
sS'.thisRepN'
p328
I2
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p329
I7
sS'.thisN'
p330
I29
sS'.thisIndex'
p331
I0
sg15
(lp332
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg18
Nsg94
I0
sa(dp333
g20
(lp334
S'k'
asg17
S'Y'
sS'.thisRepN'
p335
I2
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p336
I8
sS'.thisN'
p337
I30
sS'.thisIndex'
p338
I3
sg15
(lp339
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg18
(lp340
S'space'
p341
asg94
I3
sa(dp342
g20
(lp343
S'd'
asg17
S'N'
sS'.thisRepN'
p344
I2
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p345
I9
sS'.thisN'
p346
I31
sS'.thisIndex'
p347
I9
sg15
(lp348
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
Nsg94
I9
sa(dp349
g20
(lp350
S'k'
asg17
S'Y'
sS'.thisRepN'
p351
I2
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p352
I10
sS'.thisN'
p353
I32
sS'.thisIndex'
p354
I4
sg15
(lp355
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg18
(lp356
S'space'
p357
asg94
I4
sa(dp358
g20
(lp359
S'k'
asg17
S'Y'
sS'.thisRepN'
p360
I3
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p361
I0
sS'.thisN'
p362
I33
sS'.thisIndex'
p363
I2
sg15
(lp364
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp365
S'space'
p366
asg94
I2
sa(dp367
g20
(lp368
S'k'
asg17
S'N'
sS'.thisRepN'
p369
I3
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p370
I1
sS'.thisN'
p371
I34
sS'.thisIndex'
p372
I8
sg15
(lp373
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
Nsg94
I8
sa(dp374
g20
(lp375
S'k'
asg17
S'N'
sS'.thisRepN'
p376
I3
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p377
I2
sS'.thisN'
p378
I35
sS'.thisIndex'
p379
I0
sg15
(lp380
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg18
Nsg94
I0
sa(dp381
g20
(lp382
S'd'
asg17
S'N'
sS'.thisRepN'
p383
I3
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p384
I3
sS'.thisN'
p385
I36
sS'.thisIndex'
p386
I4
sg15
(lp387
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
Nsg94
I4
sa(dp388
g20
(lp389
S'k'
asg17
S'N'
sS'.thisRepN'
p390
I3
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p391
I4
sS'.thisN'
p392
I37
sS'.thisIndex'
p393
I3
sg15
(lp394
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
Nsg94
I3
sa(dp395
g20
(lp396
S'k'
asg17
S'Y'
sS'.thisRepN'
p397
I3
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p398
I5
sS'.thisN'
p399
I38
sS'.thisIndex'
p400
I2
sg15
(lp401
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp402
S'space'
p403
asg94
I2
sa(dp404
g20
(lp405
S'd'
asg17
S'N'
sS'.thisRepN'
p406
I3
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p407
I6
sS'.thisN'
p408
I39
sS'.thisIndex'
p409
I10
sg15
(lp410
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg18
Nsg94
I10
sa(dp411
g20
(lp412
S'k'
asg17
S'N'
sS'.thisRepN'
p413
I3
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p414
I7
sS'.thisN'
p415
I40
sS'.thisIndex'
p416
I3
sg15
(lp417
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
Nsg94
I3
sa(dp418
g20
(lp419
S'k'
asg17
S'N'
sS'.thisRepN'
p420
I3
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p421
I8
sS'.thisN'
p422
I41
sS'.thisIndex'
p423
I9
sg15
(lp424
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg18
Nsg94
I9
sa(dp425
g20
(lp426
S'd'
asg17
S'Y'
sS'.thisRepN'
p427
I3
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p428
I9
sS'.thisN'
p429
I42
sS'.thisIndex'
p430
I9
sg15
(lp431
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp432
S'space'
p433
asg94
I9
sa(dp434
g20
(lp435
S'k'
asg17
S'Y'
sS'.thisRepN'
p436
I3
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p437
I10
sS'.thisN'
p438
I43
sS'.thisIndex'
p439
I7
sg15
(lp440
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp441
S'space'
p442
asg94
I7
sa(dp443
g20
(lp444
S'k'
asg17
S'Y'
sS'.thisRepN'
p445
I4
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p446
I0
sS'.thisN'
p447
I44
sS'.thisIndex'
p448
I3
sg15
(lp449
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg18
(lp450
S'space'
p451
asg94
I3
sa(dp452
g20
(lp453
S'd'
asg17
S'N'
sS'.thisRepN'
p454
I4
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p455
I1
sS'.thisN'
p456
I45
sS'.thisIndex'
p457
I2
sg15
(lp458
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg18
Nsg94
I2
sa(dp459
g20
(lp460
S'd'
asg17
S'Y'
sS'.thisRepN'
p461
I4
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p462
I2
sS'.thisN'
p463
I46
sS'.thisIndex'
p464
I2
sg15
(lp465
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp466
S'space'
p467
asg94
I2
sa(dp468
g20
(lp469
S'd'
asg17
S'Y'
sS'.thisRepN'
p470
I4
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p471
I3
sS'.thisN'
p472
I47
sS'.thisIndex'
p473
I1
sg15
(lp474
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp475
S'space'
p476
asg94
I1
sa(dp477
g20
(lp478
S'k'
asg17
S'Y'
sS'.thisRepN'
p479
I4
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p480
I4
sS'.thisN'
p481
I48
sS'.thisIndex'
p482
I0
sg15
(lp483
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg18
(lp484
S'space'
p485
asg94
I0
sa(dp486
g20
(lp487
S'd'
asg17
S'N'
sg22
I43
sS'.thisN'
p488
I49
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p489
I5
sS'.thisRepN'
p490
I4
sg21
I29
sS'.thisIndex'
p491
I5
sg23
I25
sg15
(lp492
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg18
Nsg94
I5
sa(dp493
g20
(lp494
S'k'
asg94
I8
sS'.thisRepN'
p495
I4
sg30
VF
sg31
g32
sS'.thisTrialN'
p496
I6
sS'.thisN'
p497
I50
sS'.thisIndex'
p498
I8
sg15
(lp499
S'k'
asg16
S'Y'
sg14
I2
sa(dp500
g20
(lp501
S'd'
asg94
I1
sS'.thisRepN'
p502
I4
sg30
VF
sg31
g32
sS'.thisTrialN'
p503
I7
sS'.thisN'
p504
I51
sS'.thisIndex'
p505
I1
sg15
(lp506
S'k'
asg16
S'N'
sg14
I2
sa(dp507
g20
(lp508
S'k'
asg17
S'Y'
sS'.thisRepN'
p509
I4
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p510
I8
sS'.thisN'
p511
I52
sS'.thisIndex'
p512
I3
sg15
(lp513
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp514
S'space'
p515
asg94
I3
sa(dp516
g20
(lp517
S'k'
asg17
S'Y'
sS'.thisRepN'
p518
I4
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p519
I9
sS'.thisN'
p520
I53
sS'.thisIndex'
p521
I4
sg15
(lp522
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
(lp523
S'space'
p524
asg94
I4
sa(dp525
g20
(lp526
S'd'
asg17
S'Y'
sS'.thisRepN'
p527
I4
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p528
I10
sS'.thisN'
p529
I54
sS'.thisIndex'
p530
I9
sg15
(lp531
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
(lp532
S'space'
p533
asg94
I9
sa(dp534
g20
(lp535
S'd'
asg17
S'Y'
sS'.thisRepN'
p536
I5
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p537
I0
sS'.thisN'
p538
I55
sS'.thisIndex'
p539
I7
sg15
(lp540
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp541
S'space'
p542
asg94
I7
sa(dp543
g20
(lp544
S'k'
asg17
S'N'
sS'.thisRepN'
p545
I5
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p546
I1
sS'.thisN'
p547
I56
sS'.thisIndex'
p548
I7
sg15
(lp549
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I7
sa(dp550
g20
(lp551
S'k'
asg17
S'N'
sS'.thisRepN'
p552
I5
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p553
I2
sS'.thisN'
p554
I57
sS'.thisIndex'
p555
I9
sg15
(lp556
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg18
Nsg94
I9
sa(dp557
g20
(lp558
S'k'
asg17
S'N'
sS'.thisRepN'
p559
I5
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p560
I3
sS'.thisN'
p561
I58
sS'.thisIndex'
p562
I4
sg15
(lp563
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I4
sa(dp564
g20
(lp565
S'd'
asg17
S'N'
sS'.thisRepN'
p566
I5
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p567
I4
sS'.thisN'
p568
I59
sS'.thisIndex'
p569
I0
sg15
(lp570
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I0
sa(dp571
g20
(lp572
S'd'
asg17
S'N'
sS'.thisRepN'
p573
I5
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p574
I5
sS'.thisN'
p575
I60
sS'.thisIndex'
p576
I1
sg15
(lp577
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
Nsg94
I1
sa(dp578
g20
(lp579
S'd'
asg17
S'Y'
sS'.thisRepN'
p580
I5
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p581
I6
sS'.thisN'
p582
I61
sS'.thisIndex'
p583
I8
sg15
(lp584
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp585
S'space'
p586
asg94
I8
sa(dp587
g20
(lp588
S'd'
asg17
S'N'
sS'.thisRepN'
p589
I5
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p590
I7
sS'.thisN'
p591
I62
sS'.thisIndex'
p592
I2
sg15
(lp593
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
Nsg94
I2
sa(dp594
g20
(lp595
S'd'
asg17
S'N'
sS'.thisRepN'
p596
I5
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p597
I8
sS'.thisN'
p598
I63
sS'.thisIndex'
p599
I4
sg15
(lp600
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp601
S'space'
p602
asg94
I4
sa(dp603
g20
(lp604
S'd'
asg17
S'N'
sS'.thisRepN'
p605
I5
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p606
I9
sS'.thisN'
p607
I64
sS'.thisIndex'
p608
I2
sg15
(lp609
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I2
sa(dp610
g20
(lp611
S'k'
asg17
S'N'
sS'.thisRepN'
p612
I5
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p613
I10
sS'.thisN'
p614
I65
sS'.thisIndex'
p615
I4
sg15
(lp616
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg18
Nsg94
I4
sa(dp617
g20
(lp618
S'k'
asg17
S'Y'
sS'.thisRepN'
p619
I6
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p620
I0
sS'.thisN'
p621
I66
sS'.thisIndex'
p622
I2
sg15
(lp623
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
(lp624
S'space'
p625
asg94
I2
sa(dp626
g20
(lp627
S'd'
asg17
S'N'
sS'.thisRepN'
p628
I6
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p629
I1
sS'.thisN'
p630
I67
sS'.thisIndex'
p631
I5
sg15
(lp632
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I5
sa(dp633
g20
(lp634
S'd'
asg17
S'N'
sS'.thisRepN'
p635
I6
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p636
I2
sS'.thisN'
p637
I68
sS'.thisIndex'
p638
I1
sg15
(lp639
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I1
sa(dp640
g20
(lp641
S'd'
asg17
S'Y'
sS'.thisRepN'
p642
I6
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p643
I3
sS'.thisN'
p644
I69
sS'.thisIndex'
p645
I5
sg15
(lp646
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp647
S'space'
p648
asg94
I5
sa(dp649
g20
(lp650
S'd'
asg17
S'N'
sS'.thisRepN'
p651
I6
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p652
I4
sS'.thisN'
p653
I70
sS'.thisIndex'
p654
I7
sg15
(lp655
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I7
sa(dp656
g20
(lp657
S'k'
asg17
S'Y'
sS'.thisRepN'
p658
I6
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p659
I5
sS'.thisN'
p660
I71
sS'.thisIndex'
p661
I2
sg15
(lp662
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I2
sa(dp663
g20
(lp664
S'k'
asg17
S'Y'
sS'.thisRepN'
p665
I6
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p666
I6
sS'.thisN'
p667
I72
sS'.thisIndex'
p668
I8
sg15
(lp669
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
(lp670
S'space'
p671
asg94
I8
sa(dp672
g20
(lp673
S'k'
asg17
S'N'
sS'.thisRepN'
p674
I6
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p675
I7
sS'.thisN'
p676
I73
sS'.thisIndex'
p677
I8
sg15
(lp678
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I8
sa(dp679
g20
(lp680
S'k'
asg17
S'Y'
sS'.thisRepN'
p681
I6
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p682
I8
sS'.thisN'
p683
I74
sS'.thisIndex'
p684
I8
sg15
(lp685
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp686
S'space'
p687
asg94
I8
sa(dp688
g20
(lp689
S'd'
asg17
S'Y'
sS'.thisRepN'
p690
I6
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p691
I9
sS'.thisN'
p692
I75
sS'.thisIndex'
p693
I1
sg15
(lp694
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp695
S'space'
p696
asg94
I1
sa(dp697
g20
(lp698
S'k'
asg17
S'N'
sS'.thisRepN'
p699
I6
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p700
I10
sS'.thisN'
p701
I76
sS'.thisIndex'
p702
I2
sg15
(lp703
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I2
sa(dp704
g20
(lp705
S'k'
asg17
S'Y'
sS'.thisRepN'
p706
I7
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p707
I0
sS'.thisN'
p708
I77
sS'.thisIndex'
p709
I3
sg15
(lp710
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp711
S'space'
p712
asg94
I3
sa(dp713
g20
(lp714
S'k'
asg17
S'Y'
sS'.thisRepN'
p715
I7
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p716
I1
sS'.thisN'
p717
I78
sS'.thisIndex'
p718
I4
sg15
(lp719
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
(lp720
S'space'
p721
asg94
I4
sa(dp722
g20
(lp723
S'k'
asg17
S'N'
sS'.thisRepN'
p724
I7
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p725
I2
sS'.thisN'
p726
I79
sS'.thisIndex'
p727
I7
sg15
(lp728
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I7
sa(dp729
g20
(lp730
S'd'
asg17
S'Y'
sS'.thisRepN'
p731
I7
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p732
I3
sS'.thisN'
p733
I80
sS'.thisIndex'
p734
I6
sg15
(lp735
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp736
S'space'
p737
asg94
I6
sa(dp738
g20
(lp739
S'k'
asg17
S'Y'
sS'.thisRepN'
p740
I7
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p741
I4
sS'.thisN'
p742
I81
sS'.thisIndex'
p743
I6
sg15
(lp744
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
(lp745
S'space'
p746
asg94
I6
sa(dp747
g20
(lp748
S'd'
asg17
S'N'
sS'.thisRepN'
p749
I7
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p750
I5
sS'.thisN'
p751
I82
sS'.thisIndex'
p752
I6
sg15
(lp753
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I6
sa(dp754
g20
(lp755
S'k'
asg17
S'N'
sS'.thisRepN'
p756
I7
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p757
I6
sS'.thisN'
p758
I83
sS'.thisIndex'
p759
I2
sg15
(lp760
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I2
sa(dp761
g20
(lp762
S'd'
asg17
S'Y'
sS'.thisRepN'
p763
I7
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p764
I7
sS'.thisN'
p765
I84
sS'.thisIndex'
p766
I5
sg15
(lp767
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp768
S'space'
p769
asg94
I5
sa(dp770
g20
(lp771
S'd'
asg17
S'Y'
sS'.thisRepN'
p772
I7
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p773
I8
sS'.thisN'
p774
I85
sS'.thisIndex'
p775
I4
sg15
(lp776
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp777
S'space'
p778
asg94
I4
sa(dp779
g20
(lp780
S'k'
asg17
S'Y'
sS'.thisRepN'
p781
I7
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p782
I9
sS'.thisN'
p783
I86
sS'.thisIndex'
p784
I7
sg15
(lp785
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
(lp786
S'space'
p787
asg94
I7
sa(dp788
g20
(lp789
S'd'
asg17
S'Y'
sS'.thisRepN'
p790
I7
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p791
I10
sS'.thisN'
p792
I87
sS'.thisIndex'
p793
I7
sg15
(lp794
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp795
S'space'
p796
asg94
I7
sa(dp797
g20
(lp798
S'd'
asg17
S'Y'
sS'.thisRepN'
p799
I8
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p800
I0
sS'.thisN'
p801
I88
sS'.thisIndex'
p802
I10
sg15
(lp803
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
(lp804
S'space'
p805
asg94
I10
sa(dp806
g20
(lp807
S'd'
asg17
S'Y'
sS'.thisRepN'
p808
I8
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p809
I1
sS'.thisN'
p810
I89
sS'.thisIndex'
p811
I1
sg15
(lp812
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I1
sa(dp813
g20
(lp814
S'k'
asg17
S'Y'
sS'.thisRepN'
p815
I8
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p816
I2
sS'.thisN'
p817
I90
sS'.thisIndex'
p818
I4
sg15
(lp819
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp820
S'space'
p821
asg94
I4
sa(dp822
g20
(lp823
S'k'
asg17
S'Y'
sS'.thisRepN'
p824
I8
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p825
I3
sS'.thisN'
p826
I91
sS'.thisIndex'
p827
I6
sg15
(lp828
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
(lp829
S'space'
p830
asg94
I6
sa(dp831
g20
(lp832
S'd'
asg17
S'N'
sS'.thisRepN'
p833
I8
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p834
I4
sS'.thisN'
p835
I92
sS'.thisIndex'
p836
I8
sg15
(lp837
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
Nsg94
I8
sa(dp838
g20
(lp839
S'd'
asg17
S'Y'
sS'.thisRepN'
p840
I8
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p841
I5
sS'.thisN'
p842
I93
sS'.thisIndex'
p843
I6
sg15
(lp844
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
(lp845
S'space'
p846
asg94
I6
sa(dp847
g20
(lp848
S'd'
asg17
S'Y'
sS'.thisRepN'
p849
I8
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p850
I6
sS'.thisN'
p851
I94
sS'.thisIndex'
p852
I8
sg15
(lp853
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
(lp854
S'space'
p855
asg94
I8
sa(dp856
g20
(lp857
S'd'
asg17
S'N'
sS'.thisRepN'
p858
I8
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p859
I7
sS'.thisN'
p860
I95
sS'.thisIndex'
p861
I4
sg15
(lp862
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg18
Nsg94
I4
sa(dp863
g20
(lp864
S'd'
asg17
S'N'
sS'.thisRepN'
p865
I8
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p866
I8
sS'.thisN'
p867
I96
sS'.thisIndex'
p868
I5
sg15
(lp869
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I5
sa(dp870
g20
(lp871
S'd'
asg17
S'N'
sS'.thisRepN'
p872
I8
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p873
I9
sS'.thisN'
p874
I97
sS'.thisIndex'
p875
I3
sg15
(lp876
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I3
sa(dp877
g20
(lp878
S'd'
asg17
S'N'
sS'.thisRepN'
p879
I8
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p880
I10
sS'.thisN'
p881
I98
sS'.thisIndex'
p882
I3
sg15
(lp883
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I3
sa(dp884
g20
(lp885
S'd'
asg17
S'N'
sg22
I45
sS'.thisN'
p886
I99
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p887
I0
sS'.thisRepN'
p888
I9
sg21
I29
sS'.thisIndex'
p889
I9
sg23
I25
sg15
(lp890
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg18
Nsg94
I9
sa(dp891
g20
(lp892
S'k'
asg94
I3
sS'.thisRepN'
p893
I9
sg30
VF
sg31
g32
sS'.thisTrialN'
p894
I1
sS'.thisN'
p895
I100
sS'.thisIndex'
p896
I3
sg15
(lp897
S'd'
asg16
S'N'
sg14
I3
sa(dp898
g20
(lp899
S'd'
asg94
I0
sS'.thisRepN'
p900
I9
sg30
VF
sg31
g32
sS'.thisTrialN'
p901
I2
sS'.thisN'
p902
I101
sS'.thisIndex'
p903
I0
sg15
(lp904
S'k'
asg16
S'N'
sg14
I3
sa(dp905
g20
(lp906
S'd'
asg17
S'N'
sS'.thisRepN'
p907
I9
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p908
I3
sS'.thisN'
p909
I102
sS'.thisIndex'
p910
I1
sg15
(lp911
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I1
sa(dp912
g20
(lp913
S'd'
asg17
S'Y'
sS'.thisRepN'
p914
I9
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p915
I4
sS'.thisN'
p916
I103
sS'.thisIndex'
p917
I5
sg15
(lp918
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I5
sa(dp919
g20
(lp920
S'k'
asg17
S'Y'
sS'.thisRepN'
p921
I9
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p922
I5
sS'.thisN'
p923
I104
sS'.thisIndex'
p924
I3
sg15
(lp925
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg18
(lp926
S'space'
p927
asg94
I3
sa(dp928
g20
(lp929
S'd'
asg17
S'Y'
sS'.thisRepN'
p930
I9
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p931
I6
sS'.thisN'
p932
I105
sS'.thisIndex'
p933
I6
sg15
(lp934
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I6
sa(dp935
g20
(lp936
S'd'
asg17
S'Y'
sS'.thisRepN'
p937
I9
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p938
I7
sS'.thisN'
p939
I106
sS'.thisIndex'
p940
I2
sg15
(lp941
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
(lp942
S'space'
p943
asg94
I2
sa(dp944
g20
(lp945
S'k'
asg17
S'N'
sS'.thisRepN'
p946
I9
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p947
I8
sS'.thisN'
p948
I107
sS'.thisIndex'
p949
I6
sg15
(lp950
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg18
(lp951
S'd'
asg94
I6
sa(dp952
g20
(lp953
S'k'
asg17
S'Y'
sS'.thisRepN'
p954
I9
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p955
I9
sS'.thisN'
p956
I108
sS'.thisIndex'
p957
I1
sg15
(lp958
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
(lp959
S'space'
p960
asg94
I1
sa(dp961
g20
(lp962
S'd'
asg17
S'Y'
sS'.thisRepN'
p963
I9
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p964
I10
sS'.thisN'
p965
I109
sS'.thisIndex'
p966
I8
sg15
(lp967
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
(lp968
S'space'
p969
asg94
I8
sa(dp970
g20
(lp971
S'k'
asg17
S'Y'
sS'.thisRepN'
p972
I10
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p973
I0
sS'.thisN'
p974
I110
sS'.thisIndex'
p975
I9
sg15
(lp976
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
(lp977
S'space'
p978
asg94
I9
sa(dp979
g20
(lp980
S'k'
asg17
S'N'
sS'.thisRepN'
p981
I10
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p982
I1
sS'.thisN'
p983
I111
sS'.thisIndex'
p984
I8
sg15
(lp985
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I8
sa(dp986
g20
(lp987
S'd'
asg17
S'N'
sS'.thisRepN'
p988
I10
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p989
I2
sS'.thisN'
p990
I112
sS'.thisIndex'
p991
I2
sg15
(lp992
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I2
sa(dp993
g20
(lp994
S'k'
asg17
S'Y'
sS'.thisRepN'
p995
I10
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p996
I3
sS'.thisN'
p997
I113
sS'.thisIndex'
p998
I3
sg15
(lp999
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I3
sa(dp1000
g20
(lp1001
S'd'
asg17
S'Y'
sS'.thisRepN'
p1002
I10
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1003
I4
sS'.thisN'
p1004
I114
sS'.thisIndex'
p1005
I5
sg15
(lp1006
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
(lp1007
S'space'
p1008
asg94
I5
sa(dp1009
g20
(lp1010
S'k'
asg17
S'Y'
sS'.thisRepN'
p1011
I10
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1012
I5
sS'.thisN'
p1013
I115
sS'.thisIndex'
p1014
I6
sg15
(lp1015
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
(lp1016
S'space'
p1017
asg94
I6
sa(dp1018
g20
(lp1019
S'd'
asg17
S'N'
sS'.thisRepN'
p1020
I10
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1021
I6
sS'.thisN'
p1022
I116
sS'.thisIndex'
p1023
I2
sg15
(lp1024
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I2
sa(dp1025
g20
(lp1026
S'd'
asg17
S'N'
sS'.thisRepN'
p1027
I10
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1028
I7
sS'.thisN'
p1029
I117
sS'.thisIndex'
p1030
I10
sg15
(lp1031
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I10
sa(dp1032
g20
(lp1033
S'k'
asg17
S'N'
sS'.thisRepN'
p1034
I10
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1035
I8
sS'.thisN'
p1036
I118
sS'.thisIndex'
p1037
I6
sg15
(lp1038
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I6
sa(dp1039
g20
(lp1040
S'd'
asg17
S'N'
sS'.thisRepN'
p1041
I10
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1042
I9
sS'.thisN'
p1043
I119
sS'.thisIndex'
p1044
I2
sg15
(lp1045
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I2
sa(dp1046
g20
(lp1047
S'd'
asg17
S'N'
sS'.thisRepN'
p1048
I10
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1049
I10
sS'.thisN'
p1050
I120
sS'.thisIndex'
p1051
I4
sg15
(lp1052
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I4
sa(dp1053
g20
(lp1054
S'd'
asg17
S'Y'
sS'.thisRepN'
p1055
I11
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1056
I0
sS'.thisN'
p1057
I121
sS'.thisIndex'
p1058
I3
sg15
(lp1059
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I3
sa(dp1060
g20
(lp1061
S'd'
asg17
S'Y'
sS'.thisRepN'
p1062
I11
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1063
I1
sS'.thisN'
p1064
I122
sS'.thisIndex'
p1065
I8
sg15
(lp1066
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I8
sa(dp1067
g20
(lp1068
S'd'
asg17
S'Y'
sS'.thisRepN'
p1069
I11
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1070
I2
sS'.thisN'
p1071
I123
sS'.thisIndex'
p1072
I4
sg15
(lp1073
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
(lp1074
S'space'
p1075
asg94
I4
sa(dp1076
g20
(lp1077
S'd'
asg17
S'N'
sS'.thisRepN'
p1078
I11
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1079
I3
sS'.thisN'
p1080
I124
sS'.thisIndex'
p1081
I9
sg15
(lp1082
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I9
sa(dp1083
g20
(lp1084
S'k'
asg17
S'N'
sS'.thisRepN'
p1085
I11
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1086
I4
sS'.thisN'
p1087
I125
sS'.thisIndex'
p1088
I7
sg15
(lp1089
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I7
sa(dp1090
g20
(lp1091
S'k'
asg17
S'Y'
sS'.thisRepN'
p1092
I11
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1093
I5
sS'.thisN'
p1094
I126
sS'.thisIndex'
p1095
I2
sg15
(lp1096
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg18
(lp1097
S'space'
p1098
asg94
I2
sa(dp1099
g20
(lp1100
S'd'
asg17
S'Y'
sS'.thisRepN'
p1101
I11
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1102
I6
sS'.thisN'
p1103
I127
sS'.thisIndex'
p1104
I3
sg15
(lp1105
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
(lp1106
S'space'
p1107
asg94
I3
sa(dp1108
g20
(lp1109
S'd'
asg17
S'N'
sS'.thisRepN'
p1110
I11
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1111
I7
sS'.thisN'
p1112
I128
sS'.thisIndex'
p1113
I3
sg15
(lp1114
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I3
sa(dp1115
g20
(lp1116
S'k'
asg17
S'Y'
sS'.thisRepN'
p1117
I11
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1118
I8
sS'.thisN'
p1119
I129
sS'.thisIndex'
p1120
I4
sg15
(lp1121
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg18
(lp1122
S'space'
p1123
asg94
I4
sa(dp1124
g20
(lp1125
S'k'
asg17
S'N'
sS'.thisRepN'
p1126
I11
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1127
I9
sS'.thisN'
p1128
I130
sS'.thisIndex'
p1129
I8
sg15
(lp1130
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I8
sa(dp1131
g20
(lp1132
S'k'
asg17
S'N'
sS'.thisRepN'
p1133
I11
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1134
I10
sS'.thisN'
p1135
I131
sS'.thisIndex'
p1136
I9
sg15
(lp1137
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I9
sa(dp1138
g20
(lp1139
S'k'
asg17
S'N'
sS'.thisRepN'
p1140
I12
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1141
I0
sS'.thisN'
p1142
I132
sS'.thisIndex'
p1143
I4
sg15
(lp1144
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I4
sa(dp1145
g20
(lp1146
S'd'
asg17
S'N'
sS'.thisRepN'
p1147
I12
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1148
I1
sS'.thisN'
p1149
I133
sS'.thisIndex'
p1150
I2
sg15
(lp1151
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I2
sa(dp1152
g20
(lp1153
S'd'
asg17
S'N'
sS'.thisRepN'
p1154
I12
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1155
I2
sS'.thisN'
p1156
I134
sS'.thisIndex'
p1157
I5
sg15
(lp1158
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I5
sa(dp1159
g20
(lp1160
S'k'
asg17
S'N'
sS'.thisRepN'
p1161
I12
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1162
I3
sS'.thisN'
p1163
I135
sS'.thisIndex'
p1164
I6
sg15
(lp1165
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I6
sa(dp1166
g20
(lp1167
S'd'
asg17
S'Y'
sS'.thisRepN'
p1168
I12
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1169
I4
sS'.thisN'
p1170
I136
sS'.thisIndex'
p1171
I7
sg15
(lp1172
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
(lp1173
S'space'
p1174
asg94
I7
sa(dp1175
g20
(lp1176
S'd'
asg17
S'N'
sS'.thisRepN'
p1177
I12
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1178
I5
sS'.thisN'
p1179
I137
sS'.thisIndex'
p1180
I1
sg15
(lp1181
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I1
sa(dp1182
g20
(lp1183
S'k'
asg17
S'Y'
sS'.thisRepN'
p1184
I12
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1185
I6
sS'.thisN'
p1186
I138
sS'.thisIndex'
p1187
I6
sg15
(lp1188
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
(lp1189
S'space'
p1190
asg94
I6
sa(dp1191
g20
(lp1192
S'k'
asg17
S'N'
sS'.thisRepN'
p1193
I12
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1194
I7
sS'.thisN'
p1195
I139
sS'.thisIndex'
p1196
I8
sg15
(lp1197
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I8
sa(dp1198
g20
(lp1199
S'k'
asg17
S'Y'
sS'.thisRepN'
p1200
I12
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1201
I8
sS'.thisN'
p1202
I140
sS'.thisIndex'
p1203
I0
sg15
(lp1204
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
(lp1205
S'space'
p1206
asg94
I0
sa(dp1207
g20
(lp1208
S'k'
asg17
S'N'
sS'.thisRepN'
p1209
I12
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1210
I9
sS'.thisN'
p1211
I141
sS'.thisIndex'
p1212
I3
sg15
(lp1213
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I3
sa(dp1214
g20
(lp1215
S'k'
asg17
S'Y'
sS'.thisRepN'
p1216
I12
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1217
I10
sS'.thisN'
p1218
I142
sS'.thisIndex'
p1219
I5
sg15
(lp1220
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
(lp1221
S'space'
p1222
asg94
I5
sa(dp1223
g20
(lp1224
S'k'
asg17
S'N'
sS'.thisRepN'
p1225
I13
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1226
I0
sS'.thisN'
p1227
I143
sS'.thisIndex'
p1228
I5
sg15
(lp1229
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
Nsg94
I5
sa(dp1230
g20
(lp1231
S'd'
asg17
S'Y'
sS'.thisRepN'
p1232
I13
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1233
I1
sS'.thisN'
p1234
I144
sS'.thisIndex'
p1235
I6
sg15
(lp1236
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
(lp1237
S'space'
p1238
asg94
I6
sa(dp1239
g20
(lp1240
S'k'
asg17
S'Y'
sS'.thisRepN'
p1241
I13
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1242
I2
sS'.thisN'
p1243
I145
sS'.thisIndex'
p1244
I3
sg15
(lp1245
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg18
(lp1246
S'space'
p1247
asg94
I3
sa(dp1248
g20
(lp1249
S'd'
asg17
S'N'
sS'.thisRepN'
p1250
I13
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1251
I3
sS'.thisN'
p1252
I146
sS'.thisIndex'
p1253
I7
sg15
(lp1254
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I7
sa(dp1255
g20
(lp1256
S'k'
asg17
S'Y'
sS'.thisRepN'
p1257
I13
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1258
I4
sS'.thisN'
p1259
I147
sS'.thisIndex'
p1260
I10
sg15
(lp1261
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg18
(lp1262
S'space'
p1263
asg94
I10
sa(dp1264
g20
(lp1265
S'd'
asg17
S'N'
sS'.thisRepN'
p1266
I13
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1267
I5
sS'.thisN'
p1268
I148
sS'.thisIndex'
p1269
I1
sg15
(lp1270
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg18
Nsg94
I1
sa(dp1271
g20
(lp1272
S'k'
asg17
S'Y'
sg22
I42
sS'.thisN'
p1273
I149
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1274
I6
sS'.thisRepN'
p1275
I13
sg21
I22
sS'.thisIndex'
p1276
I1
sg23
I24
sg15
(lp1277
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg18
(lp1278
S'space'
p1279
asg94
I1
sa(dp1280
g20
(lp1281
S'd'
asg94
I3
sS'.thisRepN'
p1282
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1283
I7
sS'.thisN'
p1284
I150
sS'.thisIndex'
p1285
I3
sg15
(lp1286
S'k'
asg16
S'N'
sg14
I4
sa(dp1287
g20
(lp1288
S'k'
asg94
I7
sS'.thisRepN'
p1289
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1290
I8
sS'.thisN'
p1291
I151
sS'.thisIndex'
p1292
I7
sg15
(lp1293
S'd'
asg16
S'N'
sg14
I4
sa(dp1294
g20
(lp1295
S'k'
asg17
S'N'
sS'.thisRepN'
p1296
I13
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1297
I9
sS'.thisN'
p1298
I152
sS'.thisIndex'
p1299
I7
sg15
(lp1300
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
Nsg94
I7
sa(dp1301
g20
(lp1302
S'k'
asg17
S'Y'
sS'.thisRepN'
p1303
I13
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1304
I10
sS'.thisN'
p1305
I153
sS'.thisIndex'
p1306
I4
sg15
(lp1307
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1308
S'space'
p1309
asg94
I4
sa(dp1310
g20
(lp1311
S'd'
asg17
S'Y'
sS'.thisRepN'
p1312
I14
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1313
I0
sS'.thisN'
p1314
I154
sS'.thisIndex'
p1315
I8
sg15
(lp1316
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
(lp1317
S'space'
p1318
asg94
I8
sa(dp1319
g20
(lp1320
S'd'
asg17
S'N'
sS'.thisRepN'
p1321
I14
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1322
I1
sS'.thisN'
p1323
I155
sS'.thisIndex'
p1324
I4
sg15
(lp1325
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I4
sa(dp1326
g20
(lp1327
S'k'
asg17
S'N'
sS'.thisRepN'
p1328
I14
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1329
I2
sS'.thisN'
p1330
I156
sS'.thisIndex'
p1331
I9
sg15
(lp1332
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I9
sa(dp1333
g20
(lp1334
S'k'
asg17
S'Y'
sS'.thisRepN'
p1335
I14
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1336
I3
sS'.thisN'
p1337
I157
sS'.thisIndex'
p1338
I2
sg15
(lp1339
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
Nsg94
I2
sa(dp1340
g20
(lp1341
S'k'
asg17
S'Y'
sS'.thisRepN'
p1342
I14
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1343
I4
sS'.thisN'
p1344
I158
sS'.thisIndex'
p1345
I4
sg15
(lp1346
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1347
S'space'
p1348
asg94
I4
sa(dp1349
g20
(lp1350
S'k'
asg17
S'N'
sS'.thisRepN'
p1351
I14
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1352
I5
sS'.thisN'
p1353
I159
sS'.thisIndex'
p1354
I4
sg15
(lp1355
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I4
sa(dp1356
g20
(lp1357
S'd'
asg17
S'N'
sS'.thisRepN'
p1358
I14
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1359
I6
sS'.thisN'
p1360
I160
sS'.thisIndex'
p1361
I7
sg15
(lp1362
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I7
sa(dp1363
g20
(lp1364
S'k'
asg17
S'Y'
sS'.thisRepN'
p1365
I14
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1366
I7
sS'.thisN'
p1367
I161
sS'.thisIndex'
p1368
I6
sg15
(lp1369
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1370
S'space'
p1371
asg94
I6
sa(dp1372
g20
(lp1373
S'd'
asg17
S'Y'
sS'.thisRepN'
p1374
I14
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1375
I8
sS'.thisN'
p1376
I162
sS'.thisIndex'
p1377
I3
sg15
(lp1378
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I3
sa(dp1379
g20
(lp1380
S'k'
asg17
S'Y'
sS'.thisRepN'
p1381
I14
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1382
I9
sS'.thisN'
p1383
I163
sS'.thisIndex'
p1384
I9
sg15
(lp1385
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1386
S'space'
p1387
asg94
I9
sa(dp1388
g20
(lp1389
S'd'
asg17
S'Y'
sS'.thisRepN'
p1390
I14
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1391
I10
sS'.thisN'
p1392
I164
sS'.thisIndex'
p1393
I9
sg15
(lp1394
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1395
S'space'
p1396
asg94
I9
sa(dp1397
g20
(lp1398
S'd'
asg17
S'Y'
sS'.thisRepN'
p1399
I15
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1400
I0
sS'.thisN'
p1401
I165
sS'.thisIndex'
p1402
I6
sg15
(lp1403
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I6
sa(dp1404
g20
(lp1405
S'd'
asg17
S'N'
sS'.thisRepN'
p1406
I15
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1407
I1
sS'.thisN'
p1408
I166
sS'.thisIndex'
p1409
I8
sg15
(lp1410
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1411
S'space'
p1412
asg94
I8
sa(dp1413
g20
(lp1414
S'd'
asg17
S'Y'
sS'.thisRepN'
p1415
I15
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1416
I2
sS'.thisN'
p1417
I167
sS'.thisIndex'
p1418
I1
sg15
(lp1419
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
Nsg94
I1
sa(dp1420
g20
(lp1421
S'd'
asg17
S'N'
sS'.thisRepN'
p1422
I15
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1423
I3
sS'.thisN'
p1424
I168
sS'.thisIndex'
p1425
I0
sg15
(lp1426
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I0
sa(dp1427
g20
(lp1428
S'k'
asg17
S'Y'
sS'.thisRepN'
p1429
I15
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1430
I4
sS'.thisN'
p1431
I169
sS'.thisIndex'
p1432
I5
sg15
(lp1433
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I5
sa(dp1434
g20
(lp1435
S'k'
asg17
S'Y'
sS'.thisRepN'
p1436
I15
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1437
I5
sS'.thisN'
p1438
I170
sS'.thisIndex'
p1439
I3
sg15
(lp1440
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1441
S'space'
p1442
asg94
I3
sa(dp1443
g20
(lp1444
S'k'
asg17
S'N'
sS'.thisRepN'
p1445
I15
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1446
I6
sS'.thisN'
p1447
I171
sS'.thisIndex'
p1448
I10
sg15
(lp1449
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I10
sa(dp1450
g20
(lp1451
S'd'
asg17
S'Y'
sS'.thisRepN'
p1452
I15
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1453
I7
sS'.thisN'
p1454
I172
sS'.thisIndex'
p1455
I4
sg15
(lp1456
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I4
sa(dp1457
g20
(lp1458
S'd'
asg17
S'Y'
sS'.thisRepN'
p1459
I15
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1460
I8
sS'.thisN'
p1461
I173
sS'.thisIndex'
p1462
I0
sg15
(lp1463
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
Nsg94
I0
sa(dp1464
g20
(lp1465
S'k'
asg17
S'Y'
sS'.thisRepN'
p1466
I15
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1467
I9
sS'.thisN'
p1468
I174
sS'.thisIndex'
p1469
I9
sg15
(lp1470
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
Nsg94
I9
sa(dp1471
g20
(lp1472
S'd'
asg17
S'N'
sS'.thisRepN'
p1473
I15
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1474
I10
sS'.thisN'
p1475
I175
sS'.thisIndex'
p1476
I4
sg15
(lp1477
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I4
sa(dp1478
g20
(lp1479
S'd'
asg17
S'Y'
sS'.thisRepN'
p1480
I16
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1481
I0
sS'.thisN'
p1482
I176
sS'.thisIndex'
p1483
I6
sg15
(lp1484
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
(lp1485
S'space'
p1486
asg94
I6
sa(dp1487
g20
(lp1488
S'd'
asg17
S'Y'
sS'.thisRepN'
p1489
I16
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1490
I1
sS'.thisN'
p1491
I177
sS'.thisIndex'
p1492
I1
sg15
(lp1493
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1494
S'space'
p1495
asg94
I1
sa(dp1496
g20
(lp1497
S'd'
asg17
S'N'
sS'.thisRepN'
p1498
I16
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1499
I2
sS'.thisN'
p1500
I178
sS'.thisIndex'
p1501
I1
sg15
(lp1502
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
Nsg94
I1
sa(dp1503
g20
(lp1504
S'k'
asg17
S'N'
sS'.thisRepN'
p1505
I16
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1506
I3
sS'.thisN'
p1507
I179
sS'.thisIndex'
p1508
I4
sg15
(lp1509
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
Nsg94
I4
sa(dp1510
g20
(lp1511
S'd'
asg17
S'N'
sS'.thisRepN'
p1512
I16
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1513
I4
sS'.thisN'
p1514
I180
sS'.thisIndex'
p1515
I1
sg15
(lp1516
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
(lp1517
S'space'
p1518
asg94
I1
sa(dp1519
g20
(lp1520
S'd'
asg17
S'N'
sS'.thisRepN'
p1521
I16
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1522
I5
sS'.thisN'
p1523
I181
sS'.thisIndex'
p1524
I1
sg15
(lp1525
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I1
sa(dp1526
g20
(lp1527
S'd'
asg17
S'Y'
sS'.thisRepN'
p1528
I16
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1529
I6
sS'.thisN'
p1530
I182
sS'.thisIndex'
p1531
I7
sg15
(lp1532
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I7
sa(dp1533
g20
(lp1534
S'k'
asg17
S'Y'
sS'.thisRepN'
p1535
I16
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1536
I7
sS'.thisN'
p1537
I183
sS'.thisIndex'
p1538
I6
sg15
(lp1539
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
(lp1540
S'space'
p1541
asg94
I6
sa(dp1542
g20
(lp1543
S'd'
asg17
S'Y'
sS'.thisRepN'
p1544
I16
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1545
I8
sS'.thisN'
p1546
I184
sS'.thisIndex'
p1547
I2
sg15
(lp1548
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1549
S'space'
p1550
asg94
I2
sa(dp1551
g20
(lp1552
S'd'
asg17
S'Y'
sS'.thisRepN'
p1553
I16
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1554
I9
sS'.thisN'
p1555
I185
sS'.thisIndex'
p1556
I6
sg15
(lp1557
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
(lp1558
S'space'
p1559
asg94
I6
sa(dp1560
g20
(lp1561
S'k'
asg17
S'Y'
sS'.thisRepN'
p1562
I16
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1563
I10
sS'.thisN'
p1564
I186
sS'.thisIndex'
p1565
I5
sg15
(lp1566
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1567
S'space'
p1568
asg94
I5
sa(dp1569
g20
(lp1570
S'k'
asg17
S'N'
sS'.thisRepN'
p1571
I17
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1572
I0
sS'.thisN'
p1573
I187
sS'.thisIndex'
p1574
I2
sg15
(lp1575
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
Nsg94
I2
sa(dp1576
g20
(lp1577
S'k'
asg17
S'Y'
sS'.thisRepN'
p1578
I17
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1579
I1
sS'.thisN'
p1580
I188
sS'.thisIndex'
p1581
I0
sg15
(lp1582
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1583
S'space'
p1584
asg94
I0
sa(dp1585
g20
(lp1586
S'k'
asg17
S'Y'
sS'.thisRepN'
p1587
I17
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1588
I2
sS'.thisN'
p1589
I189
sS'.thisIndex'
p1590
I9
sg15
(lp1591
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1592
S'space'
p1593
asg94
I9
sa(dp1594
g20
(lp1595
S'k'
asg17
S'N'
sS'.thisRepN'
p1596
I17
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1597
I3
sS'.thisN'
p1598
I190
sS'.thisIndex'
p1599
I2
sg15
(lp1600
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I2
sa(dp1601
g20
(lp1602
S'k'
asg17
S'Y'
sS'.thisRepN'
p1603
I17
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1604
I4
sS'.thisN'
p1605
I191
sS'.thisIndex'
p1606
I0
sg15
(lp1607
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
Nsg94
I0
sa(dp1608
g20
(lp1609
S'k'
asg17
S'N'
sS'.thisRepN'
p1610
I17
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1611
I5
sS'.thisN'
p1612
I192
sS'.thisIndex'
p1613
I4
sg15
(lp1614
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I4
sa(dp1615
g20
(lp1616
S'd'
asg17
S'N'
sS'.thisRepN'
p1617
I17
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1618
I6
sS'.thisN'
p1619
I193
sS'.thisIndex'
p1620
I9
sg15
(lp1621
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
Nsg94
I9
sa(dp1622
g20
(lp1623
S'd'
asg17
S'N'
sS'.thisRepN'
p1624
I17
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1625
I7
sS'.thisN'
p1626
I194
sS'.thisIndex'
p1627
I3
sg15
(lp1628
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
(lp1629
S'space'
p1630
asg94
I3
sa(dp1631
g20
(lp1632
S'd'
asg17
S'N'
sS'.thisRepN'
p1633
I17
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1634
I8
sS'.thisN'
p1635
I195
sS'.thisIndex'
p1636
I6
sg15
(lp1637
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
Nsg94
I6
sa(dp1638
g20
(lp1639
S'd'
asg17
S'N'
sS'.thisRepN'
p1640
I17
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1641
I9
sS'.thisN'
p1642
I196
sS'.thisIndex'
p1643
I6
sg15
(lp1644
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I6
sa(dp1645
g20
(lp1646
S'k'
asg17
S'N'
sS'.thisRepN'
p1647
I17
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1648
I10
sS'.thisN'
p1649
I197
sS'.thisIndex'
p1650
I10
sg15
(lp1651
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I10
sa(dp1652
g20
(lp1653
S'd'
asg17
S'N'
sS'.thisRepN'
p1654
I18
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1655
I0
sS'.thisN'
p1656
I198
sS'.thisIndex'
p1657
I4
sg15
(lp1658
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg18
Nsg94
I4
sa(dp1659
g20
(lp1660
S'k'
asg17
S'N'
sg22
I34
sS'.thisN'
p1661
I199
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1662
I1
sS'.thisRepN'
p1663
I18
sg21
I17
sS'.thisIndex'
p1664
I4
sg23
I25
sg15
(lp1665
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg18
(lp1666
S'space'
p1667
asg94
I4
sa(dp1668
g20
(lp1669
S'k'
asg94
I1
sS'.thisRepN'
p1670
I18
sg30
VF
sg31
g32
sS'.thisTrialN'
p1671
I2
sS'.thisN'
p1672
I200
sS'.thisIndex'
p1673
I1
sg15
(lp1674
S'k'
asg16
S'Y'
sg14
I5
sa(dp1675
g20
(lp1676
S'd'
asg94
I5
sS'.thisRepN'
p1677
I18
sg30
VF
sg31
g32
sS'.thisTrialN'
p1678
I3
sS'.thisN'
p1679
I201
sS'.thisIndex'
p1680
I5
sg15
(lp1681
S'd'
asg16
S'Y'
sg14
I5
sa(dp1682
g20
(lp1683
S'k'
asg17
S'Y'
sS'.thisRepN'
p1684
I18
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1685
I4
sS'.thisN'
p1686
I202
sS'.thisIndex'
p1687
I10
sg15
(lp1688
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
(lp1689
S'space'
p1690
asg94
I10
sa(dp1691
g20
(lp1692
S'k'
asg17
S'Y'
sS'.thisRepN'
p1693
I18
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1694
I5
sS'.thisN'
p1695
I203
sS'.thisIndex'
p1696
I6
sg15
(lp1697
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
(lp1698
S'space'
p1699
asg94
I6
sa(dp1700
g20
(lp1701
S'k'
asg17
S'N'
sS'.thisRepN'
p1702
I18
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1703
I6
sS'.thisN'
p1704
I204
sS'.thisIndex'
p1705
I2
sg15
(lp1706
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I2
sa(dp1707
g20
(lp1708
S'k'
asg17
S'Y'
sS'.thisRepN'
p1709
I18
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1710
I7
sS'.thisN'
p1711
I205
sS'.thisIndex'
p1712
I1
sg15
(lp1713
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
(lp1714
S'space'
p1715
asg94
I1
sa(dp1716
g20
(lp1717
S'k'
asg17
S'Y'
sS'.thisRepN'
p1718
I18
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1719
I8
sS'.thisN'
p1720
I206
sS'.thisIndex'
p1721
I5
sg15
(lp1722
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
(lp1723
S'space'
p1724
asg94
I5
sa(dp1725
g20
(lp1726
S'k'
asg17
S'N'
sS'.thisRepN'
p1727
I18
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1728
I9
sS'.thisN'
p1729
I207
sS'.thisIndex'
p1730
I8
sg15
(lp1731
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I8
sa(dp1732
g20
(lp1733
S'd'
asg17
S'Y'
sS'.thisRepN'
p1734
I18
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1735
I10
sS'.thisN'
p1736
I208
sS'.thisIndex'
p1737
I7
sg15
(lp1738
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I7
sa(dp1739
g20
(lp1740
S'd'
asg17
S'Y'
sS'.thisRepN'
p1741
I19
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1742
I0
sS'.thisN'
p1743
I209
sS'.thisIndex'
p1744
I8
sg15
(lp1745
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I8
sa(dp1746
g20
(lp1747
S'd'
asg17
S'N'
sS'.thisRepN'
p1748
I19
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1749
I1
sS'.thisN'
p1750
I210
sS'.thisIndex'
p1751
I1
sg15
(lp1752
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I1
sa(dp1753
g20
(lp1754
S'd'
asg17
S'Y'
sS'.thisRepN'
p1755
I19
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1756
I2
sS'.thisN'
p1757
I211
sS'.thisIndex'
p1758
I5
sg15
(lp1759
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I5
sa(dp1760
g20
(lp1761
S'k'
asg17
S'N'
sS'.thisRepN'
p1762
I19
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1763
I3
sS'.thisN'
p1764
I212
sS'.thisIndex'
p1765
I9
sg15
(lp1766
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I9
sa(dp1767
g20
(lp1768
S'k'
asg17
S'Y'
sS'.thisRepN'
p1769
I19
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1770
I4
sS'.thisN'
p1771
I213
sS'.thisIndex'
p1772
I7
sg15
(lp1773
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
(lp1774
S'space'
p1775
asg94
I7
sa(dp1776
g20
(lp1777
S'd'
asg17
S'Y'
sS'.thisRepN'
p1778
I19
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1779
I5
sS'.thisN'
p1780
I214
sS'.thisIndex'
p1781
I3
sg15
(lp1782
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I3
sa(dp1783
g20
(lp1784
S'k'
asg17
S'N'
sS'.thisRepN'
p1785
I19
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1786
I6
sS'.thisN'
p1787
I215
sS'.thisIndex'
p1788
I0
sg15
(lp1789
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I0
sa(dp1790
g20
(lp1791
S'd'
asg17
S'Y'
sS'.thisRepN'
p1792
I19
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1793
I7
sS'.thisN'
p1794
I216
sS'.thisIndex'
p1795
I3
sg15
(lp1796
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
(lp1797
S'space'
p1798
asg94
I3
sa(dp1799
g20
(lp1800
S'k'
asg17
S'Y'
sS'.thisRepN'
p1801
I19
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1802
I8
sS'.thisN'
p1803
I217
sS'.thisIndex'
p1804
I10
sg15
(lp1805
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
(lp1806
S'space'
p1807
asg94
I10
sa(dp1808
g20
(lp1809
S'k'
asg17
S'N'
sS'.thisRepN'
p1810
I19
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1811
I9
sS'.thisN'
p1812
I218
sS'.thisIndex'
p1813
I6
sg15
(lp1814
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I6
sa(dp1815
g20
(lp1816
S'k'
asg17
S'Y'
sS'.thisRepN'
p1817
I19
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1818
I10
sS'.thisN'
p1819
I219
sS'.thisIndex'
p1820
I5
sg15
(lp1821
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I5
sa(dp1822
g20
(lp1823
S'd'
asg17
S'Y'
sS'.thisRepN'
p1824
I20
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1825
I0
sS'.thisN'
p1826
I220
sS'.thisIndex'
p1827
I6
sg15
(lp1828
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
(lp1829
S'space'
p1830
asg94
I6
sa(dp1831
g20
(lp1832
S'd'
asg17
S'Y'
sS'.thisRepN'
p1833
I20
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1834
I1
sS'.thisN'
p1835
I221
sS'.thisIndex'
p1836
I0
sg15
(lp1837
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I0
sa(dp1838
g20
(lp1839
S'k'
asg17
S'Y'
sS'.thisRepN'
p1840
I20
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1841
I2
sS'.thisN'
p1842
I222
sS'.thisIndex'
p1843
I8
sg15
(lp1844
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
(lp1845
S'space'
p1846
asg94
I8
sa(dp1847
g20
(lp1848
S'd'
asg17
S'Y'
sS'.thisRepN'
p1849
I20
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1850
I3
sS'.thisN'
p1851
I223
sS'.thisIndex'
p1852
I0
sg15
(lp1853
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
(lp1854
S'space'
p1855
asg94
I0
sa(dp1856
g20
(lp1857
S'd'
asg17
S'Y'
sS'.thisRepN'
p1858
I20
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1859
I4
sS'.thisN'
p1860
I224
sS'.thisIndex'
p1861
I5
sg15
(lp1862
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
(lp1863
S'space'
p1864
asg94
I5
sa(dp1865
g20
(lp1866
S'd'
asg17
S'Y'
sS'.thisRepN'
p1867
I20
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1868
I5
sS'.thisN'
p1869
I225
sS'.thisIndex'
p1870
I0
sg15
(lp1871
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
(lp1872
S'space'
p1873
asg94
I0
sa(dp1874
g20
(lp1875
S'k'
asg17
S'Y'
sS'.thisRepN'
p1876
I20
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1877
I6
sS'.thisN'
p1878
I226
sS'.thisIndex'
p1879
I8
sg15
(lp1880
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
(lp1881
S'space'
p1882
asg94
I8
sa(dp1883
g20
(lp1884
S'k'
asg17
S'Y'
sS'.thisRepN'
p1885
I20
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1886
I7
sS'.thisN'
p1887
I227
sS'.thisIndex'
p1888
I5
sg15
(lp1889
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
(lp1890
S'space'
p1891
asg94
I5
sa(dp1892
g20
(lp1893
S'k'
asg17
S'N'
sS'.thisRepN'
p1894
I20
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1895
I8
sS'.thisN'
p1896
I228
sS'.thisIndex'
p1897
I4
sg15
(lp1898
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I4
sa(dp1899
g20
(lp1900
S'd'
asg17
S'Y'
sS'.thisRepN'
p1901
I20
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1902
I9
sS'.thisN'
p1903
I229
sS'.thisIndex'
p1904
I9
sg15
(lp1905
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I9
sa(dp1906
g20
(lp1907
S'k'
asg17
S'Y'
sS'.thisRepN'
p1908
I20
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1909
I10
sS'.thisN'
p1910
I230
sS'.thisIndex'
p1911
I3
sg15
(lp1912
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I3
sa(dp1913
g20
(lp1914
S'd'
asg17
S'Y'
sS'.thisRepN'
p1915
I21
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1916
I0
sS'.thisN'
p1917
I231
sS'.thisIndex'
p1918
I4
sg15
(lp1919
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
(lp1920
S'space'
p1921
asg94
I4
sa(dp1922
g20
(lp1923
S'd'
asg17
S'N'
sS'.thisRepN'
p1924
I21
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1925
I1
sS'.thisN'
p1926
I232
sS'.thisIndex'
p1927
I4
sg15
(lp1928
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I4
sa(dp1929
g20
(lp1930
S'k'
asg17
S'N'
sS'.thisRepN'
p1931
I21
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1932
I2
sS'.thisN'
p1933
I233
sS'.thisIndex'
p1934
I1
sg15
(lp1935
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
(lp1936
S'space'
p1937
asg94
I1
sa(dp1938
g20
(lp1939
S'k'
asg17
S'N'
sS'.thisRepN'
p1940
I21
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1941
I3
sS'.thisN'
p1942
I234
sS'.thisIndex'
p1943
I9
sg15
(lp1944
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I9
sa(dp1945
g20
(lp1946
S'k'
asg17
S'N'
sS'.thisRepN'
p1947
I21
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1948
I4
sS'.thisN'
p1949
I235
sS'.thisIndex'
p1950
I2
sg15
(lp1951
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
(lp1952
S'space'
p1953
asg94
I2
sa(dp1954
g20
(lp1955
S'k'
asg17
S'Y'
sS'.thisRepN'
p1956
I21
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1957
I5
sS'.thisN'
p1958
I236
sS'.thisIndex'
p1959
I2
sg15
(lp1960
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I2
sa(dp1961
g20
(lp1962
S'k'
asg17
S'Y'
sS'.thisRepN'
p1963
I21
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1964
I6
sS'.thisN'
p1965
I237
sS'.thisIndex'
p1966
I9
sg15
(lp1967
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I9
sa(dp1968
g20
(lp1969
S'd'
asg17
S'N'
sS'.thisRepN'
p1970
I21
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1971
I7
sS'.thisN'
p1972
I238
sS'.thisIndex'
p1973
I2
sg15
(lp1974
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I2
sa(dp1975
g20
(lp1976
S'k'
asg17
S'N'
sS'.thisRepN'
p1977
I21
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1978
I8
sS'.thisN'
p1979
I239
sS'.thisIndex'
p1980
I10
sg15
(lp1981
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I10
sa(dp1982
g20
(lp1983
S'd'
asg17
S'N'
sS'.thisRepN'
p1984
I21
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p1985
I9
sS'.thisN'
p1986
I240
sS'.thisIndex'
p1987
I0
sg15
(lp1988
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I0
sa(dp1989
g20
(lp1990
S'k'
asg17
S'N'
sS'.thisRepN'
p1991
I21
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p1992
I10
sS'.thisN'
p1993
I241
sS'.thisIndex'
p1994
I0
sg15
(lp1995
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg18
(lp1996
S'space'
p1997
asg94
I0
sa(dp1998
g20
(lp1999
S'd'
asg17
S'N'
sS'.thisRepN'
p2000
I22
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2001
I0
sS'.thisN'
p2002
I242
sS'.thisIndex'
p2003
I9
sg15
(lp2004
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I9
sa(dp2005
g20
(lp2006
S'k'
asg17
S'N'
sS'.thisRepN'
p2007
I22
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2008
I1
sS'.thisN'
p2009
I243
sS'.thisIndex'
p2010
I4
sg15
(lp2011
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I4
sa(dp2012
g20
(lp2013
S'd'
asg17
S'N'
sS'.thisRepN'
p2014
I22
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2015
I2
sS'.thisN'
p2016
I244
sS'.thisIndex'
p2017
I10
sg15
(lp2018
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I10
sa(dp2019
g20
(lp2020
S'k'
asg17
S'N'
sS'.thisRepN'
p2021
I22
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2022
I3
sS'.thisN'
p2023
I245
sS'.thisIndex'
p2024
I8
sg15
(lp2025
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I8
sa(dp2026
g20
(lp2027
S'd'
asg17
S'N'
sS'.thisRepN'
p2028
I22
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2029
I4
sS'.thisN'
p2030
I246
sS'.thisIndex'
p2031
I2
sg15
(lp2032
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg18
Nsg94
I2
sa(dp2033
g20
(lp2034
S'd'
asg17
S'N'
sS'.thisRepN'
p2035
I22
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2036
I5
sS'.thisN'
p2037
I247
sS'.thisIndex'
p2038
I9
sg15
(lp2039
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I9
sa(dp2040
g20
(lp2041
S'd'
asg17
S'N'
sS'.thisRepN'
p2042
I22
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2043
I6
sS'.thisN'
p2044
I248
sS'.thisIndex'
p2045
I5
sg15
(lp2046
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I5
sa(dp2047
g20
(lp2048
S'd'
asg17
S'N'
sg22
I35
sS'.thisN'
p2049
I249
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2050
I7
sS'.thisRepN'
p2051
I22
sg21
I24
sS'.thisIndex'
p2052
I9
sg23
I25
sg15
(lp2053
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg18
Nsg94
I9
sa(dp2054
g20
(lp2055
S'k'
asg94
I3
sS'.thisRepN'
p2056
I22
sg30
VF
sg31
g32
sS'.thisTrialN'
p2057
I8
sS'.thisN'
p2058
I250
sS'.thisIndex'
p2059
I3
sg15
(lp2060
S'k'
asg16
S'Y'
sg14
I6
sa(dp2061
g20
(lp2062
S'd'
asg94
I5
sS'.thisRepN'
p2063
I22
sg30
VF
sg31
g32
sS'.thisTrialN'
p2064
I9
sS'.thisN'
p2065
I251
sS'.thisIndex'
p2066
I5
sg15
(lp2067
S'k'
asg16
S'N'
sg14
I6
sa(dp2068
g20
(lp2069
S'd'
asg17
S'N'
sS'.thisRepN'
p2070
I22
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2071
I10
sS'.thisN'
p2072
I252
sS'.thisIndex'
p2073
I4
sg15
(lp2074
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I4
sa(dp2075
g20
(lp2076
S'k'
asg17
S'Y'
sS'.thisRepN'
p2077
I23
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2078
I0
sS'.thisN'
p2079
I253
sS'.thisIndex'
p2080
I3
sg15
(lp2081
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
(lp2082
S'space'
p2083
asg94
I3
sa(dp2084
g20
(lp2085
S'd'
asg17
S'N'
sS'.thisRepN'
p2086
I23
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2087
I1
sS'.thisN'
p2088
I254
sS'.thisIndex'
p2089
I0
sg15
(lp2090
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I0
sa(dp2091
g20
(lp2092
S'k'
asg17
S'Y'
sS'.thisRepN'
p2093
I23
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2094
I2
sS'.thisN'
p2095
I255
sS'.thisIndex'
p2096
I0
sg15
(lp2097
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
(lp2098
S'space'
p2099
asg94
I0
sa(dp2100
g20
(lp2101
S'd'
asg17
S'N'
sS'.thisRepN'
p2102
I23
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2103
I3
sS'.thisN'
p2104
I256
sS'.thisIndex'
p2105
I2
sg15
(lp2106
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I2
sa(dp2107
g20
(lp2108
S'd'
asg17
S'Y'
sS'.thisRepN'
p2109
I23
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2110
I4
sS'.thisN'
p2111
I257
sS'.thisIndex'
p2112
I7
sg15
(lp2113
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
(lp2114
S'space'
p2115
asg94
I7
sa(dp2116
g20
(lp2117
S'd'
asg17
S'Y'
sS'.thisRepN'
p2118
I23
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2119
I5
sS'.thisN'
p2120
I258
sS'.thisIndex'
p2121
I6
sg15
(lp2122
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I6
sa(dp2123
g20
(lp2124
S'k'
asg17
S'Y'
sS'.thisRepN'
p2125
I23
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2126
I6
sS'.thisN'
p2127
I259
sS'.thisIndex'
p2128
I3
sg15
(lp2129
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
(lp2130
S'space'
p2131
asg94
I3
sa(dp2132
g20
(lp2133
S'd'
asg17
S'Y'
sS'.thisRepN'
p2134
I23
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2135
I7
sS'.thisN'
p2136
I260
sS'.thisIndex'
p2137
I10
sg15
(lp2138
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
(lp2139
S'space'
p2140
asg94
I10
sa(dp2141
g20
(lp2142
S'd'
asg17
S'N'
sS'.thisRepN'
p2143
I23
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2144
I8
sS'.thisN'
p2145
I261
sS'.thisIndex'
p2146
I9
sg15
(lp2147
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I9
sa(dp2148
g20
(lp2149
S'd'
asg17
S'N'
sS'.thisRepN'
p2150
I23
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2151
I9
sS'.thisN'
p2152
I262
sS'.thisIndex'
p2153
I0
sg15
(lp2154
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I0
sa(dp2155
g20
(lp2156
S'd'
asg17
S'N'
sS'.thisRepN'
p2157
I23
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2158
I10
sS'.thisN'
p2159
I263
sS'.thisIndex'
p2160
I0
sg15
(lp2161
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I0
sa(dp2162
g20
(lp2163
S'k'
asg17
S'N'
sS'.thisRepN'
p2164
I24
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2165
I0
sS'.thisN'
p2166
I264
sS'.thisIndex'
p2167
I2
sg15
(lp2168
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I2
sa(dp2169
g20
(lp2170
S'k'
asg17
S'Y'
sS'.thisRepN'
p2171
I24
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2172
I1
sS'.thisN'
p2173
I265
sS'.thisIndex'
p2174
I9
sg15
(lp2175
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
(lp2176
S'space'
p2177
asg94
I9
sa(dp2178
g20
(lp2179
S'd'
asg17
S'N'
sS'.thisRepN'
p2180
I24
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2181
I2
sS'.thisN'
p2182
I266
sS'.thisIndex'
p2183
I7
sg15
(lp2184
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I7
sa(dp2185
g20
(lp2186
S'k'
asg17
S'N'
sS'.thisRepN'
p2187
I24
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2188
I3
sS'.thisN'
p2189
I267
sS'.thisIndex'
p2190
I1
sg15
(lp2191
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I1
sa(dp2192
g20
(lp2193
S'k'
asg17
S'N'
sS'.thisRepN'
p2194
I24
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2195
I4
sS'.thisN'
p2196
I268
sS'.thisIndex'
p2197
I3
sg15
(lp2198
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I3
sa(dp2199
g20
(lp2200
S'k'
asg17
S'N'
sS'.thisRepN'
p2201
I24
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2202
I5
sS'.thisN'
p2203
I269
sS'.thisIndex'
p2204
I0
sg15
(lp2205
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I0
sa(dp2206
g20
(lp2207
S'd'
asg17
S'Y'
sS'.thisRepN'
p2208
I24
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2209
I6
sS'.thisN'
p2210
I270
sS'.thisIndex'
p2211
I1
sg15
(lp2212
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
(lp2213
S'space'
p2214
asg94
I1
sa(dp2215
g20
(lp2216
S'd'
asg17
S'N'
sS'.thisRepN'
p2217
I24
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2218
I7
sS'.thisN'
p2219
I271
sS'.thisIndex'
p2220
I4
sg15
(lp2221
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I4
sa(dp2222
g20
(lp2223
S'd'
asg17
S'N'
sS'.thisRepN'
p2224
I24
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2225
I8
sS'.thisN'
p2226
I272
sS'.thisIndex'
p2227
I2
sg15
(lp2228
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I2
sa(dp2229
g20
(lp2230
S'k'
asg17
S'N'
sS'.thisRepN'
p2231
I24
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2232
I9
sS'.thisN'
p2233
I273
sS'.thisIndex'
p2234
I10
sg15
(lp2235
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I10
sa(dp2236
g20
(lp2237
S'd'
asg17
S'N'
sS'.thisRepN'
p2238
I24
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2239
I10
sS'.thisN'
p2240
I274
sS'.thisIndex'
p2241
I9
sg15
(lp2242
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I9
sa(dp2243
g20
(lp2244
S'k'
asg17
S'N'
sS'.thisRepN'
p2245
I25
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2246
I0
sS'.thisN'
p2247
I275
sS'.thisIndex'
p2248
I10
sg15
(lp2249
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
(lp2250
S'd'
asg94
I10
sa(dp2251
g20
(lp2252
S'd'
asg17
S'Y'
sS'.thisRepN'
p2253
I25
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2254
I1
sS'.thisN'
p2255
I276
sS'.thisIndex'
p2256
I9
sg15
(lp2257
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
(lp2258
S'space'
p2259
asg94
I9
sa(dp2260
g20
(lp2261
S'k'
asg17
S'Y'
sS'.thisRepN'
p2262
I25
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2263
I2
sS'.thisN'
p2264
I277
sS'.thisIndex'
p2265
I0
sg15
(lp2266
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
(lp2267
S'space'
p2268
asg94
I0
sa(dp2269
g20
(lp2270
S'd'
asg17
S'Y'
sS'.thisRepN'
p2271
I25
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2272
I3
sS'.thisN'
p2273
I278
sS'.thisIndex'
p2274
I8
sg15
(lp2275
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
(lp2276
S'space'
p2277
asg94
I8
sa(dp2278
g20
(lp2279
S'd'
asg17
S'N'
sS'.thisRepN'
p2280
I25
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2281
I4
sS'.thisN'
p2282
I279
sS'.thisIndex'
p2283
I0
sg15
(lp2284
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I0
sa(dp2285
g20
(lp2286
S'd'
asg17
S'N'
sS'.thisRepN'
p2287
I25
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2288
I5
sS'.thisN'
p2289
I280
sS'.thisIndex'
p2290
I2
sg15
(lp2291
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I2
sa(dp2292
g20
(lp2293
S'k'
asg17
S'Y'
sS'.thisRepN'
p2294
I25
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2295
I6
sS'.thisN'
p2296
I281
sS'.thisIndex'
p2297
I0
sg15
(lp2298
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I0
sa(dp2299
g20
(lp2300
S'd'
asg17
S'N'
sS'.thisRepN'
p2301
I25
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2302
I7
sS'.thisN'
p2303
I282
sS'.thisIndex'
p2304
I10
sg15
(lp2305
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I10
sa(dp2306
g20
(lp2307
S'd'
asg17
S'N'
sS'.thisRepN'
p2308
I25
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2309
I8
sS'.thisN'
p2310
I283
sS'.thisIndex'
p2311
I4
sg15
(lp2312
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I4
sa(dp2313
g20
(lp2314
S'd'
asg17
S'Y'
sS'.thisRepN'
p2315
I25
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2316
I9
sS'.thisN'
p2317
I284
sS'.thisIndex'
p2318
I7
sg15
(lp2319
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I7
sa(dp2320
g20
(lp2321
S'd'
asg17
S'N'
sS'.thisRepN'
p2322
I25
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2323
I10
sS'.thisN'
p2324
I285
sS'.thisIndex'
p2325
I8
sg15
(lp2326
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I8
sa(dp2327
g20
(lp2328
S'd'
asg17
S'N'
sS'.thisRepN'
p2329
I26
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2330
I0
sS'.thisN'
p2331
I286
sS'.thisIndex'
p2332
I9
sg15
(lp2333
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I9
sa(dp2334
g20
(lp2335
S'k'
asg17
S'Y'
sS'.thisRepN'
p2336
I26
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2337
I1
sS'.thisN'
p2338
I287
sS'.thisIndex'
p2339
I4
sg15
(lp2340
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
(lp2341
S'd'
asg94
I4
sa(dp2342
g20
(lp2343
S'k'
asg17
S'Y'
sS'.thisRepN'
p2344
I26
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2345
I2
sS'.thisN'
p2346
I288
sS'.thisIndex'
p2347
I0
sg15
(lp2348
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I0
sa(dp2349
g20
(lp2350
S'k'
asg17
S'N'
sS'.thisRepN'
p2351
I26
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2352
I3
sS'.thisN'
p2353
I289
sS'.thisIndex'
p2354
I6
sg15
(lp2355
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I6
sa(dp2356
g20
(lp2357
S'd'
asg17
S'N'
sS'.thisRepN'
p2358
I26
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2359
I4
sS'.thisN'
p2360
I290
sS'.thisIndex'
p2361
I9
sg15
(lp2362
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I9
sa(dp2363
g20
(lp2364
S'd'
asg17
S'Y'
sS'.thisRepN'
p2365
I26
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2366
I5
sS'.thisN'
p2367
I291
sS'.thisIndex'
p2368
I5
sg15
(lp2369
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
(lp2370
S'space'
p2371
asg94
I5
sa(dp2372
g20
(lp2373
S'k'
asg17
S'N'
sS'.thisRepN'
p2374
I26
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2375
I6
sS'.thisN'
p2376
I292
sS'.thisIndex'
p2377
I0
sg15
(lp2378
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I0
sa(dp2379
g20
(lp2380
S'k'
asg17
S'Y'
sS'.thisRepN'
p2381
I26
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2382
I7
sS'.thisN'
p2383
I293
sS'.thisIndex'
p2384
I10
sg15
(lp2385
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I10
sa(dp2386
g20
(lp2387
S'k'
asg17
S'Y'
sS'.thisRepN'
p2388
I26
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2389
I8
sS'.thisN'
p2390
I294
sS'.thisIndex'
p2391
I8
sg15
(lp2392
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I8
sa(dp2393
g20
(lp2394
S'd'
asg17
S'Y'
sS'.thisRepN'
p2395
I26
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2396
I9
sS'.thisN'
p2397
I295
sS'.thisIndex'
p2398
I5
sg15
(lp2399
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg18
Nsg94
I5
sa(dp2400
g20
(lp2401
S'd'
asg17
S'Y'
sS'.thisRepN'
p2402
I26
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2403
I10
sS'.thisN'
p2404
I296
sS'.thisIndex'
p2405
I9
sg15
(lp2406
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
(lp2407
S'space'
p2408
asg94
I9
sa(dp2409
g20
(lp2410
S'd'
asg17
S'Y'
sS'.thisRepN'
p2411
I27
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2412
I0
sS'.thisN'
p2413
I297
sS'.thisIndex'
p2414
I6
sg15
(lp2415
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
(lp2416
S'space'
p2417
asg94
I6
sa(dp2418
g20
(lp2419
S'k'
asg17
S'N'
sS'.thisRepN'
p2420
I27
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2421
I1
sS'.thisN'
p2422
I298
sS'.thisIndex'
p2423
I7
sg15
(lp2424
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg18
Nsg94
I7
sa(dp2425
g20
(lp2426
S'k'
asg17
S'Y'
sg22
I39
sS'.thisN'
p2427
I299
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2428
I2
sS'.thisRepN'
p2429
I27
sg21
I22
sS'.thisIndex'
p2430
I10
sg23
I22
sg15
(lp2431
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg18
(lp2432
S'space'
p2433
asg94
I10
sa(dp2434
g20
(lp2435
S'k'
asg94
I9
sS'.thisRepN'
p2436
I27
sg30
VF
sg31
g32
sS'.thisTrialN'
p2437
I3
sS'.thisN'
p2438
I300
sS'.thisIndex'
p2439
I9
sg15
(lp2440
S'd'
asg16
S'N'
sg14
I7
sa(dp2441
g20
(lp2442
S'k'
asg94
I7
sS'.thisRepN'
p2443
I27
sg30
VF
sg31
g32
sS'.thisTrialN'
p2444
I4
sS'.thisN'
p2445
I301
sS'.thisIndex'
p2446
I7
sg15
(lp2447
S'k'
asg16
S'Y'
sg14
I7
sa(dp2448
g20
(lp2449
S'k'
asg17
S'N'
sS'.thisRepN'
p2450
I27
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2451
I5
sS'.thisN'
p2452
I302
sS'.thisIndex'
p2453
I7
sg15
(lp2454
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I7
sa(dp2455
g20
(lp2456
S'k'
asg17
S'N'
sS'.thisRepN'
p2457
I27
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2458
I6
sS'.thisN'
p2459
I303
sS'.thisIndex'
p2460
I2
sg15
(lp2461
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I2
sa(dp2462
g20
(lp2463
S'k'
asg17
S'Y'
sS'.thisRepN'
p2464
I27
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2465
I7
sS'.thisN'
p2466
I304
sS'.thisIndex'
p2467
I9
sg15
(lp2468
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
(lp2469
S'space'
p2470
asg94
I9
sa(dp2471
g20
(lp2472
S'd'
asg17
S'N'
sS'.thisRepN'
p2473
I27
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2474
I8
sS'.thisN'
p2475
I305
sS'.thisIndex'
p2476
I10
sg15
(lp2477
S'k'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I10
sa(dp2478
g20
(lp2479
S'd'
asg17
S'Y'
sS'.thisRepN'
p2480
I27
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2481
I9
sS'.thisN'
p2482
I306
sS'.thisIndex'
p2483
I7
sg15
(lp2484
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
(lp2485
S'space'
p2486
asg94
I7
sa(dp2487
g20
(lp2488
S'd'
asg17
S'N'
sS'.thisRepN'
p2489
I27
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2490
I10
sS'.thisN'
p2491
I307
sS'.thisIndex'
p2492
I10
sg15
(lp2493
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I10
sa(dp2494
g20
(lp2495
S'd'
asg17
S'Y'
sS'.thisRepN'
p2496
I28
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2497
I0
sS'.thisN'
p2498
I308
sS'.thisIndex'
p2499
I3
sg15
(lp2500
S'k'
asg30
VF
sg16
S'N'
sg14
I7
sg18
(lp2501
S'space'
p2502
asg94
I3
sa(dp2503
g20
(lp2504
S'd'
asg17
S'N'
sS'.thisRepN'
p2505
I28
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2506
I1
sS'.thisN'
p2507
I309
sS'.thisIndex'
p2508
I5
sg15
(lp2509
S'k'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I5
sa(dp2510
g20
(lp2511
S'k'
asg17
S'Y'
sS'.thisRepN'
p2512
I28
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2513
I2
sS'.thisN'
p2514
I310
sS'.thisIndex'
p2515
I8
sg15
(lp2516
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
(lp2517
S'space'
p2518
asg94
I8
sa(dp2519
g20
(lp2520
S'k'
asg17
S'N'
sS'.thisRepN'
p2521
I28
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2522
I3
sS'.thisN'
p2523
I311
sS'.thisIndex'
p2524
I10
sg15
(lp2525
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I10
sa(dp2526
g20
(lp2527
S'd'
asg17
S'N'
sS'.thisRepN'
p2528
I28
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2529
I4
sS'.thisN'
p2530
I312
sS'.thisIndex'
p2531
I3
sg15
(lp2532
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I3
sa(dp2533
g20
(lp2534
S'd'
asg17
S'Y'
sS'.thisRepN'
p2535
I28
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2536
I5
sS'.thisN'
p2537
I313
sS'.thisIndex'
p2538
I3
sg15
(lp2539
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
(lp2540
S'space'
p2541
asg94
I3
sa(dp2542
g20
(lp2543
S'd'
asg17
S'Y'
sS'.thisRepN'
p2544
I28
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2545
I6
sS'.thisN'
p2546
I314
sS'.thisIndex'
p2547
I8
sg15
(lp2548
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
(lp2549
S'space'
p2550
asg94
I8
sa(dp2551
g20
(lp2552
S'd'
asg17
S'Y'
sS'.thisRepN'
p2553
I28
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2554
I7
sS'.thisN'
p2555
I315
sS'.thisIndex'
p2556
I4
sg15
(lp2557
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
(lp2558
S'space'
p2559
asg94
I4
sa(dp2560
g20
(lp2561
S'd'
asg17
S'N'
sS'.thisRepN'
p2562
I28
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2563
I8
sS'.thisN'
p2564
I316
sS'.thisIndex'
p2565
I10
sg15
(lp2566
S'k'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I10
sa(dp2567
g20
(lp2568
S'd'
asg17
S'N'
sS'.thisRepN'
p2569
I28
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2570
I9
sS'.thisN'
p2571
I317
sS'.thisIndex'
p2572
I2
sg15
(lp2573
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I2
sa(dp2574
g20
(lp2575
S'd'
asg17
S'N'
sS'.thisRepN'
p2576
I28
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2577
I10
sS'.thisN'
p2578
I318
sS'.thisIndex'
p2579
I10
sg15
(lp2580
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I10
sa(dp2581
g20
(lp2582
S'k'
asg17
S'N'
sS'.thisRepN'
p2583
I29
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2584
I0
sS'.thisN'
p2585
I319
sS'.thisIndex'
p2586
I7
sg15
(lp2587
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I7
sa(dp2588
g20
(lp2589
S'd'
asg17
S'N'
sS'.thisRepN'
p2590
I29
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2591
I1
sS'.thisN'
p2592
I320
sS'.thisIndex'
p2593
I9
sg15
(lp2594
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I9
sa(dp2595
g20
(lp2596
S'k'
asg17
S'Y'
sS'.thisRepN'
p2597
I29
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2598
I2
sS'.thisN'
p2599
I321
sS'.thisIndex'
p2600
I2
sg15
(lp2601
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I2
sa(dp2602
g20
(lp2603
S'k'
asg17
S'Y'
sS'.thisRepN'
p2604
I29
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2605
I3
sS'.thisN'
p2606
I322
sS'.thisIndex'
p2607
I4
sg15
(lp2608
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
(lp2609
S'space'
p2610
asg94
I4
sa(dp2611
g20
(lp2612
S'k'
asg17
S'N'
sS'.thisRepN'
p2613
I29
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2614
I4
sS'.thisN'
p2615
I323
sS'.thisIndex'
p2616
I9
sg15
(lp2617
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I9
sa(dp2618
g20
(lp2619
S'k'
asg17
S'Y'
sS'.thisRepN'
p2620
I29
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2621
I5
sS'.thisN'
p2622
I324
sS'.thisIndex'
p2623
I6
sg15
(lp2624
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
(lp2625
S'space'
p2626
asg94
I6
sa(dp2627
g20
(lp2628
S'k'
asg17
S'N'
sS'.thisRepN'
p2629
I29
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2630
I6
sS'.thisN'
p2631
I325
sS'.thisIndex'
p2632
I9
sg15
(lp2633
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I9
sa(dp2634
g20
(lp2635
S'k'
asg17
S'N'
sS'.thisRepN'
p2636
I29
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2637
I7
sS'.thisN'
p2638
I326
sS'.thisIndex'
p2639
I7
sg15
(lp2640
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I7
sa(dp2641
g20
(lp2642
S'k'
asg17
S'Y'
sS'.thisRepN'
p2643
I29
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2644
I8
sS'.thisN'
p2645
I327
sS'.thisIndex'
p2646
I10
sg15
(lp2647
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
(lp2648
S'space'
p2649
asg94
I10
sa(dp2650
g20
(lp2651
S'k'
asg17
S'N'
sS'.thisRepN'
p2652
I29
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2653
I9
sS'.thisN'
p2654
I328
sS'.thisIndex'
p2655
I9
sg15
(lp2656
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I9
sa(dp2657
g20
(lp2658
S'k'
asg17
S'N'
sS'.thisRepN'
p2659
I29
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2660
I10
sS'.thisN'
p2661
I329
sS'.thisIndex'
p2662
I6
sg15
(lp2663
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I6
sa(dp2664
g20
(lp2665
S'k'
asg17
S'Y'
sS'.thisRepN'
p2666
I30
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2667
I0
sS'.thisN'
p2668
I330
sS'.thisIndex'
p2669
I10
sg15
(lp2670
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
(lp2671
S'space'
p2672
asg94
I10
sa(dp2673
g20
(lp2674
S'k'
asg17
S'Y'
sS'.thisRepN'
p2675
I30
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2676
I1
sS'.thisN'
p2677
I331
sS'.thisIndex'
p2678
I3
sg15
(lp2679
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
(lp2680
S'space'
p2681
asg94
I3
sa(dp2682
g20
(lp2683
S'k'
asg17
S'Y'
sS'.thisRepN'
p2684
I30
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2685
I2
sS'.thisN'
p2686
I332
sS'.thisIndex'
p2687
I7
sg15
(lp2688
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I7
sa(dp2689
g20
(lp2690
S'd'
asg17
S'N'
sS'.thisRepN'
p2691
I30
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2692
I3
sS'.thisN'
p2693
I333
sS'.thisIndex'
p2694
I4
sg15
(lp2695
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I4
sa(dp2696
g20
(lp2697
S'd'
asg17
S'N'
sS'.thisRepN'
p2698
I30
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2699
I4
sS'.thisN'
p2700
I334
sS'.thisIndex'
p2701
I0
sg15
(lp2702
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I0
sa(dp2703
g20
(lp2704
S'd'
asg17
S'N'
sS'.thisRepN'
p2705
I30
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2706
I5
sS'.thisN'
p2707
I335
sS'.thisIndex'
p2708
I5
sg15
(lp2709
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I5
sa(dp2710
g20
(lp2711
S'k'
asg17
S'Y'
sS'.thisRepN'
p2712
I30
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2713
I6
sS'.thisN'
p2714
I336
sS'.thisIndex'
p2715
I10
sg15
(lp2716
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
(lp2717
S'space'
p2718
asg94
I10
sa(dp2719
g20
(lp2720
S'd'
asg17
S'Y'
sS'.thisRepN'
p2721
I30
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2722
I7
sS'.thisN'
p2723
I337
sS'.thisIndex'
p2724
I8
sg15
(lp2725
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I8
sa(dp2726
g20
(lp2727
S'k'
asg17
S'N'
sS'.thisRepN'
p2728
I30
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2729
I8
sS'.thisN'
p2730
I338
sS'.thisIndex'
p2731
I6
sg15
(lp2732
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I6
sa(dp2733
g20
(lp2734
S'k'
asg17
S'Y'
sS'.thisRepN'
p2735
I30
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2736
I9
sS'.thisN'
p2737
I339
sS'.thisIndex'
p2738
I10
sg15
(lp2739
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
(lp2740
S'space'
p2741
asg94
I10
sa(dp2742
g20
(lp2743
S'd'
asg17
S'Y'
sS'.thisRepN'
p2744
I30
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2745
I10
sS'.thisN'
p2746
I340
sS'.thisIndex'
p2747
I10
sg15
(lp2748
S'k'
asg30
VF
sg16
S'N'
sg14
I7
sg18
(lp2749
S'k'
asg94
I10
sa(dp2750
g20
(lp2751
S'd'
asg17
S'N'
sS'.thisRepN'
p2752
I31
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2753
I0
sS'.thisN'
p2754
I341
sS'.thisIndex'
p2755
I3
sg15
(lp2756
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I3
sa(dp2757
g20
(lp2758
S'k'
asg17
S'N'
sS'.thisRepN'
p2759
I31
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2760
I1
sS'.thisN'
p2761
I342
sS'.thisIndex'
p2762
I0
sg15
(lp2763
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I0
sa(dp2764
g20
(lp2765
S'd'
asg17
S'Y'
sS'.thisRepN'
p2766
I31
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2767
I2
sS'.thisN'
p2768
I343
sS'.thisIndex'
p2769
I3
sg15
(lp2770
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
(lp2771
S'space'
p2772
asg94
I3
sa(dp2773
g20
(lp2774
S'k'
asg17
S'N'
sS'.thisRepN'
p2775
I31
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2776
I3
sS'.thisN'
p2777
I344
sS'.thisIndex'
p2778
I0
sg15
(lp2779
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I0
sa(dp2780
g20
(lp2781
S'k'
asg17
S'N'
sS'.thisRepN'
p2782
I31
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2783
I4
sS'.thisN'
p2784
I345
sS'.thisIndex'
p2785
I5
sg15
(lp2786
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I5
sa(dp2787
g20
(lp2788
S'k'
asg17
S'Y'
sS'.thisRepN'
p2789
I31
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2790
I5
sS'.thisN'
p2791
I346
sS'.thisIndex'
p2792
I5
sg15
(lp2793
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
(lp2794
S'space'
p2795
asg94
I5
sa(dp2796
g20
(lp2797
S'k'
asg17
S'N'
sS'.thisRepN'
p2798
I31
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2799
I6
sS'.thisN'
p2800
I347
sS'.thisIndex'
p2801
I7
sg15
(lp2802
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I7
sa(dp2803
g20
(lp2804
S'd'
asg17
S'N'
sS'.thisRepN'
p2805
I31
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2806
I7
sS'.thisN'
p2807
I348
sS'.thisIndex'
p2808
I10
sg15
(lp2809
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg18
Nsg94
I10
sa(dp2810
g20
(lp2811
S'd'
asg17
S'N'
sg22
I44
sS'.thisN'
p2812
I349
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2813
I8
sS'.thisRepN'
p2814
I31
sg21
I28
sS'.thisIndex'
p2815
I9
sg23
I20
sg15
(lp2816
S'k'
asg30
VF
sg16
S'N'
sg14
I7
sg18
Nsg94
I9
sa(dp2817
g20
(lp2818
S'k'
asg94
I6
sS'.thisRepN'
p2819
I31
sg30
VF
sg31
g32
sS'.thisTrialN'
p2820
I9
sS'.thisN'
p2821
I350
sS'.thisIndex'
p2822
I6
sg15
(lp2823
S'd'
asg16
S'N'
sg14
I8
sa(dp2824
g20
(lp2825
S'd'
asg94
I3
sS'.thisRepN'
p2826
I31
sg30
VF
sg31
g32
sS'.thisTrialN'
p2827
I10
sS'.thisN'
p2828
I351
sS'.thisIndex'
p2829
I3
sg15
(lp2830
S'k'
asg16
S'N'
sg14
I8
sa(dp2831
g20
(lp2832
S'd'
asg17
S'Y'
sS'.thisRepN'
p2833
I32
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2834
I0
sS'.thisN'
p2835
I352
sS'.thisIndex'
p2836
I7
sg15
(lp2837
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
(lp2838
S'space'
p2839
asg94
I7
sa(dp2840
g20
(lp2841
S'd'
asg17
S'N'
sS'.thisRepN'
p2842
I32
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2843
I1
sS'.thisN'
p2844
I353
sS'.thisIndex'
p2845
I4
sg15
(lp2846
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I4
sa(dp2847
g20
(lp2848
S'k'
asg17
S'N'
sS'.thisRepN'
p2849
I32
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2850
I2
sS'.thisN'
p2851
I354
sS'.thisIndex'
p2852
I8
sg15
(lp2853
S'd'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I8
sa(dp2854
g20
(lp2855
S'k'
asg17
S'Y'
sS'.thisRepN'
p2856
I32
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2857
I3
sS'.thisN'
p2858
I355
sS'.thisIndex'
p2859
I8
sg15
(lp2860
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I8
sa(dp2861
g20
(lp2862
S'd'
asg17
S'N'
sS'.thisRepN'
p2863
I32
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2864
I4
sS'.thisN'
p2865
I356
sS'.thisIndex'
p2866
I10
sg15
(lp2867
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I10
sa(dp2868
g20
(lp2869
S'k'
asg17
S'Y'
sS'.thisRepN'
p2870
I32
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2871
I5
sS'.thisN'
p2872
I357
sS'.thisIndex'
p2873
I5
sg15
(lp2874
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
(lp2875
S'space'
p2876
asg94
I5
sa(dp2877
g20
(lp2878
S'k'
asg17
S'N'
sS'.thisRepN'
p2879
I32
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2880
I6
sS'.thisN'
p2881
I358
sS'.thisIndex'
p2882
I3
sg15
(lp2883
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I3
sa(dp2884
g20
(lp2885
S'k'
asg17
S'Y'
sS'.thisRepN'
p2886
I32
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2887
I7
sS'.thisN'
p2888
I359
sS'.thisIndex'
p2889
I5
sg15
(lp2890
S'd'
asg30
VF
sg16
S'N'
sg14
I8
sg18
(lp2891
S'space'
p2892
asg94
I5
sa(dp2893
g20
(lp2894
S'k'
asg17
S'N'
sS'.thisRepN'
p2895
I32
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2896
I8
sS'.thisN'
p2897
I360
sS'.thisIndex'
p2898
I4
sg15
(lp2899
S'd'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I4
sa(dp2900
g20
(lp2901
S'd'
asg17
S'N'
sS'.thisRepN'
p2902
I32
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2903
I9
sS'.thisN'
p2904
I361
sS'.thisIndex'
p2905
I0
sg15
(lp2906
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I0
sa(dp2907
g20
(lp2908
S'k'
asg17
S'Y'
sS'.thisRepN'
p2909
I32
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2910
I10
sS'.thisN'
p2911
I362
sS'.thisIndex'
p2912
I3
sg15
(lp2913
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
(lp2914
S'space'
p2915
asg94
I3
sa(dp2916
g20
(lp2917
S'd'
asg17
S'N'
sS'.thisRepN'
p2918
I33
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2919
I0
sS'.thisN'
p2920
I363
sS'.thisIndex'
p2921
I10
sg15
(lp2922
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I10
sa(dp2923
g20
(lp2924
S'd'
asg17
S'Y'
sS'.thisRepN'
p2925
I33
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2926
I1
sS'.thisN'
p2927
I364
sS'.thisIndex'
p2928
I8
sg15
(lp2929
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
(lp2930
S'space'
p2931
asg94
I8
sa(dp2932
g20
(lp2933
S'd'
asg17
S'Y'
sS'.thisRepN'
p2934
I33
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2935
I2
sS'.thisN'
p2936
I365
sS'.thisIndex'
p2937
I10
sg15
(lp2938
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I10
sa(dp2939
g20
(lp2940
S'd'
asg17
S'Y'
sS'.thisRepN'
p2941
I33
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2942
I3
sS'.thisN'
p2943
I366
sS'.thisIndex'
p2944
I8
sg15
(lp2945
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I8
sa(dp2946
g20
(lp2947
S'k'
asg17
S'Y'
sS'.thisRepN'
p2948
I33
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2949
I4
sS'.thisN'
p2950
I367
sS'.thisIndex'
p2951
I6
sg15
(lp2952
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
(lp2953
S'space'
p2954
asg94
I6
sa(dp2955
g20
(lp2956
S'k'
asg17
S'N'
sS'.thisRepN'
p2957
I33
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2958
I5
sS'.thisN'
p2959
I368
sS'.thisIndex'
p2960
I4
sg15
(lp2961
S'd'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I4
sa(dp2962
g20
(lp2963
S'd'
asg17
S'Y'
sS'.thisRepN'
p2964
I33
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p2965
I6
sS'.thisN'
p2966
I369
sS'.thisIndex'
p2967
I9
sg15
(lp2968
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I9
sa(dp2969
g20
(lp2970
S'k'
asg17
S'Y'
sS'.thisRepN'
p2971
I33
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2972
I7
sS'.thisN'
p2973
I370
sS'.thisIndex'
p2974
I7
sg15
(lp2975
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
(lp2976
S'space'
p2977
asg94
I7
sa(dp2978
g20
(lp2979
S'd'
asg17
S'N'
sS'.thisRepN'
p2980
I33
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2981
I8
sS'.thisN'
p2982
I371
sS'.thisIndex'
p2983
I3
sg15
(lp2984
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I3
sa(dp2985
g20
(lp2986
S'd'
asg17
S'N'
sS'.thisRepN'
p2987
I33
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2988
I9
sS'.thisN'
p2989
I372
sS'.thisIndex'
p2990
I2
sg15
(lp2991
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I2
sa(dp2992
g20
(lp2993
S'k'
asg17
S'Y'
sS'.thisRepN'
p2994
I33
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p2995
I10
sS'.thisN'
p2996
I373
sS'.thisIndex'
p2997
I3
sg15
(lp2998
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
(lp2999
S'space'
p3000
asg94
I3
sa(dp3001
g20
(lp3002
S'k'
asg17
S'N'
sS'.thisRepN'
p3003
I34
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3004
I0
sS'.thisN'
p3005
I374
sS'.thisIndex'
p3006
I0
sg15
(lp3007
S'd'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I0
sa(dp3008
g20
(lp3009
S'k'
asg17
S'N'
sS'.thisRepN'
p3010
I34
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3011
I1
sS'.thisN'
p3012
I375
sS'.thisIndex'
p3013
I1
sg15
(lp3014
S'd'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I1
sa(dp3015
g20
(lp3016
S'k'
asg17
S'Y'
sS'.thisRepN'
p3017
I34
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3018
I2
sS'.thisN'
p3019
I376
sS'.thisIndex'
p3020
I1
sg15
(lp3021
S'd'
asg30
VF
sg16
S'N'
sg14
I8
sg18
(lp3022
S'space'
p3023
asg94
I1
sa(dp3024
g20
(lp3025
S'k'
asg17
S'N'
sS'.thisRepN'
p3026
I34
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3027
I3
sS'.thisN'
p3028
I377
sS'.thisIndex'
p3029
I2
sg15
(lp3030
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I2
sa(dp3031
g20
(lp3032
S'd'
asg17
S'N'
sS'.thisRepN'
p3033
I34
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3034
I4
sS'.thisN'
p3035
I378
sS'.thisIndex'
p3036
I3
sg15
(lp3037
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I3
sa(dp3038
g20
(lp3039
S'd'
asg17
S'Y'
sS'.thisRepN'
p3040
I34
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3041
I5
sS'.thisN'
p3042
I379
sS'.thisIndex'
p3043
I1
sg15
(lp3044
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I1
sa(dp3045
g20
(lp3046
S'k'
asg17
S'N'
sS'.thisRepN'
p3047
I34
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3048
I6
sS'.thisN'
p3049
I380
sS'.thisIndex'
p3050
I9
sg15
(lp3051
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I9
sa(dp3052
g20
(lp3053
S'd'
asg17
S'N'
sS'.thisRepN'
p3054
I34
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3055
I7
sS'.thisN'
p3056
I381
sS'.thisIndex'
p3057
I5
sg15
(lp3058
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I5
sa(dp3059
g20
(lp3060
S'k'
asg17
S'N'
sS'.thisRepN'
p3061
I34
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3062
I8
sS'.thisN'
p3063
I382
sS'.thisIndex'
p3064
I7
sg15
(lp3065
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I7
sa(dp3066
g20
(lp3067
S'd'
asg17
S'N'
sS'.thisRepN'
p3068
I34
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3069
I9
sS'.thisN'
p3070
I383
sS'.thisIndex'
p3071
I2
sg15
(lp3072
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I2
sa(dp3073
g20
(lp3074
S'k'
asg17
S'N'
sS'.thisRepN'
p3075
I34
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3076
I10
sS'.thisN'
p3077
I384
sS'.thisIndex'
p3078
I7
sg15
(lp3079
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I7
sa(dp3080
g20
(lp3081
S'd'
asg17
S'N'
sS'.thisRepN'
p3082
I35
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3083
I0
sS'.thisN'
p3084
I385
sS'.thisIndex'
p3085
I6
sg15
(lp3086
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I6
sa(dp3087
g20
(lp3088
S'd'
asg17
S'N'
sS'.thisRepN'
p3089
I35
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3090
I1
sS'.thisN'
p3091
I386
sS'.thisIndex'
p3092
I10
sg15
(lp3093
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I10
sa(dp3094
g20
(lp3095
S'k'
asg17
S'Y'
sS'.thisRepN'
p3096
I35
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3097
I2
sS'.thisN'
p3098
I387
sS'.thisIndex'
p3099
I7
sg15
(lp3100
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
(lp3101
S'space'
p3102
asg94
I7
sa(dp3103
g20
(lp3104
S'd'
asg17
S'N'
sS'.thisRepN'
p3105
I35
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3106
I3
sS'.thisN'
p3107
I388
sS'.thisIndex'
p3108
I1
sg15
(lp3109
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I1
sa(dp3110
g20
(lp3111
S'k'
asg17
S'N'
sS'.thisRepN'
p3112
I35
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3113
I4
sS'.thisN'
p3114
I389
sS'.thisIndex'
p3115
I6
sg15
(lp3116
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I6
sa(dp3117
g20
(lp3118
S'k'
asg17
S'N'
sS'.thisRepN'
p3119
I35
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3120
I5
sS'.thisN'
p3121
I390
sS'.thisIndex'
p3122
I7
sg15
(lp3123
S'd'
asg30
VF
sg16
S'N'
sg14
I8
sg18
(lp3124
S'd'
asg94
I7
sa(dp3125
g20
(lp3126
S'd'
asg17
S'N'
sS'.thisRepN'
p3127
I35
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3128
I6
sS'.thisN'
p3129
I391
sS'.thisIndex'
p3130
I10
sg15
(lp3131
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I10
sa(dp3132
g20
(lp3133
S'k'
asg17
S'N'
sS'.thisRepN'
p3134
I35
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3135
I7
sS'.thisN'
p3136
I392
sS'.thisIndex'
p3137
I8
sg15
(lp3138
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
Nsg94
I8
sa(dp3139
g20
(lp3140
S'd'
asg17
S'N'
sS'.thisRepN'
p3141
I35
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3142
I8
sS'.thisN'
p3143
I393
sS'.thisIndex'
p3144
I1
sg15
(lp3145
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I1
sa(dp3146
g20
(lp3147
S'd'
asg17
S'Y'
sS'.thisRepN'
p3148
I35
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3149
I9
sS'.thisN'
p3150
I394
sS'.thisIndex'
p3151
I7
sg15
(lp3152
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg18
(lp3153
S'space'
p3154
asg94
I7
sa(dp3155
g20
(lp3156
S'k'
asg17
S'N'
sS'.thisRepN'
p3157
I35
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3158
I10
sS'.thisN'
p3159
I395
sS'.thisIndex'
p3160
I0
sg15
(lp3161
S'd'
asg30
VF
sg16
S'N'
sg14
I8
sg18
Nsg94
I0
sa(dp3162
g20
(lp3163
S'd'
asg17
S'Y'
sS'.thisRepN'
p3164
I36
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3165
I0
sS'.thisN'
p3166
I396
sS'.thisIndex'
p3167
I5
sg15
(lp3168
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg18
(lp3169
S'space'
p3170
asg94
I5
sa(dp3171
g20
(lp3172
S'd'
asg17
S'Y'
sS'.thisRepN'
p3173
I36
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3174
I1
sS'.thisN'
p3175
I397
sS'.thisIndex'
p3176
I1
sg15
(lp3177
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg18
(lp3178
S'space'
p3179
asg94
I1
sa(dp3180
g20
(lp3181
S'k'
asg17
S'Y'
sS'.thisRepN'
p3182
I36
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3183
I2
sS'.thisN'
p3184
I398
sS'.thisIndex'
p3185
I5
sg15
(lp3186
S'd'
asg30
VF
sg16
S'N'
sg14
I8
sg18
(lp3187
S'space'
p3188
asg94
I5
sa(dp3189
g20
(lp3190
S'd'
asg17
S'Y'
sg22
I42
sS'.thisN'
p3191
I399
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3192
I3
sS'.thisRepN'
p3193
I36
sg21
I27
sS'.thisIndex'
p3194
I8
sg23
I20
sg15
(lp3195
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg18
(lp3196
S'space'
p3197
asg94
I8
sa(dp3198
g20
(lp3199
S'k'
asg94
I4
sS'.thisRepN'
p3200
I36
sg30
VF
sg31
g32
sS'.thisTrialN'
p3201
I4
sS'.thisN'
p3202
I400
sS'.thisIndex'
p3203
I4
sg15
(lp3204
S'k'
asg16
S'Y'
sg14
I9
sa(dp3205
g20
(lp3206
S'd'
asg94
I10
sS'.thisRepN'
p3207
I36
sg30
VF
sg31
g32
sS'.thisTrialN'
p3208
I5
sS'.thisN'
p3209
I401
sS'.thisIndex'
p3210
I10
sg15
(lp3211
S'd'
asg16
S'Y'
sg14
I9
sa(dp3212
g20
(lp3213
S'd'
asg17
S'Y'
sS'.thisRepN'
p3214
I36
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3215
I6
sS'.thisN'
p3216
I402
sS'.thisIndex'
p3217
I5
sg15
(lp3218
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
(lp3219
S'space'
p3220
asg94
I5
sa(dp3221
g20
(lp3222
S'k'
asg17
S'N'
sS'.thisRepN'
p3223
I36
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3224
I7
sS'.thisN'
p3225
I403
sS'.thisIndex'
p3226
I6
sg15
(lp3227
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I6
sa(dp3228
g20
(lp3229
S'k'
asg17
S'Y'
sS'.thisRepN'
p3230
I36
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3231
I8
sS'.thisN'
p3232
I404
sS'.thisIndex'
p3233
I2
sg15
(lp3234
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I2
sa(dp3235
g20
(lp3236
S'k'
asg17
S'Y'
sS'.thisRepN'
p3237
I36
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3238
I9
sS'.thisN'
p3239
I405
sS'.thisIndex'
p3240
I4
sg15
(lp3241
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
(lp3242
S'space'
p3243
asg94
I4
sa(dp3244
g20
(lp3245
S'k'
asg17
S'N'
sS'.thisRepN'
p3246
I36
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3247
I10
sS'.thisN'
p3248
I406
sS'.thisIndex'
p3249
I8
sg15
(lp3250
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I8
sa(dp3251
g20
(lp3252
S'k'
asg17
S'Y'
sS'.thisRepN'
p3253
I37
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3254
I0
sS'.thisN'
p3255
I407
sS'.thisIndex'
p3256
I7
sg15
(lp3257
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
(lp3258
S'space'
p3259
asg94
I7
sa(dp3260
g20
(lp3261
S'd'
asg17
S'N'
sS'.thisRepN'
p3262
I37
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3263
I1
sS'.thisN'
p3264
I408
sS'.thisIndex'
p3265
I8
sg15
(lp3266
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I8
sa(dp3267
g20
(lp3268
S'd'
asg17
S'Y'
sS'.thisRepN'
p3269
I37
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3270
I2
sS'.thisN'
p3271
I409
sS'.thisIndex'
p3272
I2
sg15
(lp3273
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
(lp3274
S'space'
p3275
asg94
I2
sa(dp3276
g20
(lp3277
S'k'
asg17
S'Y'
sS'.thisRepN'
p3278
I37
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3279
I3
sS'.thisN'
p3280
I410
sS'.thisIndex'
p3281
I5
sg15
(lp3282
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
(lp3283
S'space'
p3284
asg94
I5
sa(dp3285
g20
(lp3286
S'd'
asg17
S'N'
sS'.thisRepN'
p3287
I37
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3288
I4
sS'.thisN'
p3289
I411
sS'.thisIndex'
p3290
I5
sg15
(lp3291
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I5
sa(dp3292
g20
(lp3293
S'k'
asg17
S'N'
sS'.thisRepN'
p3294
I37
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3295
I5
sS'.thisN'
p3296
I412
sS'.thisIndex'
p3297
I7
sg15
(lp3298
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I7
sa(dp3299
g20
(lp3300
S'd'
asg17
S'Y'
sS'.thisRepN'
p3301
I37
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3302
I6
sS'.thisN'
p3303
I413
sS'.thisIndex'
p3304
I6
sg15
(lp3305
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg18
(lp3306
S'space'
p3307
asg94
I6
sa(dp3308
g20
(lp3309
S'd'
asg17
S'Y'
sS'.thisRepN'
p3310
I37
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3311
I7
sS'.thisN'
p3312
I414
sS'.thisIndex'
p3313
I6
sg15
(lp3314
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I6
sa(dp3315
g20
(lp3316
S'd'
asg17
S'Y'
sS'.thisRepN'
p3317
I37
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3318
I8
sS'.thisN'
p3319
I415
sS'.thisIndex'
p3320
I10
sg15
(lp3321
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
(lp3322
S'space'
p3323
asg94
I10
sa(dp3324
g20
(lp3325
S'd'
asg17
S'N'
sS'.thisRepN'
p3326
I37
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3327
I9
sS'.thisN'
p3328
I416
sS'.thisIndex'
p3329
I2
sg15
(lp3330
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I2
sa(dp3331
g20
(lp3332
S'k'
asg17
S'Y'
sS'.thisRepN'
p3333
I37
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3334
I10
sS'.thisN'
p3335
I417
sS'.thisIndex'
p3336
I3
sg15
(lp3337
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
(lp3338
S'space'
p3339
asg94
I3
sa(dp3340
g20
(lp3341
S'k'
asg17
S'N'
sS'.thisRepN'
p3342
I38
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3343
I0
sS'.thisN'
p3344
I418
sS'.thisIndex'
p3345
I4
sg15
(lp3346
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I4
sa(dp3347
g20
(lp3348
S'k'
asg17
S'N'
sS'.thisRepN'
p3349
I38
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3350
I1
sS'.thisN'
p3351
I419
sS'.thisIndex'
p3352
I10
sg15
(lp3353
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I10
sa(dp3354
g20
(lp3355
S'k'
asg17
S'N'
sS'.thisRepN'
p3356
I38
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3357
I2
sS'.thisN'
p3358
I420
sS'.thisIndex'
p3359
I1
sg15
(lp3360
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I1
sa(dp3361
g20
(lp3362
S'd'
asg17
S'Y'
sS'.thisRepN'
p3363
I38
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3364
I3
sS'.thisN'
p3365
I421
sS'.thisIndex'
p3366
I10
sg15
(lp3367
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
(lp3368
S'space'
p3369
asg94
I10
sa(dp3370
g20
(lp3371
S'k'
asg17
S'N'
sS'.thisRepN'
p3372
I38
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3373
I4
sS'.thisN'
p3374
I422
sS'.thisIndex'
p3375
I3
sg15
(lp3376
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I3
sa(dp3377
g20
(lp3378
S'k'
asg17
S'Y'
sS'.thisRepN'
p3379
I38
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3380
I5
sS'.thisN'
p3381
I423
sS'.thisIndex'
p3382
I3
sg15
(lp3383
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
(lp3384
S'space'
p3385
asg94
I3
sa(dp3386
g20
(lp3387
S'k'
asg17
S'N'
sS'.thisRepN'
p3388
I38
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3389
I6
sS'.thisN'
p3390
I424
sS'.thisIndex'
p3391
I7
sg15
(lp3392
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I7
sa(dp3393
g20
(lp3394
S'd'
asg17
S'N'
sS'.thisRepN'
p3395
I38
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3396
I7
sS'.thisN'
p3397
I425
sS'.thisIndex'
p3398
I7
sg15
(lp3399
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I7
sa(dp3400
g20
(lp3401
S'k'
asg17
S'Y'
sS'.thisRepN'
p3402
I38
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3403
I8
sS'.thisN'
p3404
I426
sS'.thisIndex'
p3405
I2
sg15
(lp3406
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
(lp3407
S'space'
p3408
asg94
I2
sa(dp3409
g20
(lp3410
S'd'
asg17
S'N'
sS'.thisRepN'
p3411
I38
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3412
I9
sS'.thisN'
p3413
I427
sS'.thisIndex'
p3414
I7
sg15
(lp3415
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I7
sa(dp3416
g20
(lp3417
S'k'
asg17
S'Y'
sS'.thisRepN'
p3418
I38
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3419
I10
sS'.thisN'
p3420
I428
sS'.thisIndex'
p3421
I1
sg15
(lp3422
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I1
sa(dp3423
g20
(lp3424
S'd'
asg17
S'Y'
sS'.thisRepN'
p3425
I39
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3426
I0
sS'.thisN'
p3427
I429
sS'.thisIndex'
p3428
I5
sg15
(lp3429
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I5
sa(dp3430
g20
(lp3431
S'k'
asg17
S'Y'
sS'.thisRepN'
p3432
I39
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3433
I1
sS'.thisN'
p3434
I430
sS'.thisIndex'
p3435
I6
sg15
(lp3436
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
(lp3437
S'space'
p3438
asg94
I6
sa(dp3439
g20
(lp3440
S'k'
asg17
S'Y'
sS'.thisRepN'
p3441
I39
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3442
I2
sS'.thisN'
p3443
I431
sS'.thisIndex'
p3444
I7
sg15
(lp3445
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
(lp3446
S'space'
p3447
asg94
I7
sa(dp3448
g20
(lp3449
S'd'
asg17
S'Y'
sS'.thisRepN'
p3450
I39
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3451
I3
sS'.thisN'
p3452
I432
sS'.thisIndex'
p3453
I8
sg15
(lp3454
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
(lp3455
S'space'
p3456
asg94
I8
sa(dp3457
g20
(lp3458
S'd'
asg17
S'N'
sS'.thisRepN'
p3459
I39
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3460
I4
sS'.thisN'
p3461
I433
sS'.thisIndex'
p3462
I0
sg15
(lp3463
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I0
sa(dp3464
g20
(lp3465
S'd'
asg17
S'N'
sS'.thisRepN'
p3466
I39
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3467
I5
sS'.thisN'
p3468
I434
sS'.thisIndex'
p3469
I5
sg15
(lp3470
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I5
sa(dp3471
g20
(lp3472
S'k'
asg17
S'N'
sS'.thisRepN'
p3473
I39
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3474
I6
sS'.thisN'
p3475
I435
sS'.thisIndex'
p3476
I1
sg15
(lp3477
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I1
sa(dp3478
g20
(lp3479
S'd'
asg17
S'Y'
sS'.thisRepN'
p3480
I39
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3481
I7
sS'.thisN'
p3482
I436
sS'.thisIndex'
p3483
I8
sg15
(lp3484
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
(lp3485
S'space'
p3486
asg94
I8
sa(dp3487
g20
(lp3488
S'k'
asg17
S'Y'
sS'.thisRepN'
p3489
I39
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3490
I8
sS'.thisN'
p3491
I437
sS'.thisIndex'
p3492
I5
sg15
(lp3493
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
(lp3494
S'space'
p3495
asg94
I5
sa(dp3496
g20
(lp3497
S'd'
asg17
S'N'
sS'.thisRepN'
p3498
I39
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3499
I9
sS'.thisN'
p3500
I438
sS'.thisIndex'
p3501
I10
sg15
(lp3502
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I10
sa(dp3503
g20
(lp3504
S'k'
asg17
S'N'
sS'.thisRepN'
p3505
I39
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3506
I10
sS'.thisN'
p3507
I439
sS'.thisIndex'
p3508
I4
sg15
(lp3509
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I4
sa(dp3510
g20
(lp3511
S'd'
asg17
S'N'
sS'.thisRepN'
p3512
I40
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3513
I0
sS'.thisN'
p3514
I440
sS'.thisIndex'
p3515
I5
sg15
(lp3516
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I5
sa(dp3517
g20
(lp3518
S'd'
asg17
S'Y'
sS'.thisRepN'
p3519
I40
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3520
I1
sS'.thisN'
p3521
I441
sS'.thisIndex'
p3522
I3
sg15
(lp3523
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg18
(lp3524
S'space'
p3525
asg94
I3
sa(dp3526
g20
(lp3527
S'k'
asg17
S'N'
sS'.thisRepN'
p3528
I40
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3529
I2
sS'.thisN'
p3530
I442
sS'.thisIndex'
p3531
I10
sg15
(lp3532
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I10
sa(dp3533
g20
(lp3534
S'k'
asg17
S'Y'
sS'.thisRepN'
p3535
I40
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3536
I3
sS'.thisN'
p3537
I443
sS'.thisIndex'
p3538
I1
sg15
(lp3539
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
(lp3540
S'space'
p3541
asg94
I1
sa(dp3542
g20
(lp3543
S'k'
asg17
S'Y'
sS'.thisRepN'
p3544
I40
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3545
I4
sS'.thisN'
p3546
I444
sS'.thisIndex'
p3547
I5
sg15
(lp3548
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
Nsg94
I5
sa(dp3549
g20
(lp3550
S'k'
asg17
S'N'
sS'.thisRepN'
p3551
I40
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3552
I5
sS'.thisN'
p3553
I445
sS'.thisIndex'
p3554
I2
sg15
(lp3555
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I2
sa(dp3556
g20
(lp3557
S'd'
asg17
S'N'
sS'.thisRepN'
p3558
I40
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3559
I6
sS'.thisN'
p3560
I446
sS'.thisIndex'
p3561
I0
sg15
(lp3562
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I0
sa(dp3563
g20
(lp3564
S'd'
asg17
S'N'
sS'.thisRepN'
p3565
I40
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3566
I7
sS'.thisN'
p3567
I447
sS'.thisIndex'
p3568
I6
sg15
(lp3569
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I6
sa(dp3570
g20
(lp3571
S'k'
asg17
S'Y'
sS'.thisRepN'
p3572
I40
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3573
I8
sS'.thisN'
p3574
I448
sS'.thisIndex'
p3575
I7
sg15
(lp3576
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg18
(lp3577
S'space'
p3578
asg94
I7
sa(dp3579
g20
(lp3580
S'd'
asg17
S'N'
sg22
I43
sS'.thisN'
p3581
I449
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3582
I9
sS'.thisRepN'
p3583
I40
sg21
I26
sS'.thisIndex'
p3584
I5
sg23
I24
sg15
(lp3585
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg18
Nsg94
I5
sa(dp3586
g20
(lp3587
S'd'
asg94
I3
sS'.thisRepN'
p3588
I40
sg30
VF
sg31
g32
sS'.thisTrialN'
p3589
I10
sS'.thisN'
p3590
I450
sS'.thisIndex'
p3591
I3
sg15
(lp3592
S'k'
asg16
S'N'
sg14
I10
sa(dp3593
g20
(lp3594
S'd'
asg94
I0
sS'.thisRepN'
p3595
I41
sg30
VF
sg31
g32
sS'.thisTrialN'
p3596
I0
sS'.thisN'
p3597
I451
sS'.thisIndex'
p3598
I0
sg15
(lp3599
S'd'
asg16
S'Y'
sg14
I10
sa(dp3600
g20
(lp3601
S'k'
asg17
S'Y'
sS'.thisRepN'
p3602
I41
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3603
I1
sS'.thisN'
p3604
I452
sS'.thisIndex'
p3605
I3
sg15
(lp3606
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
(lp3607
S'space'
p3608
asg94
I3
sa(dp3609
g20
(lp3610
S'k'
asg17
S'N'
sS'.thisRepN'
p3611
I41
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3612
I2
sS'.thisN'
p3613
I453
sS'.thisIndex'
p3614
I10
sg15
(lp3615
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I10
sa(dp3616
g20
(lp3617
S'k'
asg17
S'Y'
sS'.thisRepN'
p3618
I41
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3619
I3
sS'.thisN'
p3620
I454
sS'.thisIndex'
p3621
I6
sg15
(lp3622
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I6
sa(dp3623
g20
(lp3624
S'd'
asg17
S'N'
sS'.thisRepN'
p3625
I41
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3626
I4
sS'.thisN'
p3627
I455
sS'.thisIndex'
p3628
I0
sg15
(lp3629
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
(lp3630
S'space'
p3631
asg94
I0
sa(dp3632
g20
(lp3633
S'd'
asg17
S'Y'
sS'.thisRepN'
p3634
I41
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3635
I5
sS'.thisN'
p3636
I456
sS'.thisIndex'
p3637
I5
sg15
(lp3638
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I5
sa(dp3639
g20
(lp3640
S'k'
asg17
S'Y'
sS'.thisRepN'
p3641
I41
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3642
I6
sS'.thisN'
p3643
I457
sS'.thisIndex'
p3644
I4
sg15
(lp3645
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
(lp3646
S'space'
p3647
asg94
I4
sa(dp3648
g20
(lp3649
S'd'
asg17
S'Y'
sS'.thisRepN'
p3650
I41
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3651
I7
sS'.thisN'
p3652
I458
sS'.thisIndex'
p3653
I10
sg15
(lp3654
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I10
sa(dp3655
g20
(lp3656
S'd'
asg17
S'N'
sS'.thisRepN'
p3657
I41
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3658
I8
sS'.thisN'
p3659
I459
sS'.thisIndex'
p3660
I3
sg15
(lp3661
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I3
sa(dp3662
g20
(lp3663
S'k'
asg17
S'N'
sS'.thisRepN'
p3664
I41
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3665
I9
sS'.thisN'
p3666
I460
sS'.thisIndex'
p3667
I3
sg15
(lp3668
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I3
sa(dp3669
g20
(lp3670
S'd'
asg17
S'N'
sS'.thisRepN'
p3671
I41
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3672
I10
sS'.thisN'
p3673
I461
sS'.thisIndex'
p3674
I2
sg15
(lp3675
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I2
sa(dp3676
g20
(lp3677
S'd'
asg17
S'Y'
sS'.thisRepN'
p3678
I42
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3679
I0
sS'.thisN'
p3680
I462
sS'.thisIndex'
p3681
I6
sg15
(lp3682
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg18
(lp3683
S'space'
p3684
asg94
I6
sa(dp3685
g20
(lp3686
S'd'
asg17
S'N'
sS'.thisRepN'
p3687
I42
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3688
I1
sS'.thisN'
p3689
I463
sS'.thisIndex'
p3690
I1
sg15
(lp3691
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
(lp3692
S'space'
p3693
asg94
I1
sa(dp3694
g20
(lp3695
S'd'
asg17
S'Y'
sS'.thisRepN'
p3696
I42
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3697
I2
sS'.thisN'
p3698
I464
sS'.thisIndex'
p3699
I0
sg15
(lp3700
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I0
sa(dp3701
g20
(lp3702
S'k'
asg17
S'Y'
sS'.thisRepN'
p3703
I42
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3704
I3
sS'.thisN'
p3705
I465
sS'.thisIndex'
p3706
I1
sg15
(lp3707
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
(lp3708
S'space'
p3709
asg94
I1
sa(dp3710
g20
(lp3711
S'k'
asg17
S'N'
sS'.thisRepN'
p3712
I42
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3713
I4
sS'.thisN'
p3714
I466
sS'.thisIndex'
p3715
I7
sg15
(lp3716
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I7
sa(dp3717
g20
(lp3718
S'd'
asg17
S'N'
sS'.thisRepN'
p3719
I42
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3720
I5
sS'.thisN'
p3721
I467
sS'.thisIndex'
p3722
I0
sg15
(lp3723
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I0
sa(dp3724
g20
(lp3725
S'k'
asg17
S'N'
sS'.thisRepN'
p3726
I42
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3727
I6
sS'.thisN'
p3728
I468
sS'.thisIndex'
p3729
I2
sg15
(lp3730
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I2
sa(dp3731
g20
(lp3732
S'd'
asg17
S'Y'
sS'.thisRepN'
p3733
I42
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3734
I7
sS'.thisN'
p3735
I469
sS'.thisIndex'
p3736
I9
sg15
(lp3737
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg18
(lp3738
S'space'
p3739
asg94
I9
sa(dp3740
g20
(lp3741
S'k'
asg17
S'Y'
sS'.thisRepN'
p3742
I42
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3743
I8
sS'.thisN'
p3744
I470
sS'.thisIndex'
p3745
I5
sg15
(lp3746
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I5
sa(dp3747
g20
(lp3748
S'd'
asg17
S'Y'
sS'.thisRepN'
p3749
I42
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3750
I9
sS'.thisN'
p3751
I471
sS'.thisIndex'
p3752
I3
sg15
(lp3753
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg18
(lp3754
S'space'
p3755
asg94
I3
sa(dp3756
g20
(lp3757
S'k'
asg17
S'N'
sS'.thisRepN'
p3758
I42
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3759
I10
sS'.thisN'
p3760
I472
sS'.thisIndex'
p3761
I8
sg15
(lp3762
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I8
sa(dp3763
g20
(lp3764
S'k'
asg17
S'Y'
sS'.thisRepN'
p3765
I43
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3766
I0
sS'.thisN'
p3767
I473
sS'.thisIndex'
p3768
I4
sg15
(lp3769
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I4
sa(dp3770
g20
(lp3771
S'k'
asg17
S'Y'
sS'.thisRepN'
p3772
I43
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3773
I1
sS'.thisN'
p3774
I474
sS'.thisIndex'
p3775
I5
sg15
(lp3776
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
(lp3777
S'space'
p3778
asg94
I5
sa(dp3779
g20
(lp3780
S'k'
asg17
S'N'
sS'.thisRepN'
p3781
I43
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3782
I2
sS'.thisN'
p3783
I475
sS'.thisIndex'
p3784
I7
sg15
(lp3785
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I7
sa(dp3786
g20
(lp3787
S'k'
asg17
S'Y'
sS'.thisRepN'
p3788
I43
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3789
I3
sS'.thisN'
p3790
I476
sS'.thisIndex'
p3791
I7
sg15
(lp3792
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
(lp3793
S'space'
p3794
asg94
I7
sa(dp3795
g20
(lp3796
S'd'
asg17
S'N'
sS'.thisRepN'
p3797
I43
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3798
I4
sS'.thisN'
p3799
I477
sS'.thisIndex'
p3800
I0
sg15
(lp3801
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I0
sa(dp3802
g20
(lp3803
S'd'
asg17
S'Y'
sS'.thisRepN'
p3804
I43
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3805
I5
sS'.thisN'
p3806
I478
sS'.thisIndex'
p3807
I4
sg15
(lp3808
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg18
(lp3809
S'space'
p3810
asg94
I4
sa(dp3811
g20
(lp3812
S'd'
asg17
S'N'
sS'.thisRepN'
p3813
I43
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3814
I6
sS'.thisN'
p3815
I479
sS'.thisIndex'
p3816
I2
sg15
(lp3817
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I2
sa(dp3818
g20
(lp3819
S'k'
asg17
S'Y'
sS'.thisRepN'
p3820
I43
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3821
I7
sS'.thisN'
p3822
I480
sS'.thisIndex'
p3823
I9
sg15
(lp3824
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I9
sa(dp3825
g20
(lp3826
S'k'
asg17
S'Y'
sS'.thisRepN'
p3827
I43
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3828
I8
sS'.thisN'
p3829
I481
sS'.thisIndex'
p3830
I6
sg15
(lp3831
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
(lp3832
S'space'
p3833
asg94
I6
sa(dp3834
g20
(lp3835
S'k'
asg17
S'Y'
sS'.thisRepN'
p3836
I43
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3837
I9
sS'.thisN'
p3838
I482
sS'.thisIndex'
p3839
I10
sg15
(lp3840
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
(lp3841
S'space'
p3842
asg94
I10
sa(dp3843
g20
(lp3844
S'k'
asg17
S'N'
sS'.thisRepN'
p3845
I43
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3846
I10
sS'.thisN'
p3847
I483
sS'.thisIndex'
p3848
I3
sg15
(lp3849
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I3
sa(dp3850
g20
(lp3851
S'd'
asg17
S'Y'
sS'.thisRepN'
p3852
I44
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p3853
I0
sS'.thisN'
p3854
I484
sS'.thisIndex'
p3855
I9
sg15
(lp3856
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I9
sa(dp3857
g20
(lp3858
S'd'
asg17
S'Y'
sS'.thisRepN'
p3859
I44
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3860
I1
sS'.thisN'
p3861
I485
sS'.thisIndex'
p3862
I8
sg15
(lp3863
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
(lp3864
S'space'
p3865
asg94
I8
sa(dp3866
g20
(lp3867
S'd'
asg17
S'N'
sS'.thisRepN'
p3868
I44
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3869
I2
sS'.thisN'
p3870
I486
sS'.thisIndex'
p3871
I3
sg15
(lp3872
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I3
sa(dp3873
g20
(lp3874
S'k'
asg17
S'Y'
sS'.thisRepN'
p3875
I44
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3876
I3
sS'.thisN'
p3877
I487
sS'.thisIndex'
p3878
I9
sg15
(lp3879
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
(lp3880
S'space'
p3881
asg94
I9
sa(dp3882
g20
(lp3883
S'd'
asg17
S'Y'
sS'.thisRepN'
p3884
I44
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3885
I4
sS'.thisN'
p3886
I488
sS'.thisIndex'
p3887
I6
sg15
(lp3888
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg18
(lp3889
S'space'
p3890
asg94
I6
sa(dp3891
g20
(lp3892
S'k'
asg17
S'Y'
sS'.thisRepN'
p3893
I44
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3894
I5
sS'.thisN'
p3895
I489
sS'.thisIndex'
p3896
I2
sg15
(lp3897
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg18
(lp3898
S'space'
p3899
asg94
I2
sa(dp3900
g20
(lp3901
S'k'
asg17
S'Y'
sS'.thisRepN'
p3902
I44
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3903
I6
sS'.thisN'
p3904
I490
sS'.thisIndex'
p3905
I6
sg15
(lp3906
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
(lp3907
S'space'
p3908
asg94
I6
sa(dp3909
g20
(lp3910
S'd'
asg17
S'N'
sS'.thisRepN'
p3911
I44
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3912
I7
sS'.thisN'
p3913
I491
sS'.thisIndex'
p3914
I4
sg15
(lp3915
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I4
sa(dp3916
g20
(lp3917
S'k'
asg17
S'N'
sS'.thisRepN'
p3918
I44
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3919
I8
sS'.thisN'
p3920
I492
sS'.thisIndex'
p3921
I10
sg15
(lp3922
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I10
sa(dp3923
g20
(lp3924
S'd'
asg17
S'N'
sS'.thisRepN'
p3925
I44
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3926
I9
sS'.thisN'
p3927
I493
sS'.thisIndex'
p3928
I2
sg15
(lp3929
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I2
sa(dp3930
g20
(lp3931
S'd'
asg17
S'N'
sS'.thisRepN'
p3932
I44
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3933
I10
sS'.thisN'
p3934
I494
sS'.thisIndex'
p3935
I6
sg15
(lp3936
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I6
sa(dp3937
g20
(lp3938
S'k'
asg17
S'Y'
sS'.thisRepN'
p3939
I45
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3940
I0
sS'.thisN'
p3941
I495
sS'.thisIndex'
p3942
I1
sg15
(lp3943
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
(lp3944
S'space'
p3945
asg94
I1
sa(dp3946
g20
(lp3947
S'k'
asg17
S'N'
sS'.thisRepN'
p3948
I45
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3949
I1
sS'.thisN'
p3950
I496
sS'.thisIndex'
p3951
I8
sg15
(lp3952
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I8
sa(dp3953
g20
(lp3954
S'd'
asg17
S'N'
sS'.thisRepN'
p3955
I45
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3956
I2
sS'.thisN'
p3957
I497
sS'.thisIndex'
p3958
I2
sg15
(lp3959
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I2
sa(dp3960
g20
(lp3961
S'd'
asg17
S'N'
sS'.thisRepN'
p3962
I45
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3963
I3
sS'.thisN'
p3964
I498
sS'.thisIndex'
p3965
I10
sg15
(lp3966
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg18
Nsg94
I10
sa(dp3967
g20
(lp3968
S'd'
asg17
S'N'
sg22
I38
sS'.thisN'
p3969
I499
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3970
I4
sS'.thisRepN'
p3971
I45
sg21
I26
sS'.thisIndex'
p3972
I9
sg23
I25
sg15
(lp3973
S'd'
aS'k'
asg30
VF
sg16
S'N'
sg14
I10
sg18
Nsg94
I9
sa(dp3974
g20
(lp3975
S'd'
asS'.thisIndex'
p3976
I9
sS'.thisRepN'
p3977
I45
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p3978
I5
sS'.thisN'
p3979
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp3980
S'd'
asg16
S'N'
sg14
I11
sg94
I9
sa(dp3981
g20
(lp3982
S'k'
asS'.thisIndex'
p3983
I1
sS'.thisRepN'
p3984
I45
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p3985
I6
sS'.thisN'
p3986
I501
sg25
S'Y'
sg15
(lp3987
S'd'
asg16
S'Y'
sg14
I11
sg94
I1
sa(dp3988
g20
(lp3989
S'd'
asg17
S'Y'
sS'.thisRepN'
p3990
I45
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p3991
I7
sS'.thisN'
p3992
I502
sg25
S'Y'
sg15
(lp3993
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
(lp3994
S'space'
p3995
asg94
I5
sS'.thisIndex'
p3996
I5
sa(dp3997
g20
(lp3998
S'k'
asg17
S'Y'
sS'.thisRepN'
p3999
I45
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4000
I8
sS'.thisN'
p4001
I503
sg25
S'Y'
sg15
(lp4002
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I10
sS'.thisIndex'
p4003
I10
sa(dp4004
g20
(lp4005
S'k'
asg17
S'Y'
sS'.thisRepN'
p4006
I45
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4007
I9
sS'.thisN'
p4008
I504
sg25
S'Y'
sg15
(lp4009
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
(lp4010
S'space'
p4011
asg94
I8
sS'.thisIndex'
p4012
I8
sa(dp4013
g20
(lp4014
S'd'
asg17
S'N'
sS'.thisRepN'
p4015
I45
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4016
I10
sS'.thisN'
p4017
I505
sg25
S'Y'
sg15
(lp4018
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I10
sS'.thisIndex'
p4019
I10
sa(dp4020
g20
(lp4021
S'd'
asg17
S'N'
sS'.thisRepN'
p4022
I46
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4023
I0
sS'.thisN'
p4024
I506
sg25
S'Y'
sg15
(lp4025
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I7
sS'.thisIndex'
p4026
I7
sa(dp4027
g20
(lp4028
S'd'
asg17
S'Y'
sS'.thisRepN'
p4029
I46
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4030
I1
sS'.thisN'
p4031
I507
sg25
S'Y'
sg15
(lp4032
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I5
sS'.thisIndex'
p4033
I5
sa(dp4034
g20
(lp4035
S'k'
asg17
S'N'
sS'.thisRepN'
p4036
I46
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4037
I2
sS'.thisN'
p4038
I508
sg25
S'Y'
sg15
(lp4039
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I6
sS'.thisIndex'
p4040
I6
sa(dp4041
g20
(lp4042
S'd'
asg17
S'N'
sS'.thisRepN'
p4043
I46
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4044
I3
sS'.thisN'
p4045
I509
sg25
S'Y'
sg15
(lp4046
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I8
sS'.thisIndex'
p4047
I8
sa(dp4048
g20
(lp4049
S'd'
asg17
S'Y'
sS'.thisRepN'
p4050
I46
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4051
I4
sS'.thisN'
p4052
I510
sg25
S'Y'
sg15
(lp4053
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
(lp4054
S'space'
p4055
asg94
I4
sS'.thisIndex'
p4056
I4
sa(dp4057
g20
(lp4058
S'k'
asg17
S'N'
sS'.thisRepN'
p4059
I46
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4060
I5
sS'.thisN'
p4061
I511
sg25
S'Y'
sg15
(lp4062
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I5
sS'.thisIndex'
p4063
I5
sa(dp4064
g20
(lp4065
S'k'
asg17
S'N'
sS'.thisRepN'
p4066
I46
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4067
I6
sS'.thisN'
p4068
I512
sg25
S'Y'
sg15
(lp4069
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I10
sS'.thisIndex'
p4070
I10
sa(dp4071
g20
(lp4072
S'k'
asg17
S'Y'
sS'.thisRepN'
p4073
I46
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4074
I7
sS'.thisN'
p4075
I513
sg25
S'Y'
sg15
(lp4076
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
(lp4077
S'space'
p4078
asg94
I8
sS'.thisIndex'
p4079
I8
sa(dp4080
g20
(lp4081
S'd'
asg17
S'Y'
sS'.thisRepN'
p4082
I46
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4083
I8
sS'.thisN'
p4084
I514
sg25
S'Y'
sg15
(lp4085
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
(lp4086
S'space'
p4087
asg94
I4
sS'.thisIndex'
p4088
I4
sa(dp4089
g20
(lp4090
S'k'
asg17
S'Y'
sS'.thisRepN'
p4091
I46
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4092
I9
sS'.thisN'
p4093
I515
sg25
S'Y'
sg15
(lp4094
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
(lp4095
S'space'
p4096
asg94
I6
sS'.thisIndex'
p4097
I6
sa(dp4098
g20
(lp4099
S'k'
asg17
S'N'
sS'.thisRepN'
p4100
I46
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4101
I10
sS'.thisN'
p4102
I516
sg25
S'Y'
sg15
(lp4103
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I8
sS'.thisIndex'
p4104
I8
sa(dp4105
g20
(lp4106
S'd'
asg17
S'N'
sS'.thisRepN'
p4107
I47
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4108
I0
sS'.thisN'
p4109
I517
sg25
S'Y'
sg15
(lp4110
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I10
sS'.thisIndex'
p4111
I10
sa(dp4112
g20
(lp4113
S'd'
asg17
S'N'
sS'.thisRepN'
p4114
I47
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4115
I1
sS'.thisN'
p4116
I518
sg25
S'Y'
sg15
(lp4117
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
(lp4118
S'k'
asg94
I1
sS'.thisIndex'
p4119
I1
sa(dp4120
g20
(lp4121
S'k'
asg17
S'Y'
sS'.thisRepN'
p4122
I47
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4123
I2
sS'.thisN'
p4124
I519
sg25
S'Y'
sg15
(lp4125
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
(lp4126
S'space'
p4127
asg94
I4
sS'.thisIndex'
p4128
I4
sa(dp4129
g20
(lp4130
S'k'
asg17
S'Y'
sS'.thisRepN'
p4131
I47
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4132
I3
sS'.thisN'
p4133
I520
sg25
S'Y'
sg15
(lp4134
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I10
sS'.thisIndex'
p4135
I10
sa(dp4136
g20
(lp4137
S'k'
asg17
S'N'
sS'.thisRepN'
p4138
I47
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4139
I4
sS'.thisN'
p4140
I521
sg25
S'Y'
sg15
(lp4141
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I3
sS'.thisIndex'
p4142
I3
sa(dp4143
g20
(lp4144
S'd'
asg17
S'Y'
sS'.thisRepN'
p4145
I47
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4146
I5
sS'.thisN'
p4147
I522
sg25
S'Y'
sg15
(lp4148
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
(lp4149
S'space'
p4150
asg94
I3
sS'.thisIndex'
p4151
I3
sa(dp4152
g20
(lp4153
S'k'
asg17
S'N'
sS'.thisRepN'
p4154
I47
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4155
I6
sS'.thisN'
p4156
I523
sg25
S'Y'
sg15
(lp4157
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I0
sS'.thisIndex'
p4158
I0
sa(dp4159
g20
(lp4160
S'd'
asg17
S'Y'
sS'.thisRepN'
p4161
I47
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4162
I7
sS'.thisN'
p4163
I524
sg25
S'Y'
sg15
(lp4164
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
(lp4165
S'space'
p4166
asg94
I5
sS'.thisIndex'
p4167
I5
sa(dp4168
g20
(lp4169
S'd'
asg17
S'Y'
sS'.thisRepN'
p4170
I47
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4171
I8
sS'.thisN'
p4172
I525
sg25
S'Y'
sg15
(lp4173
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
(lp4174
S'space'
p4175
asg94
I0
sS'.thisIndex'
p4176
I0
sa(dp4177
g20
(lp4178
S'd'
asg17
S'N'
sS'.thisRepN'
p4179
I47
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4180
I9
sS'.thisN'
p4181
I526
sg25
S'Y'
sg15
(lp4182
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I1
sS'.thisIndex'
p4183
I1
sa(dp4184
g20
(lp4185
S'k'
asg17
S'N'
sS'.thisRepN'
p4186
I47
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4187
I10
sS'.thisN'
p4188
I527
sg25
S'Y'
sg15
(lp4189
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I8
sS'.thisIndex'
p4190
I8
sa(dp4191
g20
(lp4192
S'k'
asg17
S'Y'
sS'.thisRepN'
p4193
I48
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4194
I0
sS'.thisN'
p4195
I528
sg25
S'Y'
sg15
(lp4196
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
(lp4197
S'space'
p4198
asg94
I0
sS'.thisIndex'
p4199
I0
sa(dp4200
g20
(lp4201
S'd'
asg17
S'N'
sS'.thisRepN'
p4202
I48
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4203
I1
sS'.thisN'
p4204
I529
sg25
S'Y'
sg15
(lp4205
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I1
sS'.thisIndex'
p4206
I1
sa(dp4207
g20
(lp4208
S'k'
asg17
S'Y'
sS'.thisRepN'
p4209
I48
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4210
I2
sS'.thisN'
p4211
I530
sg25
S'Y'
sg15
(lp4212
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
(lp4213
S'space'
p4214
asg94
I7
sS'.thisIndex'
p4215
I7
sa(dp4216
g20
(lp4217
S'k'
asg17
S'Y'
sS'.thisRepN'
p4218
I48
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4219
I3
sS'.thisN'
p4220
I531
sg25
S'Y'
sg15
(lp4221
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I8
sS'.thisIndex'
p4222
I8
sa(dp4223
g20
(lp4224
S'k'
asg17
S'N'
sS'.thisRepN'
p4225
I48
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4226
I4
sS'.thisN'
p4227
I532
sg25
S'Y'
sg15
(lp4228
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I4
sS'.thisIndex'
p4229
I4
sa(dp4230
g20
(lp4231
S'd'
asg17
S'N'
sS'.thisRepN'
p4232
I48
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4233
I5
sS'.thisN'
p4234
I533
sg25
S'Y'
sg15
(lp4235
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I0
sS'.thisIndex'
p4236
I0
sa(dp4237
g20
(lp4238
S'd'
asg17
S'Y'
sS'.thisRepN'
p4239
I48
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4240
I6
sS'.thisN'
p4241
I534
sg25
S'Y'
sg15
(lp4242
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
(lp4243
S'space'
p4244
asg94
I9
sS'.thisIndex'
p4245
I9
sa(dp4246
g20
(lp4247
S'd'
asg17
S'Y'
sS'.thisRepN'
p4248
I48
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4249
I7
sS'.thisN'
p4250
I535
sg25
S'Y'
sg15
(lp4251
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
(lp4252
S'space'
p4253
asg94
I4
sS'.thisIndex'
p4254
I4
sa(dp4255
g20
(lp4256
S'd'
asg17
S'N'
sS'.thisRepN'
p4257
I48
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4258
I8
sS'.thisN'
p4259
I536
sg25
S'Y'
sg15
(lp4260
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I9
sS'.thisIndex'
p4261
I9
sa(dp4262
g20
(lp4263
S'k'
asg17
S'Y'
sS'.thisRepN'
p4264
I48
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4265
I9
sS'.thisN'
p4266
I537
sg25
S'Y'
sg15
(lp4267
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I10
sS'.thisIndex'
p4268
I10
sa(dp4269
g20
(lp4270
S'k'
asg17
S'N'
sS'.thisRepN'
p4271
I48
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4272
I10
sS'.thisN'
p4273
I538
sg25
S'Y'
sg15
(lp4274
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I1
sS'.thisIndex'
p4275
I1
sa(dp4276
g20
(lp4277
S'd'
asg17
S'Y'
sS'.thisRepN'
p4278
I49
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4279
I0
sS'.thisN'
p4280
I539
sg25
S'Y'
sg15
(lp4281
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I10
sS'.thisIndex'
p4282
I10
sa(dp4283
g20
(lp4284
S'd'
asg17
S'N'
sS'.thisRepN'
p4285
I49
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4286
I1
sS'.thisN'
p4287
I540
sg25
S'Y'
sg15
(lp4288
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I5
sS'.thisIndex'
p4289
I5
sa(dp4290
g20
(lp4291
S'd'
asg17
S'Y'
sS'.thisRepN'
p4292
I49
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4293
I2
sS'.thisN'
p4294
I541
sg25
S'Y'
sg15
(lp4295
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
(lp4296
S'space'
p4297
asg94
I9
sS'.thisIndex'
p4298
I9
sa(dp4299
g20
(lp4300
S'k'
asg17
S'Y'
sS'.thisRepN'
p4301
I49
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4302
I3
sS'.thisN'
p4303
I542
sg25
S'Y'
sg15
(lp4304
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
(lp4305
S'space'
p4306
asg94
I0
sS'.thisIndex'
p4307
I0
sa(dp4308
g20
(lp4309
S'd'
asg17
S'Y'
sS'.thisRepN'
p4310
I49
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4311
I4
sS'.thisN'
p4312
I543
sg25
S'Y'
sg15
(lp4313
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I10
sS'.thisIndex'
p4314
I10
sa(dp4315
g20
(lp4316
S'k'
asg17
S'N'
sS'.thisRepN'
p4317
I49
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4318
I5
sS'.thisN'
p4319
I544
sg25
S'Y'
sg15
(lp4320
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I7
sS'.thisIndex'
p4321
I7
sa(dp4322
g20
(lp4323
S'k'
asg17
S'N'
sS'.thisRepN'
p4324
I49
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4325
I6
sS'.thisN'
p4326
I545
sg25
S'Y'
sg15
(lp4327
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg18
Nsg94
I0
sS'.thisIndex'
p4328
I0
sa(dp4329
g20
(lp4330
S'k'
asg17
S'Y'
sS'.thisRepN'
p4331
I49
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4332
I7
sS'.thisN'
p4333
I546
sg25
S'Y'
sg15
(lp4334
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I9
sS'.thisIndex'
p4335
I9
sa(dp4336
g20
(lp4337
S'd'
asg17
S'N'
sS'.thisRepN'
p4338
I49
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4339
I8
sS'.thisN'
p4340
I547
sg25
S'Y'
sg15
(lp4341
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I4
sS'.thisIndex'
p4342
I4
sa(dp4343
g20
(lp4344
S'd'
asg17
S'Y'
sS'.thisRepN'
p4345
I49
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4346
I9
sS'.thisN'
p4347
I548
sg25
S'Y'
sg15
(lp4348
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg18
(lp4349
S'space'
p4350
asg94
I3
sS'.thisIndex'
p4351
I3
sa(dp4352
g20
(lp4353
S'k'
asg17
S'N'
sg22
I39
sg26
S'Y'
sS'.thisN'
p4354
I549
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4355
I10
sS'.thisRepN'
p4356
I49
sg21
I23
sg25
S'Y'
sg23
I25
sg15
(lp4357
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg18
Nsg94
I10
sS'.thisIndex'
p4358
I10
sa(dp4359
g20
(lp4360
S'k'
asS'.thisIndex'
p4361
I10
sS'.thisRepN'
p4362
I50
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4363
I0
sS'.thisN'
p4364
I550
sg25
S'Y'
sg15
(lp4365
S'k'
asg16
S'N'
sg14
I12
sg94
I10
sa(dp4366
g20
(lp4367
S'd'
asS'.thisIndex'
p4368
I1
sS'.thisRepN'
p4369
I50
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4370
I1
sS'.thisN'
p4371
I551
sg25
S'Y'
sg15
(lp4372
S'k'
asg16
S'Y'
sg14
I12
sg94
I1
sa(dp4373
g20
(lp4374
S'd'
asg17
S'N'
sS'.thisRepN'
p4375
I50
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4376
I2
sS'.thisN'
p4377
I552
sg25
S'Y'
sg15
(lp4378
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I9
sS'.thisIndex'
p4379
I9
sa(dp4380
g20
(lp4381
S'k'
asg17
S'N'
sS'.thisRepN'
p4382
I50
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4383
I3
sS'.thisN'
p4384
I553
sg25
S'Y'
sg15
(lp4385
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I1
sS'.thisIndex'
p4386
I1
sa(dp4387
g20
(lp4388
S'd'
asg17
S'N'
sS'.thisRepN'
p4389
I50
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4390
I4
sS'.thisN'
p4391
I554
sg25
S'Y'
sg15
(lp4392
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I3
sS'.thisIndex'
p4393
I3
sa(dp4394
g20
(lp4395
S'k'
asg17
S'Y'
sS'.thisRepN'
p4396
I50
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4397
I5
sS'.thisN'
p4398
I555
sg25
S'Y'
sg15
(lp4399
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
(lp4400
S'space'
p4401
asg94
I1
sS'.thisIndex'
p4402
I1
sa(dp4403
g20
(lp4404
S'd'
asg17
S'N'
sS'.thisRepN'
p4405
I50
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4406
I6
sS'.thisN'
p4407
I556
sg25
S'Y'
sg15
(lp4408
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I7
sS'.thisIndex'
p4409
I7
sa(dp4410
g20
(lp4411
S'k'
asg17
S'N'
sS'.thisRepN'
p4412
I50
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4413
I7
sS'.thisN'
p4414
I557
sg25
S'Y'
sg15
(lp4415
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I5
sS'.thisIndex'
p4416
I5
sa(dp4417
g20
(lp4418
S'k'
asg17
S'N'
sS'.thisRepN'
p4419
I50
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4420
I8
sS'.thisN'
p4421
I558
sg25
S'Y'
sg15
(lp4422
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I6
sS'.thisIndex'
p4423
I6
sa(dp4424
g20
(lp4425
S'k'
asg17
S'N'
sS'.thisRepN'
p4426
I50
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4427
I9
sS'.thisN'
p4428
I559
sg25
S'Y'
sg15
(lp4429
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I8
sS'.thisIndex'
p4430
I8
sa(dp4431
g20
(lp4432
S'k'
asg17
S'N'
sS'.thisRepN'
p4433
I50
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4434
I10
sS'.thisN'
p4435
I560
sg25
S'Y'
sg15
(lp4436
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I2
sS'.thisIndex'
p4437
I2
sa(dp4438
g20
(lp4439
S'd'
asg17
S'N'
sS'.thisRepN'
p4440
I51
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4441
I0
sS'.thisN'
p4442
I561
sg25
S'Y'
sg15
(lp4443
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I0
sS'.thisIndex'
p4444
I0
sa(dp4445
g20
(lp4446
S'k'
asg17
S'N'
sS'.thisRepN'
p4447
I51
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4448
I1
sS'.thisN'
p4449
I562
sg25
S'Y'
sg15
(lp4450
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I5
sS'.thisIndex'
p4451
I5
sa(dp4452
g20
(lp4453
S'd'
asg17
S'Y'
sS'.thisRepN'
p4454
I51
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4455
I2
sS'.thisN'
p4456
I563
sg25
S'Y'
sg15
(lp4457
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I1
sS'.thisIndex'
p4458
I1
sa(dp4459
g20
(lp4460
S'd'
asg17
S'Y'
sS'.thisRepN'
p4461
I51
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4462
I3
sS'.thisN'
p4463
I564
sg25
S'Y'
sg15
(lp4464
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
(lp4465
S'space'
p4466
asg94
I0
sS'.thisIndex'
p4467
I0
sa(dp4468
g20
(lp4469
S'k'
asg17
S'Y'
sS'.thisRepN'
p4470
I51
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4471
I4
sS'.thisN'
p4472
I565
sg25
S'Y'
sg15
(lp4473
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
(lp4474
S'space'
p4475
asg94
I0
sS'.thisIndex'
p4476
I0
sa(dp4477
g20
(lp4478
S'd'
asg17
S'Y'
sS'.thisRepN'
p4479
I51
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4480
I5
sS'.thisN'
p4481
I566
sg25
S'Y'
sg15
(lp4482
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg18
(lp4483
S'space'
p4484
asg94
I8
sS'.thisIndex'
p4485
I8
sa(dp4486
g20
(lp4487
S'd'
asg17
S'N'
sS'.thisRepN'
p4488
I51
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4489
I6
sS'.thisN'
p4490
I567
sg25
S'Y'
sg15
(lp4491
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I3
sS'.thisIndex'
p4492
I3
sa(dp4493
g20
(lp4494
S'k'
asg17
S'N'
sS'.thisRepN'
p4495
I51
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4496
I7
sS'.thisN'
p4497
I568
sg25
S'Y'
sg15
(lp4498
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I5
sS'.thisIndex'
p4499
I5
sa(dp4500
g20
(lp4501
S'd'
asg17
S'Y'
sS'.thisRepN'
p4502
I51
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4503
I8
sS'.thisN'
p4504
I569
sg25
S'Y'
sg15
(lp4505
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
(lp4506
S'space'
p4507
asg94
I0
sS'.thisIndex'
p4508
I0
sa(dp4509
g20
(lp4510
S'd'
asg17
S'Y'
sS'.thisRepN'
p4511
I51
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4512
I9
sS'.thisN'
p4513
I570
sg25
S'Y'
sg15
(lp4514
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
(lp4515
S'space'
p4516
asg94
I6
sS'.thisIndex'
p4517
I6
sa(dp4518
g20
(lp4519
S'k'
asg17
S'Y'
sS'.thisRepN'
p4520
I51
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4521
I10
sS'.thisN'
p4522
I571
sg25
S'Y'
sg15
(lp4523
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
(lp4524
S'space'
p4525
asg94
I7
sS'.thisIndex'
p4526
I7
sa(dp4527
g20
(lp4528
S'd'
asg17
S'Y'
sS'.thisRepN'
p4529
I52
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4530
I0
sS'.thisN'
p4531
I572
sg25
S'Y'
sg15
(lp4532
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
(lp4533
S'space'
p4534
asg94
I6
sS'.thisIndex'
p4535
I6
sa(dp4536
g20
(lp4537
S'k'
asg17
S'Y'
sS'.thisRepN'
p4538
I52
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4539
I1
sS'.thisN'
p4540
I573
sg25
S'Y'
sg15
(lp4541
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
(lp4542
S'space'
p4543
asg94
I6
sS'.thisIndex'
p4544
I6
sa(dp4545
g20
(lp4546
S'd'
asg17
S'N'
sS'.thisRepN'
p4547
I52
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4548
I2
sS'.thisN'
p4549
I574
sg25
S'Y'
sg15
(lp4550
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I1
sS'.thisIndex'
p4551
I1
sa(dp4552
g20
(lp4553
S'k'
asg17
S'Y'
sS'.thisRepN'
p4554
I52
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4555
I3
sS'.thisN'
p4556
I575
sg25
S'Y'
sg15
(lp4557
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
(lp4558
S'space'
p4559
asg94
I4
sS'.thisIndex'
p4560
I4
sa(dp4561
g20
(lp4562
S'k'
asg17
S'N'
sS'.thisRepN'
p4563
I52
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4564
I4
sS'.thisN'
p4565
I576
sg25
S'Y'
sg15
(lp4566
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
(lp4567
S'd'
asg94
I0
sS'.thisIndex'
p4568
I0
sa(dp4569
g20
(lp4570
S'd'
asg17
S'Y'
sS'.thisRepN'
p4571
I52
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4572
I5
sS'.thisN'
p4573
I577
sg25
S'Y'
sg15
(lp4574
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg18
(lp4575
S'space'
p4576
asg94
I8
sS'.thisIndex'
p4577
I8
sa(dp4578
g20
(lp4579
S'd'
asg17
S'N'
sS'.thisRepN'
p4580
I52
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4581
I6
sS'.thisN'
p4582
I578
sg25
S'Y'
sg15
(lp4583
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I6
sS'.thisIndex'
p4584
I6
sa(dp4585
g20
(lp4586
S'k'
asg17
S'Y'
sS'.thisRepN'
p4587
I52
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4588
I7
sS'.thisN'
p4589
I579
sg25
S'Y'
sg15
(lp4590
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
(lp4591
S'space'
p4592
asg94
I6
sS'.thisIndex'
p4593
I6
sa(dp4594
g20
(lp4595
S'k'
asg17
S'Y'
sS'.thisRepN'
p4596
I52
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4597
I8
sS'.thisN'
p4598
I580
sg25
S'Y'
sg15
(lp4599
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
(lp4600
S'space'
p4601
asg94
I1
sS'.thisIndex'
p4602
I1
sa(dp4603
g20
(lp4604
S'k'
asg17
S'Y'
sS'.thisRepN'
p4605
I52
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4606
I9
sS'.thisN'
p4607
I581
sg25
S'Y'
sg15
(lp4608
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
(lp4609
S'space'
p4610
asg94
I1
sS'.thisIndex'
p4611
I1
sa(dp4612
g20
(lp4613
S'k'
asg17
S'Y'
sS'.thisRepN'
p4614
I52
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4615
I10
sS'.thisN'
p4616
I582
sg25
S'Y'
sg15
(lp4617
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
(lp4618
S'space'
p4619
asg94
I9
sS'.thisIndex'
p4620
I9
sa(dp4621
g20
(lp4622
S'd'
asg17
S'N'
sS'.thisRepN'
p4623
I53
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4624
I0
sS'.thisN'
p4625
I583
sg25
S'Y'
sg15
(lp4626
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I2
sS'.thisIndex'
p4627
I2
sa(dp4628
g20
(lp4629
S'k'
asg17
S'Y'
sS'.thisRepN'
p4630
I53
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4631
I1
sS'.thisN'
p4632
I584
sg25
S'Y'
sg15
(lp4633
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
(lp4634
S'space'
p4635
asg94
I5
sS'.thisIndex'
p4636
I5
sa(dp4637
g20
(lp4638
S'd'
asg17
S'N'
sS'.thisRepN'
p4639
I53
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4640
I2
sS'.thisN'
p4641
I585
sg25
S'Y'
sg15
(lp4642
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I7
sS'.thisIndex'
p4643
I7
sa(dp4644
g20
(lp4645
S'd'
asg17
S'N'
sS'.thisRepN'
p4646
I53
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4647
I3
sS'.thisN'
p4648
I586
sg25
S'Y'
sg15
(lp4649
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I2
sS'.thisIndex'
p4650
I2
sa(dp4651
g20
(lp4652
S'k'
asg17
S'Y'
sS'.thisRepN'
p4653
I53
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4654
I4
sS'.thisN'
p4655
I587
sg25
S'Y'
sg15
(lp4656
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I1
sS'.thisIndex'
p4657
I1
sa(dp4658
g20
(lp4659
S'k'
asg17
S'Y'
sS'.thisRepN'
p4660
I53
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4661
I5
sS'.thisN'
p4662
I588
sg25
S'Y'
sg15
(lp4663
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I0
sS'.thisIndex'
p4664
I0
sa(dp4665
g20
(lp4666
S'd'
asg17
S'Y'
sS'.thisRepN'
p4667
I53
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4668
I6
sS'.thisN'
p4669
I589
sg25
S'Y'
sg15
(lp4670
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I2
sS'.thisIndex'
p4671
I2
sa(dp4672
g20
(lp4673
S'k'
asg17
S'N'
sS'.thisRepN'
p4674
I53
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4675
I7
sS'.thisN'
p4676
I590
sg25
S'Y'
sg15
(lp4677
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I4
sS'.thisIndex'
p4678
I4
sa(dp4679
g20
(lp4680
S'd'
asg17
S'Y'
sS'.thisRepN'
p4681
I53
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4682
I8
sS'.thisN'
p4683
I591
sg25
S'Y'
sg15
(lp4684
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I9
sS'.thisIndex'
p4685
I9
sa(dp4686
g20
(lp4687
S'k'
asg17
S'Y'
sS'.thisRepN'
p4688
I53
sg26
S'Y'
sg19
S'N'
sg31
g32
sS'.thisTrialN'
p4689
I9
sS'.thisN'
p4690
I592
sg25
S'Y'
sg15
(lp4691
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I8
sS'.thisIndex'
p4692
I8
sa(dp4693
g20
(lp4694
S'd'
asg17
S'N'
sS'.thisRepN'
p4695
I53
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4696
I10
sS'.thisN'
p4697
I593
sg25
S'Y'
sg15
(lp4698
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
Nsg94
I8
sS'.thisIndex'
p4699
I8
sa(dp4700
g20
(lp4701
S'd'
asg17
S'N'
sS'.thisRepN'
p4702
I54
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4703
I0
sS'.thisN'
p4704
I594
sg25
S'Y'
sg15
(lp4705
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I1
sS'.thisIndex'
p4706
I1
sa(dp4707
g20
(lp4708
S'k'
asg17
S'N'
sS'.thisRepN'
p4709
I54
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4710
I1
sS'.thisN'
p4711
I595
sg25
S'Y'
sg15
(lp4712
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I7
sS'.thisIndex'
p4713
I7
sa(dp4714
g20
(lp4715
S'd'
asg17
S'Y'
sS'.thisRepN'
p4716
I54
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4717
I2
sS'.thisN'
p4718
I596
sg25
S'Y'
sg15
(lp4719
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg18
(lp4720
S'space'
p4721
asg94
I1
sS'.thisIndex'
p4722
I1
sa(dp4723
g20
(lp4724
S'k'
asg17
S'Y'
sS'.thisRepN'
p4725
I54
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4726
I3
sS'.thisN'
p4727
I597
sg25
S'Y'
sg15
(lp4728
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg18
(lp4729
S'space'
p4730
asg94
I8
sS'.thisIndex'
p4731
I8
sa(dp4732
g20
(lp4733
S'd'
asg17
S'N'
sS'.thisRepN'
p4734
I54
sg26
S'Y'
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4735
I4
sS'.thisN'
p4736
I598
sg25
S'Y'
sg15
(lp4737
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I10
sS'.thisIndex'
p4738
I10
sa(dp4739
g20
(lp4740
S'k'
asg17
S'N'
sg22
I41
sg26
S'Y'
sS'.thisN'
p4741
I599
sg19
S'Y'
sg31
g32
sS'.thisTrialN'
p4742
I5
sS'.thisRepN'
p4743
I54
sg21
I24
sg25
S'Y'
sg23
I24
sg15
(lp4744
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg18
Nsg94
I1
sS'.thisIndex'
p4745
I1
sasS'loops'
p4746
(lp4747
g1
(g35
g3
NtRp4748
(dp4749
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4750
sg40
(lp4751
sg41
I73779536
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4752
g48
g49
(g50
g51
g52
S'b'
tRp4753
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4754
(I1
(I600
I1
tg55
I00
S'\x00\xc0\x05D\x00\x00xC\x00\x00\xe4B\x00\x006C\x00\x00\xbaC\x00\x00\xb0C\x00\x00QC\x00\x80\xf2C\x00\x00gC\x00\x00@A\x00\x80\x80C\x00@\x13D\x00\x00\x12C\x00\x00LB\x00\x00\xbaB\x00\x00\xbdC\x00\x00\xdcC\x00\x80\x10D\x00\x00\xffC\x00\xc0\tD\x00\x00\xf8B\x00\x00\x83C\x00\x00FC\x00\x80\xd8C\x00\x00\x03D\x00\x00\'C\x00\x00\rD\x00\x00IC\x00\x00\xcaB\x00\x00\x91C\x00@\x04D\x00\x80\xaaC\x00\x00\xf4B\x00\x80\xd4C\x00\x80\xc3C\x00\x00\x9cC\x00\x80\xcfC\x00\x00\x87C\x00\x80\x9cC\x00\x00\xd8A\x00\x00\xceB\x00\x00BC\x00\x00\xccC\x00\x00\xe0A\x00\x00\xc4B\x00\x00\xa4B\x00\x00\x80?\x00\x00\x0bD\x00\x80\xccC\x00\x00\x05C\x00\x00\xaaC\x00\x80\xbdC\x00\x80\x00D\x00\x00\xeeB\x00\x00\x88B\x00\x00\xa8B\x00\x00\xf2C\x00\x00PA\x00@\x01D\x00\x80\x12D\x00\x00pC\x00@\x12D\x00\x00\x8bC\x00\x00\x00C\x00\x00%C\x00\x00DB\x00\x00\tC\x00\x004B\x00\x80\xb9C\x00\x00\xc0B\x00\x00\x9fC\x00\x00\xd8C\x00\x00\xf2B\x00\x80\xe7C\x00\x00lB\x00\x80\xfcC\x00\x00\xeaB\x00\x00\xb0B\x00\xc0\x11D\x00\x00\xbcB\x00\x00CC\x00\x00(C\x00\x80\xf5C\x00\x00\x8cB\x00\x80\x98C\x00\x00\xdaB\x00\x80\x0eD\x00\x80\xeeC\x00\x80\x93C\x00\x00\x80B\x00\x80\xb4C\x00@\x0eD\x00\x80\rD\x00\x80\xf8C\x00\x00\x98A\x00\x00 C\x00\x80\x87C\x00\x001C\x00\x00\xa0C\x00\x00\xf6B\x00\x80\xdfC\x00\x80\nD\x00\x008B\x00\x00"C\x00\x80\xb0C\x00\x00\xd0A\x00\x00\xaeC\x00\x80\xefC\x00\x00\x06D\x00\x00\xa7C\x00\x80\xb8C\x00\x00\x8dC\x00\x00\xc2C\x00\x80\xa6C\x00\x00\xfbC\x00\x00/C\x00\x00\xdfC\x00\x00\x85C\x00\x00\x94C\x00\x00rC\x00\x00\x81C\x00\x00_C\x00\x00\x9eC\x00\x00\x8aC\x00\x00\x00\x00\x00@\x0cD\x00\x00XC\x00\x80\x15D\x00\x00\x08C\x00\x80\x8eC\x00\x80\xafC\x00\x00\xb2B\x00\x00\\C\x00\x00 A\x00\x00\xf3C\x00\x00&C\x00\x00\x15D\x00\x00<B\x00\x00\xf9C\x00\x00VC\x00@\x03D\x00\xc0\x06D\x00\x00\x1cB\x00\x00\xb6C\x00\x00\xe5C\x00\x80\x82C\x00@\x05D\x00\x00\x10B\x00\x00\xf4C\x00\x00\xcfC\x00\x80\x83C\x00\x00\xb2C\x00\x00\xb7C\x00\x00\x80C\x00\x00nC\x00\x00\x16C\x00\x80\x9aC\x00\x80\x94C\x00\x00`C\x00\x80\xf9C\x00\x000A\x00\x00$C\x00\xc0\x08D\x00\x00,C\x00\x80\xfdC\x00\x80\xeaC\x00\x80\xdcC\x00\x80\x9dC\x00\x00\xe0B\x00\x00\xefC\x00\x00`A\x00\x00wC\x00\x00hC\x00\x00\xf7C\x00\x00\x8eC\x00\x00\xaaB\x00\x00\xc6B\x00\x00\x86B\x00\x00\x99C\x00\x00xB\x00\x80\xfeC\x00\x00vC\x00\x00\x1aC\x00\x80\xe6C\x00\x00\xe4C\x00\x00eC\x00\x80\xd6C\x00\x00\xc0@\x00\x80\xa7C\x00\x00\x89C\x00\xc0\rD\x00\x00\x9aC\x00\x80\xaeC\x00\x80\x0fD\x00\x00\xc5C\x00\x80\xbfC\x00\x002C\x00\x80\xd2C\x00@\x14D\x00\x00\xfdC\x00\x00\xc8A\x00\x80\x9eC\x00\x00\xe7C\x00\x00|C\x00\x00PC\x00\x00\x06C\x00\x80\x91C\x00\x00SC\x00\x80\xa8C\x00\x00\x8cC\x00\x00\xf8A\x00\x00RC\x00\x80\xb5C\x00\x80\x05D\x00\x00\xe1C\x00\x00\xd0C\x00\x80\xcdC\x00\x00\tD\x00\x80\xc0C\x00\x00\x88C\x00\x80\x01D\x00\x00\x9dC\x00\x00\x10C\x00\x00pB\x00\x004C\x00\x00\xc6C\x00\x80\xb6C\x00\x80\xe1C\x00\x00DC\x00\x80\x14D\x00\xc0\x13D\x00\x00\xb8B\x00\x00\x14C\x00\x80\xe0C\x00\x00\x07D\x00\x00\xa0B\x00\x80\x03D\x00\x80\xc4C\x00\x00\xc1C\x00\x00\xfeB\x00\x00(B\x00\x00\x8fC\x00\x00AC\x00\x00~C\x00\x80\x99C\x00\x80\xbeC\x00\x00-C\x00\xc0\x0cD\x00\x00\x96B\x00\x00\xccB\x00\x00\xf0B\x00\x00\xc9C\x00\x008C\x00\x80\xabC\x00\x00\xdaC\x00\x80\xc7C\x00\x00yC\x00\x00\xe8B\x00\x00\x82C\x00\x00\xfaC\x00\x00|B\x00\x00\xd9C\x00\x80\xe9C\x00\x80\x8bC\x00\x80\x8dC\x00\x00\xd2B\x00\x00\x0fD\x00\x00{C\x00\x80\xceC\x00\x00\xbeB\x00\x80\x02D\x00\x80\xc8C\x00\x009C\x00\xc0\x07D\x00\x80\xc6C\x00\x80\xf6C\x00\x00\nD\x00\x00\xd4B\x00@\x10D\x00\x80\xe3C\x00\x00\\B\x00\x80\xebC\x00\x00tC\x00\x000C\x00\x005C\x00\x00\x10A\x00\x00\xaeB\x00\x00tB\x00\x00aC\x00\x00\x8aB\x00\x80\xd5C\x00\x00\xdbC\x00\x00pA\x00\x00]C\x00\x00\xc2B\x00\x00\x1bC\x00\x80\xe5C\x00\x00\xe8C\x00\x00XB\x00@\x07D\x00\x00\xe2C\x00\x80\xdeC\x00\x00\xfcB\x00\x00fC\x00\x00 B\x00\x00\x98C\x00\x80\xedC\x00\x00\xf0C\x00\x00\x03C\x00\x80\xf1C\x00\x00\x92C\x00\x00\xd5C\x00\x80\xbaC\x00\x00OC\x00\x00\xb6B\x00\x80\x92C\x00\xc0\x0bD\x00\x00!C\x00\x00\x13C\x00\x00:C\x00\xc0\x01D\x00\x00\xd4C\x00\x00\xadC\x00\x00ZC\x00\x00\xb4C\x00\x00NC\x00\x00@B\x00\x00\x96C\x00\x80\x04D\x00\x00\x9eB\x00\x00\xe0C\x00\x80\xcbC\x00\x00\xd8B\x00\x00\xbfC\x00\x80\x81C\x00\x00^C\x00\x003C\x00\x00\xcdC\x00\x80\xfbC\x00\x80\xecC\x00\x80\xa3C\x00\x80\tD\x00\x00\x90B\x00\x80\xc2C\x00\x00\x17C\x00\x00\xf6C\x00\x00\xc0A\x00\x80\xa9C\x00\x00PB\x00\x00GC\x00\x00sC\x00\x80\xd0C\x00\x00\x11C\x00\x00\xd6B\x00\x00\x94B\x00\x00,B\x00\x80\xd3C\x00\xc0\x15D\x00\x00\xc3C\x00\x00\xb9C\x00\x80\x90C\x00\x00\x80A\x00@\x15D\x00\x00LC\x00@\x06D\x00\x00\xd2C\x00\x00\x84B\x00\x00\x02C\x00\x00\x15C\x00\x80\xa2C\x00\x00\x12D\x00\x80\xa0C\x00\x80\xa4C\x00\x00\x1dC\x00\x00\x0eD\x00\x00\xe6C\x00\xc0\x0fD\x00\x00\xf0A\x00\x00\xafC\x00\x00\x0fC\x00\x00\xa8A\x00\x00\xceC\x00\x80\xb3C\x00\x00\xe2B\x00\x00\x18C\x00\x000B\x00\x80\x9bC\x00\x00\rC\x00\x80\xd1C\x00\x00\x90C\x00\x00\x00A\x00\x80\xffC\x00\x00\xeeC\x00\x80\xd9C\x00\x00\xb4B\x00\x00\xb5C\x00\x00\x84C\x00\x00`B\x00\x00\x8eB\x00\x00\xddC\x00\x00\x01C\x00\x00EC\x00\x00\xe8A\x00\xc0\x12D\x00\x00\x90A\x00\x00\x11D\x00\x80\x85C\x00\x00\x80@\x00\x00\xc0C\x00\x00\xbcC\x00\x00cC\x00\x00\x1fC\x00\x00\xa0A\x00\x00qC\x00\x00\xa3C\x00\x00\x93C\x00\x00YC\x00\x80\xcaC\x00\x00\x04B\x00\x00;C\x00\x00\xc8B\x00\x00\xe0@\x00\x80\x89C\x00\x00\x9aB\x00\x00[C\x00\x00\x13D\x00\x00\xd1C\x00\x00\xa6B\x00\x80\xa5C\x00\x00\x01D\x00\x00\xfeC\x00\x80\x13D\x00\x00\x00B\x00\x80\x0cD\x00\x00\xf1C\x00\x00\xd7C\x00\x00\x0bC\x00\x80\xb7C\x00\x80\xc5C\x00\x00jC\x00\x00}C\x00\x007C\x00\x80\xddC\x00\x00\x08D\x00\x00\x88A\x00\x00\xdeC\x00\x80\x8aC\x00\x00\xe9C\x00\x00\xa2C\x00\x00\x86C\x00\x00\xacC\x00\x00\xecC\x00\x80\xb2C\x00\x00\xbbC\x00\x00\x0eC\x00\x00\xb0A\x00\x00dC\x00\x00\xedC\x00@\nD\x00\x00\x82B\x00\x00\xd3C\x00\x00\x95C\x00\x00@@\x00\x00\x9cB\x00\x00HB\x00\x00<C\x00\xc0\x02D\x00\x00\x19C\x00@\x00D\x00\x80\x86C\x00\x80\xe2C\x00\x00\xc8C\x00@\x08D\x00\x80\x88C\x00\x00\x10D\x00@\x02D\x00\x00TB\x00@\x0fD\x00\x00@C\x00\x00\xa1C\x00\x00\x02D\x00\x00\xa8C\x00\x80\xa1C\x00\x80\xadC\x00\x00\x0cB\x00\x00\xf5C\x00\xc0\x14D\x00\x80\x96C\x00\x00\xa6C\x00\x00JC\x00\x80\xf7C\x00\x00\xa9C\x00\x00KC\x00\x00\xc4C\x00\x00?C\x00\x80\xf4C\x00\x00*C\x00\x80\x97C\x00\x00\xb8A\x00\x80\xfaC\x00\x00mC\x00\x00\xebC\x00\x00\x1cC\x00\x80\x8fC\x00\xc0\x04D\x00\x80\xdbC\x00\xc0\nD\x00\x00>C\x00\x00#C\x00\x00\xacB\x00\x80\x9fC\x00@\rD\x00\x00\xb1C\x00\x00.C\x00\x00\xa0@\x00\x00UC\x00\x00\xe3C\x00\x80\x08D\x00\x00\x14D\x00\x00\x04C\x00\x00\xc7C\x00\xc0\x00D\x00\x00\xdeB\x00\x00bC\x00\x00\xdcB\x00\x00\xcbC\x00\x00\xcaC\x00\x00\x98B\x00\x00\x07C\x00\x00\x04D\x00\x80\xe4C\x00\x00\x92B\x00\x00\x14B\x00\x00$B\x00\x00oC\x00\x00\xa5C\x00\x00\xa2B\x00\x00\xfaB\x00\x80\xc9C\x00\x00\x0cD\x00\x00lC\x00\x80\xf0C\x00\x00\x7fC\x00\x00\xe6B\x00\x00MC\x00\x80\xdaC\x00\x00iC\x00\x00uC\x00\x00HC\x00\x00\xd0B\x00\x80\x95C\x00\x00zC\x00\x00\x97C\x00\x00=C\x00\x00\x9bC\x00\x00\x1eC\x00\x00\x18B\x00\x00+C\x00\x00hB\x00\x00dB\x00\x80\x07D\x00\x00\xabC\x00\x80\xe8C\x00\xc0\x10D\x00\x00WC\x00\x00\xd6C\x00\x00\xb3C\x00\x80\x06D\x00\x80\xbcC\x00\x80\x84C\x00\x80\x11D\x00@\x0bD\x00\x00\x0cC\x00\x00\x00@\x00\x80\xc1C\x00\x80\xf3C\x00\x00\x05D\x00\x00\xfcC\x00\xc0\x03D\x00\x80\xbbC\x00\x80\xb1C\x00@\tD\x00\x00\xb8C\x00\x80\x0bD\x00\x00\xeaC\x00\x00kC\x00\x00TC\x00\x00)C\x00\x80\xd7C\x00\x00\xf8C\x00@\x11D\x00\xc0\x0eD\x00\x00\xa4C\x00\x00\x00D\x00\x00\nC\x00\x00\x08B\x00\x00\xecB\x00\x80\x8cC\x00\x80\xacC\x00\x00\xbeC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4755
(dp4756
g60
(dp4757
g48
I01
sg56
I01
ssg62
g4748
sg63
(lp4758
g48
ag56
asg65
(lp4759
I600
aI1
asbsg67
S'random'
p4760
sg69
g70
(g51
(I0
tS'b'
tRp4761
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4762
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'|\x00\x00\x00.\x00\x00\x00=\x02\x00\x00\xce\x01\x00\x00\x97\x01\x00\x00\x02\x02\x00\x00\xbb\x00\x00\x00\xa5\x01\x00\x00\x86\x01\x00\x00\x1d\x01\x00\x00\x85\x00\x00\x00\xa0\x00\x00\x00\t\x00\x00\x009\x00\x00\x00\xaa\x00\x00\x00$\x01\x00\x00i\x01\x00\x00\xbc\x01\x00\x00\x94\x01\x00\x00^\x00\x00\x00\x9c\x01\x00\x00|\x01\x00\x00\xc7\x01\x00\x00\xf2\x01\x00\x00Z\x01\x00\x00\xc8\x00\x00\x00i\x00\x00\x00\'\x00\x00\x00+\x00\x00\x00\x92\x01\x00\x00y\x01\x00\x00\xd2\x00\x00\x00\xb0\x01\x00\x00\xa2\x01\x00\x00S\x02\x00\x00\xe4\x01\x00\x00\x93\x00\x00\x00\x14\x02\x00\x00,\x02\x00\x00\x8e\x00\x00\x000\x01\x00\x00\x15\x02\x00\x00\xf0\x00\x00\x00c\x01\x00\x00\x81\x01\x00\x00C\x00\x00\x00f\x00\x00\x00\x89\x00\x00\x00F\x01\x00\x00A\x00\x00\x00\xd0\x01\x00\x00\r\x00\x00\x00\\\x01\x00\x00\xdc\x01\x00\x00*\x01\x00\x00\x18\x01\x00\x00\x8d\x01\x00\x00/\x02\x00\x00.\x02\x00\x00J\x00\x00\x00\xdf\x00\x00\x00\x1f\x01\x00\x00\xb3\x00\x00\x00\x04\x01\x00\x00Y\x00\x00\x00\xcb\x01\x00\x00n\x01\x00\x00\xb1\x00\x00\x006\x00\x00\x00!\x01\x00\x00S\x00\x00\x00\x8e\x01\x00\x00V\x01\x00\x00\x13\x02\x00\x00b\x01\x00\x00\xf8\x00\x00\x00\x0f\x02\x00\x00\xa7\x01\x00\x00\xcf\x01\x00\x00I\x01\x00\x00\xeb\x00\x00\x00\x18\x02\x00\x00-\x00\x00\x00\xab\x01\x00\x007\x00\x00\x00\xaf\x00\x00\x00\xfd\x01\x00\x00\x1e\x01\x00\x00M\x00\x00\x00\x83\x00\x00\x00\x8a\x01\x00\x00:\x01\x00\x00\xe7\x00\x00\x00\x0e\x00\x00\x00O\x00\x00\x00\r\x01\x00\x00E\x00\x00\x00&\x01\x00\x00,\x00\x00\x00\xb0\x00\x00\x00\xa4\x01\x00\x00\x1c\x00\x00\x00\xf9\x00\x00\x00(\x00\x00\x00%\x02\x00\x00\t\x01\x00\x00\x15\x01\x00\x00a\x01\x00\x00L\x01\x00\x00U\x00\x00\x00\x0c\x02\x00\x00\n\x02\x00\x00\xa8\x00\x00\x00\x7f\x01\x00\x00\x02\x00\x00\x00\x1f\x02\x00\x00\x01\x01\x00\x00L\x00\x00\x00T\x02\x00\x005\x00\x00\x00\xfa\x00\x00\x00H\x00\x00\x00 \x00\x00\x00c\x00\x00\x00\x14\x00\x00\x00\x19\x02\x00\x00.\x01\x00\x00\xef\x00\x00\x00?\x00\x00\x00\x90\x01\x00\x00o\x01\x00\x004\x01\x00\x00\x07\x02\x00\x001\x00\x00\x00\xcd\x00\x00\x00\x10\x02\x00\x00\x80\x00\x00\x00B\x00\x00\x00R\x02\x00\x00\xb4\x01\x00\x00<\x02\x00\x00\x83\x01\x00\x00\xc6\x01\x00\x00{\x01\x00\x00\xde\x00\x00\x00`\x01\x00\x00\x0c\x00\x00\x00>\x01\x00\x00\xe8\x00\x00\x00p\x01\x00\x00\x9b\x00\x00\x00X\x01\x00\x00\x80\x01\x00\x00\xd3\x01\x00\x00\xb6\x00\x00\x00\'\x01\x00\x00\xf6\x01\x00\x00u\x01\x00\x00+\x02\x00\x00\x9b\x01\x00\x00_\x00\x00\x00=\x01\x00\x00g\x00\x00\x00\xfc\x01\x00\x00\xa1\x00\x00\x00@\x00\x00\x00\x87\x00\x00\x00\x19\x00\x00\x00Q\x00\x00\x00K\x02\x00\x00\xf0\x01\x00\x00-\x02\x00\x00\xa3\x00\x00\x00\xf6\x00\x00\x00\x01\x02\x00\x00s\x00\x00\x00\x1b\x01\x00\x00a\x00\x00\x00\xc4\x00\x00\x00P\x01\x00\x00\xe0\x00\x00\x00\x1c\x01\x00\x00\x03\x00\x00\x00\xb9\x01\x00\x00\xfc\x00\x00\x00\x10\x01\x00\x00?\x01\x00\x00\xa3\x01\x00\x00\xd1\x01\x00\x00)\x02\x00\x00\xfb\x01\x00\x00\xee\x01\x00\x00\xde\x01\x00\x00\xf2\x00\x00\x00)\x00\x00\x00P\x00\x00\x00\xe4\x00\x00\x00\x91\x01\x00\x00\x16\x00\x00\x00]\x01\x00\x00$\x02\x00\x00\x1b\x00\x00\x00\xe9\x01\x00\x00\xec\x01\x00\x00k\x01\x00\x00 \x02\x00\x00E\x01\x00\x009\x01\x00\x00\xcc\x00\x00\x00\x06\x00\x00\x00\xd3\x00\x00\x00\xcf\x00\x00\x00J\x02\x00\x00\x03\x02\x00\x00\x8b\x00\x00\x004\x02\x00\x00~\x00\x00\x00\xa0\x01\x00\x00C\x01\x00\x00\xa8\x01\x00\x00\x84\x00\x00\x00%\x01\x00\x00O\x01\x00\x00y\x00\x00\x00\x9e\x00\x00\x00 \x01\x00\x00\x0b\x02\x00\x00\x9a\x01\x00\x00\xc8\x01\x00\x00\xb9\x00\x00\x00/\x01\x00\x00\x08\x00\x00\x00\xac\x00\x00\x00"\x02\x00\x00\xb7\x01\x00\x00I\x02\x00\x00\x1c\x02\x00\x00\xf4\x01\x00\x00\x9a\x00\x00\x00\x16\x02\x00\x00<\x00\x00\x00\x9d\x01\x00\x00w\x00\x00\x00^\x01\x00\x00\x1a\x01\x00\x00#\x02\x00\x00\xb5\x00\x00\x00\xab\x00\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\'\x02\x00\x00\x0b\x01\x00\x00\xcb\x00\x00\x00\xb8\x01\x00\x00\xf3\x00\x00\x00\x1e\x02\x00\x00\x99\x00\x00\x00\n\x00\x00\x00x\x00\x00\x00N\x01\x00\x00\x02\x01\x00\x00\x91\x00\x00\x00\x15\x00\x00\x00\x96\x00\x00\x00\x8c\x01\x00\x009\x02\x00\x00u\x00\x00\x00\x96\x01\x00\x00\xc1\x01\x00\x00\xd5\x01\x00\x00%\x00\x00\x00`\x00\x00\x00\xdb\x00\x00\x00\xd9\x01\x00\x00\xbd\x00\x00\x00\xa6\x01\x00\x00{\x00\x00\x00\xbe\x01\x00\x00>\x00\x00\x00\x07\x01\x00\x00\xd1\x00\x00\x00U\x02\x00\x00o\x00\x00\x00\x08\x01\x00\x00\xae\x00\x00\x00\x81\x00\x00\x00\xf1\x00\x00\x00\xf7\x01\x00\x00\x85\x01\x00\x00h\x01\x00\x00\x1d\x00\x00\x00\xce\x00\x00\x006\x01\x00\x00;\x01\x00\x00\x9f\x01\x00\x00X\x00\x00\x00v\x00\x00\x00\x9d\x00\x00\x00\xcd\x01\x00\x00&\x02\x00\x00G\x01\x00\x00\xe7\x01\x00\x00(\x02\x00\x00\xf1\x01\x00\x001\x01\x00\x00T\x00\x00\x00\xb2\x00\x00\x00\xf4\x00\x00\x00\xbf\x00\x00\x00\x9c\x00\x00\x00*\x02\x00\x00\x82\x01\x00\x00#\x00\x00\x00&\x00\x00\x00\xdd\x00\x00\x00\xa7\x00\x00\x00z\x00\x00\x00\xc9\x00\x00\x00F\x00\x00\x00\xfe\x01\x00\x00b\x00\x00\x00s\x01\x00\x00\xdf\x01\x00\x00\xe2\x01\x00\x00\xc0\x01\x00\x00q\x01\x00\x00\x9e\x01\x00\x00T\x01\x00\x00P\x02\x00\x00t\x01\x00\x00\x17\x02\x00\x00\xac\x01\x00\x00\xe8\x01\x00\x00q\x00\x00\x00m\x00\x00\x00\xbc\x00\x00\x00\xe1\x01\x00\x00\xd0\x00\x00\x00\xeb\x01\x00\x00[\x01\x00\x002\x00\x00\x00\x1f\x00\x00\x001\x02\x00\x00\xfd\x00\x00\x00\xc2\x01\x00\x00V\x02\x00\x00B\x01\x00\x00\xe3\x01\x00\x00j\x00\x00\x00\xc0\x00\x00\x00z\x01\x00\x00\x82\x00\x00\x00\x05\x00\x00\x00h\x00\x00\x00\x00\x02\x00\x00D\x02\x00\x00\x97\x00\x00\x00\xc4\x01\x00\x006\x02\x00\x00~\x01\x00\x00D\x01\x00\x00Z\x00\x00\x00\x8b\x01\x00\x00\xd4\x00\x00\x00\x8f\x00\x00\x00\xe2\x00\x00\x00\x98\x00\x00\x00\xb5\x01\x00\x00F\x02\x00\x00n\x00\x00\x00g\x01\x00\x00D\x00\x00\x00\x04\x00\x00\x008\x01\x00\x00\xc5\x01\x00\x00C\x02\x00\x00\x99\x01\x00\x008\x02\x00\x00\x0f\x00\x00\x003\x00\x00\x00W\x02\x00\x00\xf5\x00\x00\x00M\x01\x00\x00\xc3\x00\x00\x00\x98\x01\x00\x00\xda\x00\x00\x00\xee\x00\x00\x00>\x02\x00\x00p\x00\x00\x00W\x01\x00\x00f\x01\x00\x00"\x00\x00\x00\xed\x01\x00\x00\xed\x00\x00\x00\xc2\x00\x00\x00\xb6\x01\x00\x00\xe1\x00\x00\x00\x12\x01\x00\x00\x08\x02\x00\x00\xff\x00\x00\x00\xd7\x01\x00\x00\x0f\x01\x00\x00\xfb\x00\x00\x00\x1a\x02\x00\x00\x0e\x02\x00\x00\xa1\x01\x00\x00\r\x02\x00\x00K\x01\x00\x00*\x00\x00\x000\x00\x00\x00Q\x01\x00\x00\xd8\x00\x00\x00}\x01\x00\x00\x0c\x01\x00\x00\x95\x00\x00\x00$\x00\x00\x00\xd7\x00\x00\x00_\x01\x00\x00\xaa\x01\x00\x00\x84\x01\x00\x00m\x01\x00\x00\xc5\x00\x00\x00\xcc\x01\x00\x00d\x01\x00\x00A\x01\x00\x00!\x00\x00\x007\x01\x00\x00"\x01\x00\x005\x02\x00\x00\xba\x00\x00\x00\xb3\x01\x00\x00L\x02\x00\x00G\x00\x00\x00\x17\x00\x00\x00\x05\x01\x00\x00\x89\x01\x00\x00\xfe\x00\x00\x00!\x02\x00\x00#\x01\x00\x00\xf9\x01\x00\x00\x10\x00\x00\x00\xa6\x00\x00\x00\x8f\x01\x00\x00\xba\x01\x00\x00\xbd\x01\x00\x00-\x01\x00\x00t\x00\x00\x00d\x00\x00\x00J\x01\x00\x00\xe9\x00\x00\x00\xd6\x00\x00\x00\xe3\x00\x00\x00,\x01\x00\x00\xd6\x01\x00\x00\x04\x02\x00\x00\x17\x01\x00\x00\xb8\x00\x00\x00\x12\x02\x00\x00\x90\x00\x00\x00(\x01\x00\x00w\x01\x00\x00\xb7\x00\x00\x00\xca\x00\x00\x00I\x00\x00\x00)\x01\x00\x002\x02\x00\x00\xbf\x01\x00\x00\x06\x01\x00\x00H\x02\x00\x00\xa5\x00\x00\x00\xf5\x01\x00\x00\x19\x01\x00\x00\xc3\x01\x00\x00S\x01\x00\x00\xc9\x01\x00\x002\x01\x00\x00\x88\x01\x00\x00W\x00\x00\x00\xa9\x00\x00\x00k\x00\x00\x003\x01\x00\x00\x1d\x02\x00\x00\xb2\x01\x00\x005\x01\x00\x008\x00\x00\x00\x07\x00\x00\x00\x86\x00\x00\x00?\x02\x00\x00\x94\x00\x00\x00\xef\x01\x00\x00\xe5\x01\x00\x00R\x00\x00\x00Y\x01\x00\x00\x13\x01\x00\x00\xad\x00\x00\x00\xea\x01\x00\x00M\x02\x00\x00]\x00\x00\x00\x8a\x00\x00\x00\x9f\x00\x00\x00\x03\x01\x00\x00\xf3\x01\x00\x00r\x00\x00\x00R\x01\x00\x00A\x02\x00\x00K\x00\x00\x00\xc7\x00\x00\x00\xa4\x00\x00\x00\xae\x01\x00\x00\xb4\x00\x00\x00\x12\x00\x00\x00\x87\x01\x00\x00Q\x02\x00\x00\xd4\x01\x00\x004\x00\x00\x00\t\x02\x00\x00\xad\x01\x00\x00:\x00\x00\x00\xdc\x00\x00\x00@\x01\x00\x00\xe0\x01\x00\x00\xdb\x01\x00\x00\x0e\x01\x00\x00\xd2\x01\x00\x00\x18\x00\x00\x00\x8c\x00\x00\x00\xec\x00\x00\x00B\x02\x00\x00\x11\x02\x00\x00\x1e\x00\x00\x00H\x01\x00\x00\xf8\x01\x00\x00@\x02\x00\x00\x92\x00\x00\x00\xd5\x00\x00\x00\x00\x00\x00\x00l\x00\x00\x00l\x01\x00\x007\x02\x00\x00\x8d\x00\x00\x00\xea\x00\x00\x00+\x01\x00\x000\x02\x00\x00\x11\x01\x00\x00\xbb\x01\x00\x00\xd8\x01\x00\x00\x05\x02\x00\x00\xa2\x00\x00\x00\xd9\x00\x00\x00E\x02\x00\x00U\x01\x00\x00\x13\x00\x00\x00\x14\x01\x00\x00\xca\x01\x00\x00e\x00\x00\x00\xfa\x01\x00\x00/\x00\x00\x00;\x02\x00\x00G\x02\x00\x00<\x01\x00\x00\x1b\x02\x00\x00}\x00\x00\x00\xb1\x01\x00\x00\xf7\x00\x00\x00\x1a\x00\x00\x00\xff\x01\x00\x00\\\x00\x00\x00\xbe\x00\x00\x00v\x01\x00\x00[\x00\x00\x00V\x00\x00\x00O\x02\x00\x00\n\x01\x00\x00\xdd\x01\x00\x00\xc1\x00\x00\x00x\x01\x00\x00\xda\x01\x00\x00\x16\x01\x00\x00\x11\x00\x00\x003\x02\x00\x00\x95\x01\x00\x00N\x02\x00\x00:\x02\x00\x00N\x00\x00\x00r\x01\x00\x00=\x00\x00\x00;\x00\x00\x00\x93\x01\x00\x00\xa9\x01\x00\x00\x0b\x00\x00\x00\xaf\x01\x00\x00\xe6\x00\x00\x00\x06\x02\x00\x00\xc6\x00\x00\x00\xe5\x00\x00\x00\xe6\x01\x00\x00\x88\x00\x00\x00j\x01\x00\x00\x7f\x00\x00\x00e\x01\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4763
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4764
(g4762
S'e\x01\x00\x00'
tRp4765
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4766
I01
sb.