ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject716
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 716
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VF
sS'age'
p31
V21
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I3
sS'_exp'
p41
I74692944
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I54
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I11
I55
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I11
I55
tg55
I00
S'\x00\x00\xb0A\x00\x00$B\x00\x00@B\x00\x00TB\x00\x00tB\x00\x00\x88B\x00\x00\x90B\x00\x00\xa6B\x00\x00\xd8B\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe8B\x00\x00\xecB\x00\x00\x11C\x00\x00!C\x00\x00*C\x00\x00?C\x00\x00LC\x00\x00NC\x00\x00TC\x00\x00^C\x00\x00eC\x00\x00iC\x00\x00mC\x00\x00\x81C\x00\x80\x87C\x00\x00\x94C\x00\x00\x9aC\x00\x80\x9bC\x00\x00\x9eC\x00\x00\xa0C\x00\x00\xa2C\x00\x00\xa7C\x00\x00\xaeC\x00\x00\xb4C\x00\x80\xbcC\x00\x80\xc0C\x00\x80\xc7C\x00\x00\xcaC\x00\x00\xccC\x00\x00\xcfC\x00\x00\xd5C\x00\x00\xdeC\x00\x80\xe1C\x00\x00\xeeC\x00\x80\xefC\x00\x80\xf2C\x00\xc0\x00D\x00\x00\x03D\x00\x80\x03D\x00\x00\x04D\x00@\x04D\x00@\tD\x00@\x0eD\x00\xc0\x11D\x00\x00@A\x00\x00\x98A\x00\x00\xa8A\x00\x00\xc0A\x00\x00\x1cB\x00\x004B\x00\x00\\B\x00\x00hB\x00\x00xB\x00\x00\x9aB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x01C\x00\x00\x1eC\x00\x00,C\x00\x002C\x00\x004C\x00\x00KC\x00\x00RC\x00\x00\\C\x00\x00dC\x00\x00kC\x00\x00lC\x00\x00qC\x00\x00tC\x00\x00wC\x00\x00~C\x00\x00\x89C\x00\x80\x8aC\x00\x80\x8fC\x00\x80\x90C\x00\x80\x9fC\x00\x00\xa4C\x00\x80\xa7C\x00\x80\xa8C\x00\x00\xafC\x00\x00\xb2C\x00\x00\xb3C\x00\x00\xb9C\x00\x00\xc1C\x00\x80\xc4C\x00\x80\xdaC\x00\x00\xe0C\x00\x00\xe3C\x00\x80\xeaC\x00\x00\xecC\x00\x00\xf5C\x00\x80\xf5C\x00\x80\xf8C\x00\x00\x00D\x00@\x06D\x00\x80\x06D\x00@\x08D\x00\x00\x0cD\x00\x00\x12D\x00\x00PA\x00\x00\x18B\x00\x00\x8cB\x00\x00\x96B\x00\x00\xccB\x00\x00\xeaB\x00\x00\x04C\x00\x00\x07C\x00\x00\x1fC\x00\x00 C\x00\x00&C\x00\x00+C\x00\x00-C\x00\x001C\x00\x008C\x00\x009C\x00\x00BC\x00\x00OC\x00\x00XC\x00\x00YC\x00\x00aC\x00\x80\x85C\x00\x00\x8fC\x00\x80\x92C\x00\x00\x97C\x00\x80\x97C\x00\x80\x99C\x00\x80\xa2C\x00\x80\xaaC\x00\x00\xb0C\x00\x00\xb6C\x00\x80\xbeC\x00\x00\xc2C\x00\x80\xc8C\x00\x80\xc9C\x00\x80\xceC\x00\x80\xd1C\x00\x80\xdcC\x00\x80\xdfC\x00\x00\xe4C\x00\x80\xe6C\x00\x00\xeaC\x00\x80\xf7C\x00\x00\xf8C\x00\x80\xf9C\x00\x80\xfaC\x00\x00\xfbC\x00@\x02D\x00@\x03D\x00\xc0\x03D\x00\xc0\x05D\x00\x80\tD\x00\xc0\nD\x00@\x12D\x00\x00\x15D\x00\x00@@\x00\x00\xa0@\x00\x00\x00A\x00\x00\x14B\x00\x00LB\x00\x00pB\x00\x00\x98B\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa2B\x00\x00\xa8B\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xf4B\x00\x00\xf8B\x00\x00\x00C\x00\x00\x03C\x00\x00\x0eC\x00\x00\x17C\x00\x00\x19C\x00\x00#C\x00\x003C\x00\x00:C\x00\x00JC\x00\x00WC\x00\x00`C\x00\x00bC\x00\x00yC\x00\x00\x7fC\x00\x80\x86C\x00\x00\xa1C\x00\x80\xa6C\x00\x80\xb5C\x00\x00\xb8C\x00\x80\xb9C\x00\x80\xbaC\x00\x80\xc3C\x00\x00\xc5C\x00\x80\xc5C\x00\x80\xcdC\x00\x80\xd5C\x00\x00\xd6C\x00\x80\xd8C\x00\x80\xdbC\x00\x00\xf6C\x00\x80\xf6C\x00\x00\xf7C\x00\x00\x06D\x00\x00\nD\x00\x80\nD\x00\x00\rD\x00@\x11D\x00\xc0\x14D\x00\xc0\x15D\x00\x00\x80?\x00\x00\xe0@\x00\x00\x90A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xe0A\x00\x00\xf8A\x00\x00(B\x00\x008B\x00\x00HB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xbcB\x00\x00\xc8B\x00\x00\xe0B\x00\x00\xf0B\x00\x00\x08C\x00\x00\tC\x00\x00\x12C\x00\x00\x13C\x00\x00)C\x00\x00@C\x00\x00nC\x00\x00rC\x00\x00zC\x00\x80\x81C\x00\x80\x8bC\x00\x00\x92C\x00\x00\x95C\x00\x00\x96C\x00\x80\x98C\x00\x80\x9cC\x00\x00\x9fC\x00\x80\xa0C\x00\x00\xa8C\x00\x80\xabC\x00\x80\xadC\x00\x80\xb0C\x00\x00\xbdC\x00\x80\xc1C\x00\x00\xc8C\x00\x80\xccC\x00\x00\xceC\x00\x80\xd2C\x00\x00\xddC\x00\x00\xe5C\x00\x80\xf1C\x00\x00\xf4C\x00@\x00D\x00\x80\x07D\x00@\x0bD\x00\x00\x0fD\x00@\x10D\x00\x80\x10D\x00\x00\x00\x00\x00\x00 A\x00\x00\xb8A\x00\x00\x00B\x00\x00\x08B\x00\x00\x0cB\x00\x00DB\x00\x00\x82B\x00\x00\x84B\x00\x00\xa0B\x00\x00\xa4B\x00\x00\xcaB\x00\x00\xd4B\x00\x00\xf6B\x00\x00\x05C\x00\x00\x0bC\x00\x00\x0fC\x00\x00\x1bC\x00\x00>C\x00\x00EC\x00\x00FC\x00\x00ZC\x00\x00fC\x00\x00pC\x00\x00sC\x00\x80\x84C\x00\x00\x93C\x00\x80\x96C\x00\x00\xa5C\x00\x00\xabC\x00\x80\xacC\x00\x80\xb1C\x00\x80\xb2C\x00\x00\xb7C\x00\x80\xb7C\x00\x00\xbaC\x00\x00\xbeC\x00\x80\xd0C\x00\x80\xd3C\x00\x00\xd8C\x00\x80\xdeC\x00\x80\xe9C\x00\x80\xeeC\x00\x80\xf0C\x00\x80\xf3C\x00\x80\xfbC\x00\x80\xfcC\x00\x00\xffC\x00\x80\xffC\x00@\x05D\x00\x00\tD\x00@\nD\x00\x80\x0eD\x00\x80\x11D\x00\x80\x13D\x00\x00\x00\x00\x00\x00\x00@\x00\x00\xc0@\x00\x000A\x00\x00\xd8A\x00\x00\xf0A\x00\x00|B\x00\x00\xb2B\x00\x00\xbeB\x00\x00\xc6B\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xe2B\x00\x00\x06C\x00\x00\nC\x00\x00\x14C\x00\x00$C\x00\x00%C\x00\x00\'C\x00\x00(C\x00\x000C\x00\x00AC\x00\x00MC\x00\x00UC\x00\x00[C\x00\x00cC\x00\x00{C\x00\x00\x82C\x00\x00\x84C\x00\x00\x87C\x00\x00\x8bC\x00\x80\x8dC\x00\x80\x8eC\x00\x00\x91C\x00\x00\x99C\x00\x80\x9aC\x00\x80\xa4C\x00\x80\xb3C\x00\x80\xb4C\x00\x00\xbcC\x00\x00\xcdC\x00\x00\xd7C\x00\x80\xddC\x00\x00\xe1C\x00\x80\xe3C\x00\x00\xe9C\x00\x00\xfeC\x00\x00\x02D\x00\x80\x08D\x00\xc0\x08D\x00\xc0\x0cD\x00\xc0\rD\x00\x00\x14D\x00@\x15D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80@\x00\x00\xe8A\x00\x00<B\x00\x00\x8aB\x00\x00\x94B\x00\x00\xb4B\x00\x00\xf2B\x00\x00\x0cC\x00\x00\x1cC\x00\x005C\x00\x00<C\x00\x00HC\x00\x00gC\x00\x00jC\x00\x80\x80C\x00\x80\x83C\x00\x00\x8aC\x00\x00\x8cC\x00\x80\x8cC\x00\x00\x9bC\x00\x00\x9dC\x00\x80\xa3C\x00\x80\xa9C\x00\x80\xb6C\x00\x80\xb8C\x00\x00\xbfC\x00\x80\xbfC\x00\x00\xc3C\x00\x00\xc6C\x00\x80\xcaC\x00\x80\xcbC\x00\x80\xcfC\x00\x00\xd2C\x00\x00\xd3C\x00\x00\xdaC\x00\x80\xe4C\x00\x80\xe5C\x00\x00\xe7C\x00\x80\xe7C\x00\x00\xe8C\x00\x00\xebC\x00\x00\xefC\x00\x00\xf1C\x00\x00\xfdC\x00\xc0\x01D\x00\x80\x02D\x00\xc0\x02D\x00\xc0\x04D\x00\xc0\x06D\x00\xc0\tD\x00\x80\x0bD\x00@\x0cD\x00\x00\x11D\x00\x80\x15D\x00\x00\x00\x00\x00\x00`A\x00\x00\xa0A\x00\x00\x04B\x00\x00\x10B\x00\x00 B\x00\x00lB\x00\x00\x8eB\x00\x00\x92B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xceB\x00\x00\xdaB\x00\x00\xeeB\x00\x00\xfaB\x00\x006C\x00\x00DC\x00\x00VC\x00\x00]C\x00\x00hC\x00\x00oC\x00\x00vC\x00\x00}C\x00\x00\x80C\x00\x80\x82C\x00\x00\x8eC\x00\x00\x90C\x00\x80\x91C\x00\x80\x93C\x00\x80\x94C\x00\x80\xa1C\x00\x00\xa6C\x00\x00\xadC\x00\x00\xb5C\x00\x00\xc0C\x00\x80\xc2C\x00\x00\xc7C\x00\x00\xc9C\x00\x00\xe2C\x00\x80\xebC\x00\x00\xf0C\x00\x00\xf3C\x00\x00\xf9C\x00\x80\xfdC\x00\x00\x01D\x00\x80\x01D\x00\x80\x04D\x00@\x07D\x00\xc0\x07D\x00\x00\x08D\x00\x00\x10D\x00\xc0\x10D\x00\xc0\x12D\x00\x00\x13D\x00\x80\x14D\x00\x00XB\x00\x00\x80B\x00\x00\x86B\x00\x00\xe6B\x00\x00\x16C\x00\x00\x18C\x00\x00\x1aC\x00\x00\x1dC\x00\x00/C\x00\x00;C\x00\x00=C\x00\x00QC\x00\x00SC\x00\x00_C\x00\x00uC\x00\x00xC\x00\x00|C\x00\x00\x85C\x00\x80\x88C\x00\x80\x89C\x00\x00\x9cC\x00\x80\x9dC\x00\x80\x9eC\x00\x80\xa5C\x00\x00\xaaC\x00\x80\xaeC\x00\x80\xafC\x00\x00\xbbC\x00\x80\xbbC\x00\x00\xc4C\x00\x80\xc6C\x00\x00\xcbC\x00\x00\xd4C\x00\x80\xd4C\x00\x00\xd9C\x00\x80\xd9C\x00\x00\xdfC\x00\x80\xe0C\x00\x80\xe2C\x00\x00\xe6C\x00\x80\xe8C\x00\x00\xedC\x00\x00\xfcC\x00\x80\xfeC\x00\x80\x00D\x00@\x01D\x00\x00\x07D\x00\x00\x0bD\x00\xc0\x0bD\x00\x80\x0cD\x00\x00\x0eD\x00\x80\x0fD\x00\xc0\x0fD\x00@\x13D\x00@\x14D\x00\x00\x00\x00\x00\x00\x10A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00,B\x00\x000B\x00\x00PB\x00\x00`B\x00\x00dB\x00\x00\xaaB\x00\x00\xacB\x00\x00\xd6B\x00\x00\xe4B\x00\x00\x02C\x00\x00\rC\x00\x00\x10C\x00\x00\x15C\x00\x00"C\x00\x00.C\x00\x007C\x00\x00CC\x00\x00GC\x00\x00IC\x00\x00PC\x00\x00\x83C\x00\x00\x86C\x00\x00\x88C\x00\x00\x8dC\x00\x80\x95C\x00\x00\x98C\x00\x00\xa3C\x00\x00\xa9C\x00\x00\xacC\x00\x00\xb1C\x00\x80\xbdC\x00\x00\xd0C\x00\x00\xd1C\x00\x80\xd6C\x00\x80\xd7C\x00\x00\xdbC\x00\x00\xdcC\x00\x80\xecC\x00\x80\xedC\x00\x00\xf2C\x00\x80\xf4C\x00\x00\xfaC\x00\x00\x05D\x00\x80\x05D\x00@\rD\x00\x80\rD\x00\xc0\x0eD\x00@\x0fD\x00\x80\x12D\x00\xc0\x13D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I11
aI55
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I11
I55
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I10
aI6
aI0
aI8
aI10
aI1
aI5
aI1
aI4
aI6
aI0
aI7
aI2
aI5
aI9
aI6
aI6
aI9
aI5
aI9
aI1
aI7
aI4
aI8
aI6
aI9
aI2
aI8
aI0
aI1
aI5
aI2
aI2
aI3
aI9
aI0
aI7
aI7
aI10
aI10
aI10
aI0
aI7
aI10
aI10
aI2
aI7
aI9
aI0
aI7
aI2
aI7
aI4
aI0
aI8
aI4
aI1
aI5
aI5
aI1
aI10
aI9
aI3
aI6
aI4
aI0
aI3
aI5
aI10
aI5
aI2
aI2
aI7
aI10
aI1
aI8
aI8
aI5
aI1
aI5
aI7
aI1
aI4
aI6
aI0
aI9
aI5
aI4
aI2
aI9
aI1
aI9
aI0
aI2
aI6
aI2
aI8
aI7
aI9
aI0
aI2
aI8
aI8
aI0
aI9
aI7
aI9
aI10
aI1
aI3
aI6
aI2
aI1
aI5
aI4
aI10
aI0
aI3
aI7
aI5
aI4
aI5
aI6
aI0
aI7
aI6
aI1
aI9
aI7
aI9
aI0
aI0
aI1
aI3
aI9
aI1
aI8
aI10
aI7
aI4
aI8
aI4
aI10
aI7
aI6
aI4
aI8
aI4
aI7
aI10
aI4
aI9
aI7
aI10
aI8
aI1
aI6
aI7
aI8
aI8
aI3
aI6
aI9
aI2
aI2
aI3
aI8
aI4
aI8
aI7
aI1
aI7
aI5
aI8
aI2
aI6
aI3
aI2
aI4
aI9
aI6
aI3
aI5
aI10
aI0
aI9
aI7
aI9
aI8
aI2
aI6
aI1
aI4
aI0
aI3
aI3
aI10
aI5
aI5
aI0
aI2
aI0
aI6
aI4
aI5
aI6
aI1
aI9
aI0
aI5
aI8
aI9
aI6
aI7
aI4
aI5
aI3
aI9
aI10
aI6
aI7
aI10
aI4
aI3
aI0
aI8
aI2
aI3
aI8
aI8
aI10
aI8
aI4
aI4
aI1
aI4
aI1
aI0
aI3
aI6
aI3
aI1
aI8
aI7
aI10
aI4
aI6
aI5
aI9
aI8
aI0
aI5
aI1
aI5
aI4
aI8
aI4
aI3
aI7
aI3
aI0
aI6
aI6
aI5
aI4
aI2
aI5
aI2
aI10
aI8
aI3
aI10
aI8
aI8
aI7
aI3
aI10
aI6
aI2
aI5
aI3
aI8
aI5
aI8
aI6
aI9
aI1
aI4
aI6
aI2
aI0
aI7
aI4
aI1
aI8
aI2
aI1
aI1
aI0
aI3
aI7
aI8
aI2
aI4
aI0
aI1
aI8
aI5
aI3
aI10
aI7
aI2
aI4
aI5
aI9
aI5
aI2
aI5
aI7
aI10
aI10
aI5
aI7
aI5
aI8
aI2
aI10
aI4
aI8
aI3
aI6
aI10
aI4
aI1
aI4
aI0
aI0
aI0
aI4
aI6
aI0
aI1
aI6
aI10
aI2
aI2
aI8
aI6
aI0
aI3
aI3
aI0
aI9
aI4
aI6
aI7
aI4
aI2
aI7
aI2
aI4
aI4
aI1
aI7
aI5
aI3
aI8
aI2
aI9
aI9
aI9
aI7
aI2
aI0
aI1
aI2
aI1
aI7
aI10
aI1
aI9
aI6
aI4
aI9
aI6
aI4
aI4
aI7
aI8
aI3
aI1
aI8
aI3
aI6
aI5
aI2
aI3
aI5
aI9
aI0
aI1
aI10
aI2
aI6
aI2
aI6
aI4
aI3
aI6
aI0
aI10
aI2
aI10
aI9
aI10
aI1
aI0
aI6
aI1
aI2
aI9
aI2
aI0
aI9
aI7
aI2
aI4
aI1
aI8
aI1
aI2
aI4
aI0
aI2
aI6
aI4
aI9
aI8
aI5
aI5
aI3
aI1
aI6
aI0
aI10
aI6
aI7
aI10
aI3
aI10
aI0
aI1
aI7
aI3
aI10
aI2
aI2
aI10
aI0
aI2
aI1
aI8
aI4
aI8
aI10
aI6
aI5
aI4
aI0
aI7
aI10
aI9
aI0
aI3
aI7
aI1
aI0
aI7
aI0
aI1
aI1
aI7
aI7
aI5
aI3
aI5
aI9
aI2
aI3
aI6
aI7
aI0
aI7
aI10
aI4
aI10
aI8
aI4
aI4
aI0
aI9
aI2
aI10
aI3
aI0
aI8
aI10
aI10
aI9
aI3
aI10
aI2
aI8
aI2
aI5
aI0
aI5
aI6
aI10
aI9
aI8
aI8
aI6
aI9
aI1
aI7
aI1
aI6
aI5
aI7
aI3
aI7
aI10
aI3
aI10
aI9
aI9
aI8
aI7
aI3
aI9
aI0
aI0
aI1
aI5
aI9
aI5
aI3
aI6
aI7
aI5
aI1
aI5
aI10
aI9
aI5
aI3
aI4
aI3
aI8
aI4
aI3
aI3
aI3
aI6
aI9
aI3
aI5
aI10
aI6
aI5
aI1
aI9
aI7
aI1
aI6
aI0
aI2
aI4
aI6
aI9
aI9
aI8
aI3
aI8
aI3
aI9
aI5
aI3
aI3
aI6
aI2
aI1
aI4
aI3
aI5
aI8
aI2
aI1
aI0
aI1
aI10
aI5
aI9
aI6
atbsS'finished'
p74
I00
sS'nReps'
p75
I55
sS'nRemaining'
p76
I5
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p79
NsS'thisIndex'
p80
I3
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I5
sS'nTotal'
p83
I605
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'd'
asS'.thisTrial'
p95
I10
sS'.thisRepN'
p96
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I10
sg15
(lp100
S'd'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'd'
asg95
I4
sS'.thisRepN'
p103
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I4
sg15
(lp107
S'k'
asg17
S'N'
sg14
I1
sa(dp108
g16
(lp109
S'k'
asg18
S'N'
sS'.thisRepN'
p110
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I6
sg15
(lp114
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp115
g16
(lp116
S'd'
asg18
S'Y'
sS'.thisRepN'
p117
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I3
sg15
(lp121
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp122
S'space'
p123
asg95
I3
sa(dp124
g16
(lp125
S'k'
asg18
S'N'
sS'.thisRepN'
p126
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p127
I4
sS'.thisN'
p128
I4
sS'.thisIndex'
p129
I7
sg15
(lp130
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp131
g16
(lp132
S'd'
asg18
S'N'
sS'.thisRepN'
p133
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p134
I5
sS'.thisN'
p135
I5
sS'.thisIndex'
p136
I3
sg15
(lp137
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp138
g16
(lp139
S'k'
asg18
S'N'
sS'.thisRepN'
p140
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p141
I6
sS'.thisN'
p142
I6
sS'.thisIndex'
p143
I6
sg15
(lp144
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp145
S'space'
p146
asg95
I6
sa(dp147
g16
(lp148
S'k'
asg18
S'N'
sS'.thisRepN'
p149
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p150
I7
sS'.thisN'
p151
I7
sS'.thisIndex'
p152
I4
sg15
(lp153
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp154
g16
(lp155
S'd'
asg18
S'N'
sS'.thisRepN'
p156
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p157
I8
sS'.thisN'
p158
I8
sS'.thisIndex'
p159
I3
sg15
(lp160
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp161
g16
(lp162
S'd'
asg18
S'N'
sS'.thisRepN'
p163
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p164
I9
sS'.thisN'
p165
I9
sS'.thisIndex'
p166
I10
sg15
(lp167
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp168
S'space'
p169
asg95
I10
sa(dp170
g16
(lp171
S'd'
asg18
S'N'
sS'.thisRepN'
p172
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p173
I10
sS'.thisN'
p174
I10
sS'.thisIndex'
p175
I5
sg15
(lp176
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp177
g16
(lp178
S'k'
asg18
S'N'
sS'.thisRepN'
p179
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p180
I0
sS'.thisN'
p181
I11
sS'.thisIndex'
p182
I6
sg15
(lp183
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp184
S'space'
p185
asg95
I6
sa(dp186
g16
(lp187
S'k'
asg18
S'N'
sS'.thisRepN'
p188
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p189
I1
sS'.thisN'
p190
I12
sS'.thisIndex'
p191
I1
sg15
(lp192
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp193
g16
(lp194
S'k'
asg18
S'Y'
sS'.thisRepN'
p195
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p196
I2
sS'.thisN'
p197
I13
sS'.thisIndex'
p198
I2
sg15
(lp199
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp200
S'space'
p201
asg95
I2
sa(dp202
g16
(lp203
S'd'
asg18
S'N'
sS'.thisRepN'
p204
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p205
I3
sS'.thisN'
p206
I14
sS'.thisIndex'
p207
I8
sg15
(lp208
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp209
g16
(lp210
S'd'
asg18
S'Y'
sS'.thisRepN'
p211
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p212
I4
sS'.thisN'
p213
I15
sS'.thisIndex'
p214
I10
sg15
(lp215
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp216
S'space'
p217
asg95
I10
sa(dp218
g16
(lp219
S'k'
asg18
S'Y'
sS'.thisRepN'
p220
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p221
I5
sS'.thisN'
p222
I16
sS'.thisIndex'
p223
I10
sg15
(lp224
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp225
g16
(lp226
S'k'
asg18
S'N'
sS'.thisRepN'
p227
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p228
I6
sS'.thisN'
p229
I17
sS'.thisIndex'
p230
I10
sg15
(lp231
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp232
S'space'
p233
asg95
I10
sa(dp234
g16
(lp235
S'k'
asg18
S'N'
sS'.thisRepN'
p236
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p237
I7
sS'.thisN'
p238
I18
sS'.thisIndex'
p239
I4
sg15
(lp240
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp241
g16
(lp242
S'd'
asg18
S'Y'
sS'.thisRepN'
p243
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p244
I8
sS'.thisN'
p245
I19
sS'.thisIndex'
p246
I1
sg15
(lp247
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp248
S'space'
p249
asg95
I1
sa(dp250
g16
(lp251
S'k'
asg18
S'Y'
sS'.thisRepN'
p252
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p253
I9
sS'.thisN'
p254
I20
sS'.thisIndex'
p255
I8
sg15
(lp256
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp257
S'space'
p258
asg95
I8
sa(dp259
g16
(lp260
S'k'
asg18
S'Y'
sS'.thisRepN'
p261
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p262
I10
sS'.thisN'
p263
I21
sS'.thisIndex'
p264
I1
sg15
(lp265
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp266
S'space'
p267
asg95
I1
sa(dp268
g16
(lp269
S'd'
asg18
S'Y'
sS'.thisRepN'
p270
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p271
I0
sS'.thisN'
p272
I22
sS'.thisIndex'
p273
I0
sg15
(lp274
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp275
S'd'
asg95
I0
sa(dp276
g16
(lp277
S'k'
asg18
S'N'
sS'.thisRepN'
p278
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p279
I1
sS'.thisN'
p280
I23
sS'.thisIndex'
p281
I5
sg15
(lp282
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp283
g16
(lp284
S'd'
asg18
S'Y'
sS'.thisRepN'
p285
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p286
I2
sS'.thisN'
p287
I24
sS'.thisIndex'
p288
I1
sg15
(lp289
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp290
S'space'
p291
asg95
I1
sa(dp292
g16
(lp293
S'k'
asg18
S'Y'
sS'.thisRepN'
p294
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p295
I3
sS'.thisN'
p296
I25
sS'.thisIndex'
p297
I4
sg15
(lp298
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp299
S'space'
p300
asg95
I4
sa(dp301
g16
(lp302
S'k'
asg18
S'Y'
sS'.thisRepN'
p303
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p304
I4
sS'.thisN'
p305
I26
sS'.thisIndex'
p306
I4
sg15
(lp307
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp308
S'space'
p309
asg95
I4
sa(dp310
g16
(lp311
S'k'
asg18
S'N'
sS'.thisRepN'
p312
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p313
I5
sS'.thisN'
p314
I27
sS'.thisIndex'
p315
I6
sg15
(lp316
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp317
g16
(lp318
S'd'
asg18
S'N'
sS'.thisRepN'
p319
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p320
I6
sS'.thisN'
p321
I28
sS'.thisIndex'
p322
I4
sg15
(lp323
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp324
g16
(lp325
S'd'
asg18
S'Y'
sS'.thisRepN'
p326
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p327
I7
sS'.thisN'
p328
I29
sS'.thisIndex'
p329
I7
sg15
(lp330
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp331
S'space'
p332
asg95
I7
sa(dp333
g16
(lp334
S'k'
asg18
S'Y'
sS'.thisRepN'
p335
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p336
I8
sS'.thisN'
p337
I30
sS'.thisIndex'
p338
I6
sg15
(lp339
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp340
g16
(lp341
S'd'
asg18
S'Y'
sS'.thisRepN'
p342
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p343
I9
sS'.thisN'
p344
I31
sS'.thisIndex'
p345
I4
sg15
(lp346
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp347
S'space'
p348
asg95
I4
sa(dp349
g16
(lp350
S'd'
asg18
S'N'
sS'.thisRepN'
p351
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p352
I10
sS'.thisN'
p353
I32
sS'.thisIndex'
p354
I5
sg15
(lp355
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp356
g16
(lp357
S'd'
asg18
S'Y'
sS'.thisRepN'
p358
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p359
I0
sS'.thisN'
p360
I33
sS'.thisIndex'
p361
I8
sg15
(lp362
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp363
S'space'
p364
asg95
I8
sa(dp365
g16
(lp366
S'k'
asg18
S'N'
sS'.thisRepN'
p367
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p368
I1
sS'.thisN'
p369
I34
sS'.thisIndex'
p370
I5
sg15
(lp371
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp372
g16
(lp373
S'k'
asg18
S'Y'
sS'.thisRepN'
p374
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p375
I2
sS'.thisN'
p376
I35
sS'.thisIndex'
p377
I5
sg15
(lp378
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp379
S'space'
p380
asg95
I5
sa(dp381
g16
(lp382
S'k'
asg18
S'Y'
sS'.thisRepN'
p383
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p384
I3
sS'.thisN'
p385
I36
sS'.thisIndex'
p386
I8
sg15
(lp387
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp388
S'space'
p389
asg95
I8
sa(dp390
g16
(lp391
S'd'
asg18
S'N'
sS'.thisRepN'
p392
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p393
I4
sS'.thisN'
p394
I37
sS'.thisIndex'
p395
I3
sg15
(lp396
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp397
g16
(lp398
S'd'
asg18
S'N'
sS'.thisRepN'
p399
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p400
I5
sS'.thisN'
p401
I38
sS'.thisIndex'
p402
I2
sg15
(lp403
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp404
S'space'
p405
asg95
I2
sa(dp406
g16
(lp407
S'd'
asg18
S'Y'
sS'.thisRepN'
p408
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p409
I6
sS'.thisN'
p410
I39
sS'.thisIndex'
p411
I1
sg15
(lp412
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp413
S'space'
p414
asg95
I1
sa(dp415
g16
(lp416
S'k'
asg18
S'Y'
sS'.thisRepN'
p417
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p418
I7
sS'.thisN'
p419
I40
sS'.thisIndex'
p420
I8
sg15
(lp421
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp422
S'space'
p423
asg95
I8
sa(dp424
g16
(lp425
S'd'
asg18
S'N'
sS'.thisRepN'
p426
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p427
I8
sS'.thisN'
p428
I41
sS'.thisIndex'
p429
I0
sg15
(lp430
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp431
g16
(lp432
S'd'
asg18
S'N'
sS'.thisRepN'
p433
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p434
I9
sS'.thisN'
p435
I42
sS'.thisIndex'
p436
I4
sg15
(lp437
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp438
S'space'
p439
asg95
I4
sa(dp440
g16
(lp441
S'k'
asg18
S'Y'
sS'.thisRepN'
p442
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p443
I10
sS'.thisN'
p444
I43
sS'.thisIndex'
p445
I10
sg15
(lp446
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I10
sa(dp447
g16
(lp448
S'k'
asg18
S'Y'
sS'.thisRepN'
p449
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p450
I0
sS'.thisN'
p451
I44
sS'.thisIndex'
p452
I10
sg15
(lp453
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp454
S'space'
p455
asg95
I10
sa(dp456
g16
(lp457
S'k'
asg18
S'N'
sS'.thisRepN'
p458
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p459
I1
sS'.thisN'
p460
I45
sS'.thisIndex'
p461
I1
sg15
(lp462
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp463
g16
(lp464
S'k'
asg18
S'N'
sS'.thisRepN'
p465
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p466
I2
sS'.thisN'
p467
I46
sS'.thisIndex'
p468
I4
sg15
(lp469
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp470
g16
(lp471
S'd'
asg18
S'N'
sS'.thisRepN'
p472
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p473
I3
sS'.thisN'
p474
I47
sS'.thisIndex'
p475
I7
sg15
(lp476
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp477
g16
(lp478
S'd'
asg18
S'Y'
sS'.thisRepN'
p479
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p480
I4
sS'.thisN'
p481
I48
sS'.thisIndex'
p482
I0
sg15
(lp483
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp484
S'space'
p485
asg95
I0
sa(dp486
g16
(lp487
S'k'
asg18
S'N'
sg22
I38
sS'.thisN'
p488
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p489
I5
sS'.thisRepN'
p490
I4
sg21
I37
sS'.thisIndex'
p491
I5
sg23
I22
sg15
(lp492
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp493
g16
(lp494
S'd'
asg95
I4
sS'.thisRepN'
p495
I4
sg30
VF
sg31
g32
sS'.thisTrialN'
p496
I6
sS'.thisN'
p497
I50
sS'.thisIndex'
p498
I4
sg15
(lp499
S'k'
asg17
S'N'
sg14
I2
sa(dp500
g16
(lp501
S'd'
asg95
I3
sS'.thisRepN'
p502
I4
sg30
VF
sg31
g32
sS'.thisTrialN'
p503
I7
sS'.thisN'
p504
I51
sS'.thisIndex'
p505
I3
sg15
(lp506
S'd'
asg17
S'Y'
sg14
I2
sa(dp507
g16
(lp508
S'k'
asg18
S'Y'
sS'.thisRepN'
p509
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p510
I8
sS'.thisN'
p511
I52
sS'.thisIndex'
p512
I10
sg15
(lp513
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp514
S'space'
p515
asg95
I10
sa(dp516
g16
(lp517
S'd'
asg18
S'Y'
sS'.thisRepN'
p518
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p519
I9
sS'.thisN'
p520
I53
sS'.thisIndex'
p521
I0
sg15
(lp522
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp523
S'space'
p524
asg95
I0
sa(dp525
g16
(lp526
S'd'
asg18
S'N'
sS'.thisRepN'
p527
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p528
I10
sS'.thisN'
p529
I54
sS'.thisIndex'
p530
I9
sg15
(lp531
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp532
g16
(lp533
S'd'
asg18
S'Y'
sS'.thisRepN'
p534
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p535
I0
sS'.thisN'
p536
I55
sS'.thisIndex'
p537
I1
sg15
(lp538
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp539
g16
(lp540
S'd'
asg18
S'Y'
sS'.thisRepN'
p541
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p542
I1
sS'.thisN'
p543
I56
sS'.thisIndex'
p544
I10
sg15
(lp545
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp546
S'space'
p547
asg95
I10
sa(dp548
g16
(lp549
S'k'
asg18
S'N'
sS'.thisRepN'
p550
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p551
I2
sS'.thisN'
p552
I57
sS'.thisIndex'
p553
I10
sg15
(lp554
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp555
g16
(lp556
S'd'
asg18
S'N'
sS'.thisRepN'
p557
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p558
I3
sS'.thisN'
p559
I58
sS'.thisIndex'
p560
I1
sg15
(lp561
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp562
g16
(lp563
S'd'
asg18
S'Y'
sS'.thisRepN'
p564
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p565
I4
sS'.thisN'
p566
I59
sS'.thisIndex'
p567
I8
sg15
(lp568
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp569
S'space'
p570
asg95
I8
sa(dp571
g16
(lp572
S'k'
asg18
S'N'
sS'.thisRepN'
p573
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p574
I5
sS'.thisN'
p575
I60
sS'.thisIndex'
p576
I3
sg15
(lp577
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp578
g16
(lp579
S'k'
asg18
S'N'
sS'.thisRepN'
p580
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p581
I6
sS'.thisN'
p582
I61
sS'.thisIndex'
p583
I0
sg15
(lp584
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp585
g16
(lp586
S'd'
asg18
S'N'
sS'.thisRepN'
p587
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p588
I7
sS'.thisN'
p589
I62
sS'.thisIndex'
p590
I1
sg15
(lp591
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp592
g16
(lp593
S'd'
asg18
S'N'
sS'.thisRepN'
p594
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p595
I8
sS'.thisN'
p596
I63
sS'.thisIndex'
p597
I6
sg15
(lp598
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp599
g16
(lp600
S'd'
asg18
S'N'
sS'.thisRepN'
p601
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p602
I9
sS'.thisN'
p603
I64
sS'.thisIndex'
p604
I9
sg15
(lp605
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp606
g16
(lp607
S'k'
asg18
S'Y'
sS'.thisRepN'
p608
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p609
I10
sS'.thisN'
p610
I65
sS'.thisIndex'
p611
I5
sg15
(lp612
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp613
S'space'
p614
asg95
I5
sa(dp615
g16
(lp616
S'k'
asg18
S'N'
sS'.thisRepN'
p617
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p618
I0
sS'.thisN'
p619
I66
sS'.thisIndex'
p620
I5
sg15
(lp621
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp622
g16
(lp623
S'd'
asg18
S'Y'
sS'.thisRepN'
p624
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p625
I1
sS'.thisN'
p626
I67
sS'.thisIndex'
p627
I9
sg15
(lp628
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp629
S'space'
p630
asg95
I9
sa(dp631
g16
(lp632
S'd'
asg18
S'Y'
sS'.thisRepN'
p633
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p634
I2
sS'.thisN'
p635
I68
sS'.thisIndex'
p636
I0
sg15
(lp637
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp638
S'space'
p639
asg95
I0
sa(dp640
g16
(lp641
S'k'
asg18
S'Y'
sS'.thisRepN'
p642
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p643
I3
sS'.thisN'
p644
I69
sS'.thisIndex'
p645
I7
sg15
(lp646
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp647
S'space'
p648
asg95
I7
sa(dp649
g16
(lp650
S'd'
asg18
S'N'
sS'.thisRepN'
p651
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p652
I4
sS'.thisN'
p653
I70
sS'.thisIndex'
p654
I2
sg15
(lp655
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp656
g16
(lp657
S'k'
asg18
S'N'
sS'.thisRepN'
p658
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p659
I5
sS'.thisN'
p660
I71
sS'.thisIndex'
p661
I8
sg15
(lp662
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp663
g16
(lp664
S'k'
asg18
S'Y'
sS'.thisRepN'
p665
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p666
I6
sS'.thisN'
p667
I72
sS'.thisIndex'
p668
I0
sg15
(lp669
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp670
S'space'
p671
asg95
I0
sa(dp672
g16
(lp673
S'd'
asg18
S'N'
sS'.thisRepN'
p674
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p675
I7
sS'.thisN'
p676
I73
sS'.thisIndex'
p677
I8
sg15
(lp678
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp679
g16
(lp680
S'd'
asg18
S'N'
sS'.thisRepN'
p681
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p682
I8
sS'.thisN'
p683
I74
sS'.thisIndex'
p684
I7
sg15
(lp685
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp686
g16
(lp687
S'k'
asg18
S'N'
sS'.thisRepN'
p688
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p689
I9
sS'.thisN'
p690
I75
sS'.thisIndex'
p691
I2
sg15
(lp692
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp693
g16
(lp694
S'd'
asg18
S'Y'
sS'.thisRepN'
p695
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p696
I10
sS'.thisN'
p697
I76
sS'.thisIndex'
p698
I3
sg15
(lp699
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp700
S'space'
p701
asg95
I3
sa(dp702
g16
(lp703
S'k'
asg18
S'N'
sS'.thisRepN'
p704
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p705
I0
sS'.thisN'
p706
I77
sS'.thisIndex'
p707
I1
sg15
(lp708
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp709
g16
(lp710
S'd'
asg18
S'N'
sS'.thisRepN'
p711
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p712
I1
sS'.thisN'
p713
I78
sS'.thisIndex'
p714
I3
sg15
(lp715
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp716
g16
(lp717
S'k'
asg18
S'Y'
sS'.thisRepN'
p718
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p719
I2
sS'.thisN'
p720
I79
sS'.thisIndex'
p721
I3
sg15
(lp722
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp723
S'space'
p724
asg95
I3
sa(dp725
g16
(lp726
S'd'
asg18
S'N'
sS'.thisRepN'
p727
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p728
I3
sS'.thisN'
p729
I80
sS'.thisIndex'
p730
I5
sg15
(lp731
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp732
g16
(lp733
S'k'
asg18
S'Y'
sS'.thisRepN'
p734
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p735
I4
sS'.thisN'
p736
I81
sS'.thisIndex'
p737
I3
sg15
(lp738
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp739
S'space'
p740
asg95
I3
sa(dp741
g16
(lp742
S'd'
asg18
S'Y'
sS'.thisRepN'
p743
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p744
I5
sS'.thisN'
p745
I82
sS'.thisIndex'
p746
I5
sg15
(lp747
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp748
S'space'
p749
asg95
I5
sa(dp750
g16
(lp751
S'd'
asg18
S'Y'
sS'.thisRepN'
p752
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p753
I6
sS'.thisN'
p754
I83
sS'.thisIndex'
p755
I0
sg15
(lp756
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp757
S'space'
p758
asg95
I0
sa(dp759
g16
(lp760
S'k'
asg18
S'Y'
sS'.thisRepN'
p761
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p762
I7
sS'.thisN'
p763
I84
sS'.thisIndex'
p764
I3
sg15
(lp765
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp766
S'space'
p767
asg95
I3
sa(dp768
g16
(lp769
S'd'
asg18
S'N'
sS'.thisRepN'
p770
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p771
I8
sS'.thisN'
p772
I85
sS'.thisIndex'
p773
I10
sg15
(lp774
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp775
g16
(lp776
S'd'
asg18
S'N'
sS'.thisRepN'
p777
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p778
I9
sS'.thisN'
p779
I86
sS'.thisIndex'
p780
I10
sg15
(lp781
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp782
S'space'
p783
asg95
I10
sa(dp784
g16
(lp785
S'd'
asg18
S'N'
sS'.thisRepN'
p786
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p787
I10
sS'.thisN'
p788
I87
sS'.thisIndex'
p789
I4
sg15
(lp790
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp791
g16
(lp792
S'd'
asg18
S'N'
sS'.thisRepN'
p793
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p794
I0
sS'.thisN'
p795
I88
sS'.thisIndex'
p796
I4
sg15
(lp797
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp798
S'space'
p799
asg95
I4
sa(dp800
g16
(lp801
S'd'
asg18
S'Y'
sS'.thisRepN'
p802
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p803
I1
sS'.thisN'
p804
I89
sS'.thisIndex'
p805
I6
sg15
(lp806
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp807
S'space'
p808
asg95
I6
sa(dp809
g16
(lp810
S'k'
asg18
S'N'
sS'.thisRepN'
p811
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p812
I2
sS'.thisN'
p813
I90
sS'.thisIndex'
p814
I7
sg15
(lp815
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp816
g16
(lp817
S'k'
asg18
S'N'
sS'.thisRepN'
p818
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p819
I3
sS'.thisN'
p820
I91
sS'.thisIndex'
p821
I8
sg15
(lp822
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp823
g16
(lp824
S'k'
asg18
S'N'
sS'.thisRepN'
p825
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p826
I4
sS'.thisN'
p827
I92
sS'.thisIndex'
p828
I8
sg15
(lp829
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp830
S'space'
p831
asg95
I8
sa(dp832
g16
(lp833
S'k'
asg18
S'Y'
sS'.thisRepN'
p834
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p835
I5
sS'.thisN'
p836
I93
sS'.thisIndex'
p837
I8
sg15
(lp838
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp839
S'space'
p840
asg95
I8
sa(dp841
g16
(lp842
S'd'
asg18
S'N'
sS'.thisRepN'
p843
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p844
I6
sS'.thisN'
p845
I94
sS'.thisIndex'
p846
I4
sg15
(lp847
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp848
S'd'
asg95
I4
sa(dp849
g16
(lp850
S'd'
asg18
S'N'
sS'.thisRepN'
p851
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p852
I7
sS'.thisN'
p853
I95
sS'.thisIndex'
p854
I6
sg15
(lp855
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp856
g16
(lp857
S'd'
asg18
S'N'
sS'.thisRepN'
p858
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p859
I8
sS'.thisN'
p860
I96
sS'.thisIndex'
p861
I3
sg15
(lp862
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp863
g16
(lp864
S'k'
asg18
S'Y'
sS'.thisRepN'
p865
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p866
I9
sS'.thisN'
p867
I97
sS'.thisIndex'
p868
I3
sg15
(lp869
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp870
S'space'
p871
asg95
I3
sa(dp872
g16
(lp873
S'd'
asg18
S'N'
sS'.thisRepN'
p874
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p875
I10
sS'.thisN'
p876
I98
sS'.thisIndex'
p877
I3
sg15
(lp878
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp879
g16
(lp880
S'k'
asg18
S'Y'
sg22
I43
sS'.thisN'
p881
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p882
I0
sS'.thisRepN'
p883
I9
sg21
I41
sS'.thisIndex'
p884
I6
sg23
I20
sg15
(lp885
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp886
S'space'
p887
asg95
I6
sa(dp888
g16
(lp889
S'd'
asg95
I4
sS'.thisRepN'
p890
I9
sg30
VF
sg31
g32
sS'.thisTrialN'
p891
I1
sS'.thisN'
p892
I100
sS'.thisIndex'
p893
I4
sg15
(lp894
S'd'
asg17
S'Y'
sg14
I3
sa(dp895
g16
(lp896
S'k'
asg95
I5
sS'.thisRepN'
p897
I9
sg30
VF
sg31
g32
sS'.thisTrialN'
p898
I2
sS'.thisN'
p899
I101
sS'.thisIndex'
p900
I5
sg15
(lp901
S'k'
asg17
S'Y'
sg14
I3
sa(dp902
g16
(lp903
S'k'
asg18
S'Y'
sS'.thisRepN'
p904
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p905
I3
sS'.thisN'
p906
I102
sS'.thisIndex'
p907
I2
sg15
(lp908
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp909
S'space'
p910
asg95
I2
sa(dp911
g16
(lp912
S'k'
asg18
S'Y'
sS'.thisRepN'
p913
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p914
I4
sS'.thisN'
p915
I103
sS'.thisIndex'
p916
I8
sg15
(lp917
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp918
S'space'
p919
asg95
I8
sa(dp920
g16
(lp921
S'd'
asg18
S'N'
sS'.thisRepN'
p922
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p923
I5
sS'.thisN'
p924
I104
sS'.thisIndex'
p925
I6
sg15
(lp926
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp927
g16
(lp928
S'd'
asg18
S'Y'
sS'.thisRepN'
p929
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p930
I6
sS'.thisN'
p931
I105
sS'.thisIndex'
p932
I6
sg15
(lp933
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp934
S'space'
p935
asg95
I6
sa(dp936
g16
(lp937
S'd'
asg18
S'N'
sS'.thisRepN'
p938
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p939
I7
sS'.thisN'
p940
I106
sS'.thisIndex'
p941
I5
sg15
(lp942
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp943
S'space'
p944
asg95
I5
sa(dp945
g16
(lp946
S'k'
asg18
S'N'
sS'.thisRepN'
p947
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p948
I8
sS'.thisN'
p949
I107
sS'.thisIndex'
p950
I10
sg15
(lp951
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp952
g16
(lp953
S'd'
asg18
S'Y'
sS'.thisRepN'
p954
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p955
I9
sS'.thisN'
p956
I108
sS'.thisIndex'
p957
I0
sg15
(lp958
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp959
S'space'
p960
asg95
I0
sa(dp961
g16
(lp962
S'd'
asg18
S'Y'
sS'.thisRepN'
p963
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p964
I10
sS'.thisN'
p965
I109
sS'.thisIndex'
p966
I8
sg15
(lp967
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp968
S'space'
p969
asg95
I8
sa(dp970
g16
(lp971
S'd'
asg18
S'Y'
sS'.thisRepN'
p972
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p973
I0
sS'.thisN'
p974
I110
sS'.thisIndex'
p975
I0
sg15
(lp976
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp977
S'space'
p978
asg95
I0
sa(dp979
g16
(lp980
S'd'
asg18
S'N'
sS'.thisRepN'
p981
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p982
I1
sS'.thisN'
p983
I111
sS'.thisIndex'
p984
I0
sg15
(lp985
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp986
g16
(lp987
S'k'
asg18
S'Y'
sS'.thisRepN'
p988
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p989
I2
sS'.thisN'
p990
I112
sS'.thisIndex'
p991
I4
sg15
(lp992
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp993
S'space'
p994
asg95
I4
sa(dp995
g16
(lp996
S'd'
asg18
S'N'
sS'.thisRepN'
p997
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p998
I3
sS'.thisN'
p999
I113
sS'.thisIndex'
p1000
I6
sg15
(lp1001
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1002
S'space'
p1003
asg95
I6
sa(dp1004
g16
(lp1005
S'd'
asg18
S'Y'
sS'.thisRepN'
p1006
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1007
I4
sS'.thisN'
p1008
I114
sS'.thisIndex'
p1009
I10
sg15
(lp1010
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1011
S'space'
p1012
asg95
I10
sa(dp1013
g16
(lp1014
S'k'
asg18
S'N'
sS'.thisRepN'
p1015
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1016
I5
sS'.thisN'
p1017
I115
sS'.thisIndex'
p1018
I9
sg15
(lp1019
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp1020
g16
(lp1021
S'k'
asg18
S'Y'
sS'.thisRepN'
p1022
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1023
I6
sS'.thisN'
p1024
I116
sS'.thisIndex'
p1025
I0
sg15
(lp1026
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1027
S'space'
p1028
asg95
I0
sa(dp1029
g16
(lp1030
S'k'
asg18
S'N'
sS'.thisRepN'
p1031
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1032
I7
sS'.thisN'
p1033
I117
sS'.thisIndex'
p1034
I2
sg15
(lp1035
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I2
sa(dp1036
g16
(lp1037
S'k'
asg18
S'Y'
sS'.thisRepN'
p1038
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1039
I8
sS'.thisN'
p1040
I118
sS'.thisIndex'
p1041
I0
sg15
(lp1042
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1043
S'space'
p1044
asg95
I0
sa(dp1045
g16
(lp1046
S'k'
asg18
S'Y'
sS'.thisRepN'
p1047
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1048
I9
sS'.thisN'
p1049
I119
sS'.thisIndex'
p1050
I8
sg15
(lp1051
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1052
S'space'
p1053
asg95
I8
sa(dp1054
g16
(lp1055
S'k'
asg18
S'Y'
sS'.thisRepN'
p1056
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1057
I10
sS'.thisN'
p1058
I120
sS'.thisIndex'
p1059
I4
sg15
(lp1060
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1061
S'space'
p1062
asg95
I4
sa(dp1063
g16
(lp1064
S'd'
asg18
S'Y'
sS'.thisRepN'
p1065
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1066
I0
sS'.thisN'
p1067
I121
sS'.thisIndex'
p1068
I7
sg15
(lp1069
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1070
S'space'
p1071
asg95
I7
sa(dp1072
g16
(lp1073
S'd'
asg18
S'N'
sS'.thisRepN'
p1074
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1075
I1
sS'.thisN'
p1076
I122
sS'.thisIndex'
p1077
I3
sg15
(lp1078
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1079
g16
(lp1080
S'k'
asg18
S'Y'
sS'.thisRepN'
p1081
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1082
I2
sS'.thisN'
p1083
I123
sS'.thisIndex'
p1084
I5
sg15
(lp1085
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1086
g16
(lp1087
S'k'
asg18
S'Y'
sS'.thisRepN'
p1088
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1089
I3
sS'.thisN'
p1090
I124
sS'.thisIndex'
p1091
I3
sg15
(lp1092
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1093
S'space'
p1094
asg95
I3
sa(dp1095
g16
(lp1096
S'k'
asg18
S'N'
sS'.thisRepN'
p1097
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1098
I4
sS'.thisN'
p1099
I125
sS'.thisIndex'
p1100
I8
sg15
(lp1101
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1102
g16
(lp1103
S'k'
asg18
S'Y'
sS'.thisRepN'
p1104
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1105
I5
sS'.thisN'
p1106
I126
sS'.thisIndex'
p1107
I1
sg15
(lp1108
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1109
S'space'
p1110
asg95
I1
sa(dp1111
g16
(lp1112
S'k'
asg18
S'N'
sS'.thisRepN'
p1113
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1114
I6
sS'.thisN'
p1115
I127
sS'.thisIndex'
p1116
I1
sg15
(lp1117
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1118
g16
(lp1119
S'k'
asg18
S'Y'
sS'.thisRepN'
p1120
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1121
I7
sS'.thisN'
p1122
I128
sS'.thisIndex'
p1123
I3
sg15
(lp1124
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1125
S'space'
p1126
asg95
I3
sa(dp1127
g16
(lp1128
S'k'
asg18
S'N'
sS'.thisRepN'
p1129
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1130
I8
sS'.thisN'
p1131
I129
sS'.thisIndex'
p1132
I1
sg15
(lp1133
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1134
g16
(lp1135
S'k'
asg18
S'N'
sS'.thisRepN'
p1136
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1137
I9
sS'.thisN'
p1138
I130
sS'.thisIndex'
p1139
I10
sg15
(lp1140
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1141
g16
(lp1142
S'd'
asg18
S'Y'
sS'.thisRepN'
p1143
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1144
I10
sS'.thisN'
p1145
I131
sS'.thisIndex'
p1146
I3
sg15
(lp1147
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1148
S'space'
p1149
asg95
I3
sa(dp1150
g16
(lp1151
S'k'
asg18
S'N'
sS'.thisRepN'
p1152
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1153
I0
sS'.thisN'
p1154
I132
sS'.thisIndex'
p1155
I2
sg15
(lp1156
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1157
g16
(lp1158
S'k'
asg18
S'N'
sS'.thisRepN'
p1159
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1160
I1
sS'.thisN'
p1161
I133
sS'.thisIndex'
p1162
I5
sg15
(lp1163
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1164
g16
(lp1165
S'k'
asg18
S'Y'
sS'.thisRepN'
p1166
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1167
I2
sS'.thisN'
p1168
I134
sS'.thisIndex'
p1169
I6
sg15
(lp1170
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1171
S'space'
p1172
asg95
I6
sa(dp1173
g16
(lp1174
S'd'
asg18
S'N'
sS'.thisRepN'
p1175
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1176
I3
sS'.thisN'
p1177
I135
sS'.thisIndex'
p1178
I2
sg15
(lp1179
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1180
S'k'
asg95
I2
sa(dp1181
g16
(lp1182
S'k'
asg18
S'N'
sS'.thisRepN'
p1183
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1184
I4
sS'.thisN'
p1185
I136
sS'.thisIndex'
p1186
I4
sg15
(lp1187
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1188
g16
(lp1189
S'k'
asg18
S'Y'
sS'.thisRepN'
p1190
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1191
I5
sS'.thisN'
p1192
I137
sS'.thisIndex'
p1193
I4
sg15
(lp1194
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1195
S'space'
p1196
asg95
I4
sa(dp1197
g16
(lp1198
S'd'
asg18
S'N'
sS'.thisRepN'
p1199
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1200
I6
sS'.thisN'
p1201
I138
sS'.thisIndex'
p1202
I6
sg15
(lp1203
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1204
g16
(lp1205
S'd'
asg18
S'Y'
sS'.thisRepN'
p1206
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1207
I7
sS'.thisN'
p1208
I139
sS'.thisIndex'
p1209
I5
sg15
(lp1210
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1211
g16
(lp1212
S'd'
asg18
S'N'
sS'.thisRepN'
p1213
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1214
I8
sS'.thisN'
p1215
I140
sS'.thisIndex'
p1216
I7
sg15
(lp1217
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp1218
g16
(lp1219
S'd'
asg18
S'N'
sS'.thisRepN'
p1220
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1221
I9
sS'.thisN'
p1222
I141
sS'.thisIndex'
p1223
I10
sg15
(lp1224
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1225
g16
(lp1226
S'd'
asg18
S'Y'
sS'.thisRepN'
p1227
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1228
I10
sS'.thisN'
p1229
I142
sS'.thisIndex'
p1230
I3
sg15
(lp1231
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1232
S'space'
p1233
asg95
I3
sa(dp1234
g16
(lp1235
S'd'
asg18
S'N'
sS'.thisRepN'
p1236
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1237
I0
sS'.thisN'
p1238
I143
sS'.thisIndex'
p1239
I5
sg15
(lp1240
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1241
g16
(lp1242
S'd'
asg18
S'N'
sS'.thisRepN'
p1243
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1244
I1
sS'.thisN'
p1245
I144
sS'.thisIndex'
p1246
I10
sg15
(lp1247
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1248
g16
(lp1249
S'k'
asg18
S'N'
sS'.thisRepN'
p1250
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1251
I2
sS'.thisN'
p1252
I145
sS'.thisIndex'
p1253
I0
sg15
(lp1254
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1255
g16
(lp1256
S'k'
asg18
S'Y'
sS'.thisRepN'
p1257
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1258
I3
sS'.thisN'
p1259
I146
sS'.thisIndex'
p1260
I4
sg15
(lp1261
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1262
S'space'
p1263
asg95
I4
sa(dp1264
g16
(lp1265
S'd'
asg18
S'Y'
sS'.thisRepN'
p1266
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1267
I4
sS'.thisN'
p1268
I147
sS'.thisIndex'
p1269
I4
sg15
(lp1270
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1271
S'space'
p1272
asg95
I4
sa(dp1273
g16
(lp1274
S'k'
asg18
S'N'
sS'.thisRepN'
p1275
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1276
I5
sS'.thisN'
p1277
I148
sS'.thisIndex'
p1278
I6
sg15
(lp1279
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1280
g16
(lp1281
S'd'
asg18
S'N'
sg22
I42
sS'.thisN'
p1282
I149
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1283
I6
sS'.thisRepN'
p1284
I13
sg21
I44
sS'.thisIndex'
p1285
I10
sg23
I24
sg15
(lp1286
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1287
S'space'
p1288
asg95
I10
sa(dp1289
g16
(lp1290
S'k'
asg95
I9
sS'.thisRepN'
p1291
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1292
I7
sS'.thisN'
p1293
I150
sS'.thisIndex'
p1294
I9
sg15
(lp1295
S'k'
asg17
S'Y'
sg14
I4
sa(dp1296
g16
(lp1297
S'd'
asg95
I3
sS'.thisRepN'
p1298
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1299
I8
sS'.thisN'
p1300
I151
sS'.thisIndex'
p1301
I3
sg15
(lp1302
S'd'
asg17
S'Y'
sg14
I4
sa(dp1303
g16
(lp1304
S'k'
asg18
S'Y'
sS'.thisRepN'
p1305
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1306
I9
sS'.thisN'
p1307
I152
sS'.thisIndex'
p1308
I9
sg15
(lp1309
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1310
S'space'
p1311
asg95
I9
sa(dp1312
g16
(lp1313
S'k'
asg18
S'Y'
sS'.thisRepN'
p1314
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1315
I10
sS'.thisN'
p1316
I153
sS'.thisIndex'
p1317
I3
sg15
(lp1318
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1319
g16
(lp1320
S'k'
asg18
S'N'
sS'.thisRepN'
p1321
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1322
I0
sS'.thisN'
p1323
I154
sS'.thisIndex'
p1324
I9
sg15
(lp1325
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1326
g16
(lp1327
S'k'
asg18
S'Y'
sS'.thisRepN'
p1328
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1329
I1
sS'.thisN'
p1330
I155
sS'.thisIndex'
p1331
I5
sg15
(lp1332
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1333
S'space'
p1334
asg95
I5
sa(dp1335
g16
(lp1336
S'd'
asg18
S'Y'
sS'.thisRepN'
p1337
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1338
I2
sS'.thisN'
p1339
I156
sS'.thisIndex'
p1340
I7
sg15
(lp1341
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1342
S'space'
p1343
asg95
I7
sa(dp1344
g16
(lp1345
S'd'
asg18
S'N'
sS'.thisRepN'
p1346
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1347
I3
sS'.thisN'
p1348
I157
sS'.thisIndex'
p1349
I9
sg15
(lp1350
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1351
g16
(lp1352
S'd'
asg18
S'N'
sS'.thisRepN'
p1353
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1354
I4
sS'.thisN'
p1355
I158
sS'.thisIndex'
p1356
I1
sg15
(lp1357
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1358
g16
(lp1359
S'k'
asg18
S'N'
sS'.thisRepN'
p1360
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1361
I5
sS'.thisN'
p1362
I159
sS'.thisIndex'
p1363
I2
sg15
(lp1364
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1365
g16
(lp1366
S'k'
asg18
S'N'
sS'.thisRepN'
p1367
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1368
I6
sS'.thisN'
p1369
I160
sS'.thisIndex'
p1370
I2
sg15
(lp1371
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1372
S'space'
p1373
asg95
I2
sa(dp1374
g16
(lp1375
S'k'
asg18
S'N'
sS'.thisRepN'
p1376
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1377
I7
sS'.thisN'
p1378
I161
sS'.thisIndex'
p1379
I0
sg15
(lp1380
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1381
g16
(lp1382
S'd'
asg18
S'Y'
sS'.thisRepN'
p1383
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1384
I8
sS'.thisN'
p1385
I162
sS'.thisIndex'
p1386
I10
sg15
(lp1387
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1388
S'space'
p1389
asg95
I10
sa(dp1390
g16
(lp1391
S'd'
asg18
S'N'
sS'.thisRepN'
p1392
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1393
I9
sS'.thisN'
p1394
I163
sS'.thisIndex'
p1395
I3
sg15
(lp1396
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1397
g16
(lp1398
S'k'
asg18
S'N'
sS'.thisRepN'
p1399
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1400
I10
sS'.thisN'
p1401
I164
sS'.thisIndex'
p1402
I6
sg15
(lp1403
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1404
g16
(lp1405
S'd'
asg18
S'Y'
sS'.thisRepN'
p1406
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1407
I0
sS'.thisN'
p1408
I165
sS'.thisIndex'
p1409
I6
sg15
(lp1410
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1411
S'space'
p1412
asg95
I6
sa(dp1413
g16
(lp1414
S'k'
asg18
S'N'
sS'.thisRepN'
p1415
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1416
I1
sS'.thisN'
p1417
I166
sS'.thisIndex'
p1418
I2
sg15
(lp1419
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1420
g16
(lp1421
S'd'
asg18
S'Y'
sS'.thisRepN'
p1422
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1423
I2
sS'.thisN'
p1424
I167
sS'.thisIndex'
p1425
I6
sg15
(lp1426
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1427
S'space'
p1428
asg95
I6
sa(dp1429
g16
(lp1430
S'd'
asg18
S'Y'
sS'.thisRepN'
p1431
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1432
I3
sS'.thisN'
p1433
I168
sS'.thisIndex'
p1434
I6
sg15
(lp1435
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1436
S'space'
p1437
asg95
I6
sa(dp1438
g16
(lp1439
S'd'
asg18
S'Y'
sS'.thisRepN'
p1440
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1441
I4
sS'.thisN'
p1442
I169
sS'.thisIndex'
p1443
I4
sg15
(lp1444
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1445
S'space'
p1446
asg95
I4
sa(dp1447
g16
(lp1448
S'k'
asg18
S'N'
sS'.thisRepN'
p1449
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1450
I5
sS'.thisN'
p1451
I170
sS'.thisIndex'
p1452
I0
sg15
(lp1453
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1454
g16
(lp1455
S'k'
asg18
S'Y'
sS'.thisRepN'
p1456
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1457
I6
sS'.thisN'
p1458
I171
sS'.thisIndex'
p1459
I2
sg15
(lp1460
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1461
S'space'
p1462
asg95
I2
sa(dp1463
g16
(lp1464
S'k'
asg18
S'N'
sS'.thisRepN'
p1465
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1466
I7
sS'.thisN'
p1467
I172
sS'.thisIndex'
p1468
I1
sg15
(lp1469
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1470
g16
(lp1471
S'k'
asg18
S'Y'
sS'.thisRepN'
p1472
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1473
I8
sS'.thisN'
p1474
I173
sS'.thisIndex'
p1475
I2
sg15
(lp1476
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1477
S'space'
p1478
asg95
I2
sa(dp1479
g16
(lp1480
S'd'
asg18
S'N'
sS'.thisRepN'
p1481
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1482
I9
sS'.thisN'
p1483
I174
sS'.thisIndex'
p1484
I10
sg15
(lp1485
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1486
g16
(lp1487
S'd'
asg18
S'Y'
sS'.thisRepN'
p1488
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1489
I10
sS'.thisN'
p1490
I175
sS'.thisIndex'
p1491
I9
sg15
(lp1492
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1493
S'space'
p1494
asg95
I9
sa(dp1495
g16
(lp1496
S'd'
asg18
S'N'
sS'.thisRepN'
p1497
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1498
I0
sS'.thisN'
p1499
I176
sS'.thisIndex'
p1500
I6
sg15
(lp1501
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I6
sa(dp1502
g16
(lp1503
S'k'
asg18
S'N'
sS'.thisRepN'
p1504
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1505
I1
sS'.thisN'
p1506
I177
sS'.thisIndex'
p1507
I2
sg15
(lp1508
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1509
g16
(lp1510
S'd'
asg18
S'N'
sS'.thisRepN'
p1511
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1512
I2
sS'.thisN'
p1513
I178
sS'.thisIndex'
p1514
I1
sg15
(lp1515
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1516
g16
(lp1517
S'k'
asg18
S'Y'
sS'.thisRepN'
p1518
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1519
I3
sS'.thisN'
p1520
I179
sS'.thisIndex'
p1521
I3
sg15
(lp1522
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1523
S'space'
p1524
asg95
I3
sa(dp1525
g16
(lp1526
S'd'
asg18
S'N'
sS'.thisRepN'
p1527
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1528
I4
sS'.thisN'
p1529
I180
sS'.thisIndex'
p1530
I1
sg15
(lp1531
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1532
g16
(lp1533
S'd'
asg18
S'N'
sS'.thisRepN'
p1534
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1535
I5
sS'.thisN'
p1536
I181
sS'.thisIndex'
p1537
I7
sg15
(lp1538
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1539
g16
(lp1540
S'k'
asg18
S'Y'
sS'.thisRepN'
p1541
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1542
I6
sS'.thisN'
p1543
I182
sS'.thisIndex'
p1544
I8
sg15
(lp1545
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1546
S'space'
p1547
asg95
I8
sa(dp1548
g16
(lp1549
S'k'
asg18
S'N'
sS'.thisRepN'
p1550
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1551
I7
sS'.thisN'
p1552
I183
sS'.thisIndex'
p1553
I10
sg15
(lp1554
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I10
sa(dp1555
g16
(lp1556
S'k'
asg18
S'Y'
sS'.thisRepN'
p1557
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1558
I8
sS'.thisN'
p1559
I184
sS'.thisIndex'
p1560
I2
sg15
(lp1561
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1562
g16
(lp1563
S'k'
asg18
S'N'
sS'.thisRepN'
p1564
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1565
I9
sS'.thisN'
p1566
I185
sS'.thisIndex'
p1567
I2
sg15
(lp1568
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1569
g16
(lp1570
S'd'
asg18
S'N'
sS'.thisRepN'
p1571
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1572
I10
sS'.thisN'
p1573
I186
sS'.thisIndex'
p1574
I3
sg15
(lp1575
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1576
g16
(lp1577
S'k'
asg18
S'N'
sS'.thisRepN'
p1578
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1579
I0
sS'.thisN'
p1580
I187
sS'.thisIndex'
p1581
I9
sg15
(lp1582
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1583
g16
(lp1584
S'd'
asg18
S'N'
sS'.thisRepN'
p1585
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1586
I1
sS'.thisN'
p1587
I188
sS'.thisIndex'
p1588
I7
sg15
(lp1589
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1590
g16
(lp1591
S'd'
asg18
S'Y'
sS'.thisRepN'
p1592
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1593
I2
sS'.thisN'
p1594
I189
sS'.thisIndex'
p1595
I9
sg15
(lp1596
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1597
S'space'
p1598
asg95
I9
sa(dp1599
g16
(lp1600
S'd'
asg18
S'N'
sS'.thisRepN'
p1601
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1602
I3
sS'.thisN'
p1603
I190
sS'.thisIndex'
p1604
I5
sg15
(lp1605
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1606
g16
(lp1607
S'd'
asg18
S'N'
sS'.thisRepN'
p1608
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1609
I4
sS'.thisN'
p1610
I191
sS'.thisIndex'
p1611
I0
sg15
(lp1612
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1613
g16
(lp1614
S'k'
asg18
S'N'
sS'.thisRepN'
p1615
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1616
I5
sS'.thisN'
p1617
I192
sS'.thisIndex'
p1618
I4
sg15
(lp1619
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1620
g16
(lp1621
S'd'
asg18
S'Y'
sS'.thisRepN'
p1622
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1623
I6
sS'.thisN'
p1624
I193
sS'.thisIndex'
p1625
I6
sg15
(lp1626
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1627
g16
(lp1628
S'k'
asg18
S'Y'
sS'.thisRepN'
p1629
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1630
I7
sS'.thisN'
p1631
I194
sS'.thisIndex'
p1632
I2
sg15
(lp1633
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1634
S'space'
p1635
asg95
I2
sa(dp1636
g16
(lp1637
S'd'
asg18
S'Y'
sS'.thisRepN'
p1638
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1639
I8
sS'.thisN'
p1640
I195
sS'.thisIndex'
p1641
I10
sg15
(lp1642
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1643
g16
(lp1644
S'd'
asg18
S'N'
sS'.thisRepN'
p1645
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1646
I9
sS'.thisN'
p1647
I196
sS'.thisIndex'
p1648
I8
sg15
(lp1649
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1650
g16
(lp1651
S'd'
asg18
S'Y'
sS'.thisRepN'
p1652
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1653
I10
sS'.thisN'
p1654
I197
sS'.thisIndex'
p1655
I5
sg15
(lp1656
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1657
g16
(lp1658
S'd'
asg18
S'N'
sS'.thisRepN'
p1659
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1660
I0
sS'.thisN'
p1661
I198
sS'.thisIndex'
p1662
I5
sg15
(lp1663
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1664
g16
(lp1665
S'd'
asg18
S'N'
sg22
I42
sS'.thisN'
p1666
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1667
I1
sS'.thisRepN'
p1668
I18
sg21
I41
sS'.thisIndex'
p1669
I10
sg23
I20
sg15
(lp1670
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1671
g16
(lp1672
S'd'
asg95
I7
sS'.thisRepN'
p1673
I18
sg30
VF
sg31
g32
sS'.thisTrialN'
p1674
I2
sS'.thisN'
p1675
I200
sS'.thisIndex'
p1676
I7
sg15
(lp1677
S'k'
asg17
S'N'
sg14
I5
sa(dp1678
g16
(lp1679
S'k'
asg95
I10
sS'.thisRepN'
p1680
I18
sg30
VF
sg31
g32
sS'.thisTrialN'
p1681
I3
sS'.thisN'
p1682
I201
sS'.thisIndex'
p1683
I10
sg15
(lp1684
S'k'
asg17
S'Y'
sg14
I5
sa(dp1685
g16
(lp1686
S'k'
asg18
S'Y'
sS'.thisRepN'
p1687
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1688
I4
sS'.thisN'
p1689
I202
sS'.thisIndex'
p1690
I3
sg15
(lp1691
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I3
sa(dp1692
g16
(lp1693
S'k'
asg18
S'N'
sS'.thisRepN'
p1694
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1695
I5
sS'.thisN'
p1696
I203
sS'.thisIndex'
p1697
I1
sg15
(lp1698
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1699
g16
(lp1700
S'k'
asg18
S'Y'
sS'.thisRepN'
p1701
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1702
I6
sS'.thisN'
p1703
I204
sS'.thisIndex'
p1704
I0
sg15
(lp1705
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1706
S'space'
p1707
asg95
I0
sa(dp1708
g16
(lp1709
S'k'
asg18
S'N'
sS'.thisRepN'
p1710
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1711
I7
sS'.thisN'
p1712
I205
sS'.thisIndex'
p1713
I6
sg15
(lp1714
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1715
g16
(lp1716
S'k'
asg18
S'N'
sS'.thisRepN'
p1717
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1718
I8
sS'.thisN'
p1719
I206
sS'.thisIndex'
p1720
I0
sg15
(lp1721
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1722
g16
(lp1723
S'k'
asg18
S'N'
sS'.thisRepN'
p1724
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1725
I9
sS'.thisN'
p1726
I207
sS'.thisIndex'
p1727
I2
sg15
(lp1728
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1729
g16
(lp1730
S'k'
asg18
S'N'
sS'.thisRepN'
p1731
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1732
I10
sS'.thisN'
p1733
I208
sS'.thisIndex'
p1734
I10
sg15
(lp1735
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1736
g16
(lp1737
S'd'
asg18
S'Y'
sS'.thisRepN'
p1738
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1739
I0
sS'.thisN'
p1740
I209
sS'.thisIndex'
p1741
I9
sg15
(lp1742
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1743
S'space'
p1744
asg95
I9
sa(dp1745
g16
(lp1746
S'd'
asg18
S'N'
sS'.thisRepN'
p1747
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1748
I1
sS'.thisN'
p1749
I210
sS'.thisIndex'
p1750
I1
sg15
(lp1751
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1752
g16
(lp1753
S'd'
asg18
S'N'
sS'.thisRepN'
p1754
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1755
I2
sS'.thisN'
p1756
I211
sS'.thisIndex'
p1757
I9
sg15
(lp1758
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1759
g16
(lp1760
S'k'
asg18
S'Y'
sS'.thisRepN'
p1761
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1762
I3
sS'.thisN'
p1763
I212
sS'.thisIndex'
p1764
I0
sg15
(lp1765
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1766
S'space'
p1767
asg95
I0
sa(dp1768
g16
(lp1769
S'k'
asg18
S'N'
sS'.thisRepN'
p1770
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1771
I4
sS'.thisN'
p1772
I213
sS'.thisIndex'
p1773
I6
sg15
(lp1774
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1775
g16
(lp1776
S'd'
asg18
S'N'
sS'.thisRepN'
p1777
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1778
I5
sS'.thisN'
p1779
I214
sS'.thisIndex'
p1780
I8
sg15
(lp1781
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1782
g16
(lp1783
S'd'
asg18
S'Y'
sS'.thisRepN'
p1784
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1785
I6
sS'.thisN'
p1786
I215
sS'.thisIndex'
p1787
I3
sg15
(lp1788
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I3
sa(dp1789
g16
(lp1790
S'd'
asg18
S'Y'
sS'.thisRepN'
p1791
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1792
I7
sS'.thisN'
p1793
I216
sS'.thisIndex'
p1794
I2
sg15
(lp1795
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1796
S'space'
p1797
asg95
I2
sa(dp1798
g16
(lp1799
S'd'
asg18
S'N'
sS'.thisRepN'
p1800
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1801
I8
sS'.thisN'
p1802
I217
sS'.thisIndex'
p1803
I2
sg15
(lp1804
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1805
g16
(lp1806
S'd'
asg18
S'Y'
sS'.thisRepN'
p1807
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1808
I9
sS'.thisN'
p1809
I218
sS'.thisIndex'
p1810
I5
sg15
(lp1811
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1812
S'space'
p1813
asg95
I5
sa(dp1814
g16
(lp1815
S'd'
asg18
S'N'
sS'.thisRepN'
p1816
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1817
I10
sS'.thisN'
p1818
I219
sS'.thisIndex'
p1819
I6
sg15
(lp1820
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I6
sa(dp1821
g16
(lp1822
S'k'
asg18
S'N'
sS'.thisRepN'
p1823
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1824
I0
sS'.thisN'
p1825
I220
sS'.thisIndex'
p1826
I1
sg15
(lp1827
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1828
g16
(lp1829
S'k'
asg18
S'N'
sS'.thisRepN'
p1830
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1831
I1
sS'.thisN'
p1832
I221
sS'.thisIndex'
p1833
I8
sg15
(lp1834
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1835
g16
(lp1836
S'k'
asg18
S'N'
sS'.thisRepN'
p1837
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1838
I2
sS'.thisN'
p1839
I222
sS'.thisIndex'
p1840
I0
sg15
(lp1841
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1842
g16
(lp1843
S'k'
asg18
S'Y'
sS'.thisRepN'
p1844
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1845
I3
sS'.thisN'
p1846
I223
sS'.thisIndex'
p1847
I9
sg15
(lp1848
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1849
g16
(lp1850
S'd'
asg18
S'N'
sS'.thisRepN'
p1851
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1852
I4
sS'.thisN'
p1853
I224
sS'.thisIndex'
p1854
I3
sg15
(lp1855
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I3
sa(dp1856
g16
(lp1857
S'd'
asg18
S'Y'
sS'.thisRepN'
p1858
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1859
I5
sS'.thisN'
p1860
I225
sS'.thisIndex'
p1861
I2
sg15
(lp1862
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1863
S'space'
p1864
asg95
I2
sa(dp1865
g16
(lp1866
S'k'
asg18
S'Y'
sS'.thisRepN'
p1867
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1868
I6
sS'.thisN'
p1869
I226
sS'.thisIndex'
p1870
I3
sg15
(lp1871
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1872
S'space'
p1873
asg95
I3
sa(dp1874
g16
(lp1875
S'd'
asg18
S'N'
sS'.thisRepN'
p1876
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1877
I7
sS'.thisN'
p1878
I227
sS'.thisIndex'
p1879
I6
sg15
(lp1880
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1881
g16
(lp1882
S'k'
asg18
S'N'
sS'.thisRepN'
p1883
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1884
I8
sS'.thisN'
p1885
I228
sS'.thisIndex'
p1886
I1
sg15
(lp1887
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1888
g16
(lp1889
S'd'
asg18
S'Y'
sS'.thisRepN'
p1890
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1891
I9
sS'.thisN'
p1892
I229
sS'.thisIndex'
p1893
I0
sg15
(lp1894
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1895
S'space'
p1896
asg95
I0
sa(dp1897
g16
(lp1898
S'd'
asg18
S'Y'
sS'.thisRepN'
p1899
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1900
I10
sS'.thisN'
p1901
I230
sS'.thisIndex'
p1902
I5
sg15
(lp1903
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1904
S'space'
p1905
asg95
I5
sa(dp1906
g16
(lp1907
S'd'
asg18
S'N'
sS'.thisRepN'
p1908
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1909
I0
sS'.thisN'
p1910
I231
sS'.thisIndex'
p1911
I7
sg15
(lp1912
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1913
g16
(lp1914
S'd'
asg18
S'N'
sS'.thisRepN'
p1915
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1916
I1
sS'.thisN'
p1917
I232
sS'.thisIndex'
p1918
I8
sg15
(lp1919
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1920
g16
(lp1921
S'd'
asg18
S'N'
sS'.thisRepN'
p1922
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1923
I2
sS'.thisN'
p1924
I233
sS'.thisIndex'
p1925
I0
sg15
(lp1926
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1927
g16
(lp1928
S'k'
asg18
S'N'
sS'.thisRepN'
p1929
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1930
I3
sS'.thisN'
p1931
I234
sS'.thisIndex'
p1932
I7
sg15
(lp1933
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1934
g16
(lp1935
S'd'
asg18
S'Y'
sS'.thisRepN'
p1936
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1937
I4
sS'.thisN'
p1938
I235
sS'.thisIndex'
p1939
I1
sg15
(lp1940
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1941
S'space'
p1942
asg95
I1
sa(dp1943
g16
(lp1944
S'k'
asg18
S'Y'
sS'.thisRepN'
p1945
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1946
I5
sS'.thisN'
p1947
I236
sS'.thisIndex'
p1948
I1
sg15
(lp1949
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1950
S'space'
p1951
asg95
I1
sa(dp1952
g16
(lp1953
S'k'
asg18
S'N'
sS'.thisRepN'
p1954
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1955
I6
sS'.thisN'
p1956
I237
sS'.thisIndex'
p1957
I0
sg15
(lp1958
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1959
g16
(lp1960
S'k'
asg18
S'N'
sS'.thisRepN'
p1961
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1962
I7
sS'.thisN'
p1963
I238
sS'.thisIndex'
p1964
I4
sg15
(lp1965
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1966
g16
(lp1967
S'k'
asg18
S'Y'
sS'.thisRepN'
p1968
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1969
I8
sS'.thisN'
p1970
I239
sS'.thisIndex'
p1971
I8
sg15
(lp1972
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1973
S'space'
p1974
asg95
I8
sa(dp1975
g16
(lp1976
S'd'
asg18
S'Y'
sS'.thisRepN'
p1977
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1978
I9
sS'.thisN'
p1979
I240
sS'.thisIndex'
p1980
I5
sg15
(lp1981
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1982
S'space'
p1983
asg95
I5
sa(dp1984
g16
(lp1985
S'd'
asg18
S'N'
sS'.thisRepN'
p1986
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1987
I10
sS'.thisN'
p1988
I241
sS'.thisIndex'
p1989
I1
sg15
(lp1990
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1991
g16
(lp1992
S'k'
asg18
S'N'
sS'.thisRepN'
p1993
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1994
I0
sS'.thisN'
p1995
I242
sS'.thisIndex'
p1996
I4
sg15
(lp1997
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1998
g16
(lp1999
S'd'
asg18
S'Y'
sS'.thisRepN'
p2000
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2001
I1
sS'.thisN'
p2002
I243
sS'.thisIndex'
p2003
I5
sg15
(lp2004
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2005
S'space'
p2006
asg95
I5
sa(dp2007
g16
(lp2008
S'd'
asg18
S'Y'
sS'.thisRepN'
p2009
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2010
I2
sS'.thisN'
p2011
I244
sS'.thisIndex'
p2012
I1
sg15
(lp2013
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2014
S'space'
p2015
asg95
I1
sa(dp2016
g16
(lp2017
S'd'
asg18
S'N'
sS'.thisRepN'
p2018
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2019
I3
sS'.thisN'
p2020
I245
sS'.thisIndex'
p2021
I9
sg15
(lp2022
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp2023
g16
(lp2024
S'k'
asg18
S'N'
sS'.thisRepN'
p2025
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2026
I4
sS'.thisN'
p2027
I246
sS'.thisIndex'
p2028
I8
sg15
(lp2029
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp2030
g16
(lp2031
S'k'
asg18
S'Y'
sS'.thisRepN'
p2032
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2033
I5
sS'.thisN'
p2034
I247
sS'.thisIndex'
p2035
I1
sg15
(lp2036
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2037
S'space'
p2038
asg95
I1
sa(dp2039
g16
(lp2040
S'k'
asg18
S'Y'
sS'.thisRepN'
p2041
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2042
I6
sS'.thisN'
p2043
I248
sS'.thisIndex'
p2044
I9
sg15
(lp2045
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2046
S'space'
p2047
asg95
I9
sa(dp2048
g16
(lp2049
S'k'
asg18
S'N'
sg22
I45
sS'.thisN'
p2050
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2051
I7
sS'.thisRepN'
p2052
I22
sg21
I42
sS'.thisIndex'
p2053
I3
sg23
I20
sg15
(lp2054
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp2055
g16
(lp2056
S'k'
asg95
I4
sS'.thisRepN'
p2057
I22
sg30
VF
sg31
g32
sS'.thisTrialN'
p2058
I8
sS'.thisN'
p2059
I250
sS'.thisIndex'
p2060
I4
sg15
(lp2061
S'k'
asg17
S'Y'
sg14
I6
sa(dp2062
g16
(lp2063
S'd'
asg95
I6
sS'.thisRepN'
p2064
I22
sg30
VF
sg31
g32
sS'.thisTrialN'
p2065
I9
sS'.thisN'
p2066
I251
sS'.thisIndex'
p2067
I6
sg15
(lp2068
S'k'
asg17
S'N'
sg14
I6
sa(dp2069
g16
(lp2070
S'd'
asg18
S'N'
sS'.thisRepN'
p2071
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2072
I10
sS'.thisN'
p2073
I252
sS'.thisIndex'
p2074
I9
sg15
(lp2075
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2076
g16
(lp2077
S'k'
asg18
S'N'
sS'.thisRepN'
p2078
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2079
I0
sS'.thisN'
p2080
I253
sS'.thisIndex'
p2081
I8
sg15
(lp2082
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2083
g16
(lp2084
S'd'
asg18
S'Y'
sS'.thisRepN'
p2085
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2086
I1
sS'.thisN'
p2087
I254
sS'.thisIndex'
p2088
I1
sg15
(lp2089
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2090
S'space'
p2091
asg95
I1
sa(dp2092
g16
(lp2093
S'd'
asg18
S'Y'
sS'.thisRepN'
p2094
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2095
I2
sS'.thisN'
p2096
I255
sS'.thisIndex'
p2097
I3
sg15
(lp2098
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2099
S'space'
p2100
asg95
I3
sa(dp2101
g16
(lp2102
S'k'
asg18
S'N'
sS'.thisRepN'
p2103
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2104
I3
sS'.thisN'
p2105
I256
sS'.thisIndex'
p2106
I8
sg15
(lp2107
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2108
S'space'
p2109
asg95
I8
sa(dp2110
g16
(lp2111
S'k'
asg18
S'Y'
sS'.thisRepN'
p2112
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2113
I4
sS'.thisN'
p2114
I257
sS'.thisIndex'
p2115
I7
sg15
(lp2116
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2117
S'space'
p2118
asg95
I7
sa(dp2119
g16
(lp2120
S'k'
asg18
S'N'
sS'.thisRepN'
p2121
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2122
I5
sS'.thisN'
p2123
I258
sS'.thisIndex'
p2124
I0
sg15
(lp2125
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2126
g16
(lp2127
S'k'
asg18
S'Y'
sS'.thisRepN'
p2128
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2129
I6
sS'.thisN'
p2130
I259
sS'.thisIndex'
p2131
I4
sg15
(lp2132
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2133
S'space'
p2134
asg95
I4
sa(dp2135
g16
(lp2136
S'd'
asg18
S'Y'
sS'.thisRepN'
p2137
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2138
I7
sS'.thisN'
p2139
I260
sS'.thisIndex'
p2140
I6
sg15
(lp2141
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2142
S'space'
p2143
asg95
I6
sa(dp2144
g16
(lp2145
S'k'
asg18
S'Y'
sS'.thisRepN'
p2146
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2147
I8
sS'.thisN'
p2148
I261
sS'.thisIndex'
p2149
I8
sg15
(lp2150
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2151
S'space'
p2152
asg95
I8
sa(dp2153
g16
(lp2154
S'd'
asg18
S'N'
sS'.thisRepN'
p2155
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2156
I9
sS'.thisN'
p2157
I262
sS'.thisIndex'
p2158
I10
sg15
(lp2159
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I10
sa(dp2160
g16
(lp2161
S'k'
asg18
S'Y'
sS'.thisRepN'
p2162
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2163
I10
sS'.thisN'
p2164
I263
sS'.thisIndex'
p2165
I7
sg15
(lp2166
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2167
S'space'
p2168
asg95
I7
sa(dp2169
g16
(lp2170
S'd'
asg18
S'N'
sS'.thisRepN'
p2171
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2172
I0
sS'.thisN'
p2173
I264
sS'.thisIndex'
p2174
I6
sg15
(lp2175
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2176
g16
(lp2177
S'k'
asg18
S'Y'
sS'.thisRepN'
p2178
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2179
I1
sS'.thisN'
p2180
I265
sS'.thisIndex'
p2181
I5
sg15
(lp2182
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2183
S'space'
p2184
asg95
I5
sa(dp2185
g16
(lp2186
S'k'
asg18
S'N'
sS'.thisRepN'
p2187
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2188
I2
sS'.thisN'
p2189
I266
sS'.thisIndex'
p2190
I9
sg15
(lp2191
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2192
g16
(lp2193
S'd'
asg18
S'Y'
sS'.thisRepN'
p2194
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2195
I3
sS'.thisN'
p2196
I267
sS'.thisIndex'
p2197
I2
sg15
(lp2198
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2199
S'space'
p2200
asg95
I2
sa(dp2201
g16
(lp2202
S'k'
asg18
S'N'
sS'.thisRepN'
p2203
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2204
I4
sS'.thisN'
p2205
I268
sS'.thisIndex'
p2206
I10
sg15
(lp2207
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2208
g16
(lp2209
S'd'
asg18
S'N'
sS'.thisRepN'
p2210
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2211
I5
sS'.thisN'
p2212
I269
sS'.thisIndex'
p2213
I3
sg15
(lp2214
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2215
g16
(lp2216
S'k'
asg18
S'N'
sS'.thisRepN'
p2217
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2218
I6
sS'.thisN'
p2219
I270
sS'.thisIndex'
p2220
I6
sg15
(lp2221
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2222
g16
(lp2223
S'k'
asg18
S'N'
sS'.thisRepN'
p2224
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2225
I7
sS'.thisN'
p2226
I271
sS'.thisIndex'
p2227
I0
sg15
(lp2228
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2229
g16
(lp2230
S'k'
asg18
S'N'
sS'.thisRepN'
p2231
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2232
I8
sS'.thisN'
p2233
I272
sS'.thisIndex'
p2234
I10
sg15
(lp2235
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2236
S'space'
p2237
asg95
I10
sa(dp2238
g16
(lp2239
S'd'
asg18
S'Y'
sS'.thisRepN'
p2240
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2241
I9
sS'.thisN'
p2242
I273
sS'.thisIndex'
p2243
I9
sg15
(lp2244
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2245
S'space'
p2246
asg95
I9
sa(dp2247
g16
(lp2248
S'd'
asg18
S'Y'
sS'.thisRepN'
p2249
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2250
I10
sS'.thisN'
p2251
I274
sS'.thisIndex'
p2252
I1
sg15
(lp2253
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2254
S'space'
p2255
asg95
I1
sa(dp2256
g16
(lp2257
S'k'
asg18
S'N'
sS'.thisRepN'
p2258
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2259
I0
sS'.thisN'
p2260
I275
sS'.thisIndex'
p2261
I9
sg15
(lp2262
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2263
g16
(lp2264
S'd'
asg18
S'N'
sS'.thisRepN'
p2265
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2266
I1
sS'.thisN'
p2267
I276
sS'.thisIndex'
p2268
I7
sg15
(lp2269
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2270
S'space'
p2271
asg95
I7
sa(dp2272
g16
(lp2273
S'k'
asg18
S'N'
sS'.thisRepN'
p2274
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2275
I2
sS'.thisN'
p2276
I277
sS'.thisIndex'
p2277
I1
sg15
(lp2278
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2279
g16
(lp2280
S'k'
asg18
S'N'
sS'.thisRepN'
p2281
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2282
I3
sS'.thisN'
p2283
I278
sS'.thisIndex'
p2284
I6
sg15
(lp2285
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2286
g16
(lp2287
S'd'
asg18
S'Y'
sS'.thisRepN'
p2288
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2289
I4
sS'.thisN'
p2290
I279
sS'.thisIndex'
p2291
I4
sg15
(lp2292
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2293
S'space'
p2294
asg95
I4
sa(dp2295
g16
(lp2296
S'd'
asg18
S'Y'
sS'.thisRepN'
p2297
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2298
I5
sS'.thisN'
p2299
I280
sS'.thisIndex'
p2300
I7
sg15
(lp2301
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2302
S'space'
p2303
asg95
I7
sa(dp2304
g16
(lp2305
S'd'
asg18
S'N'
sS'.thisRepN'
p2306
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2307
I6
sS'.thisN'
p2308
I281
sS'.thisIndex'
p2309
I7
sg15
(lp2310
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2311
g16
(lp2312
S'd'
asg18
S'Y'
sS'.thisRepN'
p2313
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2314
I7
sS'.thisN'
p2315
I282
sS'.thisIndex'
p2316
I10
sg15
(lp2317
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2318
S'space'
p2319
asg95
I10
sa(dp2320
g16
(lp2321
S'k'
asg18
S'N'
sS'.thisRepN'
p2322
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2323
I8
sS'.thisN'
p2324
I283
sS'.thisIndex'
p2325
I6
sg15
(lp2326
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2327
S'space'
p2328
asg95
I6
sa(dp2329
g16
(lp2330
S'd'
asg18
S'Y'
sS'.thisRepN'
p2331
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2332
I9
sS'.thisN'
p2333
I284
sS'.thisIndex'
p2334
I8
sg15
(lp2335
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2336
S'space'
p2337
asg95
I8
sa(dp2338
g16
(lp2339
S'd'
asg18
S'Y'
sS'.thisRepN'
p2340
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2341
I10
sS'.thisN'
p2342
I285
sS'.thisIndex'
p2343
I6
sg15
(lp2344
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2345
S'space'
p2346
asg95
I6
sa(dp2347
g16
(lp2348
S'd'
asg18
S'Y'
sS'.thisRepN'
p2349
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2350
I0
sS'.thisN'
p2351
I286
sS'.thisIndex'
p2352
I2
sg15
(lp2353
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2354
S'space'
p2355
asg95
I2
sa(dp2356
g16
(lp2357
S'k'
asg18
S'N'
sS'.thisRepN'
p2358
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2359
I1
sS'.thisN'
p2360
I287
sS'.thisIndex'
p2361
I1
sg15
(lp2362
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2363
g16
(lp2364
S'k'
asg18
S'Y'
sS'.thisRepN'
p2365
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2366
I2
sS'.thisN'
p2367
I288
sS'.thisIndex'
p2368
I8
sg15
(lp2369
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2370
S'space'
p2371
asg95
I8
sa(dp2372
g16
(lp2373
S'k'
asg18
S'N'
sS'.thisRepN'
p2374
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2375
I3
sS'.thisN'
p2376
I289
sS'.thisIndex'
p2377
I1
sg15
(lp2378
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2379
g16
(lp2380
S'k'
asg18
S'Y'
sS'.thisRepN'
p2381
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2382
I4
sS'.thisN'
p2383
I290
sS'.thisIndex'
p2384
I6
sg15
(lp2385
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2386
S'space'
p2387
asg95
I6
sa(dp2388
g16
(lp2389
S'k'
asg18
S'Y'
sS'.thisRepN'
p2390
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2391
I5
sS'.thisN'
p2392
I291
sS'.thisIndex'
p2393
I8
sg15
(lp2394
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2395
S'space'
p2396
asg95
I8
sa(dp2397
g16
(lp2398
S'k'
asg18
S'N'
sS'.thisRepN'
p2399
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2400
I6
sS'.thisN'
p2401
I292
sS'.thisIndex'
p2402
I4
sg15
(lp2403
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2404
g16
(lp2405
S'k'
asg18
S'Y'
sS'.thisRepN'
p2406
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2407
I7
sS'.thisN'
p2408
I293
sS'.thisIndex'
p2409
I2
sg15
(lp2410
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2411
S'space'
p2412
asg95
I2
sa(dp2413
g16
(lp2414
S'k'
asg18
S'N'
sS'.thisRepN'
p2415
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2416
I8
sS'.thisN'
p2417
I294
sS'.thisIndex'
p2418
I5
sg15
(lp2419
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2420
g16
(lp2421
S'k'
asg18
S'Y'
sS'.thisRepN'
p2422
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2423
I9
sS'.thisN'
p2424
I295
sS'.thisIndex'
p2425
I8
sg15
(lp2426
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2427
S'space'
p2428
asg95
I8
sa(dp2429
g16
(lp2430
S'd'
asg18
S'Y'
sS'.thisRepN'
p2431
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2432
I10
sS'.thisN'
p2433
I296
sS'.thisIndex'
p2434
I0
sg15
(lp2435
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2436
S'space'
p2437
asg95
I0
sa(dp2438
g16
(lp2439
S'd'
asg18
S'N'
sS'.thisRepN'
p2440
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2441
I0
sS'.thisN'
p2442
I297
sS'.thisIndex'
p2443
I8
sg15
(lp2444
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2445
g16
(lp2446
S'k'
asg18
S'N'
sS'.thisRepN'
p2447
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2448
I1
sS'.thisN'
p2449
I298
sS'.thisIndex'
p2450
I4
sg15
(lp2451
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2452
g16
(lp2453
S'k'
asg18
S'Y'
sg22
I44
sS'.thisN'
p2454
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2455
I2
sS'.thisRepN'
p2456
I27
sg21
I43
sS'.thisIndex'
p2457
I10
sg23
I24
sg15
(lp2458
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2459
S'space'
p2460
asg95
I10
sa(dp2461
g16
(lp2462
S'k'
asg95
I4
sS'.thisRepN'
p2463
I27
sg30
VF
sg31
g32
sS'.thisTrialN'
p2464
I3
sS'.thisN'
p2465
I300
sS'.thisIndex'
p2466
I4
sg15
(lp2467
S'k'
asg17
S'Y'
sg14
I7
sa(dp2468
g16
(lp2469
S'k'
asg95
I5
sS'.thisRepN'
p2470
I27
sg30
VF
sg31
g32
sS'.thisTrialN'
p2471
I4
sS'.thisN'
p2472
I301
sS'.thisIndex'
p2473
I5
sg15
(lp2474
S'k'
asg17
S'Y'
sg14
I7
sa(dp2475
g16
(lp2476
S'k'
asg18
S'Y'
sS'.thisRepN'
p2477
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2478
I5
sS'.thisN'
p2479
I302
sS'.thisIndex'
p2480
I2
sg15
(lp2481
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2482
S'space'
p2483
asg95
I2
sa(dp2484
g16
(lp2485
S'k'
asg18
S'Y'
sS'.thisRepN'
p2486
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2487
I6
sS'.thisN'
p2488
I303
sS'.thisIndex'
p2489
I2
sg15
(lp2490
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2491
S'space'
p2492
asg95
I2
sa(dp2493
g16
(lp2494
S'k'
asg18
S'Y'
sS'.thisRepN'
p2495
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2496
I7
sS'.thisN'
p2497
I304
sS'.thisIndex'
p2498
I10
sg15
(lp2499
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2500
S'space'
p2501
asg95
I10
sa(dp2502
g16
(lp2503
S'k'
asg18
S'N'
sS'.thisRepN'
p2504
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2505
I8
sS'.thisN'
p2506
I305
sS'.thisIndex'
p2507
I4
sg15
(lp2508
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2509
S'space'
p2510
asg95
I4
sa(dp2511
g16
(lp2512
S'd'
asg18
S'Y'
sS'.thisRepN'
p2513
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2514
I9
sS'.thisN'
p2515
I306
sS'.thisIndex'
p2516
I6
sg15
(lp2517
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2518
S'space'
p2519
asg95
I6
sa(dp2520
g16
(lp2521
S'k'
asg18
S'N'
sS'.thisRepN'
p2522
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2523
I10
sS'.thisN'
p2524
I307
sS'.thisIndex'
p2525
I2
sg15
(lp2526
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2527
g16
(lp2528
S'd'
asg18
S'N'
sS'.thisRepN'
p2529
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2530
I0
sS'.thisN'
p2531
I308
sS'.thisIndex'
p2532
I0
sg15
(lp2533
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I0
sa(dp2534
g16
(lp2535
S'd'
asg18
S'Y'
sS'.thisRepN'
p2536
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2537
I1
sS'.thisN'
p2538
I309
sS'.thisIndex'
p2539
I6
sg15
(lp2540
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2541
S'space'
p2542
asg95
I6
sa(dp2543
g16
(lp2544
S'd'
asg18
S'Y'
sS'.thisRepN'
p2545
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2546
I2
sS'.thisN'
p2547
I310
sS'.thisIndex'
p2548
I7
sg15
(lp2549
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2550
S'space'
p2551
asg95
I7
sa(dp2552
g16
(lp2553
S'd'
asg18
S'N'
sS'.thisRepN'
p2554
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2555
I3
sS'.thisN'
p2556
I311
sS'.thisIndex'
p2557
I0
sg15
(lp2558
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2559
S'space'
p2560
asg95
I0
sa(dp2561
g16
(lp2562
S'd'
asg18
S'Y'
sS'.thisRepN'
p2563
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2564
I4
sS'.thisN'
p2565
I312
sS'.thisIndex'
p2566
I9
sg15
(lp2567
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2568
S'space'
p2569
asg95
I9
sa(dp2570
g16
(lp2571
S'd'
asg18
S'Y'
sS'.thisRepN'
p2572
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2573
I5
sS'.thisN'
p2574
I313
sS'.thisIndex'
p2575
I4
sg15
(lp2576
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2577
S'space'
p2578
asg95
I4
sa(dp2579
g16
(lp2580
S'd'
asg18
S'N'
sS'.thisRepN'
p2581
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2582
I6
sS'.thisN'
p2583
I314
sS'.thisIndex'
p2584
I7
sg15
(lp2585
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2586
g16
(lp2587
S'k'
asg18
S'Y'
sS'.thisRepN'
p2588
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2589
I7
sS'.thisN'
p2590
I315
sS'.thisIndex'
p2591
I9
sg15
(lp2592
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2593
S'space'
p2594
asg95
I9
sa(dp2595
g16
(lp2596
S'd'
asg18
S'N'
sS'.thisRepN'
p2597
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2598
I8
sS'.thisN'
p2599
I316
sS'.thisIndex'
p2600
I0
sg15
(lp2601
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2602
S'space'
p2603
asg95
I0
sa(dp2604
g16
(lp2605
S'd'
asg18
S'Y'
sS'.thisRepN'
p2606
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2607
I9
sS'.thisN'
p2608
I317
sS'.thisIndex'
p2609
I9
sg15
(lp2610
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2611
S'space'
p2612
asg95
I9
sa(dp2613
g16
(lp2614
S'd'
asg18
S'Y'
sS'.thisRepN'
p2615
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2616
I10
sS'.thisN'
p2617
I318
sS'.thisIndex'
p2618
I4
sg15
(lp2619
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2620
S'space'
p2621
asg95
I4
sa(dp2622
g16
(lp2623
S'k'
asg18
S'Y'
sS'.thisRepN'
p2624
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2625
I0
sS'.thisN'
p2626
I319
sS'.thisIndex'
p2627
I1
sg15
(lp2628
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2629
S'space'
p2630
asg95
I1
sa(dp2631
g16
(lp2632
S'd'
asg18
S'N'
sS'.thisRepN'
p2633
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2634
I1
sS'.thisN'
p2635
I320
sS'.thisIndex'
p2636
I0
sg15
(lp2637
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I0
sa(dp2638
g16
(lp2639
S'd'
asg18
S'N'
sS'.thisRepN'
p2640
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2641
I2
sS'.thisN'
p2642
I321
sS'.thisIndex'
p2643
I4
sg15
(lp2644
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2645
g16
(lp2646
S'k'
asg18
S'N'
sS'.thisRepN'
p2647
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2648
I3
sS'.thisN'
p2649
I322
sS'.thisIndex'
p2650
I3
sg15
(lp2651
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2652
S'space'
p2653
asg95
I3
sa(dp2654
g16
(lp2655
S'k'
asg18
S'N'
sS'.thisRepN'
p2656
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2657
I4
sS'.thisN'
p2658
I323
sS'.thisIndex'
p2659
I8
sg15
(lp2660
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2661
g16
(lp2662
S'k'
asg18
S'N'
sS'.thisRepN'
p2663
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2664
I5
sS'.thisN'
p2665
I324
sS'.thisIndex'
p2666
I0
sg15
(lp2667
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2668
g16
(lp2669
S'k'
asg18
S'N'
sS'.thisRepN'
p2670
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2671
I6
sS'.thisN'
p2672
I325
sS'.thisIndex'
p2673
I2
sg15
(lp2674
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2675
g16
(lp2676
S'd'
asg18
S'N'
sS'.thisRepN'
p2677
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2678
I7
sS'.thisN'
p2679
I326
sS'.thisIndex'
p2680
I10
sg15
(lp2681
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2682
g16
(lp2683
S'd'
asg18
S'N'
sS'.thisRepN'
p2684
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2685
I8
sS'.thisN'
p2686
I327
sS'.thisIndex'
p2687
I7
sg15
(lp2688
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2689
g16
(lp2690
S'k'
asg18
S'Y'
sS'.thisRepN'
p2691
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2692
I9
sS'.thisN'
p2693
I328
sS'.thisIndex'
p2694
I1
sg15
(lp2695
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2696
S'space'
p2697
asg95
I1
sa(dp2698
g16
(lp2699
S'k'
asg18
S'Y'
sS'.thisRepN'
p2700
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2701
I10
sS'.thisN'
p2702
I329
sS'.thisIndex'
p2703
I6
sg15
(lp2704
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2705
S'space'
p2706
asg95
I6
sa(dp2707
g16
(lp2708
S'k'
asg18
S'N'
sS'.thisRepN'
p2709
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2710
I0
sS'.thisN'
p2711
I330
sS'.thisIndex'
p2712
I5
sg15
(lp2713
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2714
g16
(lp2715
S'd'
asg18
S'N'
sS'.thisRepN'
p2716
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2717
I1
sS'.thisN'
p2718
I331
sS'.thisIndex'
p2719
I9
sg15
(lp2720
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2721
g16
(lp2722
S'k'
asg18
S'Y'
sS'.thisRepN'
p2723
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2724
I2
sS'.thisN'
p2725
I332
sS'.thisIndex'
p2726
I8
sg15
(lp2727
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2728
S'space'
p2729
asg95
I8
sa(dp2730
g16
(lp2731
S'k'
asg18
S'Y'
sS'.thisRepN'
p2732
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2733
I3
sS'.thisN'
p2734
I333
sS'.thisIndex'
p2735
I3
sg15
(lp2736
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2737
S'space'
p2738
asg95
I3
sa(dp2739
g16
(lp2740
S'd'
asg18
S'N'
sS'.thisRepN'
p2741
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2742
I4
sS'.thisN'
p2743
I334
sS'.thisIndex'
p2744
I0
sg15
(lp2745
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2746
g16
(lp2747
S'd'
asg18
S'N'
sS'.thisRepN'
p2748
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2749
I5
sS'.thisN'
p2750
I335
sS'.thisIndex'
p2751
I1
sg15
(lp2752
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2753
g16
(lp2754
S'd'
asg18
S'N'
sS'.thisRepN'
p2755
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2756
I6
sS'.thisN'
p2757
I336
sS'.thisIndex'
p2758
I4
sg15
(lp2759
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2760
g16
(lp2761
S'k'
asg18
S'Y'
sS'.thisRepN'
p2762
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2763
I7
sS'.thisN'
p2764
I337
sS'.thisIndex'
p2765
I1
sg15
(lp2766
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2767
S'space'
p2768
asg95
I1
sa(dp2769
g16
(lp2770
S'k'
asg18
S'N'
sS'.thisRepN'
p2771
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2772
I8
sS'.thisN'
p2773
I338
sS'.thisIndex'
p2774
I10
sg15
(lp2775
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2776
S'space'
p2777
asg95
I10
sa(dp2778
g16
(lp2779
S'd'
asg18
S'Y'
sS'.thisRepN'
p2780
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2781
I9
sS'.thisN'
p2782
I339
sS'.thisIndex'
p2783
I7
sg15
(lp2784
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2785
S'space'
p2786
asg95
I7
sa(dp2787
g16
(lp2788
S'k'
asg18
S'Y'
sS'.thisRepN'
p2789
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2790
I10
sS'.thisN'
p2791
I340
sS'.thisIndex'
p2792
I9
sg15
(lp2793
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2794
S'space'
p2795
asg95
I9
sa(dp2796
g16
(lp2797
S'd'
asg18
S'N'
sS'.thisRepN'
p2798
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2799
I0
sS'.thisN'
p2800
I341
sS'.thisIndex'
p2801
I2
sg15
(lp2802
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2803
g16
(lp2804
S'k'
asg18
S'Y'
sS'.thisRepN'
p2805
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2806
I1
sS'.thisN'
p2807
I342
sS'.thisIndex'
p2808
I5
sg15
(lp2809
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2810
S'space'
p2811
asg95
I5
sa(dp2812
g16
(lp2813
S'd'
asg18
S'Y'
sS'.thisRepN'
p2814
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2815
I2
sS'.thisN'
p2816
I343
sS'.thisIndex'
p2817
I4
sg15
(lp2818
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2819
S'space'
p2820
asg95
I4
sa(dp2821
g16
(lp2822
S'd'
asg18
S'N'
sS'.thisRepN'
p2823
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2824
I3
sS'.thisN'
p2825
I344
sS'.thisIndex'
p2826
I10
sg15
(lp2827
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2828
g16
(lp2829
S'd'
asg18
S'N'
sS'.thisRepN'
p2830
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2831
I4
sS'.thisN'
p2832
I345
sS'.thisIndex'
p2833
I5
sg15
(lp2834
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2835
g16
(lp2836
S'd'
asg18
S'Y'
sS'.thisRepN'
p2837
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2838
I5
sS'.thisN'
p2839
I346
sS'.thisIndex'
p2840
I8
sg15
(lp2841
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2842
S'space'
p2843
asg95
I8
sa(dp2844
g16
(lp2845
S'k'
asg18
S'N'
sS'.thisRepN'
p2846
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2847
I6
sS'.thisN'
p2848
I347
sS'.thisIndex'
p2849
I4
sg15
(lp2850
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2851
g16
(lp2852
S'd'
asg18
S'N'
sS'.thisRepN'
p2853
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2854
I7
sS'.thisN'
p2855
I348
sS'.thisIndex'
p2856
I0
sg15
(lp2857
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I0
sa(dp2858
g16
(lp2859
S'd'
asg18
S'N'
sg22
I43
sS'.thisN'
p2860
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2861
I8
sS'.thisRepN'
p2862
I31
sg21
I41
sS'.thisIndex'
p2863
I9
sg23
I22
sg15
(lp2864
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2865
g16
(lp2866
S'k'
asg95
I1
sS'.thisRepN'
p2867
I31
sg30
VF
sg31
g32
sS'.thisTrialN'
p2868
I9
sS'.thisN'
p2869
I350
sS'.thisIndex'
p2870
I1
sg15
(lp2871
S'k'
asg17
S'Y'
sg14
I8
sa(dp2872
g16
(lp2873
S'k'
asg95
I9
sS'.thisRepN'
p2874
I31
sg30
VF
sg31
g32
sS'.thisTrialN'
p2875
I10
sS'.thisN'
p2876
I351
sS'.thisIndex'
p2877
I9
sg15
(lp2878
S'd'
asg17
S'N'
sg14
I8
sa(dp2879
g16
(lp2880
S'd'
asg18
S'Y'
sS'.thisRepN'
p2881
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2882
I0
sS'.thisN'
p2883
I352
sS'.thisIndex'
p2884
I2
sg15
(lp2885
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2886
S'space'
p2887
asg95
I2
sa(dp2888
g16
(lp2889
S'k'
asg18
S'N'
sS'.thisRepN'
p2890
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2891
I1
sS'.thisN'
p2892
I353
sS'.thisIndex'
p2893
I4
sg15
(lp2894
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2895
g16
(lp2896
S'd'
asg18
S'Y'
sS'.thisRepN'
p2897
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2898
I2
sS'.thisN'
p2899
I354
sS'.thisIndex'
p2900
I10
sg15
(lp2901
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2902
S'space'
p2903
asg95
I10
sa(dp2904
g16
(lp2905
S'd'
asg18
S'Y'
sS'.thisRepN'
p2906
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2907
I3
sS'.thisN'
p2908
I355
sS'.thisIndex'
p2909
I5
sg15
(lp2910
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2911
S'space'
p2912
asg95
I5
sa(dp2913
g16
(lp2914
S'k'
asg18
S'Y'
sS'.thisRepN'
p2915
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2916
I4
sS'.thisN'
p2917
I356
sS'.thisIndex'
p2918
I1
sg15
(lp2919
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2920
S'space'
p2921
asg95
I1
sa(dp2922
g16
(lp2923
S'd'
asg18
S'Y'
sS'.thisRepN'
p2924
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2925
I5
sS'.thisN'
p2926
I357
sS'.thisIndex'
p2927
I5
sg15
(lp2928
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2929
S'space'
p2930
asg95
I5
sa(dp2931
g16
(lp2932
S'd'
asg18
S'N'
sS'.thisRepN'
p2933
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2934
I6
sS'.thisN'
p2935
I358
sS'.thisIndex'
p2936
I1
sg15
(lp2937
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp2938
g16
(lp2939
S'k'
asg18
S'N'
sS'.thisRepN'
p2940
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2941
I7
sS'.thisN'
p2942
I359
sS'.thisIndex'
p2943
I6
sg15
(lp2944
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2945
S'space'
p2946
asg95
I6
sa(dp2947
g16
(lp2948
S'd'
asg18
S'N'
sS'.thisRepN'
p2949
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2950
I8
sS'.thisN'
p2951
I360
sS'.thisIndex'
p2952
I0
sg15
(lp2953
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2954
g16
(lp2955
S'd'
asg18
S'Y'
sS'.thisRepN'
p2956
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2957
I9
sS'.thisN'
p2958
I361
sS'.thisIndex'
p2959
I6
sg15
(lp2960
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2961
S'space'
p2962
asg95
I6
sa(dp2963
g16
(lp2964
S'd'
asg18
S'Y'
sS'.thisRepN'
p2965
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2966
I10
sS'.thisN'
p2967
I362
sS'.thisIndex'
p2968
I8
sg15
(lp2969
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2970
g16
(lp2971
S'k'
asg18
S'N'
sS'.thisRepN'
p2972
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2973
I0
sS'.thisN'
p2974
I363
sS'.thisIndex'
p2975
I3
sg15
(lp2976
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp2977
g16
(lp2978
S'k'
asg18
S'Y'
sS'.thisRepN'
p2979
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2980
I1
sS'.thisN'
p2981
I364
sS'.thisIndex'
p2982
I2
sg15
(lp2983
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2984
S'space'
p2985
asg95
I2
sa(dp2986
g16
(lp2987
S'k'
asg18
S'Y'
sS'.thisRepN'
p2988
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2989
I2
sS'.thisN'
p2990
I365
sS'.thisIndex'
p2991
I7
sg15
(lp2992
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2993
S'space'
p2994
asg95
I7
sa(dp2995
g16
(lp2996
S'd'
asg18
S'Y'
sS'.thisRepN'
p2997
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2998
I3
sS'.thisN'
p2999
I366
sS'.thisIndex'
p3000
I5
sg15
(lp3001
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3002
S'space'
p3003
asg95
I5
sa(dp3004
g16
(lp3005
S'd'
asg18
S'Y'
sS'.thisRepN'
p3006
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3007
I4
sS'.thisN'
p3008
I367
sS'.thisIndex'
p3009
I5
sg15
(lp3010
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3011
S'space'
p3012
asg95
I5
sa(dp3013
g16
(lp3014
S'k'
asg18
S'Y'
sS'.thisRepN'
p3015
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3016
I5
sS'.thisN'
p3017
I368
sS'.thisIndex'
p3018
I3
sg15
(lp3019
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3020
S'space'
p3021
asg95
I3
sa(dp3022
g16
(lp3023
S'd'
asg18
S'N'
sS'.thisRepN'
p3024
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3025
I6
sS'.thisN'
p3026
I369
sS'.thisIndex'
p3027
I7
sg15
(lp3028
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3029
g16
(lp3030
S'k'
asg18
S'Y'
sS'.thisRepN'
p3031
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3032
I7
sS'.thisN'
p3033
I370
sS'.thisIndex'
p3034
I1
sg15
(lp3035
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3036
S'space'
p3037
asg95
I1
sa(dp3038
g16
(lp3039
S'd'
asg18
S'N'
sS'.thisRepN'
p3040
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3041
I8
sS'.thisN'
p3042
I371
sS'.thisIndex'
p3043
I3
sg15
(lp3044
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3045
g16
(lp3046
S'd'
asg18
S'N'
sS'.thisRepN'
p3047
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3048
I9
sS'.thisN'
p3049
I372
sS'.thisIndex'
p3050
I5
sg15
(lp3051
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I5
sa(dp3052
g16
(lp3053
S'd'
asg18
S'N'
sS'.thisRepN'
p3054
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3055
I10
sS'.thisN'
p3056
I373
sS'.thisIndex'
p3057
I3
sg15
(lp3058
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3059
g16
(lp3060
S'k'
asg18
S'Y'
sS'.thisRepN'
p3061
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3062
I0
sS'.thisN'
p3063
I374
sS'.thisIndex'
p3064
I9
sg15
(lp3065
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3066
S'space'
p3067
asg95
I9
sa(dp3068
g16
(lp3069
S'k'
asg18
S'Y'
sS'.thisRepN'
p3070
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3071
I1
sS'.thisN'
p3072
I375
sS'.thisIndex'
p3073
I9
sg15
(lp3074
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3075
S'space'
p3076
asg95
I9
sa(dp3077
g16
(lp3078
S'd'
asg18
S'Y'
sS'.thisRepN'
p3079
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3080
I2
sS'.thisN'
p3081
I376
sS'.thisIndex'
p3082
I6
sg15
(lp3083
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3084
S'space'
p3085
asg95
I6
sa(dp3086
g16
(lp3087
S'd'
asg18
S'Y'
sS'.thisRepN'
p3088
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3089
I3
sS'.thisN'
p3090
I377
sS'.thisIndex'
p3091
I0
sg15
(lp3092
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3093
S'space'
p3094
asg95
I0
sa(dp3095
g16
(lp3096
S'd'
asg18
S'N'
sS'.thisRepN'
p3097
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3098
I4
sS'.thisN'
p3099
I378
sS'.thisIndex'
p3100
I4
sg15
(lp3101
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp3102
g16
(lp3103
S'd'
asg18
S'N'
sS'.thisRepN'
p3104
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3105
I5
sS'.thisN'
p3106
I379
sS'.thisIndex'
p3107
I10
sg15
(lp3108
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I10
sa(dp3109
g16
(lp3110
S'k'
asg18
S'N'
sS'.thisRepN'
p3111
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3112
I6
sS'.thisN'
p3113
I380
sS'.thisIndex'
p3114
I5
sg15
(lp3115
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3116
g16
(lp3117
S'k'
asg18
S'Y'
sS'.thisRepN'
p3118
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3119
I7
sS'.thisN'
p3120
I381
sS'.thisIndex'
p3121
I2
sg15
(lp3122
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3123
S'space'
p3124
asg95
I2
sa(dp3125
g16
(lp3126
S'k'
asg18
S'N'
sS'.thisRepN'
p3127
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3128
I8
sS'.thisN'
p3129
I382
sS'.thisIndex'
p3130
I7
sg15
(lp3131
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3132
g16
(lp3133
S'd'
asg18
S'N'
sS'.thisRepN'
p3134
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3135
I9
sS'.thisN'
p3136
I383
sS'.thisIndex'
p3137
I7
sg15
(lp3138
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3139
S'space'
p3140
asg95
I7
sa(dp3141
g16
(lp3142
S'd'
asg18
S'N'
sS'.thisRepN'
p3143
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3144
I10
sS'.thisN'
p3145
I384
sS'.thisIndex'
p3146
I8
sg15
(lp3147
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3148
g16
(lp3149
S'k'
asg18
S'N'
sS'.thisRepN'
p3150
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3151
I0
sS'.thisN'
p3152
I385
sS'.thisIndex'
p3153
I0
sg15
(lp3154
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3155
g16
(lp3156
S'k'
asg18
S'N'
sS'.thisRepN'
p3157
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3158
I1
sS'.thisN'
p3159
I386
sS'.thisIndex'
p3160
I1
sg15
(lp3161
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3162
g16
(lp3163
S'k'
asg18
S'Y'
sS'.thisRepN'
p3164
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3165
I2
sS'.thisN'
p3166
I387
sS'.thisIndex'
p3167
I4
sg15
(lp3168
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp3169
g16
(lp3170
S'k'
asg18
S'Y'
sS'.thisRepN'
p3171
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3172
I3
sS'.thisN'
p3173
I388
sS'.thisIndex'
p3174
I2
sg15
(lp3175
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3176
S'space'
p3177
asg95
I2
sa(dp3178
g16
(lp3179
S'd'
asg18
S'N'
sS'.thisRepN'
p3180
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3181
I4
sS'.thisN'
p3182
I389
sS'.thisIndex'
p3183
I8
sg15
(lp3184
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3185
g16
(lp3186
S'k'
asg18
S'N'
sS'.thisRepN'
p3187
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3188
I5
sS'.thisN'
p3189
I390
sS'.thisIndex'
p3190
I7
sg15
(lp3191
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3192
g16
(lp3193
S'd'
asg18
S'N'
sS'.thisRepN'
p3194
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3195
I6
sS'.thisN'
p3196
I391
sS'.thisIndex'
p3197
I3
sg15
(lp3198
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3199
g16
(lp3200
S'k'
asg18
S'N'
sS'.thisRepN'
p3201
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3202
I7
sS'.thisN'
p3203
I392
sS'.thisIndex'
p3204
I9
sg15
(lp3205
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3206
g16
(lp3207
S'k'
asg18
S'Y'
sS'.thisRepN'
p3208
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3209
I8
sS'.thisN'
p3210
I393
sS'.thisIndex'
p3211
I1
sg15
(lp3212
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3213
S'space'
p3214
asg95
I1
sa(dp3215
g16
(lp3216
S'd'
asg18
S'Y'
sS'.thisRepN'
p3217
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3218
I9
sS'.thisN'
p3219
I394
sS'.thisIndex'
p3220
I3
sg15
(lp3221
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3222
S'space'
p3223
asg95
I3
sa(dp3224
g16
(lp3225
S'd'
asg18
S'N'
sS'.thisRepN'
p3226
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3227
I10
sS'.thisN'
p3228
I395
sS'.thisIndex'
p3229
I3
sg15
(lp3230
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I3
sa(dp3231
g16
(lp3232
S'k'
asg18
S'N'
sS'.thisRepN'
p3233
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3234
I0
sS'.thisN'
p3235
I396
sS'.thisIndex'
p3236
I7
sg15
(lp3237
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3238
S'space'
p3239
asg95
I7
sa(dp3240
g16
(lp3241
S'k'
asg18
S'N'
sS'.thisRepN'
p3242
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3243
I1
sS'.thisN'
p3244
I397
sS'.thisIndex'
p3245
I9
sg15
(lp3246
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3247
S'space'
p3248
asg95
I9
sa(dp3249
g16
(lp3250
S'k'
asg18
S'N'
sS'.thisRepN'
p3251
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3252
I2
sS'.thisN'
p3253
I398
sS'.thisIndex'
p3254
I8
sg15
(lp3255
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3256
g16
(lp3257
S'd'
asg18
S'Y'
sg22
I42
sS'.thisN'
p3258
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3259
I3
sS'.thisRepN'
p3260
I36
sg21
I41
sS'.thisIndex'
p3261
I0
sg23
I23
sg15
(lp3262
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3263
S'space'
p3264
asg95
I0
sa(dp3265
g16
(lp3266
S'k'
asg95
I4
sS'.thisRepN'
p3267
I36
sg30
VF
sg31
g32
sS'.thisTrialN'
p3268
I4
sS'.thisN'
p3269
I400
sS'.thisIndex'
p3270
I4
sg15
(lp3271
S'k'
asg17
S'Y'
sg14
I9
sa(dp3272
g16
(lp3273
S'd'
asg95
I2
sS'.thisRepN'
p3274
I36
sg30
VF
sg31
g32
sS'.thisTrialN'
p3275
I5
sS'.thisN'
p3276
I401
sS'.thisIndex'
p3277
I2
sg15
(lp3278
S'd'
asg17
S'Y'
sg14
I9
sa(dp3279
g16
(lp3280
S'k'
asg18
S'Y'
sS'.thisRepN'
p3281
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3282
I6
sS'.thisN'
p3283
I402
sS'.thisIndex'
p3284
I8
sg15
(lp3285
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3286
S'space'
p3287
asg95
I8
sa(dp3288
g16
(lp3289
S'd'
asg18
S'Y'
sS'.thisRepN'
p3290
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3291
I7
sS'.thisN'
p3292
I403
sS'.thisIndex'
p3293
I2
sg15
(lp3294
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3295
S'space'
p3296
asg95
I2
sa(dp3297
g16
(lp3298
S'k'
asg18
S'Y'
sS'.thisRepN'
p3299
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3300
I8
sS'.thisN'
p3301
I404
sS'.thisIndex'
p3302
I0
sg15
(lp3303
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3304
S'space'
p3305
asg95
I0
sa(dp3306
g16
(lp3307
S'k'
asg18
S'Y'
sS'.thisRepN'
p3308
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3309
I9
sS'.thisN'
p3310
I405
sS'.thisIndex'
p3311
I7
sg15
(lp3312
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3313
S'space'
p3314
asg95
I7
sa(dp3315
g16
(lp3316
S'k'
asg18
S'N'
sS'.thisRepN'
p3317
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3318
I10
sS'.thisN'
p3319
I406
sS'.thisIndex'
p3320
I9
sg15
(lp3321
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3322
g16
(lp3323
S'k'
asg18
S'Y'
sS'.thisRepN'
p3324
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3325
I0
sS'.thisN'
p3326
I407
sS'.thisIndex'
p3327
I7
sg15
(lp3328
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3329
g16
(lp3330
S'k'
asg18
S'Y'
sS'.thisRepN'
p3331
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3332
I1
sS'.thisN'
p3333
I408
sS'.thisIndex'
p3334
I0
sg15
(lp3335
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3336
S'space'
p3337
asg95
I0
sa(dp3338
g16
(lp3339
S'd'
asg18
S'N'
sS'.thisRepN'
p3340
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3341
I2
sS'.thisN'
p3342
I409
sS'.thisIndex'
p3343
I4
sg15
(lp3344
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3345
g16
(lp3346
S'k'
asg18
S'N'
sS'.thisRepN'
p3347
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3348
I3
sS'.thisN'
p3349
I410
sS'.thisIndex'
p3350
I6
sg15
(lp3351
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3352
g16
(lp3353
S'k'
asg18
S'Y'
sS'.thisRepN'
p3354
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3355
I4
sS'.thisN'
p3356
I411
sS'.thisIndex'
p3357
I3
sg15
(lp3358
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3359
S'space'
p3360
asg95
I3
sa(dp3361
g16
(lp3362
S'k'
asg18
S'Y'
sS'.thisRepN'
p3363
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3364
I5
sS'.thisN'
p3365
I412
sS'.thisIndex'
p3366
I4
sg15
(lp3367
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3368
S'space'
p3369
asg95
I4
sa(dp3370
g16
(lp3371
S'k'
asg18
S'Y'
sS'.thisRepN'
p3372
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3373
I6
sS'.thisN'
p3374
I413
sS'.thisIndex'
p3375
I2
sg15
(lp3376
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3377
S'space'
p3378
asg95
I2
sa(dp3379
g16
(lp3380
S'd'
asg18
S'Y'
sS'.thisRepN'
p3381
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3382
I7
sS'.thisN'
p3383
I414
sS'.thisIndex'
p3384
I0
sg15
(lp3385
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3386
S'space'
p3387
asg95
I0
sa(dp3388
g16
(lp3389
S'd'
asg18
S'N'
sS'.thisRepN'
p3390
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3391
I8
sS'.thisN'
p3392
I415
sS'.thisIndex'
p3393
I7
sg15
(lp3394
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3395
g16
(lp3396
S'k'
asg18
S'Y'
sS'.thisRepN'
p3397
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3398
I9
sS'.thisN'
p3399
I416
sS'.thisIndex'
p3400
I10
sg15
(lp3401
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3402
S'space'
p3403
asg95
I10
sa(dp3404
g16
(lp3405
S'k'
asg18
S'N'
sS'.thisRepN'
p3406
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3407
I10
sS'.thisN'
p3408
I417
sS'.thisIndex'
p3409
I5
sg15
(lp3410
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I5
sa(dp3411
g16
(lp3412
S'k'
asg18
S'N'
sS'.thisRepN'
p3413
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3414
I0
sS'.thisN'
p3415
I418
sS'.thisIndex'
p3416
I10
sg15
(lp3417
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3418
g16
(lp3419
S'k'
asg18
S'Y'
sS'.thisRepN'
p3420
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3421
I1
sS'.thisN'
p3422
I419
sS'.thisIndex'
p3423
I2
sg15
(lp3424
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3425
S'space'
p3426
asg95
I2
sa(dp3427
g16
(lp3428
S'd'
asg18
S'Y'
sS'.thisRepN'
p3429
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3430
I2
sS'.thisN'
p3431
I420
sS'.thisIndex'
p3432
I7
sg15
(lp3433
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3434
S'space'
p3435
asg95
I7
sa(dp3436
g16
(lp3437
S'k'
asg18
S'N'
sS'.thisRepN'
p3438
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3439
I3
sS'.thisN'
p3440
I421
sS'.thisIndex'
p3441
I4
sg15
(lp3442
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3443
g16
(lp3444
S'd'
asg18
S'Y'
sS'.thisRepN'
p3445
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3446
I4
sS'.thisN'
p3447
I422
sS'.thisIndex'
p3448
I7
sg15
(lp3449
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3450
S'space'
p3451
asg95
I7
sa(dp3452
g16
(lp3453
S'd'
asg18
S'N'
sS'.thisRepN'
p3454
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3455
I5
sS'.thisN'
p3456
I423
sS'.thisIndex'
p3457
I5
sg15
(lp3458
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3459
g16
(lp3460
S'd'
asg18
S'Y'
sS'.thisRepN'
p3461
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3462
I6
sS'.thisN'
p3463
I424
sS'.thisIndex'
p3464
I9
sg15
(lp3465
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3466
S'space'
p3467
asg95
I9
sa(dp3468
g16
(lp3469
S'd'
asg18
S'N'
sS'.thisRepN'
p3470
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3471
I7
sS'.thisN'
p3472
I425
sS'.thisIndex'
p3473
I9
sg15
(lp3474
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3475
g16
(lp3476
S'd'
asg18
S'N'
sS'.thisRepN'
p3477
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3478
I8
sS'.thisN'
p3479
I426
sS'.thisIndex'
p3480
I0
sg15
(lp3481
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3482
g16
(lp3483
S'd'
asg18
S'Y'
sS'.thisRepN'
p3484
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3485
I9
sS'.thisN'
p3486
I427
sS'.thisIndex'
p3487
I3
sg15
(lp3488
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3489
S'space'
p3490
asg95
I3
sa(dp3491
g16
(lp3492
S'd'
asg18
S'N'
sS'.thisRepN'
p3493
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3494
I10
sS'.thisN'
p3495
I428
sS'.thisIndex'
p3496
I3
sg15
(lp3497
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3498
g16
(lp3499
S'k'
asg18
S'N'
sS'.thisRepN'
p3500
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3501
I0
sS'.thisN'
p3502
I429
sS'.thisIndex'
p3503
I10
sg15
(lp3504
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3505
g16
(lp3506
S'k'
asg18
S'N'
sS'.thisRepN'
p3507
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3508
I1
sS'.thisN'
p3509
I430
sS'.thisIndex'
p3510
I6
sg15
(lp3511
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3512
g16
(lp3513
S'k'
asg18
S'Y'
sS'.thisRepN'
p3514
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3515
I2
sS'.thisN'
p3516
I431
sS'.thisIndex'
p3517
I10
sg15
(lp3518
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3519
S'space'
p3520
asg95
I10
sa(dp3521
g16
(lp3522
S'k'
asg18
S'Y'
sS'.thisRepN'
p3523
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3524
I3
sS'.thisN'
p3525
I432
sS'.thisIndex'
p3526
I5
sg15
(lp3527
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3528
S'space'
p3529
asg95
I5
sa(dp3530
g16
(lp3531
S'k'
asg18
S'N'
sS'.thisRepN'
p3532
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3533
I4
sS'.thisN'
p3534
I433
sS'.thisIndex'
p3535
I3
sg15
(lp3536
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3537
g16
(lp3538
S'k'
asg18
S'N'
sS'.thisRepN'
p3539
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3540
I5
sS'.thisN'
p3541
I434
sS'.thisIndex'
p3542
I9
sg15
(lp3543
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3544
g16
(lp3545
S'd'
asg18
S'Y'
sS'.thisRepN'
p3546
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3547
I6
sS'.thisN'
p3548
I435
sS'.thisIndex'
p3549
I9
sg15
(lp3550
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3551
S'space'
p3552
asg95
I9
sa(dp3553
g16
(lp3554
S'd'
asg18
S'N'
sS'.thisRepN'
p3555
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3556
I7
sS'.thisN'
p3557
I436
sS'.thisIndex'
p3558
I7
sg15
(lp3559
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3560
g16
(lp3561
S'k'
asg18
S'N'
sS'.thisRepN'
p3562
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3563
I8
sS'.thisN'
p3564
I437
sS'.thisIndex'
p3565
I1
sg15
(lp3566
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3567
g16
(lp3568
S'd'
asg18
S'N'
sS'.thisRepN'
p3569
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3570
I9
sS'.thisN'
p3571
I438
sS'.thisIndex'
p3572
I10
sg15
(lp3573
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3574
g16
(lp3575
S'd'
asg18
S'Y'
sS'.thisRepN'
p3576
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3577
I10
sS'.thisN'
p3578
I439
sS'.thisIndex'
p3579
I3
sg15
(lp3580
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3581
S'space'
p3582
asg95
I3
sa(dp3583
g16
(lp3584
S'd'
asg18
S'N'
sS'.thisRepN'
p3585
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3586
I0
sS'.thisN'
p3587
I440
sS'.thisIndex'
p3588
I10
sg15
(lp3589
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I10
sa(dp3590
g16
(lp3591
S'k'
asg18
S'Y'
sS'.thisRepN'
p3592
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3593
I1
sS'.thisN'
p3594
I441
sS'.thisIndex'
p3595
I2
sg15
(lp3596
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3597
S'space'
p3598
asg95
I2
sa(dp3599
g16
(lp3600
S'k'
asg18
S'N'
sS'.thisRepN'
p3601
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3602
I2
sS'.thisN'
p3603
I442
sS'.thisIndex'
p3604
I4
sg15
(lp3605
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3606
g16
(lp3607
S'd'
asg18
S'Y'
sS'.thisRepN'
p3608
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3609
I3
sS'.thisN'
p3610
I443
sS'.thisIndex'
p3611
I6
sg15
(lp3612
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3613
g16
(lp3614
S'k'
asg18
S'N'
sS'.thisRepN'
p3615
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3616
I4
sS'.thisN'
p3617
I444
sS'.thisIndex'
p3618
I0
sg15
(lp3619
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3620
g16
(lp3621
S'd'
asg18
S'N'
sS'.thisRepN'
p3622
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3623
I5
sS'.thisN'
p3624
I445
sS'.thisIndex'
p3625
I5
sg15
(lp3626
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3627
g16
(lp3628
S'k'
asg18
S'N'
sS'.thisRepN'
p3629
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3630
I6
sS'.thisN'
p3631
I446
sS'.thisIndex'
p3632
I9
sg15
(lp3633
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3634
g16
(lp3635
S'd'
asg18
S'Y'
sS'.thisRepN'
p3636
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3637
I7
sS'.thisN'
p3638
I447
sS'.thisIndex'
p3639
I2
sg15
(lp3640
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3641
S'space'
p3642
asg95
I2
sa(dp3643
g16
(lp3644
S'd'
asg18
S'Y'
sS'.thisRepN'
p3645
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3646
I8
sS'.thisN'
p3647
I448
sS'.thisIndex'
p3648
I1
sg15
(lp3649
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3650
S'space'
p3651
asg95
I1
sa(dp3652
g16
(lp3653
S'k'
asg18
S'Y'
sg22
I46
sS'.thisN'
p3654
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3655
I9
sS'.thisRepN'
p3656
I40
sg21
I44
sS'.thisIndex'
p3657
I9
sg23
I25
sg15
(lp3658
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3659
S'space'
p3660
asg95
I9
sa(dp3661
g16
(lp3662
S'd'
asg95
I6
sS'.thisRepN'
p3663
I40
sg30
VF
sg31
g32
sS'.thisTrialN'
p3664
I10
sS'.thisN'
p3665
I450
sS'.thisIndex'
p3666
I6
sg15
(lp3667
S'd'
asg17
S'Y'
sg14
I10
sa(dp3668
g16
(lp3669
S'd'
asg95
I0
sS'.thisRepN'
p3670
I41
sg30
VF
sg31
g32
sS'.thisTrialN'
p3671
I0
sS'.thisN'
p3672
I451
sS'.thisIndex'
p3673
I0
sg15
(lp3674
S'd'
asg17
S'Y'
sg14
I10
sa(dp3675
g16
(lp3676
S'k'
asg18
S'N'
sS'.thisRepN'
p3677
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3678
I1
sS'.thisN'
p3679
I452
sS'.thisIndex'
p3680
I8
sg15
(lp3681
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3682
g16
(lp3683
S'd'
asg18
S'Y'
sS'.thisRepN'
p3684
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3685
I2
sS'.thisN'
p3686
I453
sS'.thisIndex'
p3687
I9
sg15
(lp3688
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3689
S'space'
p3690
asg95
I9
sa(dp3691
g16
(lp3692
S'k'
asg18
S'N'
sS'.thisRepN'
p3693
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3694
I3
sS'.thisN'
p3695
I454
sS'.thisIndex'
p3696
I1
sg15
(lp3697
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3698
g16
(lp3699
S'd'
asg18
S'N'
sS'.thisRepN'
p3700
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3701
I4
sS'.thisN'
p3702
I455
sS'.thisIndex'
p3703
I6
sg15
(lp3704
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3705
g16
(lp3706
S'k'
asg18
S'N'
sS'.thisRepN'
p3707
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3708
I5
sS'.thisN'
p3709
I456
sS'.thisIndex'
p3710
I2
sg15
(lp3711
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I2
sa(dp3712
g16
(lp3713
S'd'
asg18
S'N'
sS'.thisRepN'
p3714
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3715
I6
sS'.thisN'
p3716
I457
sS'.thisIndex'
p3717
I7
sg15
(lp3718
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3719
g16
(lp3720
S'k'
asg18
S'Y'
sS'.thisRepN'
p3721
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3722
I7
sS'.thisN'
p3723
I458
sS'.thisIndex'
p3724
I4
sg15
(lp3725
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3726
S'space'
p3727
asg95
I4
sa(dp3728
g16
(lp3729
S'd'
asg18
S'N'
sS'.thisRepN'
p3730
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3731
I8
sS'.thisN'
p3732
I459
sS'.thisIndex'
p3733
I7
sg15
(lp3734
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3735
g16
(lp3736
S'k'
asg18
S'Y'
sS'.thisRepN'
p3737
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3738
I9
sS'.thisN'
p3739
I460
sS'.thisIndex'
p3740
I9
sg15
(lp3741
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3742
S'd'
asg95
I9
sa(dp3743
g16
(lp3744
S'k'
asg18
S'N'
sS'.thisRepN'
p3745
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3746
I10
sS'.thisN'
p3747
I461
sS'.thisIndex'
p3748
I2
sg15
(lp3749
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3750
S'space'
p3751
asg95
I2
sa(dp3752
g16
(lp3753
S'd'
asg18
S'Y'
sS'.thisRepN'
p3754
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3755
I0
sS'.thisN'
p3756
I462
sS'.thisIndex'
p3757
I7
sg15
(lp3758
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3759
S'space'
p3760
asg95
I7
sa(dp3761
g16
(lp3762
S'k'
asg18
S'Y'
sS'.thisRepN'
p3763
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3764
I1
sS'.thisN'
p3765
I463
sS'.thisIndex'
p3766
I7
sg15
(lp3767
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3768
S'space'
p3769
asg95
I7
sa(dp3770
g16
(lp3771
S'd'
asg18
S'Y'
sS'.thisRepN'
p3772
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3773
I2
sS'.thisN'
p3774
I464
sS'.thisIndex'
p3775
I7
sg15
(lp3776
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3777
S'space'
p3778
asg95
I7
sa(dp3779
g16
(lp3780
S'k'
asg18
S'N'
sS'.thisRepN'
p3781
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3782
I3
sS'.thisN'
p3783
I465
sS'.thisIndex'
p3784
I9
sg15
(lp3785
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3786
g16
(lp3787
S'k'
asg18
S'Y'
sS'.thisRepN'
p3788
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3789
I4
sS'.thisN'
p3790
I466
sS'.thisIndex'
p3791
I6
sg15
(lp3792
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3793
S'space'
p3794
asg95
I6
sa(dp3795
g16
(lp3796
S'd'
asg18
S'Y'
sS'.thisRepN'
p3797
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3798
I5
sS'.thisN'
p3799
I467
sS'.thisIndex'
p3800
I5
sg15
(lp3801
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3802
S'space'
p3803
asg95
I5
sa(dp3804
g16
(lp3805
S'd'
asg18
S'Y'
sS'.thisRepN'
p3806
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3807
I6
sS'.thisN'
p3808
I468
sS'.thisIndex'
p3809
I2
sg15
(lp3810
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3811
S'space'
p3812
asg95
I2
sa(dp3813
g16
(lp3814
S'd'
asg18
S'N'
sS'.thisRepN'
p3815
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3816
I7
sS'.thisN'
p3817
I469
sS'.thisIndex'
p3818
I1
sg15
(lp3819
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3820
g16
(lp3821
S'k'
asg18
S'Y'
sS'.thisRepN'
p3822
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3823
I8
sS'.thisN'
p3824
I470
sS'.thisIndex'
p3825
I7
sg15
(lp3826
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3827
S'space'
p3828
asg95
I7
sa(dp3829
g16
(lp3830
S'k'
asg18
S'Y'
sS'.thisRepN'
p3831
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3832
I9
sS'.thisN'
p3833
I471
sS'.thisIndex'
p3834
I8
sg15
(lp3835
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3836
S'space'
p3837
asg95
I8
sa(dp3838
g16
(lp3839
S'd'
asg18
S'Y'
sS'.thisRepN'
p3840
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3841
I10
sS'.thisN'
p3842
I472
sS'.thisIndex'
p3843
I1
sg15
(lp3844
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3845
S'space'
p3846
asg95
I1
sa(dp3847
g16
(lp3848
S'd'
asg18
S'Y'
sS'.thisRepN'
p3849
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3850
I0
sS'.thisN'
p3851
I473
sS'.thisIndex'
p3852
I10
sg15
(lp3853
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3854
S'space'
p3855
asg95
I10
sa(dp3856
g16
(lp3857
S'd'
asg18
S'N'
sS'.thisRepN'
p3858
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3859
I1
sS'.thisN'
p3860
I474
sS'.thisIndex'
p3861
I9
sg15
(lp3862
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I9
sa(dp3863
g16
(lp3864
S'd'
asg18
S'Y'
sS'.thisRepN'
p3865
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3866
I2
sS'.thisN'
p3867
I475
sS'.thisIndex'
p3868
I10
sg15
(lp3869
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3870
S'space'
p3871
asg95
I10
sa(dp3872
g16
(lp3873
S'k'
asg18
S'Y'
sS'.thisRepN'
p3874
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3875
I3
sS'.thisN'
p3876
I476
sS'.thisIndex'
p3877
I0
sg15
(lp3878
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3879
g16
(lp3880
S'k'
asg18
S'N'
sS'.thisRepN'
p3881
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3882
I4
sS'.thisN'
p3883
I477
sS'.thisIndex'
p3884
I5
sg15
(lp3885
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3886
g16
(lp3887
S'd'
asg18
S'N'
sS'.thisRepN'
p3888
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3889
I5
sS'.thisN'
p3890
I478
sS'.thisIndex'
p3891
I7
sg15
(lp3892
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I7
sa(dp3893
g16
(lp3894
S'd'
asg18
S'N'
sS'.thisRepN'
p3895
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3896
I6
sS'.thisN'
p3897
I479
sS'.thisIndex'
p3898
I0
sg15
(lp3899
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3900
g16
(lp3901
S'd'
asg18
S'Y'
sS'.thisRepN'
p3902
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3903
I7
sS'.thisN'
p3904
I480
sS'.thisIndex'
p3905
I8
sg15
(lp3906
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3907
S'space'
p3908
asg95
I8
sa(dp3909
g16
(lp3910
S'k'
asg18
S'N'
sS'.thisRepN'
p3911
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3912
I8
sS'.thisN'
p3913
I481
sS'.thisIndex'
p3914
I5
sg15
(lp3915
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3916
g16
(lp3917
S'k'
asg18
S'Y'
sS'.thisRepN'
p3918
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3919
I9
sS'.thisN'
p3920
I482
sS'.thisIndex'
p3921
I7
sg15
(lp3922
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3923
S'space'
p3924
asg95
I7
sa(dp3925
g16
(lp3926
S'k'
asg18
S'Y'
sS'.thisRepN'
p3927
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3928
I10
sS'.thisN'
p3929
I483
sS'.thisIndex'
p3930
I4
sg15
(lp3931
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3932
S'space'
p3933
asg95
I4
sa(dp3934
g16
(lp3935
S'd'
asg18
S'Y'
sS'.thisRepN'
p3936
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3937
I0
sS'.thisN'
p3938
I484
sS'.thisIndex'
p3939
I10
sg15
(lp3940
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3941
S'space'
p3942
asg95
I10
sa(dp3943
g16
(lp3944
S'k'
asg18
S'N'
sS'.thisRepN'
p3945
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3946
I1
sS'.thisN'
p3947
I485
sS'.thisIndex'
p3948
I0
sg15
(lp3949
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I0
sa(dp3950
g16
(lp3951
S'd'
asg18
S'Y'
sS'.thisRepN'
p3952
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3953
I2
sS'.thisN'
p3954
I486
sS'.thisIndex'
p3955
I8
sg15
(lp3956
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3957
S'space'
p3958
asg95
I8
sa(dp3959
g16
(lp3960
S'd'
asg18
S'N'
sS'.thisRepN'
p3961
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3962
I3
sS'.thisN'
p3963
I487
sS'.thisIndex'
p3964
I5
sg15
(lp3965
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3966
S'space'
p3967
asg95
I5
sa(dp3968
g16
(lp3969
S'd'
asg18
S'N'
sS'.thisRepN'
p3970
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3971
I4
sS'.thisN'
p3972
I488
sS'.thisIndex'
p3973
I4
sg15
(lp3974
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I4
sa(dp3975
g16
(lp3976
S'k'
asg18
S'N'
sS'.thisRepN'
p3977
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3978
I5
sS'.thisN'
p3979
I489
sS'.thisIndex'
p3980
I10
sg15
(lp3981
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3982
g16
(lp3983
S'd'
asg18
S'Y'
sS'.thisRepN'
p3984
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3985
I6
sS'.thisN'
p3986
I490
sS'.thisIndex'
p3987
I1
sg15
(lp3988
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3989
S'space'
p3990
asg95
I1
sa(dp3991
g16
(lp3992
S'k'
asg18
S'N'
sS'.thisRepN'
p3993
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3994
I7
sS'.thisN'
p3995
I491
sS'.thisIndex'
p3996
I1
sg15
(lp3997
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3998
g16
(lp3999
S'k'
asg18
S'N'
sS'.thisRepN'
p4000
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4001
I8
sS'.thisN'
p4002
I492
sS'.thisIndex'
p4003
I3
sg15
(lp4004
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp4005
g16
(lp4006
S'k'
asg18
S'N'
sS'.thisRepN'
p4007
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4008
I9
sS'.thisN'
p4009
I493
sS'.thisIndex'
p4010
I3
sg15
(lp4011
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4012
S'space'
p4013
asg95
I3
sa(dp4014
g16
(lp4015
S'd'
asg18
S'Y'
sS'.thisRepN'
p4016
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4017
I10
sS'.thisN'
p4018
I494
sS'.thisIndex'
p4019
I3
sg15
(lp4020
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp4021
S'space'
p4022
asg95
I3
sa(dp4023
g16
(lp4024
S'k'
asg18
S'N'
sS'.thisRepN'
p4025
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4026
I0
sS'.thisN'
p4027
I495
sS'.thisIndex'
p4028
I2
sg15
(lp4029
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp4030
g16
(lp4031
S'd'
asg18
S'N'
sS'.thisRepN'
p4032
I45
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4033
I1
sS'.thisN'
p4034
I496
sS'.thisIndex'
p4035
I2
sg15
(lp4036
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4037
S'space'
p4038
asg95
I2
sa(dp4039
g16
(lp4040
S'd'
asg18
S'N'
sS'.thisRepN'
p4041
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4042
I2
sS'.thisN'
p4043
I497
sS'.thisIndex'
p4044
I1
sg15
(lp4045
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp4046
g16
(lp4047
S'k'
asg18
S'N'
sS'.thisRepN'
p4048
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4049
I3
sS'.thisN'
p4050
I498
sS'.thisIndex'
p4051
I8
sg15
(lp4052
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp4053
g16
(lp4054
S'k'
asg18
S'N'
sg22
I42
sS'.thisN'
p4055
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4056
I4
sS'.thisRepN'
p4057
I45
sg21
I40
sS'.thisIndex'
p4058
I2
sg23
I22
sg15
(lp4059
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I2
sa(dp4060
g16
(lp4061
S'd'
asS'.thisIndex'
p4062
I10
sS'.thisRepN'
p4063
I45
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4064
I5
sS'.thisN'
p4065
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4066
S'k'
asg17
S'Y'
sg14
I11
sg95
I10
sa(dp4067
g16
(lp4068
S'd'
asS'.thisIndex'
p4069
I2
sS'.thisRepN'
p4070
I45
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4071
I6
sS'.thisN'
p4072
I501
sg25
S'Y'
sg15
(lp4073
S'd'
asg17
S'N'
sg14
I11
sg95
I2
sa(dp4074
g16
(lp4075
S'd'
asg18
S'N'
sS'.thisRepN'
p4076
I45
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4077
I7
sS'.thisN'
p4078
I502
sg25
S'Y'
sg15
(lp4079
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4080
S'space'
p4081
asg95
I2
sS'.thisIndex'
p4082
I2
sa(dp4083
g16
(lp4084
S'd'
asg18
S'N'
sS'.thisRepN'
p4085
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4086
I8
sS'.thisN'
p4087
I503
sg25
S'Y'
sg15
(lp4088
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4089
I5
sa(dp4090
g16
(lp4091
S'd'
asg18
S'Y'
sS'.thisRepN'
p4092
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4093
I9
sS'.thisN'
p4094
I504
sg25
S'Y'
sg15
(lp4095
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4096
S'space'
p4097
asg95
I9
sS'.thisIndex'
p4098
I9
sa(dp4099
g16
(lp4100
S'd'
asg18
S'Y'
sS'.thisRepN'
p4101
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4102
I10
sS'.thisN'
p4103
I505
sg25
S'Y'
sg15
(lp4104
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4105
S'space'
p4106
asg95
I5
sS'.thisIndex'
p4107
I5
sa(dp4108
g16
(lp4109
S'k'
asg18
S'Y'
sS'.thisRepN'
p4110
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4111
I0
sS'.thisN'
p4112
I506
sg25
S'Y'
sg15
(lp4113
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4114
S'space'
p4115
asg95
I7
sS'.thisIndex'
p4116
I7
sa(dp4117
g16
(lp4118
S'k'
asg18
S'N'
sS'.thisRepN'
p4119
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4120
I1
sS'.thisN'
p4121
I507
sg25
S'Y'
sg15
(lp4122
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4123
I8
sa(dp4124
g16
(lp4125
S'k'
asg18
S'N'
sS'.thisRepN'
p4126
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4127
I2
sS'.thisN'
p4128
I508
sg25
S'Y'
sg15
(lp4129
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4130
I6
sa(dp4131
g16
(lp4132
S'd'
asg18
S'Y'
sS'.thisRepN'
p4133
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4134
I3
sS'.thisN'
p4135
I509
sg25
S'Y'
sg15
(lp4136
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4137
S'space'
p4138
asg95
I9
sS'.thisIndex'
p4139
I9
sa(dp4140
g16
(lp4141
S'k'
asg18
S'Y'
sS'.thisRepN'
p4142
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4143
I4
sS'.thisN'
p4144
I510
sg25
S'Y'
sg15
(lp4145
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4146
S'space'
p4147
asg95
I5
sS'.thisIndex'
p4148
I5
sa(dp4149
g16
(lp4150
S'd'
asg18
S'Y'
sS'.thisRepN'
p4151
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4152
I5
sS'.thisN'
p4153
I511
sg25
S'Y'
sg15
(lp4154
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4155
S'space'
p4156
asg95
I5
sS'.thisIndex'
p4157
I5
sa(dp4158
g16
(lp4159
S'd'
asg18
S'N'
sS'.thisRepN'
p4160
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4161
I6
sS'.thisN'
p4162
I512
sg25
S'Y'
sg15
(lp4163
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4164
I1
sa(dp4165
g16
(lp4166
S'd'
asg18
S'Y'
sS'.thisRepN'
p4167
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4168
I7
sS'.thisN'
p4169
I513
sg25
S'Y'
sg15
(lp4170
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4171
S'space'
p4172
asg95
I4
sS'.thisIndex'
p4173
I4
sa(dp4174
g16
(lp4175
S'd'
asg18
S'Y'
sS'.thisRepN'
p4176
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4177
I8
sS'.thisN'
p4178
I514
sg25
S'Y'
sg15
(lp4179
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4180
I9
sa(dp4181
g16
(lp4182
S'k'
asg18
S'N'
sS'.thisRepN'
p4183
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4184
I9
sS'.thisN'
p4185
I515
sg25
S'Y'
sg15
(lp4186
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4187
I0
sa(dp4188
g16
(lp4189
S'd'
asg18
S'Y'
sS'.thisRepN'
p4190
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4191
I10
sS'.thisN'
p4192
I516
sg25
S'Y'
sg15
(lp4193
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4194
I8
sa(dp4195
g16
(lp4196
S'k'
asg18
S'N'
sS'.thisRepN'
p4197
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4198
I0
sS'.thisN'
p4199
I517
sg25
S'Y'
sg15
(lp4200
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4201
I9
sa(dp4202
g16
(lp4203
S'k'
asg18
S'Y'
sS'.thisRepN'
p4204
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4205
I1
sS'.thisN'
p4206
I518
sg25
S'Y'
sg15
(lp4207
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4208
S'space'
p4209
asg95
I8
sS'.thisIndex'
p4210
I8
sa(dp4211
g16
(lp4212
S'k'
asg18
S'N'
sS'.thisRepN'
p4213
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4214
I2
sS'.thisN'
p4215
I519
sg25
S'Y'
sg15
(lp4216
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4217
I7
sa(dp4218
g16
(lp4219
S'k'
asg18
S'Y'
sS'.thisRepN'
p4220
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4221
I3
sS'.thisN'
p4222
I520
sg25
S'Y'
sg15
(lp4223
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4224
S'space'
p4225
asg95
I6
sS'.thisIndex'
p4226
I6
sa(dp4227
g16
(lp4228
S'k'
asg18
S'N'
sS'.thisRepN'
p4229
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4230
I4
sS'.thisN'
p4231
I521
sg25
S'Y'
sg15
(lp4232
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4233
I2
sa(dp4234
g16
(lp4235
S'd'
asg18
S'Y'
sS'.thisRepN'
p4236
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4237
I5
sS'.thisN'
p4238
I522
sg25
S'Y'
sg15
(lp4239
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4240
I7
sa(dp4241
g16
(lp4242
S'k'
asg18
S'N'
sS'.thisRepN'
p4243
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4244
I6
sS'.thisN'
p4245
I523
sg25
S'Y'
sg15
(lp4246
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4247
I7
sa(dp4248
g16
(lp4249
S'd'
asg18
S'Y'
sS'.thisRepN'
p4250
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4251
I7
sS'.thisN'
p4252
I524
sg25
S'Y'
sg15
(lp4253
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4254
S'space'
p4255
asg95
I0
sS'.thisIndex'
p4256
I0
sa(dp4257
g16
(lp4258
S'k'
asg18
S'Y'
sS'.thisRepN'
p4259
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4260
I8
sS'.thisN'
p4261
I525
sg25
S'Y'
sg15
(lp4262
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4263
S'space'
p4264
asg95
I2
sS'.thisIndex'
p4265
I2
sa(dp4266
g16
(lp4267
S'd'
asg18
S'N'
sS'.thisRepN'
p4268
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4269
I9
sS'.thisN'
p4270
I526
sg25
S'Y'
sg15
(lp4271
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4272
I0
sa(dp4273
g16
(lp4274
S'd'
asg18
S'N'
sS'.thisRepN'
p4275
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4276
I10
sS'.thisN'
p4277
I527
sg25
S'Y'
sg15
(lp4278
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4279
I2
sa(dp4280
g16
(lp4281
S'd'
asg18
S'Y'
sS'.thisRepN'
p4282
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4283
I0
sS'.thisN'
p4284
I528
sg25
S'Y'
sg15
(lp4285
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4286
S'space'
p4287
asg95
I0
sS'.thisIndex'
p4288
I0
sa(dp4289
g16
(lp4290
S'k'
asg18
S'Y'
sS'.thisRepN'
p4291
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4292
I1
sS'.thisN'
p4293
I529
sg25
S'Y'
sg15
(lp4294
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4295
S'space'
p4296
asg95
I0
sS'.thisIndex'
p4297
I0
sa(dp4298
g16
(lp4299
S'd'
asg18
S'Y'
sS'.thisRepN'
p4300
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4301
I2
sS'.thisN'
p4302
I530
sg25
S'Y'
sg15
(lp4303
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4304
S'space'
p4305
asg95
I8
sS'.thisIndex'
p4306
I8
sa(dp4307
g16
(lp4308
S'd'
asg18
S'N'
sS'.thisRepN'
p4309
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4310
I3
sS'.thisN'
p4311
I531
sg25
S'Y'
sg15
(lp4312
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4313
I7
sa(dp4314
g16
(lp4315
S'd'
asg18
S'N'
sS'.thisRepN'
p4316
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4317
I4
sS'.thisN'
p4318
I532
sg25
S'Y'
sg15
(lp4319
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4320
I10
sa(dp4321
g16
(lp4322
S'd'
asg18
S'N'
sS'.thisRepN'
p4323
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4324
I5
sS'.thisN'
p4325
I533
sg25
S'Y'
sg15
(lp4326
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4327
S'space'
p4328
asg95
I5
sS'.thisIndex'
p4329
I5
sa(dp4330
g16
(lp4331
S'k'
asg18
S'Y'
sS'.thisRepN'
p4332
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4333
I6
sS'.thisN'
p4334
I534
sg25
S'Y'
sg15
(lp4335
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4336
I10
sa(dp4337
g16
(lp4338
S'd'
asg18
S'N'
sS'.thisRepN'
p4339
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4340
I7
sS'.thisN'
p4341
I535
sg25
S'Y'
sg15
(lp4342
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4343
I2
sa(dp4344
g16
(lp4345
S'k'
asg18
S'N'
sS'.thisRepN'
p4346
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4347
I8
sS'.thisN'
p4348
I536
sg25
S'Y'
sg15
(lp4349
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4350
I3
sa(dp4351
g16
(lp4352
S'k'
asg18
S'Y'
sS'.thisRepN'
p4353
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4354
I9
sS'.thisN'
p4355
I537
sg25
S'Y'
sg15
(lp4356
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4357
S'space'
p4358
asg95
I1
sS'.thisIndex'
p4359
I1
sa(dp4360
g16
(lp4361
S'k'
asg18
S'N'
sS'.thisRepN'
p4362
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4363
I10
sS'.thisN'
p4364
I538
sg25
S'Y'
sg15
(lp4365
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4366
I1
sa(dp4367
g16
(lp4368
S'd'
asg18
S'Y'
sS'.thisRepN'
p4369
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4370
I0
sS'.thisN'
p4371
I539
sg25
S'Y'
sg15
(lp4372
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4373
S'space'
p4374
asg95
I7
sS'.thisIndex'
p4375
I7
sa(dp4376
g16
(lp4377
S'k'
asg18
S'N'
sS'.thisRepN'
p4378
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4379
I1
sS'.thisN'
p4380
I540
sg25
S'Y'
sg15
(lp4381
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4382
I9
sa(dp4383
g16
(lp4384
S'd'
asg18
S'Y'
sS'.thisRepN'
p4385
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4386
I2
sS'.thisN'
p4387
I541
sg25
S'Y'
sg15
(lp4388
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4389
S'space'
p4390
asg95
I8
sS'.thisIndex'
p4391
I8
sa(dp4392
g16
(lp4393
S'd'
asg18
S'Y'
sS'.thisRepN'
p4394
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4395
I3
sS'.thisN'
p4396
I542
sg25
S'Y'
sg15
(lp4397
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4398
S'space'
p4399
asg95
I4
sS'.thisIndex'
p4400
I4
sa(dp4401
g16
(lp4402
S'd'
asg18
S'Y'
sS'.thisRepN'
p4403
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4404
I4
sS'.thisN'
p4405
I543
sg25
S'Y'
sg15
(lp4406
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4407
S'space'
p4408
asg95
I8
sS'.thisIndex'
p4409
I8
sa(dp4410
g16
(lp4411
S'd'
asg18
S'Y'
sS'.thisRepN'
p4412
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4413
I5
sS'.thisN'
p4414
I544
sg25
S'Y'
sg15
(lp4415
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4416
S'space'
p4417
asg95
I8
sS'.thisIndex'
p4418
I8
sa(dp4419
g16
(lp4420
S'd'
asg18
S'Y'
sS'.thisRepN'
p4421
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4422
I6
sS'.thisN'
p4423
I545
sg25
S'Y'
sg15
(lp4424
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4425
S'space'
p4426
asg95
I1
sS'.thisIndex'
p4427
I1
sa(dp4428
g16
(lp4429
S'd'
asg18
S'N'
sS'.thisRepN'
p4430
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4431
I7
sS'.thisN'
p4432
I546
sg25
S'Y'
sg15
(lp4433
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4434
I6
sa(dp4435
g16
(lp4436
S'd'
asg18
S'N'
sS'.thisRepN'
p4437
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4438
I8
sS'.thisN'
p4439
I547
sg25
S'Y'
sg15
(lp4440
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4441
S'space'
p4442
asg95
I6
sS'.thisIndex'
p4443
I6
sa(dp4444
g16
(lp4445
S'k'
asg18
S'N'
sS'.thisRepN'
p4446
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4447
I9
sS'.thisN'
p4448
I548
sg25
S'Y'
sg15
(lp4449
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4450
I5
sa(dp4451
g16
(lp4452
S'k'
asg18
S'N'
sg22
I41
sg26
S'Y'
sS'.thisN'
p4453
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4454
I10
sS'.thisRepN'
p4455
I49
sg21
I40
sg25
S'Y'
sg23
I25
sg15
(lp4456
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4457
I0
sa(dp4458
g16
(lp4459
S'd'
asS'.thisIndex'
p4460
I2
sS'.thisRepN'
p4461
I50
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4462
I0
sS'.thisN'
p4463
I550
sg25
S'Y'
sg15
(lp4464
S'k'
asg17
S'Y'
sg14
I12
sg95
I2
sa(dp4465
g16
(lp4466
S'k'
asS'.thisIndex'
p4467
I7
sS'.thisRepN'
p4468
I50
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4469
I1
sS'.thisN'
p4470
I551
sg25
S'Y'
sg15
(lp4471
S'd'
asg17
S'Y'
sg14
I12
sg95
I7
sa(dp4472
g16
(lp4473
S'k'
asg18
S'Y'
sS'.thisRepN'
p4474
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4475
I2
sS'.thisN'
p4476
I552
sg25
S'Y'
sg15
(lp4477
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4478
S'space'
p4479
asg95
I3
sS'.thisIndex'
p4480
I3
sa(dp4481
g16
(lp4482
S'd'
asg18
S'N'
sS'.thisRepN'
p4483
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4484
I3
sS'.thisN'
p4485
I553
sg25
S'Y'
sg15
(lp4486
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4487
I5
sa(dp4488
g16
(lp4489
S'd'
asg18
S'N'
sS'.thisRepN'
p4490
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4491
I4
sS'.thisN'
p4492
I554
sg25
S'Y'
sg15
(lp4493
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4494
I3
sa(dp4495
g16
(lp4496
S'd'
asg18
S'Y'
sS'.thisRepN'
p4497
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4498
I5
sS'.thisN'
p4499
I555
sg25
S'Y'
sg15
(lp4500
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4501
S'space'
p4502
asg95
I2
sS'.thisIndex'
p4503
I2
sa(dp4504
g16
(lp4505
S'k'
asg18
S'N'
sS'.thisRepN'
p4506
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4507
I6
sS'.thisN'
p4508
I556
sg25
S'Y'
sg15
(lp4509
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4510
I9
sa(dp4511
g16
(lp4512
S'k'
asg18
S'Y'
sS'.thisRepN'
p4513
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4514
I7
sS'.thisN'
p4515
I557
sg25
S'Y'
sg15
(lp4516
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4517
S'space'
p4518
asg95
I4
sS'.thisIndex'
p4519
I4
sa(dp4520
g16
(lp4521
S'd'
asg18
S'Y'
sS'.thisRepN'
p4522
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4523
I8
sS'.thisN'
p4524
I558
sg25
S'Y'
sg15
(lp4525
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4526
S'space'
p4527
asg95
I7
sS'.thisIndex'
p4528
I7
sa(dp4529
g16
(lp4530
S'd'
asg18
S'N'
sS'.thisRepN'
p4531
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4532
I9
sS'.thisN'
p4533
I559
sg25
S'Y'
sg15
(lp4534
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4535
S'space'
p4536
asg95
I9
sS'.thisIndex'
p4537
I9
sa(dp4538
g16
(lp4539
S'k'
asg18
S'N'
sS'.thisRepN'
p4540
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4541
I10
sS'.thisN'
p4542
I560
sg25
S'Y'
sg15
(lp4543
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4544
I1
sa(dp4545
g16
(lp4546
S'k'
asg18
S'N'
sS'.thisRepN'
p4547
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4548
I0
sS'.thisN'
p4549
I561
sg25
S'Y'
sg15
(lp4550
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4551
I7
sa(dp4552
g16
(lp4553
S'k'
asg18
S'N'
sS'.thisRepN'
p4554
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4555
I1
sS'.thisN'
p4556
I562
sg25
S'Y'
sg15
(lp4557
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4558
I9
sa(dp4559
g16
(lp4560
S'k'
asg18
S'Y'
sS'.thisRepN'
p4561
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4562
I2
sS'.thisN'
p4563
I563
sg25
S'Y'
sg15
(lp4564
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4565
S'space'
p4566
asg95
I6
sS'.thisIndex'
p4567
I6
sa(dp4568
g16
(lp4569
S'k'
asg18
S'Y'
sS'.thisRepN'
p4570
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4571
I3
sS'.thisN'
p4572
I564
sg25
S'Y'
sg15
(lp4573
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4574
S'space'
p4575
asg95
I3
sS'.thisIndex'
p4576
I3
sa(dp4577
g16
(lp4578
S'd'
asg18
S'N'
sS'.thisRepN'
p4579
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4580
I4
sS'.thisN'
p4581
I565
sg25
S'Y'
sg15
(lp4582
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4583
I10
sa(dp4584
g16
(lp4585
S'd'
asg18
S'Y'
sS'.thisRepN'
p4586
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4587
I5
sS'.thisN'
p4588
I566
sg25
S'Y'
sg15
(lp4589
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4590
S'space'
p4591
asg95
I10
sS'.thisIndex'
p4592
I10
sa(dp4593
g16
(lp4594
S'k'
asg18
S'N'
sS'.thisRepN'
p4595
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4596
I6
sS'.thisN'
p4597
I567
sg25
S'Y'
sg15
(lp4598
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4599
I6
sa(dp4600
g16
(lp4601
S'd'
asg18
S'N'
sS'.thisRepN'
p4602
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4603
I7
sS'.thisN'
p4604
I568
sg25
S'Y'
sg15
(lp4605
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4606
I9
sa(dp4607
g16
(lp4608
S'd'
asg18
S'N'
sS'.thisRepN'
p4609
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4610
I8
sS'.thisN'
p4611
I569
sg25
S'Y'
sg15
(lp4612
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4613
I0
sa(dp4614
g16
(lp4615
S'k'
asg18
S'Y'
sS'.thisRepN'
p4616
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4617
I9
sS'.thisN'
p4618
I570
sg25
S'Y'
sg15
(lp4619
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4620
S'space'
p4621
asg95
I5
sS'.thisIndex'
p4622
I5
sa(dp4623
g16
(lp4624
S'k'
asg18
S'Y'
sS'.thisRepN'
p4625
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4626
I10
sS'.thisN'
p4627
I571
sg25
S'Y'
sg15
(lp4628
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4629
S'space'
p4630
asg95
I10
sS'.thisIndex'
p4631
I10
sa(dp4632
g16
(lp4633
S'k'
asg18
S'N'
sS'.thisRepN'
p4634
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4635
I0
sS'.thisN'
p4636
I572
sg25
S'Y'
sg15
(lp4637
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4638
I4
sa(dp4639
g16
(lp4640
S'd'
asg18
S'N'
sS'.thisRepN'
p4641
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4642
I1
sS'.thisN'
p4643
I573
sg25
S'Y'
sg15
(lp4644
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4645
I10
sa(dp4646
g16
(lp4647
S'k'
asg18
S'N'
sS'.thisRepN'
p4648
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4649
I2
sS'.thisN'
p4650
I574
sg25
S'Y'
sg15
(lp4651
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4652
I9
sa(dp4653
g16
(lp4654
S'd'
asg18
S'N'
sS'.thisRepN'
p4655
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4656
I3
sS'.thisN'
p4657
I575
sg25
S'Y'
sg15
(lp4658
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4659
S'space'
p4660
asg95
I9
sS'.thisIndex'
p4661
I9
sa(dp4662
g16
(lp4663
S'k'
asg18
S'Y'
sS'.thisRepN'
p4664
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4665
I4
sS'.thisN'
p4666
I576
sg25
S'Y'
sg15
(lp4667
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4668
S'space'
p4669
asg95
I8
sS'.thisIndex'
p4670
I8
sa(dp4671
g16
(lp4672
S'd'
asg18
S'Y'
sS'.thisRepN'
p4673
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4674
I5
sS'.thisN'
p4675
I577
sg25
S'Y'
sg15
(lp4676
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4677
S'space'
p4678
asg95
I4
sS'.thisIndex'
p4679
I4
sa(dp4680
g16
(lp4681
S'k'
asg18
S'N'
sS'.thisRepN'
p4682
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4683
I6
sS'.thisN'
p4684
I578
sg25
S'Y'
sg15
(lp4685
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4686
I4
sa(dp4687
g16
(lp4688
S'd'
asg18
S'N'
sS'.thisRepN'
p4689
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4690
I7
sS'.thisN'
p4691
I579
sg25
S'Y'
sg15
(lp4692
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4693
I8
sa(dp4694
g16
(lp4695
S'k'
asg18
S'Y'
sS'.thisRepN'
p4696
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4697
I8
sS'.thisN'
p4698
I580
sg25
S'Y'
sg15
(lp4699
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4700
S'space'
p4701
asg95
I7
sS'.thisIndex'
p4702
I7
sa(dp4703
g16
(lp4704
S'd'
asg18
S'N'
sS'.thisRepN'
p4705
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4706
I9
sS'.thisN'
p4707
I581
sg25
S'Y'
sg15
(lp4708
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4709
I3
sa(dp4710
g16
(lp4711
S'd'
asg18
S'Y'
sS'.thisRepN'
p4712
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4713
I10
sS'.thisN'
p4714
I582
sg25
S'Y'
sg15
(lp4715
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4716
I5
sa(dp4717
g16
(lp4718
S'k'
asg18
S'Y'
sS'.thisRepN'
p4719
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4720
I0
sS'.thisN'
p4721
I583
sg25
S'Y'
sg15
(lp4722
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4723
S'space'
p4724
asg95
I0
sS'.thisIndex'
p4725
I0
sa(dp4726
g16
(lp4727
S'k'
asg18
S'N'
sS'.thisRepN'
p4728
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4729
I1
sS'.thisN'
p4730
I584
sg25
S'Y'
sg15
(lp4731
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4732
I1
sa(dp4733
g16
(lp4734
S'k'
asg18
S'N'
sS'.thisRepN'
p4735
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4736
I2
sS'.thisN'
p4737
I585
sg25
S'Y'
sg15
(lp4738
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4739
I2
sa(dp4740
g16
(lp4741
S'd'
asg18
S'Y'
sS'.thisRepN'
p4742
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4743
I3
sS'.thisN'
p4744
I586
sg25
S'Y'
sg15
(lp4745
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4746
S'space'
p4747
asg95
I10
sS'.thisIndex'
p4748
I10
sa(dp4749
g16
(lp4750
S'k'
asg18
S'N'
sS'.thisRepN'
p4751
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4752
I4
sS'.thisN'
p4753
I587
sg25
S'Y'
sg15
(lp4754
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4755
I8
sa(dp4756
g16
(lp4757
S'd'
asg18
S'Y'
sS'.thisRepN'
p4758
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4759
I5
sS'.thisN'
p4760
I588
sg25
S'Y'
sg15
(lp4761
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4762
I8
sa(dp4763
g16
(lp4764
S'k'
asg18
S'N'
sS'.thisRepN'
p4765
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4766
I6
sS'.thisN'
p4767
I589
sg25
S'Y'
sg15
(lp4768
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4769
I9
sa(dp4770
g16
(lp4771
S'd'
asg18
S'Y'
sS'.thisRepN'
p4772
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4773
I7
sS'.thisN'
p4774
I590
sg25
S'Y'
sg15
(lp4775
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4776
S'space'
p4777
asg95
I5
sS'.thisIndex'
p4778
I5
sa(dp4779
g16
(lp4780
S'k'
asg18
S'N'
sS'.thisRepN'
p4781
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4782
I8
sS'.thisN'
p4783
I591
sg25
S'Y'
sg15
(lp4784
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4785
I10
sa(dp4786
g16
(lp4787
S'k'
asg18
S'Y'
sS'.thisRepN'
p4788
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4789
I9
sS'.thisN'
p4790
I592
sg25
S'Y'
sg15
(lp4791
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4792
I6
sa(dp4793
g16
(lp4794
S'k'
asg18
S'N'
sS'.thisRepN'
p4795
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4796
I10
sS'.thisN'
p4797
I593
sg25
S'Y'
sg15
(lp4798
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4799
S'space'
p4800
asg95
I9
sS'.thisIndex'
p4801
I9
sa(dp4802
g16
(lp4803
S'k'
asg18
S'Y'
sS'.thisRepN'
p4804
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4805
I0
sS'.thisN'
p4806
I594
sg25
S'Y'
sg15
(lp4807
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4808
S'space'
p4809
asg95
I8
sS'.thisIndex'
p4810
I8
sa(dp4811
g16
(lp4812
S'k'
asg18
S'Y'
sS'.thisRepN'
p4813
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4814
I1
sS'.thisN'
p4815
I595
sg25
S'Y'
sg15
(lp4816
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4817
S'space'
p4818
asg95
I3
sS'.thisIndex'
p4819
I3
sa(dp4820
g16
(lp4821
S'k'
asg18
S'Y'
sS'.thisRepN'
p4822
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4823
I2
sS'.thisN'
p4824
I596
sg25
S'Y'
sg15
(lp4825
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4826
S'space'
p4827
asg95
I2
sS'.thisIndex'
p4828
I2
sa(dp4829
g16
(lp4830
S'd'
asg18
S'N'
sS'.thisRepN'
p4831
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4832
I3
sS'.thisN'
p4833
I597
sg25
S'Y'
sg15
(lp4834
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4835
I6
sa(dp4836
g16
(lp4837
S'k'
asg18
S'Y'
sS'.thisRepN'
p4838
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4839
I4
sS'.thisN'
p4840
I598
sg25
S'Y'
sg15
(lp4841
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4842
S'space'
p4843
asg95
I7
sS'.thisIndex'
p4844
I7
sa(dp4845
g16
(lp4846
S'd'
asg18
S'Y'
sg22
I42
sg26
S'Y'
sS'.thisN'
p4847
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4848
I5
sS'.thisRepN'
p4849
I54
sg21
I39
sg25
S'Y'
sg23
I23
sg15
(lp4850
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4851
S'space'
p4852
asg95
I3
sS'.thisIndex'
p4853
I3
sasS'loops'
p4854
(lp4855
g1
(g35
g3
NtRp4856
(dp4857
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4858
sg40
(lp4859
sg41
I74692944
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4860
g48
g49
(g50
g51
g52
S'b'
tRp4861
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4862
(I1
(I600
I1
tg55
I00
S'\x00\x00\xf3C\x00\x00VC\x00\xc0\x08D\x00\x80\xe5C\x00\xc0\x05D\x00\x00\xc8B\x00\x00QC\x00\x80\xe4C\x00\x80\x94C\x00\x00\\B\x00\x80\x8cC\x00\x00\x9fC\x00\xc0\nD\x00\x00\x05D\x00\x00\rC\x00\x80\xfcC\x00\x00\xd4C\x00@\rD\x00\x80\xbcC\x00\x00\xb2B\x00\x80\xb2C\x00\x00\xf8A\x00\x80\xc7C\x00\x00\xefC\x00\x00WC\x00\x00\x03C\x00\x80\xc5C\x00\x00\x9aC\x00\x00\x9cB\x00\x00%C\x00\x80\xcfC\x00\x80\xd5C\x00\x00\xd8B\x00\x00\x7fC\x00\x00HB\x00\x00AC\x00\x00\xecC\x00\x00pC\x00\x00\xb4C\x00\x00\xedC\x00\x80\xfbC\x00\x00kC\x00\x80\xd9C\x00\x00$B\x00\x00\xb0B\x00@\x08D\x00\x00\xfcC\x00\x00\xaaB\x00@\x11D\x00\x00\x8dC\x00\x80\xbaC\x00\x00xB\x00\x00cC\x00\x00\x82C\x00\x00\xa7C\x00\x00XB\x00\x80\xffC\x00\x00/C\x00\x00\x0cC\x00\x00\xe8A\x00\x004C\x00\x00\xb7C\x00\x00\x0bC\x00@\x15D\x00\x00\x01D\x00\x00\x03D\x00\x00fC\x00\x00\xd3C\x00\x80\xbfC\x00\x00\xa8C\x00\x000C\x00\x00 A\x00\x00(B\x00\x00\xc0A\x00\x00\x1dC\x00\x00>C\x00\x00\x07C\x00\x80\xe2C\x00\x00\xbeB\x00@\x07D\x00\x00\xbcC\x00@\x05D\x00\x00\xeaC\x00\x80\xc9C\x00\x00\x99C\x00\x00\xf4C\x00\x80\x11D\x00\x80\rD\x00\x80\xa0C\x00\x00\xadC\x00\x00\x18B\x00\x00<B\x00\x80\nD\x00\x80\xe1C\x00\x00\xfbC\x00\x00qC\x00\x00ZC\x00\x00\x92B\x00@\x00D\x00\x00\xf0C\x00\x00YC\x00\x00eC\x00\x00\nC\x00\x00hB\x00\x80\xefC\x00\x00\xf8C\x00\x00pA\x00\x00aC\x00\x80\xacC\x00\x00\x0fC\x00@\x0eD\x00\xc0\x07D\x00\x00\x0eD\x00\x80\xb9C\x00\x80\x08D\x00\x00\xdaB\x00\x80\x8bC\x00\x00\x08D\x00\x00\x00B\x00\x00RC\x00\x00\xacB\x00\x00\x0eC\x00\x00HC\x00\x00\x13D\x00\xc0\x0bD\x00\x00\x15C\x00\x00\x98B\x00\x80\x03D\x00\x80\tD\x00\x00\x9eC\x00\x80\xfaC\x00\x80\x86C\x00\x80\xd3C\x00\x00\xe7C\x00\x80\x07D\x00\xc0\x04D\x00\x00\x13C\x00\x00\x10A\x00\x00\xa4B\x00\x00\x04D\x00\x80\xedC\x00\x00(C\x00\x00\xd6C\x00\x80\x9cC\x00\x00uC\x00\x80\x12D\x00\x80\xb7C\x00\x00\xb5C\x00\x00\xf2C\x00\x00@B\x00\x00\xe1C\x00\x00\x9bC\x00\x00\xdcC\x00\x80\xaaC\x00\x002C\x00\x80\xe9C\x00\x00\x00A\x00\x00\x1eC\x00\x00`B\x00\x80\xd4C\x00\x80\xa5C\x00\x00"C\x00\x00\x17C\x00\x80\xf8C\x00\x80\x88C\x00\x00\xb0C\x00\x00\x00D\x00\x80\xccC\x00\x00\x9dC\x00\x00\xaeB\x00\x00\x84C\x00\x00=C\x00@\x0fD\x00\x00\xa6B\x00\x00\xbcB\x00\x00#C\x00\x80\xf3C\x00\x00\xe8C\x00\x80\xabC\x00\x00\x83C\x00\x00\xe4B\x00\x00\xb0A\x00\x00\xd4B\x00\x00\xd2B\x00\x00\xaeC\x00\x00<C\x00\x00\x86B\x00\x00tC\x00\x00\xdcB\x00\xc0\x0fD\x00\x00\xf7C\x00\x00lB\x00\x00DC\x00\x00\xdeB\x00\x00\xbaC\x00\xc0\x03D\x00\x00\x80B\x00\x005C\x00\x00\x8cB\x00\x00\x00\x00\x00\x00EC\x00\x80\xbdC\x00\x00\xc4B\x00\x80\x8eC\x00\x00\xcfC\x00\x80\xc2C\x00\x00CC\x00\x80\xfeC\x00\x00{C\x00\x00\x04B\x00\x00?C\x00\x00\xbdC\x00\x00\xe0A\x00\x80\xa3C\x00\x00SC\x00\x80\xb1C\x00\x00iC\x00\x00\x8fC\x00\x00\xa3C\x00\x00\xe2B\x00\xc0\x06D\x00\x00TB\x00\x00\x1cC\x00\x00~C\x00\x00gC\x00\x00\xdbC\x00\x00\x10C\x00@\nD\x00\x00|B\x00\x80\xa7C\x00\x80\xb4C\x00\x00hC\x00\x80\xb8C\x00\x00\xd0B\x00\x80\xc8C\x00\x00\xdaC\x00\x00@@\x00\x00\xfaC\x00\x80\x04D\x00\x00\xf5C\x00\x00\xf4B\x00\x00\x14B\x00\x00\'C\x00\x00:C\x00\x00sC\x00\x80\x9aC\x00\x80\xdfC\x00\x80\xdbC\x00\x80\xecC\x00\x80\xeaC\x00\x00LB\x00\x00GC\x00\x00\x88B\x00\x80\x85C\x00\x00\x1cB\x00\x00\xf2B\x00\x80\x0bD\x00\x80\x9bC\x00\x80\xa9C\x00\x80\x00D\x00\x00\x80?\x00\xc0\x10D\x00\xc0\x15D\x00\x00\xe0C\x00\x00\xb3C\x00\x00\x8eC\x00\x00\xa0B\x00\x00\xacC\x00\x00.C\x00\x00\xb1C\x00\x00)C\x00\x80\xc3C\x00\x00\x9cC\x00\x00\xa0C\x00\x00\x89C\x00\x00|C\x00\x00`A\x00@\x10D\x00\x00\x94C\x00\x00FC\x00\x80\xddC\x00\x00\x98A\x00\x00\xc5C\x00\x80\x02D\x00\x80\x9eC\x00\x00\xc0B\x00\x00\x94B\x00\x80\xdeC\x00\x80\x13D\x00\x00\xd2C\x00\x80\xe3C\x00\x00[C\x00\x00`C\x00\x00\x8aC\x00\x00\x8cC\x00\x00\xa0@\x00\x00\xc0C\x00\x00\xd5C\x00\x00XC\x00\x80\xaeC\x00\x00\xe8B\x00\x80\xe8C\x00\x00\xdfC\x00\x80\xceC\x00\x004B\x00@\x14D\x00\x00JC\x00\x80\xc4C\x00\x00\xe6C\x00\x00\x0cD\x00\x80\xdaC\x00\x80\x0eD\x00\xc0\x11D\x00\x80\x0fD\x00\x00\xb8A\x00\x00\xd9C\x00\xc0\x13D\x00\x00\xfcB\x00\x00\xc2B\x00\x00@A\x00\x00\xd1C\x00\x00\xa8A\x00\x80\x8aC\x00\x80\xd0C\x00\x00\x0cB\x00\x00\xcbC\x00\x80\xf2C\x00\x80\xc6C\x00\x00\x81C\x00\x008B\x00@\x12D\x00\x00\xffC\x00\x00\xa5C\x00\x000B\x00\x80\x0cD\x00\x00\xbeC\x00\x00\xe5C\x00\x00\x85C\x00\x00\xceB\x00\x80\xa1C\x00\x00\x08C\x00\x80\x10D\x00\x00\x0bD\x00\x00nC\x00\x00\x80A\x00\x00\x88A\x00\x00\xc0@\x00\x80\xe6C\x00\x80\xb3C\x00\x00\xa0A\x00\x00\xd0C\x00\x00\xd8A\x00\x80\x84C\x00\x00\x87C\x00\x00]C\x00\x00\xf0B\x00\x00vC\x00\x008C\x00\x00\xfeC\x00\x00rC\x00\x00dC\x00\x00\xfaB\x00\x00\x12D\x00\x00\x88C\x00\x80\xb0C\x00\x00\nD\x00\x00\tD\x00\x00*C\x00\x00zC\x00\x00\xcdC\x00\x80\xe7C\x00\xc0\x0cD\x00\x00BC\x00\x00\xeaB\x00\x80\xbbC\x00\x00\x86C\x00\x00PC\x00\x00\x05C\x00\x00\xf9C\x00\x00\x02D\x00\x80\xd2C\x00\x00\xa4C\x00\x00+C\x00\x00MC\x00\x00oC\x00\xc0\x00D\x00\x00\xb2C\x00\x00\xeeB\x00\x00KC\x00\x00\xc3C\x00\x00\x82B\x00\x00\x04C\x00\x00\xa9C\x00\x00\x96B\x00\x80\xf5C\x00\x00\x97C\x00\x00$C\x00\x007C\x00\x00\xc8C\x00\x00\xd6B\x00\x00mC\x00\x00\xf6B\x00\x00jC\x00\x00\x06C\x00\x00\tC\x00\x00\x14C\x00\x00\xb4B\x00\x80\xa4C\x00\x00\xb6B\x00\x00\x8bC\x00\x00\x84B\x00\x00\xcaC\x00\x00 C\x00\x00tB\x00\x00\xfdC\x00@\x13D\x00\x80\xd7C\x00\x80\xf9C\x00\x00yC\x00\x00\x8aB\x00\x00\xabC\x00\x009C\x00\x00,C\x00\x00\xecB\x00\x80\x9fC\x00\xc0\x02D\x00\x00\rD\x00\x00\x00C\x00\x00\x11C\x00\x80\x90C\x00\x80\xebC\x00\x00^C\x00\x003C\x00\x80\xd1C\x00\xc0\x12D\x00\x80\xe0C\x00\x00\x06D\x00\x80\xd8C\x00\x80\x81C\x00\x80\xdcC\x00\x00\xf1C\x00\x00\xd7C\x00\x00xC\x00\xc0\rD\x00\x80\xf6C\x00\x00\x00@\x00\x00\x01C\x00\x00\x15D\x00\x00}C\x00\x00_C\x00\x80\x99C\x00\x00\x80C\x00\x00\x1aC\x00\x00!C\x00\x80\xcbC\x00\x80\x87C\x00\x00\x90B\x00\x00pB\x00\x80\xcdC\x00\x00\xa6C\x00\x00\x16C\x00\x00NC\x00\x80\xafC\x00\x00\xbaB\x00\x80\x14D\x00\x00\xc2C\x00\x80\x96C\x00\x00\x9eB\x00\x00@C\x00\x00\xb8B\x00\x00\x07D\x00\x00\xceC\x00\x00\xddC\x00\x00\x96C\x00\x00\xa2B\x00\x00\x9aB\x00\x00\xb6C\x00\x00DB\x00\x00\xc6C\x00\x80\xf7C\x00\x00\x90A\x00\x00UC\x00\x00IC\x00\x00\xf0A\x00\x00\xe3C\x00\x00\xe0@\x00@\x01D\x00\x00OC\x00\x00\x02C\x00@\x0cD\x00@\tD\x00@\x04D\x00\x00\xc6B\x00\x00\xf8B\x00\x00\x08B\x00\x00-C\x00\x00\xbfC\x00\x80\x01D\x00\x00\xaaC\x00@\x02D\x00\x006C\x00\x00\x14D\x00\x00\x10B\x00\x00\xc1C\x00\x80\xcaC\x00\x80\x8dC\x00\x80\xd6C\x00\x00\xeeC\x00\x00\xafC\x00@\x06D\x00\x80\xc1C\x00\x80\x93C\x00\x00\x1bC\x00\xc0\x14D\x00\x00\xa1C\x00\x80\x98C\x00\x80\xadC\x00\x00\x92C\x00\x00\x10D\x00\x80\xb5C\x00@\x0bD\x00\x00\x12C\x00\x00\x1fC\x00\x80\x92C\x00\x00\x18C\x00\x80\x05D\x00\x00\xe9C\x00\x00\x98C\x00\x00\xf6C\x00\xc0\x01D\x00\x80\xa2C\x00\x00\xd8C\x00\x80\x97C\x00\x00\xc8A\x00\x00\x0fD\x00\x80\x95C\x00\x000A\x00\x00\xd0A\x00\x00&C\x00\x80\xf4C\x00\x00\x93C\x00\x80\x89C\x00\x00\xe2C\x00\x00\x91C\x00\x00\xa2C\x00\x00\xfeB\x00\x80\x83C\x00\x00\xbbC\x00\x00\x80@\x00\x00wC\x00\x00\xb8C\x00\x00;C\x00@\x03D\x00\x00lC\x00\x00\x19C\x00\x80\x82C\x00\x00bC\x00\x80\x06D\x00\x00\x8eB\x00\x00\xcaB\x00\x80\xc0C\x00\x00PB\x00\x80\xf0C\x00\x00\xebC\x00\x00\x11D\x00\x00\xe6B\x00\x00PA\x00\x00\xe4C\x00\x00\xe0B\x00\x00\xc9C\x00\xc0\x0eD\x00\x00dB\x00\x80\xeeC\x00\x00\xdeC\x00\x001C\x00\x00\xccC\x00\x80\xb6C\x00\x00,B\x00\x80\xf1C\x00\x80\xa6C\x00\x00\xa8B\x00\x80\xfdC\x00\x80\x80C\x00\x00 B\x00\x00\x95C\x00\x80\x8fC\x00\x00\xc7C\x00\x00LC\x00\x00TC\x00\x00\xb9C\x00\x80\xa8C\x00\xc0\tD\x00\x80\x9dC\x00\x00\xccB\x00\x00\\C\x00\x80\x91C\x00\x80\x15D\x00\x80\xbeC\x00\x00\xc4C\x00\x00\x90C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4863
(dp4864
g60
(dp4865
g48
I01
sg56
I01
ssg62
g4856
sg63
(lp4866
g48
ag56
asg65
(lp4867
I600
aI1
asbsg67
S'random'
p4868
sg69
g70
(g51
(I0
tS'b'
tRp4869
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4870
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\xc7\x00\x00\x00\x04\x01\x00\x00\xbd\x01\x00\x00\xec\x00\x00\x00$\x02\x00\x00\'\x01\x00\x00Z\x01\x00\x00\xe5\x01\x00\x00\x9c\x00\x00\x00\x89\x00\x00\x00G\x00\x00\x00\x18\x02\x00\x00?\x01\x00\x006\x02\x00\x00\x14\x01\x00\x00j\x00\x00\x00X\x01\x00\x00Y\x01\x00\x00\xe0\x01\x00\x00\x19\x01\x00\x00]\x01\x00\x00A\x01\x00\x00\xb5\x00\x00\x00:\x01\x00\x00I\x00\x00\x00\x15\x02\x00\x00\x19\x02\x00\x00_\x01\x00\x00\xd4\x00\x00\x00;\x00\x00\x00\xe3\x01\x00\x00\x15\x00\x00\x00v\x00\x00\x00\xd1\x00\x00\x00\xee\x01\x00\x00D\x01\x00\x00\xf6\x01\x00\x00\xf1\x00\x00\x00Z\x00\x00\x00\xfe\x00\x00\x00G\x02\x00\x00+\x00\x00\x00H\x00\x00\x00A\x02\x00\x00M\x01\x00\x000\x01\x00\x00I\x01\x00\x00[\x00\x00\x00\x95\x00\x00\x00\xdd\x01\x00\x00"\x00\x00\x00\xfa\x00\x00\x001\x02\x00\x00\xdd\x00\x00\x007\x00\x00\x00\t\x00\x00\x00\x9e\x00\x00\x00;\x02\x00\x00g\x00\x00\x00\xbf\x00\x00\x00\xc9\x01\x00\x00\x9d\x01\x00\x003\x00\x00\x00\xe4\x00\x00\x00\xc4\x00\x00\x00\x86\x01\x00\x00\x9a\x01\x00\x00\xba\x00\x00\x00\xfc\x00\x00\x00\xa3\x01\x00\x00\xc6\x00\x00\x00.\x02\x00\x00\xc8\x01\x00\x00a\x00\x00\x00\x1e\x01\x00\x00\x89\x01\x00\x00~\x00\x00\x00\xdb\x01\x00\x00\x1c\x00\x00\x00\xd3\x01\x00\x00\n\x01\x00\x00\xda\x01\x00\x00\x8a\x00\x00\x00\xad\x00\x00\x00D\x02\x00\x00/\x00\x00\x00x\x00\x00\x00\xa9\x00\x00\x00,\x00\x00\x00\x13\x00\x00\x00\x96\x01\x00\x00\x98\x01\x00\x00\xd5\x01\x00\x00\xcf\x01\x00\x00\xae\x00\x00\x00N\x00\x00\x00\x1d\x01\x00\x00>\x01\x00\x00\xca\x00\x00\x00\xec\x01\x00\x00\x05\x00\x00\x00/\x02\x00\x00Q\x02\x00\x00R\x01\x00\x00\xe9\x00\x00\x00\xb7\x00\x00\x00\xb6\x00\x00\x00\x8f\x01\x00\x00 \x00\x00\x00s\x00\x00\x00\xbc\x00\x00\x00\xc1\x00\x00\x008\x02\x00\x00\xdb\x00\x00\x00\xb4\x00\x00\x005\x02\x00\x00,\x01\x00\x00u\x01\x00\x00\xa7\x01\x00\x00\x83\x01\x00\x00c\x01\x00\x00\xff\x00\x00\x00\xf0\x00\x00\x00\x91\x01\x00\x00\xed\x01\x00\x00i\x01\x00\x00=\x01\x00\x00!\x02\x00\x00\xab\x01\x00\x00\xbe\x01\x00\x00\xe8\x01\x00\x00\x19\x00\x00\x00\x87\x01\x00\x00y\x01\x00\x00\x93\x01\x00\x00L\x00\x00\x00T\x01\x00\x00\x94\x01\x00\x00f\x00\x00\x00>\x00\x00\x00:\x00\x00\x00\x0e\x00\x00\x00y\x00\x00\x00m\x00\x00\x00\xe2\x00\x00\x00\xac\x01\x00\x00\t\x02\x00\x00\x88\x00\x00\x00\x95\x01\x00\x00}\x00\x00\x00\xcc\x01\x00\x00\xa2\x00\x00\x00\x0c\x02\x00\x00*\x02\x00\x00\xc4\x01\x00\x00\x00\x02\x00\x00\xde\x00\x00\x00J\x00\x00\x00\x9d\x00\x00\x00\n\x02\x00\x00\x9c\x01\x00\x00\xc5\x01\x00\x00\xa1\x00\x00\x00\xaf\x00\x00\x00\x8c\x01\x00\x00\x1d\x00\x00\x00\x1a\x02\x00\x00\xf2\x00\x00\x00\x8d\x00\x00\x00\x0e\x01\x00\x00o\x01\x00\x00~\x01\x00\x00\xa6\x01\x00\x00\xef\x01\x00\x00\x0c\x01\x00\x009\x00\x00\x00F\x00\x00\x00>\x02\x00\x00\x9a\x00\x00\x00\xb0\x01\x00\x00<\x00\x00\x00\xc5\x00\x00\x00\xf4\x01\x00\x00\x8d\x01\x00\x00e\x01\x00\x00\xa5\x01\x00\x00\xf3\x00\x00\x00\'\x02\x00\x00\xb9\x00\x00\x00\xab\x00\x00\x00K\x00\x00\x00\xd2\x00\x00\x00\xd4\x01\x00\x00#\x00\x00\x00t\x01\x00\x00\xce\x00\x00\x00\xc0\x00\x00\x00\xc8\x00\x00\x00\x17\x01\x00\x00\xfb\x00\x00\x00z\x00\x00\x00\xe2\x01\x00\x002\x01\x00\x00\x84\x01\x00\x00K\x02\x00\x00\x7f\x01\x00\x00\xcd\x01\x00\x00\xe7\x01\x00\x00x\x01\x00\x00\x06\x00\x00\x00w\x00\x00\x00\xd6\x00\x00\x00L\x02\x00\x00\xe1\x01\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00*\x01\x00\x00d\x00\x00\x00`\x00\x00\x00#\x01\x00\x00R\x02\x00\x00b\x01\x00\x00\xaf\x01\x00\x00\xc1\x01\x00\x00$\x01\x00\x00k\x00\x00\x00,\x02\x00\x004\x00\x00\x00h\x01\x00\x00e\x00\x00\x00B\x00\x00\x00\xe0\x00\x00\x00\xe7\x00\x00\x00\xd8\x00\x00\x00\x92\x01\x00\x00)\x00\x00\x00)\x02\x00\x00\x90\x01\x00\x00W\x01\x00\x00\x80\x01\x00\x00%\x00\x00\x00_\x00\x00\x00g\x01\x00\x00\xf4\x00\x00\x00\xbb\x00\x00\x00\x90\x00\x00\x00d\x01\x00\x00%\x02\x00\x00\xba\x01\x00\x00\xa2\x01\x00\x00p\x01\x00\x00\xd0\x00\x00\x00\x13\x01\x00\x00\xc0\x01\x00\x00\xdf\x00\x00\x00!\x00\x00\x00\xc3\x01\x00\x00F\x02\x00\x00H\x01\x00\x00\xb6\x01\x00\x005\x00\x00\x00+\x02\x00\x00\xb3\x00\x00\x00"\x02\x00\x00\xaa\x00\x00\x00`\x01\x00\x00Q\x01\x00\x00\xfd\x00\x00\x00w\x01\x00\x00\x83\x00\x00\x00a\x01\x00\x00\xc7\x01\x00\x00k\x01\x00\x00\xa4\x00\x00\x00\x12\x01\x00\x00\x1d\x02\x00\x00%\x01\x00\x00B\x01\x00\x00\x99\x01\x00\x00t\x00\x00\x00&\x01\x00\x00\n\x00\x00\x001\x00\x00\x00\xf9\x01\x00\x00\t\x01\x00\x00\xcb\x00\x00\x00\xd9\x00\x00\x00I\x02\x00\x00W\x02\x00\x00\xad\x01\x00\x00\x1f\x02\x00\x00S\x02\x00\x00\x05\x02\x00\x00\x0b\x02\x00\x00\x1c\x02\x00\x00\xff\x01\x00\x00\x16\x01\x00\x00\x08\x00\x00\x00H\x02\x00\x00\x17\x02\x00\x00\xd9\x01\x00\x00\xd2\x01\x00\x00\x8b\x01\x00\x00\x14\x02\x00\x00\x0f\x02\x00\x00\x03\x02\x00\x00T\x00\x00\x00\xc2\x01\x00\x00\x1b\x00\x00\x00\xf5\x00\x00\x00\x97\x00\x00\x00\x01\x01\x00\x00\x10\x01\x00\x00\x8f\x00\x00\x00\xa8\x00\x00\x00P\x02\x00\x00\x81\x00\x00\x00\x1c\x01\x00\x00\x0b\x00\x00\x00\xa8\x01\x00\x00\x11\x01\x00\x00X\x00\x00\x00\x02\x02\x00\x00S\x01\x00\x00 \x02\x00\x00\x12\x02\x00\x00\xda\x00\x00\x00\xd5\x00\x00\x00}\x01\x00\x00\x97\x01\x00\x00L\x01\x00\x00\xa0\x00\x00\x00\xcb\x01\x00\x00C\x02\x00\x006\x00\x00\x00\xe5\x00\x00\x00E\x00\x00\x00N\x02\x00\x00\x88\x01\x00\x00\x02\x01\x00\x00\xf2\x01\x00\x00\x99\x00\x00\x00\xa4\x01\x00\x00\xb2\x00\x00\x00\x0b\x01\x00\x00l\x00\x00\x00Y\x00\x00\x00\x04\x02\x00\x00\xb8\x00\x00\x00+\x01\x00\x00\xfc\x01\x00\x00\xce\x01\x00\x00\xa5\x00\x00\x00l\x01\x00\x00\r\x01\x00\x00\xd7\x00\x00\x00\x82\x01\x00\x00\x14\x00\x00\x00\x08\x01\x00\x00\\\x01\x00\x00&\x00\x00\x00\xe6\x00\x00\x00\x93\x00\x00\x00\x07\x02\x00\x00\xdc\x01\x00\x00@\x02\x00\x00=\x00\x00\x00\x92\x00\x00\x00&\x02\x00\x00\xe8\x00\x00\x00M\x02\x00\x00q\x00\x00\x00\xc2\x00\x00\x002\x00\x00\x00#\x02\x00\x00v\x01\x00\x00P\x00\x00\x00\x12\x00\x00\x00\xd3\x00\x00\x00\xc9\x00\x00\x00O\x01\x00\x00U\x02\x00\x00\xf0\x01\x00\x00D\x00\x00\x00(\x01\x00\x000\x02\x00\x00\xf7\x01\x00\x00\xfe\x01\x00\x00\xd1\x01\x00\x00\xcd\x00\x00\x00\x85\x01\x00\x00\x0f\x01\x00\x00V\x02\x00\x003\x01\x00\x00\x1a\x01\x00\x00\x1a\x00\x00\x00\xde\x01\x00\x00G\x01\x00\x00J\x02\x00\x00\x16\x00\x00\x00\x8e\x01\x00\x00\xea\x00\x00\x009\x02\x00\x00S\x00\x00\x00\x9b\x01\x00\x00\xf8\x01\x00\x00E\x01\x00\x00\xc6\x01\x00\x00?\x02\x00\x00\xa7\x00\x00\x00q\x01\x00\x00\xca\x01\x00\x00\xd7\x01\x00\x00/\x01\x00\x00\xcc\x00\x00\x00\x1e\x00\x00\x00^\x01\x00\x00C\x01\x00\x00@\x01\x00\x00\xb1\x01\x00\x00!\x01\x00\x00|\x01\x00\x00C\x00\x00\x00\x84\x00\x00\x00\x10\x00\x00\x00\x9f\x00\x00\x00)\x01\x00\x00\x1f\x00\x00\x00\x8e\x00\x00\x00\xfa\x01\x00\x00\xb9\x01\x00\x00\xa0\x01\x00\x00\x13\x02\x00\x00\xb5\x01\x00\x00;\x01\x00\x00*\x00\x00\x00\xeb\x00\x00\x006\x01\x00\x00\xe1\x00\x00\x00\xf7\x00\x00\x00\x98\x00\x00\x00\xb7\x01\x00\x00\xd8\x01\x00\x00\x18\x01\x00\x00=\x02\x00\x00\x1f\x01\x00\x00.\x01\x00\x00\xf6\x00\x00\x00\x07\x01\x00\x00\xb3\x01\x00\x00\x96\x00\x00\x00]\x00\x00\x00\x1e\x02\x00\x00M\x00\x00\x00\xe4\x01\x00\x00"\x01\x00\x007\x02\x00\x00\x07\x00\x00\x00P\x01\x00\x00\x03\x00\x00\x004\x01\x00\x00[\x01\x00\x00\x85\x00\x00\x00r\x01\x00\x00\xb1\x00\x00\x00-\x01\x00\x00\x0e\x02\x00\x00\x9b\x00\x00\x00R\x00\x00\x00\xf9\x00\x00\x003\x02\x00\x00\xae\x01\x00\x00$\x00\x00\x00\xf8\x00\x00\x00\'\x00\x00\x00\x8c\x00\x00\x00\xfb\x01\x00\x00<\x02\x00\x00\x17\x00\x00\x00h\x00\x00\x00c\x00\x00\x002\x02\x00\x00\xb8\x01\x00\x00B\x02\x00\x00\x94\x00\x00\x00F\x01\x00\x00\x00\x00\x00\x00\xb0\x00\x00\x00U\x00\x00\x00\x1b\x02\x00\x00\xef\x00\x00\x00\x8a\x01\x00\x00\x10\x02\x00\x00\xbc\x01\x00\x00\xbe\x00\x00\x00\xdf\x01\x00\x00i\x00\x00\x00\xa3\x00\x00\x00z\x01\x00\x00\xa1\x01\x00\x00\xed\x00\x00\x00\x82\x00\x00\x00^\x00\x00\x00(\x00\x00\x00.\x00\x00\x00\x0f\x00\x00\x00\x9e\x01\x00\x00E\x02\x00\x00f\x01\x00\x00\xcf\x00\x00\x00K\x01\x00\x008\x00\x00\x00\xa6\x00\x00\x00b\x00\x00\x00\x03\x01\x00\x00\x81\x01\x00\x00@\x00\x00\x00\xe6\x01\x00\x00\xf1\x01\x00\x00\x11\x02\x00\x00{\x01\x00\x00\xf3\x01\x00\x00\x1b\x01\x00\x00\xa9\x01\x00\x00A\x00\x00\x00(\x02\x00\x00\x7f\x00\x00\x00\xc3\x00\x00\x00\x8b\x00\x00\x00\xeb\x01\x00\x00\xee\x00\x00\x00\x87\x00\x00\x00\r\x00\x00\x00Q\x00\x00\x00\r\x02\x00\x00\x04\x00\x00\x00\xb4\x01\x00\x00\xfd\x01\x00\x00-\x02\x00\x00\xdc\x00\x00\x00\xd6\x01\x00\x00O\x00\x00\x00\x86\x00\x00\x00o\x00\x00\x00u\x00\x00\x00-\x00\x00\x00r\x00\x00\x00\x02\x00\x00\x00n\x01\x00\x00\xea\x01\x00\x00\x80\x00\x00\x00O\x02\x00\x00m\x01\x00\x00\xe3\x00\x00\x00\\\x00\x00\x00\x0c\x00\x00\x00V\x01\x00\x00\x08\x02\x00\x00\x00\x01\x00\x00|\x00\x00\x005\x01\x00\x00\xe9\x01\x00\x00N\x01\x00\x00s\x01\x00\x00\xaa\x01\x00\x00\x11\x00\x00\x00W\x00\x00\x00\xbb\x01\x00\x00p\x00\x00\x00n\x00\x00\x007\x01\x00\x00:\x02\x00\x00\x16\x02\x00\x00\xac\x00\x00\x009\x01\x00\x00\xbd\x00\x00\x00\x06\x02\x00\x00\x15\x01\x00\x00U\x01\x00\x00\x05\x01\x00\x004\x02\x00\x000\x00\x00\x00V\x00\x00\x008\x01\x00\x00j\x01\x00\x00J\x01\x00\x00\x91\x00\x00\x00\xb2\x01\x00\x00{\x00\x00\x00\x9f\x01\x00\x00 \x01\x00\x00<\x01\x00\x00\xf5\x01\x00\x001\x01\x00\x00\xd0\x01\x00\x00\x01\x02\x00\x00\xbf\x01\x00\x00?\x00\x00\x00T\x02\x00\x00\x06\x01\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4871
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4872
(g4870
S'\x06\x01\x00\x00'
tRp4873
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4874
I01
sb.