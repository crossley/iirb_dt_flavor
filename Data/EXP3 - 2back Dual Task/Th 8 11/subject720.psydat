ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject720
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 720
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vmale 
p31
sS'age'
p32
V21
p33
ssS'loopsUnfinished'
p34
(lp35
g1
(cpsychopy.data
TrialHandler
p36
g3
NtRp37
(dp38
S'origin'
p39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p40
sS'thisTrial'
p41
I10
sS'_exp'
p42
I74033456
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p43
sS'thisRepN'
p44
I54
sg27
I01
sg28
NsS'data'
p45
g1
(cpsychopy.data
DataHandler
p46
c__builtin__
dict
p47
(dp48
S'ran'
p49
cnumpy.ma.core
_mareconstruct
p50
(cnumpy.ma.core
MaskedArray
p51
cnumpy
ndarray
p52
(I0
tp53
S'b'
tRp54
(I1
(I11
I55
tcnumpy
dtype
p55
(S'f4'
I0
I1
tRp56
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p57
g50
(g51
g52
g53
S'b'
tRp58
(I1
(I11
I55
tg56
I00
S'\x00\x00PA\x00\x00`A\x00\x00\xd0A\x00\x00\xe8A\x00\x00\x08B\x00\x00\x80B\x00\x00\x82B\x00\x00\x92B\x00\x00\x96B\x00\x00\x9cB\x00\x00\xb4B\x00\x00\xcaB\x00\x00\xd0B\x00\x00\xe2B\x00\x00\xf0B\x00\x00\x05C\x00\x00\x15C\x00\x00\x17C\x00\x00\x1bC\x00\x00\x1eC\x00\x00 C\x00\x00(C\x00\x00CC\x00\x00JC\x00\x00TC\x00\x00dC\x00\x00fC\x00\x00gC\x00\x00sC\x00\x00}C\x00\x00\x83C\x00\x80\x84C\x00\x00\x94C\x00\x00\x96C\x00\x80\x99C\x00\x00\x9fC\x00\x80\xa5C\x00\x00\xacC\x00\x00\xb2C\x00\x80\xbfC\x00\x80\xc5C\x00\x00\xc6C\x00\x00\xd7C\x00\x80\xd9C\x00\x80\xe1C\x00\x00\xeeC\x00\x00\xf1C\x00\x80\xf5C\x00\x80\xfdC\x00@\x01D\x00\x80\x02D\x00@\x0cD\x00@\x0eD\x00\x80\x0eD\x00@\x10D\x00\x00\x88A\x00\x00\xd8A\x00\x00 B\x00\x00`B\x00\x00hB\x00\x00\x9eB\x00\x00\xa6B\x00\x00\xd4B\x00\x00\xeaB\x00\x00\xf2B\x00\x00\xf6B\x00\x00\x07C\x00\x00\x0fC\x00\x00\x1aC\x00\x00"C\x00\x00<C\x00\x00]C\x00\x00`C\x00\x00cC\x00\x00kC\x00\x00qC\x00\x00wC\x00\x80\x8bC\x00\x00\x95C\x00\x80\x9aC\x00\x00\x9cC\x00\x00\x9eC\x00\x80\x9eC\x00\x80\xa2C\x00\x00\xb0C\x00\x00\xb4C\x00\x80\xb4C\x00\x80\xb6C\x00\x80\xb8C\x00\x00\xbeC\x00\x80\xc0C\x00\x80\xceC\x00\x00\xcfC\x00\x80\xd1C\x00\x80\xd2C\x00\x80\xd6C\x00\x80\xd8C\x00\x00\xe4C\x00\x00\xebC\x00\x80\xedC\x00\x80\xfaC\x00\x80\xfeC\x00\x00\x00D\x00\x00\x02D\x00\xc0\x02D\x00\x00\x10D\x00\x00\x11D\x00@\x11D\x00@\x12D\x00\x00\x00\x00\x00\x00@A\x00\x00\xb8A\x00\x00\xf8A\x00\x00DB\x00\x00\x8cB\x00\x00\xa2B\x00\x00\xb2B\x00\x00\xbeB\x00\x00\xccB\x00\x00\xd2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xfaB\x00\x00\x10C\x00\x00\x1fC\x00\x00\'C\x00\x00.C\x00\x00>C\x00\x00@C\x00\x00GC\x00\x00iC\x00\x00tC\x00\x00\x81C\x00\x80\x85C\x00\x80\x88C\x00\x00\x89C\x00\x00\x99C\x00\x80\x9bC\x00\x80\xa3C\x00\x80\xa9C\x00\x80\xadC\x00\x00\xafC\x00\x80\xb5C\x00\x00\xb7C\x00\x00\xc0C\x00\x80\xc2C\x00\x00\xc4C\x00\x00\xc8C\x00\x00\xceC\x00\x80\xd0C\x00\x80\xdbC\x00\x80\xdeC\x00\x00\xe0C\x00\x80\xe3C\x00\x00\xefC\x00\x00\xfaC\x00\x00\x08D\x00\xc0\x08D\x00\x80\nD\x00\xc0\nD\x00\x80\x0bD\x00\xc0\rD\x00\x80\x0fD\x00\xc0\x12D\x00\x00\x00\x00\x00\x00@@\x00\x00TB\x00\x00\\B\x00\x00dB\x00\x00|B\x00\x00\xd6B\x00\x00\xdcB\x00\x00\x02C\x00\x00\x03C\x00\x00\tC\x00\x00\x0bC\x00\x00+C\x00\x005C\x00\x009C\x00\x00=C\x00\x00LC\x00\x00ZC\x00\x00aC\x00\x00nC\x00\x00vC\x00\x00xC\x00\x80\x86C\x00\x00\x8bC\x00\x80\x8cC\x00\x00\x91C\x00\x00\x97C\x00\x00\x9dC\x00\x80\xa4C\x00\x00\xa5C\x00\x80\xa7C\x00\x00\xadC\x00\x00\xb5C\x00\x00\xb6C\x00\x00\xb9C\x00\x80\xbcC\x00\x80\xc6C\x00\x00\xc7C\x00\x00\xc9C\x00\x00\xcaC\x00\x00\xd2C\x00\x00\xdaC\x00\x80\xe4C\x00\x00\xe7C\x00\x80\xefC\x00\x00\xf2C\x00\x00\xf4C\x00\x80\xf7C\x00\x00\x03D\x00\x00\x05D\x00@\x06D\x00\x00\x07D\x00\xc0\x0cD\x00\xc0\x0fD\x00\xc0\x13D\x00\xc0\x14D\x00\x00pA\x00\x00\x04B\x00\x000B\x00\x00@B\x00\x00lB\x00\x00tB\x00\x00\xecB\x00\x00&C\x00\x00*C\x00\x00BC\x00\x00MC\x00\x00QC\x00\x00XC\x00\x00uC\x00\x00zC\x00\x00|C\x00\x00\x8dC\x00\x80\x91C\x00\x00\x92C\x00\x80\x98C\x00\x80\x9fC\x00\x00\xa6C\x00\x80\xa6C\x00\x80\xabC\x00\x00\xaeC\x00\x00\xb1C\x00\x80\xb3C\x00\x00\xb8C\x00\x00\xbcC\x00\x80\xbdC\x00\x00\xc5C\x00\x00\xcbC\x00\x80\xdaC\x00\x80\xe9C\x00\x00\xecC\x00\x80\xeeC\x00\x80\xf0C\x00\x80\xf4C\x00\x00\xf8C\x00\x00\xf9C\x00\x00\x01D\x00@\x02D\x00\x80\x03D\x00\xc0\x03D\x00@\x04D\x00\x80\x04D\x00\xc0\x04D\x00\x80\x06D\x00\xc0\x06D\x00@\tD\x00\xc0\tD\x00@\x0bD\x00@\x0fD\x00\xc0\x11D\x00@\x15D\x00\x00\x00\x00\x00\x00\xc0@\x00\x000A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xc8A\x00\x00\x18B\x00\x00\x1cB\x00\x004B\x00\x00<B\x00\x00\x86B\x00\x00\x88B\x00\x00\x94B\x00\x00\xc6B\x00\x00\xf8B\x00\x00\x01C\x00\x00\x04C\x00\x00\x08C\x00\x00\x11C\x00\x00#C\x00\x00?C\x00\x00KC\x00\x00^C\x00\x00pC\x00\x00\x7fC\x00\x80\x80C\x00\x00\x84C\x00\x80\x89C\x00\x00\x8aC\x00\x00\x8cC\x00\x80\x8dC\x00\x80\x8fC\x00\x80\x90C\x00\x80\x92C\x00\x00\x9bC\x00\x80\xa0C\x00\x80\xb7C\x00\x00\xc2C\x00\x80\xc4C\x00\x80\xc9C\x00\x80\xcfC\x00\x00\xd3C\x00\x80\xd3C\x00\x80\xd5C\x00\x80\xdcC\x00\x00\xeaC\x00\x80\xf2C\x00\xc0\x00D\x00\x00\x04D\x00\x00\x0bD\x00\x00\x0eD\x00\xc0\x10D\x00\x80\x11D\x00\x00\x14D\x00\x00\x00\x00\x00\x00\xe0@\x00\x00\xb0A\x00\x00\x0cB\x00\x00\x10B\x00\x00(B\x00\x008B\x00\x00\x9aB\x00\x00\xa4B\x00\x00\xaaB\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xc0B\x00\x00\xc4B\x00\x00\xd8B\x00\x00\xdeB\x00\x00\xf4B\x00\x00\xfeB\x00\x00\x06C\x00\x00\x0eC\x00\x00\x16C\x00\x00\x19C\x00\x00\x1dC\x00\x00/C\x00\x00;C\x00\x00AC\x00\x00EC\x00\x00VC\x00\x00eC\x00\x00jC\x00\x00{C\x00\x00\x82C\x00\x00\x86C\x00\x00\x8eC\x00\x00\x8fC\x00\x00\x9aC\x00\x80\xa1C\x00\x00\xa8C\x00\x00\xa9C\x00\x80\xaaC\x00\x80\xb0C\x00\x00\xbaC\x00\x80\xbeC\x00\x00\xc1C\x00\x80\xc7C\x00\x80\xd4C\x00\x00\xdbC\x00\x80\xe2C\x00\x80\xe6C\x00\x80\xe7C\x00\x00\xfdC\x00\x00\tD\x00@\x13D\x00\x00\x15D\x00\x80\x15D\x00\x00\x00\x00\x00\x00\x00@\x00\x00\xa0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x00\xc0A\x00\x00\xe0A\x00\x00$B\x00\x00xB\x00\x00\x98B\x00\x00\xa8B\x00\x00\xbcB\x00\x00\xceB\x00\x00\xe0B\x00\x00\xfcB\x00\x00\x00C\x00\x00\nC\x00\x00\x1cC\x00\x00$C\x00\x000C\x00\x002C\x00\x003C\x00\x00DC\x00\x00NC\x00\x00RC\x00\x00oC\x00\x00rC\x00\x00~C\x00\x80\x82C\x00\x80\x87C\x00\x80\x8aC\x00\x80\x8eC\x00\x80\x9cC\x00\x00\xa1C\x00\x00\xa4C\x00\x80\xacC\x00\x80\xafC\x00\x00\xcdC\x00\x00\xd9C\x00\x00\xdeC\x00\x00\xe6C\x00\x80\xe8C\x00\x80\xecC\x00\x80\xf1C\x00\x00\xf3C\x00\x00\xfeC\x00\x00\xffC\x00@\x00D\x00\x80\x01D\x00@\x07D\x00\x80\x07D\x00@\x08D\x00\x00\x0cD\x00\xc0\x0eD\x00\x80\x10D\x00\x00\x80@\x00\x00\x80A\x00\x00\x14B\x00\x00LB\x00\x00\x90B\x00\x00\xb6B\x00\x00\xc8B\x00\x00\xe8B\x00\x00\x18C\x00\x00%C\x00\x00,C\x00\x008C\x00\x00FC\x00\x00HC\x00\x00OC\x00\x00SC\x00\x00UC\x00\x00YC\x00\x00_C\x00\x00bC\x00\x00hC\x00\x00yC\x00\x00\x85C\x00\x00\x88C\x00\x00\x98C\x00\x00\xa0C\x00\x00\xa7C\x00\x00\xaaC\x00\x00\xabC\x00\x80\xaeC\x00\x80\xb1C\x00\x00\xb3C\x00\x80\xb9C\x00\x00\xbdC\x00\x80\xc1C\x00\x00\xccC\x00\x80\xd7C\x00\x00\xd8C\x00\x80\xe0C\x00\x00\xe5C\x00\x80\xe5C\x00\x00\xf0C\x00\x00\xf5C\x00\x80\xf8C\x00\x80\xf9C\x00\x00\xfbC\x00\x80\xfbC\x00\xc0\x01D\x00@\x03D\x00\x00\x06D\x00@\rD\x00\x80\rD\x00\x00\x0fD\x00\x00\x13D\x00\x00\x00\x00\x00\x00\x00B\x00\x00XB\x00\x00\xacB\x00\x00\xc2B\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00!C\x00\x00)C\x00\x001C\x00\x004C\x00\x006C\x00\x007C\x00\x00:C\x00\x00WC\x00\x00[C\x00\x00\\C\x00\x00\x80C\x00\x80\x81C\x00\x80\x83C\x00\x00\x87C\x00\x00\x90C\x00\x80\x94C\x00\x80\x9dC\x00\x80\xa8C\x00\x80\xb2C\x00\x80\xbaC\x00\x80\xbbC\x00\x00\xbfC\x00\x80\xc3C\x00\x80\xc8C\x00\x80\xcaC\x00\x80\xcbC\x00\x80\xccC\x00\x00\xd0C\x00\x00\xd5C\x00\x00\xddC\x00\x00\xdfC\x00\x80\xdfC\x00\x00\xe1C\x00\x00\xe3C\x00\x00\xe8C\x00\x00\xe9C\x00\x80\xeaC\x00\x80\xebC\x00\x80\xf6C\x00\x80\xffC\x00\x80\x00D\x00@\nD\x00\xc0\x0bD\x00\x80\x0cD\x00\x00\rD\x00\x00\x12D\x00\x80\x12D\x00\x80\x13D\x00\x00\x80?\x00\x00\x90A\x00\x00\xa8A\x00\x00\xf0A\x00\x00,B\x00\x00HB\x00\x00PB\x00\x00pB\x00\x00\x84B\x00\x00\x8aB\x00\x00\x8eB\x00\x00\xa0B\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xdaB\x00\x00\xeeB\x00\x00\x0cC\x00\x00\rC\x00\x00-C\x00\x00IC\x00\x00PC\x00\x00lC\x00\x00mC\x00\x00\x93C\x00\x80\x93C\x00\x80\x95C\x00\x80\x96C\x00\x80\x97C\x00\x00\xa2C\x00\x00\xa3C\x00\x00\xbbC\x00\x00\xc3C\x00\x80\xcdC\x00\x00\xd1C\x00\x00\xd4C\x00\x00\xd6C\x00\x00\xdcC\x00\x80\xddC\x00\x00\xe2C\x00\x00\xedC\x00\x80\xf3C\x00\x00\xf6C\x00\x00\xf7C\x00\x00\xfcC\x00\x80\xfcC\x00@\x05D\x00\x80\x05D\x00\xc0\x05D\x00\xc0\x07D\x00\x80\x08D\x00\x80\tD\x00\x00\nD\x00@\x14D\x00\x80\x14D\x00\xc0\x15D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp59
(dp60
S'isNumeric'
p61
(dp62
g49
I01
sg57
I01
ssS'trials'
p63
g37
sS'dataTypes'
p64
(lp65
g49
ag57
asS'dataShape'
p66
(lp67
I11
aI55
asbsS'method'
p68
S'fullRandom'
p69
sS'sequenceIndices'
p70
cnumpy.core.multiarray
_reconstruct
p71
(g52
(I0
tS'b'
tRp72
(I1
(I11
I55
tg55
(S'O4'
I0
I1
tRp73
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp74
I5
aI5
aI6
aI4
aI4
aI3
aI10
aI6
aI10
aI5
aI3
aI1
aI5
aI1
aI1
aI8
aI7
aI6
aI8
aI4
aI9
aI0
aI7
aI0
aI5
aI5
aI6
aI9
aI6
aI4
aI3
aI6
aI1
aI2
aI10
aI1
aI0
aI9
aI10
aI1
aI10
aI0
aI3
aI7
aI3
aI3
aI6
aI0
aI5
aI4
aI10
aI0
aI8
aI4
aI10
aI10
aI2
aI2
aI0
aI5
aI1
aI5
aI0
aI2
aI8
aI6
aI6
aI0
aI2
aI0
aI4
aI9
aI1
aI2
aI7
aI1
aI8
aI0
aI7
aI0
aI5
aI5
aI1
aI1
aI8
aI0
aI8
aI6
aI3
aI9
aI6
aI3
aI8
aI1
aI0
aI5
aI10
aI6
aI10
aI5
aI4
aI0
aI7
aI4
aI3
aI4
aI9
aI4
aI9
aI3
aI7
aI0
aI7
aI6
aI6
aI3
aI5
aI1
aI0
aI0
aI7
aI1
aI6
aI5
aI7
aI2
aI7
aI3
aI8
aI8
aI5
aI2
aI2
aI5
aI8
aI7
aI9
aI10
aI5
aI5
aI4
aI4
aI4
aI1
aI4
aI8
aI3
aI9
aI3
aI8
aI9
aI6
aI9
aI1
aI7
aI8
aI7
aI8
aI4
aI7
aI10
aI3
aI2
aI1
aI6
aI3
aI0
aI5
aI6
aI5
aI1
aI10
aI10
aI8
aI2
aI0
aI5
aI1
aI9
aI6
aI0
aI7
aI2
aI10
aI0
aI8
aI6
aI4
aI9
aI2
aI3
aI5
aI0
aI2
aI7
aI4
aI0
aI8
aI2
aI3
aI5
aI6
aI7
aI1
aI8
aI10
aI9
aI7
aI0
aI10
aI4
aI1
aI1
aI4
aI7
aI9
aI9
aI3
aI9
aI4
aI8
aI4
aI0
aI8
aI4
aI4
aI2
aI2
aI6
aI7
aI2
aI2
aI5
aI9
aI0
aI9
aI9
aI5
aI0
aI8
aI1
aI1
aI3
aI5
aI6
aI1
aI3
aI10
aI1
aI6
aI8
aI7
aI0
aI5
aI8
aI2
aI2
aI10
aI5
aI1
aI7
aI2
aI9
aI4
aI3
aI8
aI7
aI4
aI3
aI10
aI2
aI8
aI1
aI2
aI6
aI7
aI8
aI1
aI5
aI2
aI10
aI10
aI6
aI6
aI0
aI2
aI7
aI3
aI9
aI2
aI4
aI3
aI2
aI5
aI6
aI3
aI10
aI1
aI2
aI3
aI5
aI4
aI3
aI7
aI10
aI3
aI3
aI9
aI4
aI4
aI10
aI9
aI2
aI5
aI7
aI2
aI1
aI4
aI2
aI4
aI2
aI9
aI0
aI10
aI2
aI2
aI8
aI0
aI8
aI10
aI5
aI1
aI7
aI5
aI10
aI4
aI8
aI1
aI7
aI2
aI8
aI6
aI7
aI0
aI0
aI3
aI9
aI6
aI3
aI9
aI8
aI10
aI3
aI9
aI9
aI3
aI4
aI10
aI3
aI1
aI6
aI2
aI8
aI1
aI1
aI9
aI3
aI1
aI10
aI0
aI9
aI3
aI5
aI3
aI8
aI1
aI1
aI1
aI10
aI7
aI5
aI2
aI7
aI6
aI1
aI6
aI10
aI0
aI1
aI8
aI7
aI0
aI7
aI2
aI1
aI1
aI7
aI3
aI6
aI9
aI8
aI9
aI4
aI4
aI4
aI1
aI3
aI8
aI6
aI7
aI4
aI5
aI8
aI9
aI10
aI9
aI4
aI4
aI3
aI6
aI2
aI5
aI1
aI6
aI3
aI9
aI8
aI9
aI8
aI0
aI8
aI7
aI3
aI10
aI10
aI4
aI5
aI5
aI9
aI6
aI7
aI5
aI10
aI7
aI10
aI3
aI5
aI6
aI6
aI3
aI4
aI5
aI10
aI0
aI1
aI10
aI8
aI0
aI7
aI8
aI0
aI7
aI4
aI7
aI8
aI5
aI10
aI4
aI1
aI2
aI6
aI8
aI1
aI8
aI9
aI5
aI3
aI5
aI9
aI4
aI2
aI8
aI1
aI4
aI10
aI8
aI9
aI8
aI8
aI2
aI2
aI0
aI1
aI3
aI8
aI7
aI5
aI2
aI6
aI3
aI0
aI0
aI9
aI9
aI6
aI10
aI3
aI10
aI8
aI5
aI2
aI3
aI7
aI8
aI3
aI6
aI5
aI6
aI0
aI2
aI6
aI10
aI2
aI1
aI7
aI2
aI2
aI1
aI6
aI0
aI4
aI9
aI9
aI5
aI6
aI8
aI7
aI9
aI0
aI9
aI10
aI5
aI4
aI3
aI6
aI9
aI0
aI1
aI5
aI2
aI7
aI10
aI9
aI10
aI9
aI0
aI7
aI10
aI6
aI10
aI0
aI3
aI6
aI6
aI7
aI6
aI9
aI6
aI10
aI9
aI0
aI1
aI4
aI9
aI2
aI7
aI0
aI0
aI0
aI3
aI8
aI7
aI3
aI9
aI2
aI0
aI4
aI2
aI10
aI2
aI9
aI6
aI4
aI7
aI10
aI10
aI4
aI4
aI4
aI4
aI7
aI7
aI5
aI10
aI5
atbsS'finished'
p75
I00
sS'nReps'
p76
I55
sS'nRemaining'
p77
I5
sS'trialList'
p78
(lp79
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p80
NsS'thisIndex'
p81
I10
sS'thisN'
p82
I599
sS'thisTrialN'
p83
I5
sS'nTotal'
p84
I605
sS'_warnUseOfNext'
p85
I01
sbasS'saveWideText'
p86
I01
sS'thisEntry'
p87
(dp88
sS'version'
p89
S''
sS'_paramNamesSoFar'
p90
(lp91
sS'entries'
p92
(lp93
(dp94
g16
(lp95
S'd'
asS'.thisTrial'
p96
I5
sS'.thisRepN'
p97
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p98
I0
sS'.thisN'
p99
I0
sS'.thisIndex'
p100
I5
sg15
(lp101
S'd'
asg17
S'Y'
sg14
I1
sa(dp102
g16
(lp103
S'k'
asg96
I10
sS'.thisRepN'
p104
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p105
I1
sS'.thisN'
p106
I1
sS'.thisIndex'
p107
I10
sg15
(lp108
S'k'
asg17
S'Y'
sg14
I1
sa(dp109
g16
(lp110
S'k'
asg18
S'Y'
sS'.thisRepN'
p111
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p112
I2
sS'.thisN'
p113
I2
sS'.thisIndex'
p114
I7
sg15
(lp115
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp116
S'space'
p117
asg96
I7
sa(dp118
g16
(lp119
S'd'
asg18
S'N'
sS'.thisRepN'
p120
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p121
I3
sS'.thisN'
p122
I3
sS'.thisIndex'
p123
I3
sg15
(lp124
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I3
sa(dp125
g16
(lp126
S'k'
asg18
S'N'
sS'.thisRepN'
p127
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p128
I4
sS'.thisN'
p129
I4
sS'.thisIndex'
p130
I8
sg15
(lp131
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I8
sa(dp132
g16
(lp133
S'd'
asg18
S'N'
sS'.thisRepN'
p134
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p135
I5
sS'.thisN'
p136
I5
sS'.thisIndex'
p137
I7
sg15
(lp138
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I7
sa(dp139
g16
(lp140
S'd'
asg18
S'Y'
sS'.thisRepN'
p141
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p142
I6
sS'.thisN'
p143
I6
sS'.thisIndex'
p144
I5
sg15
(lp145
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp146
S'space'
p147
asg96
I5
sa(dp148
g16
(lp149
S'k'
asg18
S'N'
sS'.thisRepN'
p150
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p151
I7
sS'.thisN'
p152
I7
sS'.thisIndex'
p153
I6
sg15
(lp154
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp155
g16
(lp156
S'd'
asg18
S'N'
sS'.thisRepN'
p157
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p158
I8
sS'.thisN'
p159
I8
sS'.thisIndex'
p160
I7
sg15
(lp161
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I7
sa(dp162
g16
(lp163
S'k'
asg18
S'N'
sS'.thisRepN'
p164
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p165
I9
sS'.thisN'
p166
I9
sS'.thisIndex'
p167
I7
sg15
(lp168
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp169
S'space'
p170
asg96
I7
sa(dp171
g16
(lp172
S'k'
asg18
S'N'
sS'.thisRepN'
p173
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p174
I10
sS'.thisN'
p175
I10
sS'.thisIndex'
p176
I7
sg15
(lp177
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I7
sa(dp178
g16
(lp179
S'k'
asg18
S'N'
sS'.thisRepN'
p180
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p181
I0
sS'.thisN'
p182
I11
sS'.thisIndex'
p183
I5
sg15
(lp184
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp185
g16
(lp186
S'k'
asg18
S'N'
sS'.thisRepN'
p187
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p188
I1
sS'.thisN'
p189
I12
sS'.thisIndex'
p190
I2
sg15
(lp191
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp192
g16
(lp193
S'd'
asg18
S'Y'
sS'.thisRepN'
p194
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p195
I2
sS'.thisN'
p196
I13
sS'.thisIndex'
p197
I0
sg15
(lp198
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp199
S'space'
p200
asg96
I0
sa(dp201
g16
(lp202
S'd'
asg18
S'N'
sS'.thisRepN'
p203
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p204
I3
sS'.thisN'
p205
I14
sS'.thisIndex'
p206
I0
sg15
(lp207
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I0
sa(dp208
g16
(lp209
S'd'
asg18
S'N'
sS'.thisRepN'
p210
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p211
I4
sS'.thisN'
p212
I15
sS'.thisIndex'
p213
I4
sg15
(lp214
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I4
sa(dp215
g16
(lp216
S'd'
asg18
S'Y'
sS'.thisRepN'
p217
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p218
I5
sS'.thisN'
p219
I16
sS'.thisIndex'
p220
I8
sg15
(lp221
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp222
S'space'
p223
asg96
I8
sa(dp224
g16
(lp225
S'd'
asg18
S'Y'
sS'.thisRepN'
p226
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p227
I6
sS'.thisN'
p228
I17
sS'.thisIndex'
p229
I1
sg15
(lp230
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp231
S'space'
p232
asg96
I1
sa(dp233
g16
(lp234
S'd'
asg18
S'Y'
sS'.thisRepN'
p235
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p236
I7
sS'.thisN'
p237
I18
sS'.thisIndex'
p238
I10
sg15
(lp239
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp240
S'space'
p241
asg96
I10
sa(dp242
g16
(lp243
S'd'
asg18
S'Y'
sS'.thisRepN'
p244
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p245
I8
sS'.thisN'
p246
I19
sS'.thisIndex'
p247
I5
sg15
(lp248
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp249
S'space'
p250
asg96
I5
sa(dp251
g16
(lp252
S'd'
asg18
S'N'
sS'.thisRepN'
p253
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p254
I9
sS'.thisN'
p255
I20
sS'.thisIndex'
p256
I5
sg15
(lp257
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I5
sa(dp258
g16
(lp259
S'd'
asg18
S'Y'
sS'.thisRepN'
p260
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p261
I10
sS'.thisN'
p262
I21
sS'.thisIndex'
p263
I10
sg15
(lp264
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp265
S'space'
p266
asg96
I10
sa(dp267
g16
(lp268
S'd'
asg18
S'Y'
sS'.thisRepN'
p269
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p270
I0
sS'.thisN'
p271
I22
sS'.thisIndex'
p272
I6
sg15
(lp273
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp274
S'space'
p275
asg96
I6
sa(dp276
g16
(lp277
S'k'
asg18
S'Y'
sS'.thisRepN'
p278
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p279
I1
sS'.thisN'
p280
I23
sS'.thisIndex'
p281
I2
sg15
(lp282
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp283
S'space'
p284
asg96
I2
sa(dp285
g16
(lp286
S'd'
asg18
S'N'
sS'.thisRepN'
p287
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p288
I2
sS'.thisN'
p289
I24
sS'.thisIndex'
p290
I7
sg15
(lp291
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I7
sa(dp292
g16
(lp293
S'd'
asg18
S'N'
sS'.thisRepN'
p294
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p295
I3
sS'.thisN'
p296
I25
sS'.thisIndex'
p297
I5
sg15
(lp298
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp299
S'space'
p300
asg96
I5
sa(dp301
g16
(lp302
S'd'
asg18
S'N'
sS'.thisRepN'
p303
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p304
I4
sS'.thisN'
p305
I26
sS'.thisIndex'
p306
I0
sg15
(lp307
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I0
sa(dp308
g16
(lp309
S'd'
asg18
S'N'
sS'.thisRepN'
p310
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p311
I5
sS'.thisN'
p312
I27
sS'.thisIndex'
p313
I1
sg15
(lp314
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I1
sa(dp315
g16
(lp316
S'k'
asg18
S'Y'
sS'.thisRepN'
p317
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p318
I6
sS'.thisN'
p319
I28
sS'.thisIndex'
p320
I7
sg15
(lp321
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp322
S'space'
p323
asg96
I7
sa(dp324
g16
(lp325
S'k'
asg18
S'N'
sS'.thisRepN'
p326
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p327
I7
sS'.thisN'
p328
I29
sS'.thisIndex'
p329
I0
sg15
(lp330
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp331
S'space'
p332
asg96
I0
sa(dp333
g16
(lp334
S'd'
asg18
S'N'
sS'.thisRepN'
p335
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p336
I8
sS'.thisN'
p337
I30
sS'.thisIndex'
p338
I10
sg15
(lp339
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I10
sa(dp340
g16
(lp341
S'd'
asg18
S'N'
sS'.thisRepN'
p342
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p343
I9
sS'.thisN'
p344
I31
sS'.thisIndex'
p345
I2
sg15
(lp346
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I2
sa(dp347
g16
(lp348
S'k'
asg18
S'N'
sS'.thisRepN'
p349
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p350
I10
sS'.thisN'
p351
I32
sS'.thisIndex'
p352
I9
sg15
(lp353
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I9
sa(dp354
g16
(lp355
S'd'
asg18
S'Y'
sS'.thisRepN'
p356
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p357
I0
sS'.thisN'
p358
I33
sS'.thisIndex'
p359
I4
sg15
(lp360
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp361
S'space'
p362
asg96
I4
sa(dp363
g16
(lp364
S'd'
asg18
S'Y'
sS'.thisRepN'
p365
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p366
I1
sS'.thisN'
p367
I34
sS'.thisIndex'
p368
I0
sg15
(lp369
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp370
S'space'
p371
asg96
I0
sa(dp372
g16
(lp373
S'd'
asg18
S'Y'
sS'.thisRepN'
p374
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p375
I2
sS'.thisN'
p376
I35
sS'.thisIndex'
p377
I6
sg15
(lp378
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp379
S'space'
p380
asg96
I6
sa(dp381
g16
(lp382
S'k'
asg18
S'N'
sS'.thisRepN'
p383
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p384
I3
sS'.thisN'
p385
I36
sS'.thisIndex'
p386
I6
sg15
(lp387
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I6
sa(dp388
g16
(lp389
S'd'
asg18
S'Y'
sS'.thisRepN'
p390
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p391
I4
sS'.thisN'
p392
I37
sS'.thisIndex'
p393
I8
sg15
(lp394
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp395
S'space'
p396
asg96
I8
sa(dp397
g16
(lp398
S'd'
asg18
S'Y'
sS'.thisRepN'
p399
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p400
I5
sS'.thisN'
p401
I38
sS'.thisIndex'
p402
I5
sg15
(lp403
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp404
S'space'
p405
asg96
I5
sa(dp406
g16
(lp407
S'k'
asg18
S'N'
sS'.thisRepN'
p408
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p409
I6
sS'.thisN'
p410
I39
sS'.thisIndex'
p411
I5
sg15
(lp412
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp413
g16
(lp414
S'd'
asg18
S'N'
sS'.thisRepN'
p415
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p416
I7
sS'.thisN'
p417
I40
sS'.thisIndex'
p418
I1
sg15
(lp419
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I1
sa(dp420
g16
(lp421
S'd'
asg18
S'Y'
sS'.thisRepN'
p422
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p423
I8
sS'.thisN'
p424
I41
sS'.thisIndex'
p425
I7
sg15
(lp426
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp427
S'space'
p428
asg96
I7
sa(dp429
g16
(lp430
S'd'
asg18
S'Y'
sS'.thisRepN'
p431
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p432
I9
sS'.thisN'
p433
I42
sS'.thisIndex'
p434
I6
sg15
(lp435
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp436
S'space'
p437
asg96
I6
sa(dp438
g16
(lp439
S'k'
asg18
S'Y'
sS'.thisRepN'
p440
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p441
I10
sS'.thisN'
p442
I43
sS'.thisIndex'
p443
I10
sg15
(lp444
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp445
S'space'
p446
asg96
I10
sa(dp447
g16
(lp448
S'k'
asg18
S'Y'
sS'.thisRepN'
p449
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p450
I0
sS'.thisN'
p451
I44
sS'.thisIndex'
p452
I4
sg15
(lp453
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp454
S'space'
p455
asg96
I4
sa(dp456
g16
(lp457
S'k'
asg18
S'N'
sS'.thisRepN'
p458
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p459
I1
sS'.thisN'
p460
I45
sS'.thisIndex'
p461
I5
sg15
(lp462
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp463
g16
(lp464
S'd'
asg18
S'Y'
sS'.thisRepN'
p465
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p466
I2
sS'.thisN'
p467
I46
sS'.thisIndex'
p468
I6
sg15
(lp469
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp470
S'space'
p471
asg96
I6
sa(dp472
g16
(lp473
S'd'
asg18
S'Y'
sS'.thisRepN'
p474
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p475
I3
sS'.thisN'
p476
I47
sS'.thisIndex'
p477
I5
sg15
(lp478
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp479
S'space'
p480
asg96
I5
sa(dp481
g16
(lp482
S'k'
asg18
S'Y'
sS'.thisRepN'
p483
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p484
I4
sS'.thisN'
p485
I48
sS'.thisIndex'
p486
I4
sg15
(lp487
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp488
S'space'
p489
asg96
I4
sa(dp490
g16
(lp491
S'd'
asg18
S'Y'
sg22
I44
sS'.thisN'
p492
I49
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p493
I5
sS'.thisRepN'
p494
I4
sg21
I38
sS'.thisIndex'
p495
I2
sg23
I24
sg15
(lp496
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp497
g16
(lp498
S'k'
asg96
I10
sS'.thisRepN'
p499
I4
sg30
g31
sg32
g33
sS'.thisTrialN'
p500
I6
sS'.thisN'
p501
I50
sS'.thisIndex'
p502
I10
sg15
(lp503
S'k'
asg17
S'Y'
sg14
I2
sa(dp504
g16
(lp505
S'd'
asg96
I8
sS'.thisRepN'
p506
I4
sg30
g31
sg32
g33
sS'.thisTrialN'
p507
I7
sS'.thisN'
p508
I51
sS'.thisIndex'
p509
I8
sg15
(lp510
S'd'
asg17
S'Y'
sg14
I2
sa(dp511
g16
(lp512
S'k'
asg18
S'Y'
sS'.thisRepN'
p513
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p514
I8
sS'.thisN'
p515
I52
sS'.thisIndex'
p516
I10
sg15
(lp517
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp518
S'space'
p519
asg96
I10
sa(dp520
g16
(lp521
S'd'
asg18
S'Y'
sS'.thisRepN'
p522
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p523
I9
sS'.thisN'
p524
I53
sS'.thisIndex'
p525
I3
sg15
(lp526
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp527
S'space'
p528
asg96
I3
sa(dp529
g16
(lp530
S'k'
asg18
S'N'
sS'.thisRepN'
p531
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p532
I10
sS'.thisN'
p533
I54
sS'.thisIndex'
p534
I9
sg15
(lp535
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I9
sa(dp536
g16
(lp537
S'k'
asg18
S'Y'
sS'.thisRepN'
p538
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p539
I0
sS'.thisN'
p540
I55
sS'.thisIndex'
p541
I3
sg15
(lp542
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp543
S'space'
p544
asg96
I3
sa(dp545
g16
(lp546
S'd'
asg18
S'N'
sS'.thisRepN'
p547
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p548
I1
sS'.thisN'
p549
I56
sS'.thisIndex'
p550
I1
sg15
(lp551
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp552
g16
(lp553
S'k'
asg18
S'N'
sS'.thisRepN'
p554
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p555
I2
sS'.thisN'
p556
I57
sS'.thisIndex'
p557
I3
sg15
(lp558
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp559
g16
(lp560
S'd'
asg18
S'Y'
sS'.thisRepN'
p561
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p562
I3
sS'.thisN'
p563
I58
sS'.thisIndex'
p564
I1
sg15
(lp565
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp566
S'space'
p567
asg96
I1
sa(dp568
g16
(lp569
S'k'
asg18
S'N'
sS'.thisRepN'
p570
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p571
I4
sS'.thisN'
p572
I59
sS'.thisIndex'
p573
I4
sg15
(lp574
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I4
sa(dp575
g16
(lp576
S'k'
asg18
S'Y'
sS'.thisRepN'
p577
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p578
I5
sS'.thisN'
p579
I60
sS'.thisIndex'
p580
I10
sg15
(lp581
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp582
S'space'
p583
asg96
I10
sa(dp584
g16
(lp585
S'd'
asg18
S'Y'
sS'.thisRepN'
p586
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p587
I6
sS'.thisN'
p588
I61
sS'.thisIndex'
p589
I4
sg15
(lp590
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp591
S'space'
p592
asg96
I4
sa(dp593
g16
(lp594
S'd'
asg18
S'Y'
sS'.thisRepN'
p595
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p596
I7
sS'.thisN'
p597
I62
sS'.thisIndex'
p598
I7
sg15
(lp599
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp600
S'space'
p601
asg96
I7
sa(dp602
g16
(lp603
S'k'
asg18
S'Y'
sS'.thisRepN'
p604
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p605
I8
sS'.thisN'
p606
I63
sS'.thisIndex'
p607
I3
sg15
(lp608
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp609
S'space'
p610
asg96
I3
sa(dp611
g16
(lp612
S'k'
asg18
S'N'
sS'.thisRepN'
p613
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p614
I9
sS'.thisN'
p615
I64
sS'.thisIndex'
p616
I0
sg15
(lp617
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp618
g16
(lp619
S'd'
asg18
S'N'
sS'.thisRepN'
p620
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p621
I10
sS'.thisN'
p622
I65
sS'.thisIndex'
p623
I0
sg15
(lp624
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp625
S'space'
p626
asg96
I0
sa(dp627
g16
(lp628
S'k'
asg18
S'Y'
sS'.thisRepN'
p629
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p630
I0
sS'.thisN'
p631
I66
sS'.thisIndex'
p632
I10
sg15
(lp633
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp634
g16
(lp635
S'k'
asg18
S'N'
sS'.thisRepN'
p636
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p637
I1
sS'.thisN'
p638
I67
sS'.thisIndex'
p639
I5
sg15
(lp640
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp641
g16
(lp642
S'd'
asg18
S'N'
sS'.thisRepN'
p643
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p644
I2
sS'.thisN'
p645
I68
sS'.thisIndex'
p646
I5
sg15
(lp647
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp648
S'space'
p649
asg96
I5
sa(dp650
g16
(lp651
S'k'
asg18
S'N'
sS'.thisRepN'
p652
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p653
I3
sS'.thisN'
p654
I69
sS'.thisIndex'
p655
I10
sg15
(lp656
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp657
g16
(lp658
S'd'
asg18
S'N'
sS'.thisRepN'
p659
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p660
I4
sS'.thisN'
p661
I70
sS'.thisIndex'
p662
I2
sg15
(lp663
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp664
g16
(lp665
S'k'
asg18
S'Y'
sS'.thisRepN'
p666
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p667
I5
sS'.thisN'
p668
I71
sS'.thisIndex'
p669
I10
sg15
(lp670
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp671
S'space'
p672
asg96
I10
sa(dp673
g16
(lp674
S'k'
asg18
S'N'
sS'.thisRepN'
p675
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p676
I6
sS'.thisN'
p677
I72
sS'.thisIndex'
p678
I8
sg15
(lp679
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I8
sa(dp680
g16
(lp681
S'k'
asg18
S'Y'
sS'.thisRepN'
p682
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p683
I7
sS'.thisN'
p684
I73
sS'.thisIndex'
p685
I0
sg15
(lp686
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp687
S'space'
p688
asg96
I0
sa(dp689
g16
(lp690
S'd'
asg18
S'Y'
sS'.thisRepN'
p691
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p692
I8
sS'.thisN'
p693
I74
sS'.thisIndex'
p694
I5
sg15
(lp695
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp696
S'space'
p697
asg96
I5
sa(dp698
g16
(lp699
S'k'
asg18
S'Y'
sS'.thisRepN'
p700
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p701
I9
sS'.thisN'
p702
I75
sS'.thisIndex'
p703
I0
sg15
(lp704
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp705
S'space'
p706
asg96
I0
sa(dp707
g16
(lp708
S'k'
asg18
S'Y'
sS'.thisRepN'
p709
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p710
I10
sS'.thisN'
p711
I76
sS'.thisIndex'
p712
I7
sg15
(lp713
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp714
S'space'
p715
asg96
I7
sa(dp716
g16
(lp717
S'd'
asg18
S'N'
sS'.thisRepN'
p718
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p719
I0
sS'.thisN'
p720
I77
sS'.thisIndex'
p721
I6
sg15
(lp722
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I6
sa(dp723
g16
(lp724
S'd'
asg18
S'N'
sS'.thisRepN'
p725
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p726
I1
sS'.thisN'
p727
I78
sS'.thisIndex'
p728
I0
sg15
(lp729
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp730
g16
(lp731
S'k'
asg18
S'N'
sS'.thisRepN'
p732
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p733
I2
sS'.thisN'
p734
I79
sS'.thisIndex'
p735
I1
sg15
(lp736
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp737
g16
(lp738
S'd'
asg18
S'Y'
sS'.thisRepN'
p739
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p740
I3
sS'.thisN'
p741
I80
sS'.thisIndex'
p742
I10
sg15
(lp743
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp744
S'space'
p745
asg96
I10
sa(dp746
g16
(lp747
S'd'
asg18
S'Y'
sS'.thisRepN'
p748
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p749
I4
sS'.thisN'
p750
I81
sS'.thisIndex'
p751
I2
sg15
(lp752
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp753
S'space'
p754
asg96
I2
sa(dp755
g16
(lp756
S'k'
asg18
S'N'
sS'.thisRepN'
p757
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p758
I5
sS'.thisN'
p759
I82
sS'.thisIndex'
p760
I6
sg15
(lp761
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I6
sa(dp762
g16
(lp763
S'k'
asg18
S'N'
sS'.thisRepN'
p764
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p765
I6
sS'.thisN'
p766
I83
sS'.thisIndex'
p767
I1
sg15
(lp768
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp769
g16
(lp770
S'k'
asg18
S'N'
sS'.thisRepN'
p771
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p772
I7
sS'.thisN'
p773
I84
sS'.thisIndex'
p774
I7
sg15
(lp775
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I7
sa(dp776
g16
(lp777
S'k'
asg18
S'N'
sS'.thisRepN'
p778
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p779
I8
sS'.thisN'
p780
I85
sS'.thisIndex'
p781
I6
sg15
(lp782
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I6
sa(dp783
g16
(lp784
S'd'
asg18
S'Y'
sS'.thisRepN'
p785
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p786
I9
sS'.thisN'
p787
I86
sS'.thisIndex'
p788
I9
sg15
(lp789
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp790
S'space'
p791
asg96
I9
sa(dp792
g16
(lp793
S'd'
asg18
S'N'
sS'.thisRepN'
p794
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p795
I10
sS'.thisN'
p796
I87
sS'.thisIndex'
p797
I10
sg15
(lp798
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp799
g16
(lp800
S'd'
asg18
S'Y'
sS'.thisRepN'
p801
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p802
I0
sS'.thisN'
p803
I88
sS'.thisIndex'
p804
I10
sg15
(lp805
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp806
S'space'
p807
asg96
I10
sa(dp808
g16
(lp809
S'd'
asg18
S'N'
sS'.thisRepN'
p810
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p811
I1
sS'.thisN'
p812
I89
sS'.thisIndex'
p813
I2
sg15
(lp814
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp815
g16
(lp816
S'd'
asg18
S'N'
sS'.thisRepN'
p817
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p818
I2
sS'.thisN'
p819
I90
sS'.thisIndex'
p820
I0
sg15
(lp821
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp822
g16
(lp823
S'k'
asg18
S'Y'
sS'.thisRepN'
p824
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p825
I3
sS'.thisN'
p826
I91
sS'.thisIndex'
p827
I8
sg15
(lp828
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp829
S'space'
p830
asg96
I8
sa(dp831
g16
(lp832
S'k'
asg18
S'N'
sS'.thisRepN'
p833
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p834
I4
sS'.thisN'
p835
I92
sS'.thisIndex'
p836
I6
sg15
(lp837
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I6
sa(dp838
g16
(lp839
S'k'
asg18
S'Y'
sS'.thisRepN'
p840
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p841
I5
sS'.thisN'
p842
I93
sS'.thisIndex'
p843
I6
sg15
(lp844
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I6
sa(dp845
g16
(lp846
S'k'
asg18
S'N'
sS'.thisRepN'
p847
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p848
I6
sS'.thisN'
p849
I94
sS'.thisIndex'
p850
I7
sg15
(lp851
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I7
sa(dp852
g16
(lp853
S'd'
asg18
S'Y'
sS'.thisRepN'
p854
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p855
I7
sS'.thisN'
p856
I95
sS'.thisIndex'
p857
I2
sg15
(lp858
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp859
S'space'
p860
asg96
I2
sa(dp861
g16
(lp862
S'k'
asg18
S'Y'
sS'.thisRepN'
p863
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p864
I8
sS'.thisN'
p865
I96
sS'.thisIndex'
p866
I6
sg15
(lp867
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp868
S'space'
p869
asg96
I6
sa(dp870
g16
(lp871
S'k'
asg18
S'N'
sS'.thisRepN'
p872
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p873
I9
sS'.thisN'
p874
I97
sS'.thisIndex'
p875
I9
sg15
(lp876
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I9
sa(dp877
g16
(lp878
S'k'
asg18
S'Y'
sS'.thisRepN'
p879
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p880
I10
sS'.thisN'
p881
I98
sS'.thisIndex'
p882
I6
sg15
(lp883
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp884
S'space'
p885
asg96
I6
sa(dp886
g16
(lp887
S'd'
asg18
S'N'
sg22
I44
sS'.thisN'
p888
I99
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p889
I0
sS'.thisRepN'
p890
I9
sg21
I42
sS'.thisIndex'
p891
I5
sg23
I23
sg15
(lp892
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp893
g16
(lp894
S'd'
asg96
I8
sS'.thisRepN'
p895
I9
sg30
g31
sg32
g33
sS'.thisTrialN'
p896
I1
sS'.thisN'
p897
I100
sS'.thisIndex'
p898
I8
sg15
(lp899
S'k'
asg17
S'N'
sg14
I3
sa(dp900
g16
(lp901
S'k'
asg96
I0
sS'.thisRepN'
p902
I9
sg30
g31
sg32
g33
sS'.thisTrialN'
p903
I2
sS'.thisN'
p904
I101
sS'.thisIndex'
p905
I0
sg15
(lp906
S'd'
asg17
S'N'
sg14
I3
sa(dp907
g16
(lp908
S'k'
asg18
S'Y'
sS'.thisRepN'
p909
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p910
I3
sS'.thisN'
p911
I102
sS'.thisIndex'
p912
I2
sg15
(lp913
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp914
S'space'
p915
asg96
I2
sa(dp916
g16
(lp917
S'k'
asg18
S'N'
sS'.thisRepN'
p918
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p919
I4
sS'.thisN'
p920
I103
sS'.thisIndex'
p921
I7
sg15
(lp922
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp923
g16
(lp924
S'k'
asg18
S'Y'
sS'.thisRepN'
p925
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p926
I5
sS'.thisN'
p927
I104
sS'.thisIndex'
p928
I0
sg15
(lp929
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp930
S'space'
p931
asg96
I0
sa(dp932
g16
(lp933
S'd'
asg18
S'N'
sS'.thisRepN'
p934
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p935
I6
sS'.thisN'
p936
I105
sS'.thisIndex'
p937
I2
sg15
(lp938
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I2
sa(dp939
g16
(lp940
S'k'
asg18
S'N'
sS'.thisRepN'
p941
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p942
I7
sS'.thisN'
p943
I106
sS'.thisIndex'
p944
I1
sg15
(lp945
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp946
g16
(lp947
S'd'
asg18
S'Y'
sS'.thisRepN'
p948
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p949
I8
sS'.thisN'
p950
I107
sS'.thisIndex'
p951
I3
sg15
(lp952
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp953
S'space'
p954
asg96
I3
sa(dp955
g16
(lp956
S'd'
asg18
S'N'
sS'.thisRepN'
p957
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p958
I9
sS'.thisN'
p959
I108
sS'.thisIndex'
p960
I6
sg15
(lp961
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp962
g16
(lp963
S'k'
asg18
S'N'
sS'.thisRepN'
p964
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p965
I10
sS'.thisN'
p966
I109
sS'.thisIndex'
p967
I10
sg15
(lp968
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp969
g16
(lp970
S'k'
asg18
S'N'
sS'.thisRepN'
p971
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p972
I0
sS'.thisN'
p973
I110
sS'.thisIndex'
p974
I3
sg15
(lp975
S'd'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I3
sa(dp976
g16
(lp977
S'd'
asg18
S'Y'
sS'.thisRepN'
p978
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p979
I1
sS'.thisN'
p980
I111
sS'.thisIndex'
p981
I6
sg15
(lp982
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp983
S'space'
p984
asg96
I6
sa(dp985
g16
(lp986
S'd'
asg18
S'Y'
sS'.thisRepN'
p987
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p988
I2
sS'.thisN'
p989
I112
sS'.thisIndex'
p990
I7
sg15
(lp991
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp992
S'space'
p993
asg96
I7
sa(dp994
g16
(lp995
S'k'
asg18
S'Y'
sS'.thisRepN'
p996
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p997
I3
sS'.thisN'
p998
I113
sS'.thisIndex'
p999
I0
sg15
(lp1000
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1001
S'space'
p1002
asg96
I0
sa(dp1003
g16
(lp1004
S'k'
asg18
S'N'
sS'.thisRepN'
p1005
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1006
I4
sS'.thisN'
p1007
I114
sS'.thisIndex'
p1008
I2
sg15
(lp1009
S'd'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I2
sa(dp1010
g16
(lp1011
S'd'
asg18
S'N'
sS'.thisRepN'
p1012
I10
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1013
I5
sS'.thisN'
p1014
I115
sS'.thisIndex'
p1015
I2
sg15
(lp1016
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1017
S'space'
p1018
asg96
I2
sa(dp1019
g16
(lp1020
S'd'
asg18
S'Y'
sS'.thisRepN'
p1021
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1022
I6
sS'.thisN'
p1023
I116
sS'.thisIndex'
p1024
I8
sg15
(lp1025
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1026
S'space'
p1027
asg96
I8
sa(dp1028
g16
(lp1029
S'k'
asg18
S'Y'
sS'.thisRepN'
p1030
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1031
I7
sS'.thisN'
p1032
I117
sS'.thisIndex'
p1033
I1
sg15
(lp1034
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1035
S'space'
p1036
asg96
I1
sa(dp1037
g16
(lp1038
S'd'
asg18
S'N'
sS'.thisRepN'
p1039
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1040
I8
sS'.thisN'
p1041
I118
sS'.thisIndex'
p1042
I4
sg15
(lp1043
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I4
sa(dp1044
g16
(lp1045
S'd'
asg18
S'N'
sS'.thisRepN'
p1046
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1047
I9
sS'.thisN'
p1048
I119
sS'.thisIndex'
p1049
I10
sg15
(lp1050
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp1051
g16
(lp1052
S'k'
asg18
S'N'
sS'.thisRepN'
p1053
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1054
I10
sS'.thisN'
p1055
I120
sS'.thisIndex'
p1056
I0
sg15
(lp1057
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1058
g16
(lp1059
S'k'
asg18
S'N'
sS'.thisRepN'
p1060
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1061
I0
sS'.thisN'
p1062
I121
sS'.thisIndex'
p1063
I1
sg15
(lp1064
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1065
g16
(lp1066
S'k'
asg18
S'N'
sS'.thisRepN'
p1067
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1068
I1
sS'.thisN'
p1069
I122
sS'.thisIndex'
p1070
I6
sg15
(lp1071
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1072
g16
(lp1073
S'k'
asg18
S'N'
sS'.thisRepN'
p1074
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1075
I2
sS'.thisN'
p1076
I123
sS'.thisIndex'
p1077
I1
sg15
(lp1078
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1079
g16
(lp1080
S'd'
asg18
S'Y'
sS'.thisRepN'
p1081
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1082
I3
sS'.thisN'
p1083
I124
sS'.thisIndex'
p1084
I5
sg15
(lp1085
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1086
S'space'
p1087
asg96
I5
sa(dp1088
g16
(lp1089
S'd'
asg18
S'Y'
sS'.thisRepN'
p1090
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1091
I4
sS'.thisN'
p1092
I125
sS'.thisIndex'
p1093
I2
sg15
(lp1094
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1095
S'space'
p1096
asg96
I2
sa(dp1097
g16
(lp1098
S'd'
asg18
S'Y'
sS'.thisRepN'
p1099
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1100
I5
sS'.thisN'
p1101
I126
sS'.thisIndex'
p1102
I7
sg15
(lp1103
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1104
S'space'
p1105
asg96
I7
sa(dp1106
g16
(lp1107
S'k'
asg18
S'N'
sS'.thisRepN'
p1108
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1109
I6
sS'.thisN'
p1110
I127
sS'.thisIndex'
p1111
I6
sg15
(lp1112
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1113
S'space'
p1114
asg96
I6
sa(dp1115
g16
(lp1116
S'k'
asg18
S'Y'
sS'.thisRepN'
p1117
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1118
I7
sS'.thisN'
p1119
I128
sS'.thisIndex'
p1120
I7
sg15
(lp1121
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1122
S'space'
p1123
asg96
I7
sa(dp1124
g16
(lp1125
S'k'
asg18
S'N'
sS'.thisRepN'
p1126
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1127
I8
sS'.thisN'
p1128
I129
sS'.thisIndex'
p1129
I5
sg15
(lp1130
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1131
g16
(lp1132
S'd'
asg18
S'Y'
sS'.thisRepN'
p1133
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1134
I9
sS'.thisN'
p1135
I130
sS'.thisIndex'
p1136
I3
sg15
(lp1137
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1138
S'space'
p1139
asg96
I3
sa(dp1140
g16
(lp1141
S'd'
asg18
S'Y'
sS'.thisRepN'
p1142
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1143
I10
sS'.thisN'
p1144
I131
sS'.thisIndex'
p1145
I3
sg15
(lp1146
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1147
S'space'
p1148
asg96
I3
sa(dp1149
g16
(lp1150
S'd'
asg18
S'Y'
sS'.thisRepN'
p1151
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1152
I0
sS'.thisN'
p1153
I132
sS'.thisIndex'
p1154
I5
sg15
(lp1155
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1156
S'space'
p1157
asg96
I5
sa(dp1158
g16
(lp1159
S'k'
asg18
S'N'
sS'.thisRepN'
p1160
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1161
I1
sS'.thisN'
p1162
I133
sS'.thisIndex'
p1163
I0
sg15
(lp1164
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1165
g16
(lp1166
S'd'
asg18
S'N'
sS'.thisRepN'
p1167
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1168
I2
sS'.thisN'
p1169
I134
sS'.thisIndex'
p1170
I6
sg15
(lp1171
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1172
g16
(lp1173
S'k'
asg18
S'N'
sS'.thisRepN'
p1174
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1175
I3
sS'.thisN'
p1176
I135
sS'.thisIndex'
p1177
I1
sg15
(lp1178
S'd'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1179
S'space'
p1180
asg96
I1
sa(dp1181
g16
(lp1182
S'd'
asg18
S'N'
sS'.thisRepN'
p1183
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1184
I4
sS'.thisN'
p1185
I136
sS'.thisIndex'
p1186
I5
sg15
(lp1187
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1188
g16
(lp1189
S'k'
asg18
S'Y'
sS'.thisRepN'
p1190
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1191
I5
sS'.thisN'
p1192
I137
sS'.thisIndex'
p1193
I3
sg15
(lp1194
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1195
S'space'
p1196
asg96
I3
sa(dp1197
g16
(lp1198
S'k'
asg18
S'N'
sS'.thisRepN'
p1199
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1200
I6
sS'.thisN'
p1201
I138
sS'.thisIndex'
p1202
I7
sg15
(lp1203
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp1204
g16
(lp1205
S'd'
asg18
S'N'
sS'.thisRepN'
p1206
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1207
I7
sS'.thisN'
p1208
I139
sS'.thisIndex'
p1209
I3
sg15
(lp1210
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp1211
g16
(lp1212
S'd'
asg18
S'N'
sS'.thisRepN'
p1213
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1214
I8
sS'.thisN'
p1215
I140
sS'.thisIndex'
p1216
I10
sg15
(lp1217
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp1218
g16
(lp1219
S'k'
asg18
S'Y'
sS'.thisRepN'
p1220
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1221
I9
sS'.thisN'
p1222
I141
sS'.thisIndex'
p1223
I10
sg15
(lp1224
S'd'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1225
S'space'
p1226
asg96
I10
sa(dp1227
g16
(lp1228
S'k'
asg18
S'N'
sS'.thisRepN'
p1229
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1230
I10
sS'.thisN'
p1231
I142
sS'.thisIndex'
p1232
I6
sg15
(lp1233
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1234
g16
(lp1235
S'k'
asg18
S'N'
sS'.thisRepN'
p1236
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1237
I0
sS'.thisN'
p1238
I143
sS'.thisIndex'
p1239
I1
sg15
(lp1240
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1241
g16
(lp1242
S'd'
asg18
S'Y'
sS'.thisRepN'
p1243
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1244
I1
sS'.thisN'
p1245
I144
sS'.thisIndex'
p1246
I2
sg15
(lp1247
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1248
S'space'
p1249
asg96
I2
sa(dp1250
g16
(lp1251
S'd'
asg18
S'N'
sS'.thisRepN'
p1252
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1253
I2
sS'.thisN'
p1254
I145
sS'.thisIndex'
p1255
I5
sg15
(lp1256
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I5
sa(dp1257
g16
(lp1258
S'd'
asg18
S'N'
sS'.thisRepN'
p1259
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1260
I3
sS'.thisN'
p1261
I146
sS'.thisIndex'
p1262
I9
sg15
(lp1263
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp1264
g16
(lp1265
S'k'
asg18
S'Y'
sS'.thisRepN'
p1266
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1267
I4
sS'.thisN'
p1268
I147
sS'.thisIndex'
p1269
I9
sg15
(lp1270
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1271
S'space'
p1272
asg96
I9
sa(dp1273
g16
(lp1274
S'd'
asg18
S'N'
sS'.thisRepN'
p1275
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1276
I5
sS'.thisN'
p1277
I148
sS'.thisIndex'
p1278
I9
sg15
(lp1279
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp1280
g16
(lp1281
S'd'
asg18
S'Y'
sg22
I45
sS'.thisN'
p1282
I149
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1283
I6
sS'.thisRepN'
p1284
I13
sg21
I40
sS'.thisIndex'
p1285
I0
sg23
I20
sg15
(lp1286
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1287
S'space'
p1288
asg96
I0
sa(dp1289
g16
(lp1290
S'k'
asg96
I6
sS'.thisRepN'
p1291
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1292
I7
sS'.thisN'
p1293
I150
sS'.thisIndex'
p1294
I6
sg15
(lp1295
S'k'
asg17
S'Y'
sg14
I4
sa(dp1296
g16
(lp1297
S'k'
asg96
I0
sS'.thisRepN'
p1298
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1299
I8
sS'.thisN'
p1300
I151
sS'.thisIndex'
p1301
I0
sg15
(lp1302
S'k'
asg17
S'Y'
sg14
I4
sa(dp1303
g16
(lp1304
S'k'
asg18
S'N'
sS'.thisRepN'
p1305
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1306
I9
sS'.thisN'
p1307
I152
sS'.thisIndex'
p1308
I8
sg15
(lp1309
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1310
g16
(lp1311
S'd'
asg18
S'N'
sS'.thisRepN'
p1312
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1313
I10
sS'.thisN'
p1314
I153
sS'.thisIndex'
p1315
I6
sg15
(lp1316
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1317
g16
(lp1318
S'k'
asg18
S'N'
sS'.thisRepN'
p1319
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1320
I0
sS'.thisN'
p1321
I154
sS'.thisIndex'
p1322
I1
sg15
(lp1323
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1324
g16
(lp1325
S'd'
asg18
S'Y'
sS'.thisRepN'
p1326
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1327
I1
sS'.thisN'
p1328
I155
sS'.thisIndex'
p1329
I0
sg15
(lp1330
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1331
S'space'
p1332
asg96
I0
sa(dp1333
g16
(lp1334
S'k'
asg18
S'Y'
sS'.thisRepN'
p1335
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1336
I2
sS'.thisN'
p1337
I156
sS'.thisIndex'
p1338
I7
sg15
(lp1339
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1340
S'space'
p1341
asg96
I7
sa(dp1342
g16
(lp1343
S'k'
asg18
S'N'
sS'.thisRepN'
p1344
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1345
I3
sS'.thisN'
p1346
I157
sS'.thisIndex'
p1347
I6
sg15
(lp1348
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1349
g16
(lp1350
S'd'
asg18
S'Y'
sS'.thisRepN'
p1351
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1352
I4
sS'.thisN'
p1353
I158
sS'.thisIndex'
p1354
I0
sg15
(lp1355
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1356
S'space'
p1357
asg96
I0
sa(dp1358
g16
(lp1359
S'k'
asg18
S'N'
sS'.thisRepN'
p1360
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1361
I5
sS'.thisN'
p1362
I159
sS'.thisIndex'
p1363
I2
sg15
(lp1364
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1365
g16
(lp1366
S'd'
asg18
S'N'
sS'.thisRepN'
p1367
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1368
I6
sS'.thisN'
p1369
I160
sS'.thisIndex'
p1370
I0
sg15
(lp1371
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1372
g16
(lp1373
S'k'
asg18
S'Y'
sS'.thisRepN'
p1374
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1375
I7
sS'.thisN'
p1376
I161
sS'.thisIndex'
p1377
I9
sg15
(lp1378
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1379
S'space'
p1380
asg96
I9
sa(dp1381
g16
(lp1382
S'k'
asg18
S'N'
sS'.thisRepN'
p1383
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1384
I8
sS'.thisN'
p1385
I162
sS'.thisIndex'
p1386
I1
sg15
(lp1387
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1388
g16
(lp1389
S'd'
asg18
S'Y'
sS'.thisRepN'
p1390
I14
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1391
I9
sS'.thisN'
p1392
I163
sS'.thisIndex'
p1393
I5
sg15
(lp1394
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I5
sa(dp1395
g16
(lp1396
S'd'
asg18
S'Y'
sS'.thisRepN'
p1397
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1398
I10
sS'.thisN'
p1399
I164
sS'.thisIndex'
p1400
I7
sg15
(lp1401
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1402
S'space'
p1403
asg96
I7
sa(dp1404
g16
(lp1405
S'k'
asg18
S'N'
sS'.thisRepN'
p1406
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1407
I0
sS'.thisN'
p1408
I165
sS'.thisIndex'
p1409
I8
sg15
(lp1410
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I8
sa(dp1411
g16
(lp1412
S'k'
asg18
S'N'
sS'.thisRepN'
p1413
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1414
I1
sS'.thisN'
p1415
I166
sS'.thisIndex'
p1416
I4
sg15
(lp1417
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I4
sa(dp1418
g16
(lp1419
S'k'
asg18
S'Y'
sS'.thisRepN'
p1420
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1421
I2
sS'.thisN'
p1422
I167
sS'.thisIndex'
p1423
I2
sg15
(lp1424
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1425
S'space'
p1426
asg96
I2
sa(dp1427
g16
(lp1428
S'k'
asg18
S'N'
sS'.thisRepN'
p1429
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1430
I3
sS'.thisN'
p1431
I168
sS'.thisIndex'
p1432
I0
sg15
(lp1433
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I0
sa(dp1434
g16
(lp1435
S'k'
asg18
S'Y'
sS'.thisRepN'
p1436
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1437
I4
sS'.thisN'
p1438
I169
sS'.thisIndex'
p1439
I9
sg15
(lp1440
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1441
S'space'
p1442
asg96
I9
sa(dp1443
g16
(lp1444
S'd'
asg18
S'Y'
sS'.thisRepN'
p1445
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1446
I5
sS'.thisN'
p1447
I170
sS'.thisIndex'
p1448
I4
sg15
(lp1449
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1450
S'space'
p1451
asg96
I4
sa(dp1452
g16
(lp1453
S'k'
asg18
S'Y'
sS'.thisRepN'
p1454
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1455
I6
sS'.thisN'
p1456
I171
sS'.thisIndex'
p1457
I3
sg15
(lp1458
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1459
S'space'
p1460
asg96
I3
sa(dp1461
g16
(lp1462
S'd'
asg18
S'Y'
sS'.thisRepN'
p1463
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1464
I7
sS'.thisN'
p1465
I172
sS'.thisIndex'
p1466
I8
sg15
(lp1467
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1468
S'space'
p1469
asg96
I8
sa(dp1470
g16
(lp1471
S'd'
asg18
S'Y'
sS'.thisRepN'
p1472
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1473
I8
sS'.thisN'
p1474
I173
sS'.thisIndex'
p1475
I10
sg15
(lp1476
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1477
S'space'
p1478
asg96
I10
sa(dp1479
g16
(lp1480
S'k'
asg18
S'Y'
sS'.thisRepN'
p1481
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1482
I9
sS'.thisN'
p1483
I174
sS'.thisIndex'
p1484
I2
sg15
(lp1485
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1486
g16
(lp1487
S'k'
asg18
S'N'
sS'.thisRepN'
p1488
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1489
I10
sS'.thisN'
p1490
I175
sS'.thisIndex'
p1491
I6
sg15
(lp1492
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1493
g16
(lp1494
S'k'
asg18
S'Y'
sS'.thisRepN'
p1495
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1496
I0
sS'.thisN'
p1497
I176
sS'.thisIndex'
p1498
I7
sg15
(lp1499
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1500
S'space'
p1501
asg96
I7
sa(dp1502
g16
(lp1503
S'd'
asg18
S'N'
sS'.thisRepN'
p1504
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1505
I1
sS'.thisN'
p1506
I177
sS'.thisIndex'
p1507
I9
sg15
(lp1508
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1509
g16
(lp1510
S'k'
asg18
S'N'
sS'.thisRepN'
p1511
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1512
I2
sS'.thisN'
p1513
I178
sS'.thisIndex'
p1514
I7
sg15
(lp1515
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1516
g16
(lp1517
S'k'
asg18
S'N'
sS'.thisRepN'
p1518
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1519
I3
sS'.thisN'
p1520
I179
sS'.thisIndex'
p1521
I7
sg15
(lp1522
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1523
S'space'
p1524
asg96
I7
sa(dp1525
g16
(lp1526
S'd'
asg18
S'Y'
sS'.thisRepN'
p1527
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1528
I4
sS'.thisN'
p1529
I180
sS'.thisIndex'
p1530
I9
sg15
(lp1531
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1532
S'space'
p1533
asg96
I9
sa(dp1534
g16
(lp1535
S'd'
asg18
S'Y'
sS'.thisRepN'
p1536
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1537
I5
sS'.thisN'
p1538
I181
sS'.thisIndex'
p1539
I3
sg15
(lp1540
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1541
S'space'
p1542
asg96
I3
sa(dp1543
g16
(lp1544
S'k'
asg18
S'N'
sS'.thisRepN'
p1545
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1546
I6
sS'.thisN'
p1547
I182
sS'.thisIndex'
p1548
I9
sg15
(lp1549
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1550
g16
(lp1551
S'd'
asg18
S'N'
sS'.thisRepN'
p1552
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1553
I7
sS'.thisN'
p1554
I183
sS'.thisIndex'
p1555
I9
sg15
(lp1556
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1557
S'k'
asg96
I9
sa(dp1558
g16
(lp1559
S'k'
asg18
S'N'
sS'.thisRepN'
p1560
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1561
I8
sS'.thisN'
p1562
I184
sS'.thisIndex'
p1563
I8
sg15
(lp1564
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1565
g16
(lp1566
S'd'
asg18
S'N'
sS'.thisRepN'
p1567
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1568
I9
sS'.thisN'
p1569
I185
sS'.thisIndex'
p1570
I3
sg15
(lp1571
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1572
g16
(lp1573
S'k'
asg18
S'N'
sS'.thisRepN'
p1574
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1575
I10
sS'.thisN'
p1576
I186
sS'.thisIndex'
p1577
I9
sg15
(lp1578
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1579
g16
(lp1580
S'd'
asg18
S'N'
sS'.thisRepN'
p1581
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1582
I0
sS'.thisN'
p1583
I187
sS'.thisIndex'
p1584
I6
sg15
(lp1585
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I6
sa(dp1586
g16
(lp1587
S'k'
asg18
S'Y'
sS'.thisRepN'
p1588
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1589
I1
sS'.thisN'
p1590
I188
sS'.thisIndex'
p1591
I1
sg15
(lp1592
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1593
S'space'
p1594
asg96
I1
sa(dp1595
g16
(lp1596
S'k'
asg18
S'Y'
sS'.thisRepN'
p1597
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1598
I2
sS'.thisN'
p1599
I189
sS'.thisIndex'
p1600
I3
sg15
(lp1601
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1602
S'space'
p1603
asg96
I3
sa(dp1604
g16
(lp1605
S'd'
asg18
S'Y'
sS'.thisRepN'
p1606
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1607
I3
sS'.thisN'
p1608
I190
sS'.thisIndex'
p1609
I2
sg15
(lp1610
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1611
S'space'
p1612
asg96
I2
sa(dp1613
g16
(lp1614
S'k'
asg18
S'N'
sS'.thisRepN'
p1615
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1616
I4
sS'.thisN'
p1617
I191
sS'.thisIndex'
p1618
I5
sg15
(lp1619
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I5
sa(dp1620
g16
(lp1621
S'k'
asg18
S'N'
sS'.thisRepN'
p1622
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1623
I5
sS'.thisN'
p1624
I192
sS'.thisIndex'
p1625
I2
sg15
(lp1626
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1627
g16
(lp1628
S'd'
asg18
S'N'
sS'.thisRepN'
p1629
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1630
I6
sS'.thisN'
p1631
I193
sS'.thisIndex'
p1632
I6
sg15
(lp1633
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1634
g16
(lp1635
S'k'
asg18
S'N'
sS'.thisRepN'
p1636
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1637
I7
sS'.thisN'
p1638
I194
sS'.thisIndex'
p1639
I4
sg15
(lp1640
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1641
g16
(lp1642
S'k'
asg18
S'N'
sS'.thisRepN'
p1643
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1644
I8
sS'.thisN'
p1645
I195
sS'.thisIndex'
p1646
I0
sg15
(lp1647
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1648
g16
(lp1649
S'd'
asg18
S'Y'
sS'.thisRepN'
p1650
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1651
I9
sS'.thisN'
p1652
I196
sS'.thisIndex'
p1653
I7
sg15
(lp1654
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1655
S'space'
p1656
asg96
I7
sa(dp1657
g16
(lp1658
S'd'
asg18
S'Y'
sS'.thisRepN'
p1659
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1660
I10
sS'.thisN'
p1661
I197
sS'.thisIndex'
p1662
I6
sg15
(lp1663
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1664
S'space'
p1665
asg96
I6
sa(dp1666
g16
(lp1667
S'k'
asg18
S'N'
sS'.thisRepN'
p1668
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1669
I0
sS'.thisN'
p1670
I198
sS'.thisIndex'
p1671
I8
sg15
(lp1672
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1673
g16
(lp1674
S'k'
asg18
S'N'
sg22
I44
sS'.thisN'
p1675
I199
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1676
I1
sS'.thisRepN'
p1677
I18
sg21
I42
sS'.thisIndex'
p1678
I2
sg23
I21
sg15
(lp1679
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1680
g16
(lp1681
S'd'
asg96
I8
sS'.thisRepN'
p1682
I18
sg30
g31
sg32
g33
sS'.thisTrialN'
p1683
I2
sS'.thisN'
p1684
I200
sS'.thisIndex'
p1685
I8
sg15
(lp1686
S'k'
asg17
S'N'
sg14
I5
sa(dp1687
g16
(lp1688
S'k'
asg96
I10
sS'.thisRepN'
p1689
I18
sg30
g31
sg32
g33
sS'.thisTrialN'
p1690
I3
sS'.thisN'
p1691
I201
sS'.thisIndex'
p1692
I10
sg15
(lp1693
S'd'
asg17
S'N'
sg14
I5
sa(dp1694
g16
(lp1695
S'd'
asg18
S'N'
sS'.thisRepN'
p1696
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1697
I4
sS'.thisN'
p1698
I202
sS'.thisIndex'
p1699
I0
sg15
(lp1700
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1701
g16
(lp1702
S'd'
asg18
S'N'
sS'.thisRepN'
p1703
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1704
I5
sS'.thisN'
p1705
I203
sS'.thisIndex'
p1706
I5
sg15
(lp1707
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I5
sa(dp1708
g16
(lp1709
S'k'
asg18
S'Y'
sS'.thisRepN'
p1710
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1711
I6
sS'.thisN'
p1712
I204
sS'.thisIndex'
p1713
I3
sg15
(lp1714
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1715
g16
(lp1716
S'k'
asg18
S'Y'
sS'.thisRepN'
p1717
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1718
I7
sS'.thisN'
p1719
I205
sS'.thisIndex'
p1720
I4
sg15
(lp1721
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1722
S'space'
p1723
asg96
I4
sa(dp1724
g16
(lp1725
S'd'
asg18
S'Y'
sS'.thisRepN'
p1726
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1727
I8
sS'.thisN'
p1728
I206
sS'.thisIndex'
p1729
I7
sg15
(lp1730
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1731
S'space'
p1732
asg96
I7
sa(dp1733
g16
(lp1734
S'k'
asg18
S'N'
sS'.thisRepN'
p1735
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1736
I9
sS'.thisN'
p1737
I207
sS'.thisIndex'
p1738
I8
sg15
(lp1739
S'd'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I8
sa(dp1740
g16
(lp1741
S'd'
asg18
S'Y'
sS'.thisRepN'
p1742
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1743
I10
sS'.thisN'
p1744
I208
sS'.thisIndex'
p1745
I10
sg15
(lp1746
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1747
S'space'
p1748
asg96
I10
sa(dp1749
g16
(lp1750
S'd'
asg18
S'N'
sS'.thisRepN'
p1751
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1752
I0
sS'.thisN'
p1753
I209
sS'.thisIndex'
p1754
I4
sg15
(lp1755
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp1756
g16
(lp1757
S'k'
asg18
S'Y'
sS'.thisRepN'
p1758
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1759
I1
sS'.thisN'
p1760
I210
sS'.thisIndex'
p1761
I7
sg15
(lp1762
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1763
S'space'
p1764
asg96
I7
sa(dp1765
g16
(lp1766
S'k'
asg18
S'N'
sS'.thisRepN'
p1767
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1768
I2
sS'.thisN'
p1769
I211
sS'.thisIndex'
p1770
I8
sg15
(lp1771
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1772
g16
(lp1773
S'k'
asg18
S'N'
sS'.thisRepN'
p1774
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1775
I3
sS'.thisN'
p1776
I212
sS'.thisIndex'
p1777
I0
sg15
(lp1778
S'd'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I0
sa(dp1779
g16
(lp1780
S'k'
asg18
S'Y'
sS'.thisRepN'
p1781
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1782
I4
sS'.thisN'
p1783
I213
sS'.thisIndex'
p1784
I8
sg15
(lp1785
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1786
S'space'
p1787
asg96
I8
sa(dp1788
g16
(lp1789
S'k'
asg18
S'N'
sS'.thisRepN'
p1790
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1791
I5
sS'.thisN'
p1792
I214
sS'.thisIndex'
p1793
I6
sg15
(lp1794
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I6
sa(dp1795
g16
(lp1796
S'd'
asg18
S'Y'
sS'.thisRepN'
p1797
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1798
I6
sS'.thisN'
p1799
I215
sS'.thisIndex'
p1800
I9
sg15
(lp1801
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1802
S'space'
p1803
asg96
I9
sa(dp1804
g16
(lp1805
S'd'
asg18
S'Y'
sS'.thisRepN'
p1806
I19
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1807
I7
sS'.thisN'
p1808
I216
sS'.thisIndex'
p1809
I4
sg15
(lp1810
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp1811
g16
(lp1812
S'd'
asg18
S'N'
sS'.thisRepN'
p1813
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1814
I8
sS'.thisN'
p1815
I217
sS'.thisIndex'
p1816
I8
sg15
(lp1817
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1818
g16
(lp1819
S'd'
asg18
S'N'
sS'.thisRepN'
p1820
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1821
I9
sS'.thisN'
p1822
I218
sS'.thisIndex'
p1823
I3
sg15
(lp1824
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1825
g16
(lp1826
S'k'
asg18
S'N'
sS'.thisRepN'
p1827
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1828
I10
sS'.thisN'
p1829
I219
sS'.thisIndex'
p1830
I9
sg15
(lp1831
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1832
g16
(lp1833
S'k'
asg18
S'Y'
sS'.thisRepN'
p1834
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1835
I0
sS'.thisN'
p1836
I220
sS'.thisIndex'
p1837
I9
sg15
(lp1838
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1839
S'space'
p1840
asg96
I9
sa(dp1841
g16
(lp1842
S'k'
asg18
S'Y'
sS'.thisRepN'
p1843
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1844
I1
sS'.thisN'
p1845
I221
sS'.thisIndex'
p1846
I1
sg15
(lp1847
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1848
S'space'
p1849
asg96
I1
sa(dp1850
g16
(lp1851
S'k'
asg18
S'N'
sS'.thisRepN'
p1852
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1853
I2
sS'.thisN'
p1854
I222
sS'.thisIndex'
p1855
I5
sg15
(lp1856
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I5
sa(dp1857
g16
(lp1858
S'k'
asg18
S'Y'
sS'.thisRepN'
p1859
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1860
I3
sS'.thisN'
p1861
I223
sS'.thisIndex'
p1862
I8
sg15
(lp1863
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1864
S'space'
p1865
asg96
I8
sa(dp1866
g16
(lp1867
S'd'
asg18
S'Y'
sS'.thisRepN'
p1868
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1869
I4
sS'.thisN'
p1870
I224
sS'.thisIndex'
p1871
I1
sg15
(lp1872
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1873
S'space'
p1874
asg96
I1
sa(dp1875
g16
(lp1876
S'd'
asg18
S'Y'
sS'.thisRepN'
p1877
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1878
I5
sS'.thisN'
p1879
I225
sS'.thisIndex'
p1880
I3
sg15
(lp1881
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1882
S'space'
p1883
asg96
I3
sa(dp1884
g16
(lp1885
S'k'
asg18
S'Y'
sS'.thisRepN'
p1886
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1887
I6
sS'.thisN'
p1888
I226
sS'.thisIndex'
p1889
I8
sg15
(lp1890
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1891
S'space'
p1892
asg96
I8
sa(dp1893
g16
(lp1894
S'k'
asg18
S'Y'
sS'.thisRepN'
p1895
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1896
I7
sS'.thisN'
p1897
I227
sS'.thisIndex'
p1898
I1
sg15
(lp1899
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1900
S'space'
p1901
asg96
I1
sa(dp1902
g16
(lp1903
S'k'
asg18
S'N'
sS'.thisRepN'
p1904
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1905
I8
sS'.thisN'
p1906
I228
sS'.thisIndex'
p1907
I0
sg15
(lp1908
S'd'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I0
sa(dp1909
g16
(lp1910
S'd'
asg18
S'N'
sS'.thisRepN'
p1911
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1912
I9
sS'.thisN'
p1913
I229
sS'.thisIndex'
p1914
I6
sg15
(lp1915
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I6
sa(dp1916
g16
(lp1917
S'd'
asg18
S'N'
sS'.thisRepN'
p1918
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1919
I10
sS'.thisN'
p1920
I230
sS'.thisIndex'
p1921
I0
sg15
(lp1922
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1923
g16
(lp1924
S'k'
asg18
S'Y'
sS'.thisRepN'
p1925
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1926
I0
sS'.thisN'
p1927
I231
sS'.thisIndex'
p1928
I0
sg15
(lp1929
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1930
S'space'
p1931
asg96
I0
sa(dp1932
g16
(lp1933
S'd'
asg18
S'N'
sS'.thisRepN'
p1934
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1935
I1
sS'.thisN'
p1936
I232
sS'.thisIndex'
p1937
I8
sg15
(lp1938
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1939
g16
(lp1940
S'd'
asg18
S'Y'
sS'.thisRepN'
p1941
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1942
I2
sS'.thisN'
p1943
I233
sS'.thisIndex'
p1944
I2
sg15
(lp1945
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1946
S'space'
p1947
asg96
I2
sa(dp1948
g16
(lp1949
S'd'
asg18
S'N'
sS'.thisRepN'
p1950
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1951
I3
sS'.thisN'
p1952
I234
sS'.thisIndex'
p1953
I6
sg15
(lp1954
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1955
S'space'
p1956
asg96
I6
sa(dp1957
g16
(lp1958
S'k'
asg18
S'Y'
sS'.thisRepN'
p1959
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1960
I4
sS'.thisN'
p1961
I235
sS'.thisIndex'
p1962
I1
sg15
(lp1963
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1964
S'space'
p1965
asg96
I1
sa(dp1966
g16
(lp1967
S'k'
asg18
S'Y'
sS'.thisRepN'
p1968
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1969
I5
sS'.thisN'
p1970
I236
sS'.thisIndex'
p1971
I10
sg15
(lp1972
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1973
S'space'
p1974
asg96
I10
sa(dp1975
g16
(lp1976
S'd'
asg18
S'N'
sS'.thisRepN'
p1977
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1978
I6
sS'.thisN'
p1979
I237
sS'.thisIndex'
p1980
I10
sg15
(lp1981
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1982
g16
(lp1983
S'k'
asg18
S'N'
sS'.thisRepN'
p1984
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1985
I7
sS'.thisN'
p1986
I238
sS'.thisIndex'
p1987
I3
sg15
(lp1988
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1989
g16
(lp1990
S'k'
asg18
S'Y'
sS'.thisRepN'
p1991
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1992
I8
sS'.thisN'
p1993
I239
sS'.thisIndex'
p1994
I7
sg15
(lp1995
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1996
S'space'
p1997
asg96
I7
sa(dp1998
g16
(lp1999
S'd'
asg18
S'N'
sS'.thisRepN'
p2000
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2001
I9
sS'.thisN'
p2002
I240
sS'.thisIndex'
p2003
I5
sg15
(lp2004
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I5
sa(dp2005
g16
(lp2006
S'k'
asg18
S'Y'
sS'.thisRepN'
p2007
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2008
I10
sS'.thisN'
p2009
I241
sS'.thisIndex'
p2010
I1
sg15
(lp2011
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2012
S'space'
p2013
asg96
I1
sa(dp2014
g16
(lp2015
S'd'
asg18
S'Y'
sS'.thisRepN'
p2016
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2017
I0
sS'.thisN'
p2018
I242
sS'.thisIndex'
p2019
I7
sg15
(lp2020
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp2021
S'space'
p2022
asg96
I7
sa(dp2023
g16
(lp2024
S'd'
asg18
S'Y'
sS'.thisRepN'
p2025
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2026
I1
sS'.thisN'
p2027
I243
sS'.thisIndex'
p2028
I0
sg15
(lp2029
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2030
S'space'
p2031
asg96
I0
sa(dp2032
g16
(lp2033
S'k'
asg18
S'Y'
sS'.thisRepN'
p2034
I22
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2035
I2
sS'.thisN'
p2036
I244
sS'.thisIndex'
p2037
I2
sg15
(lp2038
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2039
S'k'
asg96
I2
sa(dp2040
g16
(lp2041
S'd'
asg18
S'Y'
sS'.thisRepN'
p2042
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2043
I3
sS'.thisN'
p2044
I245
sS'.thisIndex'
p2045
I4
sg15
(lp2046
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp2047
S'space'
p2048
asg96
I4
sa(dp2049
g16
(lp2050
S'k'
asg18
S'N'
sS'.thisRepN'
p2051
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2052
I4
sS'.thisN'
p2053
I246
sS'.thisIndex'
p2054
I3
sg15
(lp2055
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp2056
g16
(lp2057
S'k'
asg18
S'N'
sS'.thisRepN'
p2058
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2059
I5
sS'.thisN'
p2060
I247
sS'.thisIndex'
p2061
I1
sg15
(lp2062
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I1
sa(dp2063
g16
(lp2064
S'k'
asg18
S'N'
sS'.thisRepN'
p2065
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2066
I6
sS'.thisN'
p2067
I248
sS'.thisIndex'
p2068
I3
sg15
(lp2069
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp2070
g16
(lp2071
S'd'
asg18
S'N'
sg22
I44
sS'.thisN'
p2072
I249
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2073
I7
sS'.thisRepN'
p2074
I22
sg21
I39
sS'.thisIndex'
p2075
I8
sg23
I25
sg15
(lp2076
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I8
sa(dp2077
g16
(lp2078
S'k'
asg96
I4
sS'.thisRepN'
p2079
I22
sg30
g31
sg32
g33
sS'.thisTrialN'
p2080
I8
sS'.thisN'
p2081
I250
sS'.thisIndex'
p2082
I4
sg15
(lp2083
S'd'
asg17
S'N'
sg14
I6
sa(dp2084
g16
(lp2085
S'k'
asg96
I6
sS'.thisRepN'
p2086
I22
sg30
g31
sg32
g33
sS'.thisTrialN'
p2087
I9
sS'.thisN'
p2088
I251
sS'.thisIndex'
p2089
I6
sg15
(lp2090
S'k'
asg17
S'Y'
sg14
I6
sa(dp2091
g16
(lp2092
S'd'
asg18
S'Y'
sS'.thisRepN'
p2093
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2094
I10
sS'.thisN'
p2095
I252
sS'.thisIndex'
p2096
I4
sg15
(lp2097
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2098
S'space'
p2099
asg96
I4
sa(dp2100
g16
(lp2101
S'k'
asg18
S'Y'
sS'.thisRepN'
p2102
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2103
I0
sS'.thisN'
p2104
I253
sS'.thisIndex'
p2105
I0
sg15
(lp2106
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2107
S'space'
p2108
asg96
I0
sa(dp2109
g16
(lp2110
S'd'
asg18
S'N'
sS'.thisRepN'
p2111
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2112
I1
sS'.thisN'
p2113
I254
sS'.thisIndex'
p2114
I7
sg15
(lp2115
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I7
sa(dp2116
g16
(lp2117
S'k'
asg18
S'N'
sS'.thisRepN'
p2118
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2119
I2
sS'.thisN'
p2120
I255
sS'.thisIndex'
p2121
I5
sg15
(lp2122
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2123
g16
(lp2124
S'k'
asg18
S'N'
sS'.thisRepN'
p2125
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2126
I3
sS'.thisN'
p2127
I256
sS'.thisIndex'
p2128
I9
sg15
(lp2129
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2130
g16
(lp2131
S'd'
asg18
S'Y'
sS'.thisRepN'
p2132
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2133
I4
sS'.thisN'
p2134
I257
sS'.thisIndex'
p2135
I5
sg15
(lp2136
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2137
S'space'
p2138
asg96
I5
sa(dp2139
g16
(lp2140
S'k'
asg18
S'N'
sS'.thisRepN'
p2141
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2142
I5
sS'.thisN'
p2143
I258
sS'.thisIndex'
p2144
I2
sg15
(lp2145
S'd'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I2
sa(dp2146
g16
(lp2147
S'd'
asg18
S'N'
sS'.thisRepN'
p2148
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2149
I6
sS'.thisN'
p2150
I259
sS'.thisIndex'
p2151
I9
sg15
(lp2152
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2153
g16
(lp2154
S'd'
asg18
S'N'
sS'.thisRepN'
p2155
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2156
I7
sS'.thisN'
p2157
I260
sS'.thisIndex'
p2158
I6
sg15
(lp2159
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I6
sa(dp2160
g16
(lp2161
S'k'
asg18
S'N'
sS'.thisRepN'
p2162
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2163
I8
sS'.thisN'
p2164
I261
sS'.thisIndex'
p2165
I7
sg15
(lp2166
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I7
sa(dp2167
g16
(lp2168
S'd'
asg18
S'N'
sS'.thisRepN'
p2169
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2170
I9
sS'.thisN'
p2171
I262
sS'.thisIndex'
p2172
I0
sg15
(lp2173
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2174
g16
(lp2175
S'k'
asg18
S'Y'
sS'.thisRepN'
p2176
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2177
I10
sS'.thisN'
p2178
I263
sS'.thisIndex'
p2179
I9
sg15
(lp2180
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2181
S'space'
p2182
asg96
I9
sa(dp2183
g16
(lp2184
S'd'
asg18
S'N'
sS'.thisRepN'
p2185
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2186
I0
sS'.thisN'
p2187
I264
sS'.thisIndex'
p2188
I5
sg15
(lp2189
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I5
sa(dp2190
g16
(lp2191
S'k'
asg18
S'Y'
sS'.thisRepN'
p2192
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2193
I1
sS'.thisN'
p2194
I265
sS'.thisIndex'
p2195
I0
sg15
(lp2196
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2197
S'space'
p2198
asg96
I0
sa(dp2199
g16
(lp2200
S'k'
asg18
S'Y'
sS'.thisRepN'
p2201
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2202
I2
sS'.thisN'
p2203
I266
sS'.thisIndex'
p2204
I8
sg15
(lp2205
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2206
S'space'
p2207
asg96
I8
sa(dp2208
g16
(lp2209
S'd'
asg18
S'N'
sS'.thisRepN'
p2210
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2211
I3
sS'.thisN'
p2212
I267
sS'.thisIndex'
p2213
I2
sg15
(lp2214
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2215
g16
(lp2216
S'd'
asg18
S'Y'
sS'.thisRepN'
p2217
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2218
I4
sS'.thisN'
p2219
I268
sS'.thisIndex'
p2220
I6
sg15
(lp2221
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2222
S'space'
p2223
asg96
I6
sa(dp2224
g16
(lp2225
S'd'
asg18
S'Y'
sS'.thisRepN'
p2226
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2227
I5
sS'.thisN'
p2228
I269
sS'.thisIndex'
p2229
I3
sg15
(lp2230
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2231
S'space'
p2232
asg96
I3
sa(dp2233
g16
(lp2234
S'k'
asg18
S'N'
sS'.thisRepN'
p2235
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2236
I6
sS'.thisN'
p2237
I270
sS'.thisIndex'
p2238
I9
sg15
(lp2239
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2240
g16
(lp2241
S'k'
asg18
S'Y'
sS'.thisRepN'
p2242
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2243
I7
sS'.thisN'
p2244
I271
sS'.thisIndex'
p2245
I7
sg15
(lp2246
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2247
S'space'
p2248
asg96
I7
sa(dp2249
g16
(lp2250
S'd'
asg18
S'N'
sS'.thisRepN'
p2251
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2252
I8
sS'.thisN'
p2253
I272
sS'.thisIndex'
p2254
I8
sg15
(lp2255
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2256
g16
(lp2257
S'd'
asg18
S'N'
sS'.thisRepN'
p2258
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2259
I9
sS'.thisN'
p2260
I273
sS'.thisIndex'
p2261
I2
sg15
(lp2262
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2263
g16
(lp2264
S'd'
asg18
S'N'
sS'.thisRepN'
p2265
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2266
I10
sS'.thisN'
p2267
I274
sS'.thisIndex'
p2268
I2
sg15
(lp2269
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2270
g16
(lp2271
S'k'
asg18
S'Y'
sS'.thisRepN'
p2272
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2273
I0
sS'.thisN'
p2274
I275
sS'.thisIndex'
p2275
I5
sg15
(lp2276
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2277
g16
(lp2278
S'k'
asg18
S'N'
sS'.thisRepN'
p2279
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2280
I1
sS'.thisN'
p2281
I276
sS'.thisIndex'
p2282
I5
sg15
(lp2283
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2284
g16
(lp2285
S'k'
asg18
S'Y'
sS'.thisRepN'
p2286
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2287
I2
sS'.thisN'
p2288
I277
sS'.thisIndex'
p2289
I7
sg15
(lp2290
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2291
S'space'
p2292
asg96
I7
sa(dp2293
g16
(lp2294
S'd'
asg18
S'N'
sS'.thisRepN'
p2295
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2296
I3
sS'.thisN'
p2297
I278
sS'.thisIndex'
p2298
I3
sg15
(lp2299
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I3
sa(dp2300
g16
(lp2301
S'd'
asg18
S'Y'
sS'.thisRepN'
p2302
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2303
I4
sS'.thisN'
p2304
I279
sS'.thisIndex'
p2305
I1
sg15
(lp2306
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2307
g16
(lp2308
S'd'
asg18
S'Y'
sS'.thisRepN'
p2309
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2310
I5
sS'.thisN'
p2311
I280
sS'.thisIndex'
p2312
I5
sg15
(lp2313
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2314
S'space'
p2315
asg96
I5
sa(dp2316
g16
(lp2317
S'k'
asg18
S'Y'
sS'.thisRepN'
p2318
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2319
I6
sS'.thisN'
p2320
I281
sS'.thisIndex'
p2321
I3
sg15
(lp2322
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2323
S'space'
p2324
asg96
I3
sa(dp2325
g16
(lp2326
S'd'
asg18
S'N'
sS'.thisRepN'
p2327
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2328
I7
sS'.thisN'
p2329
I282
sS'.thisIndex'
p2330
I4
sg15
(lp2331
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I4
sa(dp2332
g16
(lp2333
S'd'
asg18
S'N'
sS'.thisRepN'
p2334
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2335
I8
sS'.thisN'
p2336
I283
sS'.thisIndex'
p2337
I5
sg15
(lp2338
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2339
g16
(lp2340
S'd'
asg18
S'N'
sS'.thisRepN'
p2341
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2342
I9
sS'.thisN'
p2343
I284
sS'.thisIndex'
p2344
I6
sg15
(lp2345
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I6
sa(dp2346
g16
(lp2347
S'k'
asg18
S'N'
sS'.thisRepN'
p2348
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2349
I10
sS'.thisN'
p2350
I285
sS'.thisIndex'
p2351
I7
sg15
(lp2352
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I7
sa(dp2353
g16
(lp2354
S'd'
asg18
S'Y'
sS'.thisRepN'
p2355
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2356
I0
sS'.thisN'
p2357
I286
sS'.thisIndex'
p2358
I6
sg15
(lp2359
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2360
g16
(lp2361
S'k'
asg18
S'Y'
sS'.thisRepN'
p2362
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2363
I1
sS'.thisN'
p2364
I287
sS'.thisIndex'
p2365
I5
sg15
(lp2366
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2367
S'space'
p2368
asg96
I5
sa(dp2369
g16
(lp2370
S'k'
asg18
S'N'
sS'.thisRepN'
p2371
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2372
I2
sS'.thisN'
p2373
I288
sS'.thisIndex'
p2374
I9
sg15
(lp2375
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2376
g16
(lp2377
S'k'
asg18
S'Y'
sS'.thisRepN'
p2378
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2379
I3
sS'.thisN'
p2380
I289
sS'.thisIndex'
p2381
I5
sg15
(lp2382
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2383
S'space'
p2384
asg96
I5
sa(dp2385
g16
(lp2386
S'd'
asg18
S'N'
sS'.thisRepN'
p2387
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2388
I4
sS'.thisN'
p2389
I290
sS'.thisIndex'
p2390
I3
sg15
(lp2391
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I3
sa(dp2392
g16
(lp2393
S'd'
asg18
S'N'
sS'.thisRepN'
p2394
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2395
I5
sS'.thisN'
p2396
I291
sS'.thisIndex'
p2397
I4
sg15
(lp2398
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I4
sa(dp2399
g16
(lp2400
S'd'
asg18
S'N'
sS'.thisRepN'
p2401
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2402
I6
sS'.thisN'
p2403
I292
sS'.thisIndex'
p2404
I4
sg15
(lp2405
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2406
S'space'
p2407
asg96
I4
sa(dp2408
g16
(lp2409
S'd'
asg18
S'N'
sS'.thisRepN'
p2410
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2411
I7
sS'.thisN'
p2412
I293
sS'.thisIndex'
p2413
I5
sg15
(lp2414
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2415
g16
(lp2416
S'd'
asg18
S'N'
sS'.thisRepN'
p2417
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2418
I8
sS'.thisN'
p2419
I294
sS'.thisIndex'
p2420
I10
sg15
(lp2421
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2422
g16
(lp2423
S'k'
asg18
S'Y'
sS'.thisRepN'
p2424
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2425
I9
sS'.thisN'
p2426
I295
sS'.thisIndex'
p2427
I10
sg15
(lp2428
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2429
S'space'
p2430
asg96
I10
sa(dp2431
g16
(lp2432
S'k'
asg18
S'N'
sS'.thisRepN'
p2433
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2434
I10
sS'.thisN'
p2435
I296
sS'.thisIndex'
p2436
I0
sg15
(lp2437
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2438
g16
(lp2439
S'k'
asg18
S'Y'
sS'.thisRepN'
p2440
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2441
I0
sS'.thisN'
p2442
I297
sS'.thisIndex'
p2443
I9
sg15
(lp2444
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2445
S'space'
p2446
asg96
I9
sa(dp2447
g16
(lp2448
S'd'
asg18
S'Y'
sS'.thisRepN'
p2449
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2450
I1
sS'.thisN'
p2451
I298
sS'.thisIndex'
p2452
I1
sg15
(lp2453
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2454
S'space'
p2455
asg96
I1
sa(dp2456
g16
(lp2457
S'k'
asg18
S'N'
sg22
I44
sS'.thisN'
p2458
I299
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2459
I2
sS'.thisRepN'
p2460
I27
sg21
I42
sS'.thisIndex'
p2461
I10
sg23
I20
sg15
(lp2462
S'd'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I10
sa(dp2463
g16
(lp2464
S'd'
asg96
I0
sS'.thisRepN'
p2465
I27
sg30
g31
sg32
g33
sS'.thisTrialN'
p2466
I3
sS'.thisN'
p2467
I300
sS'.thisIndex'
p2468
I0
sg15
(lp2469
S'd'
asg17
S'Y'
sg14
I7
sa(dp2470
g16
(lp2471
S'd'
asg96
I10
sS'.thisRepN'
p2472
I27
sg30
g31
sg32
g33
sS'.thisTrialN'
p2473
I4
sS'.thisN'
p2474
I301
sS'.thisIndex'
p2475
I10
sg15
(lp2476
S'd'
asg17
S'Y'
sg14
I7
sa(dp2477
g16
(lp2478
S'k'
asg18
S'N'
sS'.thisRepN'
p2479
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2480
I5
sS'.thisN'
p2481
I302
sS'.thisIndex'
p2482
I3
sg15
(lp2483
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2484
g16
(lp2485
S'k'
asg18
S'N'
sS'.thisRepN'
p2486
I27
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2487
I6
sS'.thisN'
p2488
I303
sS'.thisIndex'
p2489
I10
sg15
(lp2490
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2491
S'space'
p2492
asg96
I10
sa(dp2493
g16
(lp2494
S'd'
asg18
S'Y'
sS'.thisRepN'
p2495
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2496
I7
sS'.thisN'
p2497
I304
sS'.thisIndex'
p2498
I8
sg15
(lp2499
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2500
S'space'
p2501
asg96
I8
sa(dp2502
g16
(lp2503
S'd'
asg18
S'N'
sS'.thisRepN'
p2504
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2505
I8
sS'.thisN'
p2506
I305
sS'.thisIndex'
p2507
I4
sg15
(lp2508
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2509
g16
(lp2510
S'd'
asg18
S'Y'
sS'.thisRepN'
p2511
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2512
I9
sS'.thisN'
p2513
I306
sS'.thisIndex'
p2514
I2
sg15
(lp2515
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2516
S'space'
p2517
asg96
I2
sa(dp2518
g16
(lp2519
S'k'
asg18
S'Y'
sS'.thisRepN'
p2520
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2521
I10
sS'.thisN'
p2522
I307
sS'.thisIndex'
p2523
I0
sg15
(lp2524
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2525
S'space'
p2526
asg96
I0
sa(dp2527
g16
(lp2528
S'k'
asg18
S'N'
sS'.thisRepN'
p2529
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2530
I0
sS'.thisN'
p2531
I308
sS'.thisIndex'
p2532
I6
sg15
(lp2533
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I6
sa(dp2534
g16
(lp2535
S'd'
asg18
S'N'
sS'.thisRepN'
p2536
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2537
I1
sS'.thisN'
p2538
I309
sS'.thisIndex'
p2539
I1
sg15
(lp2540
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I1
sa(dp2541
g16
(lp2542
S'k'
asg18
S'N'
sS'.thisRepN'
p2543
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2544
I2
sS'.thisN'
p2545
I310
sS'.thisIndex'
p2546
I5
sg15
(lp2547
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2548
g16
(lp2549
S'd'
asg18
S'Y'
sS'.thisRepN'
p2550
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2551
I3
sS'.thisN'
p2552
I311
sS'.thisIndex'
p2553
I2
sg15
(lp2554
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2555
S'space'
p2556
asg96
I2
sa(dp2557
g16
(lp2558
S'd'
asg18
S'N'
sS'.thisRepN'
p2559
I28
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2560
I4
sS'.thisN'
p2561
I312
sS'.thisIndex'
p2562
I1
sg15
(lp2563
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2564
S'space'
p2565
asg96
I1
sa(dp2566
g16
(lp2567
S'd'
asg18
S'N'
sS'.thisRepN'
p2568
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2569
I5
sS'.thisN'
p2570
I313
sS'.thisIndex'
p2571
I7
sg15
(lp2572
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I7
sa(dp2573
g16
(lp2574
S'k'
asg18
S'Y'
sS'.thisRepN'
p2575
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2576
I6
sS'.thisN'
p2577
I314
sS'.thisIndex'
p2578
I3
sg15
(lp2579
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2580
S'space'
p2581
asg96
I3
sa(dp2582
g16
(lp2583
S'd'
asg18
S'Y'
sS'.thisRepN'
p2584
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2585
I7
sS'.thisN'
p2586
I315
sS'.thisIndex'
p2587
I9
sg15
(lp2588
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2589
S'space'
p2590
asg96
I9
sa(dp2591
g16
(lp2592
S'd'
asg18
S'N'
sS'.thisRepN'
p2593
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2594
I8
sS'.thisN'
p2595
I316
sS'.thisIndex'
p2596
I1
sg15
(lp2597
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2598
g16
(lp2599
S'k'
asg18
S'Y'
sS'.thisRepN'
p2600
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2601
I9
sS'.thisN'
p2602
I317
sS'.thisIndex'
p2603
I1
sg15
(lp2604
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2605
S'space'
p2606
asg96
I1
sa(dp2607
g16
(lp2608
S'k'
asg18
S'Y'
sS'.thisRepN'
p2609
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2610
I10
sS'.thisN'
p2611
I318
sS'.thisIndex'
p2612
I0
sg15
(lp2613
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2614
S'space'
p2615
asg96
I0
sa(dp2616
g16
(lp2617
S'k'
asg18
S'N'
sS'.thisRepN'
p2618
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2619
I0
sS'.thisN'
p2620
I319
sS'.thisIndex'
p2621
I4
sg15
(lp2622
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2623
g16
(lp2624
S'k'
asg18
S'Y'
sS'.thisRepN'
p2625
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2626
I1
sS'.thisN'
p2627
I320
sS'.thisIndex'
p2628
I8
sg15
(lp2629
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2630
S'space'
p2631
asg96
I8
sa(dp2632
g16
(lp2633
S'd'
asg18
S'Y'
sS'.thisRepN'
p2634
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2635
I2
sS'.thisN'
p2636
I321
sS'.thisIndex'
p2637
I5
sg15
(lp2638
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2639
S'space'
p2640
asg96
I5
sa(dp2641
g16
(lp2642
S'd'
asg18
S'N'
sS'.thisRepN'
p2643
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2644
I3
sS'.thisN'
p2645
I322
sS'.thisIndex'
p2646
I7
sg15
(lp2647
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I7
sa(dp2648
g16
(lp2649
S'k'
asg18
S'Y'
sS'.thisRepN'
p2650
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2651
I4
sS'.thisN'
p2652
I323
sS'.thisIndex'
p2653
I6
sg15
(lp2654
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2655
S'space'
p2656
asg96
I6
sa(dp2657
g16
(lp2658
S'd'
asg18
S'N'
sS'.thisRepN'
p2659
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2660
I5
sS'.thisN'
p2661
I324
sS'.thisIndex'
p2662
I10
sg15
(lp2663
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2664
g16
(lp2665
S'k'
asg18
S'Y'
sS'.thisRepN'
p2666
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2667
I6
sS'.thisN'
p2668
I325
sS'.thisIndex'
p2669
I1
sg15
(lp2670
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2671
S'space'
p2672
asg96
I1
sa(dp2673
g16
(lp2674
S'd'
asg18
S'N'
sS'.thisRepN'
p2675
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2676
I7
sS'.thisN'
p2677
I326
sS'.thisIndex'
p2678
I10
sg15
(lp2679
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2680
g16
(lp2681
S'd'
asg18
S'N'
sS'.thisRepN'
p2682
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2683
I8
sS'.thisN'
p2684
I327
sS'.thisIndex'
p2685
I2
sg15
(lp2686
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2687
g16
(lp2688
S'k'
asg18
S'N'
sS'.thisRepN'
p2689
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2690
I9
sS'.thisN'
p2691
I328
sS'.thisIndex'
p2692
I7
sg15
(lp2693
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I7
sa(dp2694
g16
(lp2695
S'd'
asg18
S'N'
sS'.thisRepN'
p2696
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2697
I10
sS'.thisN'
p2698
I329
sS'.thisIndex'
p2699
I3
sg15
(lp2700
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2701
g16
(lp2702
S'd'
asg18
S'Y'
sS'.thisRepN'
p2703
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2704
I0
sS'.thisN'
p2705
I330
sS'.thisIndex'
p2706
I3
sg15
(lp2707
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2708
S'space'
p2709
asg96
I3
sa(dp2710
g16
(lp2711
S'd'
asg18
S'N'
sS'.thisRepN'
p2712
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2713
I1
sS'.thisN'
p2714
I331
sS'.thisIndex'
p2715
I0
sg15
(lp2716
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I0
sa(dp2717
g16
(lp2718
S'd'
asg18
S'Y'
sS'.thisRepN'
p2719
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2720
I2
sS'.thisN'
p2721
I332
sS'.thisIndex'
p2722
I4
sg15
(lp2723
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2724
S'space'
p2725
asg96
I4
sa(dp2726
g16
(lp2727
S'k'
asg18
S'Y'
sS'.thisRepN'
p2728
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2729
I3
sS'.thisN'
p2730
I333
sS'.thisIndex'
p2731
I4
sg15
(lp2732
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2733
S'space'
p2734
asg96
I4
sa(dp2735
g16
(lp2736
S'd'
asg18
S'Y'
sS'.thisRepN'
p2737
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2738
I4
sS'.thisN'
p2739
I334
sS'.thisIndex'
p2740
I8
sg15
(lp2741
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2742
S'space'
p2743
asg96
I8
sa(dp2744
g16
(lp2745
S'd'
asg18
S'N'
sS'.thisRepN'
p2746
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2747
I5
sS'.thisN'
p2748
I335
sS'.thisIndex'
p2749
I3
sg15
(lp2750
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2751
g16
(lp2752
S'd'
asg18
S'Y'
sS'.thisRepN'
p2753
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2754
I6
sS'.thisN'
p2755
I336
sS'.thisIndex'
p2756
I6
sg15
(lp2757
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2758
S'space'
p2759
asg96
I6
sa(dp2760
g16
(lp2761
S'd'
asg18
S'N'
sS'.thisRepN'
p2762
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2763
I7
sS'.thisN'
p2764
I337
sS'.thisIndex'
p2765
I9
sg15
(lp2766
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I9
sa(dp2767
g16
(lp2768
S'd'
asg18
S'N'
sS'.thisRepN'
p2769
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2770
I8
sS'.thisN'
p2771
I338
sS'.thisIndex'
p2772
I6
sg15
(lp2773
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I6
sa(dp2774
g16
(lp2775
S'k'
asg18
S'N'
sS'.thisRepN'
p2776
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2777
I9
sS'.thisN'
p2778
I339
sS'.thisIndex'
p2779
I2
sg15
(lp2780
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2781
g16
(lp2782
S'd'
asg18
S'N'
sS'.thisRepN'
p2783
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2784
I10
sS'.thisN'
p2785
I340
sS'.thisIndex'
p2786
I8
sg15
(lp2787
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I8
sa(dp2788
g16
(lp2789
S'd'
asg18
S'N'
sS'.thisRepN'
p2790
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2791
I0
sS'.thisN'
p2792
I341
sS'.thisIndex'
p2793
I6
sg15
(lp2794
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I6
sa(dp2795
g16
(lp2796
S'k'
asg18
S'Y'
sS'.thisRepN'
p2797
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2798
I1
sS'.thisN'
p2799
I342
sS'.thisIndex'
p2800
I8
sg15
(lp2801
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2802
S'space'
p2803
asg96
I8
sa(dp2804
g16
(lp2805
S'd'
asg18
S'Y'
sS'.thisRepN'
p2806
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2807
I2
sS'.thisN'
p2808
I343
sS'.thisIndex'
p2809
I4
sg15
(lp2810
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2811
S'space'
p2812
asg96
I4
sa(dp2813
g16
(lp2814
S'k'
asg18
S'N'
sS'.thisRepN'
p2815
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2816
I3
sS'.thisN'
p2817
I344
sS'.thisIndex'
p2818
I0
sg15
(lp2819
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I0
sa(dp2820
g16
(lp2821
S'd'
asg18
S'Y'
sS'.thisRepN'
p2822
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2823
I4
sS'.thisN'
p2824
I345
sS'.thisIndex'
p2825
I7
sg15
(lp2826
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2827
S'space'
p2828
asg96
I7
sa(dp2829
g16
(lp2830
S'k'
asg18
S'Y'
sS'.thisRepN'
p2831
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2832
I5
sS'.thisN'
p2833
I346
sS'.thisIndex'
p2834
I3
sg15
(lp2835
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2836
S'space'
p2837
asg96
I3
sa(dp2838
g16
(lp2839
S'k'
asg18
S'N'
sS'.thisRepN'
p2840
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2841
I6
sS'.thisN'
p2842
I347
sS'.thisIndex'
p2843
I2
sg15
(lp2844
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2845
g16
(lp2846
S'd'
asg18
S'Y'
sS'.thisRepN'
p2847
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2848
I7
sS'.thisN'
p2849
I348
sS'.thisIndex'
p2850
I4
sg15
(lp2851
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2852
S'space'
p2853
asg96
I4
sa(dp2854
g16
(lp2855
S'k'
asg18
S'N'
sg22
I46
sS'.thisN'
p2856
I349
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2857
I8
sS'.thisRepN'
p2858
I31
sg21
I44
sS'.thisIndex'
p2859
I8
sg23
I22
sg15
(lp2860
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I8
sa(dp2861
g16
(lp2862
S'k'
asg96
I2
sS'.thisRepN'
p2863
I31
sg30
g31
sg32
g33
sS'.thisTrialN'
p2864
I9
sS'.thisN'
p2865
I350
sS'.thisIndex'
p2866
I2
sg15
(lp2867
S'k'
asg17
S'Y'
sg14
I8
sa(dp2868
g16
(lp2869
S'd'
asg96
I7
sS'.thisRepN'
p2870
I31
sg30
g31
sg32
g33
sS'.thisTrialN'
p2871
I10
sS'.thisN'
p2872
I351
sS'.thisIndex'
p2873
I7
sg15
(lp2874
S'd'
asg17
S'Y'
sg14
I8
sa(dp2875
g16
(lp2876
S'k'
asg18
S'Y'
sS'.thisRepN'
p2877
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2878
I0
sS'.thisN'
p2879
I352
sS'.thisIndex'
p2880
I1
sg15
(lp2881
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2882
S'space'
p2883
asg96
I1
sa(dp2884
g16
(lp2885
S'k'
asg18
S'N'
sS'.thisRepN'
p2886
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2887
I1
sS'.thisN'
p2888
I353
sS'.thisIndex'
p2889
I6
sg15
(lp2890
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp2891
g16
(lp2892
S'k'
asg18
S'N'
sS'.thisRepN'
p2893
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2894
I2
sS'.thisN'
p2895
I354
sS'.thisIndex'
p2896
I4
sg15
(lp2897
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I4
sa(dp2898
g16
(lp2899
S'k'
asg18
S'N'
sS'.thisRepN'
p2900
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2901
I3
sS'.thisN'
p2902
I355
sS'.thisIndex'
p2903
I8
sg15
(lp2904
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I8
sa(dp2905
g16
(lp2906
S'd'
asg18
S'Y'
sS'.thisRepN'
p2907
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2908
I4
sS'.thisN'
p2909
I356
sS'.thisIndex'
p2910
I0
sg15
(lp2911
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2912
S'space'
p2913
asg96
I0
sa(dp2914
g16
(lp2915
S'd'
asg18
S'Y'
sS'.thisRepN'
p2916
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2917
I5
sS'.thisN'
p2918
I357
sS'.thisIndex'
p2919
I9
sg15
(lp2920
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2921
S'space'
p2922
asg96
I9
sa(dp2923
g16
(lp2924
S'd'
asg18
S'N'
sS'.thisRepN'
p2925
I32
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2926
I6
sS'.thisN'
p2927
I358
sS'.thisIndex'
p2928
I8
sg15
(lp2929
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2930
S'space'
p2931
asg96
I8
sa(dp2932
g16
(lp2933
S'd'
asg18
S'Y'
sS'.thisRepN'
p2934
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2935
I7
sS'.thisN'
p2936
I359
sS'.thisIndex'
p2937
I4
sg15
(lp2938
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2939
S'space'
p2940
asg96
I4
sa(dp2941
g16
(lp2942
S'k'
asg18
S'Y'
sS'.thisRepN'
p2943
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2944
I8
sS'.thisN'
p2945
I360
sS'.thisIndex'
p2946
I1
sg15
(lp2947
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2948
S'space'
p2949
asg96
I1
sa(dp2950
g16
(lp2951
S'k'
asg18
S'N'
sS'.thisRepN'
p2952
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2953
I9
sS'.thisN'
p2954
I361
sS'.thisIndex'
p2955
I1
sg15
(lp2956
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp2957
g16
(lp2958
S'k'
asg18
S'Y'
sS'.thisRepN'
p2959
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2960
I10
sS'.thisN'
p2961
I362
sS'.thisIndex'
p2962
I3
sg15
(lp2963
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2964
S'space'
p2965
asg96
I3
sa(dp2966
g16
(lp2967
S'd'
asg18
S'Y'
sS'.thisRepN'
p2968
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2969
I0
sS'.thisN'
p2970
I363
sS'.thisIndex'
p2971
I2
sg15
(lp2972
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2973
S'space'
p2974
asg96
I2
sa(dp2975
g16
(lp2976
S'd'
asg18
S'Y'
sS'.thisRepN'
p2977
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2978
I1
sS'.thisN'
p2979
I364
sS'.thisIndex'
p2980
I3
sg15
(lp2981
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2982
S'space'
p2983
asg96
I3
sa(dp2984
g16
(lp2985
S'k'
asg18
S'N'
sS'.thisRepN'
p2986
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2987
I2
sS'.thisN'
p2988
I365
sS'.thisIndex'
p2989
I1
sg15
(lp2990
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp2991
g16
(lp2992
S'k'
asg18
S'N'
sS'.thisRepN'
p2993
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2994
I3
sS'.thisN'
p2995
I366
sS'.thisIndex'
p2996
I2
sg15
(lp2997
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp2998
g16
(lp2999
S'd'
asg18
S'Y'
sS'.thisRepN'
p3000
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3001
I4
sS'.thisN'
p3002
I367
sS'.thisIndex'
p3003
I5
sg15
(lp3004
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3005
S'space'
p3006
asg96
I5
sa(dp3007
g16
(lp3008
S'k'
asg18
S'N'
sS'.thisRepN'
p3009
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3010
I5
sS'.thisN'
p3011
I368
sS'.thisIndex'
p3012
I4
sg15
(lp3013
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I4
sa(dp3014
g16
(lp3015
S'k'
asg18
S'Y'
sS'.thisRepN'
p3016
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3017
I6
sS'.thisN'
p3018
I369
sS'.thisIndex'
p3019
I1
sg15
(lp3020
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3021
S'space'
p3022
asg96
I1
sa(dp3023
g16
(lp3024
S'd'
asg18
S'N'
sS'.thisRepN'
p3025
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3026
I7
sS'.thisN'
p3027
I370
sS'.thisIndex'
p3028
I3
sg15
(lp3029
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3030
g16
(lp3031
S'd'
asg18
S'N'
sS'.thisRepN'
p3032
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3033
I8
sS'.thisN'
p3034
I371
sS'.thisIndex'
p3035
I8
sg15
(lp3036
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I8
sa(dp3037
g16
(lp3038
S'd'
asg18
S'Y'
sS'.thisRepN'
p3039
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3040
I9
sS'.thisN'
p3041
I372
sS'.thisIndex'
p3042
I6
sg15
(lp3043
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3044
S'space'
p3045
asg96
I6
sa(dp3046
g16
(lp3047
S'k'
asg18
S'N'
sS'.thisRepN'
p3048
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3049
I10
sS'.thisN'
p3050
I373
sS'.thisIndex'
p3051
I9
sg15
(lp3052
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3053
g16
(lp3054
S'k'
asg18
S'Y'
sS'.thisRepN'
p3055
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3056
I0
sS'.thisN'
p3057
I374
sS'.thisIndex'
p3058
I10
sg15
(lp3059
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3060
S'space'
p3061
asg96
I10
sa(dp3062
g16
(lp3063
S'd'
asg18
S'Y'
sS'.thisRepN'
p3064
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3065
I1
sS'.thisN'
p3066
I375
sS'.thisIndex'
p3067
I9
sg15
(lp3068
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3069
S'space'
p3070
asg96
I9
sa(dp3071
g16
(lp3072
S'd'
asg18
S'N'
sS'.thisRepN'
p3073
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3074
I2
sS'.thisN'
p3075
I376
sS'.thisIndex'
p3076
I4
sg15
(lp3077
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I4
sa(dp3078
g16
(lp3079
S'k'
asg18
S'Y'
sS'.thisRepN'
p3080
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3081
I3
sS'.thisN'
p3082
I377
sS'.thisIndex'
p3083
I3
sg15
(lp3084
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3085
S'space'
p3086
asg96
I3
sa(dp3087
g16
(lp3088
S'd'
asg18
S'N'
sS'.thisRepN'
p3089
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3090
I4
sS'.thisN'
p3091
I378
sS'.thisIndex'
p3092
I8
sg15
(lp3093
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I8
sa(dp3094
g16
(lp3095
S'd'
asg18
S'Y'
sS'.thisRepN'
p3096
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3097
I5
sS'.thisN'
p3098
I379
sS'.thisIndex'
p3099
I4
sg15
(lp3100
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3101
S'space'
p3102
asg96
I4
sa(dp3103
g16
(lp3104
S'd'
asg18
S'Y'
sS'.thisRepN'
p3105
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3106
I6
sS'.thisN'
p3107
I380
sS'.thisIndex'
p3108
I1
sg15
(lp3109
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3110
S'space'
p3111
asg96
I1
sa(dp3112
g16
(lp3113
S'd'
asg18
S'N'
sS'.thisRepN'
p3114
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3115
I7
sS'.thisN'
p3116
I381
sS'.thisIndex'
p3117
I6
sg15
(lp3118
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp3119
g16
(lp3120
S'k'
asg18
S'N'
sS'.thisRepN'
p3121
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3122
I8
sS'.thisN'
p3123
I382
sS'.thisIndex'
p3124
I9
sg15
(lp3125
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3126
g16
(lp3127
S'k'
asg18
S'Y'
sS'.thisRepN'
p3128
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3129
I9
sS'.thisN'
p3130
I383
sS'.thisIndex'
p3131
I0
sg15
(lp3132
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3133
S'space'
p3134
asg96
I0
sa(dp3135
g16
(lp3136
S'k'
asg18
S'N'
sS'.thisRepN'
p3137
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3138
I10
sS'.thisN'
p3139
I384
sS'.thisIndex'
p3140
I2
sg15
(lp3141
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3142
g16
(lp3143
S'k'
asg18
S'Y'
sS'.thisRepN'
p3144
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3145
I0
sS'.thisN'
p3146
I385
sS'.thisIndex'
p3147
I1
sg15
(lp3148
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3149
S'space'
p3150
asg96
I1
sa(dp3151
g16
(lp3152
S'd'
asg18
S'Y'
sS'.thisRepN'
p3153
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3154
I1
sS'.thisN'
p3155
I386
sS'.thisIndex'
p3156
I6
sg15
(lp3157
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3158
S'space'
p3159
asg96
I6
sa(dp3160
g16
(lp3161
S'd'
asg18
S'N'
sS'.thisRepN'
p3162
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3163
I2
sS'.thisN'
p3164
I387
sS'.thisIndex'
p3165
I8
sg15
(lp3166
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I8
sa(dp3167
g16
(lp3168
S'k'
asg18
S'Y'
sS'.thisRepN'
p3169
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3170
I3
sS'.thisN'
p3171
I388
sS'.thisIndex'
p3172
I5
sg15
(lp3173
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3174
S'space'
p3175
asg96
I5
sa(dp3176
g16
(lp3177
S'd'
asg18
S'N'
sS'.thisRepN'
p3178
I35
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3179
I4
sS'.thisN'
p3180
I389
sS'.thisIndex'
p3181
I2
sg15
(lp3182
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3183
S'space'
p3184
asg96
I2
sa(dp3185
g16
(lp3186
S'k'
asg18
S'N'
sS'.thisRepN'
p3187
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3188
I5
sS'.thisN'
p3189
I390
sS'.thisIndex'
p3190
I10
sg15
(lp3191
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp3192
g16
(lp3193
S'd'
asg18
S'Y'
sS'.thisRepN'
p3194
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3195
I6
sS'.thisN'
p3196
I391
sS'.thisIndex'
p3197
I9
sg15
(lp3198
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3199
S'space'
p3200
asg96
I9
sa(dp3201
g16
(lp3202
S'k'
asg18
S'N'
sS'.thisRepN'
p3203
I35
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3204
I7
sS'.thisN'
p3205
I392
sS'.thisIndex'
p3206
I2
sg15
(lp3207
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3208
S'space'
p3209
asg96
I2
sa(dp3210
g16
(lp3211
S'k'
asg18
S'N'
sS'.thisRepN'
p3212
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3213
I8
sS'.thisN'
p3214
I393
sS'.thisIndex'
p3215
I5
sg15
(lp3216
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp3217
g16
(lp3218
S'd'
asg18
S'Y'
sS'.thisRepN'
p3219
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3220
I9
sS'.thisN'
p3221
I394
sS'.thisIndex'
p3222
I4
sg15
(lp3223
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3224
S'space'
p3225
asg96
I4
sa(dp3226
g16
(lp3227
S'k'
asg18
S'Y'
sS'.thisRepN'
p3228
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3229
I10
sS'.thisN'
p3230
I395
sS'.thisIndex'
p3231
I0
sg15
(lp3232
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3233
S'space'
p3234
asg96
I0
sa(dp3235
g16
(lp3236
S'd'
asg18
S'N'
sS'.thisRepN'
p3237
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3238
I0
sS'.thisN'
p3239
I396
sS'.thisIndex'
p3240
I0
sg15
(lp3241
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I0
sa(dp3242
g16
(lp3243
S'd'
asg18
S'Y'
sS'.thisRepN'
p3244
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3245
I1
sS'.thisN'
p3246
I397
sS'.thisIndex'
p3247
I3
sg15
(lp3248
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3249
S'space'
p3250
asg96
I3
sa(dp3251
g16
(lp3252
S'd'
asg18
S'N'
sS'.thisRepN'
p3253
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3254
I2
sS'.thisN'
p3255
I398
sS'.thisIndex'
p3256
I3
sg15
(lp3257
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3258
g16
(lp3259
S'k'
asg18
S'Y'
sg22
I45
sS'.thisN'
p3260
I399
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3261
I3
sS'.thisRepN'
p3262
I36
sg21
I41
sS'.thisIndex'
p3263
I6
sg23
I25
sg15
(lp3264
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3265
S'space'
p3266
asg96
I6
sa(dp3267
g16
(lp3268
S'k'
asg96
I2
sS'.thisRepN'
p3269
I36
sg30
g31
sg32
g33
sS'.thisTrialN'
p3270
I4
sS'.thisN'
p3271
I400
sS'.thisIndex'
p3272
I2
sg15
(lp3273
S'd'
asg17
S'N'
sg14
I9
sa(dp3274
g16
(lp3275
S'd'
asg96
I9
sS'.thisRepN'
p3276
I36
sg30
g31
sg32
g33
sS'.thisTrialN'
p3277
I5
sS'.thisN'
p3278
I401
sS'.thisIndex'
p3279
I9
sg15
(lp3280
S'd'
asg17
S'Y'
sg14
I9
sa(dp3281
g16
(lp3282
S'k'
asg18
S'Y'
sS'.thisRepN'
p3283
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3284
I6
sS'.thisN'
p3285
I402
sS'.thisIndex'
p3286
I3
sg15
(lp3287
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3288
S'space'
p3289
asg96
I3
sa(dp3290
g16
(lp3291
S'k'
asg18
S'Y'
sS'.thisRepN'
p3292
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3293
I7
sS'.thisN'
p3294
I403
sS'.thisIndex'
p3295
I5
sg15
(lp3296
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3297
S'space'
p3298
asg96
I5
sa(dp3299
g16
(lp3300
S'k'
asg18
S'Y'
sS'.thisRepN'
p3301
I36
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3302
I8
sS'.thisN'
p3303
I404
sS'.thisIndex'
p3304
I3
sg15
(lp3305
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3306
g16
(lp3307
S'd'
asg18
S'Y'
sS'.thisRepN'
p3308
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3309
I9
sS'.thisN'
p3310
I405
sS'.thisIndex'
p3311
I9
sg15
(lp3312
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3313
S'space'
p3314
asg96
I9
sa(dp3315
g16
(lp3316
S'k'
asg18
S'Y'
sS'.thisRepN'
p3317
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3318
I10
sS'.thisN'
p3319
I406
sS'.thisIndex'
p3320
I4
sg15
(lp3321
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3322
S'space'
p3323
asg96
I4
sa(dp3324
g16
(lp3325
S'd'
asg18
S'N'
sS'.thisRepN'
p3326
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3327
I0
sS'.thisN'
p3328
I407
sS'.thisIndex'
p3329
I9
sg15
(lp3330
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3331
g16
(lp3332
S'k'
asg18
S'Y'
sS'.thisRepN'
p3333
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3334
I1
sS'.thisN'
p3335
I408
sS'.thisIndex'
p3336
I8
sg15
(lp3337
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3338
S'space'
p3339
asg96
I8
sa(dp3340
g16
(lp3341
S'd'
asg18
S'Y'
sS'.thisRepN'
p3342
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3343
I2
sS'.thisN'
p3344
I409
sS'.thisIndex'
p3345
I9
sg15
(lp3346
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3347
S'space'
p3348
asg96
I9
sa(dp3349
g16
(lp3350
S'd'
asg18
S'N'
sS'.thisRepN'
p3351
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3352
I3
sS'.thisN'
p3353
I410
sS'.thisIndex'
p3354
I7
sg15
(lp3355
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3356
g16
(lp3357
S'k'
asg18
S'N'
sS'.thisRepN'
p3358
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3359
I4
sS'.thisN'
p3360
I411
sS'.thisIndex'
p3361
I10
sg15
(lp3362
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3363
g16
(lp3364
S'k'
asg18
S'N'
sS'.thisRepN'
p3365
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3366
I5
sS'.thisN'
p3367
I412
sS'.thisIndex'
p3368
I2
sg15
(lp3369
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3370
g16
(lp3371
S'd'
asg18
S'N'
sS'.thisRepN'
p3372
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3373
I6
sS'.thisN'
p3374
I413
sS'.thisIndex'
p3375
I1
sg15
(lp3376
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3377
g16
(lp3378
S'k'
asg18
S'Y'
sS'.thisRepN'
p3379
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3380
I7
sS'.thisN'
p3381
I414
sS'.thisIndex'
p3382
I1
sg15
(lp3383
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3384
S'space'
p3385
asg96
I1
sa(dp3386
g16
(lp3387
S'd'
asg18
S'N'
sS'.thisRepN'
p3388
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3389
I8
sS'.thisN'
p3390
I415
sS'.thisIndex'
p3391
I5
sg15
(lp3392
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3393
g16
(lp3394
S'k'
asg18
S'N'
sS'.thisRepN'
p3395
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3396
I9
sS'.thisN'
p3397
I416
sS'.thisIndex'
p3398
I9
sg15
(lp3399
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I9
sa(dp3400
g16
(lp3401
S'd'
asg18
S'Y'
sS'.thisRepN'
p3402
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3403
I10
sS'.thisN'
p3404
I417
sS'.thisIndex'
p3405
I2
sg15
(lp3406
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3407
S'space'
p3408
asg96
I2
sa(dp3409
g16
(lp3410
S'k'
asg18
S'N'
sS'.thisRepN'
p3411
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3412
I0
sS'.thisN'
p3413
I418
sS'.thisIndex'
p3414
I10
sg15
(lp3415
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3416
g16
(lp3417
S'k'
asg18
S'N'
sS'.thisRepN'
p3418
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3419
I1
sS'.thisN'
p3420
I419
sS'.thisIndex'
p3421
I1
sg15
(lp3422
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3423
g16
(lp3424
S'd'
asg18
S'Y'
sS'.thisRepN'
p3425
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3426
I2
sS'.thisN'
p3427
I420
sS'.thisIndex'
p3428
I3
sg15
(lp3429
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3430
S'space'
p3431
asg96
I3
sa(dp3432
g16
(lp3433
S'k'
asg18
S'Y'
sS'.thisRepN'
p3434
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3435
I3
sS'.thisN'
p3436
I421
sS'.thisIndex'
p3437
I1
sg15
(lp3438
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3439
S'space'
p3440
asg96
I1
sa(dp3441
g16
(lp3442
S'd'
asg18
S'Y'
sS'.thisRepN'
p3443
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3444
I4
sS'.thisN'
p3445
I422
sS'.thisIndex'
p3446
I5
sg15
(lp3447
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3448
S'space'
p3449
asg96
I5
sa(dp3450
g16
(lp3451
S'k'
asg18
S'N'
sS'.thisRepN'
p3452
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3453
I5
sS'.thisN'
p3454
I423
sS'.thisIndex'
p3455
I5
sg15
(lp3456
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3457
g16
(lp3458
S'd'
asg18
S'Y'
sS'.thisRepN'
p3459
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3460
I6
sS'.thisN'
p3461
I424
sS'.thisIndex'
p3462
I10
sg15
(lp3463
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3464
S'space'
p3465
asg96
I10
sa(dp3466
g16
(lp3467
S'k'
asg18
S'N'
sS'.thisRepN'
p3468
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3469
I7
sS'.thisN'
p3470
I425
sS'.thisIndex'
p3471
I6
sg15
(lp3472
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3473
g16
(lp3474
S'k'
asg18
S'N'
sS'.thisRepN'
p3475
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3476
I8
sS'.thisN'
p3477
I426
sS'.thisIndex'
p3478
I9
sg15
(lp3479
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I9
sa(dp3480
g16
(lp3481
S'd'
asg18
S'Y'
sS'.thisRepN'
p3482
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3483
I9
sS'.thisN'
p3484
I427
sS'.thisIndex'
p3485
I5
sg15
(lp3486
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3487
S'space'
p3488
asg96
I5
sa(dp3489
g16
(lp3490
S'd'
asg18
S'N'
sS'.thisRepN'
p3491
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3492
I10
sS'.thisN'
p3493
I428
sS'.thisIndex'
p3494
I10
sg15
(lp3495
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I10
sa(dp3496
g16
(lp3497
S'k'
asg18
S'N'
sS'.thisRepN'
p3498
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3499
I0
sS'.thisN'
p3500
I429
sS'.thisIndex'
p3501
I1
sg15
(lp3502
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I1
sa(dp3503
g16
(lp3504
S'k'
asg18
S'N'
sS'.thisRepN'
p3505
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3506
I1
sS'.thisN'
p3507
I430
sS'.thisIndex'
p3508
I0
sg15
(lp3509
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I0
sa(dp3510
g16
(lp3511
S'k'
asg18
S'N'
sS'.thisRepN'
p3512
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3513
I2
sS'.thisN'
p3514
I431
sS'.thisIndex'
p3515
I8
sg15
(lp3516
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3517
g16
(lp3518
S'k'
asg18
S'Y'
sS'.thisRepN'
p3519
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3520
I3
sS'.thisN'
p3521
I432
sS'.thisIndex'
p3522
I8
sg15
(lp3523
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3524
S'space'
p3525
asg96
I8
sa(dp3526
g16
(lp3527
S'k'
asg18
S'N'
sS'.thisRepN'
p3528
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3529
I4
sS'.thisN'
p3530
I433
sS'.thisIndex'
p3531
I1
sg15
(lp3532
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3533
g16
(lp3534
S'd'
asg18
S'Y'
sS'.thisRepN'
p3535
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3536
I5
sS'.thisN'
p3537
I434
sS'.thisIndex'
p3538
I7
sg15
(lp3539
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3540
S'space'
p3541
asg96
I7
sa(dp3542
g16
(lp3543
S'd'
asg18
S'N'
sS'.thisRepN'
p3544
I39
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3545
I6
sS'.thisN'
p3546
I435
sS'.thisIndex'
p3547
I0
sg15
(lp3548
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3549
S'space'
p3550
asg96
I0
sa(dp3551
g16
(lp3552
S'd'
asg18
S'N'
sS'.thisRepN'
p3553
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3554
I7
sS'.thisN'
p3555
I436
sS'.thisIndex'
p3556
I3
sg15
(lp3557
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3558
g16
(lp3559
S'd'
asg18
S'Y'
sS'.thisRepN'
p3560
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3561
I8
sS'.thisN'
p3562
I437
sS'.thisIndex'
p3563
I4
sg15
(lp3564
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3565
S'space'
p3566
asg96
I4
sa(dp3567
g16
(lp3568
S'd'
asg18
S'N'
sS'.thisRepN'
p3569
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3570
I9
sS'.thisN'
p3571
I438
sS'.thisIndex'
p3572
I6
sg15
(lp3573
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3574
g16
(lp3575
S'k'
asg18
S'Y'
sS'.thisRepN'
p3576
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3577
I10
sS'.thisN'
p3578
I439
sS'.thisIndex'
p3579
I2
sg15
(lp3580
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3581
S'space'
p3582
asg96
I2
sa(dp3583
g16
(lp3584
S'k'
asg18
S'N'
sS'.thisRepN'
p3585
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3586
I0
sS'.thisN'
p3587
I440
sS'.thisIndex'
p3588
I10
sg15
(lp3589
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3590
g16
(lp3591
S'd'
asg18
S'N'
sS'.thisRepN'
p3592
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3593
I1
sS'.thisN'
p3594
I441
sS'.thisIndex'
p3595
I5
sg15
(lp3596
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3597
g16
(lp3598
S'd'
asg18
S'N'
sS'.thisRepN'
p3599
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3600
I2
sS'.thisN'
p3601
I442
sS'.thisIndex'
p3602
I9
sg15
(lp3603
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3604
g16
(lp3605
S'k'
asg18
S'Y'
sS'.thisRepN'
p3606
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3607
I3
sS'.thisN'
p3608
I443
sS'.thisIndex'
p3609
I10
sg15
(lp3610
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3611
S'space'
p3612
asg96
I10
sa(dp3613
g16
(lp3614
S'd'
asg18
S'Y'
sS'.thisRepN'
p3615
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3616
I4
sS'.thisN'
p3617
I444
sS'.thisIndex'
p3618
I7
sg15
(lp3619
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3620
S'space'
p3621
asg96
I7
sa(dp3622
g16
(lp3623
S'k'
asg18
S'N'
sS'.thisRepN'
p3624
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3625
I5
sS'.thisN'
p3626
I445
sS'.thisIndex'
p3627
I2
sg15
(lp3628
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3629
g16
(lp3630
S'k'
asg18
S'Y'
sS'.thisRepN'
p3631
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3632
I6
sS'.thisN'
p3633
I446
sS'.thisIndex'
p3634
I9
sg15
(lp3635
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3636
S'space'
p3637
asg96
I9
sa(dp3638
g16
(lp3639
S'd'
asg18
S'N'
sS'.thisRepN'
p3640
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3641
I7
sS'.thisN'
p3642
I447
sS'.thisIndex'
p3643
I9
sg15
(lp3644
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3645
g16
(lp3646
S'k'
asg18
S'Y'
sS'.thisRepN'
p3647
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3648
I8
sS'.thisN'
p3649
I448
sS'.thisIndex'
p3650
I2
sg15
(lp3651
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3652
S'space'
p3653
asg96
I2
sa(dp3654
g16
(lp3655
S'd'
asg18
S'Y'
sg22
I46
sS'.thisN'
p3656
I449
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3657
I9
sS'.thisRepN'
p3658
I40
sg21
I43
sS'.thisIndex'
p3659
I8
sg23
I23
sg15
(lp3660
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3661
S'space'
p3662
asg96
I8
sa(dp3663
g16
(lp3664
S'd'
asg96
I9
sS'.thisRepN'
p3665
I40
sg30
g31
sg32
g33
sS'.thisTrialN'
p3666
I10
sS'.thisN'
p3667
I450
sS'.thisIndex'
p3668
I9
sg15
(lp3669
S'd'
asg17
S'Y'
sg14
I10
sa(dp3670
g16
(lp3671
S'd'
asg96
I0
sS'.thisRepN'
p3672
I41
sg30
g31
sg32
g33
sS'.thisTrialN'
p3673
I0
sS'.thisN'
p3674
I451
sS'.thisIndex'
p3675
I0
sg15
(lp3676
S'd'
asg17
S'Y'
sg14
I10
sa(dp3677
g16
(lp3678
S'k'
asg18
S'Y'
sS'.thisRepN'
p3679
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3680
I1
sS'.thisN'
p3681
I452
sS'.thisIndex'
p3682
I10
sg15
(lp3683
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3684
S'space'
p3685
asg96
I10
sa(dp3686
g16
(lp3687
S'd'
asg18
S'Y'
sS'.thisRepN'
p3688
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3689
I2
sS'.thisN'
p3690
I453
sS'.thisIndex'
p3691
I6
sg15
(lp3692
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3693
S'space'
p3694
asg96
I6
sa(dp3695
g16
(lp3696
S'k'
asg18
S'N'
sS'.thisRepN'
p3697
I41
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3698
I3
sS'.thisN'
p3699
I454
sS'.thisIndex'
p3700
I9
sg15
(lp3701
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3702
S'space'
p3703
asg96
I9
sa(dp3704
g16
(lp3705
S'd'
asg18
S'Y'
sS'.thisRepN'
p3706
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3707
I4
sS'.thisN'
p3708
I455
sS'.thisIndex'
p3709
I2
sg15
(lp3710
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3711
S'space'
p3712
asg96
I2
sa(dp3713
g16
(lp3714
S'k'
asg18
S'N'
sS'.thisRepN'
p3715
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3716
I5
sS'.thisN'
p3717
I456
sS'.thisIndex'
p3718
I1
sg15
(lp3719
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3720
g16
(lp3721
S'k'
asg18
S'Y'
sS'.thisRepN'
p3722
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3723
I6
sS'.thisN'
p3724
I457
sS'.thisIndex'
p3725
I3
sg15
(lp3726
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3727
S'space'
p3728
asg96
I3
sa(dp3729
g16
(lp3730
S'd'
asg18
S'N'
sS'.thisRepN'
p3731
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3732
I7
sS'.thisN'
p3733
I458
sS'.thisIndex'
p3734
I8
sg15
(lp3735
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3736
g16
(lp3737
S'k'
asg18
S'Y'
sS'.thisRepN'
p3738
I41
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3739
I8
sS'.thisN'
p3740
I459
sS'.thisIndex'
p3741
I8
sg15
(lp3742
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3743
g16
(lp3744
S'd'
asg18
S'N'
sS'.thisRepN'
p3745
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3746
I9
sS'.thisN'
p3747
I460
sS'.thisIndex'
p3748
I7
sg15
(lp3749
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I7
sa(dp3750
g16
(lp3751
S'k'
asg18
S'N'
sS'.thisRepN'
p3752
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3753
I10
sS'.thisN'
p3754
I461
sS'.thisIndex'
p3755
I6
sg15
(lp3756
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I6
sa(dp3757
g16
(lp3758
S'd'
asg18
S'N'
sS'.thisRepN'
p3759
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3760
I0
sS'.thisN'
p3761
I462
sS'.thisIndex'
p3762
I3
sg15
(lp3763
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3764
g16
(lp3765
S'k'
asg18
S'Y'
sS'.thisRepN'
p3766
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3767
I1
sS'.thisN'
p3768
I463
sS'.thisIndex'
p3769
I6
sg15
(lp3770
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3771
S'space'
p3772
asg96
I6
sa(dp3773
g16
(lp3774
S'k'
asg18
S'N'
sS'.thisRepN'
p3775
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3776
I2
sS'.thisN'
p3777
I464
sS'.thisIndex'
p3778
I9
sg15
(lp3779
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3780
g16
(lp3781
S'k'
asg18
S'N'
sS'.thisRepN'
p3782
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3783
I3
sS'.thisN'
p3784
I465
sS'.thisIndex'
p3785
I7
sg15
(lp3786
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I7
sa(dp3787
g16
(lp3788
S'd'
asg18
S'N'
sS'.thisRepN'
p3789
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3790
I4
sS'.thisN'
p3791
I466
sS'.thisIndex'
p3792
I9
sg15
(lp3793
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3794
g16
(lp3795
S'd'
asg18
S'Y'
sS'.thisRepN'
p3796
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3797
I5
sS'.thisN'
p3798
I467
sS'.thisIndex'
p3799
I4
sg15
(lp3800
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3801
S'space'
p3802
asg96
I4
sa(dp3803
g16
(lp3804
S'k'
asg18
S'Y'
sS'.thisRepN'
p3805
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3806
I6
sS'.thisN'
p3807
I468
sS'.thisIndex'
p3808
I5
sg15
(lp3809
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3810
S'space'
p3811
asg96
I5
sa(dp3812
g16
(lp3813
S'd'
asg18
S'Y'
sS'.thisRepN'
p3814
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3815
I7
sS'.thisN'
p3816
I469
sS'.thisIndex'
p3817
I9
sg15
(lp3818
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3819
S'space'
p3820
asg96
I9
sa(dp3821
g16
(lp3822
S'd'
asg18
S'N'
sS'.thisRepN'
p3823
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3824
I8
sS'.thisN'
p3825
I470
sS'.thisIndex'
p3826
I1
sg15
(lp3827
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3828
g16
(lp3829
S'd'
asg18
S'N'
sS'.thisRepN'
p3830
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3831
I9
sS'.thisN'
p3832
I471
sS'.thisIndex'
p3833
I9
sg15
(lp3834
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3835
g16
(lp3836
S'd'
asg18
S'Y'
sS'.thisRepN'
p3837
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3838
I10
sS'.thisN'
p3839
I472
sS'.thisIndex'
p3840
I4
sg15
(lp3841
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3842
S'space'
p3843
asg96
I4
sa(dp3844
g16
(lp3845
S'k'
asg18
S'Y'
sS'.thisRepN'
p3846
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3847
I0
sS'.thisN'
p3848
I473
sS'.thisIndex'
p3849
I7
sg15
(lp3850
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3851
S'space'
p3852
asg96
I7
sa(dp3853
g16
(lp3854
S'k'
asg18
S'Y'
sS'.thisRepN'
p3855
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3856
I1
sS'.thisN'
p3857
I474
sS'.thisIndex'
p3858
I10
sg15
(lp3859
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3860
S'space'
p3861
asg96
I10
sa(dp3862
g16
(lp3863
S'k'
asg18
S'Y'
sS'.thisRepN'
p3864
I43
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3865
I2
sS'.thisN'
p3866
I475
sS'.thisIndex'
p3867
I1
sg15
(lp3868
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3869
g16
(lp3870
S'k'
asg18
S'N'
sS'.thisRepN'
p3871
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3872
I3
sS'.thisN'
p3873
I476
sS'.thisIndex'
p3874
I0
sg15
(lp3875
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I0
sa(dp3876
g16
(lp3877
S'k'
asg18
S'N'
sS'.thisRepN'
p3878
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3879
I4
sS'.thisN'
p3880
I477
sS'.thisIndex'
p3881
I4
sg15
(lp3882
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3883
g16
(lp3884
S'k'
asg18
S'N'
sS'.thisRepN'
p3885
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3886
I5
sS'.thisN'
p3887
I478
sS'.thisIndex'
p3888
I2
sg15
(lp3889
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3890
g16
(lp3891
S'd'
asg18
S'N'
sS'.thisRepN'
p3892
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3893
I6
sS'.thisN'
p3894
I479
sS'.thisIndex'
p3895
I3
sg15
(lp3896
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3897
g16
(lp3898
S'k'
asg18
S'N'
sS'.thisRepN'
p3899
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3900
I7
sS'.thisN'
p3901
I480
sS'.thisIndex'
p3902
I8
sg15
(lp3903
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3904
g16
(lp3905
S'k'
asg18
S'Y'
sS'.thisRepN'
p3906
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3907
I8
sS'.thisN'
p3908
I481
sS'.thisIndex'
p3909
I4
sg15
(lp3910
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3911
S'space'
p3912
asg96
I4
sa(dp3913
g16
(lp3914
S'd'
asg18
S'Y'
sS'.thisRepN'
p3915
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3916
I9
sS'.thisN'
p3917
I482
sS'.thisIndex'
p3918
I0
sg15
(lp3919
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3920
S'space'
p3921
asg96
I0
sa(dp3922
g16
(lp3923
S'k'
asg18
S'Y'
sS'.thisRepN'
p3924
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3925
I10
sS'.thisN'
p3926
I483
sS'.thisIndex'
p3927
I7
sg15
(lp3928
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3929
S'space'
p3930
asg96
I7
sa(dp3931
g16
(lp3932
S'd'
asg18
S'Y'
sS'.thisRepN'
p3933
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3934
I0
sS'.thisN'
p3935
I484
sS'.thisIndex'
p3936
I3
sg15
(lp3937
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3938
S'space'
p3939
asg96
I3
sa(dp3940
g16
(lp3941
S'd'
asg18
S'N'
sS'.thisRepN'
p3942
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3943
I1
sS'.thisN'
p3944
I485
sS'.thisIndex'
p3945
I5
sg15
(lp3946
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I5
sa(dp3947
g16
(lp3948
S'd'
asg18
S'N'
sS'.thisRepN'
p3949
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3950
I2
sS'.thisN'
p3951
I486
sS'.thisIndex'
p3952
I7
sg15
(lp3953
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I7
sa(dp3954
g16
(lp3955
S'd'
asg18
S'Y'
sS'.thisRepN'
p3956
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3957
I3
sS'.thisN'
p3958
I487
sS'.thisIndex'
p3959
I10
sg15
(lp3960
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3961
S'space'
p3962
asg96
I10
sa(dp3963
g16
(lp3964
S'd'
asg18
S'N'
sS'.thisRepN'
p3965
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3966
I4
sS'.thisN'
p3967
I488
sS'.thisIndex'
p3968
I3
sg15
(lp3969
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3970
g16
(lp3971
S'k'
asg18
S'N'
sS'.thisRepN'
p3972
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3973
I5
sS'.thisN'
p3974
I489
sS'.thisIndex'
p3975
I4
sg15
(lp3976
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3977
g16
(lp3978
S'k'
asg18
S'Y'
sS'.thisRepN'
p3979
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3980
I6
sS'.thisN'
p3981
I490
sS'.thisIndex'
p3982
I8
sg15
(lp3983
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3984
S'space'
p3985
asg96
I8
sa(dp3986
g16
(lp3987
S'k'
asg18
S'Y'
sS'.thisRepN'
p3988
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3989
I7
sS'.thisN'
p3990
I491
sS'.thisIndex'
p3991
I0
sg15
(lp3992
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3993
S'space'
p3994
asg96
I0
sa(dp3995
g16
(lp3996
S'd'
asg18
S'Y'
sS'.thisRepN'
p3997
I44
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3998
I8
sS'.thisN'
p3999
I492
sS'.thisIndex'
p4000
I10
sg15
(lp4001
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp4002
S'space'
p4003
aS'v'
asg96
I10
sa(dp4004
g16
(lp4005
S'd'
asg18
S'N'
sS'.thisRepN'
p4006
I44
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4007
I9
sS'.thisN'
p4008
I493
sS'.thisIndex'
p4009
I9
sg15
(lp4010
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp4011
S'space'
p4012
asg96
I9
sa(dp4013
g16
(lp4014
S'k'
asg18
S'N'
sS'.thisRepN'
p4015
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4016
I10
sS'.thisN'
p4017
I494
sS'.thisIndex'
p4018
I10
sg15
(lp4019
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I10
sa(dp4020
g16
(lp4021
S'd'
asg18
S'Y'
sS'.thisRepN'
p4022
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4023
I0
sS'.thisN'
p4024
I495
sS'.thisIndex'
p4025
I3
sg15
(lp4026
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp4027
S'space'
p4028
asg96
I3
sa(dp4029
g16
(lp4030
S'k'
asg18
S'Y'
sS'.thisRepN'
p4031
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4032
I1
sS'.thisN'
p4033
I496
sS'.thisIndex'
p4034
I4
sg15
(lp4035
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp4036
S'space'
p4037
asg96
I4
sa(dp4038
g16
(lp4039
S'k'
asg18
S'N'
sS'.thisRepN'
p4040
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4041
I2
sS'.thisN'
p4042
I497
sS'.thisIndex'
p4043
I8
sg15
(lp4044
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp4045
g16
(lp4046
S'd'
asg18
S'Y'
sS'.thisRepN'
p4047
I45
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4048
I3
sS'.thisN'
p4049
I498
sS'.thisIndex'
p4050
I4
sg15
(lp4051
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp4052
g16
(lp4053
S'd'
asg18
S'N'
sg22
I42
sS'.thisN'
p4054
I499
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4055
I4
sS'.thisRepN'
p4056
I45
sg21
I43
sS'.thisIndex'
p4057
I8
sg23
I24
sg15
(lp4058
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp4059
g16
(lp4060
S'k'
asS'.thisIndex'
p4061
I2
sS'.thisRepN'
p4062
I45
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4063
I5
sS'.thisN'
p4064
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4065
S'k'
asg17
S'N'
sg14
I11
sg96
I2
sa(dp4066
g16
(lp4067
S'd'
asS'.thisIndex'
p4068
I1
sS'.thisRepN'
p4069
I45
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4070
I6
sS'.thisN'
p4071
I501
sg25
S'Y'
sg15
(lp4072
S'k'
asg17
S'Y'
sg14
I11
sg96
I1
sa(dp4073
g16
(lp4074
S'd'
asg18
S'Y'
sS'.thisRepN'
p4075
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4076
I7
sS'.thisN'
p4077
I502
sg25
S'Y'
sg15
(lp4078
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4079
S'space'
p4080
asg96
I8
sS'.thisIndex'
p4081
I8
sa(dp4082
g16
(lp4083
S'd'
asg18
S'Y'
sS'.thisRepN'
p4084
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4085
I8
sS'.thisN'
p4086
I503
sg25
S'Y'
sg15
(lp4087
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4088
S'space'
p4089
asg96
I8
sS'.thisIndex'
p4090
I8
sa(dp4091
g16
(lp4092
S'd'
asg18
S'N'
sS'.thisRepN'
p4093
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4094
I9
sS'.thisN'
p4095
I504
sg25
S'Y'
sg15
(lp4096
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4097
I10
sa(dp4098
g16
(lp4099
S'd'
asg18
S'N'
sS'.thisRepN'
p4100
I45
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4101
I10
sS'.thisN'
p4102
I505
sg25
S'Y'
sg15
(lp4103
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4104
S'space'
p4105
asg96
I10
sS'.thisIndex'
p4106
I10
sa(dp4107
g16
(lp4108
S'd'
asg18
S'N'
sS'.thisRepN'
p4109
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4110
I0
sS'.thisN'
p4111
I506
sg25
S'Y'
sg15
(lp4112
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4113
I6
sa(dp4114
g16
(lp4115
S'd'
asg18
S'N'
sS'.thisRepN'
p4116
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4117
I1
sS'.thisN'
p4118
I507
sg25
S'Y'
sg15
(lp4119
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4120
I0
sa(dp4121
g16
(lp4122
S'k'
asg18
S'Y'
sS'.thisRepN'
p4123
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4124
I2
sS'.thisN'
p4125
I508
sg25
S'Y'
sg15
(lp4126
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4127
S'space'
p4128
asg96
I7
sS'.thisIndex'
p4129
I7
sa(dp4130
g16
(lp4131
S'k'
asg18
S'Y'
sS'.thisRepN'
p4132
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4133
I3
sS'.thisN'
p4134
I509
sg25
S'Y'
sg15
(lp4135
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4136
S'space'
p4137
asg96
I1
sS'.thisIndex'
p4138
I1
sa(dp4139
g16
(lp4140
S'd'
asg18
S'N'
sS'.thisRepN'
p4141
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4142
I4
sS'.thisN'
p4143
I510
sg25
S'Y'
sg15
(lp4144
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4145
I7
sa(dp4146
g16
(lp4147
S'd'
asg18
S'N'
sS'.thisRepN'
p4148
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4149
I5
sS'.thisN'
p4150
I511
sg25
S'Y'
sg15
(lp4151
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I9
sS'.thisIndex'
p4152
I9
sa(dp4153
g16
(lp4154
S'k'
asg18
S'Y'
sS'.thisRepN'
p4155
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4156
I6
sS'.thisN'
p4157
I512
sg25
S'Y'
sg15
(lp4158
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4159
S'space'
p4160
asg96
I1
sS'.thisIndex'
p4161
I1
sa(dp4162
g16
(lp4163
S'k'
asg18
S'Y'
sS'.thisRepN'
p4164
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4165
I7
sS'.thisN'
p4166
I513
sg25
S'Y'
sg15
(lp4167
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4168
S'space'
p4169
asg96
I7
sS'.thisIndex'
p4170
I7
sa(dp4171
g16
(lp4172
S'd'
asg18
S'N'
sS'.thisRepN'
p4173
I46
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4174
I8
sS'.thisN'
p4175
I514
sg25
S'Y'
sg15
(lp4176
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4177
S'space'
p4178
asg96
I9
sS'.thisIndex'
p4179
I9
sa(dp4180
g16
(lp4181
S'k'
asg18
S'N'
sS'.thisRepN'
p4182
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4183
I9
sS'.thisN'
p4184
I515
sg25
S'Y'
sg15
(lp4185
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I5
sS'.thisIndex'
p4186
I5
sa(dp4187
g16
(lp4188
S'd'
asg18
S'N'
sS'.thisRepN'
p4189
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4190
I10
sS'.thisN'
p4191
I516
sg25
S'Y'
sg15
(lp4192
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4193
I4
sa(dp4194
g16
(lp4195
S'd'
asg18
S'N'
sS'.thisRepN'
p4196
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4197
I0
sS'.thisN'
p4198
I517
sg25
S'Y'
sg15
(lp4199
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4200
I0
sa(dp4201
g16
(lp4202
S'k'
asg18
S'Y'
sS'.thisRepN'
p4203
I47
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4204
I1
sS'.thisN'
p4205
I518
sg25
S'Y'
sg15
(lp4206
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4207
I7
sa(dp4208
g16
(lp4209
S'd'
asg18
S'N'
sS'.thisRepN'
p4210
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4211
I2
sS'.thisN'
p4212
I519
sg25
S'Y'
sg15
(lp4213
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4214
I8
sa(dp4215
g16
(lp4216
S'k'
asg18
S'Y'
sS'.thisRepN'
p4217
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4218
I3
sS'.thisN'
p4219
I520
sg25
S'Y'
sg15
(lp4220
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4221
S'space'
p4222
asg96
I1
sS'.thisIndex'
p4223
I1
sa(dp4224
g16
(lp4225
S'k'
asg18
S'Y'
sS'.thisRepN'
p4226
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4227
I4
sS'.thisN'
p4228
I521
sg25
S'Y'
sg15
(lp4229
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4230
S'space'
p4231
asg96
I4
sS'.thisIndex'
p4232
I4
sa(dp4233
g16
(lp4234
S'k'
asg18
S'N'
sS'.thisRepN'
p4235
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4236
I5
sS'.thisN'
p4237
I522
sg25
S'Y'
sg15
(lp4238
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4239
I0
sa(dp4240
g16
(lp4241
S'd'
asg18
S'Y'
sS'.thisRepN'
p4242
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4243
I6
sS'.thisN'
p4244
I523
sg25
S'Y'
sg15
(lp4245
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4246
S'space'
p4247
asg96
I1
sS'.thisIndex'
p4248
I1
sa(dp4249
g16
(lp4250
S'd'
asg18
S'N'
sS'.thisRepN'
p4251
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4252
I7
sS'.thisN'
p4253
I524
sg25
S'Y'
sg15
(lp4254
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p4255
I3
sa(dp4256
g16
(lp4257
S'k'
asg18
S'N'
sS'.thisRepN'
p4258
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4259
I8
sS'.thisN'
p4260
I525
sg25
S'Y'
sg15
(lp4261
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4262
I8
sa(dp4263
g16
(lp4264
S'd'
asg18
S'Y'
sS'.thisRepN'
p4265
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4266
I9
sS'.thisN'
p4267
I526
sg25
S'Y'
sg15
(lp4268
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4269
S'space'
p4270
asg96
I4
sS'.thisIndex'
p4271
I4
sa(dp4272
g16
(lp4273
S'k'
asg18
S'Y'
sS'.thisRepN'
p4274
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4275
I10
sS'.thisN'
p4276
I527
sg25
S'Y'
sg15
(lp4277
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4278
S'space'
p4279
asg96
I4
sS'.thisIndex'
p4280
I4
sa(dp4281
g16
(lp4282
S'd'
asg18
S'Y'
sS'.thisRepN'
p4283
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4284
I0
sS'.thisN'
p4285
I528
sg25
S'Y'
sg15
(lp4286
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4287
S'space'
p4288
asg96
I5
sS'.thisIndex'
p4289
I5
sa(dp4290
g16
(lp4291
S'k'
asg18
S'Y'
sS'.thisRepN'
p4292
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4293
I1
sS'.thisN'
p4294
I529
sg25
S'Y'
sg15
(lp4295
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4296
S'space'
p4297
asg96
I4
sS'.thisIndex'
p4298
I4
sa(dp4299
g16
(lp4300
S'd'
asg18
S'N'
sS'.thisRepN'
p4301
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4302
I2
sS'.thisN'
p4303
I530
sg25
S'Y'
sg15
(lp4304
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4305
I4
sa(dp4306
g16
(lp4307
S'd'
asg18
S'Y'
sS'.thisRepN'
p4308
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4309
I3
sS'.thisN'
p4310
I531
sg25
S'Y'
sg15
(lp4311
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4312
S'space'
p4313
asg96
I4
sS'.thisIndex'
p4314
I4
sa(dp4315
g16
(lp4316
S'd'
asg18
S'N'
sS'.thisRepN'
p4317
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4318
I4
sS'.thisN'
p4319
I532
sg25
S'Y'
sg15
(lp4320
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p4321
I3
sa(dp4322
g16
(lp4323
S'k'
asg18
S'Y'
sS'.thisRepN'
p4324
I48
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4325
I5
sS'.thisN'
p4326
I533
sg25
S'Y'
sg15
(lp4327
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4328
I10
sa(dp4329
g16
(lp4330
S'd'
asg18
S'Y'
sS'.thisRepN'
p4331
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4332
I6
sS'.thisN'
p4333
I534
sg25
S'Y'
sg15
(lp4334
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4335
S'space'
p4336
asg96
I10
sS'.thisIndex'
p4337
I10
sa(dp4338
g16
(lp4339
S'k'
asg18
S'Y'
sS'.thisRepN'
p4340
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4341
I7
sS'.thisN'
p4342
I535
sg25
S'Y'
sg15
(lp4343
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4344
S'space'
p4345
asg96
I10
sS'.thisIndex'
p4346
I10
sa(dp4347
g16
(lp4348
S'k'
asg18
S'N'
sS'.thisRepN'
p4349
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4350
I8
sS'.thisN'
p4351
I536
sg25
S'Y'
sg15
(lp4352
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4353
I8
sa(dp4354
g16
(lp4355
S'd'
asg18
S'N'
sS'.thisRepN'
p4356
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4357
I9
sS'.thisN'
p4358
I537
sg25
S'Y'
sg15
(lp4359
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p4360
I3
sa(dp4361
g16
(lp4362
S'k'
asg18
S'N'
sS'.thisRepN'
p4363
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4364
I10
sS'.thisN'
p4365
I538
sg25
S'Y'
sg15
(lp4366
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4367
I4
sa(dp4368
g16
(lp4369
S'k'
asg18
S'N'
sS'.thisRepN'
p4370
I49
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4371
I0
sS'.thisN'
p4372
I539
sg25
S'Y'
sg15
(lp4373
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4374
S'space'
p4375
asg96
I4
sS'.thisIndex'
p4376
I4
sa(dp4377
g16
(lp4378
S'k'
asg18
S'Y'
sS'.thisRepN'
p4379
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4380
I1
sS'.thisN'
p4381
I540
sg25
S'Y'
sg15
(lp4382
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4383
S'space'
p4384
asg96
I3
sS'.thisIndex'
p4385
I3
sa(dp4386
g16
(lp4387
S'd'
asg18
S'N'
sS'.thisRepN'
p4388
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4389
I2
sS'.thisN'
p4390
I541
sg25
S'Y'
sg15
(lp4391
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4392
I7
sa(dp4393
g16
(lp4394
S'k'
asg18
S'N'
sS'.thisRepN'
p4395
I49
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4396
I3
sS'.thisN'
p4397
I542
sg25
S'Y'
sg15
(lp4398
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4399
S'space'
p4400
asg96
I7
sS'.thisIndex'
p4401
I7
sa(dp4402
g16
(lp4403
S'd'
asg18
S'Y'
sS'.thisRepN'
p4404
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4405
I4
sS'.thisN'
p4406
I543
sg25
S'Y'
sg15
(lp4407
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4408
S'space'
p4409
asg96
I10
sS'.thisIndex'
p4410
I10
sa(dp4411
g16
(lp4412
S'k'
asg18
S'Y'
sS'.thisRepN'
p4413
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4414
I5
sS'.thisN'
p4415
I544
sg25
S'Y'
sg15
(lp4416
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4417
S'space'
p4418
asg96
I2
sS'.thisIndex'
p4419
I2
sa(dp4420
g16
(lp4421
S'k'
asg18
S'Y'
sS'.thisRepN'
p4422
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4423
I6
sS'.thisN'
p4424
I545
sg25
S'Y'
sg15
(lp4425
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4426
S'space'
p4427
asg96
I7
sS'.thisIndex'
p4428
I7
sa(dp4429
g16
(lp4430
S'k'
asg18
S'N'
sS'.thisRepN'
p4431
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4432
I7
sS'.thisN'
p4433
I546
sg25
S'Y'
sg15
(lp4434
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4435
I10
sa(dp4436
g16
(lp4437
S'k'
asg18
S'N'
sS'.thisRepN'
p4438
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4439
I8
sS'.thisN'
p4440
I547
sg25
S'Y'
sg15
(lp4441
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4442
I2
sa(dp4443
g16
(lp4444
S'k'
asg18
S'N'
sS'.thisRepN'
p4445
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4446
I9
sS'.thisN'
p4447
I548
sg25
S'Y'
sg15
(lp4448
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4449
I6
sa(dp4450
g16
(lp4451
S'd'
asg18
S'Y'
sg22
I42
sg26
S'Y'
sS'.thisN'
p4452
I549
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4453
I10
sS'.thisRepN'
p4454
I49
sg21
I44
sg25
S'Y'
sg23
I23
sg15
(lp4455
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4456
S'space'
p4457
asg96
I4
sS'.thisIndex'
p4458
I4
sa(dp4459
g16
(lp4460
S'd'
asS'.thisIndex'
p4461
I10
sS'.thisRepN'
p4462
I50
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4463
I0
sS'.thisN'
p4464
I550
sg25
S'Y'
sg15
(lp4465
S'k'
asg17
S'Y'
sg14
I12
sg96
I10
sa(dp4466
g16
(lp4467
S'd'
asS'.thisIndex'
p4468
I4
sS'.thisRepN'
p4469
I50
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4470
I1
sS'.thisN'
p4471
I551
sg25
S'Y'
sg15
(lp4472
S'k'
asg17
S'Y'
sg14
I12
sg96
I4
sa(dp4473
g16
(lp4474
S'k'
asg18
S'N'
sS'.thisRepN'
p4475
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4476
I2
sS'.thisN'
p4477
I552
sg25
S'Y'
sg15
(lp4478
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4479
I10
sa(dp4480
g16
(lp4481
S'k'
asg18
S'Y'
sS'.thisRepN'
p4482
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4483
I3
sS'.thisN'
p4484
I553
sg25
S'Y'
sg15
(lp4485
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4486
S'space'
p4487
asg96
I9
sS'.thisIndex'
p4488
I9
sa(dp4489
g16
(lp4490
S'd'
asg18
S'Y'
sS'.thisRepN'
p4491
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4492
I4
sS'.thisN'
p4493
I554
sg25
S'Y'
sg15
(lp4494
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4495
S'space'
p4496
asg96
I2
sS'.thisIndex'
p4497
I2
sa(dp4498
g16
(lp4499
S'd'
asg18
S'Y'
sS'.thisRepN'
p4500
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4501
I5
sS'.thisN'
p4502
I555
sg25
S'Y'
sg15
(lp4503
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4504
S'space'
p4505
asg96
I2
sS'.thisIndex'
p4506
I2
sa(dp4507
g16
(lp4508
S'd'
asg18
S'Y'
sS'.thisRepN'
p4509
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4510
I6
sS'.thisN'
p4511
I556
sg25
S'Y'
sg15
(lp4512
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4513
S'space'
p4514
asg96
I5
sS'.thisIndex'
p4515
I5
sa(dp4516
g16
(lp4517
S'd'
asg18
S'Y'
sS'.thisRepN'
p4518
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4519
I7
sS'.thisN'
p4520
I557
sg25
S'Y'
sg15
(lp4521
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4522
S'space'
p4523
asg96
I4
sS'.thisIndex'
p4524
I4
sa(dp4525
g16
(lp4526
S'd'
asg18
S'N'
sS'.thisRepN'
p4527
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4528
I8
sS'.thisN'
p4529
I558
sg25
S'Y'
sg15
(lp4530
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4531
I2
sa(dp4532
g16
(lp4533
S'k'
asg18
S'N'
sS'.thisRepN'
p4534
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4535
I9
sS'.thisN'
p4536
I559
sg25
S'Y'
sg15
(lp4537
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4538
I9
sa(dp4539
g16
(lp4540
S'k'
asg18
S'Y'
sS'.thisRepN'
p4541
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4542
I10
sS'.thisN'
p4543
I560
sg25
S'Y'
sg15
(lp4544
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4545
S'space'
p4546
asg96
I7
sS'.thisIndex'
p4547
I7
sa(dp4548
g16
(lp4549
S'k'
asg18
S'N'
sS'.thisRepN'
p4550
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4551
I0
sS'.thisN'
p4552
I561
sg25
S'Y'
sg15
(lp4553
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4554
I0
sa(dp4555
g16
(lp4556
S'd'
asg18
S'Y'
sS'.thisRepN'
p4557
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4558
I1
sS'.thisN'
p4559
I562
sg25
S'Y'
sg15
(lp4560
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4561
S'space'
p4562
asg96
I9
sS'.thisIndex'
p4563
I9
sa(dp4564
g16
(lp4565
S'k'
asg18
S'N'
sS'.thisRepN'
p4566
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4567
I2
sS'.thisN'
p4568
I563
sg25
S'Y'
sg15
(lp4569
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4570
I3
sa(dp4571
g16
(lp4572
S'd'
asg18
S'Y'
sS'.thisRepN'
p4573
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4574
I3
sS'.thisN'
p4575
I564
sg25
S'Y'
sg15
(lp4576
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4577
S'space'
p4578
asg96
I9
sS'.thisIndex'
p4579
I9
sa(dp4580
g16
(lp4581
S'd'
asg18
S'N'
sS'.thisRepN'
p4582
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4583
I4
sS'.thisN'
p4584
I565
sg25
S'Y'
sg15
(lp4585
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I8
sS'.thisIndex'
p4586
I8
sa(dp4587
g16
(lp4588
S'd'
asg18
S'N'
sS'.thisRepN'
p4589
I51
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4590
I5
sS'.thisN'
p4591
I566
sg25
S'Y'
sg15
(lp4592
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4593
S'space'
p4594
asg96
I8
sS'.thisIndex'
p4595
I8
sa(dp4596
g16
(lp4597
S'd'
asg18
S'N'
sS'.thisRepN'
p4598
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4599
I6
sS'.thisN'
p4600
I567
sg25
S'Y'
sg15
(lp4601
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4602
I2
sa(dp4603
g16
(lp4604
S'd'
asg18
S'Y'
sS'.thisRepN'
p4605
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4606
I7
sS'.thisN'
p4607
I568
sg25
S'Y'
sg15
(lp4608
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4609
S'space'
p4610
asg96
I5
sS'.thisIndex'
p4611
I5
sa(dp4612
g16
(lp4613
S'd'
asg18
S'N'
sS'.thisRepN'
p4614
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4615
I8
sS'.thisN'
p4616
I569
sg25
S'Y'
sg15
(lp4617
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4618
I0
sa(dp4619
g16
(lp4620
S'd'
asg18
S'Y'
sS'.thisRepN'
p4621
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4622
I9
sS'.thisN'
p4623
I570
sg25
S'Y'
sg15
(lp4624
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4625
S'space'
p4626
asg96
I0
sS'.thisIndex'
p4627
I0
sa(dp4628
g16
(lp4629
S'k'
asg18
S'Y'
sS'.thisRepN'
p4630
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4631
I10
sS'.thisN'
p4632
I571
sg25
S'Y'
sg15
(lp4633
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4634
S'space'
p4635
asg96
I7
sS'.thisIndex'
p4636
I7
sa(dp4637
g16
(lp4638
S'k'
asg18
S'Y'
sS'.thisRepN'
p4639
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4640
I0
sS'.thisN'
p4641
I572
sg25
S'Y'
sg15
(lp4642
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4643
S'space'
p4644
asg96
I8
sS'.thisIndex'
p4645
I8
sa(dp4646
g16
(lp4647
S'k'
asg18
S'N'
sS'.thisRepN'
p4648
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4649
I1
sS'.thisN'
p4650
I573
sg25
S'Y'
sg15
(lp4651
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4652
I4
sa(dp4653
g16
(lp4654
S'd'
asg18
S'N'
sS'.thisRepN'
p4655
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4656
I2
sS'.thisN'
p4657
I574
sg25
S'Y'
sg15
(lp4658
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4659
I2
sa(dp4660
g16
(lp4661
S'k'
asg18
S'N'
sS'.thisRepN'
p4662
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4663
I3
sS'.thisN'
p4664
I575
sg25
S'Y'
sg15
(lp4665
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4666
I3
sa(dp4667
g16
(lp4668
S'd'
asg18
S'N'
sS'.thisRepN'
p4669
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4670
I4
sS'.thisN'
p4671
I576
sg25
S'Y'
sg15
(lp4672
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I1
sS'.thisIndex'
p4673
I1
sa(dp4674
g16
(lp4675
S'k'
asg18
S'Y'
sS'.thisRepN'
p4676
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4677
I5
sS'.thisN'
p4678
I577
sg25
S'Y'
sg15
(lp4679
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4680
S'space'
p4681
asg96
I0
sS'.thisIndex'
p4682
I0
sa(dp4683
g16
(lp4684
S'k'
asg18
S'N'
sS'.thisRepN'
p4685
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4686
I6
sS'.thisN'
p4687
I578
sg25
S'Y'
sg15
(lp4688
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4689
I7
sa(dp4690
g16
(lp4691
S'k'
asg18
S'N'
sS'.thisRepN'
p4692
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4693
I7
sS'.thisN'
p4694
I579
sg25
S'Y'
sg15
(lp4695
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I5
sS'.thisIndex'
p4696
I5
sa(dp4697
g16
(lp4698
S'k'
asg18
S'Y'
sS'.thisRepN'
p4699
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4700
I8
sS'.thisN'
p4701
I580
sg25
S'Y'
sg15
(lp4702
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4703
S'space'
p4704
asg96
I1
sS'.thisIndex'
p4705
I1
sa(dp4706
g16
(lp4707
S'k'
asg18
S'Y'
sS'.thisRepN'
p4708
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4709
I9
sS'.thisN'
p4710
I581
sg25
S'Y'
sg15
(lp4711
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4712
S'space'
p4713
asg96
I1
sS'.thisIndex'
p4714
I1
sa(dp4715
g16
(lp4716
S'd'
asg18
S'Y'
sS'.thisRepN'
p4717
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4718
I10
sS'.thisN'
p4719
I582
sg25
S'Y'
sg15
(lp4720
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4721
S'space'
p4722
asg96
I5
sS'.thisIndex'
p4723
I5
sa(dp4724
g16
(lp4725
S'd'
asg18
S'Y'
sS'.thisRepN'
p4726
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4727
I0
sS'.thisN'
p4728
I583
sg25
S'Y'
sg15
(lp4729
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4730
S'space'
p4731
asg96
I4
sS'.thisIndex'
p4732
I4
sa(dp4733
g16
(lp4734
S'd'
asg18
S'N'
sS'.thisRepN'
p4735
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4736
I1
sS'.thisN'
p4737
I584
sg25
S'Y'
sg15
(lp4738
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4739
I9
sa(dp4740
g16
(lp4741
S'd'
asg18
S'N'
sS'.thisRepN'
p4742
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4743
I2
sS'.thisN'
p4744
I585
sg25
S'Y'
sg15
(lp4745
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I1
sS'.thisIndex'
p4746
I1
sa(dp4747
g16
(lp4748
S'k'
asg18
S'N'
sS'.thisRepN'
p4749
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4750
I3
sS'.thisN'
p4751
I586
sg25
S'Y'
sg15
(lp4752
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4753
I9
sa(dp4754
g16
(lp4755
S'k'
asg18
S'Y'
sS'.thisRepN'
p4756
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4757
I4
sS'.thisN'
p4758
I587
sg25
S'Y'
sg15
(lp4759
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4760
S'space'
p4761
asg96
I2
sS'.thisIndex'
p4762
I2
sa(dp4763
g16
(lp4764
S'k'
asg18
S'Y'
sS'.thisRepN'
p4765
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4766
I5
sS'.thisN'
p4767
I588
sg25
S'Y'
sg15
(lp4768
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4769
S'space'
p4770
asg96
I8
sS'.thisIndex'
p4771
I8
sa(dp4772
g16
(lp4773
S'd'
asg18
S'Y'
sS'.thisRepN'
p4774
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4775
I6
sS'.thisN'
p4776
I589
sg25
S'Y'
sg15
(lp4777
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4778
S'space'
p4779
asg96
I6
sS'.thisIndex'
p4780
I6
sa(dp4781
g16
(lp4782
S'd'
asg18
S'N'
sS'.thisRepN'
p4783
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4784
I7
sS'.thisN'
p4785
I590
sg25
S'Y'
sg15
(lp4786
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4787
I9
sa(dp4788
g16
(lp4789
S'd'
asg18
S'N'
sS'.thisRepN'
p4790
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4791
I8
sS'.thisN'
p4792
I591
sg25
S'Y'
sg15
(lp4793
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4794
I3
sa(dp4795
g16
(lp4796
S'k'
asg18
S'Y'
sS'.thisRepN'
p4797
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4798
I9
sS'.thisN'
p4799
I592
sg25
S'Y'
sg15
(lp4800
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4801
S'space'
p4802
asg96
I5
sS'.thisIndex'
p4803
I5
sa(dp4804
g16
(lp4805
S'k'
asg18
S'N'
sS'.thisRepN'
p4806
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4807
I10
sS'.thisN'
p4808
I593
sg25
S'Y'
sg15
(lp4809
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4810
I10
sa(dp4811
g16
(lp4812
S'k'
asg18
S'Y'
sS'.thisRepN'
p4813
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4814
I0
sS'.thisN'
p4815
I594
sg25
S'Y'
sg15
(lp4816
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4817
S'space'
p4818
asg96
I10
sS'.thisIndex'
p4819
I10
sa(dp4820
g16
(lp4821
S'd'
asg18
S'N'
sS'.thisRepN'
p4822
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4823
I1
sS'.thisN'
p4824
I595
sg25
S'Y'
sg15
(lp4825
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4826
I3
sa(dp4827
g16
(lp4828
S'k'
asg18
S'Y'
sS'.thisRepN'
p4829
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4830
I2
sS'.thisN'
p4831
I596
sg25
S'Y'
sg15
(lp4832
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4833
S'space'
p4834
asg96
I6
sS'.thisIndex'
p4835
I6
sa(dp4836
g16
(lp4837
S'd'
asg18
S'Y'
sS'.thisRepN'
p4838
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4839
I3
sS'.thisN'
p4840
I597
sg25
S'Y'
sg15
(lp4841
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4842
S'space'
p4843
asg96
I4
sS'.thisIndex'
p4844
I4
sa(dp4845
g16
(lp4846
S'k'
asg18
S'N'
sS'.thisRepN'
p4847
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4848
I4
sS'.thisN'
p4849
I598
sg25
S'Y'
sg15
(lp4850
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I6
sS'.thisIndex'
p4851
I6
sa(dp4852
g16
(lp4853
S'k'
asg18
S'Y'
sg22
I47
sg26
S'Y'
sS'.thisN'
p4854
I599
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4855
I5
sS'.thisRepN'
p4856
I54
sg21
I43
sg25
S'Y'
sg23
I25
sg15
(lp4857
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4858
S'space'
p4859
asg96
I10
sS'.thisIndex'
p4860
I10
sasS'loops'
p4861
(lp4862
g1
(g36
g3
NtRp4863
(dp4864
g39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4865
sg41
(lp4866
sg42
I74033456
sg10
S''
sg6
g43
sg44
I1
sg27
I01
sg28
Nsg45
g1
(g46
g47
(dp4867
g49
g50
(g51
g52
g53
S'b'
tRp4868
(I1
(I600
I1
tg56
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg57
g50
(g51
g52
g53
S'b'
tRp4869
(I1
(I600
I1
tg56
I00
S'\x00\x00\x1bC\x00\x00\xa2C\x00\x00\xd0A\x00\x00\xbdC\x00\x00\xa8C\x00\x00@@\x00\x00ZC\x00\x80\xbeC\x00\x80\x04D\x00\x80\x0bD\x00\x80\xdcC\x00\x00\xf9C\x00\x00YC\x00\x00\x93C\x00\x00\xd2B\x00\x80\xacC\x00\xc0\tD\x00\x00\x99C\x00\x00\xc8A\x00\x80\xc2C\x00\x00\x8bC\x00\x80\x96C\x00\x00\xa7C\x00\x00\x10D\x00\x00#C\x00\x80\xceC\x00\x00\xe0B\x00\x00\x82C\x00\x80\x91C\x00\x80\xe0C\x00@\tD\x00\x00\xfbC\x00\x00\xc7C\x00\x80\x13D\x00\xc0\x13D\x00\xc0\nD\x00\x80\x0eD\x00@\x06D\x00\x00\xaeB\x00\x00\x08B\x00@\x15D\x00\x001C\x00\x80\xe2C\x00\x00\x94B\x00\x80\xe9C\x00\x00\x02C\x00\x00\x1eC\x00\x00WC\x00\x00\x86C\x00\xc0\x07D\x00\x005C\x00\x80\xccC\x00\xc0\x11D\x00\x80\xbdC\x00\x80\x92C\x00\x00\xd9C\x00\x00\xcdC\x00\x80\xeaC\x00\x00\xa1C\x00\x00uC\x00\xc0\rD\x00\x00 B\x00\x80\xb7C\x00\x80\xf9C\x00\x00\xa9C\x00\x00\xf1C\x00\x00\x00\x00\x00\x00\xdeC\x00\x00\xb4B\x00\x80\xafC\x00\x00\xf6C\x00\x00\x03C\x00\x80\xa3C\x00\x00\xc5C\x00\x00\xb3C\x00\x80\x81C\x00\x00\xa5C\x00\x80\xfaC\x00\x00\xa2B\x00\x00\x90A\x00\x80\x9cC\x00\x00hB\x00\x00mC\x00\x00iC\x00\x80\xa7C\x00\x00\x9cC\x00\x80\xf7C\x00\x00\xb2C\x00@\x01D\x00\x00xB\x00\x00\xbeC\x00\x00pA\x00\x80\xfdC\x00\x00\xa8A\x00\x00\x89C\x00\x80\x85C\x00\x00\x80A\x00\x80\x80C\x00\x00\x0bC\x00\x00\xeeB\x00\x00\x98A\x00\x00QC\x00\x00\xe5C\x00\x00\x98C\x00\x00\xe8B\x00\x80\x11D\x00\x80\x86C\x00@\x0bD\x00\x00\x12D\x00\x00NC\x00@\x07D\x00\x00fC\x00\x00AC\x00\x00aC\x00\x00|C\x00\x00\x0eD\x00\x00\xe9C\x00\x00(B\x00\x00\xdaC\x00\x00\xbaC\x00\x00PC\x00\x00-C\x00\x00\xfcC\x00\x00`C\x00\x00\x96C\x00\x00\x10C\x00\x00\xd2C\x00\x00\xb0B\x00\x00LB\x00\x00\x01D\x00\x00\x8eC\x00\x00jC\x00\x00\xf4C\x00\x00\x04D\x00\x00XC\x00\x00\x06C\x00\x80\xc1C\x00\x00\xd6C\x00\x00\x84C\x00\x00\xecB\x00\x00\x05D\x00\x80\x05D\x00\x80\xb5C\x00\x00\x14B\x00\x80\xa5C\x00\x80\x03D\x00\x80\xefC\x00\x00\x15C\x00\x00DB\x00\x00\xa0B\x00\x00\x8dC\x00\x80\xbbC\x00\x00\xbcC\x00@\x0eD\x00\x80\xe3C\x00\x80\xaaC\x00\x00\xfdC\x00\x80\x98C\x00\x80\x00D\x00\x00PA\x00\x80\xd5C\x00\x00sC\x00\x00\x83C\x00\x80\xc3C\x00\x80\xf6C\x00\x00yC\x00\x00\x92C\x00\x00tB\x00\x00\xf3C\x00\x00\xd8A\x00\x00\x04C\x00\x80\xfcC\x00\x00\xb6C\x00\x00\x82B\x00\x80\xebC\x00\xc0\x01D\x00\x00\xdeB\x00\x00\xe6C\x00\x00\x88A\x00\x00pC\x00\x00DC\x00\x80\x0fD\x00\x00\xd6B\x00\x00\x88C\x00\x00>C\x00\x00\xc1C\x00\x00\rD\x00@\x12D\x00\x00`B\x00\x80\xf2C\x00\x80\xb2C\x00\x00\xbeB\x00\x00\xc0@\x00\x80\x9dC\x00\x00,C\x00\x80\xc6C\x00\x00\xa0A\x00\x00\xb9C\x00\x00\x03D\x00\x80\xcbC\x00\x00\xa6C\x00\x00\x0bD\x00\x00\xc6B\x00\x00\xe7C\x00\x00\x9aB\x00\x00\xebC\x00\x00\xfcB\x00\xc0\x04D\x00\x80\xb9C\x00\x00\x9cB\x00\x00\xf0A\x00\x00\xb0A\x00\x00\xa3C\x00\x80\nD\x00\x00\xe6B\x00\x80\xd9C\x00\x00\xc8B\x00\x00eC\x00\x00KC\x00\x00EC\x00\x80\xdfC\x00\x00\x0cB\x00\x00HC\x00\x00$C\x00\x00\xaaC\x00\x00\x04B\x00\x00\x8fC\x00\x00\xa0@\x00\x00\xddC\x00\x80\xabC\x00\x00\xd3C\x00\x00<B\x00\x00\x8cB\x00\x00\xc0A\x00\x80\x0cD\x00\x00`A\x00\x80\xfbC\x00\x80\xa8C\x00\x00\xf8B\x00\x80\xe1C\x00\x00\x91C\x00\x80\xa0C\x00@\x13D\x00\x80\xd0C\x00\x00\xffC\x00\x00\xd8B\x00\x004C\x00\x00~C\x00\x00\x95C\x00\x80\x8bC\x00\x80\xcfC\x00\x80\xb3C\x00\x00\x00A\x00\x007C\x00\x00\x9eC\x00\x00\x11C\x00\x00\xc6C\x00\x00\xe1C\x00\x00$B\x00\x80\xf3C\x00\x00\xb2B\x00\x80\x8dC\x00\x80\xa4C\x00\x00\x08C\x00\x80\rD\x00\x80\xffC\x00\x80\x9aC\x00\x00\xfaB\x00\x80\x88C\x00\x00\x0cC\x00\x80\tD\x00\x00\xacB\x00\x00\x8cC\x00\x00;C\x00\x80\xdaC\x00\x00\xd4C\x00\x00\x88B\x00\x00\xaeC\x00\x00\x19C\x00\x00rC\x00\x009C\x00\x00\x12C\x00\x00hC\x00\x80\x9bC\x00\x00JC\x00\xc0\x02D\x00\x00\xf2C\x00\x00\x18B\x00\x80\xcaC\x00\x00\xdbC\x00\x00\xecC\x00\x008B\x00\xc0\x14D\x00@\rD\x00\x00\x14C\x00\x00TB\x00\x80\xc8C\x00\x00*C\x00\x00\xf8A\x00\x00 C\x00\x00\xc4C\x00\x00^C\x00\x00\x9dC\x00\x00\xb7C\x00\x00\xcaB\x00\x00\x16C\x00\x00\xeaC\x00\x00!C\x00\x002C\x00\x00.C\x00\x00\xccC\x00\x00%C\x00\x00\tC\x00\x00CC\x00\x00\xedC\x00\x80\x8aC\x00\x00 A\x00\x00\xe2C\x00\x00\xe0C\x00\x00\xb6B\x00\x00\xbaB\x00\x80\x93C\x00\x00@B\x00\x00\xb1C\x00\x80\xe7C\x00@\x11D\x00\x00\xd0C\x00\x80\xa6C\x00\x00\xc0B\x00\x00\xf6B\x00\x00RC\x00\x80\xecC\x00\x00\x92B\x00\x00\x9aC\x00\x00\\B\x00\x00\xbfC\x00\x00{C\x00\x00,B\x00\x80\xd4C\x00\x00@C\x00\x00/C\x00\x00zC\x00\x00\xafC\x00\x00\x85C\x00\x00pB\x00\x00\xf0B\x00\x00&C\x00\x00oC\x00\x00\xdcC\x00\x00TC\x00\x80\xa2C\x00\x00\xaaB\x00\x00\xe2B\x00\x00\x7fC\x00\x00\tD\x00\x00\\C\x00\x80\xe4C\x00\x00\x9fC\x00\x00=C\x00\x00GC\x00\x00wC\x00\x00\xf8C\x00\x00\'C\x00\x80\xc9C\x00\x00\x0eC\x00\x00\x8eB\x00\x80\xf5C\x00\x80\xb6C\x00\x80\xadC\x00\x00\xc4B\x00\x00FC\x00\x00gC\x00\x00\x1aC\x00\x80\x14D\x00\x00\xb8A\x00\x80\x8cC\x00\x00\xbcB\x00\xc0\x10D\x00\x00SC\x00\x00\rC\x00\x00\x02D\x00\x00xC\x00\x00nC\x00\x80\xdbC\x00\x00\x1fC\x00\x00\nD\x00\x00\xcaC\x00\xc0\x05D\x00\x00"C\x00\x80\xedC\x00@\nD\x00\x00\x98B\x00\x80\x82C\x00\x80\x84C\x00\x00\x1dC\x00\x80\xdeC\x00\x80\x8fC\x00\x80\x95C\x00\x80\x06D\x00\x00\xabC\x00\x000C\x00\x80\xbfC\x00\x00\xd0B\x00\x00(C\x00\x00\xe4B\x00\x80\xd1C\x00\x80\x12D\x00\x00\x8aC\x00\x00\xf7C\x00@\x14D\x00\x00\x15D\x00\x00cC\x00\x00vC\x00\x00\x94C\x00\x80\xd3C\x00\x00\x05C\x00\x00]C\x00\x00\xdcB\x00\x00)C\x00\x00\xb5C\x00\x00HB\x00\x006C\x00\x80\xb0C\x00\x00\x96B\x00\x00\xbbC\x00\x00|B\x00\x00\xcbC\x00\x80\x08D\x00\x00BC\x00\x00bC\x00\x80\x01D\x00\x00\x08D\x00\x80\xc0C\x00\x00\xc8C\x00@\x00D\x00\x80\x94C\x00\x80\xb8C\x00\x00_C\x00\x00?C\x00\x00PB\x00\x80\xd7C\x00\x00\xc9C\x00\x00\xfeB\x00\x80\xfeC\x00\x00\xeaB\x00\x80\x89C\x00\x00\x06D\x00\x00\x13C\x00\xc0\x0cD\x00\x00\xa6B\x00\x00dC\x00\x00\xb8C\x00\x00}C\x00@\x02D\x00@\x0cD\x00\x80\xd8C\x00\x008C\x00\x00\x86B\x00\x00\xcfC\x00\x00\xa4C\x00\x80\xe6C\x00\x00\x0cD\x00\x00OC\x00\x80\xe5C\x00\x00\x17C\x00\xc0\x03D\x00\x80\xaeC\x00\x004B\x00\x00\x00D\x00\x00\xefC\x00\x00IC\x00@\x08D\x00\x80\x02D\x00\x80\x10D\x00\x00\x87C\x00\x00\xfaC\x00\x80\x9fC\x00\x00\xc2C\x00\x00\xdfC\x00\x00\xc0C\x00\x80\xf8C\x00\x80\x99C\x00\x00\x10A\x00\x00lB\x00\x00\xe0@\x00\x00\xacC\x00\x80\xbcC\x00\xc0\x12D\x00@\x10D\x00\x80\xc5C\x00\x80\xf4C\x00\x00\xa4B\x00\x80\xa1C\x00\xc0\x15D\x00\x80\xeeC\x00\x00\x80@\x00\xc0\x08D\x00\x00\xd4B\x00\x80\x87C\x00\x00\x1cC\x00\x00\xf5C\x00\x80\x15D\x00\x00\xc3C\x00\x80\xddC\x00\x00\xb0C\x00\x00\x07C\x00\x80\xb4C\x00\x00\x00C\x00\x80\x90C\x00\x00\x14D\x00\x000B\x00\x00+C\x00\x00MC\x00\x00\xa8B\x00\x00\x97C\x00\x00\xccB\x00\x80\x8eC\x00\x00\x80?\x00\x00\xa0C\x00\xc0\x0eD\x00\x00\xd8C\x00\x80\xe8C\x00\x80\xf0C\x00\x00tC\x00\x00\x07D\x00\x00:C\x00\x00\x1cB\x00\x00\xb8B\x00\x00\xf2B\x00\x00LC\x00\x80\xc4C\x00\x00\xe0A\x00\x80\x07D\x00\x003C\x00\x00\x84B\x00\x00XB\x00\x00\xe4C\x00\x00lC\x00\x80\xb1C\x00@\x0fD\x00\x00\xceB\x00@\x05D\x00\x00\x01C\x00\x00\x9bC\x00\x00\x13D\x00\x00\x0fD\x00\x00\xf4B\x00\x00\xeeC\x00\x00\x11D\x00\x80\x97C\x00\x00<C\x00\x00\xfeC\x00\x00\xe8C\x00\x00\xd1C\x00\x80\xcdC\x00\x00UC\x00\x80\x9eC\x00\x00\x9eB\x00\x80\xbaC\x00\x00\xb4C\x00\x00\x80C\x00\x00\xadC\x00\x00\xe3C\x00\x80\xf1C\x00\x00\x81C\x00\x00\x0fC\x00\x80\x83C\x00\x00\xd7C\x00\x00[C\x00\x00\x00B\x00\x00\x18C\x00\xc0\x0fD\x00\x00\x80B\x00\x00\x90C\x00\x00\xceC\x00\x80\xa9C\x00\x00\x00@\x00\x80\xd6C\x00\x00\x8aB\x00\x00\xd5C\x00\xc0\x00D\x00\x80\xd2C\x00\x00@A\x00\x00\x90B\x00\x00\nC\x00\x00\xc2B\x00\x00VC\x00\xc0\x06D\x00\x00dB\x00\x00\x10B\x00\x00\xdaB\x00\x00\xf0C\x00\x000A\x00\x80\xc7C\x00\x00kC\x00\x00qC\x00@\x03D\x00\xc0\x0bD\x00\x00\xe8A\x00@\x04D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4870
(dp4871
g61
(dp4872
g49
I01
sg57
I01
ssg63
g4863
sg64
(lp4873
g49
ag57
asg66
(lp4874
I600
aI1
asbsg68
S'random'
p4875
sg70
g71
(g52
(I0
tS'b'
tRp4876
(I1
(I600
I1
tg55
(S'i4'
I0
I1
tRp4877
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'B\x00\x00\x00\x05\x02\x00\x00@\x02\x00\x00\x05\x00\x00\x00\xef\x01\x00\x00\xe3\x00\x00\x00\xc0\x00\x00\x00\xe4\x01\x00\x00\xfc\x00\x00\x00\xe2\x01\x00\x00<\x01\x00\x00P\x02\x00\x00F\x02\x00\x00\x9f\x00\x00\x00\xeb\x00\x00\x00[\x00\x00\x00`\x00\x00\x00\xb2\x00\x00\x00O\x00\x00\x00d\x00\x00\x00\xc4\x00\x00\x00]\x00\x00\x00\xd3\x00\x00\x00v\x01\x00\x00\xe9\x00\x00\x00\x12\x00\x00\x00\x02\x00\x00\x00\xa9\x00\x00\x00\x13\x02\x00\x00V\x02\x00\x00\xd2\x00\x00\x00*\x01\x00\x009\x02\x00\x00\xe1\x00\x00\x00\'\x00\x00\x00\xdd\x00\x00\x00M\x02\x00\x00\x8f\x00\x00\x00\x1f\x01\x00\x00\x0e\x02\x00\x00=\x00\x00\x00\x02\x01\x00\x00u\x00\x00\x00Q\x01\x00\x00\xfe\x01\x00\x00\xd3\x01\x00\x00#\x01\x00\x00\xe7\x00\x00\x00B\x01\x00\x00\x94\x00\x00\x00\xa4\x01\x00\x00\x80\x00\x00\x00\xb7\x01\x00\x00\'\x01\x00\x00\x17\x02\x00\x00N\x01\x00\x00\xbc\x00\x00\x00L\x02\x00\x00Q\x00\x00\x00\xe3\x01\x00\x00X\x01\x00\x00\xa7\x00\x00\x00Y\x00\x00\x00\xa9\x01\x00\x00<\x02\x00\x00\xad\x00\x00\x00\x16\x02\x00\x00\xc9\x01\x00\x00\x14\x01\x00\x00B\x02\x00\x00\xe8\x00\x00\x00m\x01\x00\x00G\x02\x00\x00L\x01\x00\x00+\x00\x00\x00\xa7\x01\x00\x00\x87\x01\x00\x00\xcc\x00\x00\x00\xd1\x00\x00\x00-\x02\x00\x00\x95\x00\x00\x00N\x00\x00\x00\xeb\x01\x00\x00\xc1\x01\x00\x00\x01\x02\x00\x00_\x01\x00\x00\x0f\x01\x00\x00&\x00\x00\x00\x7f\x00\x00\x00\x04\x01\x00\x00D\x00\x00\x00?\x01\x00\x00\x0f\x02\x00\x00@\x01\x00\x00x\x01\x00\x00\xbf\x00\x00\x00H\x01\x00\x00I\x02\x00\x00q\x01\x00\x00\xca\x00\x00\x00\xd8\x00\x00\x000\x01\x00\x00\x03\x02\x00\x00\x1c\x02\x00\x00\x92\x01\x00\x00\x0e\x00\x00\x00\xf1\x01\x00\x00\xb6\x00\x00\x00\xf5\x00\x00\x00N\x02\x00\x00\xa1\x01\x00\x00\xb0\x00\x00\x00\x1a\x00\x00\x00`\x01\x00\x00\x94\x01\x00\x00\xd6\x00\x00\x00h\x00\x00\x00\xbc\x01\x00\x00\x8b\x00\x00\x00c\x00\x00\x00Y\x01\x00\x00\x10\x02\x00\x00"\x02\x00\x00I\x01\x00\x00\xee\x00\x00\x00\x0b\x01\x00\x00\xce\x00\x00\x00\xba\x01\x00\x00\xfb\x01\x00\x00\x1e\x02\x00\x00-\x00\x00\x00G\x00\x00\x00\xaa\x00\x00\x00\x9f\x01\x00\x00\x87\x00\x00\x00\xf9\x01\x00\x00\x07\x01\x00\x008\x01\x00\x00H\x02\x00\x00b\x00\x00\x00\r\x01\x00\x00{\x01\x00\x00l\x01\x00\x005\x02\x00\x00}\x00\x00\x00\xff\x00\x00\x00\x19\x01\x00\x00\xbf\x01\x00\x00&\x01\x00\x00\x93\x00\x00\x001\x01\x00\x00\xd0\x01\x00\x00:\x02\x00\x00\x16\x01\x00\x00t\x01\x00\x00\x00\x00\x00\x00\xf3\x01\x00\x00\x8a\x01\x00\x00.\x00\x00\x00\x80\x01\x00\x00+\x01\x00\x003\x01\x00\x00\x84\x01\x00\x00\x18\x00\x00\x00\xdf\x00\x00\x007\x01\x00\x00Z\x01\x00\x00j\x01\x00\x00\x93\x01\x00\x00\xa2\x01\x00\x00)\x01\x00\x00\xff\x01\x00\x00\xc2\x00\x00\x00y\x00\x00\x005\x01\x00\x00T\x01\x00\x00\x90\x01\x00\x00)\x00\x00\x004\x01\x00\x00\x15\x02\x00\x00\xf6\x00\x00\x002\x00\x00\x00\xa5\x01\x00\x00\xfd\x00\x00\x00\xc8\x01\x00\x00\x18\x01\x00\x00\r\x02\x00\x00\x11\x01\x00\x00&\x02\x00\x00f\x01\x00\x00\xb8\x00\x00\x00\xb6\x01\x00\x00S\x01\x00\x00p\x00\x00\x00\xac\x01\x00\x009\x01\x00\x00\xb4\x00\x00\x00\xdb\x00\x00\x00r\x01\x00\x00g\x01\x00\x00\xde\x00\x00\x00\xd6\x01\x00\x00\x1c\x01\x00\x00\xda\x00\x00\x00\x11\x02\x00\x00\x00\x02\x00\x00m\x00\x00\x00\xce\x01\x00\x00x\x00\x00\x00e\x00\x00\x00J\x01\x00\x00z\x01\x00\x00]\x01\x00\x00+\x02\x00\x00J\x02\x00\x00/\x00\x00\x00\x86\x00\x00\x00\x0c\x00\x00\x00\x06\x00\x00\x008\x02\x00\x00c\x01\x00\x00\xa0\x01\x00\x00-\x01\x00\x00\xb5\x01\x00\x00{\x00\x00\x00q\x00\x00\x00\xad\x01\x00\x00\x9b\x01\x00\x00\xc2\x01\x00\x00\xd9\x00\x00\x00o\x00\x00\x00s\x01\x00\x00\x1a\x01\x00\x00S\x00\x00\x00\x83\x00\x00\x00R\x02\x00\x00\x19\x02\x00\x00R\x00\x00\x00~\x01\x00\x00[\x01\x00\x00\xb3\x00\x00\x00S\x02\x00\x00\x17\x01\x00\x00\xa1\x00\x00\x00\x0b\x02\x00\x00;\x00\x00\x00\x9c\x01\x00\x00h\x01\x00\x00}\x01\x00\x00\xa5\x00\x00\x00U\x01\x00\x00P\x01\x00\x00r\x00\x00\x00\xc4\x01\x00\x00\xf7\x00\x00\x00a\x01\x00\x000\x02\x00\x00a\x00\x00\x004\x02\x00\x00K\x00\x00\x00\x1b\x00\x00\x00\x88\x01\x00\x00\xa2\x00\x00\x006\x02\x00\x00\x8a\x00\x00\x00\x89\x01\x00\x00W\x01\x00\x00_\x00\x00\x000\x00\x00\x00j\x00\x00\x00\xda\x01\x00\x00\xf2\x01\x00\x00\xb7\x00\x00\x00\x0c\x01\x00\x00^\x00\x00\x00\xbd\x01\x00\x00\x97\x01\x00\x00;\x01\x00\x00\x14\x00\x00\x00\xf9\x00\x00\x00\x10\x01\x00\x00w\x01\x00\x00\x96\x00\x00\x00\x05\x01\x00\x00\x82\x00\x00\x00\x04\x02\x00\x00\xe2\x00\x00\x00\x8c\x01\x00\x00=\x02\x00\x00\xfc\x01\x00\x00\xf0\x00\x00\x00\x1c\x00\x00\x00\xa6\x00\x00\x006\x00\x00\x00\r\x00\x00\x00A\x01\x00\x00\x9d\x01\x00\x00\xb3\x01\x00\x00\xf8\x00\x00\x00\x8d\x01\x00\x00|\x00\x00\x00\x15\x00\x00\x00\x02\x02\x00\x00%\x02\x00\x00g\x00\x00\x00\x9d\x00\x00\x00\x11\x00\x00\x00\xe1\x01\x00\x00M\x01\x00\x00\n\x01\x00\x00\x1f\x02\x00\x00\x1b\x01\x00\x00U\x00\x00\x00P\x00\x00\x00.\x01\x00\x00\xc1\x00\x00\x00\xfe\x00\x00\x00,\x02\x00\x00e\x01\x00\x00\xdc\x01\x00\x00\x06\x02\x00\x00\xf1\x00\x00\x00:\x00\x00\x00\xec\x01\x00\x00\x01\x00\x00\x00^\x01\x00\x00\xd4\x00\x00\x00H\x00\x00\x00\xcb\x01\x00\x00\x06\x01\x00\x00L\x00\x00\x00\x90\x00\x00\x00\xc8\x00\x00\x00G\x01\x00\x00\x16\x00\x00\x00T\x00\x00\x00\x04\x00\x00\x00\xed\x00\x00\x00@\x00\x00\x00?\x02\x00\x00\xe0\x00\x00\x00\x9b\x00\x00\x00\x8f\x01\x00\x00\xe5\x00\x00\x00\xe5\x01\x00\x00\x0f\x00\x00\x001\x02\x00\x00p\x01\x00\x00\x15\x01\x00\x00\xd2\x01\x00\x00V\x01\x00\x00E\x00\x00\x00\xf8\x01\x00\x00\xa6\x01\x00\x00C\x01\x00\x00\x1a\x02\x00\x00W\x00\x00\x00\xbe\x00\x00\x00J\x00\x00\x00\xfb\x00\x00\x00/\x02\x00\x00\xfa\x01\x00\x00\xa3\x01\x00\x00\x8e\x00\x00\x00\xac\x00\x00\x00o\x01\x00\x00/\x01\x00\x00>\x00\x00\x00\xc3\x01\x00\x00\xb4\x01\x00\x00\xc5\x00\x00\x00\xd0\x00\x00\x00w\x00\x00\x00.\x02\x00\x00\xa8\x01\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\xe6\x01\x00\x00\x03\x00\x00\x005\x00\x00\x00Z\x00\x00\x00\x07\x00\x00\x00O\x01\x00\x00\x91\x01\x00\x00\xdf\x01\x00\x00\xb0\x01\x00\x00\xb9\x00\x00\x00\x88\x00\x00\x00\xdd\x01\x00\x00\x13\x00\x00\x00\xf6\x01\x00\x00\xa3\x00\x00\x00,\x01\x00\x00\x12\x02\x00\x00I\x00\x00\x00\xe9\x01\x00\x00\x00\x01\x00\x00\xc3\x00\x00\x00 \x00\x00\x00Q\x02\x00\x00\xb1\x01\x00\x00(\x01\x00\x00\xb9\x01\x00\x00k\x01\x00\x00\x82\x01\x00\x00 \x01\x00\x00\xaa\x01\x00\x00\xc7\x00\x00\x006\x01\x00\x003\x00\x00\x008\x00\x00\x00*\x02\x00\x00>\x02\x00\x00\x19\x00\x00\x00\xca\x01\x00\x00\xfa\x00\x00\x00F\x01\x00\x00\xf3\x00\x00\x00)\x02\x00\x00\x95\x01\x00\x00~\x00\x00\x00E\x02\x00\x00\xe6\x00\x00\x00\x9e\x01\x00\x00\x13\x01\x00\x00R\x01\x00\x00C\x02\x00\x00\xa0\x00\x00\x00\x89\x00\x00\x00A\x02\x00\x007\x02\x00\x00\xb8\x01\x00\x00\x08\x02\x00\x00\xc7\x01\x00\x007\x00\x00\x00\xd7\x00\x00\x00v\x00\x00\x00\x12\x01\x00\x00!\x01\x00\x00\x7f\x01\x00\x00\\\x01\x00\x00\n\x00\x00\x00\xe4\x00\x00\x00\xf7\x01\x00\x00C\x00\x00\x00\x8b\x01\x00\x00\xde\x01\x00\x00\xdc\x00\x00\x00>\x01\x00\x00\x1d\x00\x00\x00\x01\x01\x00\x00\xef\x00\x00\x00=\x01\x00\x00*\x00\x00\x002\x02\x00\x00\x9a\x00\x00\x00\x18\x02\x00\x00d\x01\x00\x00f\x00\x00\x00\xcf\x01\x00\x00\xb1\x00\x00\x00\xcc\x01\x00\x00\xcb\x00\x00\x00D\x01\x00\x00(\x02\x00\x00\t\x02\x00\x00t\x00\x00\x00,\x00\x00\x002\x01\x00\x009\x00\x00\x00\xcd\x00\x00\x00\xae\x00\x00\x00"\x01\x00\x00K\x01\x00\x00:\x01\x00\x00\x85\x01\x00\x00#\x02\x00\x00\xee\x01\x00\x00\xd5\x01\x00\x00\x92\x00\x00\x00O\x02\x00\x00\n\x02\x00\x00A\x00\x00\x003\x02\x00\x00\x1e\x01\x00\x00\xbd\x00\x00\x00\xa8\x00\x00\x00\x03\x01\x00\x00\x84\x00\x00\x00\xea\x01\x00\x00\xf4\x01\x00\x00n\x01\x00\x00F\x00\x00\x00\xa4\x00\x00\x00\x98\x01\x00\x00V\x00\x00\x00i\x01\x00\x00\xe0\x01\x00\x00\x0b\x00\x00\x00?\x00\x00\x00\xdb\x01\x00\x00M\x00\x00\x00\x1f\x00\x00\x00\xec\x00\x00\x00z\x00\x00\x00\xab\x00\x00\x00\x9c\x00\x00\x00\\\x00\x00\x00\'\x02\x00\x00\xbb\x01\x00\x00\xf4\x00\x00\x00\t\x01\x00\x00\xd4\x01\x00\x00\xb2\x01\x00\x00\x9e\x00\x00\x00D\x02\x00\x00\x81\x00\x00\x00X\x00\x00\x00\xae\x01\x00\x00\xaf\x00\x00\x00|\x01\x00\x00\xc5\x01\x00\x00\xd8\x01\x00\x00\x1d\x01\x00\x00\xc6\x00\x00\x00T\x02\x00\x00\x91\x00\x00\x00\xd1\x01\x00\x00\x85\x00\x00\x00W\x02\x00\x00\x08\x00\x00\x00\xcf\x00\x00\x00\x8c\x00\x00\x00\x1d\x02\x00\x00\x8d\x00\x00\x00\x83\x01\x00\x00\xbe\x01\x00\x00%\x00\x00\x00\x8e\x01\x00\x00K\x02\x00\x00\x0c\x02\x00\x00n\x00\x00\x00\x14\x02\x00\x001\x00\x00\x00\xaf\x01\x00\x00\xd7\x01\x00\x00\xab\x01\x00\x00\xf0\x01\x00\x00b\x01\x00\x00\x1e\x00\x00\x00\x0e\x01\x00\x00\x10\x00\x00\x00\x81\x01\x00\x00\x86\x01\x00\x00\xd5\x00\x00\x00#\x00\x00\x00\xc9\x00\x00\x00k\x00\x00\x00\t\x00\x00\x00U\x02\x00\x00\xcd\x01\x00\x00\xc6\x01\x00\x00\xea\x00\x00\x00\xc0\x01\x00\x00\xba\x00\x00\x00%\x01\x00\x00\x08\x01\x00\x00<\x00\x00\x00s\x00\x00\x00\x99\x00\x00\x00$\x00\x00\x00\x07\x02\x00\x00!\x02\x00\x00\x1b\x02\x00\x00\xb5\x00\x00\x00;\x02\x00\x00\x17\x00\x00\x00\xe8\x01\x00\x00\xd9\x01\x00\x00y\x01\x00\x00$\x02\x00\x00E\x01\x00\x00i\x00\x00\x004\x00\x00\x00l\x00\x00\x00\xbb\x00\x00\x00\x96\x01\x00\x00\xe7\x01\x00\x00 \x02\x00\x00\xf2\x00\x00\x00!\x00\x00\x00"\x00\x00\x00\xfd\x01\x00\x00\x99\x01\x00\x00u\x01\x00\x00$\x01\x00\x00\x9a\x01\x00\x00(\x00\x00\x00\xf5\x01\x00\x00\xed\x01\x00\x00'
tbsg75
I01
sg76
I1
sg77
I-1
sg78
(lp4878
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg80
Nsg81
cnumpy.core.multiarray
scalar
p4879
(g4877
S'\xed\x01\x00\x00'
tRp4880
sg82
I600
sg83
I0
sg84
I600
sg85
I01
sbag37
asS'savePickle'
p4881
I01
sb.