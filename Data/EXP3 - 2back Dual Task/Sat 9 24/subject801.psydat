ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject801
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 801
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VF
sS'age'
p31
V19
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I5
sS'_exp'
p41
I76016176
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I39
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I15
I40
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I15
I40
tg55
I00
S'\x00\x00\x00\x00\x00\x00\x88A\x00\x004B\x00\x00\xd0B\x00\x00\xf4B\x00\x00\xfeB\x00\x00\x02C\x00\x00\x0fC\x00\x00&C\x00\x00AC\x00\x00LC\x00\x00ZC\x00\x00uC\x00\x00\x7fC\x00\x00\x82C\x00\x00\x8aC\x00\x80\x90C\x00\x00\x91C\x00\x00\x92C\x00\x00\xb5C\x00\x80\xb8C\x00\x80\xb9C\x00\x00\xbaC\x00\x80\xbeC\x00\x00\xc2C\x00\x80\xd6C\x00\x00\xd7C\x00\x80\xd9C\x00\x80\xdbC\x00\x80\xdcC\x00\x80\xe5C\x00\x80\xe6C\x00\x00\xfaC\x00\x80\xfbC\x00\x00\xfdC\x00\x80\xfeC\x00\xc0\x03D\x00\x00\x0bD\x00\x00\x0eD\x00\x00\x14D\x00\x00\x80@\x00\x00\x00A\x00\x00\x00B\x00\x00,B\x00\x00`B\x00\x00\x8aB\x00\x00\x94B\x00\x00\x9eB\x00\x00\xb2B\x00\x00\xceB\x00\x00\xdaB\x00\x00\x0cC\x00\x00\x10C\x00\x00\x14C\x00\x00\x16C\x00\x00\x1dC\x00\x00\x1eC\x00\x00UC\x00\x00{C\x00\x80\x8fC\x00\x80\x91C\x00\x80\x93C\x00\x00\xb2C\x00\x00\xb4C\x00\x80\xbdC\x00\x80\xceC\x00\x80\xd7C\x00\x00\xd8C\x00\x80\xe1C\x00\x00\xe5C\x00\x80\xf6C\x00\xc0\x00D\x00@\x01D\x00@\x06D\x00@\nD\x00\x00\rD\x00\x00\x0fD\x00@\x10D\x00\xc0\x13D\x00@\x15D\x00\x00\x80A\x00\x00\xb0A\x00\x00\xd8A\x00\x00\x96B\x00\x00\xb6B\x00\x00\xd4B\x00\x00\xf8B\x00\x00\x01C\x00\x00\x1aC\x00\x00\x1cC\x00\x00\x1fC\x00\x00;C\x00\x00fC\x00\x00sC\x00\x00\x80C\x00\x00\x85C\x00\x00\x94C\x00\x80\x9eC\x00\x80\xa9C\x00\x00\xc5C\x00\x80\xcaC\x00\x00\xd3C\x00\x80\xd5C\x00\x00\xe6C\x00\x00\xf3C\x00\x00\xf6C\x00\x80\xf7C\x00\x80\xfcC\x00@\x02D\x00\x80\x03D\x00\x80\x04D\x00\x00\x08D\x00\x80\x08D\x00@\x0cD\x00\x80\x0cD\x00@\x0fD\x00\xc0\x10D\x00\x00\x11D\x00\x80\x12D\x00\x00\x15D\x00\x00\x10B\x00\x00\xa8B\x00\x00\xbeB\x00\x00\xd6B\x00\x00\xeeB\x00\x00\x07C\x00\x00\nC\x00\x00\x0eC\x00\x00\'C\x00\x005C\x00\x00@C\x00\x00JC\x00\x00MC\x00\x00^C\x00\x00hC\x00\x00kC\x00\x00wC\x00\x00\x86C\x00\x80\x96C\x00\x00\x99C\x00\x80\x99C\x00\x00\xa9C\x00\x80\xb0C\x00\x80\xb3C\x00\x80\xb6C\x00\x00\xbeC\x00\x00\xc0C\x00\x00\xc3C\x00\x00\xc7C\x00\x00\xcbC\x00\x00\xcfC\x00\x00\xd5C\x00\x00\xdaC\x00\x00\xe3C\x00\x00\xf5C\x00\x00\xfcC\x00\x80\xfdC\x00\x00\x01D\x00\xc0\x0eD\x00\x00\x12D\x00\x00 A\x00\x00\xc8A\x00\x00pB\x00\x00\x80B\x00\x00\x88B\x00\x00\x98B\x00\x00\xaaB\x00\x00\xc6B\x00\x00\xe2B\x00\x00\xe6B\x00\x00(C\x00\x00-C\x00\x008C\x00\x00<C\x00\x00EC\x00\x00FC\x00\x00NC\x00\x00OC\x00\x00lC\x00\x00}C\x00\x00\x83C\x00\x00\xadC\x00\x80\xadC\x00\x00\xb6C\x00\x80\xbaC\x00\x80\xbcC\x00\x00\xc8C\x00\x00\xcaC\x00\x80\xcfC\x00\x80\xd3C\x00\x80\xd4C\x00\x80\xe0C\x00\x00\xebC\x00\x00\xf2C\x00\x00\x06D\x00\xc0\x06D\x00\x80\tD\x00\xc0\tD\x00\x80\rD\x00\x00\x13D\x00\x00\xa0A\x00\x00\xf8A\x00\x00\x14B\x00\x00\x1cB\x00\x00(B\x00\x008B\x00\x00\x84B\x00\x00\xbaB\x00\x00\xf6B\x00\x00%C\x00\x004C\x00\x006C\x00\x00BC\x00\x00TC\x00\x00VC\x00\x00bC\x00\x00rC\x00\x00yC\x00\x80\x8cC\x00\x00\x98C\x00\x00\xa5C\x00\x80\xbbC\x00\x80\xc2C\x00\x80\xc9C\x00\x80\xccC\x00\x00\xceC\x00\x80\xd0C\x00\x00\xd2C\x00\x00\xdeC\x00\x00\xe1C\x00\x80\xe3C\x00\x80\xeaC\x00\x80\xefC\x00\x80\xf5C\x00\x00\xf8C\x00\x80\xf9C\x00\x80\nD\x00\xc0\nD\x00@\x14D\x00\xc0\x15D\x00\x00\xc0@\x00\x00pA\x00\x00\x90A\x00\x00\xa8A\x00\x00\xb8A\x00\x00tB\x00\x00\x82B\x00\x00\xc8B\x00\x00\xdcB\x00\x00\xe4B\x00\x00\x03C\x00\x00\rC\x00\x00\x15C\x00\x00/C\x00\x00>C\x00\x00IC\x00\x00SC\x00\x00aC\x00\x00mC\x00\x00nC\x00\x00vC\x00\x80\x84C\x00\x80\x8aC\x00\x80\x94C\x00\x80\x95C\x00\x00\x97C\x00\x00\x9bC\x00\x80\x9bC\x00\x00\x9dC\x00\x00\x9eC\x00\x80\xa7C\x00\x80\xafC\x00\x00\xb7C\x00\x80\xc5C\x00\x00\xdcC\x00\x80\xddC\x00\x80\xecC\x00@\x03D\x00@\x04D\x00\x00\tD\x00\x00`A\x00\x00\x04B\x00\x00lB\x00\x00|B\x00\x00\x92B\x00\x00\xa2B\x00\x00\xacB\x00\x00\xb0B\x00\x00\xcaB\x00\x00\xe0B\x00\x00\x00C\x00\x00\x04C\x00\x00$C\x00\x00*C\x00\x000C\x00\x007C\x00\x00]C\x00\x00\x89C\x00\x00\x90C\x00\x00\x9fC\x00\x80\xa1C\x00\x00\xa6C\x00\x80\xb2C\x00\x80\xb4C\x00\x00\xbcC\x00\x00\xc1C\x00\x00\xd6C\x00\x80\xd8C\x00\x00\xdfC\x00\x00\xe0C\x00\x80\xe2C\x00\x80\xe7C\x00\x00\xecC\x00\x80\xeeC\x00\x00\xffC\x00\x00\x04D\x00\x00\x07D\x00\x80\x07D\x00@\x11D\x00@\x13D\x00\x00@A\x00\x00\xc0A\x00\x00<B\x00\x00HB\x00\x00XB\x00\x00\xdeB\x00\x00\xf0B\x00\x00\x13C\x00\x00!C\x00\x00+C\x00\x001C\x00\x003C\x00\x00:C\x00\x00eC\x00\x00pC\x00\x00qC\x00\x80\x82C\x00\x80\x8dC\x00\x80\x98C\x00\x00\x9cC\x00\x80\x9fC\x00\x80\xa0C\x00\x80\xa8C\x00\x80\xacC\x00\x00\xaeC\x00\x80\xb1C\x00\x00\xe7C\x00\x00\xf0C\x00\x80\xf1C\x00\x80\xf4C\x00\x80\xfaC\x00\x00\xfbC\x00\x80\x05D\x00@\x07D\x00\xc0\x08D\x00\x00\x10D\x00\x80\x10D\x00@\x12D\x00\xc0\x12D\x00\x80\x13D\x00\x00\x80?\x00\x00\x18B\x00\x000B\x00\x00\xa0B\x00\x00\xb4B\x00\x00\xbcB\x00\x00\xecB\x00\x00\xf2B\x00\x00\tC\x00\x00\x0bC\x00\x00\x17C\x00\x00 C\x00\x00#C\x00\x009C\x00\x00_C\x00\x00xC\x00\x00\x84C\x00\x80\x92C\x00\x00\x93C\x00\x00\x95C\x00\x00\xa2C\x00\x80\xa3C\x00\x80\xa6C\x00\x00\xacC\x00\x00\xb0C\x00\x80\xb7C\x00\x80\xbfC\x00\x80\xc1C\x00\x80\xc3C\x00\x00\xddC\x00\x80\xe4C\x00\x00\xf7C\x00\x80\xffC\x00\xc0\x01D\x00\xc0\x02D\x00\xc0\x05D\x00@\tD\x00\xc0\x0bD\x00\xc0\rD\x00\xc0\x14D\x00\x00\xd0A\x00\x00\x9cB\x00\x00\xa6B\x00\x00\xd2B\x00\x00\xfaB\x00\x00\x06C\x00\x00\x08C\x00\x00\x19C\x00\x00"C\x00\x00CC\x00\x00DC\x00\x00QC\x00\x00WC\x00\x00XC\x00\x00YC\x00\x00jC\x00\x00tC\x00\x80\x81C\x00\x80\x85C\x00\x80\x89C\x00\x00\x8cC\x00\x00\x8dC\x00\x00\x8fC\x00\x00\xa1C\x00\x00\xa3C\x00\x80\xaaC\x00\x80\xabC\x00\x00\xbdC\x00\x00\xccC\x00\x80\xe8C\x00\x80\xebC\x00\x80\xedC\x00\x80\xf0C\x00\x00\xf4C\x00\x80\xf8C\x00\x80\x00D\x00\x80\x01D\x00\x00\x05D\x00@\x05D\x00@\x0bD\x00\x00\xf0A\x00\x00\x0cB\x00\x00 B\x00\x00\\B\x00\x00\x86B\x00\x00\x8cB\x00\x00\xa4B\x00\x00\xaeB\x00\x00\x05C\x00\x00\x18C\x00\x00)C\x00\x00,C\x00\x00GC\x00\x00KC\x00\x00RC\x00\x00gC\x00\x00oC\x00\x00~C\x00\x80\x83C\x00\x80\x86C\x00\x00\x87C\x00\x80\x87C\x00\x00\x8bC\x00\x80\x8eC\x00\x00\x96C\x00\x00\xa0C\x00\x80\xa2C\x00\x80\xa5C\x00\x80\xaeC\x00\x00\xb1C\x00\x00\xb3C\x00\x00\xb8C\x00\x00\xc4C\x00\x00\xdbC\x00\x00\xedC\x00\x00\xefC\x00\x00\x00D\x00\x00\x03D\x00\x80\x11D\x00\x80\x15D\x00\x00PA\x00\x00\x98A\x00\x00@B\x00\x00hB\x00\x00xB\x00\x00\x8eB\x00\x00\xc2B\x00\x00\xccB\x00\x00\xd8B\x00\x00=C\x00\x00HC\x00\x00`C\x00\x00cC\x00\x00zC\x00\x00|C\x00\x80\x88C\x00\x80\x8bC\x00\x80\x9aC\x00\x80\x9dC\x00\x00\xaaC\x00\x00\xabC\x00\x00\xafC\x00\x80\xb5C\x00\x00\xb9C\x00\x00\xbbC\x00\x80\xc7C\x00\x80\xc8C\x00\x80\xcbC\x00\x80\xd1C\x00\x00\xe8C\x00\x00\xeeC\x00\x00\xf1C\x00\x80\xf2C\x00\x00\xf9C\x00\x80\x02D\x00\xc0\x07D\x00\x00\nD\x00\xc0\x0cD\x00\x80\x0fD\x00\xc0\x11D\x00\x00\x00@\x00\x00\xa0@\x00\x00\xe0@\x00\x00\xe0A\x00\x00TB\x00\x00\xc4B\x00\x00\xeaB\x00\x00\xfcB\x00\x00\x11C\x00\x00\x12C\x00\x00\x1bC\x00\x00.C\x00\x00?C\x00\x00[C\x00\x00dC\x00\x00\x81C\x00\x00\x8eC\x00\x80\x9cC\x00\x00\xa4C\x00\x00\xa7C\x00\x00\xbfC\x00\x80\xc0C\x00\x80\xc4C\x00\x00\xc6C\x00\x80\xc6C\x00\x00\xc9C\x00\x00\xcdC\x00\x80\xcdC\x00\x00\xd1C\x00\x80\xd2C\x00\x00\xd4C\x00\x80\xdfC\x00\x00\xe2C\x00\x00\xe4C\x00\x80\xe9C\x00\x00\xfeC\x00\xc0\x04D\x00\x80\x06D\x00@\x0eD\x00\x80\x0eD\x00\x00@@\x00\x00\x10A\x00\x000A\x00\x00\xe8A\x00\x00\x08B\x00\x00$B\x00\x00DB\x00\x00LB\x00\x00PB\x00\x00dB\x00\x00\x90B\x00\x00\x9aB\x00\x00\xb8B\x00\x00\xc0B\x00\x00\xe8B\x00\x002C\x00\x00PC\x00\x00\\C\x00\x00iC\x00\x80\x80C\x00\x00\x88C\x00\x80\x97C\x00\x00\x9aC\x00\x80\xa4C\x00\x00\xa8C\x00\x00\xd0C\x00\x00\xd9C\x00\x80\xdaC\x00\x80\xdeC\x00\x00\xe9C\x00\x00\xeaC\x00\x80\xf3C\x00@\x00D\x00\x00\x02D\x00@\x08D\x00\x80\x0bD\x00\x00\x0cD\x00@\rD\x00\xc0\x0fD\x00\x80\x14D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I15
aI40
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I15
I40
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I0
aI6
aI11
aI0
aI4
aI2
aI9
aI10
aI8
aI3
aI1
aI5
aI5
aI10
aI11
aI6
aI8
aI0
aI11
aI11
aI11
aI12
aI5
aI8
aI1
aI5
aI3
aI2
aI5
aI0
aI5
aI10
aI8
aI2
aI7
aI6
aI7
aI5
aI13
aI8
aI9
aI2
aI5
aI5
aI6
aI4
aI2
aI2
aI9
aI10
aI9
aI0
aI3
aI10
aI6
aI5
aI8
aI2
aI11
aI10
aI3
aI6
aI11
aI4
aI7
aI7
aI9
aI3
aI13
aI3
aI1
aI14
aI10
aI5
aI9
aI2
aI8
aI0
aI3
aI2
aI13
aI0
aI1
aI8
aI12
aI14
aI14
aI3
aI0
aI9
aI11
aI3
aI5
aI4
aI5
aI12
aI5
aI14
aI14
aI1
aI6
aI2
aI7
aI4
aI0
aI4
aI11
aI12
aI2
aI14
aI13
aI13
aI12
aI10
aI11
aI0
aI7
aI10
aI1
aI8
aI14
aI6
aI7
aI12
aI7
aI10
aI5
aI12
aI5
aI3
aI10
aI4
aI7
aI4
aI1
aI13
aI2
aI13
aI12
aI7
aI14
aI7
aI9
aI8
aI12
aI10
aI13
aI10
aI4
aI11
aI7
aI14
aI8
aI12
aI14
aI7
aI12
aI14
aI2
aI4
aI1
aI12
aI14
aI14
aI4
aI1
aI9
aI1
aI2
aI9
aI2
aI11
aI4
aI11
aI5
aI8
aI10
aI10
aI7
aI0
aI5
aI8
aI13
aI11
aI4
aI1
aI2
aI5
aI13
aI0
aI3
aI5
aI4
aI5
aI10
aI6
aI2
aI9
aI12
aI7
aI13
aI5
aI11
aI8
aI6
aI9
aI3
aI6
aI10
aI1
aI13
aI7
aI9
aI12
aI10
aI2
aI0
aI0
aI10
aI0
aI8
aI11
aI6
aI12
aI3
aI3
aI6
aI13
aI4
aI6
aI5
aI4
aI12
aI0
aI1
aI2
aI14
aI14
aI14
aI8
aI6
aI6
aI3
aI14
aI5
aI7
aI14
aI8
aI13
aI6
aI2
aI8
aI8
aI6
aI10
aI11
aI6
aI8
aI0
aI1
aI3
aI8
aI14
aI6
aI6
aI0
aI13
aI13
aI3
aI0
aI13
aI10
aI2
aI8
aI3
aI13
aI2
aI2
aI8
aI1
aI13
aI2
aI5
aI14
aI11
aI11
aI12
aI7
aI0
aI3
aI1
aI11
aI2
aI3
aI10
aI3
aI3
aI4
aI6
aI0
aI3
aI10
aI8
aI9
aI9
aI13
aI13
aI5
aI2
aI9
aI9
aI7
aI14
aI8
aI1
aI10
aI8
aI2
aI1
aI0
aI1
aI6
aI9
aI13
aI4
aI10
aI13
aI4
aI7
aI0
aI1
aI4
aI4
aI11
aI0
aI14
aI9
aI11
aI11
aI9
aI14
aI7
aI3
aI3
aI11
aI9
aI3
aI1
aI7
aI6
aI1
aI6
aI10
aI0
aI10
aI10
aI6
aI12
aI8
aI5
aI14
aI8
aI5
aI8
aI1
aI3
aI4
aI6
aI2
aI1
aI2
aI13
aI12
aI0
aI13
aI10
aI5
aI9
aI12
aI9
aI12
aI9
aI2
aI11
aI0
aI3
aI12
aI3
aI0
aI5
aI0
aI11
aI8
aI3
aI9
aI8
aI9
aI1
aI2
aI14
aI4
aI4
aI11
aI11
aI11
aI4
aI6
aI4
aI0
aI13
aI9
aI6
aI6
aI3
aI14
aI3
aI12
aI6
aI10
aI1
aI6
aI11
aI12
aI8
aI12
aI13
aI4
aI4
aI0
aI14
aI2
aI10
aI3
aI2
aI14
aI9
aI4
aI14
aI2
aI9
aI14
aI10
aI14
aI1
aI12
aI7
aI7
aI14
aI6
aI13
aI8
aI7
aI13
aI4
aI7
aI4
aI1
aI2
aI5
aI2
aI6
aI10
aI10
aI1
aI0
aI7
aI12
aI14
aI1
aI7
aI0
aI12
aI5
aI0
aI2
aI4
aI4
aI4
aI7
aI2
aI8
aI2
aI5
aI14
aI14
aI11
aI12
aI13
aI7
aI8
aI10
aI8
aI3
aI4
aI3
aI6
aI12
aI10
aI10
aI6
aI8
aI9
aI12
aI7
aI0
aI9
aI13
aI5
aI1
aI13
aI8
aI7
aI2
aI3
aI12
aI1
aI12
aI9
aI11
aI1
aI12
aI13
aI1
aI12
aI7
aI7
aI1
aI9
aI11
aI1
aI9
aI14
aI0
aI14
aI9
aI6
aI4
aI3
aI8
aI9
aI13
aI13
aI10
aI11
aI4
aI0
aI5
aI13
aI7
aI7
aI7
aI11
aI1
aI13
aI9
aI13
aI1
aI0
aI12
aI11
aI7
aI14
aI9
aI7
aI1
aI1
aI0
aI3
aI10
aI6
aI7
aI8
aI5
aI10
aI12
aI11
aI11
aI11
aI13
aI6
aI6
aI14
aI9
aI3
aI12
aI5
aI4
aI12
aI14
aI4
aI12
aI5
aI9
aI0
aI11
aI4
aI5
aI13
aI3
aI5
atbsS'finished'
p74
I00
sS'nReps'
p75
I40
sS'nRemaining'
p76
I0
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p79
NsS'thisIndex'
p80
I5
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I14
sS'nTotal'
p83
I600
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I0
sS'.thisRepN'
p96
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I0
sg15
(lp100
S'k'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'k'
asg95
I9
sS'.thisRepN'
p103
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I9
sg15
(lp107
S'd'
asg17
S'N'
sg14
I1
sa(dp108
g16
(lp109
S'k'
asg18
S'N'
sS'.thisRepN'
p110
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I13
sg15
(lp114
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp115
S'k'
asg95
I13
sa(dp116
g16
(lp117
S'd'
asg18
S'N'
sS'.thisRepN'
p118
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p119
I3
sS'.thisN'
p120
I3
sS'.thisIndex'
p121
I14
sg15
(lp122
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp123
g16
(lp124
S'k'
asg18
S'Y'
sS'.thisRepN'
p125
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p126
I4
sS'.thisN'
p127
I4
sS'.thisIndex'
p128
I1
sg15
(lp129
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp130
S'space'
p131
asg95
I1
sa(dp132
g16
(lp133
S'k'
asg18
S'N'
sS'.thisRepN'
p134
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p135
I5
sS'.thisN'
p136
I5
sS'.thisIndex'
p137
I13
sg15
(lp138
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp139
S'space'
p140
asg95
I13
sa(dp141
g16
(lp142
S'd'
asg18
S'N'
sS'.thisRepN'
p143
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p144
I6
sS'.thisN'
p145
I6
sS'.thisIndex'
p146
I6
sg15
(lp147
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp148
S'space'
p149
asg95
I6
sa(dp150
g16
(lp151
S'k'
asg18
S'N'
sS'.thisRepN'
p152
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p153
I7
sS'.thisN'
p154
I7
sS'.thisIndex'
p155
I13
sg15
(lp156
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I13
sa(dp157
g16
(lp158
S'k'
asg18
S'Y'
sS'.thisRepN'
p159
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p160
I8
sS'.thisN'
p161
I8
sS'.thisIndex'
p162
I1
sg15
(lp163
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp164
g16
(lp165
S'd'
asg18
S'Y'
sS'.thisRepN'
p166
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p167
I9
sS'.thisN'
p168
I9
sS'.thisIndex'
p169
I14
sg15
(lp170
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp171
S'space'
p172
asg95
I14
sa(dp173
g16
(lp174
S'k'
asg18
S'N'
sS'.thisRepN'
p175
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p176
I10
sS'.thisN'
p177
I10
sS'.thisIndex'
p178
I4
sg15
(lp179
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp180
g16
(lp181
S'k'
asg18
S'Y'
sS'.thisRepN'
p182
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p183
I11
sS'.thisN'
p184
I11
sS'.thisIndex'
p185
I14
sg15
(lp186
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp187
S'space'
p188
asg95
I14
sa(dp189
g16
(lp190
S'd'
asg18
S'N'
sS'.thisRepN'
p191
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p192
I12
sS'.thisN'
p193
I12
sS'.thisIndex'
p194
I8
sg15
(lp195
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp196
S'space'
p197
asg95
I8
sa(dp198
g16
(lp199
S'd'
asg18
S'N'
sS'.thisRepN'
p200
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p201
I13
sS'.thisN'
p202
I13
sS'.thisIndex'
p203
I12
sg15
(lp204
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp205
g16
(lp206
S'k'
asg18
S'Y'
sS'.thisRepN'
p207
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p208
I14
sS'.thisN'
p209
I14
sS'.thisIndex'
p210
I7
sg15
(lp211
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp212
g16
(lp213
S'd'
asg18
S'Y'
sS'.thisRepN'
p214
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p215
I0
sS'.thisN'
p216
I15
sS'.thisIndex'
p217
I6
sg15
(lp218
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp219
S'space'
p220
asg95
I6
sa(dp221
g16
(lp222
S'd'
asg18
S'N'
sS'.thisRepN'
p223
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p224
I1
sS'.thisN'
p225
I16
sS'.thisIndex'
p226
I2
sg15
(lp227
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp228
g16
(lp229
S'k'
asg18
S'N'
sS'.thisRepN'
p230
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p231
I2
sS'.thisN'
p232
I17
sS'.thisIndex'
p233
I0
sg15
(lp234
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp235
g16
(lp236
S'd'
asg18
S'Y'
sS'.thisRepN'
p237
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p238
I3
sS'.thisN'
p239
I18
sS'.thisIndex'
p240
I6
sg15
(lp241
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp242
S'space'
p243
asg95
I6
sa(dp244
g16
(lp245
S'k'
asg18
S'N'
sS'.thisRepN'
p246
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p247
I4
sS'.thisN'
p248
I19
sS'.thisIndex'
p249
I12
sg15
(lp250
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp251
g16
(lp252
S'd'
asg18
S'Y'
sS'.thisRepN'
p253
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p254
I5
sS'.thisN'
p255
I20
sS'.thisIndex'
p256
I5
sg15
(lp257
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp258
S'space'
p259
asg95
I5
sa(dp260
g16
(lp261
S'k'
asg18
S'N'
sS'.thisRepN'
p262
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p263
I6
sS'.thisN'
p264
I21
sS'.thisIndex'
p265
I6
sg15
(lp266
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp267
S'space'
p268
asg95
I6
sa(dp269
g16
(lp270
S'd'
asg18
S'N'
sS'.thisRepN'
p271
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p272
I7
sS'.thisN'
p273
I22
sS'.thisIndex'
p274
I2
sg15
(lp275
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp276
g16
(lp277
S'd'
asg18
S'N'
sS'.thisRepN'
p278
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p279
I8
sS'.thisN'
p280
I23
sS'.thisIndex'
p281
I6
sg15
(lp282
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp283
g16
(lp284
S'd'
asg18
S'Y'
sS'.thisRepN'
p285
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p286
I9
sS'.thisN'
p287
I24
sS'.thisIndex'
p288
I8
sg15
(lp289
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp290
g16
(lp291
S'd'
asg18
S'Y'
sS'.thisRepN'
p292
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p293
I10
sS'.thisN'
p294
I25
sS'.thisIndex'
p295
I4
sg15
(lp296
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp297
S'space'
p298
asg95
I4
sa(dp299
g16
(lp300
S'k'
asg18
S'N'
sS'.thisRepN'
p301
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p302
I11
sS'.thisN'
p303
I26
sS'.thisIndex'
p304
I10
sg15
(lp305
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I10
sa(dp306
g16
(lp307
S'k'
asg18
S'N'
sS'.thisRepN'
p308
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p309
I12
sS'.thisN'
p310
I27
sS'.thisIndex'
p311
I2
sg15
(lp312
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp313
g16
(lp314
S'd'
asg18
S'Y'
sS'.thisRepN'
p315
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p316
I13
sS'.thisN'
p317
I28
sS'.thisIndex'
p318
I13
sg15
(lp319
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp320
S'space'
p321
asg95
I13
sa(dp322
g16
(lp323
S'd'
asg18
S'N'
sS'.thisRepN'
p324
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p325
I14
sS'.thisN'
p326
I29
sS'.thisIndex'
p327
I14
sg15
(lp328
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp329
S'space'
p330
asg95
I14
sa(dp331
g16
(lp332
S'd'
asg18
S'Y'
sS'.thisRepN'
p333
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p334
I0
sS'.thisN'
p335
I30
sS'.thisIndex'
p336
I11
sg15
(lp337
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp338
S'd'
asg95
I11
sa(dp339
g16
(lp340
S'd'
asg18
S'Y'
sS'.thisRepN'
p341
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p342
I1
sS'.thisN'
p343
I31
sS'.thisIndex'
p344
I5
sg15
(lp345
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp346
S'space'
p347
asg95
I5
sa(dp348
g16
(lp349
S'd'
asg18
S'Y'
sS'.thisRepN'
p350
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p351
I2
sS'.thisN'
p352
I32
sS'.thisIndex'
p353
I1
sg15
(lp354
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp355
g16
(lp356
S'k'
asg18
S'N'
sS'.thisRepN'
p357
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p358
I3
sS'.thisN'
p359
I33
sS'.thisIndex'
p360
I7
sg15
(lp361
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp362
g16
(lp363
S'd'
asg18
S'Y'
sS'.thisRepN'
p364
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p365
I4
sS'.thisN'
p366
I34
sS'.thisIndex'
p367
I14
sg15
(lp368
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp369
S'space'
p370
asg95
I14
sa(dp371
g16
(lp372
S'd'
asg18
S'Y'
sS'.thisRepN'
p373
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p374
I5
sS'.thisN'
p375
I35
sS'.thisIndex'
p376
I11
sg15
(lp377
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp378
S'space'
p379
asg95
I11
sa(dp380
g16
(lp381
S'k'
asg18
S'Y'
sS'.thisRepN'
p382
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p383
I6
sS'.thisN'
p384
I36
sS'.thisIndex'
p385
I3
sg15
(lp386
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp387
g16
(lp388
S'k'
asg18
S'Y'
sS'.thisRepN'
p389
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p390
I7
sS'.thisN'
p391
I37
sS'.thisIndex'
p392
I5
sg15
(lp393
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp394
g16
(lp395
S'd'
asg18
S'Y'
sS'.thisRepN'
p396
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p397
I8
sS'.thisN'
p398
I38
sS'.thisIndex'
p399
I9
sg15
(lp400
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp401
S'space'
p402
asg95
I9
sa(dp403
g16
(lp404
S'd'
asg18
S'N'
sS'.thisRepN'
p405
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p406
I9
sS'.thisN'
p407
I39
sS'.thisIndex'
p408
I5
sg15
(lp409
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp410
S'space'
p411
asg95
I5
sa(dp412
g16
(lp413
S'k'
asg18
S'Y'
sS'.thisRepN'
p414
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p415
I10
sS'.thisN'
p416
I40
sS'.thisIndex'
p417
I11
sg15
(lp418
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp419
S'space'
p420
asg95
I11
sa(dp421
g16
(lp422
S'k'
asg18
S'N'
sS'.thisRepN'
p423
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p424
I11
sS'.thisN'
p425
I41
sS'.thisIndex'
p426
I14
sg15
(lp427
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I14
sa(dp428
g16
(lp429
S'k'
asg18
S'N'
sS'.thisRepN'
p430
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p431
I12
sS'.thisN'
p432
I42
sS'.thisIndex'
p433
I5
sg15
(lp434
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp435
g16
(lp436
S'd'
asg18
S'Y'
sS'.thisRepN'
p437
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p438
I13
sS'.thisN'
p439
I43
sS'.thisIndex'
p440
I1
sg15
(lp441
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp442
S'space'
p443
asg95
I1
sa(dp444
g16
(lp445
S'd'
asg18
S'N'
sS'.thisRepN'
p446
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p447
I14
sS'.thisN'
p448
I44
sS'.thisIndex'
p449
I9
sg15
(lp450
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp451
g16
(lp452
S'k'
asg18
S'Y'
sS'.thisRepN'
p453
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p454
I0
sS'.thisN'
p455
I45
sS'.thisIndex'
p456
I0
sg15
(lp457
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp458
S'space'
p459
asg95
I0
sa(dp460
g16
(lp461
S'd'
asg18
S'Y'
sS'.thisRepN'
p462
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p463
I1
sS'.thisN'
p464
I46
sS'.thisIndex'
p465
I5
sg15
(lp466
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp467
S'd'
asg95
I5
sa(dp468
g16
(lp469
S'd'
asg18
S'Y'
sS'.thisRepN'
p470
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p471
I2
sS'.thisN'
p472
I47
sS'.thisIndex'
p473
I8
sg15
(lp474
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp475
S'space'
p476
asg95
I8
sa(dp477
g16
(lp478
S'k'
asg18
S'Y'
sS'.thisRepN'
p479
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p480
I3
sS'.thisN'
p481
I48
sS'.thisIndex'
p482
I12
sg15
(lp483
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp484
S'space'
p485
asg95
I12
sa(dp486
g16
(lp487
S'k'
asg18
S'N'
sg22
I33
sS'.thisN'
p488
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p489
I4
sS'.thisRepN'
p490
I3
sg21
I35
sS'.thisIndex'
p491
I14
sg23
I25
sg15
(lp492
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp493
g16
(lp494
S'd'
asg95
I8
sS'.thisRepN'
p495
I3
sg30
VF
sg31
g32
sS'.thisTrialN'
p496
I5
sS'.thisN'
p497
I50
sS'.thisIndex'
p498
I8
sg15
(lp499
S'k'
asg17
S'N'
sg14
I2
sa(dp500
g16
(lp501
S'd'
asg95
I14
sS'.thisRepN'
p502
I3
sg30
VF
sg31
g32
sS'.thisTrialN'
p503
I6
sS'.thisN'
p504
I51
sS'.thisIndex'
p505
I14
sg15
(lp506
S'd'
asg17
S'Y'
sg14
I2
sa(dp507
g16
(lp508
S'd'
asg18
S'N'
sS'.thisRepN'
p509
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p510
I7
sS'.thisN'
p511
I52
sS'.thisIndex'
p512
I14
sg15
(lp513
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I14
sa(dp514
g16
(lp515
S'k'
asg18
S'Y'
sS'.thisRepN'
p516
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p517
I8
sS'.thisN'
p518
I53
sS'.thisIndex'
p519
I13
sg15
(lp520
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I13
sa(dp521
g16
(lp522
S'd'
asg18
S'Y'
sS'.thisRepN'
p523
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p524
I9
sS'.thisN'
p525
I54
sS'.thisIndex'
p526
I8
sg15
(lp527
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp528
S'space'
p529
asg95
I8
sa(dp530
g16
(lp531
S'k'
asg18
S'Y'
sS'.thisRepN'
p532
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p533
I10
sS'.thisN'
p534
I55
sS'.thisIndex'
p535
I11
sg15
(lp536
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I11
sa(dp537
g16
(lp538
S'k'
asg18
S'Y'
sS'.thisRepN'
p539
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p540
I11
sS'.thisN'
p541
I56
sS'.thisIndex'
p542
I1
sg15
(lp543
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp544
g16
(lp545
S'k'
asg18
S'N'
sS'.thisRepN'
p546
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p547
I12
sS'.thisN'
p548
I57
sS'.thisIndex'
p549
I14
sg15
(lp550
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp551
g16
(lp552
S'd'
asg18
S'N'
sS'.thisRepN'
p553
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p554
I13
sS'.thisN'
p555
I58
sS'.thisIndex'
p556
I12
sg15
(lp557
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp558
g16
(lp559
S'd'
asg18
S'Y'
sS'.thisRepN'
p560
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p561
I14
sS'.thisN'
p562
I59
sS'.thisIndex'
p563
I7
sg15
(lp564
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp565
S'space'
p566
asg95
I7
sa(dp567
g16
(lp568
S'd'
asg18
S'N'
sS'.thisRepN'
p569
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p570
I0
sS'.thisN'
p571
I60
sS'.thisIndex'
p572
I4
sg15
(lp573
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp574
g16
(lp575
S'd'
asg18
S'Y'
sS'.thisRepN'
p576
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p577
I1
sS'.thisN'
p578
I61
sS'.thisIndex'
p579
I6
sg15
(lp580
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp581
g16
(lp582
S'd'
asg18
S'Y'
sS'.thisRepN'
p583
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p584
I2
sS'.thisN'
p585
I62
sS'.thisIndex'
p586
I12
sg15
(lp587
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp588
S'space'
p589
asg95
I12
sa(dp590
g16
(lp591
S'k'
asg18
S'N'
sS'.thisRepN'
p592
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p593
I3
sS'.thisN'
p594
I63
sS'.thisIndex'
p595
I7
sg15
(lp596
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I7
sa(dp597
g16
(lp598
S'k'
asg18
S'Y'
sS'.thisRepN'
p599
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p600
I4
sS'.thisN'
p601
I64
sS'.thisIndex'
p602
I4
sg15
(lp603
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp604
S'space'
p605
asg95
I4
sa(dp606
g16
(lp607
S'd'
asg18
S'N'
sS'.thisRepN'
p608
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p609
I5
sS'.thisN'
p610
I65
sS'.thisIndex'
p611
I6
sg15
(lp612
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp613
g16
(lp614
S'd'
asg18
S'N'
sS'.thisRepN'
p615
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p616
I6
sS'.thisN'
p617
I66
sS'.thisIndex'
p618
I5
sg15
(lp619
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp620
g16
(lp621
S'd'
asg18
S'N'
sS'.thisRepN'
p622
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p623
I7
sS'.thisN'
p624
I67
sS'.thisIndex'
p625
I11
sg15
(lp626
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I11
sa(dp627
g16
(lp628
S'd'
asg18
S'Y'
sS'.thisRepN'
p629
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p630
I8
sS'.thisN'
p631
I68
sS'.thisIndex'
p632
I4
sg15
(lp633
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp634
S'space'
p635
asg95
I4
sa(dp636
g16
(lp637
S'd'
asg18
S'N'
sS'.thisRepN'
p638
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p639
I9
sS'.thisN'
p640
I69
sS'.thisIndex'
p641
I1
sg15
(lp642
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp643
g16
(lp644
S'k'
asg18
S'Y'
sS'.thisRepN'
p645
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p646
I10
sS'.thisN'
p647
I70
sS'.thisIndex'
p648
I11
sg15
(lp649
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp650
S'space'
p651
asg95
I11
sa(dp652
g16
(lp653
S'd'
asg18
S'N'
sS'.thisRepN'
p654
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p655
I11
sS'.thisN'
p656
I71
sS'.thisIndex'
p657
I12
sg15
(lp658
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I12
sa(dp659
g16
(lp660
S'd'
asg18
S'N'
sS'.thisRepN'
p661
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p662
I12
sS'.thisN'
p663
I72
sS'.thisIndex'
p664
I14
sg15
(lp665
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp666
g16
(lp667
S'k'
asg18
S'Y'
sS'.thisRepN'
p668
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p669
I13
sS'.thisN'
p670
I73
sS'.thisIndex'
p671
I7
sg15
(lp672
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp673
S'space'
p674
asg95
I7
sa(dp675
g16
(lp676
S'k'
asg18
S'Y'
sS'.thisRepN'
p677
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p678
I14
sS'.thisN'
p679
I74
sS'.thisIndex'
p680
I1
sg15
(lp681
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp682
g16
(lp683
S'd'
asg18
S'Y'
sS'.thisRepN'
p684
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p685
I0
sS'.thisN'
p686
I75
sS'.thisIndex'
p687
I2
sg15
(lp688
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp689
g16
(lp690
S'd'
asg18
S'N'
sS'.thisRepN'
p691
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p692
I1
sS'.thisN'
p693
I76
sS'.thisIndex'
p694
I4
sg15
(lp695
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp696
g16
(lp697
S'd'
asg18
S'Y'
sS'.thisRepN'
p698
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p699
I2
sS'.thisN'
p700
I77
sS'.thisIndex'
p701
I14
sg15
(lp702
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp703
S'space'
p704
asg95
I14
sa(dp705
g16
(lp706
S'k'
asg18
S'Y'
sS'.thisRepN'
p707
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p708
I3
sS'.thisN'
p709
I78
sS'.thisIndex'
p710
I10
sg15
(lp711
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp712
S'space'
p713
asg95
I10
sa(dp714
g16
(lp715
S'k'
asg18
S'Y'
sS'.thisRepN'
p716
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p717
I4
sS'.thisN'
p718
I79
sS'.thisIndex'
p719
I1
sg15
(lp720
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp721
g16
(lp722
S'd'
asg18
S'Y'
sS'.thisRepN'
p723
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p724
I5
sS'.thisN'
p725
I80
sS'.thisIndex'
p726
I9
sg15
(lp727
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp728
S'd'
asg95
I9
sa(dp729
g16
(lp730
S'd'
asg18
S'Y'
sS'.thisRepN'
p731
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p732
I6
sS'.thisN'
p733
I81
sS'.thisIndex'
p734
I7
sg15
(lp735
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp736
S'space'
p737
asg95
I7
sa(dp738
g16
(lp739
S'k'
asg18
S'Y'
sS'.thisRepN'
p740
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p741
I7
sS'.thisN'
p742
I82
sS'.thisIndex'
p743
I11
sg15
(lp744
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp745
S'space'
p746
asg95
I11
sa(dp747
g16
(lp748
S'd'
asg18
S'N'
sS'.thisRepN'
p749
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p750
I8
sS'.thisN'
p751
I83
sS'.thisIndex'
p752
I10
sg15
(lp753
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp754
g16
(lp755
S'k'
asg18
S'Y'
sS'.thisRepN'
p756
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p757
I9
sS'.thisN'
p758
I84
sS'.thisIndex'
p759
I3
sg15
(lp760
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp761
g16
(lp762
S'k'
asg18
S'Y'
sS'.thisRepN'
p763
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p764
I10
sS'.thisN'
p765
I85
sS'.thisIndex'
p766
I4
sg15
(lp767
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp768
S'space'
p769
asg95
I4
sa(dp770
g16
(lp771
S'd'
asg18
S'N'
sS'.thisRepN'
p772
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p773
I11
sS'.thisN'
p774
I86
sS'.thisIndex'
p775
I7
sg15
(lp776
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp777
g16
(lp778
S'k'
asg18
S'Y'
sS'.thisRepN'
p779
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p780
I12
sS'.thisN'
p781
I87
sS'.thisIndex'
p782
I11
sg15
(lp783
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp784
S'space'
p785
asg95
I11
sa(dp786
g16
(lp787
S'k'
asg18
S'N'
sS'.thisRepN'
p788
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p789
I13
sS'.thisN'
p790
I88
sS'.thisIndex'
p791
I7
sg15
(lp792
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp793
g16
(lp794
S'k'
asg18
S'Y'
sS'.thisRepN'
p795
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p796
I14
sS'.thisN'
p797
I89
sS'.thisIndex'
p798
I1
sg15
(lp799
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp800
S'space'
p801
asg95
I1
sa(dp802
g16
(lp803
S'k'
asg18
S'N'
sS'.thisRepN'
p804
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p805
I0
sS'.thisN'
p806
I90
sS'.thisIndex'
p807
I9
sg15
(lp808
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp809
g16
(lp810
S'k'
asg18
S'N'
sS'.thisRepN'
p811
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p812
I1
sS'.thisN'
p813
I91
sS'.thisIndex'
p814
I2
sg15
(lp815
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp816
g16
(lp817
S'k'
asg18
S'Y'
sS'.thisRepN'
p818
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p819
I2
sS'.thisN'
p820
I92
sS'.thisIndex'
p821
I14
sg15
(lp822
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp823
S'space'
p824
asg95
I14
sa(dp825
g16
(lp826
S'd'
asg18
S'N'
sS'.thisRepN'
p827
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p828
I3
sS'.thisN'
p829
I93
sS'.thisIndex'
p830
I5
sg15
(lp831
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I5
sa(dp832
g16
(lp833
S'k'
asg18
S'Y'
sS'.thisRepN'
p834
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p835
I4
sS'.thisN'
p836
I94
sS'.thisIndex'
p837
I9
sg15
(lp838
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp839
S'k'
asg95
I9
sa(dp840
g16
(lp841
S'd'
asg18
S'N'
sS'.thisRepN'
p842
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p843
I5
sS'.thisN'
p844
I95
sS'.thisIndex'
p845
I3
sg15
(lp846
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp847
g16
(lp848
S'd'
asg18
S'N'
sS'.thisRepN'
p849
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p850
I6
sS'.thisN'
p851
I96
sS'.thisIndex'
p852
I14
sg15
(lp853
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp854
g16
(lp855
S'd'
asg18
S'N'
sS'.thisRepN'
p856
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p857
I7
sS'.thisN'
p858
I97
sS'.thisIndex'
p859
I12
sg15
(lp860
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp861
g16
(lp862
S'd'
asg18
S'N'
sS'.thisRepN'
p863
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p864
I8
sS'.thisN'
p865
I98
sS'.thisIndex'
p866
I13
sg15
(lp867
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I13
sa(dp868
g16
(lp869
S'k'
asg18
S'N'
sg22
I38
sS'.thisN'
p870
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p871
I9
sS'.thisRepN'
p872
I6
sg21
I34
sS'.thisIndex'
p873
I4
sg23
I25
sg15
(lp874
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp875
g16
(lp876
S'k'
asg95
I6
sS'.thisRepN'
p877
I6
sg30
VF
sg31
g32
sS'.thisTrialN'
p878
I10
sS'.thisN'
p879
I100
sS'.thisIndex'
p880
I6
sg15
(lp881
S'd'
asg17
S'N'
sg14
I3
sa(dp882
g16
(lp883
S'k'
asg95
I7
sS'.thisRepN'
p884
I6
sg30
VF
sg31
g32
sS'.thisTrialN'
p885
I11
sS'.thisN'
p886
I101
sS'.thisIndex'
p887
I7
sg15
(lp888
S'k'
asg17
S'Y'
sg14
I3
sa(dp889
g16
(lp890
S'k'
asg18
S'N'
sS'.thisRepN'
p891
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p892
I12
sS'.thisN'
p893
I102
sS'.thisIndex'
p894
I12
sg15
(lp895
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I12
sa(dp896
g16
(lp897
S'd'
asg18
S'N'
sS'.thisRepN'
p898
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p899
I13
sS'.thisN'
p900
I103
sS'.thisIndex'
p901
I1
sg15
(lp902
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp903
g16
(lp904
S'd'
asg18
S'N'
sS'.thisRepN'
p905
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p906
I14
sS'.thisN'
p907
I104
sS'.thisIndex'
p908
I0
sg15
(lp909
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp910
g16
(lp911
S'k'
asg18
S'N'
sS'.thisRepN'
p912
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p913
I0
sS'.thisN'
p914
I105
sS'.thisIndex'
p915
I10
sg15
(lp916
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I10
sa(dp917
g16
(lp918
S'd'
asg18
S'N'
sS'.thisRepN'
p919
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p920
I1
sS'.thisN'
p921
I106
sS'.thisIndex'
p922
I2
sg15
(lp923
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I2
sa(dp924
g16
(lp925
S'k'
asg18
S'N'
sS'.thisRepN'
p926
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p927
I2
sS'.thisN'
p928
I107
sS'.thisIndex'
p929
I3
sg15
(lp930
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp931
g16
(lp932
S'd'
asg18
S'Y'
sS'.thisRepN'
p933
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p934
I3
sS'.thisN'
p935
I108
sS'.thisIndex'
p936
I12
sg15
(lp937
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp938
S'space'
p939
asg95
I12
sa(dp940
g16
(lp941
S'd'
asg18
S'N'
sS'.thisRepN'
p942
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p943
I4
sS'.thisN'
p944
I109
sS'.thisIndex'
p945
I1
sg15
(lp946
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp947
g16
(lp948
S'd'
asg18
S'N'
sS'.thisRepN'
p949
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p950
I5
sS'.thisN'
p951
I110
sS'.thisIndex'
p952
I6
sg15
(lp953
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp954
S'space'
p955
asg95
I6
sa(dp956
g16
(lp957
S'k'
asg18
S'Y'
sS'.thisRepN'
p958
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p959
I6
sS'.thisN'
p960
I111
sS'.thisIndex'
p961
I8
sg15
(lp962
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp963
g16
(lp964
S'd'
asg18
S'N'
sS'.thisRepN'
p965
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p966
I7
sS'.thisN'
p967
I112
sS'.thisIndex'
p968
I7
sg15
(lp969
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp970
g16
(lp971
S'd'
asg18
S'N'
sS'.thisRepN'
p972
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p973
I8
sS'.thisN'
p974
I113
sS'.thisIndex'
p975
I4
sg15
(lp976
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp977
g16
(lp978
S'k'
asg18
S'Y'
sS'.thisRepN'
p979
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p980
I9
sS'.thisN'
p981
I114
sS'.thisIndex'
p982
I6
sg15
(lp983
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp984
S'space'
p985
asg95
I6
sa(dp986
g16
(lp987
S'k'
asg18
S'Y'
sS'.thisRepN'
p988
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p989
I10
sS'.thisN'
p990
I115
sS'.thisIndex'
p991
I4
sg15
(lp992
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp993
S'd'
asg95
I4
sa(dp994
g16
(lp995
S'd'
asg18
S'Y'
sS'.thisRepN'
p996
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p997
I11
sS'.thisN'
p998
I116
sS'.thisIndex'
p999
I14
sg15
(lp1000
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1001
S'space'
p1002
asg95
I14
sa(dp1003
g16
(lp1004
S'k'
asg18
S'N'
sS'.thisRepN'
p1005
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1006
I12
sS'.thisN'
p1007
I117
sS'.thisIndex'
p1008
I13
sg15
(lp1009
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1010
g16
(lp1011
S'k'
asg18
S'N'
sS'.thisRepN'
p1012
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1013
I13
sS'.thisN'
p1014
I118
sS'.thisIndex'
p1015
I9
sg15
(lp1016
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp1017
g16
(lp1018
S'd'
asg18
S'N'
sS'.thisRepN'
p1019
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1020
I14
sS'.thisN'
p1021
I119
sS'.thisIndex'
p1022
I3
sg15
(lp1023
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1024
g16
(lp1025
S'k'
asg18
S'N'
sS'.thisRepN'
p1026
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1027
I0
sS'.thisN'
p1028
I120
sS'.thisIndex'
p1029
I8
sg15
(lp1030
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1031
g16
(lp1032
S'k'
asg18
S'N'
sS'.thisRepN'
p1033
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1034
I1
sS'.thisN'
p1035
I121
sS'.thisIndex'
p1036
I9
sg15
(lp1037
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1038
S'space'
p1039
asg95
I9
sa(dp1040
g16
(lp1041
S'k'
asg18
S'Y'
sS'.thisRepN'
p1042
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1043
I2
sS'.thisN'
p1044
I122
sS'.thisIndex'
p1045
I0
sg15
(lp1046
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp1047
g16
(lp1048
S'k'
asg18
S'N'
sS'.thisRepN'
p1049
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1050
I3
sS'.thisN'
p1051
I123
sS'.thisIndex'
p1052
I5
sg15
(lp1053
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1054
g16
(lp1055
S'd'
asg18
S'Y'
sS'.thisRepN'
p1056
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1057
I4
sS'.thisN'
p1058
I124
sS'.thisIndex'
p1059
I2
sg15
(lp1060
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1061
g16
(lp1062
S'k'
asg18
S'N'
sS'.thisRepN'
p1063
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1064
I5
sS'.thisN'
p1065
I125
sS'.thisIndex'
p1066
I10
sg15
(lp1067
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1068
g16
(lp1069
S'd'
asg18
S'Y'
sS'.thisRepN'
p1070
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1071
I6
sS'.thisN'
p1072
I126
sS'.thisIndex'
p1073
I13
sg15
(lp1074
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1075
g16
(lp1076
S'k'
asg18
S'Y'
sS'.thisRepN'
p1077
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1078
I7
sS'.thisN'
p1079
I127
sS'.thisIndex'
p1080
I0
sg15
(lp1081
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1082
S'space'
p1083
asg95
I0
sa(dp1084
g16
(lp1085
S'k'
asg18
S'Y'
sS'.thisRepN'
p1086
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1087
I8
sS'.thisN'
p1088
I128
sS'.thisIndex'
p1089
I7
sg15
(lp1090
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1091
S'space'
p1092
asg95
I7
sa(dp1093
g16
(lp1094
S'd'
asg18
S'N'
sS'.thisRepN'
p1095
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1096
I9
sS'.thisN'
p1097
I129
sS'.thisIndex'
p1098
I2
sg15
(lp1099
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1100
g16
(lp1101
S'k'
asg18
S'N'
sS'.thisRepN'
p1102
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1103
I10
sS'.thisN'
p1104
I130
sS'.thisIndex'
p1105
I0
sg15
(lp1106
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp1107
g16
(lp1108
S'd'
asg18
S'N'
sS'.thisRepN'
p1109
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1110
I11
sS'.thisN'
p1111
I131
sS'.thisIndex'
p1112
I6
sg15
(lp1113
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1114
g16
(lp1115
S'd'
asg18
S'Y'
sS'.thisRepN'
p1116
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1117
I12
sS'.thisN'
p1118
I132
sS'.thisIndex'
p1119
I7
sg15
(lp1120
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1121
S'space'
p1122
asg95
I7
sa(dp1123
g16
(lp1124
S'd'
asg18
S'Y'
sS'.thisRepN'
p1125
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1126
I13
sS'.thisN'
p1127
I133
sS'.thisIndex'
p1128
I11
sg15
(lp1129
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1130
S'space'
p1131
asg95
I11
sa(dp1132
g16
(lp1133
S'k'
asg18
S'N'
sS'.thisRepN'
p1134
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1135
I14
sS'.thisN'
p1136
I134
sS'.thisIndex'
p1137
I10
sg15
(lp1138
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1139
g16
(lp1140
S'k'
asg18
S'Y'
sS'.thisRepN'
p1141
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1142
I0
sS'.thisN'
p1143
I135
sS'.thisIndex'
p1144
I3
sg15
(lp1145
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1146
S'space'
p1147
asg95
I3
sa(dp1148
g16
(lp1149
S'k'
asg18
S'N'
sS'.thisRepN'
p1150
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1151
I1
sS'.thisN'
p1152
I136
sS'.thisIndex'
p1153
I10
sg15
(lp1154
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1155
g16
(lp1156
S'k'
asg18
S'N'
sS'.thisRepN'
p1157
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1158
I2
sS'.thisN'
p1159
I137
sS'.thisIndex'
p1160
I9
sg15
(lp1161
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp1162
g16
(lp1163
S'd'
asg18
S'N'
sS'.thisRepN'
p1164
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1165
I3
sS'.thisN'
p1166
I138
sS'.thisIndex'
p1167
I3
sg15
(lp1168
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1169
g16
(lp1170
S'k'
asg18
S'N'
sS'.thisRepN'
p1171
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1172
I4
sS'.thisN'
p1173
I139
sS'.thisIndex'
p1174
I9
sg15
(lp1175
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp1176
g16
(lp1177
S'k'
asg18
S'N'
sS'.thisRepN'
p1178
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1179
I5
sS'.thisN'
p1180
I140
sS'.thisIndex'
p1181
I1
sg15
(lp1182
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1183
g16
(lp1184
S'd'
asg18
S'N'
sS'.thisRepN'
p1185
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1186
I6
sS'.thisN'
p1187
I141
sS'.thisIndex'
p1188
I6
sg15
(lp1189
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp1190
g16
(lp1191
S'k'
asg18
S'Y'
sS'.thisRepN'
p1192
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1193
I7
sS'.thisN'
p1194
I142
sS'.thisIndex'
p1195
I3
sg15
(lp1196
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1197
g16
(lp1198
S'k'
asg18
S'N'
sS'.thisRepN'
p1199
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1200
I8
sS'.thisN'
p1201
I143
sS'.thisIndex'
p1202
I0
sg15
(lp1203
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1204
g16
(lp1205
S'd'
asg18
S'N'
sS'.thisRepN'
p1206
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1207
I9
sS'.thisN'
p1208
I144
sS'.thisIndex'
p1209
I1
sg15
(lp1210
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1211
g16
(lp1212
S'k'
asg18
S'N'
sS'.thisRepN'
p1213
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1214
I10
sS'.thisN'
p1215
I145
sS'.thisIndex'
p1216
I13
sg15
(lp1217
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1218
g16
(lp1219
S'd'
asg18
S'Y'
sS'.thisRepN'
p1220
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1221
I11
sS'.thisN'
p1222
I146
sS'.thisIndex'
p1223
I13
sg15
(lp1224
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1225
S'space'
p1226
asg95
I13
sa(dp1227
g16
(lp1228
S'd'
asg18
S'Y'
sS'.thisRepN'
p1229
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1230
I12
sS'.thisN'
p1231
I147
sS'.thisIndex'
p1232
I8
sg15
(lp1233
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1234
S'd'
asg95
I8
sa(dp1235
g16
(lp1236
S'd'
asg18
S'Y'
sS'.thisRepN'
p1237
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1238
I13
sS'.thisN'
p1239
I148
sS'.thisIndex'
p1240
I1
sg15
(lp1241
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1242
S'space'
p1243
asg95
I1
sa(dp1244
g16
(lp1245
S'd'
asg18
S'N'
sg22
I39
sS'.thisN'
p1246
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1247
I14
sS'.thisRepN'
p1248
I9
sg21
I33
sS'.thisIndex'
p1249
I6
sg23
I17
sg15
(lp1250
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp1251
g16
(lp1252
S'k'
asg95
I1
sS'.thisRepN'
p1253
I10
sg30
VF
sg31
g32
sS'.thisTrialN'
p1254
I0
sS'.thisN'
p1255
I150
sS'.thisIndex'
p1256
I1
sg15
(lp1257
S'k'
asg17
S'Y'
sg14
I4
sa(dp1258
g16
(lp1259
S'k'
asg95
I9
sS'.thisRepN'
p1260
I10
sg30
VF
sg31
g32
sS'.thisTrialN'
p1261
I1
sS'.thisN'
p1262
I151
sS'.thisIndex'
p1263
I9
sg15
(lp1264
S'k'
asg17
S'Y'
sg14
I4
sa(dp1265
g16
(lp1266
S'd'
asg18
S'Y'
sS'.thisRepN'
p1267
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1268
I2
sS'.thisN'
p1269
I152
sS'.thisIndex'
p1270
I11
sg15
(lp1271
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1272
g16
(lp1273
S'k'
asg18
S'Y'
sS'.thisRepN'
p1274
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1275
I3
sS'.thisN'
p1276
I153
sS'.thisIndex'
p1277
I10
sg15
(lp1278
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1279
S'space'
p1280
asg95
I10
sa(dp1281
g16
(lp1282
S'd'
asg18
S'Y'
sS'.thisRepN'
p1283
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1284
I4
sS'.thisN'
p1285
I154
sS'.thisIndex'
p1286
I2
sg15
(lp1287
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1288
g16
(lp1289
S'k'
asg18
S'N'
sS'.thisRepN'
p1290
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1291
I5
sS'.thisN'
p1292
I155
sS'.thisIndex'
p1293
I13
sg15
(lp1294
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1295
g16
(lp1296
S'k'
asg18
S'Y'
sS'.thisRepN'
p1297
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1298
I6
sS'.thisN'
p1299
I156
sS'.thisIndex'
p1300
I2
sg15
(lp1301
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1302
S'space'
p1303
asg95
I2
sa(dp1304
g16
(lp1305
S'k'
asg18
S'N'
sS'.thisRepN'
p1306
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1307
I7
sS'.thisN'
p1308
I157
sS'.thisIndex'
p1309
I1
sg15
(lp1310
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1311
S'space'
p1312
asg95
I1
sa(dp1313
g16
(lp1314
S'd'
asg18
S'Y'
sS'.thisRepN'
p1315
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1316
I8
sS'.thisN'
p1317
I158
sS'.thisIndex'
p1318
I1
sg15
(lp1319
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1320
g16
(lp1321
S'k'
asg18
S'Y'
sS'.thisRepN'
p1322
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1323
I9
sS'.thisN'
p1324
I159
sS'.thisIndex'
p1325
I2
sg15
(lp1326
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1327
g16
(lp1328
S'k'
asg18
S'N'
sS'.thisRepN'
p1329
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1330
I10
sS'.thisN'
p1331
I160
sS'.thisIndex'
p1332
I9
sg15
(lp1333
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1334
g16
(lp1335
S'k'
asg18
S'Y'
sS'.thisRepN'
p1336
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1337
I11
sS'.thisN'
p1338
I161
sS'.thisIndex'
p1339
I8
sg15
(lp1340
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1341
S'space'
p1342
asg95
I8
sa(dp1343
g16
(lp1344
S'k'
asg18
S'N'
sS'.thisRepN'
p1345
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1346
I12
sS'.thisN'
p1347
I162
sS'.thisIndex'
p1348
I10
sg15
(lp1349
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1350
g16
(lp1351
S'd'
asg18
S'Y'
sS'.thisRepN'
p1352
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1353
I13
sS'.thisN'
p1354
I163
sS'.thisIndex'
p1355
I9
sg15
(lp1356
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1357
S'space'
p1358
asg95
I9
sa(dp1359
g16
(lp1360
S'd'
asg18
S'N'
sS'.thisRepN'
p1361
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1362
I14
sS'.thisN'
p1363
I164
sS'.thisIndex'
p1364
I7
sg15
(lp1365
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1366
g16
(lp1367
S'd'
asg18
S'N'
sS'.thisRepN'
p1368
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1369
I0
sS'.thisN'
p1370
I165
sS'.thisIndex'
p1371
I5
sg15
(lp1372
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I5
sa(dp1373
g16
(lp1374
S'k'
asg18
S'Y'
sS'.thisRepN'
p1375
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1376
I1
sS'.thisN'
p1377
I166
sS'.thisIndex'
p1378
I0
sg15
(lp1379
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1380
S'space'
p1381
asg95
I0
sa(dp1382
g16
(lp1383
S'd'
asg18
S'Y'
sS'.thisRepN'
p1384
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1385
I2
sS'.thisN'
p1386
I167
sS'.thisIndex'
p1387
I3
sg15
(lp1388
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1389
S'd'
asg95
I3
sa(dp1390
g16
(lp1391
S'd'
asg18
S'Y'
sS'.thisRepN'
p1392
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1393
I3
sS'.thisN'
p1394
I168
sS'.thisIndex'
p1395
I4
sg15
(lp1396
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1397
S'space'
p1398
asg95
I4
sa(dp1399
g16
(lp1400
S'd'
asg18
S'N'
sS'.thisRepN'
p1401
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1402
I4
sS'.thisN'
p1403
I169
sS'.thisIndex'
p1404
I11
sg15
(lp1405
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I11
sa(dp1406
g16
(lp1407
S'd'
asg18
S'Y'
sS'.thisRepN'
p1408
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1409
I5
sS'.thisN'
p1410
I170
sS'.thisIndex'
p1411
I7
sg15
(lp1412
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1413
S'space'
p1414
asg95
I7
sa(dp1415
g16
(lp1416
S'd'
asg18
S'Y'
sS'.thisRepN'
p1417
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1418
I6
sS'.thisN'
p1419
I171
sS'.thisIndex'
p1420
I8
sg15
(lp1421
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1422
g16
(lp1423
S'k'
asg18
S'N'
sS'.thisRepN'
p1424
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1425
I7
sS'.thisN'
p1426
I172
sS'.thisIndex'
p1427
I11
sg15
(lp1428
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1429
g16
(lp1430
S'k'
asg18
S'Y'
sS'.thisRepN'
p1431
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1432
I8
sS'.thisN'
p1433
I173
sS'.thisIndex'
p1434
I4
sg15
(lp1435
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1436
g16
(lp1437
S'k'
asg18
S'Y'
sS'.thisRepN'
p1438
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1439
I9
sS'.thisN'
p1440
I174
sS'.thisIndex'
p1441
I13
sg15
(lp1442
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1443
S'space'
p1444
asg95
I13
sa(dp1445
g16
(lp1446
S'k'
asg18
S'N'
sS'.thisRepN'
p1447
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1448
I10
sS'.thisN'
p1449
I175
sS'.thisIndex'
p1450
I6
sg15
(lp1451
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1452
g16
(lp1453
S'k'
asg18
S'Y'
sS'.thisRepN'
p1454
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1455
I11
sS'.thisN'
p1456
I176
sS'.thisIndex'
p1457
I7
sg15
(lp1458
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1459
S'space'
p1460
asg95
I7
sa(dp1461
g16
(lp1462
S'k'
asg18
S'N'
sS'.thisRepN'
p1463
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1464
I12
sS'.thisN'
p1465
I177
sS'.thisIndex'
p1466
I8
sg15
(lp1467
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1468
g16
(lp1469
S'k'
asg18
S'N'
sS'.thisRepN'
p1470
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1471
I13
sS'.thisN'
p1472
I178
sS'.thisIndex'
p1473
I14
sg15
(lp1474
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I14
sa(dp1475
g16
(lp1476
S'd'
asg18
S'Y'
sS'.thisRepN'
p1477
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1478
I14
sS'.thisN'
p1479
I179
sS'.thisIndex'
p1480
I8
sg15
(lp1481
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1482
S'space'
p1483
asg95
I8
sa(dp1484
g16
(lp1485
S'd'
asg18
S'N'
sS'.thisRepN'
p1486
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1487
I0
sS'.thisN'
p1488
I180
sS'.thisIndex'
p1489
I5
sg15
(lp1490
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1491
S'space'
p1492
asg95
I5
sa(dp1493
g16
(lp1494
S'k'
asg18
S'Y'
sS'.thisRepN'
p1495
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1496
I1
sS'.thisN'
p1497
I181
sS'.thisIndex'
p1498
I3
sg15
(lp1499
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1500
S'space'
p1501
asg95
I3
sa(dp1502
g16
(lp1503
S'k'
asg18
S'N'
sS'.thisRepN'
p1504
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1505
I2
sS'.thisN'
p1506
I182
sS'.thisIndex'
p1507
I5
sg15
(lp1508
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1509
g16
(lp1510
S'd'
asg18
S'Y'
sS'.thisRepN'
p1511
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1512
I3
sS'.thisN'
p1513
I183
sS'.thisIndex'
p1514
I7
sg15
(lp1515
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1516
S'space'
p1517
asg95
I7
sa(dp1518
g16
(lp1519
S'k'
asg18
S'Y'
sS'.thisRepN'
p1520
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1521
I4
sS'.thisN'
p1522
I184
sS'.thisIndex'
p1523
I4
sg15
(lp1524
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1525
S'space'
p1526
asg95
I4
sa(dp1527
g16
(lp1528
S'd'
asg18
S'N'
sS'.thisRepN'
p1529
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1530
I5
sS'.thisN'
p1531
I185
sS'.thisIndex'
p1532
I9
sg15
(lp1533
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1534
g16
(lp1535
S'k'
asg18
S'N'
sS'.thisRepN'
p1536
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1537
I6
sS'.thisN'
p1538
I186
sS'.thisIndex'
p1539
I8
sg15
(lp1540
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1541
g16
(lp1542
S'k'
asg18
S'Y'
sS'.thisRepN'
p1543
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1544
I7
sS'.thisN'
p1545
I187
sS'.thisIndex'
p1546
I2
sg15
(lp1547
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1548
S'space'
p1549
asg95
I2
sa(dp1550
g16
(lp1551
S'd'
asg18
S'Y'
sS'.thisRepN'
p1552
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1553
I8
sS'.thisN'
p1554
I188
sS'.thisIndex'
p1555
I4
sg15
(lp1556
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I4
sa(dp1557
g16
(lp1558
S'd'
asg18
S'Y'
sS'.thisRepN'
p1559
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1560
I9
sS'.thisN'
p1561
I189
sS'.thisIndex'
p1562
I12
sg15
(lp1563
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1564
S'space'
p1565
asg95
I12
sa(dp1566
g16
(lp1567
S'k'
asg18
S'Y'
sS'.thisRepN'
p1568
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1569
I10
sS'.thisN'
p1570
I190
sS'.thisIndex'
p1571
I6
sg15
(lp1572
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1573
S'space'
p1574
asg95
I6
sa(dp1575
g16
(lp1576
S'd'
asg18
S'N'
sS'.thisRepN'
p1577
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1578
I11
sS'.thisN'
p1579
I191
sS'.thisIndex'
p1580
I13
sg15
(lp1581
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1582
g16
(lp1583
S'd'
asg18
S'N'
sS'.thisRepN'
p1584
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1585
I12
sS'.thisN'
p1586
I192
sS'.thisIndex'
p1587
I3
sg15
(lp1588
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I3
sa(dp1589
g16
(lp1590
S'k'
asg18
S'N'
sS'.thisRepN'
p1591
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1592
I13
sS'.thisN'
p1593
I193
sS'.thisIndex'
p1594
I0
sg15
(lp1595
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1596
g16
(lp1597
S'k'
asg18
S'N'
sS'.thisRepN'
p1598
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1599
I14
sS'.thisN'
p1600
I194
sS'.thisIndex'
p1601
I5
sg15
(lp1602
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1603
g16
(lp1604
S'd'
asg18
S'N'
sS'.thisRepN'
p1605
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1606
I0
sS'.thisN'
p1607
I195
sS'.thisIndex'
p1608
I10
sg15
(lp1609
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1610
g16
(lp1611
S'd'
asg18
S'Y'
sS'.thisRepN'
p1612
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1613
I1
sS'.thisN'
p1614
I196
sS'.thisIndex'
p1615
I10
sg15
(lp1616
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1617
S'space'
p1618
asg95
I10
sa(dp1619
g16
(lp1620
S'd'
asg18
S'N'
sS'.thisRepN'
p1621
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1622
I2
sS'.thisN'
p1623
I197
sS'.thisIndex'
p1624
I4
sg15
(lp1625
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1626
g16
(lp1627
S'd'
asg18
S'N'
sS'.thisRepN'
p1628
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1629
I3
sS'.thisN'
p1630
I198
sS'.thisIndex'
p1631
I4
sg15
(lp1632
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1633
g16
(lp1634
S'd'
asg18
S'N'
sg22
I38
sS'.thisN'
p1635
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1636
I4
sS'.thisRepN'
p1637
I13
sg21
I43
sS'.thisIndex'
p1638
I11
sg23
I25
sg15
(lp1639
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1640
g16
(lp1641
S'k'
asg95
I12
sS'.thisRepN'
p1642
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1643
I5
sS'.thisN'
p1644
I200
sS'.thisIndex'
p1645
I12
sg15
(lp1646
S'k'
asg17
S'Y'
sg14
I5
sa(dp1647
g16
(lp1648
S'k'
asg95
I6
sS'.thisRepN'
p1649
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1650
I6
sS'.thisN'
p1651
I201
sS'.thisIndex'
p1652
I6
sg15
(lp1653
S'k'
asg17
S'Y'
sg14
I5
sa(dp1654
g16
(lp1655
S'd'
asg18
S'Y'
sS'.thisRepN'
p1656
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1657
I7
sS'.thisN'
p1658
I202
sS'.thisIndex'
p1659
I3
sg15
(lp1660
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1661
S'space'
p1662
asg95
I3
sa(dp1663
g16
(lp1664
S'k'
asg18
S'N'
sS'.thisRepN'
p1665
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1666
I8
sS'.thisN'
p1667
I203
sS'.thisIndex'
p1668
I11
sg15
(lp1669
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I11
sa(dp1670
g16
(lp1671
S'd'
asg18
S'N'
sS'.thisRepN'
p1672
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1673
I9
sS'.thisN'
p1674
I204
sS'.thisIndex'
p1675
I0
sg15
(lp1676
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1677
g16
(lp1678
S'k'
asg18
S'N'
sS'.thisRepN'
p1679
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1680
I10
sS'.thisN'
p1681
I205
sS'.thisIndex'
p1682
I3
sg15
(lp1683
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1684
g16
(lp1685
S'd'
asg18
S'Y'
sS'.thisRepN'
p1686
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1687
I11
sS'.thisN'
p1688
I206
sS'.thisIndex'
p1689
I4
sg15
(lp1690
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1691
g16
(lp1692
S'd'
asg18
S'Y'
sS'.thisRepN'
p1693
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1694
I12
sS'.thisN'
p1695
I207
sS'.thisIndex'
p1696
I4
sg15
(lp1697
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1698
g16
(lp1699
S'd'
asg18
S'N'
sS'.thisRepN'
p1700
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1701
I13
sS'.thisN'
p1702
I208
sS'.thisIndex'
p1703
I14
sg15
(lp1704
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I14
sa(dp1705
g16
(lp1706
S'k'
asg18
S'N'
sS'.thisRepN'
p1707
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1708
I14
sS'.thisN'
p1709
I209
sS'.thisIndex'
p1710
I10
sg15
(lp1711
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1712
g16
(lp1713
S'k'
asg18
S'Y'
sS'.thisRepN'
p1714
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1715
I0
sS'.thisN'
p1716
I210
sS'.thisIndex'
p1717
I11
sg15
(lp1718
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I11
sa(dp1719
g16
(lp1720
S'k'
asg18
S'N'
sS'.thisRepN'
p1721
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1722
I1
sS'.thisN'
p1723
I211
sS'.thisIndex'
p1724
I6
sg15
(lp1725
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1726
g16
(lp1727
S'd'
asg18
S'Y'
sS'.thisRepN'
p1728
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1729
I2
sS'.thisN'
p1730
I212
sS'.thisIndex'
p1731
I5
sg15
(lp1732
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1733
S'k'
asg95
I5
sa(dp1734
g16
(lp1735
S'k'
asg18
S'Y'
sS'.thisRepN'
p1736
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1737
I3
sS'.thisN'
p1738
I213
sS'.thisIndex'
p1739
I1
sg15
(lp1740
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1741
S'space'
p1742
asg95
I1
sa(dp1743
g16
(lp1744
S'k'
asg18
S'Y'
sS'.thisRepN'
p1745
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1746
I4
sS'.thisN'
p1747
I214
sS'.thisIndex'
p1748
I5
sg15
(lp1749
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp1750
g16
(lp1751
S'k'
asg18
S'N'
sS'.thisRepN'
p1752
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1753
I5
sS'.thisN'
p1754
I215
sS'.thisIndex'
p1755
I10
sg15
(lp1756
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1757
S'space'
p1758
asg95
I10
sa(dp1759
g16
(lp1760
S'k'
asg18
S'N'
sS'.thisRepN'
p1761
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1762
I6
sS'.thisN'
p1763
I216
sS'.thisIndex'
p1764
I10
sg15
(lp1765
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1766
g16
(lp1767
S'k'
asg18
S'Y'
sS'.thisRepN'
p1768
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1769
I7
sS'.thisN'
p1770
I217
sS'.thisIndex'
p1771
I10
sg15
(lp1772
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1773
S'space'
p1774
asg95
I10
sa(dp1775
g16
(lp1776
S'd'
asg18
S'N'
sS'.thisRepN'
p1777
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1778
I8
sS'.thisN'
p1779
I218
sS'.thisIndex'
p1780
I0
sg15
(lp1781
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1782
g16
(lp1783
S'k'
asg18
S'N'
sS'.thisRepN'
p1784
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1785
I9
sS'.thisN'
p1786
I219
sS'.thisIndex'
p1787
I13
sg15
(lp1788
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1789
g16
(lp1790
S'k'
asg18
S'N'
sS'.thisRepN'
p1791
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1792
I10
sS'.thisN'
p1793
I220
sS'.thisIndex'
p1794
I14
sg15
(lp1795
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1796
g16
(lp1797
S'd'
asg18
S'Y'
sS'.thisRepN'
p1798
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1799
I11
sS'.thisN'
p1800
I221
sS'.thisIndex'
p1801
I7
sg15
(lp1802
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1803
g16
(lp1804
S'k'
asg18
S'N'
sS'.thisRepN'
p1805
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1806
I12
sS'.thisN'
p1807
I222
sS'.thisIndex'
p1808
I3
sg15
(lp1809
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1810
g16
(lp1811
S'd'
asg18
S'Y'
sS'.thisRepN'
p1812
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1813
I13
sS'.thisN'
p1814
I223
sS'.thisIndex'
p1815
I9
sg15
(lp1816
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1817
S'space'
p1818
asg95
I9
sa(dp1819
g16
(lp1820
S'k'
asg18
S'Y'
sS'.thisRepN'
p1821
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1822
I14
sS'.thisN'
p1823
I224
sS'.thisIndex'
p1824
I12
sg15
(lp1825
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1826
S'space'
p1827
asg95
I12
sa(dp1828
g16
(lp1829
S'd'
asg18
S'N'
sS'.thisRepN'
p1830
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1831
I0
sS'.thisN'
p1832
I225
sS'.thisIndex'
p1833
I6
sg15
(lp1834
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1835
g16
(lp1836
S'd'
asg18
S'N'
sS'.thisRepN'
p1837
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1838
I1
sS'.thisN'
p1839
I226
sS'.thisIndex'
p1840
I5
sg15
(lp1841
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1842
S'space'
p1843
asg95
I5
sa(dp1844
g16
(lp1845
S'd'
asg18
S'Y'
sS'.thisRepN'
p1846
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1847
I2
sS'.thisN'
p1848
I227
sS'.thisIndex'
p1849
I12
sg15
(lp1850
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1851
S'k'
asg95
I12
sa(dp1852
g16
(lp1853
S'k'
asg18
S'N'
sS'.thisRepN'
p1854
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1855
I3
sS'.thisN'
p1856
I228
sS'.thisIndex'
p1857
I13
sg15
(lp1858
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1859
S'd'
asg95
I13
sa(dp1860
g16
(lp1861
S'd'
asg18
S'N'
sS'.thisRepN'
p1862
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1863
I4
sS'.thisN'
p1864
I229
sS'.thisIndex'
p1865
I8
sg15
(lp1866
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1867
S'space'
p1868
asg95
I8
sa(dp1869
g16
(lp1870
S'k'
asg18
S'N'
sS'.thisRepN'
p1871
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1872
I5
sS'.thisN'
p1873
I230
sS'.thisIndex'
p1874
I2
sg15
(lp1875
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1876
g16
(lp1877
S'd'
asg18
S'Y'
sS'.thisRepN'
p1878
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1879
I6
sS'.thisN'
p1880
I231
sS'.thisIndex'
p1881
I11
sg15
(lp1882
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I11
sa(dp1883
g16
(lp1884
S'd'
asg18
S'Y'
sS'.thisRepN'
p1885
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1886
I7
sS'.thisN'
p1887
I232
sS'.thisIndex'
p1888
I3
sg15
(lp1889
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1890
S'space'
p1891
asg95
I3
sa(dp1892
g16
(lp1893
S'd'
asg18
S'Y'
sS'.thisRepN'
p1894
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1895
I8
sS'.thisN'
p1896
I233
sS'.thisIndex'
p1897
I14
sg15
(lp1898
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1899
S'd'
asg95
I14
sa(dp1900
g16
(lp1901
S'd'
asg18
S'N'
sS'.thisRepN'
p1902
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1903
I9
sS'.thisN'
p1904
I234
sS'.thisIndex'
p1905
I10
sg15
(lp1906
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1907
g16
(lp1908
S'd'
asg18
S'Y'
sS'.thisRepN'
p1909
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1910
I10
sS'.thisN'
p1911
I235
sS'.thisIndex'
p1912
I3
sg15
(lp1913
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1914
S'space'
p1915
asg95
I3
sa(dp1916
g16
(lp1917
S'd'
asg18
S'Y'
sS'.thisRepN'
p1918
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1919
I11
sS'.thisN'
p1920
I236
sS'.thisIndex'
p1921
I4
sg15
(lp1922
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1923
S'space'
p1924
asg95
I4
sa(dp1925
g16
(lp1926
S'd'
asg18
S'Y'
sS'.thisRepN'
p1927
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1928
I12
sS'.thisN'
p1929
I237
sS'.thisIndex'
p1930
I6
sg15
(lp1931
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1932
S'space'
p1933
asg95
I6
sa(dp1934
g16
(lp1935
S'k'
asg18
S'N'
sS'.thisRepN'
p1936
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1937
I13
sS'.thisN'
p1938
I238
sS'.thisIndex'
p1939
I6
sg15
(lp1940
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1941
g16
(lp1942
S'd'
asg18
S'N'
sS'.thisRepN'
p1943
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1944
I14
sS'.thisN'
p1945
I239
sS'.thisIndex'
p1946
I11
sg15
(lp1947
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I11
sa(dp1948
g16
(lp1949
S'k'
asg18
S'Y'
sS'.thisRepN'
p1950
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1951
I0
sS'.thisN'
p1952
I240
sS'.thisIndex'
p1953
I8
sg15
(lp1954
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1955
S'space'
p1956
asg95
I8
sa(dp1957
g16
(lp1958
S'd'
asg18
S'Y'
sS'.thisRepN'
p1959
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1960
I1
sS'.thisN'
p1961
I241
sS'.thisIndex'
p1962
I8
sg15
(lp1963
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1964
S'space'
p1965
asg95
I8
sa(dp1966
g16
(lp1967
S'd'
asg18
S'N'
sS'.thisRepN'
p1968
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1969
I2
sS'.thisN'
p1970
I242
sS'.thisIndex'
p1971
I5
sg15
(lp1972
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1973
S'k'
asg95
I5
sa(dp1974
g16
(lp1975
S'k'
asg18
S'N'
sS'.thisRepN'
p1976
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1977
I3
sS'.thisN'
p1978
I243
sS'.thisIndex'
p1979
I2
sg15
(lp1980
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1981
g16
(lp1982
S'd'
asg18
S'Y'
sS'.thisRepN'
p1983
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1984
I4
sS'.thisN'
p1985
I244
sS'.thisIndex'
p1986
I10
sg15
(lp1987
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1988
g16
(lp1989
S'k'
asg18
S'N'
sS'.thisRepN'
p1990
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1991
I5
sS'.thisN'
p1992
I245
sS'.thisIndex'
p1993
I0
sg15
(lp1994
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1995
g16
(lp1996
S'd'
asg18
S'N'
sS'.thisRepN'
p1997
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1998
I6
sS'.thisN'
p1999
I246
sS'.thisIndex'
p2000
I6
sg15
(lp2001
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I6
sa(dp2002
g16
(lp2003
S'k'
asg18
S'N'
sS'.thisRepN'
p2004
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2005
I7
sS'.thisN'
p2006
I247
sS'.thisIndex'
p2007
I3
sg15
(lp2008
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp2009
g16
(lp2010
S'd'
asg18
S'N'
sS'.thisRepN'
p2011
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2012
I8
sS'.thisN'
p2013
I248
sS'.thisIndex'
p2014
I9
sg15
(lp2015
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp2016
g16
(lp2017
S'd'
asg18
S'Y'
sg22
I33
sS'.thisN'
p2018
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2019
I9
sS'.thisRepN'
p2020
I16
sg21
I41
sS'.thisIndex'
p2021
I5
sg23
I22
sg15
(lp2022
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp2023
S'space'
p2024
asg95
I5
sa(dp2025
g16
(lp2026
S'd'
asg95
I12
sS'.thisRepN'
p2027
I16
sg30
VF
sg31
g32
sS'.thisTrialN'
p2028
I10
sS'.thisN'
p2029
I250
sS'.thisIndex'
p2030
I12
sg15
(lp2031
S'k'
asg17
S'N'
sg14
I6
sa(dp2032
g16
(lp2033
S'k'
asg95
I1
sS'.thisRepN'
p2034
I16
sg30
VF
sg31
g32
sS'.thisTrialN'
p2035
I11
sS'.thisN'
p2036
I251
sS'.thisIndex'
p2037
I1
sg15
(lp2038
S'k'
asg17
S'Y'
sg14
I6
sa(dp2039
g16
(lp2040
S'd'
asg18
S'N'
sS'.thisRepN'
p2041
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2042
I12
sS'.thisN'
p2043
I252
sS'.thisIndex'
p2044
I12
sg15
(lp2045
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2046
g16
(lp2047
S'k'
asg18
S'N'
sS'.thisRepN'
p2048
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2049
I13
sS'.thisN'
p2050
I253
sS'.thisIndex'
p2051
I4
sg15
(lp2052
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2053
g16
(lp2054
S'd'
asg18
S'N'
sS'.thisRepN'
p2055
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2056
I14
sS'.thisN'
p2057
I254
sS'.thisIndex'
p2058
I11
sg15
(lp2059
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2060
S'space'
p2061
asg95
I11
sa(dp2062
g16
(lp2063
S'd'
asg18
S'Y'
sS'.thisRepN'
p2064
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2065
I0
sS'.thisN'
p2066
I255
sS'.thisIndex'
p2067
I0
sg15
(lp2068
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2069
S'space'
p2070
asg95
I0
sa(dp2071
g16
(lp2072
S'k'
asg18
S'Y'
sS'.thisRepN'
p2073
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2074
I1
sS'.thisN'
p2075
I256
sS'.thisIndex'
p2076
I2
sg15
(lp2077
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2078
g16
(lp2079
S'd'
asg18
S'Y'
sS'.thisRepN'
p2080
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2081
I2
sS'.thisN'
p2082
I257
sS'.thisIndex'
p2083
I14
sg15
(lp2084
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2085
S'space'
p2086
asg95
I14
sa(dp2087
g16
(lp2088
S'k'
asg18
S'N'
sS'.thisRepN'
p2089
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2090
I3
sS'.thisN'
p2091
I258
sS'.thisIndex'
p2092
I13
sg15
(lp2093
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2094
g16
(lp2095
S'd'
asg18
S'Y'
sS'.thisRepN'
p2096
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2097
I4
sS'.thisN'
p2098
I259
sS'.thisIndex'
p2099
I10
sg15
(lp2100
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2101
S'space'
p2102
asg95
I10
sa(dp2103
g16
(lp2104
S'k'
asg18
S'Y'
sS'.thisRepN'
p2105
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2106
I5
sS'.thisN'
p2107
I260
sS'.thisIndex'
p2108
I0
sg15
(lp2109
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2110
S'space'
p2111
asg95
I0
sa(dp2112
g16
(lp2113
S'd'
asg18
S'Y'
sS'.thisRepN'
p2114
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2115
I6
sS'.thisN'
p2116
I261
sS'.thisIndex'
p2117
I8
sg15
(lp2118
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2119
S'space'
p2120
asg95
I8
sa(dp2121
g16
(lp2122
S'k'
asg18
S'Y'
sS'.thisRepN'
p2123
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2124
I7
sS'.thisN'
p2125
I262
sS'.thisIndex'
p2126
I4
sg15
(lp2127
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2128
S'space'
p2129
asg95
I4
sa(dp2130
g16
(lp2131
S'k'
asg18
S'Y'
sS'.thisRepN'
p2132
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2133
I8
sS'.thisN'
p2134
I263
sS'.thisIndex'
p2135
I11
sg15
(lp2136
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2137
S'space'
p2138
asg95
I11
sa(dp2139
g16
(lp2140
S'k'
asg18
S'Y'
sS'.thisRepN'
p2141
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2142
I9
sS'.thisN'
p2143
I264
sS'.thisIndex'
p2144
I9
sg15
(lp2145
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2146
S'space'
p2147
asg95
I9
sa(dp2148
g16
(lp2149
S'd'
asg18
S'Y'
sS'.thisRepN'
p2150
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2151
I10
sS'.thisN'
p2152
I265
sS'.thisIndex'
p2153
I6
sg15
(lp2154
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2155
g16
(lp2156
S'd'
asg18
S'N'
sS'.thisRepN'
p2157
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2158
I11
sS'.thisN'
p2159
I266
sS'.thisIndex'
p2160
I2
sg15
(lp2161
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2162
g16
(lp2163
S'k'
asg18
S'Y'
sS'.thisRepN'
p2164
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2165
I12
sS'.thisN'
p2166
I267
sS'.thisIndex'
p2167
I10
sg15
(lp2168
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2169
S'k'
asg95
I10
sa(dp2170
g16
(lp2171
S'k'
asg18
S'Y'
sS'.thisRepN'
p2172
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2173
I13
sS'.thisN'
p2174
I268
sS'.thisIndex'
p2175
I3
sg15
(lp2176
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2177
S'space'
p2178
asg95
I3
sa(dp2179
g16
(lp2180
S'd'
asg18
S'Y'
sS'.thisRepN'
p2181
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2182
I14
sS'.thisN'
p2183
I269
sS'.thisIndex'
p2184
I11
sg15
(lp2185
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2186
S'space'
p2187
asg95
I11
sa(dp2188
g16
(lp2189
S'd'
asg18
S'Y'
sS'.thisRepN'
p2190
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2191
I0
sS'.thisN'
p2192
I270
sS'.thisIndex'
p2193
I11
sg15
(lp2194
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2195
S'space'
p2196
asg95
I11
sa(dp2197
g16
(lp2198
S'd'
asg18
S'N'
sS'.thisRepN'
p2199
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2200
I1
sS'.thisN'
p2201
I271
sS'.thisIndex'
p2202
I11
sg15
(lp2203
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2204
g16
(lp2205
S'd'
asg18
S'N'
sS'.thisRepN'
p2206
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2207
I2
sS'.thisN'
p2208
I272
sS'.thisIndex'
p2209
I14
sg15
(lp2210
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I14
sa(dp2211
g16
(lp2212
S'k'
asg18
S'N'
sS'.thisRepN'
p2213
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2214
I3
sS'.thisN'
p2215
I273
sS'.thisIndex'
p2216
I12
sg15
(lp2217
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2218
S'space'
p2219
asg95
I12
sa(dp2220
g16
(lp2221
S'k'
asg18
S'N'
sS'.thisRepN'
p2222
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2223
I4
sS'.thisN'
p2224
I274
sS'.thisIndex'
p2225
I7
sg15
(lp2226
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2227
g16
(lp2228
S'd'
asg18
S'Y'
sS'.thisRepN'
p2229
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2230
I5
sS'.thisN'
p2231
I275
sS'.thisIndex'
p2232
I10
sg15
(lp2233
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2234
S'space'
p2235
asg95
I10
sa(dp2236
g16
(lp2237
S'd'
asg18
S'Y'
sS'.thisRepN'
p2238
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2239
I6
sS'.thisN'
p2240
I276
sS'.thisIndex'
p2241
I0
sg15
(lp2242
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2243
S'space'
p2244
asg95
I0
sa(dp2245
g16
(lp2246
S'd'
asg18
S'N'
sS'.thisRepN'
p2247
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2248
I7
sS'.thisN'
p2249
I277
sS'.thisIndex'
p2250
I6
sg15
(lp2251
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I6
sa(dp2252
g16
(lp2253
S'd'
asg18
S'N'
sS'.thisRepN'
p2254
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2255
I8
sS'.thisN'
p2256
I278
sS'.thisIndex'
p2257
I11
sg15
(lp2258
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I11
sa(dp2259
g16
(lp2260
S'k'
asg18
S'Y'
sS'.thisRepN'
p2261
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2262
I9
sS'.thisN'
p2263
I279
sS'.thisIndex'
p2264
I12
sg15
(lp2265
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2266
S'space'
p2267
asg95
I12
sa(dp2268
g16
(lp2269
S'd'
asg18
S'N'
sS'.thisRepN'
p2270
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2271
I10
sS'.thisN'
p2272
I280
sS'.thisIndex'
p2273
I10
sg15
(lp2274
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2275
g16
(lp2276
S'k'
asg18
S'N'
sS'.thisRepN'
p2277
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2278
I11
sS'.thisN'
p2279
I281
sS'.thisIndex'
p2280
I5
sg15
(lp2281
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2282
g16
(lp2283
S'k'
asg18
S'N'
sS'.thisRepN'
p2284
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2285
I12
sS'.thisN'
p2286
I282
sS'.thisIndex'
p2287
I10
sg15
(lp2288
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2289
S'space'
p2290
asg95
I10
sa(dp2291
g16
(lp2292
S'd'
asg18
S'Y'
sS'.thisRepN'
p2293
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2294
I13
sS'.thisN'
p2295
I283
sS'.thisIndex'
p2296
I8
sg15
(lp2297
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2298
S'k'
asg95
I8
sa(dp2299
g16
(lp2300
S'k'
asg18
S'Y'
sS'.thisRepN'
p2301
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2302
I14
sS'.thisN'
p2303
I284
sS'.thisIndex'
p2304
I13
sg15
(lp2305
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2306
S'k'
asg95
I13
sa(dp2307
g16
(lp2308
S'k'
asg18
S'N'
sS'.thisRepN'
p2309
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2310
I0
sS'.thisN'
p2311
I285
sS'.thisIndex'
p2312
I11
sg15
(lp2313
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2314
S'space'
p2315
asg95
I11
sa(dp2316
g16
(lp2317
S'k'
asg18
S'N'
sS'.thisRepN'
p2318
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2319
I1
sS'.thisN'
p2320
I286
sS'.thisIndex'
p2321
I10
sg15
(lp2322
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2323
g16
(lp2324
S'd'
asg18
S'N'
sS'.thisRepN'
p2325
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2326
I2
sS'.thisN'
p2327
I287
sS'.thisIndex'
p2328
I1
sg15
(lp2329
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2330
g16
(lp2331
S'k'
asg18
S'Y'
sS'.thisRepN'
p2332
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2333
I3
sS'.thisN'
p2334
I288
sS'.thisIndex'
p2335
I7
sg15
(lp2336
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2337
S'space'
p2338
asg95
I7
sa(dp2339
g16
(lp2340
S'd'
asg18
S'N'
sS'.thisRepN'
p2341
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2342
I4
sS'.thisN'
p2343
I289
sS'.thisIndex'
p2344
I0
sg15
(lp2345
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I0
sa(dp2346
g16
(lp2347
S'k'
asg18
S'Y'
sS'.thisRepN'
p2348
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2349
I5
sS'.thisN'
p2350
I290
sS'.thisIndex'
p2351
I0
sg15
(lp2352
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2353
S'space'
p2354
asg95
I0
sa(dp2355
g16
(lp2356
S'k'
asg18
S'Y'
sS'.thisRepN'
p2357
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2358
I6
sS'.thisN'
p2359
I291
sS'.thisIndex'
p2360
I1
sg15
(lp2361
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2362
S'space'
p2363
asg95
I1
sa(dp2364
g16
(lp2365
S'k'
asg18
S'Y'
sS'.thisRepN'
p2366
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2367
I7
sS'.thisN'
p2368
I292
sS'.thisIndex'
p2369
I0
sg15
(lp2370
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2371
S'space'
p2372
asg95
I0
sa(dp2373
g16
(lp2374
S'd'
asg18
S'N'
sS'.thisRepN'
p2375
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2376
I8
sS'.thisN'
p2377
I293
sS'.thisIndex'
p2378
I9
sg15
(lp2379
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2380
g16
(lp2381
S'k'
asg18
S'N'
sS'.thisRepN'
p2382
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2383
I9
sS'.thisN'
p2384
I294
sS'.thisIndex'
p2385
I9
sg15
(lp2386
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2387
S'space'
p2388
asg95
I9
sa(dp2389
g16
(lp2390
S'd'
asg18
S'Y'
sS'.thisRepN'
p2391
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2392
I10
sS'.thisN'
p2393
I295
sS'.thisIndex'
p2394
I1
sg15
(lp2395
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2396
S'space'
p2397
asg95
I1
sa(dp2398
g16
(lp2399
S'k'
asg18
S'Y'
sS'.thisRepN'
p2400
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2401
I11
sS'.thisN'
p2402
I296
sS'.thisIndex'
p2403
I2
sg15
(lp2404
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2405
g16
(lp2406
S'd'
asg18
S'N'
sS'.thisRepN'
p2407
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2408
I12
sS'.thisN'
p2409
I297
sS'.thisIndex'
p2410
I6
sg15
(lp2411
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I6
sa(dp2412
g16
(lp2413
S'k'
asg18
S'N'
sS'.thisRepN'
p2414
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2415
I13
sS'.thisN'
p2416
I298
sS'.thisIndex'
p2417
I9
sg15
(lp2418
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2419
g16
(lp2420
S'd'
asg18
S'N'
sg22
I36
sS'.thisN'
p2421
I299
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2422
I14
sS'.thisRepN'
p2423
I19
sg21
I37
sS'.thisIndex'
p2424
I6
sg23
I25
sg15
(lp2425
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2426
S'space'
p2427
asg95
I6
sa(dp2428
g16
(lp2429
S'd'
asg95
I11
sS'.thisRepN'
p2430
I20
sg30
VF
sg31
g32
sS'.thisTrialN'
p2431
I0
sS'.thisN'
p2432
I300
sS'.thisIndex'
p2433
I11
sg15
(lp2434
S'k'
asg17
S'N'
sg14
I7
sa(dp2435
g16
(lp2436
S'd'
asg95
I3
sS'.thisRepN'
p2437
I20
sg30
VF
sg31
g32
sS'.thisTrialN'
p2438
I1
sS'.thisN'
p2439
I301
sS'.thisIndex'
p2440
I3
sg15
(lp2441
S'd'
asg17
S'Y'
sg14
I7
sa(dp2442
g16
(lp2443
S'k'
asg18
S'Y'
sS'.thisRepN'
p2444
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2445
I2
sS'.thisN'
p2446
I302
sS'.thisIndex'
p2447
I6
sg15
(lp2448
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2449
S'space'
p2450
asg95
I6
sa(dp2451
g16
(lp2452
S'k'
asg18
S'Y'
sS'.thisRepN'
p2453
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2454
I3
sS'.thisN'
p2455
I303
sS'.thisIndex'
p2456
I14
sg15
(lp2457
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2458
S'd'
asg95
I14
sa(dp2459
g16
(lp2460
S'd'
asg18
S'Y'
sS'.thisRepN'
p2461
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2462
I4
sS'.thisN'
p2463
I304
sS'.thisIndex'
p2464
I5
sg15
(lp2465
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2466
S'd'
asg95
I5
sa(dp2467
g16
(lp2468
S'k'
asg18
S'Y'
sS'.thisRepN'
p2469
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2470
I5
sS'.thisN'
p2471
I305
sS'.thisIndex'
p2472
I8
sg15
(lp2473
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2474
S'space'
p2475
asg95
I8
sa(dp2476
g16
(lp2477
S'k'
asg18
S'N'
sS'.thisRepN'
p2478
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2479
I6
sS'.thisN'
p2480
I306
sS'.thisIndex'
p2481
I3
sg15
(lp2482
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2483
S'space'
p2484
asg95
I3
sa(dp2485
g16
(lp2486
S'd'
asg18
S'Y'
sS'.thisRepN'
p2487
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2488
I7
sS'.thisN'
p2489
I307
sS'.thisIndex'
p2490
I3
sg15
(lp2491
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2492
g16
(lp2493
S'd'
asg18
S'N'
sS'.thisRepN'
p2494
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2495
I8
sS'.thisN'
p2496
I308
sS'.thisIndex'
p2497
I14
sg15
(lp2498
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2499
g16
(lp2500
S'k'
asg18
S'Y'
sS'.thisRepN'
p2501
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2502
I9
sS'.thisN'
p2503
I309
sS'.thisIndex'
p2504
I12
sg15
(lp2505
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2506
S'space'
p2507
asg95
I12
sa(dp2508
g16
(lp2509
S'd'
asg18
S'N'
sS'.thisRepN'
p2510
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2511
I10
sS'.thisN'
p2512
I310
sS'.thisIndex'
p2513
I6
sg15
(lp2514
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I6
sa(dp2515
g16
(lp2516
S'k'
asg18
S'Y'
sS'.thisRepN'
p2517
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2518
I11
sS'.thisN'
p2519
I311
sS'.thisIndex'
p2520
I6
sg15
(lp2521
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2522
S'space'
p2523
asg95
I6
sa(dp2524
g16
(lp2525
S'd'
asg18
S'Y'
sS'.thisRepN'
p2526
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2527
I12
sS'.thisN'
p2528
I312
sS'.thisIndex'
p2529
I8
sg15
(lp2530
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2531
S'space'
p2532
asg95
I8
sa(dp2533
g16
(lp2534
S'd'
asg18
S'N'
sS'.thisRepN'
p2535
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2536
I13
sS'.thisN'
p2537
I313
sS'.thisIndex'
p2538
I13
sg15
(lp2539
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I13
sa(dp2540
g16
(lp2541
S'k'
asg18
S'N'
sS'.thisRepN'
p2542
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2543
I14
sS'.thisN'
p2544
I314
sS'.thisIndex'
p2545
I6
sg15
(lp2546
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2547
g16
(lp2548
S'k'
asg18
S'Y'
sS'.thisRepN'
p2549
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2550
I0
sS'.thisN'
p2551
I315
sS'.thisIndex'
p2552
I12
sg15
(lp2553
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2554
S'space'
p2555
asg95
I12
sa(dp2556
g16
(lp2557
S'k'
asg18
S'N'
sS'.thisRepN'
p2558
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2559
I1
sS'.thisN'
p2560
I316
sS'.thisIndex'
p2561
I6
sg15
(lp2562
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I6
sa(dp2563
g16
(lp2564
S'd'
asg18
S'N'
sS'.thisRepN'
p2565
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2566
I2
sS'.thisN'
p2567
I317
sS'.thisIndex'
p2568
I2
sg15
(lp2569
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2570
g16
(lp2571
S'k'
asg18
S'Y'
sS'.thisRepN'
p2572
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2573
I3
sS'.thisN'
p2574
I318
sS'.thisIndex'
p2575
I7
sg15
(lp2576
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2577
S'space'
p2578
asg95
I7
sa(dp2579
g16
(lp2580
S'k'
asg18
S'N'
sS'.thisRepN'
p2581
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2582
I4
sS'.thisN'
p2583
I319
sS'.thisIndex'
p2584
I8
sg15
(lp2585
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2586
g16
(lp2587
S'k'
asg18
S'Y'
sS'.thisRepN'
p2588
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2589
I5
sS'.thisN'
p2590
I320
sS'.thisIndex'
p2591
I11
sg15
(lp2592
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2593
S'space'
p2594
asg95
I11
sa(dp2595
g16
(lp2596
S'k'
asg18
S'Y'
sS'.thisRepN'
p2597
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2598
I6
sS'.thisN'
p2599
I321
sS'.thisIndex'
p2600
I8
sg15
(lp2601
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2602
S'space'
p2603
asg95
I8
sa(dp2604
g16
(lp2605
S'd'
asg18
S'Y'
sS'.thisRepN'
p2606
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2607
I7
sS'.thisN'
p2608
I322
sS'.thisIndex'
p2609
I10
sg15
(lp2610
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2611
S'space'
p2612
asg95
I10
sa(dp2613
g16
(lp2614
S'd'
asg18
S'N'
sS'.thisRepN'
p2615
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2616
I8
sS'.thisN'
p2617
I323
sS'.thisIndex'
p2618
I7
sg15
(lp2619
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2620
g16
(lp2621
S'd'
asg18
S'N'
sS'.thisRepN'
p2622
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2623
I9
sS'.thisN'
p2624
I324
sS'.thisIndex'
p2625
I9
sg15
(lp2626
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I9
sa(dp2627
g16
(lp2628
S'd'
asg18
S'N'
sS'.thisRepN'
p2629
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2630
I10
sS'.thisN'
p2631
I325
sS'.thisIndex'
p2632
I11
sg15
(lp2633
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2634
g16
(lp2635
S'd'
asg18
S'Y'
sS'.thisRepN'
p2636
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2637
I11
sS'.thisN'
p2638
I326
sS'.thisIndex'
p2639
I10
sg15
(lp2640
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2641
S'k'
asg95
I10
sa(dp2642
g16
(lp2643
S'k'
asg18
S'Y'
sS'.thisRepN'
p2644
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2645
I12
sS'.thisN'
p2646
I327
sS'.thisIndex'
p2647
I9
sg15
(lp2648
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2649
S'space'
p2650
asg95
I9
sa(dp2651
g16
(lp2652
S'k'
asg18
S'N'
sS'.thisRepN'
p2653
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2654
I13
sS'.thisN'
p2655
I328
sS'.thisIndex'
p2656
I13
sg15
(lp2657
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2658
S'space'
p2659
asg95
I13
sa(dp2660
g16
(lp2661
S'k'
asg18
S'Y'
sS'.thisRepN'
p2662
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2663
I14
sS'.thisN'
p2664
I329
sS'.thisIndex'
p2665
I14
sg15
(lp2666
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I14
sa(dp2667
g16
(lp2668
S'd'
asg18
S'Y'
sS'.thisRepN'
p2669
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2670
I0
sS'.thisN'
p2671
I330
sS'.thisIndex'
p2672
I5
sg15
(lp2673
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2674
S'space'
p2675
asg95
I5
sa(dp2676
g16
(lp2677
S'd'
asg18
S'Y'
sS'.thisRepN'
p2678
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2679
I1
sS'.thisN'
p2680
I331
sS'.thisIndex'
p2681
I11
sg15
(lp2682
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I11
sa(dp2683
g16
(lp2684
S'd'
asg18
S'N'
sS'.thisRepN'
p2685
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2686
I2
sS'.thisN'
p2687
I332
sS'.thisIndex'
p2688
I7
sg15
(lp2689
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2690
g16
(lp2691
S'd'
asg18
S'Y'
sS'.thisRepN'
p2692
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2693
I3
sS'.thisN'
p2694
I333
sS'.thisIndex'
p2695
I9
sg15
(lp2696
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2697
S'space'
p2698
asg95
I9
sa(dp2699
g16
(lp2700
S'd'
asg18
S'Y'
sS'.thisRepN'
p2701
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2702
I4
sS'.thisN'
p2703
I334
sS'.thisIndex'
p2704
I13
sg15
(lp2705
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2706
S'space'
p2707
asg95
I13
sa(dp2708
g16
(lp2709
S'k'
asg18
S'Y'
sS'.thisRepN'
p2710
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2711
I5
sS'.thisN'
p2712
I335
sS'.thisIndex'
p2713
I6
sg15
(lp2714
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2715
S'space'
p2716
asg95
I6
sa(dp2717
g16
(lp2718
S'k'
asg18
S'Y'
sS'.thisRepN'
p2719
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2720
I6
sS'.thisN'
p2721
I336
sS'.thisIndex'
p2722
I14
sg15
(lp2723
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2724
S'space'
p2725
asg95
I14
sa(dp2726
g16
(lp2727
S'd'
asg18
S'N'
sS'.thisRepN'
p2728
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2729
I7
sS'.thisN'
p2730
I337
sS'.thisIndex'
p2731
I8
sg15
(lp2732
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2733
S'space'
p2734
asg95
I8
sa(dp2735
g16
(lp2736
S'd'
asg18
S'N'
sS'.thisRepN'
p2737
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2738
I8
sS'.thisN'
p2739
I338
sS'.thisIndex'
p2740
I3
sg15
(lp2741
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2742
g16
(lp2743
S'd'
asg18
S'Y'
sS'.thisRepN'
p2744
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2745
I9
sS'.thisN'
p2746
I339
sS'.thisIndex'
p2747
I2
sg15
(lp2748
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2749
S'space'
p2750
asg95
I2
sa(dp2751
g16
(lp2752
S'k'
asg18
S'N'
sS'.thisRepN'
p2753
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2754
I10
sS'.thisN'
p2755
I340
sS'.thisIndex'
p2756
I12
sg15
(lp2757
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I12
sa(dp2758
g16
(lp2759
S'd'
asg18
S'Y'
sS'.thisRepN'
p2760
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2761
I11
sS'.thisN'
p2762
I341
sS'.thisIndex'
p2763
I10
sg15
(lp2764
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I10
sa(dp2765
g16
(lp2766
S'd'
asg18
S'N'
sS'.thisRepN'
p2767
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2768
I12
sS'.thisN'
p2769
I342
sS'.thisIndex'
p2770
I12
sg15
(lp2771
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2772
g16
(lp2773
S'k'
asg18
S'Y'
sS'.thisRepN'
p2774
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2775
I13
sS'.thisN'
p2776
I343
sS'.thisIndex'
p2777
I10
sg15
(lp2778
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2779
S'space'
p2780
asg95
I10
sa(dp2781
g16
(lp2782
S'k'
asg18
S'N'
sS'.thisRepN'
p2783
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2784
I14
sS'.thisN'
p2785
I344
sS'.thisIndex'
p2786
I9
sg15
(lp2787
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2788
g16
(lp2789
S'd'
asg18
S'N'
sS'.thisRepN'
p2790
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2791
I0
sS'.thisN'
p2792
I345
sS'.thisIndex'
p2793
I8
sg15
(lp2794
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2795
S'space'
p2796
asg95
I8
sa(dp2797
g16
(lp2798
S'k'
asg18
S'N'
sS'.thisRepN'
p2799
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2800
I1
sS'.thisN'
p2801
I346
sS'.thisIndex'
p2802
I4
sg15
(lp2803
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2804
g16
(lp2805
S'k'
asg18
S'N'
sS'.thisRepN'
p2806
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2807
I2
sS'.thisN'
p2808
I347
sS'.thisIndex'
p2809
I4
sg15
(lp2810
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2811
g16
(lp2812
S'd'
asg18
S'N'
sS'.thisRepN'
p2813
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2814
I3
sS'.thisN'
p2815
I348
sS'.thisIndex'
p2816
I8
sg15
(lp2817
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2818
g16
(lp2819
S'd'
asg18
S'N'
sg22
I37
sS'.thisN'
p2820
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2821
I4
sS'.thisRepN'
p2822
I23
sg21
I30
sS'.thisIndex'
p2823
I11
sg23
I25
sg15
(lp2824
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I11
sa(dp2825
g16
(lp2826
S'k'
asg95
I12
sS'.thisRepN'
p2827
I23
sg30
VF
sg31
g32
sS'.thisTrialN'
p2828
I5
sS'.thisN'
p2829
I350
sS'.thisIndex'
p2830
I12
sg15
(lp2831
S'k'
asg17
S'Y'
sg14
I8
sa(dp2832
g16
(lp2833
S'd'
asg95
I6
sS'.thisRepN'
p2834
I23
sg30
VF
sg31
g32
sS'.thisTrialN'
p2835
I6
sS'.thisN'
p2836
I351
sS'.thisIndex'
p2837
I6
sg15
(lp2838
S'd'
asg17
S'Y'
sg14
I8
sa(dp2839
g16
(lp2840
S'k'
asg18
S'Y'
sS'.thisRepN'
p2841
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2842
I7
sS'.thisN'
p2843
I352
sS'.thisIndex'
p2844
I9
sg15
(lp2845
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2846
S'space'
p2847
asg95
I9
sa(dp2848
g16
(lp2849
S'k'
asg18
S'N'
sS'.thisRepN'
p2850
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2851
I8
sS'.thisN'
p2852
I353
sS'.thisIndex'
p2853
I3
sg15
(lp2854
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp2855
g16
(lp2856
S'k'
asg18
S'Y'
sS'.thisRepN'
p2857
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2858
I9
sS'.thisN'
p2859
I354
sS'.thisIndex'
p2860
I11
sg15
(lp2861
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2862
S'space'
p2863
asg95
I11
sa(dp2864
g16
(lp2865
S'd'
asg18
S'N'
sS'.thisRepN'
p2866
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2867
I10
sS'.thisN'
p2868
I355
sS'.thisIndex'
p2869
I8
sg15
(lp2870
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I8
sa(dp2871
g16
(lp2872
S'k'
asg18
S'Y'
sS'.thisRepN'
p2873
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2874
I11
sS'.thisN'
p2875
I356
sS'.thisIndex'
p2876
I1
sg15
(lp2877
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2878
S'k'
asg95
I1
sa(dp2879
g16
(lp2880
S'k'
asg18
S'Y'
sS'.thisRepN'
p2881
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2882
I12
sS'.thisN'
p2883
I357
sS'.thisIndex'
p2884
I7
sg15
(lp2885
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2886
S'k'
asg95
I7
sa(dp2887
g16
(lp2888
S'd'
asg18
S'Y'
sS'.thisRepN'
p2889
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2890
I13
sS'.thisN'
p2891
I358
sS'.thisIndex'
p2892
I11
sg15
(lp2893
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2894
S'space'
p2895
asg95
I11
sa(dp2896
g16
(lp2897
S'd'
asg18
S'N'
sS'.thisRepN'
p2898
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2899
I14
sS'.thisN'
p2900
I359
sS'.thisIndex'
p2901
I3
sg15
(lp2902
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I3
sa(dp2903
g16
(lp2904
S'd'
asg18
S'Y'
sS'.thisRepN'
p2905
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2906
I0
sS'.thisN'
p2907
I360
sS'.thisIndex'
p2908
I1
sg15
(lp2909
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2910
S'space'
p2911
asg95
I1
sa(dp2912
g16
(lp2913
S'd'
asg18
S'Y'
sS'.thisRepN'
p2914
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2915
I1
sS'.thisN'
p2916
I361
sS'.thisIndex'
p2917
I7
sg15
(lp2918
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2919
S'space'
p2920
asg95
I7
sa(dp2921
g16
(lp2922
S'd'
asg18
S'N'
sS'.thisRepN'
p2923
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2924
I2
sS'.thisN'
p2925
I362
sS'.thisIndex'
p2926
I0
sg15
(lp2927
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2928
S'space'
p2929
asg95
I0
sa(dp2930
g16
(lp2931
S'k'
asg18
S'Y'
sS'.thisRepN'
p2932
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2933
I3
sS'.thisN'
p2934
I363
sS'.thisIndex'
p2935
I12
sg15
(lp2936
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2937
S'space'
p2938
asg95
I12
sa(dp2939
g16
(lp2940
S'k'
asg18
S'N'
sS'.thisRepN'
p2941
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2942
I4
sS'.thisN'
p2943
I364
sS'.thisIndex'
p2944
I4
sg15
(lp2945
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2946
g16
(lp2947
S'd'
asg18
S'Y'
sS'.thisRepN'
p2948
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2949
I5
sS'.thisN'
p2950
I365
sS'.thisIndex'
p2951
I3
sg15
(lp2952
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp2953
g16
(lp2954
S'k'
asg18
S'N'
sS'.thisRepN'
p2955
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2956
I6
sS'.thisN'
p2957
I366
sS'.thisIndex'
p2958
I6
sg15
(lp2959
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I6
sa(dp2960
g16
(lp2961
S'd'
asg18
S'Y'
sS'.thisRepN'
p2962
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2963
I7
sS'.thisN'
p2964
I367
sS'.thisIndex'
p2965
I9
sg15
(lp2966
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2967
S'space'
p2968
asg95
I9
sa(dp2969
g16
(lp2970
S'k'
asg18
S'Y'
sS'.thisRepN'
p2971
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2972
I8
sS'.thisN'
p2973
I368
sS'.thisIndex'
p2974
I11
sg15
(lp2975
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I11
sa(dp2976
g16
(lp2977
S'd'
asg18
S'Y'
sS'.thisRepN'
p2978
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2979
I9
sS'.thisN'
p2980
I369
sS'.thisIndex'
p2981
I0
sg15
(lp2982
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2983
g16
(lp2984
S'd'
asg18
S'Y'
sS'.thisRepN'
p2985
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2986
I10
sS'.thisN'
p2987
I370
sS'.thisIndex'
p2988
I12
sg15
(lp2989
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2990
S'space'
p2991
asg95
I12
sa(dp2992
g16
(lp2993
S'd'
asg18
S'N'
sS'.thisRepN'
p2994
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2995
I11
sS'.thisN'
p2996
I371
sS'.thisIndex'
p2997
I0
sg15
(lp2998
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2999
g16
(lp3000
S'd'
asg18
S'N'
sS'.thisRepN'
p3001
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3002
I12
sS'.thisN'
p3003
I372
sS'.thisIndex'
p3004
I0
sg15
(lp3005
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3006
g16
(lp3007
S'd'
asg18
S'Y'
sS'.thisRepN'
p3008
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3009
I13
sS'.thisN'
p3010
I373
sS'.thisIndex'
p3011
I4
sg15
(lp3012
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3013
S'space'
p3014
asg95
I4
sa(dp3015
g16
(lp3016
S'k'
asg18
S'N'
sS'.thisRepN'
p3017
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3018
I14
sS'.thisN'
p3019
I374
sS'.thisIndex'
p3020
I12
sg15
(lp3021
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp3022
g16
(lp3023
S'd'
asg18
S'Y'
sS'.thisRepN'
p3024
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3025
I0
sS'.thisN'
p3026
I375
sS'.thisIndex'
p3027
I5
sg15
(lp3028
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3029
S'space'
p3030
asg95
I5
sa(dp3031
g16
(lp3032
S'k'
asg18
S'N'
sS'.thisRepN'
p3033
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3034
I1
sS'.thisN'
p3035
I376
sS'.thisIndex'
p3036
I7
sg15
(lp3037
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3038
g16
(lp3039
S'd'
asg18
S'Y'
sS'.thisRepN'
p3040
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3041
I2
sS'.thisN'
p3042
I377
sS'.thisIndex'
p3043
I4
sg15
(lp3044
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3045
S'space'
p3046
asg95
I4
sa(dp3047
g16
(lp3048
S'd'
asg18
S'Y'
sS'.thisRepN'
p3049
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3050
I3
sS'.thisN'
p3051
I378
sS'.thisIndex'
p3052
I10
sg15
(lp3053
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3054
S'space'
p3055
asg95
I10
sa(dp3056
g16
(lp3057
S'k'
asg18
S'Y'
sS'.thisRepN'
p3058
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3059
I4
sS'.thisN'
p3060
I379
sS'.thisIndex'
p3061
I1
sg15
(lp3062
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3063
S'space'
p3064
asg95
I1
sa(dp3065
g16
(lp3066
S'k'
asg18
S'Y'
sS'.thisRepN'
p3067
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3068
I5
sS'.thisN'
p3069
I380
sS'.thisIndex'
p3070
I3
sg15
(lp3071
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3072
S'space'
p3073
asg95
I3
sa(dp3074
g16
(lp3075
S'd'
asg18
S'N'
sS'.thisRepN'
p3076
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3077
I6
sS'.thisN'
p3078
I381
sS'.thisIndex'
p3079
I0
sg15
(lp3080
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3081
g16
(lp3082
S'd'
asg18
S'N'
sS'.thisRepN'
p3083
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3084
I7
sS'.thisN'
p3085
I382
sS'.thisIndex'
p3086
I13
sg15
(lp3087
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I13
sa(dp3088
g16
(lp3089
S'k'
asg18
S'N'
sS'.thisRepN'
p3090
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3091
I8
sS'.thisN'
p3092
I383
sS'.thisIndex'
p3093
I9
sg15
(lp3094
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3095
g16
(lp3096
S'k'
asg18
S'Y'
sS'.thisRepN'
p3097
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3098
I9
sS'.thisN'
p3099
I384
sS'.thisIndex'
p3100
I3
sg15
(lp3101
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3102
S'space'
p3103
asg95
I3
sa(dp3104
g16
(lp3105
S'k'
asg18
S'N'
sS'.thisRepN'
p3106
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3107
I10
sS'.thisN'
p3108
I385
sS'.thisIndex'
p3109
I13
sg15
(lp3110
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3111
S'space'
p3112
asg95
I13
sa(dp3113
g16
(lp3114
S'd'
asg18
S'N'
sS'.thisRepN'
p3115
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3116
I11
sS'.thisN'
p3117
I386
sS'.thisIndex'
p3118
I7
sg15
(lp3119
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3120
g16
(lp3121
S'd'
asg18
S'Y'
sS'.thisRepN'
p3122
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3123
I12
sS'.thisN'
p3124
I387
sS'.thisIndex'
p3125
I9
sg15
(lp3126
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3127
S'space'
p3128
asg95
I9
sa(dp3129
g16
(lp3130
S'd'
asg18
S'N'
sS'.thisRepN'
p3131
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3132
I13
sS'.thisN'
p3133
I388
sS'.thisIndex'
p3134
I0
sg15
(lp3135
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3136
g16
(lp3137
S'd'
asg18
S'N'
sS'.thisRepN'
p3138
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3139
I14
sS'.thisN'
p3140
I389
sS'.thisIndex'
p3141
I5
sg15
(lp3142
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3143
S'space'
p3144
asg95
I5
sa(dp3145
g16
(lp3146
S'k'
asg18
S'Y'
sS'.thisRepN'
p3147
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3148
I0
sS'.thisN'
p3149
I390
sS'.thisIndex'
p3150
I3
sg15
(lp3151
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3152
S'space'
p3153
asg95
I3
sa(dp3154
g16
(lp3155
S'k'
asg18
S'Y'
sS'.thisRepN'
p3156
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3157
I1
sS'.thisN'
p3158
I391
sS'.thisIndex'
p3159
I9
sg15
(lp3160
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3161
S'space'
p3162
asg95
I9
sa(dp3163
g16
(lp3164
S'd'
asg18
S'Y'
sS'.thisRepN'
p3165
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3166
I2
sS'.thisN'
p3167
I392
sS'.thisIndex'
p3168
I11
sg15
(lp3169
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3170
S'space'
p3171
asg95
I11
sa(dp3172
g16
(lp3173
S'd'
asg18
S'N'
sS'.thisRepN'
p3174
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3175
I3
sS'.thisN'
p3176
I393
sS'.thisIndex'
p3177
I13
sg15
(lp3178
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3179
S'space'
p3180
asg95
I13
sa(dp3181
g16
(lp3182
S'k'
asg18
S'N'
sS'.thisRepN'
p3183
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3184
I4
sS'.thisN'
p3185
I394
sS'.thisIndex'
p3186
I2
sg15
(lp3187
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3188
g16
(lp3189
S'k'
asg18
S'N'
sS'.thisRepN'
p3190
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3191
I5
sS'.thisN'
p3192
I395
sS'.thisIndex'
p3193
I6
sg15
(lp3194
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3195
g16
(lp3196
S'k'
asg18
S'Y'
sS'.thisRepN'
p3197
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3198
I6
sS'.thisN'
p3199
I396
sS'.thisIndex'
p3200
I13
sg15
(lp3201
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3202
S'space'
p3203
asg95
I13
sa(dp3204
g16
(lp3205
S'k'
asg18
S'N'
sS'.thisRepN'
p3206
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3207
I7
sS'.thisN'
p3208
I397
sS'.thisIndex'
p3209
I13
sg15
(lp3210
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3211
S'space'
p3212
asg95
I13
sa(dp3213
g16
(lp3214
S'k'
asg18
S'N'
sS'.thisRepN'
p3215
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3216
I8
sS'.thisN'
p3217
I398
sS'.thisIndex'
p3218
I3
sg15
(lp3219
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3220
g16
(lp3221
S'd'
asg18
S'N'
sg22
I37
sS'.thisN'
p3222
I399
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3223
I9
sS'.thisRepN'
p3224
I26
sg21
I40
sS'.thisIndex'
p3225
I12
sg23
I25
sg15
(lp3226
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3227
S'space'
p3228
asg95
I12
sa(dp3229
g16
(lp3230
S'k'
asg95
I4
sS'.thisRepN'
p3231
I26
sg30
VF
sg31
g32
sS'.thisTrialN'
p3232
I10
sS'.thisN'
p3233
I400
sS'.thisIndex'
p3234
I4
sg15
(lp3235
S'k'
asg17
S'Y'
sg14
I9
sa(dp3236
g16
(lp3237
S'k'
asg95
I12
sS'.thisRepN'
p3238
I26
sg30
VF
sg31
g32
sS'.thisTrialN'
p3239
I11
sS'.thisN'
p3240
I401
sS'.thisIndex'
p3241
I12
sg15
(lp3242
S'k'
asg17
S'Y'
sg14
I9
sa(dp3243
g16
(lp3244
S'd'
asg18
S'N'
sS'.thisRepN'
p3245
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3246
I12
sS'.thisN'
p3247
I402
sS'.thisIndex'
p3248
I13
sg15
(lp3249
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I13
sa(dp3250
g16
(lp3251
S'k'
asg18
S'Y'
sS'.thisRepN'
p3252
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3253
I13
sS'.thisN'
p3254
I403
sS'.thisIndex'
p3255
I5
sg15
(lp3256
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3257
S'space'
p3258
asg95
I5
sa(dp3259
g16
(lp3260
S'd'
asg18
S'Y'
sS'.thisRepN'
p3261
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3262
I14
sS'.thisN'
p3263
I404
sS'.thisIndex'
p3264
I4
sg15
(lp3265
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3266
S'space'
p3267
asg95
I4
sa(dp3268
g16
(lp3269
S'd'
asg18
S'N'
sS'.thisRepN'
p3270
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3271
I0
sS'.thisN'
p3272
I405
sS'.thisIndex'
p3273
I2
sg15
(lp3274
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3275
g16
(lp3276
S'k'
asg18
S'Y'
sS'.thisRepN'
p3277
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3278
I1
sS'.thisN'
p3279
I406
sS'.thisIndex'
p3280
I3
sg15
(lp3281
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3282
S'space'
p3283
asg95
I3
sa(dp3284
g16
(lp3285
S'k'
asg18
S'Y'
sS'.thisRepN'
p3286
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3287
I2
sS'.thisN'
p3288
I407
sS'.thisIndex'
p3289
I12
sg15
(lp3290
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3291
S'space'
p3292
asg95
I12
sa(dp3293
g16
(lp3294
S'd'
asg18
S'N'
sS'.thisRepN'
p3295
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3296
I3
sS'.thisN'
p3297
I408
sS'.thisIndex'
p3298
I10
sg15
(lp3299
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3300
g16
(lp3301
S'k'
asg18
S'Y'
sS'.thisRepN'
p3302
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3303
I4
sS'.thisN'
p3304
I409
sS'.thisIndex'
p3305
I5
sg15
(lp3306
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3307
g16
(lp3308
S'k'
asg18
S'N'
sS'.thisRepN'
p3309
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3310
I5
sS'.thisN'
p3311
I410
sS'.thisIndex'
p3312
I13
sg15
(lp3313
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I13
sa(dp3314
g16
(lp3315
S'd'
asg18
S'Y'
sS'.thisRepN'
p3316
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3317
I6
sS'.thisN'
p3318
I411
sS'.thisIndex'
p3319
I13
sg15
(lp3320
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3321
S'space'
p3322
asg95
I13
sa(dp3323
g16
(lp3324
S'k'
asg18
S'Y'
sS'.thisRepN'
p3325
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3326
I7
sS'.thisN'
p3327
I412
sS'.thisIndex'
p3328
I5
sg15
(lp3329
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3330
g16
(lp3331
S'k'
asg18
S'N'
sS'.thisRepN'
p3332
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3333
I8
sS'.thisN'
p3334
I413
sS'.thisIndex'
p3335
I1
sg15
(lp3336
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I1
sa(dp3337
g16
(lp3338
S'd'
asg18
S'Y'
sS'.thisRepN'
p3339
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3340
I9
sS'.thisN'
p3341
I414
sS'.thisIndex'
p3342
I3
sg15
(lp3343
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3344
S'space'
p3345
asg95
I3
sa(dp3346
g16
(lp3347
S'd'
asg18
S'N'
sS'.thisRepN'
p3348
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3349
I10
sS'.thisN'
p3350
I415
sS'.thisIndex'
p3351
I4
sg15
(lp3352
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I4
sa(dp3353
g16
(lp3354
S'k'
asg18
S'Y'
sS'.thisRepN'
p3355
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3356
I11
sS'.thisN'
p3357
I416
sS'.thisIndex'
p3358
I14
sg15
(lp3359
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3360
S'd'
asg95
I14
sa(dp3361
g16
(lp3362
S'k'
asg18
S'Y'
sS'.thisRepN'
p3363
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3364
I12
sS'.thisN'
p3365
I417
sS'.thisIndex'
p3366
I5
sg15
(lp3367
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3368
S'space'
p3369
asg95
I5
sa(dp3370
g16
(lp3371
S'k'
asg18
S'N'
sS'.thisRepN'
p3372
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3373
I13
sS'.thisN'
p3374
I418
sS'.thisIndex'
p3375
I13
sg15
(lp3376
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3377
S'd'
asg95
I13
sa(dp3378
g16
(lp3379
S'd'
asg18
S'N'
sS'.thisRepN'
p3380
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3381
I14
sS'.thisN'
p3382
I419
sS'.thisIndex'
p3383
I12
sg15
(lp3384
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3385
g16
(lp3386
S'd'
asg18
S'Y'
sS'.thisRepN'
p3387
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3388
I0
sS'.thisN'
p3389
I420
sS'.thisIndex'
p3390
I5
sg15
(lp3391
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3392
g16
(lp3393
S'd'
asg18
S'Y'
sS'.thisRepN'
p3394
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3395
I1
sS'.thisN'
p3396
I421
sS'.thisIndex'
p3397
I13
sg15
(lp3398
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I13
sa(dp3399
g16
(lp3400
S'k'
asg18
S'N'
sS'.thisRepN'
p3401
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3402
I2
sS'.thisN'
p3403
I422
sS'.thisIndex'
p3404
I2
sg15
(lp3405
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3406
S'space'
p3407
asg95
I2
sa(dp3408
g16
(lp3409
S'k'
asg18
S'Y'
sS'.thisRepN'
p3410
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3411
I3
sS'.thisN'
p3412
I423
sS'.thisIndex'
p3413
I4
sg15
(lp3414
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3415
S'space'
p3416
asg95
I4
sa(dp3417
g16
(lp3418
S'k'
asg18
S'Y'
sS'.thisRepN'
p3419
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3420
I4
sS'.thisN'
p3421
I424
sS'.thisIndex'
p3422
I13
sg15
(lp3423
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3424
S'space'
p3425
asg95
I13
sa(dp3426
g16
(lp3427
S'k'
asg18
S'Y'
sS'.thisRepN'
p3428
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3429
I5
sS'.thisN'
p3430
I425
sS'.thisIndex'
p3431
I4
sg15
(lp3432
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3433
S'space'
p3434
asg95
I4
sa(dp3435
g16
(lp3436
S'k'
asg18
S'N'
sS'.thisRepN'
p3437
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3438
I6
sS'.thisN'
p3439
I426
sS'.thisIndex'
p3440
I3
sg15
(lp3441
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3442
g16
(lp3443
S'd'
asg18
S'Y'
sS'.thisRepN'
p3444
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3445
I7
sS'.thisN'
p3446
I427
sS'.thisIndex'
p3447
I2
sg15
(lp3448
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I2
sa(dp3449
g16
(lp3450
S'd'
asg18
S'Y'
sS'.thisRepN'
p3451
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3452
I8
sS'.thisN'
p3453
I428
sS'.thisIndex'
p3454
I7
sg15
(lp3455
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3456
S'space'
p3457
asg95
I7
sa(dp3458
g16
(lp3459
S'd'
asg18
S'Y'
sS'.thisRepN'
p3460
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3461
I9
sS'.thisN'
p3462
I429
sS'.thisIndex'
p3463
I0
sg15
(lp3464
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3465
S'space'
p3466
asg95
I0
sa(dp3467
g16
(lp3468
S'k'
asg18
S'N'
sS'.thisRepN'
p3469
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3470
I10
sS'.thisN'
p3471
I430
sS'.thisIndex'
p3472
I0
sg15
(lp3473
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3474
g16
(lp3475
S'd'
asg18
S'N'
sS'.thisRepN'
p3476
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3477
I11
sS'.thisN'
p3478
I431
sS'.thisIndex'
p3479
I1
sg15
(lp3480
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3481
g16
(lp3482
S'd'
asg18
S'Y'
sS'.thisRepN'
p3483
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3484
I12
sS'.thisN'
p3485
I432
sS'.thisIndex'
p3486
I1
sg15
(lp3487
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3488
S'space'
p3489
asg95
I1
sa(dp3490
g16
(lp3491
S'd'
asg18
S'N'
sS'.thisRepN'
p3492
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3493
I13
sS'.thisN'
p3494
I433
sS'.thisIndex'
p3495
I7
sg15
(lp3496
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I7
sa(dp3497
g16
(lp3498
S'd'
asg18
S'Y'
sS'.thisRepN'
p3499
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3500
I14
sS'.thisN'
p3501
I434
sS'.thisIndex'
p3502
I14
sg15
(lp3503
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3504
S'space'
p3505
asg95
I14
sa(dp3506
g16
(lp3507
S'k'
asg18
S'N'
sS'.thisRepN'
p3508
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3509
I0
sS'.thisN'
p3510
I435
sS'.thisIndex'
p3511
I0
sg15
(lp3512
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3513
S'k'
asg95
I0
sa(dp3514
g16
(lp3515
S'k'
asg18
S'N'
sS'.thisRepN'
p3516
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3517
I1
sS'.thisN'
p3518
I436
sS'.thisIndex'
p3519
I3
sg15
(lp3520
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3521
S'space'
p3522
asg95
I3
sa(dp3523
g16
(lp3524
S'k'
asg18
S'N'
sS'.thisRepN'
p3525
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3526
I2
sS'.thisN'
p3527
I437
sS'.thisIndex'
p3528
I14
sg15
(lp3529
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3530
S'lalt'
p3531
asg95
I14
sa(dp3532
g16
(lp3533
S'k'
asg18
S'Y'
sS'.thisRepN'
p3534
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3535
I3
sS'.thisN'
p3536
I438
sS'.thisIndex'
p3537
I11
sg15
(lp3538
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3539
S'lalt'
p3540
asg95
I11
sa(dp3541
g16
(lp3542
S'd'
asg18
S'N'
sS'.thisRepN'
p3543
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3544
I4
sS'.thisN'
p3545
I439
sS'.thisIndex'
p3546
I0
sg15
(lp3547
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I0
sa(dp3548
g16
(lp3549
S'k'
asg18
S'N'
sS'.thisRepN'
p3550
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3551
I5
sS'.thisN'
p3552
I440
sS'.thisIndex'
p3553
I6
sg15
(lp3554
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3555
g16
(lp3556
S'd'
asg18
S'Y'
sS'.thisRepN'
p3557
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3558
I6
sS'.thisN'
p3559
I441
sS'.thisIndex'
p3560
I0
sg15
(lp3561
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3562
S'lalt'
p3563
asg95
I0
sa(dp3564
g16
(lp3565
S'k'
asg18
S'Y'
sS'.thisRepN'
p3566
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3567
I7
sS'.thisN'
p3568
I442
sS'.thisIndex'
p3569
I9
sg15
(lp3570
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3571
S'lalt'
p3572
asg95
I9
sa(dp3573
g16
(lp3574
S'd'
asg18
S'Y'
sS'.thisRepN'
p3575
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3576
I8
sS'.thisN'
p3577
I443
sS'.thisIndex'
p3578
I6
sg15
(lp3579
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3580
S'lalt'
p3581
asg95
I6
sa(dp3582
g16
(lp3583
S'd'
asg18
S'Y'
sS'.thisRepN'
p3584
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3585
I9
sS'.thisN'
p3586
I444
sS'.thisIndex'
p3587
I5
sg15
(lp3588
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3589
S'lalt'
p3590
asg95
I5
sa(dp3591
g16
(lp3592
S'd'
asg18
S'N'
sS'.thisRepN'
p3593
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3594
I10
sS'.thisN'
p3595
I445
sS'.thisIndex'
p3596
I14
sg15
(lp3597
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3598
S'lalt'
p3599
asg95
I14
sa(dp3600
g16
(lp3601
S'k'
asg18
S'N'
sS'.thisRepN'
p3602
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3603
I11
sS'.thisN'
p3604
I446
sS'.thisIndex'
p3605
I7
sg15
(lp3606
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3607
S'space'
p3608
asg95
I7
sa(dp3609
g16
(lp3610
S'k'
asg18
S'N'
sS'.thisRepN'
p3611
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3612
I12
sS'.thisN'
p3613
I447
sS'.thisIndex'
p3614
I13
sg15
(lp3615
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3616
S'space'
p3617
asg95
I13
sa(dp3618
g16
(lp3619
S'd'
asg18
S'N'
sS'.thisRepN'
p3620
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3621
I13
sS'.thisN'
p3622
I448
sS'.thisIndex'
p3623
I7
sg15
(lp3624
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3625
g16
(lp3626
S'k'
asg18
S'N'
sg22
I29
sS'.thisN'
p3627
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3628
I14
sS'.thisRepN'
p3629
I29
sg21
I34
sS'.thisIndex'
p3630
I4
sg23
I25
sg15
(lp3631
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3632
g16
(lp3633
S'k'
asg95
I5
sS'.thisRepN'
p3634
I30
sg30
VF
sg31
g32
sS'.thisTrialN'
p3635
I0
sS'.thisN'
p3636
I450
sS'.thisIndex'
p3637
I5
sg15
(lp3638
S'k'
asg17
S'Y'
sg14
I10
sa(dp3639
g16
(lp3640
S'd'
asg95
I1
sS'.thisRepN'
p3641
I30
sg30
VF
sg31
g32
sS'.thisTrialN'
p3642
I1
sS'.thisN'
p3643
I451
sS'.thisIndex'
p3644
I1
sg15
(lp3645
S'd'
asg17
S'Y'
sg14
I10
sa(dp3646
g16
(lp3647
S'k'
asg18
S'N'
sS'.thisRepN'
p3648
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3649
I2
sS'.thisN'
p3650
I452
sS'.thisIndex'
p3651
I13
sg15
(lp3652
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3653
S'space'
p3654
asg95
I13
sa(dp3655
g16
(lp3656
S'k'
asg18
S'N'
sS'.thisRepN'
p3657
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3658
I3
sS'.thisN'
p3659
I453
sS'.thisIndex'
p3660
I7
sg15
(lp3661
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3662
g16
(lp3663
S'k'
asg18
S'Y'
sS'.thisRepN'
p3664
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3665
I4
sS'.thisN'
p3666
I454
sS'.thisIndex'
p3667
I3
sg15
(lp3668
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3669
S'space'
p3670
asg95
I3
sa(dp3671
g16
(lp3672
S'd'
asg18
S'Y'
sS'.thisRepN'
p3673
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3674
I5
sS'.thisN'
p3675
I455
sS'.thisIndex'
p3676
I5
sg15
(lp3677
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3678
S'space'
p3679
asg95
I5
sa(dp3680
g16
(lp3681
S'd'
asg18
S'N'
sS'.thisRepN'
p3682
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3683
I6
sS'.thisN'
p3684
I456
sS'.thisIndex'
p3685
I13
sg15
(lp3686
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I13
sa(dp3687
g16
(lp3688
S'd'
asg18
S'N'
sS'.thisRepN'
p3689
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3690
I7
sS'.thisN'
p3691
I457
sS'.thisIndex'
p3692
I9
sg15
(lp3693
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3694
S'space'
p3695
asg95
I9
sa(dp3696
g16
(lp3697
S'k'
asg18
S'N'
sS'.thisRepN'
p3698
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3699
I8
sS'.thisN'
p3700
I458
sS'.thisIndex'
p3701
I1
sg15
(lp3702
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3703
S'd'
asg95
I1
sa(dp3704
g16
(lp3705
S'd'
asg18
S'Y'
sS'.thisRepN'
p3706
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3707
I9
sS'.thisN'
p3708
I459
sS'.thisIndex'
p3709
I0
sg15
(lp3710
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3711
S'space'
p3712
asg95
I0
sa(dp3713
g16
(lp3714
S'd'
asg18
S'N'
sS'.thisRepN'
p3715
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3716
I10
sS'.thisN'
p3717
I460
sS'.thisIndex'
p3718
I2
sg15
(lp3719
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3720
S'space'
p3721
asg95
I2
sa(dp3722
g16
(lp3723
S'd'
asg18
S'Y'
sS'.thisRepN'
p3724
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3725
I11
sS'.thisN'
p3726
I461
sS'.thisIndex'
p3727
I0
sg15
(lp3728
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3729
S'space'
p3730
asg95
I0
sa(dp3731
g16
(lp3732
S'd'
asg18
S'N'
sS'.thisRepN'
p3733
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3734
I12
sS'.thisN'
p3735
I462
sS'.thisIndex'
p3736
I8
sg15
(lp3737
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I8
sa(dp3738
g16
(lp3739
S'd'
asg18
S'Y'
sS'.thisRepN'
p3740
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3741
I13
sS'.thisN'
p3742
I463
sS'.thisIndex'
p3743
I7
sg15
(lp3744
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3745
S'space'
p3746
asg95
I7
sa(dp3747
g16
(lp3748
S'k'
asg18
S'Y'
sS'.thisRepN'
p3749
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3750
I14
sS'.thisN'
p3751
I464
sS'.thisIndex'
p3752
I12
sg15
(lp3753
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3754
S'k'
asg95
I12
sa(dp3755
g16
(lp3756
S'k'
asg18
S'Y'
sS'.thisRepN'
p3757
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3758
I0
sS'.thisN'
p3759
I465
sS'.thisIndex'
p3760
I10
sg15
(lp3761
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3762
S'space'
p3763
asg95
I10
sa(dp3764
g16
(lp3765
S'k'
asg18
S'N'
sS'.thisRepN'
p3766
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3767
I1
sS'.thisN'
p3768
I466
sS'.thisIndex'
p3769
I14
sg15
(lp3770
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3771
S'd'
asg95
I14
sa(dp3772
g16
(lp3773
S'd'
asg18
S'Y'
sS'.thisRepN'
p3774
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3775
I2
sS'.thisN'
p3776
I467
sS'.thisIndex'
p3777
I13
sg15
(lp3778
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3779
S'space'
p3780
asg95
I13
sa(dp3781
g16
(lp3782
S'k'
asg18
S'N'
sS'.thisRepN'
p3783
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3784
I3
sS'.thisN'
p3785
I468
sS'.thisIndex'
p3786
I14
sg15
(lp3787
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3788
S'space'
p3789
asg95
I14
sa(dp3790
g16
(lp3791
S'd'
asg18
S'N'
sS'.thisRepN'
p3792
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3793
I4
sS'.thisN'
p3794
I469
sS'.thisIndex'
p3795
I5
sg15
(lp3796
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3797
S'k'
asg95
I5
sa(dp3798
g16
(lp3799
S'k'
asg18
S'N'
sS'.thisRepN'
p3800
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3801
I5
sS'.thisN'
p3802
I470
sS'.thisIndex'
p3803
I4
sg15
(lp3804
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I4
sa(dp3805
g16
(lp3806
S'k'
asg18
S'Y'
sS'.thisRepN'
p3807
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3808
I6
sS'.thisN'
p3809
I471
sS'.thisIndex'
p3810
I10
sg15
(lp3811
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp3812
g16
(lp3813
S'd'
asg18
S'Y'
sS'.thisRepN'
p3814
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3815
I7
sS'.thisN'
p3816
I472
sS'.thisIndex'
p3817
I7
sg15
(lp3818
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3819
S'space'
p3820
asg95
I7
sa(dp3821
g16
(lp3822
S'k'
asg18
S'N'
sS'.thisRepN'
p3823
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3824
I8
sS'.thisN'
p3825
I473
sS'.thisIndex'
p3826
I6
sg15
(lp3827
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I6
sa(dp3828
g16
(lp3829
S'd'
asg18
S'Y'
sS'.thisRepN'
p3830
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3831
I9
sS'.thisN'
p3832
I474
sS'.thisIndex'
p3833
I11
sg15
(lp3834
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3835
S'space'
p3836
asg95
I11
sa(dp3837
g16
(lp3838
S'd'
asg18
S'Y'
sS'.thisRepN'
p3839
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3840
I10
sS'.thisN'
p3841
I475
sS'.thisIndex'
p3842
I10
sg15
(lp3843
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3844
g16
(lp3845
S'd'
asg18
S'Y'
sS'.thisRepN'
p3846
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3847
I11
sS'.thisN'
p3848
I476
sS'.thisIndex'
p3849
I12
sg15
(lp3850
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3851
S'space'
p3852
asg95
I12
sa(dp3853
g16
(lp3854
S'k'
asg18
S'N'
sS'.thisRepN'
p3855
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3856
I12
sS'.thisN'
p3857
I477
sS'.thisIndex'
p3858
I7
sg15
(lp3859
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3860
g16
(lp3861
S'd'
asg18
S'Y'
sS'.thisRepN'
p3862
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3863
I13
sS'.thisN'
p3864
I478
sS'.thisIndex'
p3865
I11
sg15
(lp3866
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3867
S'space'
p3868
asg95
I11
sa(dp3869
g16
(lp3870
S'k'
asg18
S'Y'
sS'.thisRepN'
p3871
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3872
I14
sS'.thisN'
p3873
I479
sS'.thisIndex'
p3874
I5
sg15
(lp3875
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3876
S'space'
p3877
asg95
I5
sa(dp3878
g16
(lp3879
S'd'
asg18
S'Y'
sS'.thisRepN'
p3880
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3881
I0
sS'.thisN'
p3882
I480
sS'.thisIndex'
p3883
I8
sg15
(lp3884
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3885
S'space'
p3886
asg95
I8
sa(dp3887
g16
(lp3888
S'k'
asg18
S'N'
sS'.thisRepN'
p3889
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3890
I1
sS'.thisN'
p3891
I481
sS'.thisIndex'
p3892
I10
sg15
(lp3893
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp3894
g16
(lp3895
S'd'
asg18
S'Y'
sS'.thisRepN'
p3896
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3897
I2
sS'.thisN'
p3898
I482
sS'.thisIndex'
p3899
I12
sg15
(lp3900
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3901
S'k'
asg95
I12
sa(dp3902
g16
(lp3903
S'k'
asg18
S'Y'
sS'.thisRepN'
p3904
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3905
I3
sS'.thisN'
p3906
I483
sS'.thisIndex'
p3907
I8
sg15
(lp3908
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I8
sa(dp3909
g16
(lp3910
S'd'
asg18
S'N'
sS'.thisRepN'
p3911
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3912
I4
sS'.thisN'
p3913
I484
sS'.thisIndex'
p3914
I4
sg15
(lp3915
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I4
sa(dp3916
g16
(lp3917
S'k'
asg18
S'Y'
sS'.thisRepN'
p3918
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3919
I5
sS'.thisN'
p3920
I485
sS'.thisIndex'
p3921
I12
sg15
(lp3922
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3923
S'space'
p3924
asg95
I12
sa(dp3925
g16
(lp3926
S'k'
asg18
S'Y'
sS'.thisRepN'
p3927
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3928
I6
sS'.thisN'
p3929
I486
sS'.thisIndex'
p3930
I2
sg15
(lp3931
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3932
S'space'
p3933
asg95
I2
sa(dp3934
g16
(lp3935
S'k'
asg18
S'N'
sS'.thisRepN'
p3936
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3937
I7
sS'.thisN'
p3938
I487
sS'.thisIndex'
p3939
I14
sg15
(lp3940
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3941
g16
(lp3942
S'k'
asg18
S'Y'
sS'.thisRepN'
p3943
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3944
I8
sS'.thisN'
p3945
I488
sS'.thisIndex'
p3946
I10
sg15
(lp3947
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3948
S'space'
p3949
asg95
I10
sa(dp3950
g16
(lp3951
S'd'
asg18
S'Y'
sS'.thisRepN'
p3952
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3953
I9
sS'.thisN'
p3954
I489
sS'.thisIndex'
p3955
I8
sg15
(lp3956
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3957
S'k'
asg95
I8
sa(dp3958
g16
(lp3959
S'd'
asg18
S'Y'
sS'.thisRepN'
p3960
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3961
I10
sS'.thisN'
p3962
I490
sS'.thisIndex'
p3963
I3
sg15
(lp3964
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3965
S'space'
p3966
asg95
I3
sa(dp3967
g16
(lp3968
S'k'
asg18
S'Y'
sS'.thisRepN'
p3969
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3970
I11
sS'.thisN'
p3971
I491
sS'.thisIndex'
p3972
I5
sg15
(lp3973
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3974
S'space'
p3975
asg95
I5
sa(dp3976
g16
(lp3977
S'd'
asg18
S'Y'
sS'.thisRepN'
p3978
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3979
I12
sS'.thisN'
p3980
I492
sS'.thisIndex'
p3981
I2
sg15
(lp3982
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3983
S'space'
p3984
asg95
I2
sa(dp3985
g16
(lp3986
S'k'
asg18
S'N'
sS'.thisRepN'
p3987
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3988
I13
sS'.thisN'
p3989
I493
sS'.thisIndex'
p3990
I1
sg15
(lp3991
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3992
g16
(lp3993
S'd'
asg18
S'N'
sS'.thisRepN'
p3994
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3995
I14
sS'.thisN'
p3996
I494
sS'.thisIndex'
p3997
I9
sg15
(lp3998
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3999
S'space'
p4000
asg95
I9
sa(dp4001
g16
(lp4002
S'k'
asg18
S'N'
sS'.thisRepN'
p4003
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4004
I0
sS'.thisN'
p4005
I495
sS'.thisIndex'
p4006
I2
sg15
(lp4007
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4008
S'space'
p4009
asg95
I2
sa(dp4010
g16
(lp4011
S'k'
asg18
S'N'
sS'.thisRepN'
p4012
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4013
I1
sS'.thisN'
p4014
I496
sS'.thisIndex'
p4015
I5
sg15
(lp4016
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp4017
g16
(lp4018
S'k'
asg18
S'N'
sS'.thisRepN'
p4019
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4020
I2
sS'.thisN'
p4021
I497
sS'.thisIndex'
p4022
I10
sg15
(lp4023
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp4024
g16
(lp4025
S'd'
asg18
S'N'
sS'.thisRepN'
p4026
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4027
I3
sS'.thisN'
p4028
I498
sS'.thisIndex'
p4029
I12
sg15
(lp4030
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I12
sa(dp4031
g16
(lp4032
S'k'
asg18
S'N'
sg22
I32
sS'.thisN'
p4033
I499
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4034
I4
sS'.thisRepN'
p4035
I33
sg21
I30
sS'.thisIndex'
p4036
I5
sg23
I25
sg15
(lp4037
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4038
S'd'
asg95
I5
sa(dp4039
g16
(lp4040
S'd'
asS'.thisIndex'
p4041
I0
sS'.thisRepN'
p4042
I33
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4043
I5
sS'.thisN'
p4044
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4045
S'k'
asg17
S'Y'
sg14
I11
sg95
I0
sa(dp4046
g16
(lp4047
S'd'
asS'.thisIndex'
p4048
I8
sS'.thisRepN'
p4049
I33
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4050
I6
sS'.thisN'
p4051
I501
sg25
S'Y'
sg15
(lp4052
S'd'
asg17
S'N'
sg14
I11
sg95
I8
sa(dp4053
g16
(lp4054
S'k'
asg18
S'N'
sS'.thisRepN'
p4055
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4056
I7
sS'.thisN'
p4057
I502
sg25
S'Y'
sg15
(lp4058
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4059
S'space'
p4060
asg95
I8
sS'.thisIndex'
p4061
I8
sa(dp4062
g16
(lp4063
S'k'
asg18
S'N'
sS'.thisRepN'
p4064
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4065
I8
sS'.thisN'
p4066
I503
sg25
S'Y'
sg15
(lp4067
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4068
S'd'
asg95
I0
sS'.thisIndex'
p4069
I0
sa(dp4070
g16
(lp4071
S'd'
asg18
S'N'
sS'.thisRepN'
p4072
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4073
I9
sS'.thisN'
p4074
I504
sg25
S'Y'
sg15
(lp4075
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4076
I3
sa(dp4077
g16
(lp4078
S'd'
asg18
S'N'
sS'.thisRepN'
p4079
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4080
I10
sS'.thisN'
p4081
I505
sg25
S'Y'
sg15
(lp4082
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4083
S'space'
p4084
asg95
I2
sS'.thisIndex'
p4085
I2
sa(dp4086
g16
(lp4087
S'k'
asg18
S'Y'
sS'.thisRepN'
p4088
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4089
I11
sS'.thisN'
p4090
I506
sg25
S'Y'
sg15
(lp4091
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4092
S'space'
p4093
asg95
I0
sS'.thisIndex'
p4094
I0
sa(dp4095
g16
(lp4096
S'k'
asg18
S'Y'
sS'.thisRepN'
p4097
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4098
I12
sS'.thisN'
p4099
I507
sg25
S'Y'
sg15
(lp4100
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4101
S'space'
p4102
asg95
I3
sS'.thisIndex'
p4103
I3
sa(dp4104
g16
(lp4105
S'd'
asg18
S'Y'
sS'.thisRepN'
p4106
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4107
I13
sS'.thisN'
p4108
I508
sg25
S'Y'
sg15
(lp4109
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4110
S'space'
p4111
asg95
I13
sS'.thisIndex'
p4112
I13
sa(dp4113
g16
(lp4114
S'd'
asg18
S'N'
sS'.thisRepN'
p4115
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4116
I14
sS'.thisN'
p4117
I509
sg25
S'Y'
sg15
(lp4118
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4119
I0
sa(dp4120
g16
(lp4121
S'k'
asg18
S'N'
sS'.thisRepN'
p4122
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4123
I0
sS'.thisN'
p4124
I510
sg25
S'Y'
sg15
(lp4125
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4126
S'k'
asg95
I7
sS'.thisIndex'
p4127
I7
sa(dp4128
g16
(lp4129
S'd'
asg18
S'Y'
sS'.thisRepN'
p4130
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4131
I1
sS'.thisN'
p4132
I511
sg25
S'Y'
sg15
(lp4133
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4134
I9
sa(dp4135
g16
(lp4136
S'k'
asg18
S'Y'
sS'.thisRepN'
p4137
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4138
I2
sS'.thisN'
p4139
I512
sg25
S'Y'
sg15
(lp4140
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4141
I11
sa(dp4142
g16
(lp4143
S'k'
asg18
S'N'
sS'.thisRepN'
p4144
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4145
I3
sS'.thisN'
p4146
I513
sg25
S'Y'
sg15
(lp4147
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4148
I14
sa(dp4149
g16
(lp4150
S'd'
asg18
S'N'
sS'.thisRepN'
p4151
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4152
I4
sS'.thisN'
p4153
I514
sg25
S'Y'
sg15
(lp4154
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4155
I10
sa(dp4156
g16
(lp4157
S'k'
asg18
S'N'
sS'.thisRepN'
p4158
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4159
I5
sS'.thisN'
p4160
I515
sg25
S'Y'
sg15
(lp4161
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4162
I1
sa(dp4163
g16
(lp4164
S'k'
asg18
S'N'
sS'.thisRepN'
p4165
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4166
I6
sS'.thisN'
p4167
I516
sg25
S'Y'
sg15
(lp4168
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4169
S'space'
p4170
asg95
I3
sS'.thisIndex'
p4171
I3
sa(dp4172
g16
(lp4173
S'k'
asg18
S'N'
sS'.thisRepN'
p4174
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4175
I7
sS'.thisN'
p4176
I517
sg25
S'Y'
sg15
(lp4177
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4178
S'space'
p4179
asg95
I1
sS'.thisIndex'
p4180
I1
sa(dp4181
g16
(lp4182
S'd'
asg18
S'N'
sS'.thisRepN'
p4183
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4184
I8
sS'.thisN'
p4185
I518
sg25
S'Y'
sg15
(lp4186
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4187
S'space'
p4188
asg95
I10
sS'.thisIndex'
p4189
I10
sa(dp4190
g16
(lp4191
S'd'
asg18
S'N'
sS'.thisRepN'
p4192
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4193
I9
sS'.thisN'
p4194
I519
sg25
S'Y'
sg15
(lp4195
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4196
I9
sa(dp4197
g16
(lp4198
S'k'
asg18
S'N'
sS'.thisRepN'
p4199
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4200
I10
sS'.thisN'
p4201
I520
sg25
S'Y'
sg15
(lp4202
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4203
I14
sa(dp4204
g16
(lp4205
S'k'
asg18
S'Y'
sS'.thisRepN'
p4206
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4207
I11
sS'.thisN'
p4208
I521
sg25
S'Y'
sg15
(lp4209
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4210
I2
sa(dp4211
g16
(lp4212
S'k'
asg18
S'Y'
sS'.thisRepN'
p4213
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4214
I12
sS'.thisN'
p4215
I522
sg25
S'Y'
sg15
(lp4216
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4217
I12
sa(dp4218
g18
S'N'
sS'.thisRepN'
p4219
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4220
I13
sS'.thisN'
p4221
I523
sg25
S'Y'
sg15
Nsg30
VF
sg17
S'Timed out'
p4222
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4223
I9
sa(dp4224
g16
(lp4225
S'k'
asg18
S'N'
sS'.thisRepN'
p4226
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4227
I14
sS'.thisN'
p4228
I524
sg25
S'Y'
sg15
(lp4229
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4230
S'space'
p4231
asg95
I11
sS'.thisIndex'
p4232
I11
sa(dp4233
g16
(lp4234
S'k'
asg18
S'Y'
sS'.thisRepN'
p4235
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4236
I0
sS'.thisN'
p4237
I525
sg25
S'Y'
sg15
(lp4238
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4239
S'space'
p4240
asg95
I6
sS'.thisIndex'
p4241
I6
sa(dp4242
g16
(lp4243
S'k'
asg18
S'N'
sS'.thisRepN'
p4244
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4245
I1
sS'.thisN'
p4246
I526
sg25
S'Y'
sg15
(lp4247
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4248
I2
sa(dp4249
g16
(lp4250
S'd'
asg18
S'N'
sS'.thisRepN'
p4251
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4252
I2
sS'.thisN'
p4253
I527
sg25
S'Y'
sg15
(lp4254
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4255
I0
sa(dp4256
g16
(lp4257
S'd'
asg18
S'Y'
sS'.thisRepN'
p4258
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4259
I3
sS'.thisN'
p4260
I528
sg25
S'Y'
sg15
(lp4261
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4262
S'space'
p4263
asg95
I7
sS'.thisIndex'
p4264
I7
sa(dp4265
g16
(lp4266
S'd'
asg18
S'N'
sS'.thisRepN'
p4267
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4268
I4
sS'.thisN'
p4269
I529
sg25
S'Y'
sg15
(lp4270
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4271
S'space'
p4272
asg95
I6
sS'.thisIndex'
p4273
I6
sa(dp4274
g18
S'N'
sS'.thisRepN'
p4275
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4276
I5
sS'.thisN'
p4277
I530
sg25
S'Y'
sg15
Nsg30
VF
sg17
g4222
sg14
I11
sg19
(lp4278
S'd'
asg95
I2
sS'.thisIndex'
p4279
I2
sa(dp4280
g16
(lp4281
S'k'
asg18
S'N'
sS'.thisRepN'
p4282
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4283
I6
sS'.thisN'
p4284
I531
sg25
S'Y'
sg15
(lp4285
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4286
S'k'
asg95
I13
sS'.thisIndex'
p4287
I13
sa(dp4288
g16
(lp4289
S'k'
asg18
S'N'
sS'.thisRepN'
p4290
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4291
I7
sS'.thisN'
p4292
I532
sg25
S'Y'
sg15
(lp4293
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4294
S'space'
p4295
asg95
I10
sS'.thisIndex'
p4296
I10
sa(dp4297
g16
(lp4298
S'd'
asg18
S'Y'
sS'.thisRepN'
p4299
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4300
I8
sS'.thisN'
p4301
I533
sg25
S'Y'
sg15
(lp4302
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4303
S'space'
p4304
asg95
I10
sS'.thisIndex'
p4305
I10
sa(dp4306
g16
(lp4307
S'd'
asg18
S'N'
sS'.thisRepN'
p4308
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4309
I9
sS'.thisN'
p4310
I534
sg25
S'Y'
sg15
(lp4311
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4312
S'space'
p4313
asg95
I8
sS'.thisIndex'
p4314
I8
sa(dp4315
g16
(lp4316
S'd'
asg18
S'N'
sS'.thisRepN'
p4317
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4318
I10
sS'.thisN'
p4319
I535
sg25
S'Y'
sg15
(lp4320
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4321
I9
sa(dp4322
g16
(lp4323
S'd'
asg18
S'N'
sS'.thisRepN'
p4324
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4325
I11
sS'.thisN'
p4326
I536
sg25
S'Y'
sg15
(lp4327
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4328
I4
sa(dp4329
g16
(lp4330
S'd'
asg18
S'Y'
sS'.thisRepN'
p4331
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4332
I12
sS'.thisN'
p4333
I537
sg25
S'Y'
sg15
(lp4334
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4335
S'space'
p4336
asg95
I1
sS'.thisIndex'
p4337
I1
sa(dp4338
g16
(lp4339
S'd'
asg18
S'Y'
sS'.thisRepN'
p4340
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4341
I13
sS'.thisN'
p4342
I538
sg25
S'Y'
sg15
(lp4343
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4344
S'space'
p4345
asg95
I13
sS'.thisIndex'
p4346
I13
sa(dp4347
g16
(lp4348
S'k'
asg18
S'N'
sS'.thisRepN'
p4349
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4350
I14
sS'.thisN'
p4351
I539
sg25
S'Y'
sg15
(lp4352
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4353
S'space'
p4354
asg95
I4
sS'.thisIndex'
p4355
I4
sa(dp4356
g16
(lp4357
S'k'
asg18
S'Y'
sS'.thisRepN'
p4358
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4359
I0
sS'.thisN'
p4360
I540
sg25
S'Y'
sg15
(lp4361
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4362
S'space'
p4363
asg95
I7
sS'.thisIndex'
p4364
I7
sa(dp4365
g16
(lp4366
S'd'
asg18
S'Y'
sS'.thisRepN'
p4367
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4368
I1
sS'.thisN'
p4369
I541
sg25
S'Y'
sg15
(lp4370
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4371
S'space'
p4372
asg95
I8
sS'.thisIndex'
p4373
I8
sa(dp4374
g16
(lp4375
S'd'
asg18
S'Y'
sS'.thisRepN'
p4376
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4377
I2
sS'.thisN'
p4378
I542
sg25
S'Y'
sg15
(lp4379
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4380
S'space'
p4381
asg95
I7
sS'.thisIndex'
p4382
I7
sa(dp4383
g16
(lp4384
S'd'
asg18
S'Y'
sS'.thisRepN'
p4385
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4386
I3
sS'.thisN'
p4387
I543
sg25
S'Y'
sg15
(lp4388
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4389
S'space'
p4390
asg95
I12
sS'.thisIndex'
p4391
I12
sa(dp4392
g16
(lp4393
S'k'
asg18
S'Y'
sS'.thisRepN'
p4394
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4395
I4
sS'.thisN'
p4396
I544
sg25
S'Y'
sg15
(lp4397
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4398
S'space'
p4399
asg95
I2
sS'.thisIndex'
p4400
I2
sa(dp4401
g16
(lp4402
S'k'
asg18
S'Y'
sS'.thisRepN'
p4403
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4404
I5
sS'.thisN'
p4405
I545
sg25
S'Y'
sg15
(lp4406
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4407
S'space'
p4408
asg95
I14
sS'.thisIndex'
p4409
I14
sa(dp4410
g16
(lp4411
S'k'
asg18
S'N'
sS'.thisRepN'
p4412
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4413
I6
sS'.thisN'
p4414
I546
sg25
S'Y'
sg15
(lp4415
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4416
I2
sa(dp4417
g16
(lp4418
S'k'
asg18
S'Y'
sS'.thisRepN'
p4419
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4420
I7
sS'.thisN'
p4421
I547
sg25
S'Y'
sg15
(lp4422
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4423
S'space'
p4424
asg95
I8
sS'.thisIndex'
p4425
I8
sa(dp4426
g16
(lp4427
S'k'
asg18
S'Y'
sS'.thisRepN'
p4428
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4429
I8
sS'.thisN'
p4430
I548
sg25
S'Y'
sg15
(lp4431
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4432
S'space'
p4433
asg95
I6
sS'.thisIndex'
p4434
I6
sa(dp4435
g16
(lp4436
S'k'
asg18
S'Y'
sg22
I30
sg26
S'Y'
sS'.thisN'
p4437
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4438
I9
sS'.thisRepN'
p4439
I36
sg21
I38
sg25
S'Y'
sg23
I21
sg15
(lp4440
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4441
S'space'
p4442
asg95
I9
sS'.thisIndex'
p4443
I9
sa(dp4444
g16
(lp4445
S'k'
asS'.thisIndex'
p4446
I4
sS'.thisRepN'
p4447
I36
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4448
I10
sS'.thisN'
p4449
I550
sg25
S'Y'
sg15
(lp4450
S'd'
asg17
S'Y'
sg14
I12
sg95
I4
sa(dp4451
g16
(lp4452
S'd'
asS'.thisIndex'
p4453
I4
sS'.thisRepN'
p4454
I36
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4455
I11
sS'.thisN'
p4456
I551
sg25
S'Y'
sg15
(lp4457
S'k'
asg17
S'Y'
sg14
I12
sg95
I4
sa(dp4458
g16
(lp4459
S'd'
asg18
S'N'
sS'.thisRepN'
p4460
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4461
I12
sS'.thisN'
p4462
I552
sg25
S'Y'
sg15
(lp4463
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4464
I12
sa(dp4465
g16
(lp4466
S'k'
asg18
S'Y'
sS'.thisRepN'
p4467
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4468
I13
sS'.thisN'
p4469
I553
sg25
S'Y'
sg15
(lp4470
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4471
S'space'
p4472
asg95
I1
sS'.thisIndex'
p4473
I1
sa(dp4474
g16
(lp4475
S'd'
asg18
S'N'
sS'.thisRepN'
p4476
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4477
I14
sS'.thisN'
p4478
I554
sg25
S'Y'
sg15
(lp4479
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4480
I5
sa(dp4481
g16
(lp4482
S'd'
asg18
S'Y'
sS'.thisRepN'
p4483
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4484
I0
sS'.thisN'
p4485
I555
sg25
S'Y'
sg15
(lp4486
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4487
S'space'
p4488
asg95
I5
sS'.thisIndex'
p4489
I5
sa(dp4490
g16
(lp4491
S'k'
asg18
S'Y'
sS'.thisRepN'
p4492
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4493
I1
sS'.thisN'
p4494
I556
sg25
S'Y'
sg15
(lp4495
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4496
S'space'
p4497
asg95
I0
sS'.thisIndex'
p4498
I0
sa(dp4499
g16
(lp4500
S'k'
asg18
S'Y'
sS'.thisRepN'
p4501
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4502
I2
sS'.thisN'
p4503
I557
sg25
S'Y'
sg15
(lp4504
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4505
S'k'
asg95
I10
sS'.thisIndex'
p4506
I10
sa(dp4507
g16
(lp4508
S'k'
asg18
S'N'
sS'.thisRepN'
p4509
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4510
I3
sS'.thisN'
p4511
I558
sg25
S'Y'
sg15
(lp4512
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4513
S'k'
asg95
I14
sS'.thisIndex'
p4514
I14
sa(dp4515
g16
(lp4516
S'k'
asg18
S'Y'
sS'.thisRepN'
p4517
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4518
I4
sS'.thisN'
p4519
I559
sg25
S'Y'
sg15
(lp4520
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4521
S'space'
p4522
asg95
I9
sS'.thisIndex'
p4523
I9
sa(dp4524
g16
(lp4525
S'd'
asg18
S'N'
sS'.thisRepN'
p4526
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4527
I5
sS'.thisN'
p4528
I560
sg25
S'Y'
sg15
(lp4529
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4530
S'k'
asg95
I14
sS'.thisIndex'
p4531
I14
sa(dp4532
g16
(lp4533
S'd'
asg18
S'N'
sS'.thisRepN'
p4534
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4535
I6
sS'.thisN'
p4536
I561
sg25
S'Y'
sg15
(lp4537
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4538
I2
sa(dp4539
g16
(lp4540
S'k'
asg18
S'Y'
sS'.thisRepN'
p4541
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4542
I7
sS'.thisN'
p4543
I562
sg25
S'Y'
sg15
(lp4544
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4545
S'space'
p4546
asg95
I2
sS'.thisIndex'
p4547
I2
sa(dp4548
g16
(lp4549
S'd'
asg18
S'N'
sS'.thisRepN'
p4550
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4551
I8
sS'.thisN'
p4552
I563
sg25
S'Y'
sg15
(lp4553
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4554
S'space'
p4555
asg95
I12
sS'.thisIndex'
p4556
I12
sa(dp4557
g16
(lp4558
S'k'
asg18
S'N'
sS'.thisRepN'
p4559
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4560
I9
sS'.thisN'
p4561
I564
sg25
S'Y'
sg15
(lp4562
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4563
I1
sa(dp4564
g16
(lp4565
S'k'
asg18
S'Y'
sS'.thisRepN'
p4566
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4567
I10
sS'.thisN'
p4568
I565
sg25
S'Y'
sg15
(lp4569
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I14
sS'.thisIndex'
p4570
I14
sa(dp4571
g16
(lp4572
S'k'
asg18
S'N'
sS'.thisRepN'
p4573
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4574
I11
sS'.thisN'
p4575
I566
sg25
S'Y'
sg15
(lp4576
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4577
I4
sa(dp4578
g16
(lp4579
S'd'
asg18
S'Y'
sS'.thisRepN'
p4580
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4581
I12
sS'.thisN'
p4582
I567
sg25
S'Y'
sg15
(lp4583
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4584
S'space'
p4585
asg95
I9
sS'.thisIndex'
p4586
I9
sa(dp4587
g16
(lp4588
S'k'
asg18
S'N'
sS'.thisRepN'
p4589
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4590
I13
sS'.thisN'
p4591
I568
sg25
S'Y'
sg15
(lp4592
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4593
S'space'
p4594
asg95
I0
sS'.thisIndex'
p4595
I0
sa(dp4596
g16
(lp4597
S'd'
asg18
S'N'
sS'.thisRepN'
p4598
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4599
I14
sS'.thisN'
p4600
I569
sg25
S'Y'
sg15
(lp4601
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4602
I13
sa(dp4603
g16
(lp4604
S'd'
asg18
S'Y'
sS'.thisRepN'
p4605
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4606
I0
sS'.thisN'
p4607
I570
sg25
S'Y'
sg15
(lp4608
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4609
S'space'
p4610
asg95
I13
sS'.thisIndex'
p4611
I13
sa(dp4612
g16
(lp4613
S'd'
asg18
S'Y'
sS'.thisRepN'
p4614
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4615
I1
sS'.thisN'
p4616
I571
sg25
S'Y'
sg15
(lp4617
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4618
S'space'
p4619
asg95
I3
sS'.thisIndex'
p4620
I3
sa(dp4621
g16
(lp4622
S'k'
asg18
S'N'
sS'.thisRepN'
p4623
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4624
I2
sS'.thisN'
p4625
I572
sg25
S'Y'
sg15
(lp4626
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4627
I1
sa(dp4628
g16
(lp4629
S'd'
asg18
S'N'
sS'.thisRepN'
p4630
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4631
I3
sS'.thisN'
p4632
I573
sg25
S'Y'
sg15
(lp4633
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4634
I2
sa(dp4635
g16
(lp4636
S'd'
asg18
S'N'
sS'.thisRepN'
p4637
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4638
I4
sS'.thisN'
p4639
I574
sg25
S'Y'
sg15
(lp4640
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4641
S'space'
p4642
asg95
I12
sS'.thisIndex'
p4643
I12
sa(dp4644
g16
(lp4645
S'k'
asg18
S'Y'
sS'.thisRepN'
p4646
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4647
I5
sS'.thisN'
p4648
I575
sg25
S'Y'
sg15
(lp4649
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4650
S'space'
p4651
asg95
I14
sS'.thisIndex'
p4652
I14
sa(dp4653
g16
(lp4654
S'd'
asg18
S'Y'
sS'.thisRepN'
p4655
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4656
I6
sS'.thisN'
p4657
I576
sg25
S'Y'
sg15
(lp4658
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4659
S'space'
p4660
asg95
I8
sS'.thisIndex'
p4661
I8
sa(dp4662
g16
(lp4663
S'd'
asg18
S'Y'
sS'.thisRepN'
p4664
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4665
I7
sS'.thisN'
p4666
I577
sg25
S'Y'
sg15
(lp4667
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4668
S'space'
p4669
asg95
I1
sS'.thisIndex'
p4670
I1
sa(dp4671
g16
(lp4672
S'k'
asg18
S'N'
sS'.thisRepN'
p4673
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4674
I8
sS'.thisN'
p4675
I578
sg25
S'Y'
sg15
(lp4676
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4677
S'space'
p4678
asg95
I8
sS'.thisIndex'
p4679
I8
sa(dp4680
g16
(lp4681
S'k'
asg18
S'Y'
sS'.thisRepN'
p4682
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4683
I9
sS'.thisN'
p4684
I579
sg25
S'Y'
sg15
(lp4685
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4686
S'space'
p4687
asg95
I2
sS'.thisIndex'
p4688
I2
sa(dp4689
g16
(lp4690
S'k'
asg18
S'Y'
sS'.thisRepN'
p4691
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4692
I10
sS'.thisN'
p4693
I580
sg25
S'Y'
sg15
(lp4694
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4695
S'space'
p4696
asg95
I2
sS'.thisIndex'
p4697
I2
sa(dp4698
g16
(lp4699
S'k'
asg18
S'Y'
sS'.thisRepN'
p4700
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4701
I11
sS'.thisN'
p4702
I581
sg25
S'Y'
sg15
(lp4703
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4704
S'space'
p4705
asg95
I7
sS'.thisIndex'
p4706
I7
sa(dp4707
g16
(lp4708
S'd'
asg18
S'N'
sS'.thisRepN'
p4709
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4710
I12
sS'.thisN'
p4711
I582
sg25
S'Y'
sg15
(lp4712
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4713
I11
sa(dp4714
g16
(lp4715
S'k'
asg18
S'N'
sS'.thisRepN'
p4716
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4717
I13
sS'.thisN'
p4718
I583
sg25
S'Y'
sg15
(lp4719
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4720
S'space'
p4721
asg95
I12
sS'.thisIndex'
p4722
I12
sa(dp4723
g16
(lp4724
S'd'
asg18
S'N'
sS'.thisRepN'
p4725
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4726
I14
sS'.thisN'
p4727
I584
sg25
S'Y'
sg15
(lp4728
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4729
S'd'
asg95
I3
sS'.thisIndex'
p4730
I3
sa(dp4731
g16
(lp4732
S'd'
asg18
S'Y'
sS'.thisRepN'
p4733
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4734
I0
sS'.thisN'
p4735
I585
sg25
S'Y'
sg15
(lp4736
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4737
S'space'
p4738
asg95
I8
sS'.thisIndex'
p4739
I8
sa(dp4740
g16
(lp4741
S'k'
asg18
S'N'
sS'.thisRepN'
p4742
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4743
I1
sS'.thisN'
p4744
I586
sg25
S'Y'
sg15
(lp4745
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4746
S'space'
p4747
asg95
I2
sS'.thisIndex'
p4748
I2
sa(dp4749
g16
(lp4750
S'k'
asg18
S'Y'
sS'.thisRepN'
p4751
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4752
I2
sS'.thisN'
p4753
I587
sg25
S'Y'
sg15
(lp4754
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4755
S'space'
p4756
asg95
I8
sS'.thisIndex'
p4757
I8
sa(dp4758
g16
(lp4759
S'k'
asg18
S'N'
sS'.thisRepN'
p4760
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4761
I3
sS'.thisN'
p4762
I588
sg25
S'Y'
sg15
(lp4763
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4764
S'd'
asg95
I4
sS'.thisIndex'
p4765
I4
sa(dp4766
g16
(lp4767
S'k'
asg18
S'N'
sS'.thisRepN'
p4768
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4769
I4
sS'.thisN'
p4770
I589
sg25
S'Y'
sg15
(lp4771
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4772
S'space'
p4773
asg95
I7
sS'.thisIndex'
p4774
I7
sa(dp4775
g16
(lp4776
S'd'
asg18
S'Y'
sS'.thisRepN'
p4777
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4778
I5
sS'.thisN'
p4779
I590
sg25
S'Y'
sg15
(lp4780
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4781
I8
sa(dp4782
g16
(lp4783
S'k'
asg18
S'Y'
sS'.thisRepN'
p4784
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4785
I6
sS'.thisN'
p4786
I591
sg25
S'Y'
sg15
(lp4787
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4788
S'space'
p4789
asg95
I1
sS'.thisIndex'
p4790
I1
sa(dp4791
g16
(lp4792
S'd'
asg18
S'N'
sS'.thisRepN'
p4793
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4794
I7
sS'.thisN'
p4795
I592
sg25
S'Y'
sg15
(lp4796
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4797
I0
sa(dp4798
g16
(lp4799
S'd'
asg18
S'Y'
sS'.thisRepN'
p4800
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4801
I8
sS'.thisN'
p4802
I593
sg25
S'Y'
sg15
(lp4803
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4804
S'space'
p4805
asg95
I5
sS'.thisIndex'
p4806
I5
sa(dp4807
g16
(lp4808
S'd'
asg18
S'Y'
sS'.thisRepN'
p4809
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4810
I9
sS'.thisN'
p4811
I594
sg25
S'Y'
sg15
(lp4812
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4813
S'space'
p4814
asg95
I14
sS'.thisIndex'
p4815
I14
sa(dp4816
g16
(lp4817
S'd'
asg18
S'N'
sS'.thisRepN'
p4818
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4819
I10
sS'.thisN'
p4820
I595
sg25
S'Y'
sg15
(lp4821
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4822
I9
sa(dp4823
g16
(lp4824
S'k'
asg18
S'Y'
sS'.thisRepN'
p4825
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4826
I11
sS'.thisN'
p4827
I596
sg25
S'Y'
sg15
(lp4828
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4829
S'space'
p4830
asg95
I2
sS'.thisIndex'
p4831
I2
sa(dp4832
g16
(lp4833
S'k'
asg18
S'Y'
sS'.thisRepN'
p4834
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4835
I12
sS'.thisN'
p4836
I597
sg25
S'Y'
sg15
(lp4837
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4838
S'space'
p4839
asg95
I1
sS'.thisIndex'
p4840
I1
sa(dp4841
g16
(lp4842
S'd'
asg18
S'Y'
sS'.thisRepN'
p4843
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4844
I13
sS'.thisN'
p4845
I598
sg25
S'Y'
sg15
(lp4846
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4847
S'space'
p4848
asg95
I11
sS'.thisIndex'
p4849
I11
sa(dp4850
g16
(lp4851
S'k'
asg18
S'N'
sg22
I34
sg26
S'Y'
sS'.thisN'
p4852
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4853
I14
sS'.thisRepN'
p4854
I39
sg21
I40
sg25
S'Y'
sg23
I25
sg15
(lp4855
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4856
I5
sasS'loops'
p4857
(lp4858
g1
(g35
g3
NtRp4859
(dp4860
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4861
sg40
(lp4862
sg41
I76016176
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4863
g48
g49
(g50
g51
g52
S'b'
tRp4864
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4865
(I1
(I600
I1
tg55
I00
S'\x00\x00\xbaB\x00\xc0\x0eD\x00\x00\xe6C\x00\x00\xceB\x00\x00\x08B\x00\x80\xd6C\x00\x00\xd9C\x00\x80\x07D\x00\x00\x18C\x00\x00vC\x00\x00\xc0B\x00\x00\xf5C\x00\x00LC\x00\x80\x14D\x00\x80\x92C\x00\x003C\x00\x00%C\x00\xc0\x14D\x00\x00\x06D\x00@\x0fD\x00\x00@C\x00\x00\x00B\x00\x00\xe8B\x00\x00\xfcC\x00\x00\rC\x00\x00\x14D\x00\xc0\x01D\x00\x00\xf0A\x00\x80\xfeC\x00\x00GC\x00\x80\nD\x00\x00\x9aC\x00\x004C\x00\x80\x99C\x00\x00\x8bC\x00\x00bC\x00\x00rC\x00\x80\xe3C\x00\xc0\x0cD\x00@\x05D\x00\x00@A\x00\x00\xbeB\x00\x00\x12D\x00\x00\xf8A\x00\x80\xc2C\x00\x00\x01C\x00\x00\x1cB\x00\x00?C\x00\x80\xd7C\x00\xc0\x03D\x00\x00\xe0B\x00\x80\xd8C\x00\x00\x8aC\x00\x00\x98C\x00\x00,B\x00\x00mC\x00\x80\xa5C\x00\x80\x00D\x00\x00\x96C\x00\x00tC\x00\x00\x82B\x00\x00\x10A\x00\x00FC\x00\x00CC\x00\x00\x90A\x00\x80\x9cC\x00\x00\xdcB\x00\x00\xc4C\x00\x007C\x00\x80\xa9C\x00\x00kC\x00\x00\x13C\x00\x00\x15C\x00\x00\xb8A\x00\x00hC\x00\x00iC\x00\x80\xdeC\x00\x00\xa5C\x00@\x0eD\x00\x80\x87C\x00\x80\xfaC\x00\x00)C\x00\x00\x88B\x00@\x0cD\x00\xc0\nD\x00\x00PA\x00\x00#C\x00\x80\x8fC\x00\x00\xaeC\x00\x80\xe4C\x00\x80\xb9C\x00\x00~C\x00\x000B\x00\x80\x86C\x00\x00\x7fC\x00\x00\x03C\x00\x00\xbdC\x00\x00\xe2B\x00\x00pA\x00\x00\x9bC\x00\x80\xafC\x00\x00\xc4B\x00\x00+C\x00\x00\xc9C\x00\x00OC\x00\x00\xa2C\x00\x00\xecC\x00\x00$C\x00\x00\x87C\x00\x00xB\x00\x00jC\x00\xc0\rD\x00\x00lB\x00\x80\xa6C\x00\x00\xd4B\x00\x80\xd5C\x00\x80\xffC\x00\x00\xb0A\x00\x80\x11D\x00\x00\nC\x00\x00\xf2C\x00\x00tB\x00\x00\xa9C\x00\x00\xacB\x00\x00LB\x00\xc0\x07D\x00\x80\x9eC\x00\x00\xf6C\x00\x00|C\x00\x00\'C\x00\x00\xd0B\x00\x80\xe7C\x00\x80\xb8C\x00\x008B\x00\x00\xcfC\x00\xc0\tD\x00\x00\xc8A\x00\x00\xdeC\x00\x00ZC\x00\x80\x8dC\x00\x00\xb4C\x00\x00\xbaC\x00\x00\x05C\x00\x00NC\x00\x80\x81C\x00\x00\x98B\x00\x00\xa0A\x00\x00XB\x00\x80\xaaC\x00\x00\xbfC\x00\x00DC\x00\x80\xedC\x00\x80\xb4C\x00\x00\x18B\x00\x00\xb9C\x00@\x10D\x00\x80\xe6C\x00@\x14D\x00\x80\xa1C\x00\x00aC\x00\x00gC\x00\x80\xa8C\x00\x00\xe0A\x00\x00cC\x00\x80\x0fD\x00\x00HB\x00@\x04D\x00\x00\xefC\x00\x00\nD\x00\x00\x85C\x00\x00\xa3C\x00\x00\xccC\x00\x00\x10C\x00\x00\x12C\x00\x00\xa6C\x00\x00\x8aB\x00\x00\xc0A\x00\x00\xd8C\x00\x00\x0cB\x00\x80\xcfC\x00\x80\x01D\x00\x80\x8aC\x00\x00PC\x00\x80\x80C\x00\x80\xeaC\x00\x00\xc0@\x00\x00\x88C\x00\x00\xdaB\x00\xc0\x02D\x00\x00\xa6B\x00\x80\xacC\x00\x00\xc2C\x00\x00lC\x00\x00\xeeC\x00\x80\x94C\x00\x00]C\x00\x00\x8eB\x00\x80\xe5C\x00\x80\xdcC\x00\x80\x89C\x00\x80\xddC\x00\x00\x9cC\x00\x80\x15D\x00\x00\x10D\x00\x00\x80A\x00\x00(C\x00\x80\xa2C\x00\x00\xc1C\x00\x00\xcaC\x00\x80\xbaC\x00\x00oC\x00\x00\x1eC\x00\x00\xfcB\x00\x00TC\x00\x00\xedC\x00\x80\xc1C\x00\x00yC\x00\x00\xe8A\x00\x80\xdbC\x00\x00\xb5C\x00\x00=C\x00\x00xC\x00\x00zC\x00\x00\x04C\x00\x80\x0eD\x00\x009C\x00\x00_C\x00\x80\xbeC\x00\x00eC\x00\x00JC\x00\x00\xeeB\x00\x80\xe1C\x00\x80\xb6C\x00\x80\xb3C\x00\x80\xd2C\x00\x00\x84B\x00\x00<C\x00\x00\x90B\x00\x00\xa0B\x00\x80\x06D\x00\x80\xfcC\x00\x00\xf8B\x00\x80\xaeC\x00\x80\x95C\x00\x80\xe9C\x00\x00\xe0C\x00\x00\xfaC\x00@\x07D\x00\x80\xcdC\x00\xc0\x05D\x00\x80\xf4C\x00\x00\x9aB\x00\x00\x8cC\x00\x00pB\x00\x00\xe4C\x00\x00\xf0C\x00\x00\xa2B\x00\x80\x82C\x00\x80\xb7C\x00\x00qC\x00\x80\xbbC\x00\x00\x14C\x00\x00*C\x00\x80\x93C\x00\x00\xd2C\x00\x00\xf7C\x00\x00\xa7C\x00@\x06D\x00\x80\xc4C\x00\x80\xc7C\x00\x00EC\x00\x80\x05D\x00\x00PB\x00\x00\xe7C\x00\x00\xabC\x00\x00hB\x00\x00\x04D\x00\x80\xcaC\x00\x00<B\x00\x00\x1aC\x00\x00\xfeC\x00\x80\x84C\x00\x00\x0cD\x00\x00\xa1C\x00\x00\x96B\x00\x00\x86B\x00\x00\xc2B\x00\x00@@\x00\x00\xd6C\x00\x80\xbcC\x00\x00\xf9C\x00\x80\xd1C\x00\x00\xf1C\x00@\x12D\x00\x80\x13D\x00\x80\x96C\x00\x00\xb3C\x00\x80\xb1C\x00\x80\x90C\x00\x00\xd8B\x00\x00\xfbC\x00\x80\xbdC\x00\x00\xfdC\x00\x00 B\x00@\rD\x00\x00\x08D\x00\x00\xd4C\x00\x80\xadC\x00\x80\xbfC\x00\x80\x08D\x00\x00\xc6C\x00\x00\x02C\x00\x80\xf7C\x00\x00\x80B\x00\x002C\x00\x00\xb0C\x00\x00\xe9C\x00\x00\xddC\x00\x00\xdcC\x00\x80\x97C\x00\x00\xbbC\x00\x00\x9dC\x00\x00\xbcC\x00\x80\x9aC\x00\x80\xa7C\x00\x00\xeaB\x00\x00\x1cC\x00\x00\xe5C\x00\xc0\x0fD\x00\x00\x94C\x00\x80\xfdC\x00@\x03D\x00\x00\xb7C\x00\x80\x8cC\x00\x00 A\x00\x00sC\x00\x80\xf3C\x00\x80\xf8C\x00\xc0\x15D\x00\xc0\x12D\x00\x80\xf0C\x00\x00\xc8B\x00\x00\xc0C\x00\x00\x19C\x00\x00\x8dC\x00\x00\x0bD\x00\x00,C\x00\x80\x02D\x00\x00\x14B\x00\x00\xe8C\x00\x00\x0cC\x00\x00\x9eB\x00\x00XC\x00\x00\tC\x00\x00\xb2C\x00\x00\xffC\x00@\tD\x00\x00uC\x00\x00\xaaB\x00\x80\x12D\x00\x00wC\x00\x00\x80@\x00\x00\xeaC\x00\x00\x10B\x00\x00-C\x00\x00\xfaB\x00\x00\xe4B\x00\x00\x04B\x00\x00\xb6C\x00\x00\x0bC\x00\x00\xf0B\x00\x00\xcbC\x00\x00\x94B\x00\x80\xd4C\x00\x00\xfeB\x00\xc0\x13D\x00\x00\x9fC\x00\x00dB\x00\x00\xecB\x00\x80\xd9C\x00\x00\x8eC\x00\x00\xa8A\x00\x00\xd8A\x00\x00\x80?\x00\x00[C\x00\xc0\x06D\x00\x00\x88A\x00\x001C\x00\x00\xadC\x00\x00\x83C\x00\x00\xebC\x00\x80\xe2C\x00\x80\xc5C\x00\x00\x0eD\x00\x00^C\x00\x00\\C\x00\x00\x91C\x00\x00\xdfC\x00\x00`B\x00\x008C\x00\x00\x1dC\x00\x00\xc7C\x00\x00fC\x00\x80\xceC\x00\x00\xd0C\x00\x00\xf4C\x00\x80\xefC\x00\x00`A\x00\x00pC\x00\x00\x00D\x00\xc0\x08D\x00\x00\x03D\x00\x00\xa4B\x00\x00\x8cB\x00\x000A\x00\x00\x00C\x00\x00 C\x00\x00\xccB\x00\x00\x05D\x00\x00\x00\x00\x00\x00\xc6B\x00\x00\x0eC\x00\x00\x80C\x00\x80\x98C\x00\x00\xdeB\x00\x80\xfbC\x00\x00\x0fC\x00\x80\x85C\x00\x00\xacC\x00\x80\x83C\x00\x00\rD\x00\x00\xf4B\x00\x00\xb0B\x00\x00\x1fC\x00\x00\x17C\x00@\x01D\x00\x00|B\x00\x80\xc6C\x00\x80\xdaC\x00\x00\xcdC\x00\x00TB\x00@\x11D\x00\x80\x03D\x00\xc0\x10D\x00\x80\xf6C\x00\x00\xd5C\x00\x00$B\x00\x00\xd2B\x00@\x15D\x00\x00\xaaC\x00\x00VC\x00\x80\xe8C\x00\x00\xa4C\x00\x00\xb8B\x00\x00\x06C\x00\x00\\B\x00\x00SC\x00\x00\x11C\x00\x80\x10D\x00\x006C\x00\x80\xc9C\x00\x00DB\x00\x00\xdbC\x00@\x08D\x00\x00/C\x00\x00\x90C\x00\x00\x02D\x00\x00\x86C\x00\x80\xd3C\x00\x00\xc8C\x00\x80\x8bC\x00\x00KC\x00\x00\xa8B\x00\x00\xb8C\x00@\x00D\x00\x00\xa0@\x00\x00\x07C\x00\x00\xf6B\x00\x00UC\x00\x00!C\x00\x00\x99C\x00\x00\x8fC\x00@\x0bD\x00\x80\x04D\x00\x80\x9fC\x00\x80\xf9C\x00\x00\x95C\x00\x80\x9bC\x00\x00\x01D\x00\x00\x82C\x00\x00HC\x00\x00\x92C\x00\x80\xa0C\x00\x00\x07D\x00\x00\xf8C\x00\xc0\x04D\x00\x00\xbeC\x00\x00\xceC\x00\x00\xc3C\x00\x00"C\x00\x00\xb1C\x00\x80\x8eC\x00\x005C\x00\x00nC\x00\x80\xecC\x00\x00\xe3C\x00\x00WC\x00\x80\tD\x00\x00AC\x00\x00\xf2B\x00\x80\x0cD\x00\x80\x88C\x00\x00\xe2C\x00\x00\x15D\x00\x00\x1bC\x00\x00\x13D\x00\x00\xb4B\x00@\x02D\x00\x00\x0fD\x00\x80\xdfC\x00\x80\xf2C\x00\x80\xcbC\x00\x80\rD\x00\x80\x9dC\x00\x00\xdaC\x00\x80\xe0C\x00\x00\xbcB\x00\x00\xd0A\x00\x00\xafC\x00\x80\xd0C\x00\x00RC\x00\x00}C\x00\x00\x81C\x00\x00\x89C\x00\x00\tD\x00\x80\xc0C\x00\x00\xa8C\x00\x80\xc8C\x00\x00\xb6B\x00\x00\x98A\x00\x80\xebC\x00\x00\xc5C\x00\x00MC\x00\x80\xabC\x00\x00IC\x00\xc0\x11D\x00\x00:C\x00\x80\xeeC\x00\xc0\x00D\x00\x00BC\x00\x00\xcaB\x00\x00>C\x00\x00\xe0@\x00\x00\xd6B\x00\x80\xb0C\x00\x00YC\x00\x00\xd1C\x00\x00\x11D\x00\x00;C\x00\x80\x91C\x00\x00\x00@\x00\x00\xd3C\x00\x80\xc3C\x00\x80\xccC\x00\xc0\x0bD\x00\x00QC\x00\x00\xa0C\x00\x00\xe6B\x00\x00@B\x00\x00{C\x00\x00&C\x00\x00\x92B\x00\x80\xf1C\x00\x00\x08C\x00\x00\x93C\x00\x00\xd7C\x00\x80\xa3C\x00\x00\x9eC\x00\x80\xa4C\x00\x00\x9cB\x00\x00\xe1C\x00\x00\xb2B\x00\x00\xf3C\x00\x00\x00A\x00\x000C\x00\x00dC\x00@\nD\x00\x80\x0bD\x00\x00`C\x00\x00.C\x00@\x13D\x00\x80\xb2C\x00\x004B\x00\x80\xf5C\x00\x00\xaeB\x00\x00(B\x00\x00\x97C\x00\x00\x16C\x00\x00\x84C\x00\x80\xb5C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4866
(dp4867
g60
(dp4868
g48
I01
sg56
I01
ssg62
g4859
sg63
(lp4869
g48
ag56
asg65
(lp4870
I600
aI1
asbsg67
S'random'
p4871
sg69
g70
(g51
(I0
tS'b'
tRp4872
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4873
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\xa3\x01\x00\x00\x7f\x01\x00\x000\x02\x00\x00\x1f\x01\x00\x00i\x01\x00\x00\xdb\x01\x00\x00\xb9\x00\x00\x00(\x02\x00\x00G\x02\x00\x00=\x00\x00\x00N\x01\x00\x00\x9e\x01\x00\x00(\x00\x00\x00U\x00\x00\x00\x97\x01\x00\x00b\x00\x00\x00\xcc\x00\x00\x00\x82\x01\x00\x00@\x00\x00\x00\x1b\x02\x00\x00\x92\x00\x00\x00}\x01\x00\x00u\x00\x00\x00I\x00\x00\x00\xb0\x00\x00\x00\x88\x00\x00\x00\x0f\x02\x00\x00~\x01\x00\x00\xa2\x00\x00\x00\xd9\x00\x00\x00\x1b\x00\x00\x00+\x00\x00\x00\x15\x00\x00\x00o\x01\x00\x00\x04\x00\x00\x00\xb2\x00\x00\x00k\x01\x00\x00\\\x01\x00\x00\x99\x00\x00\x00.\x00\x00\x00/\x01\x00\x00\xbe\x01\x00\x00S\x02\x00\x006\x00\x00\x00\\\x00\x00\x00P\x02\x00\x00\x85\x00\x00\x00\x16\x01\x00\x008\x02\x00\x00\xcd\x01\x00\x00\xa5\x00\x00\x00|\x00\x00\x00\x10\x01\x00\x00\xb8\x01\x00\x00\x93\x00\x00\x00\xc7\x01\x00\x00\x8e\x01\x00\x00y\x01\x00\x00\x13\x01\x00\x00p\x00\x00\x00\xfd\x00\x00\x00y\x00\x00\x00m\x00\x00\x00\xb4\x01\x00\x009\x01\x00\x00<\x00\x00\x00\xeb\x00\x00\x00\x1d\x01\x00\x00R\x00\x00\x00\xaf\x00\x00\x00\x9d\x01\x00\x00\xc4\x00\x00\x00\xed\x00\x00\x00;\x02\x00\x00t\x01\x00\x00\x1c\x01\x00\x00\x91\x00\x00\x00\xfb\x00\x00\x00C\x02\x00\x00_\x01\x00\x00\xee\x00\x00\x00\x00\x01\x00\x00\x9c\x01\x00\x00\xbd\x00\x00\x00\xd8\x01\x00\x00f\x01\x00\x00{\x00\x00\x00R\x02\x00\x00\xb0\x01\x00\x00E\x02\x00\x00\x04\x02\x00\x00\x1a\x02\x00\x00\xc5\x01\x00\x00\x00\x00\x00\x00\x0e\x02\x00\x00)\x00\x00\x00\n\x00\x00\x00\x1e\x01\x00\x00e\x00\x00\x00\xa4\x01\x00\x00U\x01\x00\x00&\x02\x00\x00\xa1\x01\x00\x00\x03\x00\x00\x00\x82\x00\x00\x00\xbf\x01\x00\x00r\x00\x00\x00)\x02\x00\x00+\x01\x00\x00\xbb\x00\x00\x00B\x00\x00\x00\xa8\x01\x00\x002\x00\x00\x00a\x00\x00\x00n\x01\x00\x007\x02\x00\x00\x16\x00\x00\x00E\x01\x00\x00z\x01\x00\x00\xe6\x00\x00\x00r\x01\x00\x00\xfd\x01\x00\x00\xaf\x01\x00\x00\xdd\x01\x00\x00\xf1\x00\x00\x00m\x01\x00\x00\xd4\x00\x00\x00v\x01\x00\x00\x9f\x01\x00\x00-\x00\x00\x007\x01\x00\x00_\x00\x00\x00\xdf\x00\x00\x00\x8e\x00\x00\x00\xc6\x01\x00\x00\xdc\x01\x00\x00=\x02\x00\x00a\x01\x00\x00w\x00\x00\x00q\x01\x00\x00^\x01\x00\x00\x18\x00\x00\x00\xa5\x01\x00\x00\xaa\x01\x00\x00\xac\x00\x00\x00\xc9\x01\x00\x00\xad\x00\x00\x00G\x00\x00\x00\x05\x01\x00\x00H\x00\x00\x00U\x02\x00\x00\xb2\x01\x00\x00\x08\x00\x00\x00W\x01\x00\x00\x17\x01\x00\x00\x02\x02\x00\x00F\x01\x00\x00\x90\x01\x00\x00\xd3\x00\x00\x00\xb1\x01\x00\x00\xa0\x01\x00\x00\xdf\x01\x00\x00\xf3\x01\x00\x00V\x00\x00\x00k\x00\x00\x00\x10\x00\x00\x00:\x02\x00\x00\x81\x00\x00\x00\xcd\x00\x00\x00Q\x00\x00\x00\x06\x01\x00\x00f\x00\x00\x00Z\x01\x00\x00l\x01\x00\x00M\x02\x00\x00\xd0\x01\x00\x00H\x02\x00\x00\x83\x01\x00\x00:\x01\x00\x00\x0f\x00\x00\x00 \x00\x00\x00\xf6\x01\x00\x00\xcb\x01\x00\x00D\x00\x00\x00\x8f\x01\x00\x00\xe1\x00\x00\x00"\x02\x00\x00.\x02\x00\x00\xec\x00\x00\x00\xdc\x00\x00\x00\'\x02\x00\x00/\x00\x00\x00\x14\x00\x00\x00\xfc\x01\x00\x00%\x02\x00\x00?\x00\x00\x00\x96\x00\x00\x00\x0e\x01\x00\x00>\x00\x00\x00\x1d\x00\x00\x00\xea\x01\x00\x00 \x02\x00\x00\xe5\x00\x00\x00\xd7\x01\x00\x00\x0c\x00\x00\x00\x1e\x02\x00\x00\x8f\x00\x00\x00h\x00\x00\x00\xb6\x00\x00\x005\x02\x00\x00\x12\x02\x00\x00\xc8\x01\x00\x00\xd5\x00\x00\x00\xde\x01\x00\x00\xc2\x01\x00\x00\xfa\x01\x00\x00`\x01\x00\x00+\x02\x00\x00\x8a\x00\x00\x00\x80\x01\x00\x00\x8b\x01\x00\x00\xc3\x00\x00\x00\x8a\x01\x00\x00\xe2\x00\x00\x00L\x02\x00\x00\x9f\x00\x00\x00#\x00\x00\x00\xa3\x00\x00\x00I\x02\x00\x00\xe4\x00\x00\x00\x92\x01\x00\x00\xa0\x00\x00\x00J\x00\x00\x00K\x00\x00\x00n\x00\x00\x00F\x00\x00\x00\xc0\x00\x00\x007\x00\x00\x00\xf7\x01\x00\x00\xd2\x00\x00\x00\x98\x01\x00\x00\x03\x01\x00\x00$\x00\x00\x00O\x01\x00\x00;\x00\x00\x00e\x01\x00\x00\t\x00\x00\x00h\x01\x00\x00\xdd\x00\x00\x00\xd8\x00\x00\x00\xde\x00\x00\x009\x02\x00\x00\x80\x00\x00\x00\x13\x02\x00\x00[\x00\x00\x00^\x00\x00\x00\xa6\x01\x00\x00\xb7\x00\x00\x00\x14\x02\x00\x00\x90\x00\x00\x00\xe9\x01\x00\x00\x01\x01\x00\x00\x85\x01\x00\x00\xad\x01\x00\x00V\x02\x00\x00\x19\x01\x00\x00\xa9\x00\x00\x00\xab\x01\x00\x00\xd3\x01\x00\x00]\x00\x00\x00l\x00\x00\x00O\x00\x00\x00\xba\x00\x00\x00\xff\x01\x00\x00\x15\x02\x00\x00\xc7\x00\x00\x004\x00\x00\x00\xb5\x00\x00\x00"\x00\x00\x00\xd6\x01\x00\x00\xfc\x00\x00\x00M\x01\x00\x00X\x01\x00\x00\x8b\x00\x00\x00|\x01\x00\x00\xf5\x01\x00\x00\xe1\x01\x00\x00W\x00\x00\x00\xd1\x01\x00\x00*\x01\x00\x00\x8c\x01\x00\x00/\x02\x00\x00\xeb\x01\x00\x00\x0e\x00\x00\x00>\x02\x00\x00\x07\x01\x00\x00I\x01\x00\x00\xc2\x00\x00\x00\xe6\x01\x00\x00\xf3\x00\x00\x00:\x00\x00\x00\'\x01\x00\x00T\x02\x00\x00?\x01\x00\x005\x00\x00\x00\xa7\x01\x00\x00\xe0\x01\x00\x00!\x00\x00\x00\x1f\x00\x00\x00C\x01\x00\x00c\x00\x00\x00\xe7\x01\x00\x00\xc9\x00\x00\x00A\x00\x00\x00A\x01\x00\x00\x0b\x02\x00\x00A\x02\x00\x00~\x00\x00\x00x\x01\x00\x00\xe4\x01\x00\x006\x02\x00\x00\xec\x01\x00\x00\x1b\x01\x00\x00\x9e\x00\x00\x00i\x00\x00\x00\xce\x00\x00\x00\xaa\x00\x00\x00@\x02\x00\x00\xc4\x01\x00\x00B\x02\x00\x00M\x00\x00\x008\x00\x00\x00\xae\x00\x00\x00q\x00\x00\x00\n\x01\x00\x00D\x01\x00\x00\x18\x02\x00\x00\xa1\x00\x00\x00z\x00\x00\x00E\x00\x00\x00\xc1\x01\x00\x00\x94\x00\x00\x00\x12\x01\x00\x00\x1f\x02\x00\x00\xac\x01\x00\x00\xbe\x00\x00\x00\x84\x01\x00\x003\x01\x00\x00X\x00\x00\x00\xf2\x00\x00\x00\x10\x02\x00\x00d\x00\x00\x00;\x01\x00\x00*\x02\x00\x00\xf4\x01\x00\x00)\x01\x00\x00b\x01\x00\x00O\x02\x00\x00(\x01\x00\x00\xe9\x00\x00\x00\x8c\x00\x00\x00\x98\x00\x00\x00\xdb\x00\x00\x00W\x02\x00\x00p\x01\x00\x00\xe8\x00\x00\x00L\x01\x00\x00\x02\x01\x00\x00\xd9\x01\x00\x00\x84\x00\x00\x00\x9a\x00\x00\x00Z\x00\x00\x00\x8d\x00\x00\x00\xd1\x00\x00\x00@\x01\x00\x00\x04\x01\x00\x00B\x01\x00\x00!\x01\x00\x00`\x00\x00\x00-\x01\x00\x00\xf0\x01\x00\x00\xe3\x00\x00\x00\x95\x00\x00\x004\x01\x00\x00V\x01\x00\x00\x17\x02\x00\x00\xcf\x00\x00\x00\xd7\x00\x00\x00\xbf\x00\x00\x00,\x00\x00\x00\xf2\x01\x00\x002\x02\x00\x00C\x00\x00\x00\x0c\x01\x00\x00\x1d\x02\x00\x00\x88\x01\x00\x006\x01\x00\x00\xb5\x01\x00\x00\x91\x01\x00\x00\r\x01\x00\x00\xd5\x01\x00\x00\x19\x02\x00\x00g\x00\x00\x00\xcc\x01\x00\x00\xd0\x00\x00\x00\x15\x01\x00\x00s\x01\x00\x00\t\x02\x00\x00\xab\x00\x00\x003\x02\x00\x00\xb7\x01\x00\x00\xf8\x00\x00\x00\xf1\x01\x00\x00\x93\x01\x00\x00\x86\x00\x00\x00\xb3\x00\x00\x00\x94\x01\x00\x00\x11\x02\x00\x00,\x02\x00\x00#\x01\x00\x00\x08\x01\x00\x00\xea\x00\x00\x001\x02\x00\x00\xd4\x01\x00\x002\x01\x00\x00u\x01\x00\x00\xbd\x01\x00\x00s\x00\x00\x00 \x01\x00\x00\x05\x00\x00\x00?\x02\x00\x000\x00\x00\x00\xb1\x00\x00\x003\x00\x00\x00\x06\x00\x00\x00{\x01\x00\x00\x0c\x02\x00\x00\xb6\x01\x00\x00\xce\x01\x00\x00\xda\x00\x00\x00>\x01\x00\x00\xc6\x00\x00\x00=\x01\x00\x00\xc8\x00\x00\x00\x89\x00\x00\x00L\x00\x00\x00\x8d\x01\x00\x00\x07\x02\x00\x00\xf5\x00\x00\x00\r\x02\x00\x00D\x02\x00\x00\xe7\x00\x00\x00\x00\x02\x00\x00\x87\x01\x00\x00\xf9\x01\x00\x00%\x00\x00\x00\xfe\x00\x00\x00Y\x00\x00\x00G\x01\x00\x00\xc5\x00\x00\x00\x02\x00\x00\x00\x9c\x00\x00\x00\x11\x01\x00\x00\x83\x00\x00\x00]\x01\x00\x00\xc3\x01\x00\x00<\x01\x00\x00\xf4\x00\x00\x00j\x01\x00\x00\xb8\x00\x00\x00\x86\x01\x00\x00\x1c\x02\x00\x00j\x00\x00\x00\xf8\x01\x00\x00\xd6\x00\x00\x00\x97\x00\x00\x00\xc1\x00\x00\x00#\x02\x00\x00\xa7\x00\x00\x00\x96\x01\x00\x00\xff\x00\x00\x00T\x01\x00\x00$\x01\x00\x00<\x02\x00\x00x\x00\x00\x00\x08\x02\x00\x00F\x02\x00\x00P\x01\x00\x00\x95\x01\x00\x00\xfa\x00\x00\x00\x0b\x00\x00\x00Q\x02\x00\x00\x7f\x00\x00\x00\xbc\x01\x00\x00\t\x01\x00\x008\x01\x00\x00\xee\x01\x00\x00Q\x01\x00\x00"\x01\x00\x00\xe5\x01\x00\x00\xf6\x00\x00\x00P\x00\x00\x00,\x01\x00\x00\xa9\x01\x00\x00\x17\x00\x00\x00\xf0\x00\x00\x00.\x01\x00\x00J\x01\x00\x00\x18\x01\x00\x00\x1c\x00\x00\x00c\x01\x00\x00t\x00\x00\x00\x99\x01\x00\x00\xda\x01\x00\x009\x00\x00\x00$\x02\x00\x00\xe8\x01\x00\x00\xb3\x01\x00\x00\xb4\x00\x00\x00\x1a\x00\x00\x00\xd2\x01\x00\x00\x05\x02\x00\x00[\x01\x00\x00\xbc\x00\x00\x00\x9b\x01\x00\x00K\x01\x00\x00\xba\x01\x00\x001\x00\x00\x00\x14\x01\x00\x00\xa6\x00\x00\x00\xe3\x01\x00\x00\xef\x01\x00\x00\xa2\x01\x00\x00\'\x00\x00\x00\x0f\x01\x00\x00\xf9\x00\x00\x00\x12\x00\x00\x00\x0b\x01\x00\x00\xef\x00\x00\x00\x81\x01\x00\x00\xed\x01\x00\x00\xf7\x00\x00\x00\x07\x00\x00\x00}\x00\x00\x001\x01\x00\x00\xcf\x01\x00\x005\x01\x00\x00\x9a\x01\x00\x00\x16\x02\x00\x00d\x01\x00\x00\xfb\x01\x00\x00\x87\x00\x00\x00\xa8\x00\x00\x00J\x02\x00\x00\x1e\x00\x00\x00T\x00\x00\x00Y\x01\x00\x00\xe2\x01\x00\x00K\x02\x00\x004\x02\x00\x00\x1a\x01\x00\x00S\x00\x00\x00\xfe\x01\x00\x00&\x00\x00\x00\xae\x01\x00\x000\x01\x00\x00\n\x02\x00\x00o\x00\x00\x00\x89\x01\x00\x00N\x00\x00\x00\xe0\x00\x00\x00\x01\x00\x00\x00\x06\x02\x00\x00\x13\x00\x00\x00\xa4\x00\x00\x00H\x01\x00\x00\xcb\x00\x00\x00\x9b\x00\x00\x00\xca\x01\x00\x00\xbb\x01\x00\x00-\x02\x00\x00\xb9\x01\x00\x00v\x00\x00\x00!\x02\x00\x00*\x00\x00\x00%\x01\x00\x00g\x01\x00\x00S\x01\x00\x00\x03\x02\x00\x00N\x02\x00\x00&\x01\x00\x00w\x01\x00\x00\x19\x00\x00\x00\x9d\x00\x00\x00\r\x00\x00\x00\x11\x00\x00\x00\x01\x02\x00\x00\xc0\x01\x00\x00\xca\x00\x00\x00R\x01\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4874
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4875
(g4873
S'R\x01\x00\x00'
tRp4876
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4877
I01
sb.