ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject808
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 808
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Correct?'
p16
aS'Category'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vf
sS'age'
p31
V22
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I2
sS'_exp'
p41
I74365264
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I54
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I11
I55
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I11
I55
tg55
I00
S'\x00\x00\x80@\x00\x00\xb0A\x00\x00 B\x00\x00<B\x00\x00LB\x00\x00XB\x00\x00\x82B\x00\x00\x96B\x00\x00\xb4B\x00\x00\xfcB\x00\x00\x01C\x00\x00\x03C\x00\x00&C\x00\x00-C\x00\x005C\x00\x00HC\x00\x00LC\x00\x00PC\x00\x00RC\x00\x00UC\x00\x00[C\x00\x00^C\x00\x00dC\x00\x00iC\x00\x00pC\x00\x80\x87C\x00\x00\x8cC\x00\x80\xa3C\x00\x80\xb6C\x00\x80\xbbC\x00\x00\xbfC\x00\x00\xc0C\x00\x80\xc1C\x00\x00\xc9C\x00\x00\xceC\x00\x00\xcfC\x00\x00\xd2C\x00\x00\xd4C\x00\x00\xd6C\x00\x80\xdbC\x00\x80\xdeC\x00\x00\xe2C\x00\x80\xe2C\x00\x80\xe4C\x00\x00\xe9C\x00\x00\xefC\x00@\x00D\x00\xc0\x01D\x00@\x04D\x00@\x07D\x00\x80\x08D\x00@\nD\x00\x80\nD\x00\xc0\nD\x00\xc0\x14D\x00\x00PA\x00\x00\xc0A\x00\x00\x18B\x00\x00hB\x00\x00xB\x00\x00|B\x00\x00\x8eB\x00\x00\xf0B\x00\x00\xfaB\x00\x00\x12C\x00\x00\x1dC\x00\x00#C\x00\x00)C\x00\x00/C\x00\x008C\x00\x00XC\x00\x00_C\x00\x00`C\x00\x00aC\x00\x00xC\x00\x00~C\x00\x80\x82C\x00\x80\x85C\x00\x00\x98C\x00\x80\x9dC\x00\x80\xa0C\x00\x00\xa4C\x00\x80\xb5C\x00\x00\xb6C\x00\x80\xbfC\x00\x80\xc7C\x00\x00\xc8C\x00\x80\xcaC\x00\x80\xceC\x00\x80\xd5C\x00\x00\xdcC\x00\x00\xddC\x00\x00\xdfC\x00\x80\xe3C\x00\x00\xecC\x00\x80\xecC\x00\x80\xf2C\x00\x00\xf8C\x00\x00\xfaC\x00\x80\xfbC\x00\x80\xfcC\x00\x80\x00D\x00\xc0\x02D\x00\x80\x05D\x00\xc0\x05D\x00\xc0\x07D\x00\xc0\tD\x00\x80\x0bD\x00\xc0\x11D\x00\x80\x13D\x00\x00 A\x00\x00@A\x00\x00\x88A\x00\x00\xb8A\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x008B\x00\x00`B\x00\x00\xa6B\x00\x00\xb2B\x00\x00\xdcB\x00\x00\x14C\x00\x00"C\x00\x006C\x00\x00<C\x00\x00YC\x00\x00eC\x00\x00sC\x00\x00vC\x00\x80\x81C\x00\x80\x8aC\x00\x00\x8dC\x00\x80\x8fC\x00\x00\x92C\x00\x80\x93C\x00\x00\x95C\x00\x00\xa0C\x00\x80\xa8C\x00\x00\xaaC\x00\x80\xb0C\x00\x00\xb2C\x00\x80\xbaC\x00\x00\xc3C\x00\x00\xc4C\x00\x00\xccC\x00\x00\xd8C\x00\x00\xdeC\x00\x80\xe0C\x00\x80\xe1C\x00\x00\xe4C\x00\x00\xe6C\x00\x80\xe6C\x00\x00\xe7C\x00\x00\xeaC\x00\x80\x01D\x00\x80\x04D\x00\x00\tD\x00\x00\rD\x00\x00\x11D\x00@\x11D\x00\x80\x14D\x00\xc0\x15D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`A\x00\x00\xa0A\x00\x00,B\x00\x00lB\x00\x00tB\x00\x00\x9eB\x00\x00\xb0B\x00\x00\xb6B\x00\x00\xc4B\x00\x00\xe0B\x00\x00\xf2B\x00\x00\x02C\x00\x00\x0cC\x00\x00\x0fC\x00\x00!C\x00\x004C\x00\x00:C\x00\x00;C\x00\x00?C\x00\x00FC\x00\x00JC\x00\x00OC\x00\x00gC\x00\x00jC\x00\x00{C\x00\x80\x83C\x00\x80\x84C\x00\x00\x96C\x00\x00\x9dC\x00\x80\x9fC\x00\x80\xb7C\x00\x00\xb9C\x00\x80\xbcC\x00\x80\xc2C\x00\x80\xc5C\x00\x00\xc6C\x00\x00\xc7C\x00\x00\xcbC\x00\x80\xcbC\x00\x80\xdcC\x00\x80\xe5C\x00\x00\xeeC\x00\x80\xf4C\x00\x00\xf7C\x00\x80\xffC\x00@\x03D\x00@\x05D\x00@\x0bD\x00\x80\rD\x00\xc0\x0eD\x00\x00\x0fD\x00\x80\x0fD\x00\x80\x11D\x00\x80\x12D\x00@\x13D\x00\x00@@\x00\x00(B\x00\x00DB\x00\x00\x9aB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xcaB\x00\x00\xdaB\x00\x00\xdeB\x00\x00\xe8B\x00\x00\x00C\x00\x00\x05C\x00\x00\x07C\x00\x00\rC\x00\x00%C\x00\x00,C\x00\x00IC\x00\x00KC\x00\x00MC\x00\x00TC\x00\x00hC\x00\x00mC\x00\x00yC\x00\x00}C\x00\x00\x82C\x00\x00\x87C\x00\x80\x91C\x00\x80\x92C\x00\x80\x96C\x00\x80\x98C\x00\x00\xa2C\x00\x80\xa6C\x00\x80\xa7C\x00\x00\xb7C\x00\x80\xb8C\x00\x00\xc1C\x00\x80\xc3C\x00\x80\xc9C\x00\x80\xcdC\x00\x80\xd4C\x00\x80\xdfC\x00\x00\xe8C\x00\x80\xedC\x00\x00\xf2C\x00\x80\xf9C\x00\x00\xfbC\x00\x80\xfeC\x00\x80\x03D\x00\x00\x07D\x00\x00\x0bD\x00\xc0\x0bD\x00@\x0eD\x00\x00\x12D\x00\xc0\x12D\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x80A\x00\x00\xc8A\x00\x00\xe8A\x00\x00\x00B\x00\x00\x86B\x00\x00\xc6B\x00\x00\xd4B\x00\x00\xeaB\x00\x00\xf8B\x00\x00\xfeB\x00\x00\x0bC\x00\x00\x0eC\x00\x00\x1cC\x00\x00(C\x00\x00AC\x00\x00VC\x00\x00fC\x00\x00lC\x00\x00rC\x00\x00wC\x00\x00|C\x00\x80\x89C\x00\x00\x8aC\x00\x00\x8bC\x00\x00\x93C\x00\x00\x97C\x00\x80\x9aC\x00\x00\x9bC\x00\x00\x9fC\x00\x80\xa5C\x00\x80\xaaC\x00\x80\xb3C\x00\x00\xb8C\x00\x00\xbcC\x00\x00\xbdC\x00\x80\xbdC\x00\x00\xbeC\x00\x80\xc4C\x00\x80\xd0C\x00\x80\xd2C\x00\x00\xd5C\x00\x80\xd9C\x00\x00\xe0C\x00\x80\xeeC\x00\x80\xefC\x00\x80\xf0C\x00\x00\xf5C\x00\x80\xf6C\x00\xc0\x04D\x00\x80\x06D\x00@\tD\x00\x80\x0cD\x00@\rD\x00\x80\x15D\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x10A\x00\x00\x90A\x00\x00\xf8A\x00\x00\x10B\x00\x00$B\x00\x00\x9cB\x00\x00\xa2B\x00\x00\xb8B\x00\x00\xc2B\x00\x00\xc8B\x00\x00\xe6B\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf6B\x00\x00\x04C\x00\x00\x06C\x00\x00\x13C\x00\x00.C\x00\x00CC\x00\x00uC\x00\x80\x80C\x00\x00\x86C\x00\x80\x88C\x00\x00\x94C\x00\x80\x95C\x00\x80\x99C\x00\x80\xa4C\x00\x00\xa7C\x00\x00\xa8C\x00\x00\xa9C\x00\x80\xb2C\x00\x00\xbbC\x00\x80\xc0C\x00\x80\xc6C\x00\x00\xcaC\x00\x80\xd1C\x00\x00\xd3C\x00\x00\xd7C\x00\x80\xeaC\x00\x80\xf1C\x00\x00\xf6C\x00\x00\xfeC\x00\x00\x01D\x00\x00\x02D\x00@\x02D\x00\xc0\x03D\x00\x00\x06D\x00@\x06D\x00@\x0cD\x00\x80\x10D\x00\xc0\x13D\x00\x00\x14D\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\x80B\x00\x00\x88B\x00\x00\x8cB\x00\x00\xbeB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xe4B\x00\x00\nC\x00\x00\x17C\x00\x00\x1bC\x00\x00>C\x00\x00@C\x00\x00DC\x00\x00EC\x00\x00GC\x00\x00WC\x00\x00]C\x00\x00bC\x00\x00cC\x00\x00tC\x00\x00\x88C\x00\x80\x8dC\x00\x00\x8fC\x00\x80\x97C\x00\x80\x9bC\x00\x00\x9cC\x00\x80\xa1C\x00\x80\xa2C\x00\x80\xa9C\x00\x80\xacC\x00\x80\xadC\x00\x00\xb1C\x00\x80\xb9C\x00\x00\xbaC\x00\x80\xc8C\x00\x80\xccC\x00\x80\xdaC\x00\x00\xe1C\x00\x00\xedC\x00\x00\xf3C\x00\x80\xf3C\x00\x00\xf9C\x00\x00\xffC\x00@\x08D\x00\xc0\x08D\x00\x00\x0cD\x00\x00\x0eD\x00\x80\x0eD\x00@\x0fD\x00\x00\x10D\x00@\x10D\x00\x00\x00\x00\x00\x00\xe0@\x00\x00pA\x00\x00\xa8A\x00\x000B\x00\x004B\x00\x00HB\x00\x00\x84B\x00\x00\xa4B\x00\x00\xaaB\x00\x00\xbaB\x00\x00\xd8B\x00\x00\x15C\x00\x00\x18C\x00\x00\x19C\x00\x00$C\x00\x002C\x00\x003C\x00\x007C\x00\x00=C\x00\x00BC\x00\x00NC\x00\x00QC\x00\x00SC\x00\x00qC\x00\x00\x7fC\x00\x00\x83C\x00\x00\x84C\x00\x80\x86C\x00\x80\x8bC\x00\x00\x90C\x00\x80\x90C\x00\x00\x9aC\x00\x80\x9eC\x00\x00\xabC\x00\x00\xadC\x00\x00\xaeC\x00\x80\xafC\x00\x80\xb4C\x00\x00\xb5C\x00\x00\xc2C\x00\x80\xd8C\x00\x00\xdaC\x00\x80\xddC\x00\x00\xe5C\x00\x80\xe7C\x00\x80\xe8C\x00\x80\xe9C\x00\x80\xf5C\x00\x80\xfaC\x00\x80\xfdC\x00\x00\x03D\x00\x00\x04D\x00\xc0\x06D\x00\xc0\x0cD\x00\xc0\rD\x00\x00\x80?\x00\x00\x00@\x00\x00\x98A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\x14B\x00\x00\x1cB\x00\x00PB\x00\x00TB\x00\x00\x8aB\x00\x00\x94B\x00\x00\x98B\x00\x00\xa0B\x00\x00\xa8B\x00\x00\xbcB\x00\x00\xc0B\x00\x00\xe2B\x00\x00\xf4B\x00\x00\x10C\x00\x00\x1aC\x00\x00\x1eC\x00\x00+C\x00\x000C\x00\x001C\x00\x00\\C\x00\x00kC\x00\x00nC\x00\x00oC\x00\x00\x81C\x00\x00\x85C\x00\x00\x89C\x00\x00\x8eC\x00\x80\x9cC\x00\x00\x9eC\x00\x00\xa5C\x00\x80\xaeC\x00\x00\xafC\x00\x80\xb1C\x00\x00\xb4C\x00\x00\xc5C\x00\x80\xcfC\x00\x00\xd1C\x00\x80\xd3C\x00\x80\xd6C\x00\x00\xe3C\x00\x00\xf0C\x00\x00\xf4C\x00\x00\xfcC\x00\x00\x05D\x00\x80\x07D\x00\x80\tD\x00@\x12D\x00\x00\x13D\x00@\x15D\x00\x000A\x00\x00\xf0A\x00\x00@B\x00\x00\\B\x00\x00dB\x00\x00pB\x00\x00\x90B\x00\x00\x92B\x00\x00\xd6B\x00\x00\x08C\x00\x00\tC\x00\x00\x11C\x00\x00\x16C\x00\x00\x1fC\x00\x00 C\x00\x00\'C\x00\x00*C\x00\x009C\x00\x00ZC\x00\x00zC\x00\x00\x80C\x00\x80\x8cC\x00\x80\x8eC\x00\x00\x91C\x00\x80\x94C\x00\x00\x99C\x00\x00\xa1C\x00\x00\xa3C\x00\x00\xa6C\x00\x80\xabC\x00\x00\xacC\x00\x00\xb0C\x00\x00\xb3C\x00\x80\xbeC\x00\x00\xcdC\x00\x00\xd0C\x00\x80\xd7C\x00\x00\xd9C\x00\x00\xdbC\x00\x00\xebC\x00\x80\xebC\x00\x00\xf1C\x00\x80\xf7C\x00\x80\xf8C\x00\x00\xfdC\x00\x00\x00D\x00\xc0\x00D\x00@\x01D\x00\x80\x02D\x00\x00\x08D\x00\x00\nD\x00\xc0\x0fD\x00\xc0\x10D\x00@\x14D\x00\x00\x15D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I11
aI55
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I11
I55
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I6
aI10
aI0
aI2
aI8
aI10
aI8
aI4
aI3
aI5
aI2
aI3
aI6
aI3
aI9
aI4
aI9
aI3
aI3
aI8
aI9
aI3
aI5
aI4
aI8
aI5
aI7
aI10
aI8
aI3
aI9
aI5
aI10
aI1
aI6
aI6
aI3
aI3
aI9
aI9
aI1
aI2
aI2
aI1
aI4
aI10
aI10
aI10
aI8
aI8
aI9
aI6
aI3
aI1
aI2
aI9
aI2
aI2
aI2
aI8
aI2
aI5
aI6
aI2
aI6
aI4
aI9
aI4
aI9
aI7
aI0
aI9
aI2
aI7
aI0
aI7
aI4
aI2
aI1
aI3
aI5
aI2
aI2
aI5
aI2
aI5
aI8
aI2
aI1
aI0
aI4
aI6
aI2
aI6
aI6
aI3
aI0
aI8
aI7
aI1
aI1
aI8
aI2
aI0
aI4
aI1
aI5
aI7
aI4
aI0
aI9
aI1
aI1
aI2
aI2
aI10
aI7
aI3
aI0
aI4
aI3
aI6
aI6
aI10
aI5
aI10
aI8
aI8
aI0
aI8
aI0
aI0
aI7
aI8
aI9
aI2
aI8
aI6
aI5
aI1
aI10
aI10
aI7
aI0
aI5
aI0
aI3
aI7
aI0
aI10
aI1
aI0
aI4
aI4
aI7
aI10
aI6
aI0
aI2
aI0
aI10
aI8
aI3
aI9
aI10
aI4
aI3
aI5
aI6
aI0
aI1
aI9
aI9
aI3
aI7
aI9
aI5
aI4
aI1
aI1
aI5
aI8
aI7
aI4
aI4
aI1
aI3
aI6
aI10
aI1
aI5
aI8
aI3
aI7
aI10
aI4
aI10
aI9
aI4
aI3
aI8
aI1
aI10
aI5
aI2
aI8
aI9
aI8
aI3
aI7
aI7
aI4
aI6
aI5
aI9
aI0
aI2
aI10
aI3
aI9
aI0
aI8
aI9
aI9
aI10
aI3
aI7
aI6
aI6
aI7
aI7
aI1
aI10
aI6
aI9
aI1
aI3
aI3
aI3
aI0
aI1
aI9
aI2
aI6
aI6
aI8
aI10
aI4
aI7
aI7
aI6
aI7
aI2
aI3
aI5
aI3
aI1
aI4
aI6
aI8
aI2
aI1
aI0
aI5
aI9
aI4
aI7
aI6
aI9
aI1
aI0
aI5
aI7
aI4
aI5
aI5
aI5
aI9
aI1
aI4
aI10
aI1
aI8
aI8
aI7
aI6
aI0
aI10
aI2
aI10
aI10
aI0
aI7
aI4
aI5
aI1
aI5
aI5
aI9
aI8
aI0
aI4
aI5
aI9
aI4
aI4
aI8
aI6
aI5
aI5
aI2
aI7
aI0
aI9
aI10
aI0
aI2
aI8
aI0
aI3
aI1
aI3
aI10
aI3
aI10
aI0
aI3
aI7
aI9
aI2
aI7
aI2
aI9
aI9
aI8
aI3
aI10
aI2
aI9
aI7
aI4
aI5
aI7
aI8
aI10
aI9
aI2
aI5
aI0
aI7
aI7
aI4
aI1
aI2
aI4
aI10
aI2
aI7
aI3
aI7
aI6
aI7
aI10
aI4
aI5
aI4
aI0
aI1
aI0
aI5
aI1
aI0
aI2
aI5
aI5
aI8
aI10
aI1
aI1
aI7
aI4
aI8
aI6
aI3
aI4
aI8
aI6
aI5
aI0
aI0
aI1
aI10
aI9
aI7
aI5
aI5
aI4
aI5
aI10
aI3
aI4
aI8
aI8
aI4
aI1
aI7
aI9
aI4
aI4
aI0
aI2
aI4
aI1
aI1
aI10
aI2
aI8
aI5
aI3
aI10
aI2
aI4
aI0
aI4
aI8
aI4
aI8
aI6
aI9
aI8
aI4
aI0
aI8
aI1
aI0
aI3
aI7
aI10
aI1
aI2
aI6
aI9
aI10
aI6
aI9
aI1
aI9
aI8
aI9
aI10
aI6
aI0
aI3
aI7
aI2
aI0
aI1
aI6
aI8
aI2
aI0
aI9
aI10
aI1
aI7
aI7
aI5
aI4
aI9
aI0
aI6
aI9
aI9
aI7
aI0
aI5
aI6
aI9
aI5
aI7
aI5
aI3
aI10
aI5
aI6
aI1
aI1
aI3
aI6
aI7
aI1
aI4
aI2
aI6
aI7
aI6
aI3
aI6
aI4
aI9
aI7
aI0
aI4
aI6
aI8
aI6
aI3
aI4
aI8
aI1
aI6
aI10
aI7
aI3
aI10
aI2
aI0
aI3
aI8
aI6
aI9
aI2
aI10
aI8
aI1
aI7
aI9
aI8
aI7
aI1
aI9
aI1
aI10
aI1
aI10
aI2
aI2
aI10
aI10
aI5
aI9
aI10
aI4
aI6
aI2
aI4
aI7
aI2
aI6
aI2
aI2
aI8
aI5
aI3
aI0
aI0
aI9
aI4
aI3
aI4
aI1
aI0
aI5
aI8
aI8
aI1
aI3
aI7
aI0
aI0
aI5
aI8
aI5
aI3
aI9
aI10
aI6
aI6
aI5
aI6
aI2
aI8
aI8
aI2
aI0
aI3
aI3
aI5
aI0
aI0
aI7
aI2
aI1
aI6
aI3
aI1
aI6
aI6
aI5
aI5
aI7
aI3
aI3
aI10
aI6
atbsS'finished'
p74
I00
sS'nReps'
p75
I55
sS'nRemaining'
p76
I5
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p79
NsS'thisIndex'
p80
I2
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I5
sS'nTotal'
p83
I605
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
S'.thisTrial'
p94
I6
sS'.thisN'
p95
I0
sg30
Vf
sg31
g32
sS'.thisTrialN'
p96
I0
sS'.thisRepN'
p97
I0
sS'.thisIndex'
p98
I6
sg15
Nsg16
S'Timed out'
p99
sg14
I1
sa(dp100
g17
(lp101
S'd'
asg94
I9
sS'.thisRepN'
p102
I0
sg30
Vf
sg31
g32
sS'.thisTrialN'
p103
I1
sS'.thisN'
p104
I1
sS'.thisIndex'
p105
I9
sg15
(lp106
S'd'
asg16
S'Y'
sg14
I1
sa(dp107
g17
(lp108
S'd'
asg18
S'N'
sS'.thisRepN'
p109
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p110
I2
sS'.thisN'
p111
I2
sS'.thisIndex'
p112
I9
sg15
(lp113
S'k'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I9
sa(dp114
g17
(lp115
S'k'
asg18
S'N'
sS'.thisRepN'
p116
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p117
I3
sS'.thisN'
p118
I3
sS'.thisIndex'
p119
I4
sg15
(lp120
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I4
sa(dp121
g17
(lp122
S'd'
asg18
S'N'
sS'.thisRepN'
p123
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p124
I4
sS'.thisN'
p125
I4
sS'.thisIndex'
p126
I0
sg15
(lp127
S'd'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I0
sa(dp128
g17
(lp129
S'k'
asg18
S'N'
sS'.thisRepN'
p130
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p131
I5
sS'.thisN'
p132
I5
sS'.thisIndex'
p133
I5
sg15
(lp134
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I5
sa(dp135
g17
(lp136
S'd'
asg18
S'Y'
sS'.thisRepN'
p137
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p138
I6
sS'.thisN'
p139
I6
sS'.thisIndex'
p140
I7
sg15
(lp141
S'k'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
(lp142
S'space'
p143
asg94
I7
sa(dp144
g17
(lp145
S'd'
asg18
S'N'
sS'.thisRepN'
p146
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p147
I7
sS'.thisN'
p148
I7
sS'.thisIndex'
p149
I8
sg15
(lp150
S'k'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I8
sa(dp151
g17
(lp152
S'd'
asg18
S'Y'
sS'.thisRepN'
p153
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p154
I8
sS'.thisN'
p155
I8
sS'.thisIndex'
p156
I6
sg15
(lp157
S'd'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
(lp158
S'space'
p159
asg94
I6
sa(dp160
g17
(lp161
S'd'
asg18
S'Y'
sS'.thisRepN'
p162
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p163
I9
sS'.thisN'
p164
I9
sS'.thisIndex'
p165
I6
sg15
(lp166
S'd'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I6
sa(dp167
g17
(lp168
S'd'
asg18
S'Y'
sS'.thisRepN'
p169
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p170
I10
sS'.thisN'
p171
I10
sS'.thisIndex'
p172
I2
sg15
(lp173
S'd'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I2
sa(dp174
g17
(lp175
S'k'
asg18
S'N'
sS'.thisRepN'
p176
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p177
I0
sS'.thisN'
p178
I11
sS'.thisIndex'
p179
I10
sg15
(lp180
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I10
sa(dp181
g17
(lp182
S'd'
asg18
S'Y'
sS'.thisRepN'
p183
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p184
I1
sS'.thisN'
p185
I12
sS'.thisIndex'
p186
I2
sg15
(lp187
S'd'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I2
sa(dp188
g17
(lp189
S'd'
asg18
S'N'
sS'.thisRepN'
p190
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p191
I2
sS'.thisN'
p192
I13
sS'.thisIndex'
p193
I1
sg15
(lp194
S'd'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I1
sa(dp195
g18
S'Y'
sS'.thisRepN'
p196
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p197
I3
sS'.thisN'
p198
I14
sS'.thisIndex'
p199
I3
sg15
Nsg30
Vf
sg16
g99
sg14
I1
sg19
Nsg94
I3
sa(dp200
g17
(lp201
S'd'
asg18
S'N'
sS'.thisRepN'
p202
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p203
I4
sS'.thisN'
p204
I15
sS'.thisIndex'
p205
I8
sg15
(lp206
S'k'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I8
sa(dp207
g17
(lp208
S'd'
asg18
S'N'
sS'.thisRepN'
p209
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p210
I5
sS'.thisN'
p211
I16
sS'.thisIndex'
p212
I5
sg15
(lp213
S'd'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I5
sa(dp214
g17
(lp215
S'k'
asg18
S'N'
sS'.thisRepN'
p216
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p217
I6
sS'.thisN'
p218
I17
sS'.thisIndex'
p219
I2
sg15
(lp220
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I2
sa(dp221
g17
(lp222
S'k'
asg18
S'Y'
sS'.thisRepN'
p223
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p224
I7
sS'.thisN'
p225
I18
sS'.thisIndex'
p226
I6
sg15
(lp227
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I6
sa(dp228
g17
(lp229
S'k'
asg18
S'N'
sS'.thisRepN'
p230
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p231
I8
sS'.thisN'
p232
I19
sS'.thisIndex'
p233
I9
sg15
(lp234
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I9
sa(dp235
g17
(lp236
S'd'
asg18
S'N'
sS'.thisRepN'
p237
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p238
I9
sS'.thisN'
p239
I20
sS'.thisIndex'
p240
I3
sg15
(lp241
S'k'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I3
sa(dp242
g17
(lp243
S'd'
asg18
S'Y'
sS'.thisRepN'
p244
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p245
I10
sS'.thisN'
p246
I21
sS'.thisIndex'
p247
I8
sg15
(lp248
S'd'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I8
sa(dp249
g17
(lp250
S'k'
asg18
S'Y'
sS'.thisRepN'
p251
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p252
I0
sS'.thisN'
p253
I22
sS'.thisIndex'
p254
I0
sg15
(lp255
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
(lp256
S'space'
p257
asg94
I0
sa(dp258
g17
(lp259
S'k'
asg18
S'N'
sS'.thisRepN'
p260
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p261
I1
sS'.thisN'
p262
I23
sS'.thisIndex'
p263
I2
sg15
(lp264
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
(lp265
S'space'
p266
asg94
I2
sa(dp267
g17
(lp268
S'k'
asg18
S'Y'
sS'.thisRepN'
p269
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p270
I2
sS'.thisN'
p271
I24
sS'.thisIndex'
p272
I1
sg15
(lp273
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I1
sa(dp274
g17
(lp275
S'k'
asg18
S'Y'
sS'.thisRepN'
p276
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p277
I3
sS'.thisN'
p278
I25
sS'.thisIndex'
p279
I5
sg15
(lp280
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
(lp281
S'space'
p282
asg94
I5
sa(dp283
g17
(lp284
S'd'
asg18
S'N'
sS'.thisRepN'
p285
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p286
I4
sS'.thisN'
p287
I26
sS'.thisIndex'
p288
I9
sg15
(lp289
S'k'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
(lp290
S'space'
p291
asg94
I9
sa(dp292
g17
(lp293
S'k'
asg18
S'N'
sS'.thisRepN'
p294
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p295
I5
sS'.thisN'
p296
I27
sS'.thisIndex'
p297
I9
sg15
(lp298
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I9
sa(dp299
g17
(lp300
S'k'
asg18
S'N'
sS'.thisRepN'
p301
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p302
I6
sS'.thisN'
p303
I28
sS'.thisIndex'
p304
I9
sg15
(lp305
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I9
sa(dp306
g17
(lp307
S'd'
asg18
S'N'
sS'.thisRepN'
p308
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p309
I7
sS'.thisN'
p310
I29
sS'.thisIndex'
p311
I5
sg15
(lp312
S'd'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I5
sa(dp313
g17
(lp314
S'k'
asg18
S'Y'
sS'.thisRepN'
p315
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p316
I8
sS'.thisN'
p317
I30
sS'.thisIndex'
p318
I10
sg15
(lp319
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I10
sa(dp320
g17
(lp321
S'k'
asg18
S'N'
sS'.thisRepN'
p322
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p323
I9
sS'.thisN'
p324
I31
sS'.thisIndex'
p325
I6
sg15
(lp326
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I6
sa(dp327
g17
(lp328
S'd'
asg18
S'N'
sS'.thisRepN'
p329
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p330
I10
sS'.thisN'
p331
I32
sS'.thisIndex'
p332
I5
sg15
(lp333
S'd'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I5
sa(dp334
g17
(lp335
S'k'
asg18
S'Y'
sS'.thisRepN'
p336
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p337
I0
sS'.thisN'
p338
I33
sS'.thisIndex'
p339
I2
sg15
(lp340
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I2
sa(dp341
g17
(lp342
S'k'
asg18
S'N'
sS'.thisRepN'
p343
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p344
I1
sS'.thisN'
p345
I34
sS'.thisIndex'
p346
I2
sg15
(lp347
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I2
sa(dp348
g17
(lp349
S'd'
asg18
S'Y'
sS'.thisRepN'
p350
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p351
I2
sS'.thisN'
p352
I35
sS'.thisIndex'
p353
I2
sg15
(lp354
S'k'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
(lp355
S'space'
p356
asg94
I2
sa(dp357
g17
(lp358
S'k'
asg18
S'N'
sS'.thisRepN'
p359
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p360
I3
sS'.thisN'
p361
I36
sS'.thisIndex'
p362
I6
sg15
(lp363
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I6
sa(dp364
g17
(lp365
S'k'
asg18
S'N'
sS'.thisRepN'
p366
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p367
I4
sS'.thisN'
p368
I37
sS'.thisIndex'
p369
I9
sg15
(lp370
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I9
sa(dp371
g17
(lp372
S'k'
asg18
S'Y'
sS'.thisRepN'
p373
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p374
I5
sS'.thisN'
p375
I38
sS'.thisIndex'
p376
I1
sg15
(lp377
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I1
sa(dp378
g17
(lp379
S'd'
asg18
S'Y'
sS'.thisRepN'
p380
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p381
I6
sS'.thisN'
p382
I39
sS'.thisIndex'
p383
I9
sg15
(lp384
S'd'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I9
sa(dp385
g17
(lp386
S'k'
asg18
S'Y'
sS'.thisRepN'
p387
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p388
I7
sS'.thisN'
p389
I40
sS'.thisIndex'
p390
I0
sg15
(lp391
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I0
sa(dp392
g17
(lp393
S'd'
asg18
S'N'
sS'.thisRepN'
p394
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p395
I8
sS'.thisN'
p396
I41
sS'.thisIndex'
p397
I6
sg15
(lp398
S'k'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I6
sa(dp399
g17
(lp400
S'k'
asg18
S'Y'
sS'.thisRepN'
p401
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p402
I9
sS'.thisN'
p403
I42
sS'.thisIndex'
p404
I4
sg15
(lp405
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I4
sa(dp406
g17
(lp407
S'k'
asg18
S'Y'
sS'.thisRepN'
p408
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p409
I10
sS'.thisN'
p410
I43
sS'.thisIndex'
p411
I3
sg15
(lp412
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I3
sa(dp413
g17
(lp414
S'k'
asg18
S'N'
sS'.thisRepN'
p415
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p416
I0
sS'.thisN'
p417
I44
sS'.thisIndex'
p418
I8
sg15
(lp419
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I8
sa(dp420
g17
(lp421
S'k'
asg18
S'Y'
sS'.thisRepN'
p422
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p423
I1
sS'.thisN'
p424
I45
sS'.thisIndex'
p425
I8
sg15
(lp426
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I8
sa(dp427
g18
S'Y'
sS'.thisRepN'
p428
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p429
I2
sS'.thisN'
p430
I46
sS'.thisIndex'
p431
I2
sg15
Nsg30
Vf
sg16
g99
sg14
I1
sg19
Nsg94
I2
sa(dp432
g17
(lp433
S'k'
asg18
S'N'
sS'.thisRepN'
p434
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p435
I3
sS'.thisN'
p436
I47
sS'.thisIndex'
p437
I0
sg15
(lp438
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I0
sa(dp439
g17
(lp440
S'k'
asg18
S'N'
sS'.thisRepN'
p441
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p442
I4
sS'.thisN'
p443
I48
sS'.thisIndex'
p444
I10
sg15
(lp445
S'k'
asg30
Vf
sg16
S'Y'
sg14
I1
sg19
Nsg94
I10
sa(dp446
g17
(lp447
S'k'
asg18
S'N'
sg22
I30
sS'.thisN'
p448
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p449
I5
sS'.thisRepN'
p450
I4
sg21
I27
sS'.thisIndex'
p451
I4
sg23
I21
sg15
(lp452
S'd'
asg30
Vf
sg16
S'N'
sg14
I1
sg19
Nsg94
I4
sa(dp453
g17
(lp454
S'k'
asg94
I8
sS'.thisRepN'
p455
I4
sg30
Vf
sg31
g32
sS'.thisTrialN'
p456
I6
sS'.thisN'
p457
I50
sS'.thisIndex'
p458
I8
sg15
(lp459
S'k'
asg16
S'Y'
sg14
I2
sa(dp460
g17
(lp461
S'd'
asg94
I0
sS'.thisRepN'
p462
I4
sg30
Vf
sg31
g32
sS'.thisTrialN'
p463
I7
sS'.thisN'
p464
I51
sS'.thisIndex'
p465
I0
sg15
(lp466
S'd'
asg16
S'Y'
sg14
I2
sa(dp467
g17
(lp468
S'd'
asg18
S'Y'
sS'.thisRepN'
p469
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p470
I8
sS'.thisN'
p471
I52
sS'.thisIndex'
p472
I9
sg15
(lp473
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
(lp474
S'space'
p475
asg94
I9
sa(dp476
g17
(lp477
S'd'
asg18
S'Y'
sS'.thisRepN'
p478
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p479
I9
sS'.thisN'
p480
I53
sS'.thisIndex'
p481
I9
sg15
(lp482
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
(lp483
S'space'
p484
asg94
I9
sa(dp485
g17
(lp486
S'd'
asg18
S'Y'
sS'.thisRepN'
p487
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p488
I10
sS'.thisN'
p489
I54
sS'.thisIndex'
p490
I0
sg15
(lp491
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
(lp492
S'space'
p493
asg94
I0
sa(dp494
g17
(lp495
S'd'
asg18
S'Y'
sS'.thisRepN'
p496
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p497
I0
sS'.thisN'
p498
I55
sS'.thisIndex'
p499
I10
sg15
(lp500
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
(lp501
S'space'
p502
asg94
I10
sa(dp503
g17
(lp504
S'k'
asg18
S'Y'
sS'.thisRepN'
p505
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p506
I1
sS'.thisN'
p507
I56
sS'.thisIndex'
p508
I2
sg15
(lp509
S'd'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I2
sa(dp510
g17
(lp511
S'k'
asg18
S'Y'
sS'.thisRepN'
p512
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p513
I2
sS'.thisN'
p514
I57
sS'.thisIndex'
p515
I10
sg15
(lp516
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
(lp517
S'space'
p518
asg94
I10
sa(dp519
g17
(lp520
S'k'
asg18
S'Y'
sS'.thisRepN'
p521
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p522
I3
sS'.thisN'
p523
I58
sS'.thisIndex'
p524
I1
sg15
(lp525
S'd'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I1
sa(dp526
g17
(lp527
S'd'
asg18
S'N'
sS'.thisRepN'
p528
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p529
I4
sS'.thisN'
p530
I59
sS'.thisIndex'
p531
I3
sg15
(lp532
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I3
sa(dp533
g17
(lp534
S'd'
asg18
S'N'
sS'.thisRepN'
p535
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p536
I5
sS'.thisN'
p537
I60
sS'.thisIndex'
p538
I10
sg15
(lp539
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I10
sa(dp540
g17
(lp541
S'k'
asg18
S'N'
sS'.thisRepN'
p542
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p543
I6
sS'.thisN'
p544
I61
sS'.thisIndex'
p545
I3
sg15
(lp546
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I3
sa(dp547
g17
(lp548
S'd'
asg18
S'N'
sS'.thisRepN'
p549
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p550
I7
sS'.thisN'
p551
I62
sS'.thisIndex'
p552
I1
sg15
(lp553
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I1
sa(dp554
g17
(lp555
S'd'
asg18
S'N'
sS'.thisRepN'
p556
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p557
I8
sS'.thisN'
p558
I63
sS'.thisIndex'
p559
I1
sg15
(lp560
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I1
sa(dp561
g17
(lp562
S'd'
asg18
S'Y'
sS'.thisRepN'
p563
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p564
I9
sS'.thisN'
p565
I64
sS'.thisIndex'
p566
I7
sg15
(lp567
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
(lp568
S'space'
p569
asg94
I7
sa(dp570
g17
(lp571
S'k'
asg18
S'Y'
sS'.thisRepN'
p572
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p573
I10
sS'.thisN'
p574
I65
sS'.thisIndex'
p575
I0
sg15
(lp576
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I0
sa(dp577
g17
(lp578
S'd'
asg18
S'N'
sS'.thisRepN'
p579
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p580
I0
sS'.thisN'
p581
I66
sS'.thisIndex'
p582
I8
sg15
(lp583
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I8
sa(dp584
g17
(lp585
S'k'
asg18
S'Y'
sS'.thisRepN'
p586
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p587
I1
sS'.thisN'
p588
I67
sS'.thisIndex'
p589
I5
sg15
(lp590
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I5
sa(dp591
g17
(lp592
S'd'
asg18
S'N'
sS'.thisRepN'
p593
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p594
I2
sS'.thisN'
p595
I68
sS'.thisIndex'
p596
I7
sg15
(lp597
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I7
sa(dp598
g17
(lp599
S'd'
asg18
S'N'
sS'.thisRepN'
p600
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p601
I3
sS'.thisN'
p602
I69
sS'.thisIndex'
p603
I9
sg15
(lp604
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I9
sa(dp605
g17
(lp606
S'k'
asg18
S'N'
sS'.thisRepN'
p607
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p608
I4
sS'.thisN'
p609
I70
sS'.thisIndex'
p610
I7
sg15
(lp611
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I7
sa(dp612
g17
(lp613
S'k'
asg18
S'N'
sS'.thisRepN'
p614
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p615
I5
sS'.thisN'
p616
I71
sS'.thisIndex'
p617
I1
sg15
(lp618
S'd'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I1
sa(dp619
g17
(lp620
S'd'
asg18
S'Y'
sS'.thisRepN'
p621
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p622
I6
sS'.thisN'
p623
I72
sS'.thisIndex'
p624
I10
sg15
(lp625
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I10
sa(dp626
g17
(lp627
S'k'
asg18
S'Y'
sS'.thisRepN'
p628
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p629
I7
sS'.thisN'
p630
I73
sS'.thisIndex'
p631
I10
sg15
(lp632
S'd'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I10
sa(dp633
g17
(lp634
S'd'
asg18
S'Y'
sS'.thisRepN'
p635
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p636
I8
sS'.thisN'
p637
I74
sS'.thisIndex'
p638
I9
sg15
(lp639
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
(lp640
S'space'
p641
asg94
I9
sa(dp642
g17
(lp643
S'd'
asg18
S'Y'
sS'.thisRepN'
p644
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p645
I9
sS'.thisN'
p646
I75
sS'.thisIndex'
p647
I0
sg15
(lp648
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I0
sa(dp649
g17
(lp650
S'd'
asg18
S'Y'
sS'.thisRepN'
p651
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p652
I10
sS'.thisN'
p653
I76
sS'.thisIndex'
p654
I9
sg15
(lp655
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
(lp656
S'space'
p657
asg94
I9
sa(dp658
g17
(lp659
S'k'
asg18
S'N'
sS'.thisRepN'
p660
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p661
I0
sS'.thisN'
p662
I77
sS'.thisIndex'
p663
I4
sg15
(lp664
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I4
sa(dp665
g17
(lp666
S'k'
asg18
S'Y'
sS'.thisRepN'
p667
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p668
I1
sS'.thisN'
p669
I78
sS'.thisIndex'
p670
I6
sg15
(lp671
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
(lp672
S'space'
p673
asg94
I6
sa(dp674
g17
(lp675
S'd'
asg18
S'Y'
sS'.thisRepN'
p676
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p677
I2
sS'.thisN'
p678
I79
sS'.thisIndex'
p679
I3
sg15
(lp680
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
(lp681
S'space'
p682
asg94
I3
sa(dp683
g17
(lp684
S'k'
asg18
S'N'
sS'.thisRepN'
p685
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p686
I3
sS'.thisN'
p687
I80
sS'.thisIndex'
p688
I9
sg15
(lp689
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I9
sa(dp690
g17
(lp691
S'd'
asg18
S'N'
sS'.thisRepN'
p692
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p693
I4
sS'.thisN'
p694
I81
sS'.thisIndex'
p695
I6
sg15
(lp696
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I6
sa(dp697
g17
(lp698
S'd'
asg18
S'N'
sS'.thisRepN'
p699
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p700
I5
sS'.thisN'
p701
I82
sS'.thisIndex'
p702
I8
sg15
(lp703
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I8
sa(dp704
g17
(lp705
S'd'
asg18
S'Y'
sS'.thisRepN'
p706
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p707
I6
sS'.thisN'
p708
I83
sS'.thisIndex'
p709
I2
sg15
(lp710
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
(lp711
S'space'
p712
asg94
I2
sa(dp713
g17
(lp714
S'd'
asg18
S'N'
sS'.thisRepN'
p715
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p716
I7
sS'.thisN'
p717
I84
sS'.thisIndex'
p718
I9
sg15
(lp719
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I9
sa(dp720
g17
(lp721
S'd'
asg18
S'N'
sS'.thisRepN'
p722
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p723
I8
sS'.thisN'
p724
I85
sS'.thisIndex'
p725
I8
sg15
(lp726
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I8
sa(dp727
g17
(lp728
S'k'
asg18
S'Y'
sS'.thisRepN'
p729
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p730
I9
sS'.thisN'
p731
I86
sS'.thisIndex'
p732
I4
sg15
(lp733
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
(lp734
S'space'
p735
asg94
I4
sa(dp736
g17
(lp737
S'k'
asg18
S'Y'
sS'.thisRepN'
p738
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p739
I10
sS'.thisN'
p740
I87
sS'.thisIndex'
p741
I4
sg15
(lp742
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
(lp743
S'space'
p744
asg94
I4
sa(dp745
g17
(lp746
S'k'
asg18
S'Y'
sS'.thisRepN'
p747
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p748
I0
sS'.thisN'
p749
I88
sS'.thisIndex'
p750
I3
sg15
(lp751
S'd'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
(lp752
S'space'
p753
asg94
I3
sa(dp754
g17
(lp755
S'd'
asg18
S'Y'
sS'.thisRepN'
p756
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p757
I1
sS'.thisN'
p758
I89
sS'.thisIndex'
p759
I2
sg15
(lp760
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I2
sa(dp761
g17
(lp762
S'd'
asg18
S'N'
sS'.thisRepN'
p763
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p764
I2
sS'.thisN'
p765
I90
sS'.thisIndex'
p766
I0
sg15
(lp767
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I0
sa(dp768
g17
(lp769
S'k'
asg18
S'N'
sS'.thisRepN'
p770
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p771
I3
sS'.thisN'
p772
I91
sS'.thisIndex'
p773
I3
sg15
(lp774
S'd'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I3
sa(dp775
g17
(lp776
S'd'
asg18
S'N'
sS'.thisRepN'
p777
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p778
I4
sS'.thisN'
p779
I92
sS'.thisIndex'
p780
I6
sg15
(lp781
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I6
sa(dp782
g17
(lp783
S'd'
asg18
S'Y'
sS'.thisRepN'
p784
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p785
I5
sS'.thisN'
p786
I93
sS'.thisIndex'
p787
I8
sg15
(lp788
S'k'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I8
sa(dp789
g17
(lp790
S'k'
asg18
S'Y'
sS'.thisRepN'
p791
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p792
I6
sS'.thisN'
p793
I94
sS'.thisIndex'
p794
I9
sg15
(lp795
S'd'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
Nsg94
I9
sa(dp796
g17
(lp797
S'k'
asg18
S'N'
sS'.thisRepN'
p798
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p799
I7
sS'.thisN'
p800
I95
sS'.thisIndex'
p801
I7
sg15
(lp802
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I7
sa(dp803
g17
(lp804
S'k'
asg18
S'Y'
sS'.thisRepN'
p805
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p806
I8
sS'.thisN'
p807
I96
sS'.thisIndex'
p808
I9
sg15
(lp809
S'd'
asg30
Vf
sg16
S'N'
sg14
I2
sg19
(lp810
S'space'
p811
asg94
I9
sa(dp812
g17
(lp813
S'k'
asg18
S'N'
sS'.thisRepN'
p814
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p815
I9
sS'.thisN'
p816
I97
sS'.thisIndex'
p817
I6
sg15
(lp818
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I6
sa(dp819
g17
(lp820
S'd'
asg18
S'N'
sS'.thisRepN'
p821
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p822
I10
sS'.thisN'
p823
I98
sS'.thisIndex'
p824
I3
sg15
(lp825
S'd'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I3
sa(dp826
g17
(lp827
S'k'
asg18
S'N'
sg22
I38
sS'.thisN'
p828
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p829
I0
sS'.thisRepN'
p830
I9
sg21
I29
sS'.thisIndex'
p831
I5
sg23
I25
sg15
(lp832
S'k'
asg30
Vf
sg16
S'Y'
sg14
I2
sg19
Nsg94
I5
sa(dp833
g17
(lp834
S'd'
asg94
I6
sS'.thisRepN'
p835
I9
sg30
Vf
sg31
g32
sS'.thisTrialN'
p836
I1
sS'.thisN'
p837
I100
sS'.thisIndex'
p838
I6
sg15
(lp839
S'd'
asg16
S'Y'
sg14
I3
sa(dp840
g17
(lp841
S'd'
asg94
I4
sS'.thisRepN'
p842
I9
sg30
Vf
sg31
g32
sS'.thisTrialN'
p843
I2
sS'.thisN'
p844
I101
sS'.thisIndex'
p845
I4
sg15
(lp846
S'd'
asg16
S'Y'
sg14
I3
sa(dp847
g17
(lp848
S'd'
asg18
S'N'
sS'.thisRepN'
p849
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p850
I3
sS'.thisN'
p851
I102
sS'.thisIndex'
p852
I7
sg15
(lp853
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I7
sa(dp854
g17
(lp855
S'k'
asg18
S'Y'
sS'.thisRepN'
p856
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p857
I4
sS'.thisN'
p858
I103
sS'.thisIndex'
p859
I7
sg15
(lp860
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
(lp861
S'space'
p862
asg94
I7
sa(dp863
g18
S'Y'
sS'.thisRepN'
p864
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p865
I5
sS'.thisN'
p866
I104
sS'.thisIndex'
p867
I7
sg15
Nsg30
Vf
sg16
g99
sg14
I3
sg19
Nsg94
I7
sa(dp868
g17
(lp869
S'k'
asg18
S'Y'
sS'.thisRepN'
p870
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p871
I6
sS'.thisN'
p872
I105
sS'.thisIndex'
p873
I7
sg15
(lp874
S'd'
asg30
Vf
sg16
S'N'
sg14
I3
sg19
Nsg94
I7
sa(dp875
g17
(lp876
S'k'
asg18
S'Y'
sS'.thisRepN'
p877
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p878
I7
sS'.thisN'
p879
I106
sS'.thisIndex'
p880
I5
sg15
(lp881
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I5
sa(dp882
g17
(lp883
S'd'
asg18
S'Y'
sS'.thisRepN'
p884
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p885
I8
sS'.thisN'
p886
I107
sS'.thisIndex'
p887
I10
sg15
(lp888
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
(lp889
S'space'
p890
asg94
I10
sa(dp891
g17
(lp892
S'k'
asg18
S'N'
sS'.thisRepN'
p893
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p894
I9
sS'.thisN'
p895
I108
sS'.thisIndex'
p896
I8
sg15
(lp897
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I8
sa(dp898
g17
(lp899
S'd'
asg18
S'N'
sS'.thisRepN'
p900
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p901
I10
sS'.thisN'
p902
I109
sS'.thisIndex'
p903
I4
sg15
(lp904
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I4
sa(dp905
g17
(lp906
S'k'
asg18
S'N'
sS'.thisRepN'
p907
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p908
I0
sS'.thisN'
p909
I110
sS'.thisIndex'
p910
I2
sg15
(lp911
S'd'
asg30
Vf
sg16
S'N'
sg14
I3
sg19
Nsg94
I2
sa(dp912
g17
(lp913
S'k'
asg18
S'Y'
sS'.thisRepN'
p914
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p915
I1
sS'.thisN'
p916
I111
sS'.thisIndex'
p917
I4
sg15
(lp918
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I4
sa(dp919
g17
(lp920
S'd'
asg18
S'Y'
sS'.thisRepN'
p921
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p922
I2
sS'.thisN'
p923
I112
sS'.thisIndex'
p924
I3
sg15
(lp925
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
(lp926
S'space'
p927
asg94
I3
sa(dp928
g18
S'Y'
sS'.thisRepN'
p929
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p930
I3
sS'.thisN'
p931
I113
sS'.thisIndex'
p932
I9
sg15
Nsg30
Vf
sg16
g99
sg14
I3
sg19
Nsg94
I9
sa(dp933
g17
(lp934
S'd'
asg18
S'N'
sS'.thisRepN'
p935
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p936
I4
sS'.thisN'
p937
I114
sS'.thisIndex'
p938
I7
sg15
(lp939
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I7
sa(dp940
g17
(lp941
S'k'
asg18
S'N'
sS'.thisRepN'
p942
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p943
I5
sS'.thisN'
p944
I115
sS'.thisIndex'
p945
I6
sg15
(lp946
S'd'
asg30
Vf
sg16
S'N'
sg14
I3
sg19
Nsg94
I6
sa(dp947
g17
(lp948
S'd'
asg18
S'N'
sS'.thisRepN'
p949
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p950
I6
sS'.thisN'
p951
I116
sS'.thisIndex'
p952
I4
sg15
(lp953
S'k'
asg30
Vf
sg16
S'N'
sg14
I3
sg19
Nsg94
I4
sa(dp954
g17
(lp955
S'k'
asg18
S'Y'
sS'.thisRepN'
p956
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p957
I7
sS'.thisN'
p958
I117
sS'.thisIndex'
p959
I5
sg15
(lp960
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
(lp961
S'space'
p962
asg94
I5
sa(dp963
g17
(lp964
S'd'
asg18
S'Y'
sS'.thisRepN'
p965
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p966
I8
sS'.thisN'
p967
I118
sS'.thisIndex'
p968
I6
sg15
(lp969
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
(lp970
S'space'
p971
asg94
I6
sa(dp972
g17
(lp973
S'k'
asg18
S'Y'
sS'.thisRepN'
p974
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p975
I9
sS'.thisN'
p976
I119
sS'.thisIndex'
p977
I6
sg15
(lp978
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I6
sa(dp979
g17
(lp980
S'k'
asg18
S'Y'
sS'.thisRepN'
p981
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p982
I10
sS'.thisN'
p983
I120
sS'.thisIndex'
p984
I1
sg15
(lp985
S'd'
asg30
Vf
sg16
S'N'
sg14
I3
sg19
(lp986
S'space'
p987
asg94
I1
sa(dp988
g17
(lp989
S'k'
asg18
S'Y'
sS'.thisRepN'
p990
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p991
I0
sS'.thisN'
p992
I121
sS'.thisIndex'
p993
I3
sg15
(lp994
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I3
sa(dp995
g17
(lp996
S'd'
asg18
S'N'
sS'.thisRepN'
p997
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p998
I1
sS'.thisN'
p999
I122
sS'.thisIndex'
p1000
I9
sg15
(lp1001
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I9
sa(dp1002
g17
(lp1003
S'd'
asg18
S'N'
sS'.thisRepN'
p1004
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1005
I2
sS'.thisN'
p1006
I123
sS'.thisIndex'
p1007
I6
sg15
(lp1008
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I6
sa(dp1009
g17
(lp1010
S'd'
asg18
S'Y'
sS'.thisRepN'
p1011
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1012
I3
sS'.thisN'
p1013
I124
sS'.thisIndex'
p1014
I5
sg15
(lp1015
S'k'
asg30
Vf
sg16
S'N'
sg14
I3
sg19
(lp1016
S'space'
p1017
asg94
I5
sa(dp1018
g17
(lp1019
S'd'
asg18
S'Y'
sS'.thisRepN'
p1020
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1021
I4
sS'.thisN'
p1022
I125
sS'.thisIndex'
p1023
I1
sg15
(lp1024
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
(lp1025
S'space'
p1026
asg94
I1
sa(dp1027
g17
(lp1028
S'd'
asg18
S'N'
sS'.thisRepN'
p1029
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1030
I5
sS'.thisN'
p1031
I126
sS'.thisIndex'
p1032
I0
sg15
(lp1033
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I0
sa(dp1034
g17
(lp1035
S'k'
asg18
S'N'
sS'.thisRepN'
p1036
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1037
I6
sS'.thisN'
p1038
I127
sS'.thisIndex'
p1039
I5
sg15
(lp1040
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I5
sa(dp1041
g17
(lp1042
S'k'
asg18
S'N'
sS'.thisRepN'
p1043
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1044
I7
sS'.thisN'
p1045
I128
sS'.thisIndex'
p1046
I4
sg15
(lp1047
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I4
sa(dp1048
g17
(lp1049
S'k'
asg18
S'N'
sS'.thisRepN'
p1050
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1051
I8
sS'.thisN'
p1052
I129
sS'.thisIndex'
p1053
I0
sg15
(lp1054
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I0
sa(dp1055
g17
(lp1056
S'k'
asg18
S'N'
sS'.thisRepN'
p1057
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1058
I9
sS'.thisN'
p1059
I130
sS'.thisIndex'
p1060
I3
sg15
(lp1061
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I3
sa(dp1062
g17
(lp1063
S'd'
asg18
S'N'
sS'.thisRepN'
p1064
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1065
I10
sS'.thisN'
p1066
I131
sS'.thisIndex'
p1067
I0
sg15
(lp1068
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I0
sa(dp1069
g17
(lp1070
S'd'
asg18
S'N'
sS'.thisRepN'
p1071
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1072
I0
sS'.thisN'
p1073
I132
sS'.thisIndex'
p1074
I6
sg15
(lp1075
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I6
sa(dp1076
g17
(lp1077
S'd'
asg18
S'N'
sS'.thisRepN'
p1078
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1079
I1
sS'.thisN'
p1080
I133
sS'.thisIndex'
p1081
I4
sg15
(lp1082
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I4
sa(dp1083
g17
(lp1084
S'k'
asg18
S'N'
sS'.thisRepN'
p1085
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1086
I2
sS'.thisN'
p1087
I134
sS'.thisIndex'
p1088
I6
sg15
(lp1089
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I6
sa(dp1090
g17
(lp1091
S'k'
asg18
S'N'
sS'.thisRepN'
p1092
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1093
I3
sS'.thisN'
p1094
I135
sS'.thisIndex'
p1095
I4
sg15
(lp1096
S'd'
asg30
Vf
sg16
S'N'
sg14
I3
sg19
Nsg94
I4
sa(dp1097
g17
(lp1098
S'd'
asg18
S'N'
sS'.thisRepN'
p1099
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1100
I4
sS'.thisN'
p1101
I136
sS'.thisIndex'
p1102
I10
sg15
(lp1103
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I10
sa(dp1104
g17
(lp1105
S'k'
asg18
S'N'
sS'.thisRepN'
p1106
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1107
I5
sS'.thisN'
p1108
I137
sS'.thisIndex'
p1109
I10
sg15
(lp1110
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I10
sa(dp1111
g17
(lp1112
S'k'
asg18
S'Y'
sS'.thisRepN'
p1113
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1114
I6
sS'.thisN'
p1115
I138
sS'.thisIndex'
p1116
I7
sg15
(lp1117
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
(lp1118
S'space'
p1119
asg94
I7
sa(dp1120
g17
(lp1121
S'k'
asg18
S'N'
sS'.thisRepN'
p1122
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1123
I7
sS'.thisN'
p1124
I139
sS'.thisIndex'
p1125
I5
sg15
(lp1126
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I5
sa(dp1127
g17
(lp1128
S'k'
asg18
S'Y'
sS'.thisRepN'
p1129
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1130
I8
sS'.thisN'
p1131
I140
sS'.thisIndex'
p1132
I3
sg15
(lp1133
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
(lp1134
S'space'
p1135
asg94
I3
sa(dp1136
g17
(lp1137
S'd'
asg18
S'Y'
sS'.thisRepN'
p1138
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1139
I9
sS'.thisN'
p1140
I141
sS'.thisIndex'
p1141
I4
sg15
(lp1142
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
(lp1143
S'space'
p1144
asg94
I4
sa(dp1145
g17
(lp1146
S'd'
asg18
S'N'
sS'.thisRepN'
p1147
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1148
I10
sS'.thisN'
p1149
I142
sS'.thisIndex'
p1150
I5
sg15
(lp1151
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I5
sa(dp1152
g17
(lp1153
S'k'
asg18
S'Y'
sS'.thisRepN'
p1154
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1155
I0
sS'.thisN'
p1156
I143
sS'.thisIndex'
p1157
I3
sg15
(lp1158
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I3
sa(dp1159
g17
(lp1160
S'd'
asg18
S'N'
sS'.thisRepN'
p1161
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1162
I1
sS'.thisN'
p1163
I144
sS'.thisIndex'
p1164
I9
sg15
(lp1165
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I9
sa(dp1166
g17
(lp1167
S'k'
asg18
S'N'
sS'.thisRepN'
p1168
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1169
I2
sS'.thisN'
p1170
I145
sS'.thisIndex'
p1171
I10
sg15
(lp1172
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I10
sa(dp1173
g17
(lp1174
S'd'
asg18
S'N'
sS'.thisRepN'
p1175
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1176
I3
sS'.thisN'
p1177
I146
sS'.thisIndex'
p1178
I1
sg15
(lp1179
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I1
sa(dp1180
g17
(lp1181
S'd'
asg18
S'N'
sS'.thisRepN'
p1182
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1183
I4
sS'.thisN'
p1184
I147
sS'.thisIndex'
p1185
I6
sg15
(lp1186
S'd'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I6
sa(dp1187
g17
(lp1188
S'k'
asg18
S'Y'
sS'.thisRepN'
p1189
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1190
I5
sS'.thisN'
p1191
I148
sS'.thisIndex'
p1192
I2
sg15
(lp1193
S'd'
asg30
Vf
sg16
S'N'
sg14
I3
sg19
(lp1194
S'space'
p1195
asg94
I2
sa(dp1196
g17
(lp1197
S'k'
asg18
S'Y'
sg22
I39
sS'.thisN'
p1198
I149
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1199
I6
sS'.thisRepN'
p1200
I13
sg21
I40
sS'.thisIndex'
p1201
I8
sg23
I21
sg15
(lp1202
S'k'
asg30
Vf
sg16
S'Y'
sg14
I3
sg19
Nsg94
I8
sa(dp1203
g17
(lp1204
S'k'
asg94
I10
sS'.thisRepN'
p1205
I13
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1206
I7
sS'.thisN'
p1207
I150
sS'.thisIndex'
p1208
I10
sg15
(lp1209
S'k'
asg16
S'Y'
sg14
I4
sa(dp1210
g17
(lp1211
S'k'
asg94
I7
sS'.thisRepN'
p1212
I13
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1213
I8
sS'.thisN'
p1214
I151
sS'.thisIndex'
p1215
I7
sg15
(lp1216
S'k'
asg16
S'Y'
sg14
I4
sa(dp1217
g17
(lp1218
S'k'
asg18
S'N'
sS'.thisRepN'
p1219
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1220
I9
sS'.thisN'
p1221
I152
sS'.thisIndex'
p1222
I8
sg15
(lp1223
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I8
sa(dp1224
g17
(lp1225
S'd'
asg18
S'N'
sS'.thisRepN'
p1226
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1227
I10
sS'.thisN'
p1228
I153
sS'.thisIndex'
p1229
I8
sg15
(lp1230
S'k'
asg30
Vf
sg16
S'N'
sg14
I4
sg19
Nsg94
I8
sa(dp1231
g17
(lp1232
S'k'
asg18
S'Y'
sS'.thisRepN'
p1233
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1234
I0
sS'.thisN'
p1235
I154
sS'.thisIndex'
p1236
I9
sg15
(lp1237
S'd'
asg30
Vf
sg16
S'N'
sg14
I4
sg19
Nsg94
I9
sa(dp1238
g17
(lp1239
S'k'
asg18
S'N'
sS'.thisRepN'
p1240
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1241
I1
sS'.thisN'
p1242
I155
sS'.thisIndex'
p1243
I7
sg15
(lp1244
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I7
sa(dp1245
g17
(lp1246
S'd'
asg18
S'Y'
sS'.thisRepN'
p1247
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1248
I2
sS'.thisN'
p1249
I156
sS'.thisIndex'
p1250
I5
sg15
(lp1251
S'k'
asg30
Vf
sg16
S'N'
sg14
I4
sg19
(lp1252
S'space'
p1253
asg94
I5
sa(dp1254
g17
(lp1255
S'k'
asg18
S'Y'
sS'.thisRepN'
p1256
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1257
I3
sS'.thisN'
p1258
I157
sS'.thisIndex'
p1259
I1
sg15
(lp1260
S'd'
asg30
Vf
sg16
S'N'
sg14
I4
sg19
Nsg94
I1
sa(dp1261
g17
(lp1262
S'd'
asg18
S'Y'
sS'.thisRepN'
p1263
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1264
I4
sS'.thisN'
p1265
I158
sS'.thisIndex'
p1266
I9
sg15
(lp1267
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I9
sa(dp1268
g17
(lp1269
S'k'
asg18
S'Y'
sS'.thisRepN'
p1270
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1271
I5
sS'.thisN'
p1272
I159
sS'.thisIndex'
p1273
I10
sg15
(lp1274
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I10
sa(dp1275
g17
(lp1276
S'k'
asg18
S'Y'
sS'.thisRepN'
p1277
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1278
I6
sS'.thisN'
p1279
I160
sS'.thisIndex'
p1280
I10
sg15
(lp1281
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I10
sa(dp1282
g17
(lp1283
S'k'
asg18
S'N'
sS'.thisRepN'
p1284
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1285
I7
sS'.thisN'
p1286
I161
sS'.thisIndex'
p1287
I3
sg15
(lp1288
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I3
sa(dp1289
g17
(lp1290
S'k'
asg18
S'N'
sS'.thisRepN'
p1291
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1292
I8
sS'.thisN'
p1293
I162
sS'.thisIndex'
p1294
I2
sg15
(lp1295
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I2
sa(dp1296
g17
(lp1297
S'k'
asg18
S'N'
sS'.thisRepN'
p1298
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1299
I9
sS'.thisN'
p1300
I163
sS'.thisIndex'
p1301
I1
sg15
(lp1302
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I1
sa(dp1303
g17
(lp1304
S'k'
asg18
S'Y'
sS'.thisRepN'
p1305
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1306
I10
sS'.thisN'
p1307
I164
sS'.thisIndex'
p1308
I8
sg15
(lp1309
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
(lp1310
S'space'
p1311
asg94
I8
sa(dp1312
g17
(lp1313
S'd'
asg18
S'N'
sS'.thisRepN'
p1314
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1315
I0
sS'.thisN'
p1316
I165
sS'.thisIndex'
p1317
I4
sg15
(lp1318
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I4
sa(dp1319
g17
(lp1320
S'd'
asg18
S'Y'
sS'.thisRepN'
p1321
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1322
I1
sS'.thisN'
p1323
I166
sS'.thisIndex'
p1324
I0
sg15
(lp1325
S'k'
asg30
Vf
sg16
S'N'
sg14
I4
sg19
(lp1326
S'space'
p1327
asg94
I0
sa(dp1328
g17
(lp1329
S'k'
asg18
S'Y'
sS'.thisRepN'
p1330
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1331
I2
sS'.thisN'
p1332
I167
sS'.thisIndex'
p1333
I10
sg15
(lp1334
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I10
sa(dp1335
g17
(lp1336
S'k'
asg18
S'N'
sS'.thisRepN'
p1337
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1338
I3
sS'.thisN'
p1339
I168
sS'.thisIndex'
p1340
I5
sg15
(lp1341
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I5
sa(dp1342
g17
(lp1343
S'd'
asg18
S'N'
sS'.thisRepN'
p1344
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1345
I4
sS'.thisN'
p1346
I169
sS'.thisIndex'
p1347
I1
sg15
(lp1348
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I1
sa(dp1349
g17
(lp1350
S'k'
asg18
S'N'
sS'.thisRepN'
p1351
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1352
I5
sS'.thisN'
p1353
I170
sS'.thisIndex'
p1354
I10
sg15
(lp1355
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I10
sa(dp1356
g17
(lp1357
S'd'
asg18
S'N'
sS'.thisRepN'
p1358
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1359
I6
sS'.thisN'
p1360
I171
sS'.thisIndex'
p1361
I9
sg15
(lp1362
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I9
sa(dp1363
g17
(lp1364
S'd'
asg18
S'N'
sS'.thisRepN'
p1365
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1366
I7
sS'.thisN'
p1367
I172
sS'.thisIndex'
p1368
I4
sg15
(lp1369
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I4
sa(dp1370
g17
(lp1371
S'd'
asg18
S'N'
sS'.thisRepN'
p1372
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1373
I8
sS'.thisN'
p1374
I173
sS'.thisIndex'
p1375
I0
sg15
(lp1376
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I0
sa(dp1377
g17
(lp1378
S'k'
asg18
S'Y'
sS'.thisRepN'
p1379
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1380
I9
sS'.thisN'
p1381
I174
sS'.thisIndex'
p1382
I6
sg15
(lp1383
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
(lp1384
S'space'
p1385
asg94
I6
sa(dp1386
g17
(lp1387
S'k'
asg18
S'N'
sS'.thisRepN'
p1388
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1389
I10
sS'.thisN'
p1390
I175
sS'.thisIndex'
p1391
I1
sg15
(lp1392
S'd'
asg30
Vf
sg16
S'N'
sg14
I4
sg19
Nsg94
I1
sa(dp1393
g17
(lp1394
S'd'
asg18
S'Y'
sS'.thisRepN'
p1395
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1396
I0
sS'.thisN'
p1397
I176
sS'.thisIndex'
p1398
I9
sg15
(lp1399
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
(lp1400
S'space'
p1401
asg94
I9
sa(dp1402
g17
(lp1403
S'k'
asg18
S'N'
sS'.thisRepN'
p1404
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1405
I1
sS'.thisN'
p1406
I177
sS'.thisIndex'
p1407
I9
sg15
(lp1408
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I9
sa(dp1409
g17
(lp1410
S'd'
asg18
S'N'
sS'.thisRepN'
p1411
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1412
I2
sS'.thisN'
p1413
I178
sS'.thisIndex'
p1414
I8
sg15
(lp1415
S'k'
asg30
Vf
sg16
S'N'
sg14
I4
sg19
Nsg94
I8
sa(dp1416
g17
(lp1417
S'k'
asg18
S'N'
sS'.thisRepN'
p1418
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1419
I3
sS'.thisN'
p1420
I179
sS'.thisIndex'
p1421
I8
sg15
(lp1422
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I8
sa(dp1423
g17
(lp1424
S'd'
asg18
S'N'
sS'.thisRepN'
p1425
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1426
I4
sS'.thisN'
p1427
I180
sS'.thisIndex'
p1428
I3
sg15
(lp1429
S'k'
asg30
Vf
sg16
S'N'
sg14
I4
sg19
Nsg94
I3
sa(dp1430
g17
(lp1431
S'k'
asg18
S'Y'
sS'.thisRepN'
p1432
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1433
I5
sS'.thisN'
p1434
I181
sS'.thisIndex'
p1435
I0
sg15
(lp1436
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I0
sa(dp1437
g17
(lp1438
S'd'
asg18
S'Y'
sS'.thisRepN'
p1439
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1440
I6
sS'.thisN'
p1441
I182
sS'.thisIndex'
p1442
I2
sg15
(lp1443
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I2
sa(dp1444
g17
(lp1445
S'k'
asg18
S'Y'
sS'.thisRepN'
p1446
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1447
I7
sS'.thisN'
p1448
I183
sS'.thisIndex'
p1449
I8
sg15
(lp1450
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
(lp1451
S'space'
p1452
asg94
I8
sa(dp1453
g17
(lp1454
S'd'
asg18
S'Y'
sS'.thisRepN'
p1455
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1456
I8
sS'.thisN'
p1457
I184
sS'.thisIndex'
p1458
I1
sg15
(lp1459
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
(lp1460
S'space'
p1461
asg94
I1
sa(dp1462
g17
(lp1463
S'k'
asg18
S'Y'
sS'.thisRepN'
p1464
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1465
I9
sS'.thisN'
p1466
I185
sS'.thisIndex'
p1467
I10
sg15
(lp1468
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
(lp1469
S'space'
p1470
asg94
I10
sa(dp1471
g17
(lp1472
S'd'
asg18
S'Y'
sS'.thisRepN'
p1473
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1474
I10
sS'.thisN'
p1475
I186
sS'.thisIndex'
p1476
I3
sg15
(lp1477
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
(lp1478
S'space'
p1479
asg94
I3
sa(dp1480
g17
(lp1481
S'd'
asg18
S'N'
sS'.thisRepN'
p1482
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1483
I0
sS'.thisN'
p1484
I187
sS'.thisIndex'
p1485
I3
sg15
(lp1486
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I3
sa(dp1487
g17
(lp1488
S'k'
asg18
S'Y'
sS'.thisRepN'
p1489
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1490
I1
sS'.thisN'
p1491
I188
sS'.thisIndex'
p1492
I2
sg15
(lp1493
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
(lp1494
S'space'
p1495
asg94
I2
sa(dp1496
g17
(lp1497
S'd'
asg18
S'Y'
sS'.thisRepN'
p1498
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1499
I2
sS'.thisN'
p1500
I189
sS'.thisIndex'
p1501
I8
sg15
(lp1502
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
(lp1503
S'space'
p1504
asg94
I8
sa(dp1505
g17
(lp1506
S'k'
asg18
S'N'
sS'.thisRepN'
p1507
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1508
I3
sS'.thisN'
p1509
I190
sS'.thisIndex'
p1510
I7
sg15
(lp1511
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I7
sa(dp1512
g17
(lp1513
S'd'
asg18
S'N'
sS'.thisRepN'
p1514
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1515
I4
sS'.thisN'
p1516
I191
sS'.thisIndex'
p1517
I3
sg15
(lp1518
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I3
sa(dp1519
g17
(lp1520
S'k'
asg18
S'N'
sS'.thisRepN'
p1521
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1522
I5
sS'.thisN'
p1523
I192
sS'.thisIndex'
p1524
I7
sg15
(lp1525
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I7
sa(dp1526
g17
(lp1527
S'k'
asg18
S'Y'
sS'.thisRepN'
p1528
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1529
I6
sS'.thisN'
p1530
I193
sS'.thisIndex'
p1531
I5
sg15
(lp1532
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I5
sa(dp1533
g17
(lp1534
S'd'
asg18
S'N'
sS'.thisRepN'
p1535
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1536
I7
sS'.thisN'
p1537
I194
sS'.thisIndex'
p1538
I8
sg15
(lp1539
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I8
sa(dp1540
g17
(lp1541
S'k'
asg18
S'Y'
sS'.thisRepN'
p1542
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1543
I8
sS'.thisN'
p1544
I195
sS'.thisIndex'
p1545
I6
sg15
(lp1546
S'd'
asg30
Vf
sg16
S'N'
sg14
I4
sg19
(lp1547
S'space'
p1548
asg94
I6
sa(dp1549
g17
(lp1550
S'k'
asg18
S'Y'
sS'.thisRepN'
p1551
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1552
I9
sS'.thisN'
p1553
I196
sS'.thisIndex'
p1554
I7
sg15
(lp1555
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
(lp1556
S'space'
p1557
asg94
I7
sa(dp1558
g17
(lp1559
S'k'
asg18
S'N'
sS'.thisRepN'
p1560
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1561
I10
sS'.thisN'
p1562
I197
sS'.thisIndex'
p1563
I7
sg15
(lp1564
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I7
sa(dp1565
g17
(lp1566
S'k'
asg18
S'N'
sS'.thisRepN'
p1567
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1568
I0
sS'.thisN'
p1569
I198
sS'.thisIndex'
p1570
I3
sg15
(lp1571
S'k'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I3
sa(dp1572
g17
(lp1573
S'd'
asg18
S'N'
sg22
I39
sS'.thisN'
p1574
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1575
I1
sS'.thisRepN'
p1576
I18
sg21
I41
sS'.thisIndex'
p1577
I7
sg23
I22
sg15
(lp1578
S'd'
asg30
Vf
sg16
S'Y'
sg14
I4
sg19
Nsg94
I7
sa(dp1579
g17
(lp1580
S'd'
asg94
I0
sS'.thisRepN'
p1581
I18
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1582
I2
sS'.thisN'
p1583
I200
sS'.thisIndex'
p1584
I0
sg15
(lp1585
S'd'
asg16
S'Y'
sg14
I5
sa(dp1586
g17
(lp1587
S'k'
asg94
I4
sS'.thisRepN'
p1588
I18
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1589
I3
sS'.thisN'
p1590
I201
sS'.thisIndex'
p1591
I4
sg15
(lp1592
S'k'
asg16
S'Y'
sg14
I5
sa(dp1593
g17
(lp1594
S'd'
asg18
S'N'
sS'.thisRepN'
p1595
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1596
I4
sS'.thisN'
p1597
I202
sS'.thisIndex'
p1598
I3
sg15
(lp1599
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I3
sa(dp1600
g17
(lp1601
S'k'
asg18
S'Y'
sS'.thisRepN'
p1602
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1603
I5
sS'.thisN'
p1604
I203
sS'.thisIndex'
p1605
I4
sg15
(lp1606
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1607
S'space'
p1608
asg94
I4
sa(dp1609
g17
(lp1610
S'd'
asg18
S'Y'
sS'.thisRepN'
p1611
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1612
I6
sS'.thisN'
p1613
I204
sS'.thisIndex'
p1614
I0
sg15
(lp1615
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I0
sa(dp1616
g18
S'Y'
sS'.thisRepN'
p1617
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1618
I7
sS'.thisN'
p1619
I205
sS'.thisIndex'
p1620
I4
sg15
Nsg30
Vf
sg16
g99
sg14
I5
sg19
Nsg94
I4
sa(dp1621
g17
(lp1622
S'd'
asg18
S'N'
sS'.thisRepN'
p1623
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1624
I8
sS'.thisN'
p1625
I206
sS'.thisIndex'
p1626
I8
sg15
(lp1627
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I8
sa(dp1628
g17
(lp1629
S'd'
asg18
S'N'
sS'.thisRepN'
p1630
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1631
I9
sS'.thisN'
p1632
I207
sS'.thisIndex'
p1633
I3
sg15
(lp1634
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1635
S'space'
p1636
asg94
I3
sa(dp1637
g17
(lp1638
S'k'
asg18
S'Y'
sS'.thisRepN'
p1639
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1640
I10
sS'.thisN'
p1641
I208
sS'.thisIndex'
p1642
I0
sg15
(lp1643
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1644
S'space'
p1645
asg94
I0
sa(dp1646
g17
(lp1647
S'k'
asg18
S'N'
sS'.thisRepN'
p1648
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1649
I0
sS'.thisN'
p1650
I209
sS'.thisIndex'
p1651
I8
sg15
(lp1652
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I8
sa(dp1653
g17
(lp1654
S'k'
asg18
S'Y'
sS'.thisRepN'
p1655
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1656
I1
sS'.thisN'
p1657
I210
sS'.thisIndex'
p1658
I0
sg15
(lp1659
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I0
sa(dp1660
g17
(lp1661
S'd'
asg18
S'N'
sS'.thisRepN'
p1662
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1663
I2
sS'.thisN'
p1664
I211
sS'.thisIndex'
p1665
I8
sg15
(lp1666
S'k'
asg30
Vf
sg16
S'N'
sg14
I5
sg19
Nsg94
I8
sa(dp1667
g17
(lp1668
S'd'
asg18
S'Y'
sS'.thisRepN'
p1669
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1670
I3
sS'.thisN'
p1671
I212
sS'.thisIndex'
p1672
I4
sg15
(lp1673
S'k'
asg30
Vf
sg16
S'N'
sg14
I5
sg19
(lp1674
S'space'
p1675
asg94
I4
sa(dp1676
g17
(lp1677
S'd'
asg18
S'Y'
sS'.thisRepN'
p1678
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1679
I4
sS'.thisN'
p1680
I213
sS'.thisIndex'
p1681
I0
sg15
(lp1682
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I0
sa(dp1683
g17
(lp1684
S'k'
asg18
S'N'
sS'.thisRepN'
p1685
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1686
I5
sS'.thisN'
p1687
I214
sS'.thisIndex'
p1688
I5
sg15
(lp1689
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I5
sa(dp1690
g17
(lp1691
S'd'
asg18
S'Y'
sS'.thisRepN'
p1692
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1693
I6
sS'.thisN'
p1694
I215
sS'.thisIndex'
p1695
I7
sg15
(lp1696
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1697
S'space'
p1698
asg94
I7
sa(dp1699
g17
(lp1700
S'k'
asg18
S'Y'
sS'.thisRepN'
p1701
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1702
I7
sS'.thisN'
p1703
I216
sS'.thisIndex'
p1704
I1
sg15
(lp1705
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I1
sa(dp1706
g17
(lp1707
S'k'
asg18
S'N'
sS'.thisRepN'
p1708
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1709
I8
sS'.thisN'
p1710
I217
sS'.thisIndex'
p1711
I2
sg15
(lp1712
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I2
sa(dp1713
g17
(lp1714
S'k'
asg18
S'N'
sS'.thisRepN'
p1715
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1716
I9
sS'.thisN'
p1717
I218
sS'.thisIndex'
p1718
I10
sg15
(lp1719
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I10
sa(dp1720
g17
(lp1721
S'd'
asg18
S'Y'
sS'.thisRepN'
p1722
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1723
I10
sS'.thisN'
p1724
I219
sS'.thisIndex'
p1725
I0
sg15
(lp1726
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I0
sa(dp1727
g17
(lp1728
S'k'
asg18
S'N'
sS'.thisRepN'
p1729
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1730
I0
sS'.thisN'
p1731
I220
sS'.thisIndex'
p1732
I9
sg15
(lp1733
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I9
sa(dp1734
g17
(lp1735
S'k'
asg18
S'N'
sS'.thisRepN'
p1736
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1737
I1
sS'.thisN'
p1738
I221
sS'.thisIndex'
p1739
I7
sg15
(lp1740
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I7
sa(dp1741
g17
(lp1742
S'k'
asg18
S'Y'
sS'.thisRepN'
p1743
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1744
I2
sS'.thisN'
p1745
I222
sS'.thisIndex'
p1746
I0
sg15
(lp1747
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1748
S'space'
p1749
asg94
I0
sa(dp1750
g17
(lp1751
S'k'
asg18
S'Y'
sS'.thisRepN'
p1752
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1753
I3
sS'.thisN'
p1754
I223
sS'.thisIndex'
p1755
I1
sg15
(lp1756
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I1
sa(dp1757
g17
(lp1758
S'k'
asg18
S'N'
sS'.thisRepN'
p1759
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1760
I4
sS'.thisN'
p1761
I224
sS'.thisIndex'
p1762
I1
sg15
(lp1763
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1764
S'k'
asg94
I1
sa(dp1765
g17
(lp1766
S'k'
asg18
S'Y'
sS'.thisRepN'
p1767
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1768
I5
sS'.thisN'
p1769
I225
sS'.thisIndex'
p1770
I1
sg15
(lp1771
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1772
S'space'
p1773
asg94
I1
sa(dp1774
g17
(lp1775
S'd'
asg18
S'N'
sS'.thisRepN'
p1776
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1777
I6
sS'.thisN'
p1778
I226
sS'.thisIndex'
p1779
I7
sg15
(lp1780
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I7
sa(dp1781
g17
(lp1782
S'k'
asg18
S'N'
sS'.thisRepN'
p1783
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1784
I7
sS'.thisN'
p1785
I227
sS'.thisIndex'
p1786
I7
sg15
(lp1787
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I7
sa(dp1788
g17
(lp1789
S'd'
asg18
S'N'
sS'.thisRepN'
p1790
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1791
I8
sS'.thisN'
p1792
I228
sS'.thisIndex'
p1793
I0
sg15
(lp1794
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I0
sa(dp1795
g17
(lp1796
S'd'
asg18
S'N'
sS'.thisRepN'
p1797
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1798
I9
sS'.thisN'
p1799
I229
sS'.thisIndex'
p1800
I2
sg15
(lp1801
S'k'
asg30
Vf
sg16
S'N'
sg14
I5
sg19
Nsg94
I2
sa(dp1802
g17
(lp1803
S'k'
asg18
S'Y'
sS'.thisRepN'
p1804
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1805
I10
sS'.thisN'
p1806
I230
sS'.thisIndex'
p1807
I5
sg15
(lp1808
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I5
sa(dp1809
g17
(lp1810
S'd'
asg18
S'Y'
sS'.thisRepN'
p1811
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1812
I0
sS'.thisN'
p1813
I231
sS'.thisIndex'
p1814
I3
sg15
(lp1815
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1816
S'space'
p1817
asg94
I3
sa(dp1818
g17
(lp1819
S'd'
asg18
S'N'
sS'.thisRepN'
p1820
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1821
I1
sS'.thisN'
p1822
I232
sS'.thisIndex'
p1823
I4
sg15
(lp1824
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I4
sa(dp1825
g17
(lp1826
S'k'
asg18
S'N'
sS'.thisRepN'
p1827
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1828
I2
sS'.thisN'
p1829
I233
sS'.thisIndex'
p1830
I0
sg15
(lp1831
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I0
sa(dp1832
g17
(lp1833
S'k'
asg18
S'Y'
sS'.thisRepN'
p1834
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1835
I3
sS'.thisN'
p1836
I234
sS'.thisIndex'
p1837
I3
sg15
(lp1838
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1839
S'space'
p1840
asg94
I3
sa(dp1841
g17
(lp1842
S'd'
asg18
S'N'
sS'.thisRepN'
p1843
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1844
I4
sS'.thisN'
p1845
I235
sS'.thisIndex'
p1846
I9
sg15
(lp1847
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I9
sa(dp1848
g17
(lp1849
S'k'
asg18
S'Y'
sS'.thisRepN'
p1850
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1851
I5
sS'.thisN'
p1852
I236
sS'.thisIndex'
p1853
I5
sg15
(lp1854
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1855
S'space'
p1856
asg94
I5
sa(dp1857
g17
(lp1858
S'd'
asg18
S'Y'
sS'.thisRepN'
p1859
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1860
I6
sS'.thisN'
p1861
I237
sS'.thisIndex'
p1862
I4
sg15
(lp1863
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I4
sa(dp1864
g17
(lp1865
S'd'
asg18
S'Y'
sS'.thisRepN'
p1866
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1867
I7
sS'.thisN'
p1868
I238
sS'.thisIndex'
p1869
I9
sg15
(lp1870
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1871
S'space'
p1872
asg94
I9
sa(dp1873
g17
(lp1874
S'k'
asg18
S'N'
sS'.thisRepN'
p1875
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1876
I8
sS'.thisN'
p1877
I239
sS'.thisIndex'
p1878
I9
sg15
(lp1879
S'd'
asg30
Vf
sg16
S'N'
sg14
I5
sg19
Nsg94
I9
sa(dp1880
g17
(lp1881
S'k'
asg18
S'N'
sS'.thisRepN'
p1882
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1883
I9
sS'.thisN'
p1884
I240
sS'.thisIndex'
p1885
I0
sg15
(lp1886
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I0
sa(dp1887
g17
(lp1888
S'd'
asg18
S'N'
sS'.thisRepN'
p1889
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1890
I10
sS'.thisN'
p1891
I241
sS'.thisIndex'
p1892
I8
sg15
(lp1893
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I8
sa(dp1894
g17
(lp1895
S'k'
asg18
S'N'
sS'.thisRepN'
p1896
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1897
I0
sS'.thisN'
p1898
I242
sS'.thisIndex'
p1899
I5
sg15
(lp1900
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I5
sa(dp1901
g17
(lp1902
S'k'
asg18
S'N'
sS'.thisRepN'
p1903
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1904
I1
sS'.thisN'
p1905
I243
sS'.thisIndex'
p1906
I2
sg15
(lp1907
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I2
sa(dp1908
g17
(lp1909
S'd'
asg18
S'N'
sS'.thisRepN'
p1910
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1911
I2
sS'.thisN'
p1912
I244
sS'.thisIndex'
p1913
I7
sg15
(lp1914
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I7
sa(dp1915
g17
(lp1916
S'k'
asg18
S'N'
sS'.thisRepN'
p1917
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1918
I3
sS'.thisN'
p1919
I245
sS'.thisIndex'
p1920
I6
sg15
(lp1921
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I6
sa(dp1922
g17
(lp1923
S'd'
asg18
S'N'
sS'.thisRepN'
p1924
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1925
I4
sS'.thisN'
p1926
I246
sS'.thisIndex'
p1927
I2
sg15
(lp1928
S'd'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I2
sa(dp1929
g17
(lp1930
S'k'
asg18
S'Y'
sS'.thisRepN'
p1931
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1932
I5
sS'.thisN'
p1933
I247
sS'.thisIndex'
p1934
I5
sg15
(lp1935
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I5
sa(dp1936
g17
(lp1937
S'k'
asg18
S'N'
sS'.thisRepN'
p1938
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1939
I6
sS'.thisN'
p1940
I248
sS'.thisIndex'
p1941
I1
sg15
(lp1942
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
Nsg94
I1
sa(dp1943
g17
(lp1944
S'k'
asg18
S'N'
sg22
I35
sS'.thisN'
p1945
I249
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1946
I7
sS'.thisRepN'
p1947
I22
sg21
I45
sS'.thisIndex'
p1948
I4
sg23
I20
sg15
(lp1949
S'k'
asg30
Vf
sg16
S'Y'
sg14
I5
sg19
(lp1950
S'k'
asg94
I4
sa(dp1951
g17
(lp1952
S'd'
asg94
I10
sS'.thisRepN'
p1953
I22
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1954
I8
sS'.thisN'
p1955
I250
sS'.thisIndex'
p1956
I10
sg15
(lp1957
S'k'
asg16
S'N'
sg14
I6
sa(dp1958
g17
(lp1959
S'k'
asg94
I3
sS'.thisRepN'
p1960
I22
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1961
I9
sS'.thisN'
p1962
I251
sS'.thisIndex'
p1963
I3
sg15
(lp1964
S'k'
asg16
S'Y'
sg14
I6
sa(dp1965
g17
(lp1966
S'k'
asg18
S'Y'
sS'.thisRepN'
p1967
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1968
I10
sS'.thisN'
p1969
I252
sS'.thisIndex'
p1970
I5
sg15
(lp1971
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
(lp1972
S'space'
p1973
asg94
I5
sa(dp1974
g17
(lp1975
S'd'
asg18
S'Y'
sS'.thisRepN'
p1976
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1977
I0
sS'.thisN'
p1978
I253
sS'.thisIndex'
p1979
I4
sg15
(lp1980
S'k'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
Nsg94
I4
sa(dp1981
g17
(lp1982
S'd'
asg18
S'N'
sS'.thisRepN'
p1983
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1984
I1
sS'.thisN'
p1985
I254
sS'.thisIndex'
p1986
I1
sg15
(lp1987
S'k'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
Nsg94
I1
sa(dp1988
g17
(lp1989
S'k'
asg18
S'N'
sS'.thisRepN'
p1990
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1991
I2
sS'.thisN'
p1992
I255
sS'.thisIndex'
p1993
I8
sg15
(lp1994
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
(lp1995
S'k'
asg94
I8
sa(dp1996
g17
(lp1997
S'k'
asg18
S'N'
sS'.thisRepN'
p1998
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1999
I3
sS'.thisN'
p2000
I256
sS'.thisIndex'
p2001
I10
sg15
(lp2002
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I10
sa(dp2003
g17
(lp2004
S'k'
asg18
S'Y'
sS'.thisRepN'
p2005
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2006
I4
sS'.thisN'
p2007
I257
sS'.thisIndex'
p2008
I6
sg15
(lp2009
S'd'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
(lp2010
S'space'
p2011
asg94
I6
sa(dp2012
g17
(lp2013
S'd'
asg18
S'N'
sS'.thisRepN'
p2014
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2015
I5
sS'.thisN'
p2016
I258
sS'.thisIndex'
p2017
I9
sg15
(lp2018
S'k'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
Nsg94
I9
sa(dp2019
g17
(lp2020
S'k'
asg18
S'N'
sS'.thisRepN'
p2021
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2022
I6
sS'.thisN'
p2023
I259
sS'.thisIndex'
p2024
I2
sg15
(lp2025
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2026
g17
(lp2027
S'd'
asg18
S'N'
sS'.thisRepN'
p2028
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2029
I7
sS'.thisN'
p2030
I260
sS'.thisIndex'
p2031
I4
sg15
(lp2032
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I4
sa(dp2033
g17
(lp2034
S'k'
asg18
S'Y'
sS'.thisRepN'
p2035
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2036
I8
sS'.thisN'
p2037
I261
sS'.thisIndex'
p2038
I1
sg15
(lp2039
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I1
sa(dp2040
g17
(lp2041
S'd'
asg18
S'Y'
sS'.thisRepN'
p2042
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2043
I9
sS'.thisN'
p2044
I262
sS'.thisIndex'
p2045
I8
sg15
(lp2046
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
(lp2047
S'space'
p2048
asg94
I8
sa(dp2049
g17
(lp2050
S'd'
asg18
S'N'
sS'.thisRepN'
p2051
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2052
I10
sS'.thisN'
p2053
I263
sS'.thisIndex'
p2054
I3
sg15
(lp2055
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
(lp2056
S'k'
asg94
I3
sa(dp2057
g17
(lp2058
S'k'
asg18
S'Y'
sS'.thisRepN'
p2059
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2060
I0
sS'.thisN'
p2061
I264
sS'.thisIndex'
p2062
I8
sg15
(lp2063
S'd'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
(lp2064
S'space'
p2065
asg94
I8
sa(dp2066
g17
(lp2067
S'k'
asg18
S'Y'
sS'.thisRepN'
p2068
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2069
I1
sS'.thisN'
p2070
I265
sS'.thisIndex'
p2071
I3
sg15
(lp2072
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
(lp2073
S'space'
p2074
asg94
I3
sa(dp2075
g17
(lp2076
S'd'
asg18
S'Y'
sS'.thisRepN'
p2077
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2078
I2
sS'.thisN'
p2079
I266
sS'.thisIndex'
p2080
I9
sg15
(lp2081
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
(lp2082
S'space'
p2083
asg94
I9
sa(dp2084
g17
(lp2085
S'd'
asg18
S'Y'
sS'.thisRepN'
p2086
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2087
I3
sS'.thisN'
p2088
I267
sS'.thisIndex'
p2089
I1
sg15
(lp2090
S'k'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
(lp2091
S'space'
p2092
asg94
I1
sa(dp2093
g17
(lp2094
S'k'
asg18
S'N'
sS'.thisRepN'
p2095
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2096
I4
sS'.thisN'
p2097
I268
sS'.thisIndex'
p2098
I6
sg15
(lp2099
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I6
sa(dp2100
g17
(lp2101
S'k'
asg18
S'Y'
sS'.thisRepN'
p2102
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2103
I5
sS'.thisN'
p2104
I269
sS'.thisIndex'
p2105
I8
sg15
(lp2106
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I8
sa(dp2107
g17
(lp2108
S'd'
asg18
S'N'
sS'.thisRepN'
p2109
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2110
I6
sS'.thisN'
p2111
I270
sS'.thisIndex'
p2112
I4
sg15
(lp2113
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I4
sa(dp2114
g17
(lp2115
S'k'
asg18
S'Y'
sS'.thisRepN'
p2116
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2117
I7
sS'.thisN'
p2118
I271
sS'.thisIndex'
p2119
I0
sg15
(lp2120
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I0
sa(dp2121
g17
(lp2122
S'd'
asg18
S'N'
sS'.thisRepN'
p2123
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2124
I8
sS'.thisN'
p2125
I272
sS'.thisIndex'
p2126
I7
sg15
(lp2127
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I7
sa(dp2128
g17
(lp2129
S'k'
asg18
S'N'
sS'.thisRepN'
p2130
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2131
I9
sS'.thisN'
p2132
I273
sS'.thisIndex'
p2133
I6
sg15
(lp2134
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I6
sa(dp2135
g17
(lp2136
S'd'
asg18
S'N'
sS'.thisRepN'
p2137
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2138
I10
sS'.thisN'
p2139
I274
sS'.thisIndex'
p2140
I9
sg15
(lp2141
S'k'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
Nsg94
I9
sa(dp2142
g17
(lp2143
S'd'
asg18
S'N'
sS'.thisRepN'
p2144
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2145
I0
sS'.thisN'
p2146
I275
sS'.thisIndex'
p2147
I5
sg15
(lp2148
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I5
sa(dp2149
g17
(lp2150
S'd'
asg18
S'N'
sS'.thisRepN'
p2151
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2152
I1
sS'.thisN'
p2153
I276
sS'.thisIndex'
p2154
I5
sg15
(lp2155
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I5
sa(dp2156
g17
(lp2157
S'k'
asg18
S'N'
sS'.thisRepN'
p2158
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2159
I2
sS'.thisN'
p2160
I277
sS'.thisIndex'
p2161
I2
sg15
(lp2162
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2163
g17
(lp2164
S'k'
asg18
S'Y'
sS'.thisRepN'
p2165
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2166
I3
sS'.thisN'
p2167
I278
sS'.thisIndex'
p2168
I5
sg15
(lp2169
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I5
sa(dp2170
g17
(lp2171
S'k'
asg18
S'N'
sS'.thisRepN'
p2172
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2173
I4
sS'.thisN'
p2174
I279
sS'.thisIndex'
p2175
I8
sg15
(lp2176
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I8
sa(dp2177
g17
(lp2178
S'd'
asg18
S'Y'
sS'.thisRepN'
p2179
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2180
I5
sS'.thisN'
p2181
I280
sS'.thisIndex'
p2182
I0
sg15
(lp2183
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
(lp2184
S'space'
p2185
asg94
I0
sa(dp2186
g17
(lp2187
S'k'
asg18
S'Y'
sS'.thisRepN'
p2188
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2189
I6
sS'.thisN'
p2190
I281
sS'.thisIndex'
p2191
I10
sg15
(lp2192
S'd'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
(lp2193
S'space'
p2194
asg94
I10
sa(dp2195
g17
(lp2196
S'd'
asg18
S'N'
sS'.thisRepN'
p2197
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2198
I7
sS'.thisN'
p2199
I282
sS'.thisIndex'
p2200
I2
sg15
(lp2201
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2202
g17
(lp2203
S'k'
asg18
S'Y'
sS'.thisRepN'
p2204
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2205
I8
sS'.thisN'
p2206
I283
sS'.thisIndex'
p2207
I7
sg15
(lp2208
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
(lp2209
S'space'
p2210
asg94
I7
sa(dp2211
g17
(lp2212
S'd'
asg18
S'Y'
sS'.thisRepN'
p2213
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2214
I9
sS'.thisN'
p2215
I284
sS'.thisIndex'
p2216
I9
sg15
(lp2217
S'k'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
Nsg94
I9
sa(dp2218
g17
(lp2219
S'k'
asg18
S'N'
sS'.thisRepN'
p2220
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2221
I10
sS'.thisN'
p2222
I285
sS'.thisIndex'
p2223
I10
sg15
(lp2224
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I10
sa(dp2225
g17
(lp2226
S'd'
asg18
S'Y'
sS'.thisRepN'
p2227
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2228
I0
sS'.thisN'
p2229
I286
sS'.thisIndex'
p2230
I7
sg15
(lp2231
S'k'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
(lp2232
S'space'
p2233
asg94
I7
sa(dp2234
g17
(lp2235
S'k'
asg18
S'Y'
sS'.thisRepN'
p2236
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2237
I1
sS'.thisN'
p2238
I287
sS'.thisIndex'
p2239
I2
sg15
(lp2240
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2241
g17
(lp2242
S'd'
asg18
S'Y'
sS'.thisRepN'
p2243
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2244
I2
sS'.thisN'
p2245
I288
sS'.thisIndex'
p2246
I8
sg15
(lp2247
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I8
sa(dp2248
g17
(lp2249
S'k'
asg18
S'N'
sS'.thisRepN'
p2250
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2251
I3
sS'.thisN'
p2252
I289
sS'.thisIndex'
p2253
I8
sg15
(lp2254
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I8
sa(dp2255
g17
(lp2256
S'k'
asg18
S'N'
sS'.thisRepN'
p2257
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2258
I4
sS'.thisN'
p2259
I290
sS'.thisIndex'
p2260
I10
sg15
(lp2261
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I10
sa(dp2262
g17
(lp2263
S'd'
asg18
S'Y'
sS'.thisRepN'
p2264
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2265
I5
sS'.thisN'
p2266
I291
sS'.thisIndex'
p2267
I4
sg15
(lp2268
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I4
sa(dp2269
g17
(lp2270
S'd'
asg18
S'Y'
sS'.thisRepN'
p2271
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2272
I6
sS'.thisN'
p2273
I292
sS'.thisIndex'
p2274
I2
sg15
(lp2275
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2276
g17
(lp2277
S'd'
asg18
S'Y'
sS'.thisRepN'
p2278
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2279
I7
sS'.thisN'
p2280
I293
sS'.thisIndex'
p2281
I4
sg15
(lp2282
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I4
sa(dp2283
g17
(lp2284
S'k'
asg18
S'N'
sS'.thisRepN'
p2285
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2286
I8
sS'.thisN'
p2287
I294
sS'.thisIndex'
p2288
I5
sg15
(lp2289
S'd'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
Nsg94
I5
sa(dp2290
g17
(lp2291
S'd'
asg18
S'Y'
sS'.thisRepN'
p2292
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2293
I9
sS'.thisN'
p2294
I295
sS'.thisIndex'
p2295
I2
sg15
(lp2296
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2297
g17
(lp2298
S'k'
asg18
S'N'
sS'.thisRepN'
p2299
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2300
I10
sS'.thisN'
p2301
I296
sS'.thisIndex'
p2302
I6
sg15
(lp2303
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I6
sa(dp2304
g17
(lp2305
S'd'
asg18
S'N'
sS'.thisRepN'
p2306
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2307
I0
sS'.thisN'
p2308
I297
sS'.thisIndex'
p2309
I10
sg15
(lp2310
S'k'
asg30
Vf
sg16
S'N'
sg14
I6
sg19
Nsg94
I10
sa(dp2311
g17
(lp2312
S'k'
asg18
S'N'
sS'.thisRepN'
p2313
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2314
I1
sS'.thisN'
p2315
I298
sS'.thisIndex'
p2316
I2
sg15
(lp2317
S'k'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2318
g17
(lp2319
S'd'
asg18
S'Y'
sg22
I34
sS'.thisN'
p2320
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2321
I2
sS'.thisRepN'
p2322
I27
sg21
I37
sS'.thisIndex'
p2323
I6
sg23
I24
sg15
(lp2324
S'd'
asg30
Vf
sg16
S'Y'
sg14
I6
sg19
(lp2325
S'space'
p2326
asg94
I6
sa(dp2327
g17
(lp2328
S'k'
asg94
I3
sS'.thisRepN'
p2329
I27
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2330
I3
sS'.thisN'
p2331
I300
sS'.thisIndex'
p2332
I3
sg15
(lp2333
S'k'
asg16
S'Y'
sg14
I7
sa(dp2334
g17
(lp2335
S'd'
asg94
I4
sS'.thisRepN'
p2336
I27
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2337
I4
sS'.thisN'
p2338
I301
sS'.thisIndex'
p2339
I4
sg15
(lp2340
S'd'
asg16
S'Y'
sg14
I7
sa(dp2341
g17
(lp2342
S'k'
asg18
S'N'
sS'.thisRepN'
p2343
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2344
I5
sS'.thisN'
p2345
I302
sS'.thisIndex'
p2346
I5
sg15
(lp2347
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I5
sa(dp2348
g17
(lp2349
S'k'
asg18
S'N'
sS'.thisRepN'
p2350
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2351
I6
sS'.thisN'
p2352
I303
sS'.thisIndex'
p2353
I7
sg15
(lp2354
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I7
sa(dp2355
g17
(lp2356
S'k'
asg18
S'Y'
sS'.thisRepN'
p2357
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2358
I7
sS'.thisN'
p2359
I304
sS'.thisIndex'
p2360
I1
sg15
(lp2361
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I1
sa(dp2362
g17
(lp2363
S'd'
asg18
S'N'
sS'.thisRepN'
p2364
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2365
I8
sS'.thisN'
p2366
I305
sS'.thisIndex'
p2367
I4
sg15
(lp2368
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I4
sa(dp2369
g17
(lp2370
S'd'
asg18
S'Y'
sS'.thisRepN'
p2371
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2372
I9
sS'.thisN'
p2373
I306
sS'.thisIndex'
p2374
I10
sg15
(lp2375
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I10
sa(dp2376
g17
(lp2377
S'k'
asg18
S'N'
sS'.thisRepN'
p2378
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2379
I10
sS'.thisN'
p2380
I307
sS'.thisIndex'
p2381
I6
sg15
(lp2382
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
(lp2383
S'k'
asg94
I6
sa(dp2384
g17
(lp2385
S'd'
asg18
S'Y'
sS'.thisRepN'
p2386
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2387
I0
sS'.thisN'
p2388
I308
sS'.thisIndex'
p2389
I8
sg15
(lp2390
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
(lp2391
S'space'
p2392
asg94
I8
sa(dp2393
g17
(lp2394
S'k'
asg18
S'Y'
sS'.thisRepN'
p2395
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2396
I1
sS'.thisN'
p2397
I309
sS'.thisIndex'
p2398
I5
sg15
(lp2399
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I5
sa(dp2400
g17
(lp2401
S'k'
asg18
S'N'
sS'.thisRepN'
p2402
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2403
I2
sS'.thisN'
p2404
I310
sS'.thisIndex'
p2405
I5
sg15
(lp2406
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I5
sa(dp2407
g17
(lp2408
S'd'
asg18
S'N'
sS'.thisRepN'
p2409
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2410
I3
sS'.thisN'
p2411
I311
sS'.thisIndex'
p2412
I7
sg15
(lp2413
S'k'
asg30
Vf
sg16
S'N'
sg14
I7
sg19
Nsg94
I7
sa(dp2414
g17
(lp2415
S'd'
asg18
S'N'
sS'.thisRepN'
p2416
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2417
I4
sS'.thisN'
p2418
I312
sS'.thisIndex'
p2419
I7
sg15
(lp2420
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I7
sa(dp2421
g17
(lp2422
S'k'
asg18
S'Y'
sS'.thisRepN'
p2423
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2424
I5
sS'.thisN'
p2425
I313
sS'.thisIndex'
p2426
I9
sg15
(lp2427
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
(lp2428
S'space'
p2429
asg94
I9
sa(dp2430
g17
(lp2431
S'k'
asg18
S'Y'
sS'.thisRepN'
p2432
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2433
I6
sS'.thisN'
p2434
I314
sS'.thisIndex'
p2435
I3
sg15
(lp2436
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I3
sa(dp2437
g17
(lp2438
S'k'
asg18
S'Y'
sS'.thisRepN'
p2439
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2440
I7
sS'.thisN'
p2441
I315
sS'.thisIndex'
p2442
I1
sg15
(lp2443
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I1
sa(dp2444
g17
(lp2445
S'd'
asg18
S'Y'
sS'.thisRepN'
p2446
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2447
I8
sS'.thisN'
p2448
I316
sS'.thisIndex'
p2449
I9
sg15
(lp2450
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
(lp2451
S'space'
p2452
asg94
I9
sa(dp2453
g17
(lp2454
S'd'
asg18
S'N'
sS'.thisRepN'
p2455
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2456
I9
sS'.thisN'
p2457
I317
sS'.thisIndex'
p2458
I8
sg15
(lp2459
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I8
sa(dp2460
g17
(lp2461
S'd'
asg18
S'N'
sS'.thisRepN'
p2462
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2463
I10
sS'.thisN'
p2464
I318
sS'.thisIndex'
p2465
I5
sg15
(lp2466
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I5
sa(dp2467
g17
(lp2468
S'd'
asg18
S'N'
sS'.thisRepN'
p2469
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2470
I0
sS'.thisN'
p2471
I319
sS'.thisIndex'
p2472
I3
sg15
(lp2473
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I3
sa(dp2474
g17
(lp2475
S'k'
asg18
S'Y'
sS'.thisRepN'
p2476
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2477
I1
sS'.thisN'
p2478
I320
sS'.thisIndex'
p2479
I2
sg15
(lp2480
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I2
sa(dp2481
g17
(lp2482
S'k'
asg18
S'N'
sS'.thisRepN'
p2483
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2484
I2
sS'.thisN'
p2485
I321
sS'.thisIndex'
p2486
I1
sg15
(lp2487
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I1
sa(dp2488
g17
(lp2489
S'd'
asg18
S'N'
sS'.thisRepN'
p2490
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2491
I3
sS'.thisN'
p2492
I322
sS'.thisIndex'
p2493
I10
sg15
(lp2494
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I10
sa(dp2495
g17
(lp2496
S'k'
asg18
S'N'
sS'.thisRepN'
p2497
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2498
I4
sS'.thisN'
p2499
I323
sS'.thisIndex'
p2500
I7
sg15
(lp2501
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I7
sa(dp2502
g17
(lp2503
S'd'
asg18
S'N'
sS'.thisRepN'
p2504
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2505
I5
sS'.thisN'
p2506
I324
sS'.thisIndex'
p2507
I4
sg15
(lp2508
S'k'
asg30
Vf
sg16
S'N'
sg14
I7
sg19
Nsg94
I4
sa(dp2509
g17
(lp2510
S'k'
asg18
S'Y'
sS'.thisRepN'
p2511
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2512
I6
sS'.thisN'
p2513
I325
sS'.thisIndex'
p2514
I7
sg15
(lp2515
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
(lp2516
S'space'
p2517
asg94
I7
sa(dp2518
g17
(lp2519
S'd'
asg18
S'Y'
sS'.thisRepN'
p2520
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2521
I7
sS'.thisN'
p2522
I326
sS'.thisIndex'
p2523
I10
sg15
(lp2524
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I10
sa(dp2525
g17
(lp2526
S'k'
asg18
S'Y'
sS'.thisRepN'
p2527
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2528
I8
sS'.thisN'
p2529
I327
sS'.thisIndex'
p2530
I0
sg15
(lp2531
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
(lp2532
S'space'
p2533
asg94
I0
sa(dp2534
g17
(lp2535
S'd'
asg18
S'N'
sS'.thisRepN'
p2536
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2537
I9
sS'.thisN'
p2538
I328
sS'.thisIndex'
p2539
I1
sg15
(lp2540
S'k'
asg30
Vf
sg16
S'N'
sg14
I7
sg19
Nsg94
I1
sa(dp2541
g17
(lp2542
S'k'
asg18
S'Y'
sS'.thisRepN'
p2543
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2544
I10
sS'.thisN'
p2545
I329
sS'.thisIndex'
p2546
I6
sg15
(lp2547
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I6
sa(dp2548
g17
(lp2549
S'd'
asg18
S'Y'
sS'.thisRepN'
p2550
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2551
I0
sS'.thisN'
p2552
I330
sS'.thisIndex'
p2553
I9
sg15
(lp2554
S'k'
asg30
Vf
sg16
S'N'
sg14
I7
sg19
(lp2555
S'space'
p2556
asg94
I9
sa(dp2557
g17
(lp2558
S'd'
asg18
S'Y'
sS'.thisRepN'
p2559
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2560
I1
sS'.thisN'
p2561
I331
sS'.thisIndex'
p2562
I5
sg15
(lp2563
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I5
sa(dp2564
g17
(lp2565
S'k'
asg18
S'Y'
sS'.thisRepN'
p2566
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2567
I2
sS'.thisN'
p2568
I332
sS'.thisIndex'
p2569
I10
sg15
(lp2570
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I10
sa(dp2571
g17
(lp2572
S'd'
asg18
S'Y'
sS'.thisRepN'
p2573
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2574
I3
sS'.thisN'
p2575
I333
sS'.thisIndex'
p2576
I4
sg15
(lp2577
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
(lp2578
S'k'
asg94
I4
sa(dp2579
g17
(lp2580
S'k'
asg18
S'Y'
sS'.thisRepN'
p2581
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2582
I4
sS'.thisN'
p2583
I334
sS'.thisIndex'
p2584
I6
sg15
(lp2585
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I6
sa(dp2586
g17
(lp2587
S'd'
asg18
S'N'
sS'.thisRepN'
p2588
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2589
I5
sS'.thisN'
p2590
I335
sS'.thisIndex'
p2591
I4
sg15
(lp2592
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I4
sa(dp2593
g17
(lp2594
S'k'
asg18
S'N'
sS'.thisRepN'
p2595
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2596
I6
sS'.thisN'
p2597
I336
sS'.thisIndex'
p2598
I6
sg15
(lp2599
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I6
sa(dp2600
g17
(lp2601
S'd'
asg18
S'Y'
sS'.thisRepN'
p2602
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2603
I7
sS'.thisN'
p2604
I337
sS'.thisIndex'
p2605
I2
sg15
(lp2606
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I2
sa(dp2607
g17
(lp2608
S'k'
asg18
S'Y'
sS'.thisRepN'
p2609
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2610
I8
sS'.thisN'
p2611
I338
sS'.thisIndex'
p2612
I6
sg15
(lp2613
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
(lp2614
S'space'
p2615
asg94
I6
sa(dp2616
g17
(lp2617
S'd'
asg18
S'N'
sS'.thisRepN'
p2618
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2619
I9
sS'.thisN'
p2620
I339
sS'.thisIndex'
p2621
I7
sg15
(lp2622
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I7
sa(dp2623
g17
(lp2624
S'k'
asg18
S'N'
sS'.thisRepN'
p2625
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2626
I10
sS'.thisN'
p2627
I340
sS'.thisIndex'
p2628
I2
sg15
(lp2629
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I2
sa(dp2630
g17
(lp2631
S'd'
asg18
S'N'
sS'.thisRepN'
p2632
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2633
I0
sS'.thisN'
p2634
I341
sS'.thisIndex'
p2635
I5
sg15
(lp2636
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I5
sa(dp2637
g17
(lp2638
S'k'
asg18
S'Y'
sS'.thisRepN'
p2639
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2640
I1
sS'.thisN'
p2641
I342
sS'.thisIndex'
p2642
I8
sg15
(lp2643
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I8
sa(dp2644
g17
(lp2645
S'd'
asg18
S'Y'
sS'.thisRepN'
p2646
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2647
I2
sS'.thisN'
p2648
I343
sS'.thisIndex'
p2649
I10
sg15
(lp2650
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
(lp2651
S'space'
p2652
asg94
I10
sa(dp2653
g17
(lp2654
S'd'
asg18
S'N'
sS'.thisRepN'
p2655
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2656
I3
sS'.thisN'
p2657
I344
sS'.thisIndex'
p2658
I10
sg15
(lp2659
S'd'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I10
sa(dp2660
g17
(lp2661
S'd'
asg18
S'Y'
sS'.thisRepN'
p2662
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2663
I4
sS'.thisN'
p2664
I345
sS'.thisIndex'
p2665
I7
sg15
(lp2666
S'k'
asg30
Vf
sg16
S'N'
sg14
I7
sg19
Nsg94
I7
sa(dp2667
g17
(lp2668
S'k'
asg18
S'Y'
sS'.thisRepN'
p2669
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2670
I5
sS'.thisN'
p2671
I346
sS'.thisIndex'
p2672
I8
sg15
(lp2673
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I8
sa(dp2674
g17
(lp2675
S'k'
asg18
S'Y'
sS'.thisRepN'
p2676
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2677
I6
sS'.thisN'
p2678
I347
sS'.thisIndex'
p2679
I7
sg15
(lp2680
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
(lp2681
S'space'
p2682
asg94
I7
sa(dp2683
g17
(lp2684
S'd'
asg18
S'N'
sS'.thisRepN'
p2685
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2686
I7
sS'.thisN'
p2687
I348
sS'.thisIndex'
p2688
I8
sg15
(lp2689
S'k'
asg30
Vf
sg16
S'N'
sg14
I7
sg19
Nsg94
I8
sa(dp2690
g17
(lp2691
S'k'
asg18
S'N'
sg22
I31
sS'.thisN'
p2692
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2693
I8
sS'.thisRepN'
p2694
I31
sg21
I44
sS'.thisIndex'
p2695
I9
sg23
I25
sg15
(lp2696
S'k'
asg30
Vf
sg16
S'Y'
sg14
I7
sg19
Nsg94
I9
sa(dp2697
g17
(lp2698
S'k'
asg94
I9
sS'.thisRepN'
p2699
I31
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2700
I9
sS'.thisN'
p2701
I350
sS'.thisIndex'
p2702
I9
sg15
(lp2703
S'k'
asg16
S'Y'
sg14
I8
sa(dp2704
g17
(lp2705
S'k'
asg94
I8
sS'.thisRepN'
p2706
I31
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2707
I10
sS'.thisN'
p2708
I351
sS'.thisIndex'
p2709
I8
sg15
(lp2710
S'k'
asg16
S'Y'
sg14
I8
sa(dp2711
g17
(lp2712
S'k'
asg18
S'Y'
sS'.thisRepN'
p2713
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2714
I0
sS'.thisN'
p2715
I352
sS'.thisIndex'
p2716
I10
sg15
(lp2717
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
(lp2718
S'space'
p2719
asg94
I10
sa(dp2720
g17
(lp2721
S'd'
asg18
S'Y'
sS'.thisRepN'
p2722
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2723
I1
sS'.thisN'
p2724
I353
sS'.thisIndex'
p2725
I2
sg15
(lp2726
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
(lp2727
S'space'
p2728
asg94
I2
sa(dp2729
g17
(lp2730
S'k'
asg18
S'N'
sS'.thisRepN'
p2731
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2732
I2
sS'.thisN'
p2733
I354
sS'.thisIndex'
p2734
I7
sg15
(lp2735
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I7
sa(dp2736
g17
(lp2737
S'd'
asg18
S'N'
sS'.thisRepN'
p2738
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2739
I3
sS'.thisN'
p2740
I355
sS'.thisIndex'
p2741
I9
sg15
(lp2742
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I9
sa(dp2743
g17
(lp2744
S'd'
asg18
S'N'
sS'.thisRepN'
p2745
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2746
I4
sS'.thisN'
p2747
I356
sS'.thisIndex'
p2748
I2
sg15
(lp2749
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I2
sa(dp2750
g17
(lp2751
S'd'
asg18
S'Y'
sS'.thisRepN'
p2752
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2753
I5
sS'.thisN'
p2754
I357
sS'.thisIndex'
p2755
I6
sg15
(lp2756
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I6
sa(dp2757
g17
(lp2758
S'd'
asg18
S'N'
sS'.thisRepN'
p2759
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2760
I6
sS'.thisN'
p2761
I358
sS'.thisIndex'
p2762
I10
sg15
(lp2763
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I10
sa(dp2764
g17
(lp2765
S'd'
asg18
S'N'
sS'.thisRepN'
p2766
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2767
I7
sS'.thisN'
p2768
I359
sS'.thisIndex'
p2769
I5
sg15
(lp2770
S'k'
asg30
Vf
sg16
S'N'
sg14
I8
sg19
Nsg94
I5
sa(dp2771
g17
(lp2772
S'd'
asg18
S'N'
sS'.thisRepN'
p2773
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2774
I8
sS'.thisN'
p2775
I360
sS'.thisIndex'
p2776
I9
sg15
(lp2777
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I9
sa(dp2778
g17
(lp2779
S'k'
asg18
S'Y'
sS'.thisRepN'
p2780
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2781
I9
sS'.thisN'
p2782
I361
sS'.thisIndex'
p2783
I8
sg15
(lp2784
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I8
sa(dp2785
g17
(lp2786
S'd'
asg18
S'N'
sS'.thisRepN'
p2787
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2788
I10
sS'.thisN'
p2789
I362
sS'.thisIndex'
p2790
I8
sg15
(lp2791
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I8
sa(dp2792
g17
(lp2793
S'd'
asg18
S'N'
sS'.thisRepN'
p2794
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2795
I0
sS'.thisN'
p2796
I363
sS'.thisIndex'
p2797
I1
sg15
(lp2798
S'k'
asg30
Vf
sg16
S'N'
sg14
I8
sg19
Nsg94
I1
sa(dp2799
g17
(lp2800
S'd'
asg18
S'Y'
sS'.thisRepN'
p2801
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2802
I1
sS'.thisN'
p2803
I364
sS'.thisIndex'
p2804
I1
sg15
(lp2805
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I1
sa(dp2806
g17
(lp2807
S'd'
asg18
S'N'
sS'.thisRepN'
p2808
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2809
I2
sS'.thisN'
p2810
I365
sS'.thisIndex'
p2811
I0
sg15
(lp2812
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I0
sa(dp2813
g17
(lp2814
S'd'
asg18
S'N'
sS'.thisRepN'
p2815
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2816
I3
sS'.thisN'
p2817
I366
sS'.thisIndex'
p2818
I4
sg15
(lp2819
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I4
sa(dp2820
g17
(lp2821
S'd'
asg18
S'N'
sS'.thisRepN'
p2822
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2823
I4
sS'.thisN'
p2824
I367
sS'.thisIndex'
p2825
I3
sg15
(lp2826
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I3
sa(dp2827
g17
(lp2828
S'k'
asg18
S'N'
sS'.thisRepN'
p2829
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2830
I5
sS'.thisN'
p2831
I368
sS'.thisIndex'
p2832
I5
sg15
(lp2833
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp2834
g17
(lp2835
S'd'
asg18
S'Y'
sS'.thisRepN'
p2836
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2837
I6
sS'.thisN'
p2838
I369
sS'.thisIndex'
p2839
I4
sg15
(lp2840
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
(lp2841
S'space'
p2842
asg94
I4
sa(dp2843
g17
(lp2844
S'k'
asg18
S'N'
sS'.thisRepN'
p2845
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2846
I7
sS'.thisN'
p2847
I370
sS'.thisIndex'
p2848
I3
sg15
(lp2849
S'd'
asg30
Vf
sg16
S'N'
sg14
I8
sg19
Nsg94
I3
sa(dp2850
g17
(lp2851
S'k'
asg18
S'Y'
sS'.thisRepN'
p2852
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2853
I8
sS'.thisN'
p2854
I371
sS'.thisIndex'
p2855
I7
sg15
(lp2856
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
(lp2857
S'space'
p2858
asg94
I7
sa(dp2859
g17
(lp2860
S'k'
asg18
S'N'
sS'.thisRepN'
p2861
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2862
I9
sS'.thisN'
p2863
I372
sS'.thisIndex'
p2864
I7
sg15
(lp2865
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I7
sa(dp2866
g17
(lp2867
S'k'
asg18
S'Y'
sS'.thisRepN'
p2868
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2869
I10
sS'.thisN'
p2870
I373
sS'.thisIndex'
p2871
I2
sg15
(lp2872
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
(lp2873
S'space'
p2874
asg94
I2
sa(dp2875
g17
(lp2876
S'k'
asg18
S'Y'
sS'.thisRepN'
p2877
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2878
I0
sS'.thisN'
p2879
I374
sS'.thisIndex'
p2880
I6
sg15
(lp2881
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
(lp2882
S'space'
p2883
asg94
I6
sa(dp2884
g17
(lp2885
S'd'
asg18
S'N'
sS'.thisRepN'
p2886
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2887
I1
sS'.thisN'
p2888
I375
sS'.thisIndex'
p2889
I0
sg15
(lp2890
S'k'
asg30
Vf
sg16
S'N'
sg14
I8
sg19
Nsg94
I0
sa(dp2891
g17
(lp2892
S'k'
asg18
S'N'
sS'.thisRepN'
p2893
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2894
I2
sS'.thisN'
p2895
I376
sS'.thisIndex'
p2896
I5
sg15
(lp2897
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp2898
g17
(lp2899
S'd'
asg18
S'N'
sS'.thisRepN'
p2900
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2901
I3
sS'.thisN'
p2902
I377
sS'.thisIndex'
p2903
I3
sg15
(lp2904
S'k'
asg30
Vf
sg16
S'N'
sg14
I8
sg19
Nsg94
I3
sa(dp2905
g17
(lp2906
S'd'
asg18
S'Y'
sS'.thisRepN'
p2907
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2908
I4
sS'.thisN'
p2909
I378
sS'.thisIndex'
p2910
I5
sg15
(lp2911
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
(lp2912
S'space'
p2913
asg94
I5
sa(dp2914
g17
(lp2915
S'd'
asg18
S'N'
sS'.thisRepN'
p2916
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2917
I5
sS'.thisN'
p2918
I379
sS'.thisIndex'
p2919
I5
sg15
(lp2920
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp2921
g17
(lp2922
S'k'
asg18
S'Y'
sS'.thisRepN'
p2923
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2924
I6
sS'.thisN'
p2925
I380
sS'.thisIndex'
p2926
I5
sg15
(lp2927
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp2928
g17
(lp2929
S'd'
asg18
S'Y'
sS'.thisRepN'
p2930
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2931
I7
sS'.thisN'
p2932
I381
sS'.thisIndex'
p2933
I10
sg15
(lp2934
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
(lp2935
S'space'
p2936
asg94
I10
sa(dp2937
g17
(lp2938
S'k'
asg18
S'N'
sS'.thisRepN'
p2939
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2940
I8
sS'.thisN'
p2941
I382
sS'.thisIndex'
p2942
I0
sg15
(lp2943
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I0
sa(dp2944
g17
(lp2945
S'k'
asg18
S'Y'
sS'.thisRepN'
p2946
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2947
I9
sS'.thisN'
p2948
I383
sS'.thisIndex'
p2949
I1
sg15
(lp2950
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I1
sa(dp2951
g17
(lp2952
S'd'
asg18
S'Y'
sS'.thisRepN'
p2953
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2954
I10
sS'.thisN'
p2955
I384
sS'.thisIndex'
p2956
I0
sg15
(lp2957
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
(lp2958
S'space'
p2959
asg94
I0
sa(dp2960
g17
(lp2961
S'd'
asg18
S'N'
sS'.thisRepN'
p2962
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2963
I0
sS'.thisN'
p2964
I385
sS'.thisIndex'
p2965
I6
sg15
(lp2966
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I6
sa(dp2967
g17
(lp2968
S'k'
asg18
S'Y'
sS'.thisRepN'
p2969
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2970
I1
sS'.thisN'
p2971
I386
sS'.thisIndex'
p2972
I4
sg15
(lp2973
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I4
sa(dp2974
g17
(lp2975
S'k'
asg18
S'N'
sS'.thisRepN'
p2976
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2977
I2
sS'.thisN'
p2978
I387
sS'.thisIndex'
p2979
I0
sg15
(lp2980
S'd'
asg30
Vf
sg16
S'N'
sg14
I8
sg19
Nsg94
I0
sa(dp2981
g17
(lp2982
S'd'
asg18
S'N'
sS'.thisRepN'
p2983
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2984
I3
sS'.thisN'
p2985
I388
sS'.thisIndex'
p2986
I8
sg15
(lp2987
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I8
sa(dp2988
g17
(lp2989
S'd'
asg18
S'N'
sS'.thisRepN'
p2990
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2991
I4
sS'.thisN'
p2992
I389
sS'.thisIndex'
p2993
I3
sg15
(lp2994
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I3
sa(dp2995
g17
(lp2996
S'k'
asg18
S'Y'
sS'.thisRepN'
p2997
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2998
I5
sS'.thisN'
p2999
I390
sS'.thisIndex'
p3000
I2
sg15
(lp3001
S'd'
asg30
Vf
sg16
S'N'
sg14
I8
sg19
Nsg94
I2
sa(dp3002
g17
(lp3003
S'd'
asg18
S'N'
sS'.thisRepN'
p3004
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3005
I6
sS'.thisN'
p3006
I391
sS'.thisIndex'
p3007
I4
sg15
(lp3008
S'k'
asg30
Vf
sg16
S'N'
sg14
I8
sg19
Nsg94
I4
sa(dp3009
g17
(lp3010
S'd'
asg18
S'Y'
sS'.thisRepN'
p3011
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3012
I7
sS'.thisN'
p3013
I392
sS'.thisIndex'
p3014
I2
sg15
(lp3015
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I2
sa(dp3016
g17
(lp3017
S'k'
asg18
S'Y'
sS'.thisRepN'
p3018
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3019
I8
sS'.thisN'
p3020
I393
sS'.thisIndex'
p3021
I5
sg15
(lp3022
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp3023
g17
(lp3024
S'd'
asg18
S'N'
sS'.thisRepN'
p3025
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3026
I9
sS'.thisN'
p3027
I394
sS'.thisIndex'
p3028
I9
sg15
(lp3029
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I9
sa(dp3030
g17
(lp3031
S'd'
asg18
S'N'
sS'.thisRepN'
p3032
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3033
I10
sS'.thisN'
p3034
I395
sS'.thisIndex'
p3035
I3
sg15
(lp3036
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I3
sa(dp3037
g17
(lp3038
S'k'
asg18
S'N'
sS'.thisRepN'
p3039
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3040
I0
sS'.thisN'
p3041
I396
sS'.thisIndex'
p3042
I3
sg15
(lp3043
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I3
sa(dp3044
g17
(lp3045
S'd'
asg18
S'Y'
sS'.thisRepN'
p3046
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3047
I1
sS'.thisN'
p3048
I397
sS'.thisIndex'
p3049
I6
sg15
(lp3050
S'd'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
Nsg94
I6
sa(dp3051
g17
(lp3052
S'd'
asg18
S'Y'
sS'.thisRepN'
p3053
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3054
I2
sS'.thisN'
p3055
I398
sS'.thisIndex'
p3056
I3
sg15
(lp3057
S'k'
asg30
Vf
sg16
S'N'
sg14
I8
sg19
(lp3058
S'space'
p3059
asg94
I3
sa(dp3060
g17
(lp3061
S'k'
asg18
S'Y'
sg22
I38
sS'.thisN'
p3062
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3063
I3
sS'.thisRepN'
p3064
I36
sg21
I41
sS'.thisIndex'
p3065
I1
sg23
I21
sg15
(lp3066
S'k'
asg30
Vf
sg16
S'Y'
sg14
I8
sg19
(lp3067
S'space'
p3068
asg94
I1
sa(dp3069
g17
(lp3070
S'd'
asg94
I1
sS'.thisRepN'
p3071
I36
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3072
I4
sS'.thisN'
p3073
I400
sS'.thisIndex'
p3074
I1
sg15
(lp3075
S'd'
asg16
S'Y'
sg14
I9
sa(dp3076
g17
(lp3077
S'k'
asg94
I7
sS'.thisRepN'
p3078
I36
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3079
I5
sS'.thisN'
p3080
I401
sS'.thisIndex'
p3081
I7
sg15
(lp3082
S'k'
asg16
S'Y'
sg14
I9
sa(dp3083
g17
(lp3084
S'd'
asg18
S'Y'
sS'.thisRepN'
p3085
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3086
I6
sS'.thisN'
p3087
I402
sS'.thisIndex'
p3088
I0
sg15
(lp3089
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I0
sa(dp3090
g17
(lp3091
S'd'
asg18
S'Y'
sS'.thisRepN'
p3092
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3093
I7
sS'.thisN'
p3094
I403
sS'.thisIndex'
p3095
I4
sg15
(lp3096
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
(lp3097
S'space'
p3098
asg94
I4
sa(dp3099
g17
(lp3100
S'k'
asg18
S'N'
sS'.thisRepN'
p3101
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3102
I8
sS'.thisN'
p3103
I404
sS'.thisIndex'
p3104
I6
sg15
(lp3105
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I6
sa(dp3106
g17
(lp3107
S'd'
asg18
S'Y'
sS'.thisRepN'
p3108
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3109
I9
sS'.thisN'
p3110
I405
sS'.thisIndex'
p3111
I1
sg15
(lp3112
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I1
sa(dp3113
g17
(lp3114
S'd'
asg18
S'Y'
sS'.thisRepN'
p3115
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3116
I10
sS'.thisN'
p3117
I406
sS'.thisIndex'
p3118
I3
sg15
(lp3119
S'k'
asg30
Vf
sg16
S'N'
sg14
I9
sg19
Nsg94
I3
sa(dp3120
g17
(lp3121
S'k'
asg18
S'N'
sS'.thisRepN'
p3122
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3123
I0
sS'.thisN'
p3124
I407
sS'.thisIndex'
p3125
I3
sg15
(lp3126
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I3
sa(dp3127
g17
(lp3128
S'k'
asg18
S'Y'
sS'.thisRepN'
p3129
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3130
I1
sS'.thisN'
p3131
I408
sS'.thisIndex'
p3132
I2
sg15
(lp3133
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I2
sa(dp3134
g17
(lp3135
S'd'
asg18
S'Y'
sS'.thisRepN'
p3136
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3137
I2
sS'.thisN'
p3138
I409
sS'.thisIndex'
p3139
I7
sg15
(lp3140
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
(lp3141
S'space'
p3142
asg94
I7
sa(dp3143
g17
(lp3144
S'd'
asg18
S'N'
sS'.thisRepN'
p3145
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3146
I3
sS'.thisN'
p3147
I410
sS'.thisIndex'
p3148
I10
sg15
(lp3149
S'k'
asg30
Vf
sg16
S'N'
sg14
I9
sg19
Nsg94
I10
sa(dp3150
g17
(lp3151
S'd'
asg18
S'Y'
sS'.thisRepN'
p3152
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3153
I4
sS'.thisN'
p3154
I411
sS'.thisIndex'
p3155
I4
sg15
(lp3156
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I4
sa(dp3157
g17
(lp3158
S'd'
asg18
S'Y'
sS'.thisRepN'
p3159
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3160
I5
sS'.thisN'
p3161
I412
sS'.thisIndex'
p3162
I0
sg15
(lp3163
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I0
sa(dp3164
g17
(lp3165
S'k'
asg18
S'N'
sS'.thisRepN'
p3166
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3167
I6
sS'.thisN'
p3168
I413
sS'.thisIndex'
p3169
I1
sg15
(lp3170
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I1
sa(dp3171
g17
(lp3172
S'd'
asg18
S'Y'
sS'.thisRepN'
p3173
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3174
I7
sS'.thisN'
p3175
I414
sS'.thisIndex'
p3176
I0
sg15
(lp3177
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I0
sa(dp3178
g17
(lp3179
S'd'
asg18
S'N'
sS'.thisRepN'
p3180
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3181
I8
sS'.thisN'
p3182
I415
sS'.thisIndex'
p3183
I9
sg15
(lp3184
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I9
sa(dp3185
g17
(lp3186
S'd'
asg18
S'N'
sS'.thisRepN'
p3187
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3188
I9
sS'.thisN'
p3189
I416
sS'.thisIndex'
p3190
I10
sg15
(lp3191
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I10
sa(dp3192
g17
(lp3193
S'k'
asg18
S'N'
sS'.thisRepN'
p3194
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3195
I10
sS'.thisN'
p3196
I417
sS'.thisIndex'
p3197
I5
sg15
(lp3198
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I5
sa(dp3199
g17
(lp3200
S'k'
asg18
S'N'
sS'.thisRepN'
p3201
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3202
I0
sS'.thisN'
p3203
I418
sS'.thisIndex'
p3204
I9
sg15
(lp3205
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I9
sa(dp3206
g17
(lp3207
S'k'
asg18
S'Y'
sS'.thisRepN'
p3208
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3209
I1
sS'.thisN'
p3210
I419
sS'.thisIndex'
p3211
I6
sg15
(lp3212
S'd'
asg30
Vf
sg16
S'N'
sg14
I9
sg19
(lp3213
S'space'
p3214
asg94
I6
sa(dp3215
g17
(lp3216
S'd'
asg18
S'Y'
sS'.thisRepN'
p3217
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3218
I2
sS'.thisN'
p3219
I420
sS'.thisIndex'
p3220
I0
sg15
(lp3221
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I0
sa(dp3222
g17
(lp3223
S'k'
asg18
S'N'
sS'.thisRepN'
p3224
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3225
I3
sS'.thisN'
p3226
I421
sS'.thisIndex'
p3227
I5
sg15
(lp3228
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I5
sa(dp3229
g17
(lp3230
S'k'
asg18
S'N'
sS'.thisRepN'
p3231
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3232
I4
sS'.thisN'
p3233
I422
sS'.thisIndex'
p3234
I6
sg15
(lp3235
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I6
sa(dp3236
g17
(lp3237
S'd'
asg18
S'N'
sS'.thisRepN'
p3238
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3239
I5
sS'.thisN'
p3240
I423
sS'.thisIndex'
p3241
I9
sg15
(lp3242
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I9
sa(dp3243
g17
(lp3244
S'k'
asg18
S'N'
sS'.thisRepN'
p3245
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3246
I6
sS'.thisN'
p3247
I424
sS'.thisIndex'
p3248
I0
sg15
(lp3249
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I0
sa(dp3250
g17
(lp3251
S'd'
asg18
S'N'
sS'.thisRepN'
p3252
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3253
I7
sS'.thisN'
p3254
I425
sS'.thisIndex'
p3255
I4
sg15
(lp3256
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I4
sa(dp3257
g17
(lp3258
S'd'
asg18
S'N'
sS'.thisRepN'
p3259
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3260
I8
sS'.thisN'
p3261
I426
sS'.thisIndex'
p3262
I5
sg15
(lp3263
S'k'
asg30
Vf
sg16
S'N'
sg14
I9
sg19
Nsg94
I5
sa(dp3264
g17
(lp3265
S'd'
asg18
S'N'
sS'.thisRepN'
p3266
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3267
I9
sS'.thisN'
p3268
I427
sS'.thisIndex'
p3269
I1
sg15
(lp3270
S'k'
asg30
Vf
sg16
S'N'
sg14
I9
sg19
Nsg94
I1
sa(dp3271
g17
(lp3272
S'k'
asg18
S'N'
sS'.thisRepN'
p3273
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3274
I10
sS'.thisN'
p3275
I428
sS'.thisIndex'
p3276
I0
sg15
(lp3277
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I0
sa(dp3278
g17
(lp3279
S'k'
asg18
S'Y'
sS'.thisRepN'
p3280
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3281
I0
sS'.thisN'
p3282
I429
sS'.thisIndex'
p3283
I9
sg15
(lp3284
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I9
sa(dp3285
g17
(lp3286
S'k'
asg18
S'Y'
sS'.thisRepN'
p3287
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3288
I1
sS'.thisN'
p3289
I430
sS'.thisIndex'
p3290
I6
sg15
(lp3291
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
(lp3292
S'space'
p3293
asg94
I6
sa(dp3294
g17
(lp3295
S'k'
asg18
S'Y'
sS'.thisRepN'
p3296
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3297
I2
sS'.thisN'
p3298
I431
sS'.thisIndex'
p3299
I10
sg15
(lp3300
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
(lp3301
S'space'
p3302
asg94
I10
sa(dp3303
g17
(lp3304
S'k'
asg18
S'Y'
sS'.thisRepN'
p3305
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3306
I3
sS'.thisN'
p3307
I432
sS'.thisIndex'
p3308
I2
sg15
(lp3309
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
(lp3310
S'space'
p3311
asg94
I2
sa(dp3312
g17
(lp3313
S'd'
asg18
S'Y'
sS'.thisRepN'
p3314
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3315
I4
sS'.thisN'
p3316
I433
sS'.thisIndex'
p3317
I8
sg15
(lp3318
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
(lp3319
S'space'
p3320
asg94
I8
sa(dp3321
g17
(lp3322
S'd'
asg18
S'Y'
sS'.thisRepN'
p3323
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3324
I5
sS'.thisN'
p3325
I434
sS'.thisIndex'
p3326
I10
sg15
(lp3327
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I10
sa(dp3328
g17
(lp3329
S'd'
asg18
S'Y'
sS'.thisRepN'
p3330
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3331
I6
sS'.thisN'
p3332
I435
sS'.thisIndex'
p3333
I5
sg15
(lp3334
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I5
sa(dp3335
g17
(lp3336
S'k'
asg18
S'Y'
sS'.thisRepN'
p3337
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3338
I7
sS'.thisN'
p3339
I436
sS'.thisIndex'
p3340
I8
sg15
(lp3341
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
(lp3342
S'd'
asg94
I8
sa(dp3343
g17
(lp3344
S'd'
asg18
S'N'
sS'.thisRepN'
p3345
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3346
I8
sS'.thisN'
p3347
I437
sS'.thisIndex'
p3348
I7
sg15
(lp3349
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I7
sa(dp3350
g17
(lp3351
S'd'
asg18
S'Y'
sS'.thisRepN'
p3352
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3353
I9
sS'.thisN'
p3354
I438
sS'.thisIndex'
p3355
I10
sg15
(lp3356
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I10
sa(dp3357
g17
(lp3358
S'k'
asg18
S'Y'
sS'.thisRepN'
p3359
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3360
I10
sS'.thisN'
p3361
I439
sS'.thisIndex'
p3362
I0
sg15
(lp3363
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I0
sa(dp3364
g17
(lp3365
S'd'
asg18
S'N'
sS'.thisRepN'
p3366
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3367
I0
sS'.thisN'
p3368
I440
sS'.thisIndex'
p3369
I1
sg15
(lp3370
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I1
sa(dp3371
g17
(lp3372
S'k'
asg18
S'N'
sS'.thisRepN'
p3373
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3374
I1
sS'.thisN'
p3375
I441
sS'.thisIndex'
p3376
I3
sg15
(lp3377
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I3
sa(dp3378
g17
(lp3379
S'k'
asg18
S'Y'
sS'.thisRepN'
p3380
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3381
I2
sS'.thisN'
p3382
I442
sS'.thisIndex'
p3383
I1
sg15
(lp3384
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I1
sa(dp3385
g17
(lp3386
S'd'
asg18
S'N'
sS'.thisRepN'
p3387
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3388
I3
sS'.thisN'
p3389
I443
sS'.thisIndex'
p3390
I8
sg15
(lp3391
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I8
sa(dp3392
g17
(lp3393
S'k'
asg18
S'Y'
sS'.thisRepN'
p3394
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3395
I4
sS'.thisN'
p3396
I444
sS'.thisIndex'
p3397
I2
sg15
(lp3398
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
(lp3399
S'space'
p3400
asg94
I2
sa(dp3401
g17
(lp3402
S'd'
asg18
S'Y'
sS'.thisRepN'
p3403
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3404
I5
sS'.thisN'
p3405
I445
sS'.thisIndex'
p3406
I0
sg15
(lp3407
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I0
sa(dp3408
g17
(lp3409
S'd'
asg18
S'N'
sS'.thisRepN'
p3410
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3411
I6
sS'.thisN'
p3412
I446
sS'.thisIndex'
p3413
I1
sg15
(lp3414
S'k'
asg30
Vf
sg16
S'N'
sg14
I9
sg19
Nsg94
I1
sa(dp3415
g17
(lp3416
S'd'
asg18
S'Y'
sS'.thisRepN'
p3417
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3418
I7
sS'.thisN'
p3419
I447
sS'.thisIndex'
p3420
I4
sg15
(lp3421
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I4
sa(dp3422
g17
(lp3423
S'k'
asg18
S'N'
sS'.thisRepN'
p3424
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3425
I8
sS'.thisN'
p3426
I448
sS'.thisIndex'
p3427
I5
sg15
(lp3428
S'k'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I5
sa(dp3429
g17
(lp3430
S'd'
asg18
S'N'
sg22
I31
sS'.thisN'
p3431
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3432
I9
sS'.thisRepN'
p3433
I40
sg21
I44
sS'.thisIndex'
p3434
I2
sg23
I25
sg15
(lp3435
S'd'
asg30
Vf
sg16
S'Y'
sg14
I9
sg19
Nsg94
I2
sa(dp3436
g17
(lp3437
S'k'
asg94
I7
sS'.thisRepN'
p3438
I40
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3439
I10
sS'.thisN'
p3440
I450
sS'.thisIndex'
p3441
I7
sg15
(lp3442
S'k'
asg16
S'Y'
sg14
I10
sa(dp3443
g17
(lp3444
S'k'
asg94
I2
sS'.thisRepN'
p3445
I41
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3446
I0
sS'.thisN'
p3447
I451
sS'.thisIndex'
p3448
I2
sg15
(lp3449
S'k'
asg16
S'Y'
sg14
I10
sa(dp3450
g17
(lp3451
S'd'
asg18
S'Y'
sS'.thisRepN'
p3452
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3453
I1
sS'.thisN'
p3454
I452
sS'.thisIndex'
p3455
I0
sg15
(lp3456
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I0
sa(dp3457
g17
(lp3458
S'd'
asg18
S'N'
sS'.thisRepN'
p3459
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3460
I2
sS'.thisN'
p3461
I453
sS'.thisIndex'
p3462
I0
sg15
(lp3463
S'k'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I0
sa(dp3464
g17
(lp3465
S'k'
asg18
S'N'
sS'.thisRepN'
p3466
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3467
I3
sS'.thisN'
p3468
I454
sS'.thisIndex'
p3469
I9
sg15
(lp3470
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I9
sa(dp3471
g17
(lp3472
S'k'
asg18
S'Y'
sS'.thisRepN'
p3473
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3474
I4
sS'.thisN'
p3475
I455
sS'.thisIndex'
p3476
I1
sg15
(lp3477
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I1
sa(dp3478
g17
(lp3479
S'd'
asg18
S'Y'
sS'.thisRepN'
p3480
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3481
I5
sS'.thisN'
p3482
I456
sS'.thisIndex'
p3483
I2
sg15
(lp3484
S'k'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I2
sa(dp3485
g17
(lp3486
S'd'
asg18
S'Y'
sS'.thisRepN'
p3487
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3488
I6
sS'.thisN'
p3489
I457
sS'.thisIndex'
p3490
I0
sg15
(lp3491
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I0
sa(dp3492
g17
(lp3493
S'k'
asg18
S'N'
sS'.thisRepN'
p3494
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3495
I7
sS'.thisN'
p3496
I458
sS'.thisIndex'
p3497
I8
sg15
(lp3498
S'd'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I8
sa(dp3499
g17
(lp3500
S'd'
asg18
S'Y'
sS'.thisRepN'
p3501
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3502
I8
sS'.thisN'
p3503
I459
sS'.thisIndex'
p3504
I3
sg15
(lp3505
S'k'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
(lp3506
S'space'
p3507
asg94
I3
sa(dp3508
g17
(lp3509
S'k'
asg18
S'Y'
sS'.thisRepN'
p3510
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3511
I9
sS'.thisN'
p3512
I460
sS'.thisIndex'
p3513
I2
sg15
(lp3514
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I2
sa(dp3515
g17
(lp3516
S'k'
asg18
S'Y'
sS'.thisRepN'
p3517
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3518
I10
sS'.thisN'
p3519
I461
sS'.thisIndex'
p3520
I2
sg15
(lp3521
S'd'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I2
sa(dp3522
g17
(lp3523
S'd'
asg18
S'Y'
sS'.thisRepN'
p3524
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3525
I0
sS'.thisN'
p3526
I462
sS'.thisIndex'
p3527
I2
sg15
(lp3528
S'k'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I2
sa(dp3529
g17
(lp3530
S'k'
asg18
S'N'
sS'.thisRepN'
p3531
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3532
I1
sS'.thisN'
p3533
I463
sS'.thisIndex'
p3534
I8
sg15
(lp3535
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I8
sa(dp3536
g17
(lp3537
S'k'
asg18
S'N'
sS'.thisRepN'
p3538
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3539
I2
sS'.thisN'
p3540
I464
sS'.thisIndex'
p3541
I4
sg15
(lp3542
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I4
sa(dp3543
g17
(lp3544
S'd'
asg18
S'N'
sS'.thisRepN'
p3545
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3546
I3
sS'.thisN'
p3547
I465
sS'.thisIndex'
p3548
I8
sg15
(lp3549
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I8
sa(dp3550
g17
(lp3551
S'k'
asg18
S'Y'
sS'.thisRepN'
p3552
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3553
I4
sS'.thisN'
p3554
I466
sS'.thisIndex'
p3555
I0
sg15
(lp3556
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I0
sa(dp3557
g17
(lp3558
S'k'
asg18
S'Y'
sS'.thisRepN'
p3559
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3560
I5
sS'.thisN'
p3561
I467
sS'.thisIndex'
p3562
I8
sg15
(lp3563
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
(lp3564
S'space'
p3565
asg94
I8
sa(dp3566
g17
(lp3567
S'k'
asg18
S'Y'
sS'.thisRepN'
p3568
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3569
I6
sS'.thisN'
p3570
I468
sS'.thisIndex'
p3571
I2
sg15
(lp3572
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
(lp3573
S'space'
p3574
asg94
I2
sa(dp3575
g17
(lp3576
S'k'
asg18
S'Y'
sS'.thisRepN'
p3577
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3578
I7
sS'.thisN'
p3579
I469
sS'.thisIndex'
p3580
I6
sg15
(lp3581
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
(lp3582
S'space'
p3583
asg94
I6
sa(dp3584
g17
(lp3585
S'd'
asg18
S'Y'
sS'.thisRepN'
p3586
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3587
I8
sS'.thisN'
p3588
I470
sS'.thisIndex'
p3589
I10
sg15
(lp3590
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
(lp3591
S'space'
p3592
asg94
I10
sa(dp3593
g17
(lp3594
S'd'
asg18
S'N'
sS'.thisRepN'
p3595
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3596
I9
sS'.thisN'
p3597
I471
sS'.thisIndex'
p3598
I10
sg15
(lp3599
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I10
sa(dp3600
g17
(lp3601
S'k'
asg18
S'Y'
sS'.thisRepN'
p3602
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3603
I10
sS'.thisN'
p3604
I472
sS'.thisIndex'
p3605
I1
sg15
(lp3606
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I1
sa(dp3607
g17
(lp3608
S'k'
asg18
S'N'
sS'.thisRepN'
p3609
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3610
I0
sS'.thisN'
p3611
I473
sS'.thisIndex'
p3612
I1
sg15
(lp3613
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I1
sa(dp3614
g17
(lp3615
S'd'
asg18
S'Y'
sS'.thisRepN'
p3616
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3617
I1
sS'.thisN'
p3618
I474
sS'.thisIndex'
p3619
I7
sg15
(lp3620
S'k'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I7
sa(dp3621
g17
(lp3622
S'k'
asg18
S'N'
sS'.thisRepN'
p3623
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3624
I2
sS'.thisN'
p3625
I475
sS'.thisIndex'
p3626
I4
sg15
(lp3627
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I4
sa(dp3628
g17
(lp3629
S'k'
asg18
S'Y'
sS'.thisRepN'
p3630
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3631
I3
sS'.thisN'
p3632
I476
sS'.thisIndex'
p3633
I3
sg15
(lp3634
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
(lp3635
S'k'
asg94
I3
sa(dp3636
g17
(lp3637
S'd'
asg18
S'Y'
sS'.thisRepN'
p3638
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3639
I4
sS'.thisN'
p3640
I477
sS'.thisIndex'
p3641
I5
sg15
(lp3642
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I5
sa(dp3643
g17
(lp3644
S'd'
asg18
S'Y'
sS'.thisRepN'
p3645
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3646
I5
sS'.thisN'
p3647
I478
sS'.thisIndex'
p3648
I0
sg15
(lp3649
S'k'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
(lp3650
S'space'
p3651
asg94
I0
sa(dp3652
g17
(lp3653
S'k'
asg18
S'Y'
sS'.thisRepN'
p3654
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3655
I6
sS'.thisN'
p3656
I479
sS'.thisIndex'
p3657
I5
sg15
(lp3658
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
(lp3659
S'space'
p3660
asg94
I5
sa(dp3661
g17
(lp3662
S'd'
asg18
S'N'
sS'.thisRepN'
p3663
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3664
I7
sS'.thisN'
p3665
I480
sS'.thisIndex'
p3666
I9
sg15
(lp3667
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I9
sa(dp3668
g17
(lp3669
S'd'
asg18
S'Y'
sS'.thisRepN'
p3670
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3671
I8
sS'.thisN'
p3672
I481
sS'.thisIndex'
p3673
I5
sg15
(lp3674
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
(lp3675
S'space'
p3676
asg94
I5
sa(dp3677
g17
(lp3678
S'd'
asg18
S'N'
sS'.thisRepN'
p3679
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3680
I9
sS'.thisN'
p3681
I482
sS'.thisIndex'
p3682
I10
sg15
(lp3683
S'k'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I10
sa(dp3684
g17
(lp3685
S'd'
asg18
S'N'
sS'.thisRepN'
p3686
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3687
I10
sS'.thisN'
p3688
I483
sS'.thisIndex'
p3689
I6
sg15
(lp3690
S'k'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I6
sa(dp3691
g17
(lp3692
S'k'
asg18
S'Y'
sS'.thisRepN'
p3693
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3694
I0
sS'.thisN'
p3695
I484
sS'.thisIndex'
p3696
I4
sg15
(lp3697
S'd'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
(lp3698
S'space'
p3699
asg94
I4
sa(dp3700
g17
(lp3701
S'k'
asg18
S'N'
sS'.thisRepN'
p3702
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3703
I1
sS'.thisN'
p3704
I485
sS'.thisIndex'
p3705
I1
sg15
(lp3706
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I1
sa(dp3707
g17
(lp3708
S'd'
asg18
S'N'
sS'.thisRepN'
p3709
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3710
I2
sS'.thisN'
p3711
I486
sS'.thisIndex'
p3712
I7
sg15
(lp3713
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I7
sa(dp3714
g17
(lp3715
S'k'
asg18
S'N'
sS'.thisRepN'
p3716
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3717
I3
sS'.thisN'
p3718
I487
sS'.thisIndex'
p3719
I7
sg15
(lp3720
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
(lp3721
S'space'
p3722
asg94
I7
sa(dp3723
g17
(lp3724
S'k'
asg18
S'Y'
sS'.thisRepN'
p3725
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3726
I4
sS'.thisN'
p3727
I488
sS'.thisIndex'
p3728
I9
sg15
(lp3729
S'd'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
(lp3730
S'space'
p3731
asg94
I9
sa(dp3732
g17
(lp3733
S'd'
asg18
S'Y'
sS'.thisRepN'
p3734
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3735
I5
sS'.thisN'
p3736
I489
sS'.thisIndex'
p3737
I3
sg15
(lp3738
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
(lp3739
S'space'
p3740
asg94
I3
sa(dp3741
g17
(lp3742
S'k'
asg18
S'N'
sS'.thisRepN'
p3743
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3744
I6
sS'.thisN'
p3745
I490
sS'.thisIndex'
p3746
I5
sg15
(lp3747
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I5
sa(dp3748
g17
(lp3749
S'd'
asg18
S'Y'
sS'.thisRepN'
p3750
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3751
I7
sS'.thisN'
p3752
I491
sS'.thisIndex'
p3753
I8
sg15
(lp3754
S'k'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I8
sa(dp3755
g17
(lp3756
S'k'
asg18
S'N'
sS'.thisRepN'
p3757
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3758
I8
sS'.thisN'
p3759
I492
sS'.thisIndex'
p3760
I6
sg15
(lp3761
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I6
sa(dp3762
g17
(lp3763
S'd'
asg18
S'N'
sS'.thisRepN'
p3764
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3765
I9
sS'.thisN'
p3766
I493
sS'.thisIndex'
p3767
I5
sg15
(lp3768
S'k'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I5
sa(dp3769
g17
(lp3770
S'd'
asg18
S'Y'
sS'.thisRepN'
p3771
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3772
I10
sS'.thisN'
p3773
I494
sS'.thisIndex'
p3774
I3
sg15
(lp3775
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I3
sa(dp3776
g17
(lp3777
S'k'
asg18
S'N'
sS'.thisRepN'
p3778
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3779
I0
sS'.thisN'
p3780
I495
sS'.thisIndex'
p3781
I10
sg15
(lp3782
S'd'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I10
sa(dp3783
g17
(lp3784
S'd'
asg18
S'N'
sS'.thisRepN'
p3785
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3786
I1
sS'.thisN'
p3787
I496
sS'.thisIndex'
p3788
I1
sg15
(lp3789
S'k'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I1
sa(dp3790
g17
(lp3791
S'd'
asg18
S'N'
sS'.thisRepN'
p3792
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3793
I2
sS'.thisN'
p3794
I497
sS'.thisIndex'
p3795
I10
sg15
(lp3796
S'd'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I10
sa(dp3797
g17
(lp3798
S'k'
asg18
S'N'
sS'.thisRepN'
p3799
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3800
I3
sS'.thisN'
p3801
I498
sS'.thisIndex'
p3802
I7
sg15
(lp3803
S'k'
asg30
Vf
sg16
S'Y'
sg14
I10
sg19
Nsg94
I7
sa(dp3804
g17
(lp3805
S'k'
asg18
S'N'
sg22
I33
sS'.thisN'
p3806
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3807
I4
sS'.thisRepN'
p3808
I45
sg21
I33
sS'.thisIndex'
p3809
I4
sg23
I25
sg15
(lp3810
S'd'
asg30
Vf
sg16
S'N'
sg14
I10
sg19
Nsg94
I4
sa(dp3811
g17
(lp3812
S'd'
asS'.thisIndex'
p3813
I1
sS'.thisRepN'
p3814
I45
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3815
I5
sS'.thisN'
p3816
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp3817
S'd'
asg16
S'N'
sg14
I11
sg94
I1
sa(dp3818
g17
(lp3819
S'k'
asS'.thisIndex'
p3820
I8
sS'.thisRepN'
p3821
I45
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3822
I6
sS'.thisN'
p3823
I501
sg25
S'Y'
sg15
(lp3824
S'd'
asg16
S'Y'
sg14
I11
sg94
I8
sa(dp3825
g17
(lp3826
S'k'
asg18
S'N'
sS'.thisRepN'
p3827
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3828
I7
sS'.thisN'
p3829
I502
sg25
S'Y'
sg15
(lp3830
S'k'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
Nsg94
I4
sS'.thisIndex'
p3831
I4
sa(dp3832
g17
(lp3833
S'd'
asg18
S'Y'
sS'.thisRepN'
p3834
I45
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3835
I8
sS'.thisN'
p3836
I503
sg25
S'Y'
sg15
(lp3837
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p3838
I1
sa(dp3839
g17
(lp3840
S'k'
asg18
S'Y'
sS'.thisRepN'
p3841
I45
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3842
I9
sS'.thisN'
p3843
I504
sg25
S'Y'
sg15
(lp3844
S'k'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
Nsg94
I9
sS'.thisIndex'
p3845
I9
sa(dp3846
g17
(lp3847
S'd'
asg18
S'N'
sS'.thisRepN'
p3848
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3849
I10
sS'.thisN'
p3850
I505
sg25
S'Y'
sg15
(lp3851
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p3852
I1
sa(dp3853
g17
(lp3854
S'd'
asg18
S'Y'
sS'.thisRepN'
p3855
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3856
I0
sS'.thisN'
p3857
I506
sg25
S'Y'
sg15
(lp3858
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
(lp3859
S'space'
p3860
asg94
I10
sS'.thisIndex'
p3861
I10
sa(dp3862
g17
(lp3863
S'k'
asg18
S'Y'
sS'.thisRepN'
p3864
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3865
I1
sS'.thisN'
p3866
I507
sg25
S'Y'
sg15
(lp3867
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
(lp3868
S'space'
p3869
asg94
I8
sS'.thisIndex'
p3870
I8
sa(dp3871
g17
(lp3872
S'd'
asg18
S'N'
sS'.thisRepN'
p3873
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3874
I2
sS'.thisN'
p3875
I508
sg25
S'Y'
sg15
(lp3876
S'd'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
Nsg94
I6
sS'.thisIndex'
p3877
I6
sa(dp3878
g17
(lp3879
S'k'
asg18
S'N'
sS'.thisRepN'
p3880
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3881
I3
sS'.thisN'
p3882
I509
sg25
S'Y'
sg15
(lp3883
S'k'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
(lp3884
S'space'
p3885
asg94
I4
sS'.thisIndex'
p3886
I4
sa(dp3887
g17
(lp3888
S'd'
asg18
S'N'
sS'.thisRepN'
p3889
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3890
I4
sS'.thisN'
p3891
I510
sg25
S'Y'
sg15
(lp3892
S'd'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
Nsg94
I7
sS'.thisIndex'
p3893
I7
sa(dp3894
g17
(lp3895
S'd'
asg18
S'Y'
sS'.thisRepN'
p3896
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3897
I5
sS'.thisN'
p3898
I511
sg25
S'Y'
sg15
(lp3899
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I3
sS'.thisIndex'
p3900
I3
sa(dp3901
g17
(lp3902
S'k'
asg18
S'Y'
sS'.thisRepN'
p3903
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3904
I6
sS'.thisN'
p3905
I512
sg25
S'Y'
sg15
(lp3906
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I10
sS'.thisIndex'
p3907
I10
sa(dp3908
g17
(lp3909
S'd'
asg18
S'N'
sS'.thisRepN'
p3910
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3911
I7
sS'.thisN'
p3912
I513
sg25
S'Y'
sg15
(lp3913
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I0
sS'.thisIndex'
p3914
I0
sa(dp3915
g17
(lp3916
S'k'
asg18
S'N'
sS'.thisRepN'
p3917
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3918
I8
sS'.thisN'
p3919
I514
sg25
S'Y'
sg15
(lp3920
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p3921
I1
sa(dp3922
g17
(lp3923
S'd'
asg18
S'N'
sS'.thisRepN'
p3924
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3925
I9
sS'.thisN'
p3926
I515
sg25
S'Y'
sg15
(lp3927
S'd'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
Nsg94
I10
sS'.thisIndex'
p3928
I10
sa(dp3929
g17
(lp3930
S'k'
asg18
S'N'
sS'.thisRepN'
p3931
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3932
I10
sS'.thisN'
p3933
I516
sg25
S'Y'
sg15
(lp3934
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I6
sS'.thisIndex'
p3935
I6
sa(dp3936
g17
(lp3937
S'k'
asg18
S'N'
sS'.thisRepN'
p3938
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3939
I0
sS'.thisN'
p3940
I517
sg25
S'Y'
sg15
(lp3941
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I10
sS'.thisIndex'
p3942
I10
sa(dp3943
g17
(lp3944
S'k'
asg18
S'Y'
sS'.thisRepN'
p3945
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3946
I1
sS'.thisN'
p3947
I518
sg25
S'Y'
sg15
(lp3948
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
(lp3949
S'space'
p3950
asg94
I2
sS'.thisIndex'
p3951
I2
sa(dp3952
g17
(lp3953
S'd'
asg18
S'N'
sS'.thisRepN'
p3954
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3955
I2
sS'.thisN'
p3956
I519
sg25
S'Y'
sg15
(lp3957
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I0
sS'.thisIndex'
p3958
I0
sa(dp3959
g17
(lp3960
S'd'
asg18
S'N'
sS'.thisRepN'
p3961
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3962
I3
sS'.thisN'
p3963
I520
sg25
S'Y'
sg15
(lp3964
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I6
sS'.thisIndex'
p3965
I6
sa(dp3966
g17
(lp3967
S'k'
asg18
S'Y'
sS'.thisRepN'
p3968
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3969
I4
sS'.thisN'
p3970
I521
sg25
S'Y'
sg15
(lp3971
S'k'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
(lp3972
S'space'
p3973
asg94
I6
sS'.thisIndex'
p3974
I6
sa(dp3975
g17
(lp3976
S'd'
asg18
S'Y'
sS'.thisRepN'
p3977
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3978
I5
sS'.thisN'
p3979
I522
sg25
S'Y'
sg15
(lp3980
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I10
sS'.thisIndex'
p3981
I10
sa(dp3982
g18
S'Y'
sS'.thisRepN'
p3983
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3984
I6
sS'.thisN'
p3985
I523
sg25
S'Y'
sg15
Nsg30
Vf
sg16
g99
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p3986
I1
sa(dp3987
g17
(lp3988
S'd'
asg18
S'N'
sS'.thisRepN'
p3989
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3990
I7
sS'.thisN'
p3991
I524
sg25
S'Y'
sg15
(lp3992
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I8
sS'.thisIndex'
p3993
I8
sa(dp3994
g17
(lp3995
S'd'
asg18
S'Y'
sS'.thisRepN'
p3996
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3997
I8
sS'.thisN'
p3998
I525
sg25
S'Y'
sg15
(lp3999
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I3
sS'.thisIndex'
p4000
I3
sa(dp4001
g17
(lp4002
S'd'
asg18
S'N'
sS'.thisRepN'
p4003
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4004
I9
sS'.thisN'
p4005
I526
sg25
S'Y'
sg15
(lp4006
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I4
sS'.thisIndex'
p4007
I4
sa(dp4008
g17
(lp4009
S'd'
asg18
S'N'
sS'.thisRepN'
p4010
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4011
I10
sS'.thisN'
p4012
I527
sg25
S'Y'
sg15
(lp4013
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I6
sS'.thisIndex'
p4014
I6
sa(dp4015
g17
(lp4016
S'd'
asg18
S'Y'
sS'.thisRepN'
p4017
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4018
I0
sS'.thisN'
p4019
I528
sg25
S'Y'
sg15
(lp4020
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I8
sS'.thisIndex'
p4021
I8
sa(dp4022
g17
(lp4023
S'k'
asg18
S'N'
sS'.thisRepN'
p4024
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4025
I1
sS'.thisN'
p4026
I529
sg25
S'Y'
sg15
(lp4027
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I0
sS'.thisIndex'
p4028
I0
sa(dp4029
g17
(lp4030
S'k'
asg18
S'Y'
sS'.thisRepN'
p4031
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4032
I2
sS'.thisN'
p4033
I530
sg25
S'Y'
sg15
(lp4034
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I2
sS'.thisIndex'
p4035
I2
sa(dp4036
g17
(lp4037
S'd'
asg18
S'Y'
sS'.thisRepN'
p4038
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4039
I3
sS'.thisN'
p4040
I531
sg25
S'Y'
sg15
(lp4041
S'd'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
Nsg94
I5
sS'.thisIndex'
p4042
I5
sa(dp4043
g17
(lp4044
S'k'
asg18
S'N'
sS'.thisRepN'
p4045
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4046
I4
sS'.thisN'
p4047
I532
sg25
S'Y'
sg15
(lp4048
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I9
sS'.thisIndex'
p4049
I9
sa(dp4050
g17
(lp4051
S'd'
asg18
S'Y'
sS'.thisRepN'
p4052
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4053
I5
sS'.thisN'
p4054
I533
sg25
S'Y'
sg15
(lp4055
S'd'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
(lp4056
S'space'
p4057
asg94
I3
sS'.thisIndex'
p4058
I3
sa(dp4059
g17
(lp4060
S'd'
asg18
S'N'
sS'.thisRepN'
p4061
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4062
I6
sS'.thisN'
p4063
I534
sg25
S'Y'
sg15
(lp4064
S'd'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p4065
I1
sa(dp4066
g17
(lp4067
S'd'
asg18
S'Y'
sS'.thisRepN'
p4068
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4069
I7
sS'.thisN'
p4070
I535
sg25
S'Y'
sg15
(lp4071
S'd'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
(lp4072
S'space'
p4073
asg94
I1
sS'.thisIndex'
p4074
I1
sa(dp4075
g17
(lp4076
S'd'
asg18
S'Y'
sS'.thisRepN'
p4077
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4078
I8
sS'.thisN'
p4079
I536
sg25
S'Y'
sg15
(lp4080
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I6
sS'.thisIndex'
p4081
I6
sa(dp4082
g17
(lp4083
S'k'
asg18
S'Y'
sS'.thisRepN'
p4084
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4085
I9
sS'.thisN'
p4086
I537
sg25
S'Y'
sg15
(lp4087
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I6
sS'.thisIndex'
p4088
I6
sa(dp4089
g17
(lp4090
S'k'
asg18
S'Y'
sS'.thisRepN'
p4091
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4092
I10
sS'.thisN'
p4093
I538
sg25
S'Y'
sg15
(lp4094
S'k'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
Nsg94
I5
sS'.thisIndex'
p4095
I5
sa(dp4096
g17
(lp4097
S'k'
asg18
S'N'
sS'.thisRepN'
p4098
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4099
I0
sS'.thisN'
p4100
I539
sg25
S'Y'
sg15
(lp4101
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I8
sS'.thisIndex'
p4102
I8
sa(dp4103
g17
(lp4104
S'k'
asg18
S'Y'
sS'.thisRepN'
p4105
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4106
I1
sS'.thisN'
p4107
I540
sg25
S'Y'
sg15
(lp4108
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I4
sS'.thisIndex'
p4109
I4
sa(dp4110
g17
(lp4111
S'k'
asg18
S'Y'
sS'.thisRepN'
p4112
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4113
I2
sS'.thisN'
p4114
I541
sg25
S'Y'
sg15
(lp4115
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I0
sS'.thisIndex'
p4116
I0
sa(dp4117
g17
(lp4118
S'd'
asg18
S'N'
sS'.thisRepN'
p4119
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4120
I3
sS'.thisN'
p4121
I542
sg25
S'Y'
sg15
(lp4122
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I9
sS'.thisIndex'
p4123
I9
sa(dp4124
g17
(lp4125
S'd'
asg18
S'N'
sS'.thisRepN'
p4126
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4127
I4
sS'.thisN'
p4128
I543
sg25
S'Y'
sg15
(lp4129
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p4130
I1
sa(dp4131
g17
(lp4132
S'd'
asg18
S'N'
sS'.thisRepN'
p4133
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4134
I5
sS'.thisN'
p4135
I544
sg25
S'Y'
sg15
(lp4136
S'd'
asg30
Vf
sg16
S'N'
sg14
I11
sg19
Nsg94
I10
sS'.thisIndex'
p4137
I10
sa(dp4138
g17
(lp4139
S'd'
asg18
S'Y'
sS'.thisRepN'
p4140
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4141
I6
sS'.thisN'
p4142
I545
sg25
S'Y'
sg15
(lp4143
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I7
sS'.thisIndex'
p4144
I7
sa(dp4145
g17
(lp4146
S'k'
asg18
S'Y'
sS'.thisRepN'
p4147
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4148
I7
sS'.thisN'
p4149
I546
sg25
S'Y'
sg15
(lp4150
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I0
sS'.thisIndex'
p4151
I0
sa(dp4152
g17
(lp4153
S'd'
asg18
S'N'
sS'.thisRepN'
p4154
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4155
I8
sS'.thisN'
p4156
I547
sg25
S'Y'
sg15
(lp4157
S'k'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I7
sS'.thisIndex'
p4158
I7
sa(dp4159
g17
(lp4160
S'k'
asg18
S'Y'
sS'.thisRepN'
p4161
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4162
I9
sS'.thisN'
p4163
I548
sg25
S'Y'
sg15
(lp4164
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
(lp4165
S'space'
p4166
asg94
I2
sS'.thisIndex'
p4167
I2
sa(dp4168
g17
(lp4169
S'k'
asg18
S'N'
sg22
I30
sg26
S'Y'
sS'.thisN'
p4170
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4171
I10
sS'.thisRepN'
p4172
I49
sg21
I35
sg25
S'Y'
sg23
I24
sg15
(lp4173
S'd'
asg30
Vf
sg16
S'Y'
sg14
I11
sg19
Nsg94
I5
sS'.thisIndex'
p4174
I5
sa(dp4175
g17
(lp4176
S'k'
asS'.thisIndex'
p4177
I9
sS'.thisRepN'
p4178
I50
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4179
I0
sS'.thisN'
p4180
I550
sg25
S'Y'
sg15
(lp4181
S'd'
asg16
S'Y'
sg14
I12
sg94
I9
sa(dp4182
g17
(lp4183
S'd'
asS'.thisIndex'
p4184
I1
sS'.thisRepN'
p4185
I50
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4186
I1
sS'.thisN'
p4187
I551
sg25
S'Y'
sg15
(lp4188
S'd'
asg16
S'N'
sg14
I12
sg94
I1
sa(dp4189
g18
S'Y'
sS'.thisRepN'
p4190
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4191
I2
sS'.thisN'
p4192
I552
sg25
S'Y'
sg15
Nsg30
Vf
sg16
g99
sg14
I12
sg19
(lp4193
S'space'
p4194
asg94
I10
sS'.thisIndex'
p4195
I10
sa(dp4196
g17
(lp4197
S'k'
asg18
S'N'
sS'.thisRepN'
p4198
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4199
I3
sS'.thisN'
p4200
I553
sg25
S'Y'
sg15
(lp4201
S'k'
asg30
Vf
sg16
S'N'
sg14
I12
sg19
Nsg94
I0
sS'.thisIndex'
p4202
I0
sa(dp4203
g17
(lp4204
S'k'
asg18
S'Y'
sS'.thisRepN'
p4205
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4206
I4
sS'.thisN'
p4207
I554
sg25
S'Y'
sg15
(lp4208
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I0
sS'.thisIndex'
p4209
I0
sa(dp4210
g17
(lp4211
S'k'
asg18
S'N'
sS'.thisRepN'
p4212
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4213
I5
sS'.thisN'
p4214
I555
sg25
S'Y'
sg15
(lp4215
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I0
sS'.thisIndex'
p4216
I0
sa(dp4217
g17
(lp4218
S'd'
asg18
S'N'
sS'.thisRepN'
p4219
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4220
I6
sS'.thisN'
p4221
I556
sg25
S'Y'
sg15
(lp4222
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I4
sS'.thisIndex'
p4223
I4
sa(dp4224
g17
(lp4225
S'k'
asg18
S'Y'
sS'.thisRepN'
p4226
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4227
I7
sS'.thisN'
p4228
I557
sg25
S'Y'
sg15
(lp4229
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
(lp4230
S'space'
p4231
asg94
I3
sS'.thisIndex'
p4232
I3
sa(dp4233
g17
(lp4234
S'k'
asg18
S'N'
sS'.thisRepN'
p4235
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4236
I8
sS'.thisN'
p4237
I558
sg25
S'Y'
sg15
(lp4238
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I1
sS'.thisIndex'
p4239
I1
sa(dp4240
g17
(lp4241
S'd'
asg18
S'Y'
sS'.thisRepN'
p4242
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4243
I9
sS'.thisN'
p4244
I559
sg25
S'Y'
sg15
(lp4245
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I4
sS'.thisIndex'
p4246
I4
sa(dp4247
g17
(lp4248
S'd'
asg18
S'N'
sS'.thisRepN'
p4249
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4250
I10
sS'.thisN'
p4251
I560
sg25
S'Y'
sg15
(lp4252
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
(lp4253
S'space'
p4254
asg94
I7
sS'.thisIndex'
p4255
I7
sa(dp4256
g17
(lp4257
S'k'
asg18
S'N'
sS'.thisRepN'
p4258
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4259
I0
sS'.thisN'
p4260
I561
sg25
S'Y'
sg15
(lp4261
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I6
sS'.thisIndex'
p4262
I6
sa(dp4263
g17
(lp4264
S'k'
asg18
S'N'
sS'.thisRepN'
p4265
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4266
I1
sS'.thisN'
p4267
I562
sg25
S'Y'
sg15
(lp4268
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I5
sS'.thisIndex'
p4269
I5
sa(dp4270
g17
(lp4271
S'd'
asg18
S'N'
sS'.thisRepN'
p4272
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4273
I2
sS'.thisN'
p4274
I563
sg25
S'Y'
sg15
(lp4275
S'd'
asg30
Vf
sg16
S'N'
sg14
I12
sg19
Nsg94
I8
sS'.thisIndex'
p4276
I8
sa(dp4277
g17
(lp4278
S'd'
asg18
S'N'
sS'.thisRepN'
p4279
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4280
I3
sS'.thisN'
p4281
I564
sg25
S'Y'
sg15
(lp4282
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I2
sS'.thisIndex'
p4283
I2
sa(dp4284
g17
(lp4285
S'd'
asg18
S'Y'
sS'.thisRepN'
p4286
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4287
I4
sS'.thisN'
p4288
I565
sg25
S'Y'
sg15
(lp4289
S'd'
asg30
Vf
sg16
S'N'
sg14
I12
sg19
Nsg94
I5
sS'.thisIndex'
p4290
I5
sa(dp4291
g17
(lp4292
S'd'
asg18
S'N'
sS'.thisRepN'
p4293
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4294
I5
sS'.thisN'
p4295
I566
sg25
S'Y'
sg15
(lp4296
S'd'
asg30
Vf
sg16
S'N'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4297
I3
sa(dp4298
g17
(lp4299
S'k'
asg18
S'N'
sS'.thisRepN'
p4300
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4301
I6
sS'.thisN'
p4302
I567
sg25
S'Y'
sg15
(lp4303
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I8
sS'.thisIndex'
p4304
I8
sa(dp4305
g17
(lp4306
S'd'
asg18
S'Y'
sS'.thisRepN'
p4307
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4308
I7
sS'.thisN'
p4309
I568
sg25
S'Y'
sg15
(lp4310
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I7
sS'.thisIndex'
p4311
I7
sa(dp4312
g17
(lp4313
S'd'
asg18
S'Y'
sS'.thisRepN'
p4314
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4315
I8
sS'.thisN'
p4316
I569
sg25
S'Y'
sg15
(lp4317
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
(lp4318
S'space'
p4319
asg94
I4
sS'.thisIndex'
p4320
I4
sa(dp4321
g17
(lp4322
S'k'
asg18
S'Y'
sS'.thisRepN'
p4323
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4324
I9
sS'.thisN'
p4325
I570
sg25
S'Y'
sg15
(lp4326
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
(lp4327
S'space'
p4328
asg94
I7
sS'.thisIndex'
p4329
I7
sa(dp4330
g17
(lp4331
S'd'
asg18
S'Y'
sS'.thisRepN'
p4332
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4333
I10
sS'.thisN'
p4334
I571
sg25
S'Y'
sg15
(lp4335
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
(lp4336
S'space'
p4337
asg94
I3
sS'.thisIndex'
p4338
I3
sa(dp4339
g17
(lp4340
S'd'
asg18
S'N'
sS'.thisRepN'
p4341
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4342
I0
sS'.thisN'
p4343
I572
sg25
S'Y'
sg15
(lp4344
S'd'
asg30
Vf
sg16
S'N'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4345
I3
sa(dp4346
g17
(lp4347
S'd'
asg18
S'Y'
sS'.thisRepN'
p4348
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4349
I1
sS'.thisN'
p4350
I573
sg25
S'Y'
sg15
(lp4351
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
(lp4352
S'space'
p4353
asg94
I7
sS'.thisIndex'
p4354
I7
sa(dp4355
g17
(lp4356
S'd'
asg18
S'N'
sS'.thisRepN'
p4357
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4358
I2
sS'.thisN'
p4359
I574
sg25
S'Y'
sg15
(lp4360
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4361
I3
sa(dp4362
g17
(lp4363
S'k'
asg18
S'Y'
sS'.thisRepN'
p4364
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4365
I3
sS'.thisN'
p4366
I575
sg25
S'Y'
sg15
(lp4367
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
(lp4368
S'space'
p4369
asg94
I10
sS'.thisIndex'
p4370
I10
sa(dp4371
g17
(lp4372
S'k'
asg18
S'N'
sS'.thisRepN'
p4373
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4374
I4
sS'.thisN'
p4375
I576
sg25
S'Y'
sg15
(lp4376
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I7
sS'.thisIndex'
p4377
I7
sa(dp4378
g17
(lp4379
S'k'
asg18
S'N'
sS'.thisRepN'
p4380
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4381
I5
sS'.thisN'
p4382
I577
sg25
S'Y'
sg15
(lp4383
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I7
sS'.thisIndex'
p4384
I7
sa(dp4385
g17
(lp4386
S'd'
asg18
S'N'
sS'.thisRepN'
p4387
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4388
I6
sS'.thisN'
p4389
I578
sg25
S'Y'
sg15
(lp4390
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I6
sS'.thisIndex'
p4391
I6
sa(dp4392
g17
(lp4393
S'k'
asg18
S'Y'
sS'.thisRepN'
p4394
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4395
I7
sS'.thisN'
p4396
I579
sg25
S'Y'
sg15
(lp4397
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
(lp4398
S'space'
p4399
asg94
I10
sS'.thisIndex'
p4400
I10
sa(dp4401
g17
(lp4402
S'k'
asg18
S'Y'
sS'.thisRepN'
p4403
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4404
I8
sS'.thisN'
p4405
I580
sg25
S'Y'
sg15
(lp4406
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
(lp4407
S'space'
p4408
asg94
I2
sS'.thisIndex'
p4409
I2
sa(dp4410
g18
S'Y'
sS'.thisRepN'
p4411
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4412
I9
sS'.thisN'
p4413
I581
sg25
S'Y'
sg15
Nsg30
Vf
sg16
g99
sg14
I12
sg19
(lp4414
S'space'
p4415
asg94
I2
sS'.thisIndex'
p4416
I2
sa(dp4417
g17
(lp4418
S'd'
asg18
S'N'
sS'.thisRepN'
p4419
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4420
I10
sS'.thisN'
p4421
I582
sg25
S'Y'
sg15
(lp4422
S'd'
asg30
Vf
sg16
S'N'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4423
I3
sa(dp4424
g17
(lp4425
S'd'
asg18
S'N'
sS'.thisRepN'
p4426
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4427
I0
sS'.thisN'
p4428
I583
sg25
S'Y'
sg15
(lp4429
S'd'
asg30
Vf
sg16
S'N'
sg14
I12
sg19
Nsg94
I1
sS'.thisIndex'
p4430
I1
sa(dp4431
g17
(lp4432
S'd'
asg18
S'N'
sS'.thisRepN'
p4433
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4434
I1
sS'.thisN'
p4435
I584
sg25
S'Y'
sg15
(lp4436
S'd'
asg30
Vf
sg16
S'N'
sg14
I12
sg19
Nsg94
I4
sS'.thisIndex'
p4437
I4
sa(dp4438
g17
(lp4439
S'd'
asg18
S'Y'
sS'.thisRepN'
p4440
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4441
I2
sS'.thisN'
p4442
I585
sg25
S'Y'
sg15
(lp4443
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I9
sS'.thisIndex'
p4444
I9
sa(dp4445
g17
(lp4446
S'k'
asg18
S'N'
sS'.thisRepN'
p4447
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4448
I3
sS'.thisN'
p4449
I586
sg25
S'Y'
sg15
(lp4450
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4451
I3
sa(dp4452
g17
(lp4453
S'd'
asg18
S'Y'
sS'.thisRepN'
p4454
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4455
I4
sS'.thisN'
p4456
I587
sg25
S'Y'
sg15
(lp4457
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I4
sS'.thisIndex'
p4458
I4
sa(dp4459
g17
(lp4460
S'k'
asg18
S'Y'
sS'.thisRepN'
p4461
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4462
I5
sS'.thisN'
p4463
I588
sg25
S'Y'
sg15
(lp4464
S'k'
asg30
Vf
sg16
S'N'
sg14
I12
sg19
Nsg94
I9
sS'.thisIndex'
p4465
I9
sa(dp4466
g17
(lp4467
S'k'
asg18
S'N'
sS'.thisRepN'
p4468
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4469
I6
sS'.thisN'
p4470
I589
sg25
S'Y'
sg15
(lp4471
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4472
I3
sa(dp4473
g17
(lp4474
S'd'
asg18
S'Y'
sS'.thisRepN'
p4475
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4476
I7
sS'.thisN'
p4477
I590
sg25
S'Y'
sg15
(lp4478
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
(lp4479
S'space'
p4480
asg94
I1
sS'.thisIndex'
p4481
I1
sa(dp4482
g17
(lp4483
S'k'
asg18
S'N'
sS'.thisRepN'
p4484
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4485
I8
sS'.thisN'
p4486
I591
sg25
S'Y'
sg15
(lp4487
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I6
sS'.thisIndex'
p4488
I6
sa(dp4489
g17
(lp4490
S'k'
asg18
S'Y'
sS'.thisRepN'
p4491
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4492
I9
sS'.thisN'
p4493
I592
sg25
S'Y'
sg15
(lp4494
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I6
sS'.thisIndex'
p4495
I6
sa(dp4496
g17
(lp4497
S'k'
asg18
S'N'
sS'.thisRepN'
p4498
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4499
I10
sS'.thisN'
p4500
I593
sg25
S'Y'
sg15
(lp4501
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I10
sS'.thisIndex'
p4502
I10
sa(dp4503
g17
(lp4504
S'k'
asg18
S'Y'
sS'.thisRepN'
p4505
I54
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4506
I0
sS'.thisN'
p4507
I594
sg25
S'Y'
sg15
(lp4508
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I2
sS'.thisIndex'
p4509
I2
sa(dp4510
g17
(lp4511
S'd'
asg18
S'N'
sS'.thisRepN'
p4512
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4513
I1
sS'.thisN'
p4514
I595
sg25
S'Y'
sg15
(lp4515
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I0
sS'.thisIndex'
p4516
I0
sa(dp4517
g17
(lp4518
S'd'
asg18
S'Y'
sS'.thisRepN'
p4519
I54
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4520
I2
sS'.thisN'
p4521
I596
sg25
S'Y'
sg15
(lp4522
S'd'
asg30
Vf
sg16
S'N'
sg14
I12
sg19
Nsg94
I10
sS'.thisIndex'
p4523
I10
sa(dp4524
g17
(lp4525
S'k'
asg18
S'N'
sS'.thisRepN'
p4526
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4527
I3
sS'.thisN'
p4528
I597
sg25
S'Y'
sg15
(lp4529
S'd'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I9
sS'.thisIndex'
p4530
I9
sa(dp4531
g17
(lp4532
S'd'
asg18
S'N'
sS'.thisRepN'
p4533
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4534
I4
sS'.thisN'
p4535
I598
sg25
S'Y'
sg15
(lp4536
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I5
sS'.thisIndex'
p4537
I5
sa(dp4538
g17
(lp4539
S'd'
asg18
S'N'
sg22
I37
sg26
S'Y'
sS'.thisN'
p4540
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4541
I5
sS'.thisRepN'
p4542
I54
sg21
I37
sg25
S'Y'
sg23
I21
sg15
(lp4543
S'k'
asg30
Vf
sg16
S'Y'
sg14
I12
sg19
Nsg94
I2
sS'.thisIndex'
p4544
I2
sasS'loops'
p4545
(lp4546
g1
(g35
g3
NtRp4547
(dp4548
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4549
sg40
(lp4550
sg41
I74365264
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4551
g48
g49
(g50
g51
g52
S'b'
tRp4552
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4553
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80@\x00\x00\x85C\x00\x00\xc4B\x00\x00\xdaB\x00\x00\x9cC\x00\x80\x98C\x00\x00HC\x00\x00\x92C\x00\x00\xdcC\x00\x00\x10A\x00\x00\x05C\x00\x00\x8cC\x00\x00\xb7C\x00\x00\x8aC\x00\x00\x03D\x00\x00\xc8C\x00\x00\xf0C\x00\x00\xa3C\x00\x80\xdaC\x00\x80\xc2C\x00\x00:C\x00\x00\xf3C\x00\x00+C\x00\x80\xf6C\x00\x002C\x00\x00\xc5C\x00\x80\xf5C\x00\x80\xb5C\x00\x00MC\x00\x80\xe0C\x00\x00OC\x00\x00\xa2C\x00\x00\x03C\x00\x00\xe2C\x00\x80\xe2C\x00\x00\x02D\x00\x80\xd3C\x00\x80\xbdC\x00\xc0\x03D\x00\x00\x08D\x00\x80\xc3C\x00\x80\xaaC\x00\x00\x1cB\x00\x80\x05D\x00\x00\xa5C\x00\x00\xa1C\x00\x008B\x00\x00\xe8A\x00\x00,C\x00\x00\x8aB\x00\x00\xaaB\x00\x00\xf8B\x00\x00\xb2B\x00\x80\xe4C\x00\x00\xe2B\x00\x00LC\x00\x00\xdfC\x00\x80\xcfC\x00\x00\xfdC\x00\x00 A\x00\x00\xc9C\x00\x00dC\x00\x00\xb3C\x00\x80\x96C\x00\x00\xcaB\x00\x00\x00@\x00\x00pB\x00\x00gC\x00\x00nC\x00\x80\xccC\x00\x80\xf1C\x00\x00\x8eC\x00\x00\x94B\x00\x80\xfcC\x00\x00|B\x00\x80\xebC\x00\x00\rD\x00\x00-C\x00\xc0\x05D\x00\x00\x90B\x00\x00\x0fD\x00\x00\xedC\x00\x00\xfaC\x00\x00\x19C\x00\x80\xb1C\x00\x80\x11D\x00\x00\xbaB\x00\x00\xb2C\x00\x00\xd0C\x00\x00\xcdC\x00\xc0\x0cD\x00\x80\xddC\x00\x80\xcdC\x00\x00\xa8B\x00\x80\xfbC\x00\x80\xbeC\x00\x00\x0cD\x00@\x08D\x00@\x0eD\x00\x00\xb5C\x00\x00NC\x00\x00;C\x00\x00\x04D\x00\x00\xcfC\x00\x00\xf8C\x00\x80\xc0C\x00@\x03D\x00\x00\xc0C\x00\x00\x1cC\x00\xc0\x0bD\x00\x00\x83C\x00\x80\xb7C\x00\x00\x08C\x00\x00WC\x00@\x00D\x00\x00\xf4B\x00\x80\xa9C\x00\x80\x03D\x00\x00\xceC\x00\x80\xf8C\x00\x80\xd9C\x00\x00\xd2C\x00\x80\x85C\x00\x00lB\x00\x00\x9aC\x00\x00\x13C\x00\x80\xf4C\x00\x00XB\x00\x00\xd0B\x00\x00\xc7C\x00\x00~C\x00\x80\xc5C\x00\x00xB\x00\x00zC\x00\x00\xfcB\x00\x00PA\x00\x00\xcbC\x00\x80\x9bC\x00\x80\xd5C\x00\x00\xa4B\x00\x80\xb0C\x00\x00\x98B\x00\x00\xe0B\x00\x00\xf6B\x00\x80\xeeC\x00\x00\xd6B\x00\x00\nD\x00\x80\xc6C\x00\x00BC\x00\x00\x8fC\x00\x00bC\x00\x80\xe5C\x00\x00\xe4C\x00\x00pA\x00\x80\xf0C\x00\x00\x0eD\x00\x00\x88B\x00\x00\xc4C\x00\x00\x89C\x00\x80\x9fC\x00\x80\x0fD\x00\x00\xfaB\x00\x80\xacC\x00\x80\x91C\x00\xc0\x08D\x00\xc0\tD\x00\x00\x15D\x00\x80\x89C\x00\x00GC\x00\x00\xd9C\x00\x80\x13D\x00\x80\x93C\x00\x00)C\x00\x00\xc0@\x00\x00\x9fC\x00\x00\xb8B\x00@\x12D\x00\x80\xc9C\x00\x00\x87C\x00\x00\xaeC\x00\x00\x80A\x00\x00\xa0A\x00\x00\x0cB\x00\xc0\x01D\x00\x004C\x00\x00\x96B\x00\x00SC\x00\x00\xffC\x00\x00\x82C\x00\x80\xbcC\x00\x00}C\x00\x00\x00A\x00\x80\xe8C\x00\xc0\x15D\x00\x00eC\x00\x00\xebC\x00\x80\rD\x00\x80\xb8C\x00\x80\xcaC\x00\x80\x9eC\x00\xc0\x12D\x00\x00\xb4B\x00\x00TB\x00\x00\xdbC\x00\x00\x84B\x00\x80\xa5C\x00\x00[C\x00\x00\x88C\x00\xc0\x00D\x00\x00\x04C\x00\x00\xa2B\x00\x00\x1eC\x00\x00\xe7C\x00\x00kC\x00\x80\x10D\x00\x00\xa6B\x00\x00&C\x00\x00\x12D\x00\x008C\x00\x80\x15D\x00\x80\xdeC\x00\x00\x12C\x00\x00\xd0A\x00\x00\x80B\x00\x00\x10C\x00\x006C\x00\x00\xc2C\x00\xc0\x04D\x00@\x0fD\x00\x00\x8dC\x00\x00\x90C\x00\x00\xe4B\x00\x00?C\x00@\x05D\x00\x00\x9eB\x00\x80\x02D\x00\x00\x0bD\x00\x00\x9eC\x00\x00\xf7C\x00\x00UC\x00\x00\xacC\x00\x80\x07D\x00\x00\x81C\x00\x80\x83C\x00\x00\xbdC\x00\xc0\x0eD\x00\x80\xa6C\x00\x00\x0eC\x00\x00\x00B\x00\x00\xe8B\x00\x00\xc8B\x00\x00mC\x00\x00tC\x00\x80\x94C\x00\x00\xd5C\x00\x00\xefC\x00\x00\x06D\x00\x00PB\x00@\rD\x00\x80\xbbC\x00\x80\xabC\x00@\x11D\x00\x00=C\x00\x80\xffC\x00\x00\xecB\x00\x00\xe0@\x00\xc0\x11D\x00\x00%C\x00\xc0\x07D\x00\x00\xb6C\x00\x00@A\x00\x80\xb6C\x00\x00LB\x00\x00\xf1C\x00\x00vC\x00\x00\x80?\x00\x80\xa8C\x00\x000C\x00\x80\xdfC\x00\x00TC\x00\x80\x95C\x00\x80\x92C\x00\x00JC\x00\x00\xa4C\x00\x00\x99C\x00\x80\xb2C\x00\x80\xd8C\x00\x80\xd4C\x00\x00\\B\x00\x80\xa7C\x00\x00\xb4C\x00\x00qC\x00\x00$B\x00\xc0\x14D\x00\x00hC\x00\x00\xccB\x00\x00\xa8A\x00\x00\rC\x00\x80\xb3C\x00\x00\xfeC\x00\x00rC\x00\x80\x82C\x00\x00\xd8A\x00\xc0\rD\x00\x00\x86B\x00\x00$C\x00\x00\x13D\x00\x80\x8dC\x00\x80\x8bC\x00\x00\x14D\x00@\x07D\x00\x00\xb1C\x00\x004B\x00\x00\xecC\x00\x00\xb0B\x00\x00 B\x00\x00<C\x00\x00@B\x00\x00jC\x00\x00XC\x00\x80\xbfC\x00\x00\xd7C\x00\x00\xa8C\x00\x00\xd2B\x00\x00\xf8A\x00\x00\x11C\x00\x00\xf2C\x00\x00\x10D\x00\x80\xb4C\x00\x001C\x00\xc0\x02D\x00\x00\xc1C\x00\x00\\C\x00\x00\xbfC\x00\x00ZC\x00\x80\x00D\x00\x00\x11D\x00@\nD\x00\x007C\x00\x00\x1aC\x00\x00\xc8A\x00\x00\xe6B\x00\x80\xeaC\x00\x00\x01D\x00\x000A\x00\x00YC\x00\x80\x9cC\x00\x00\x98A\x00\x80\xa2C\x00\x00oC\x00\x00\x91C\x00\x80\x04D\x00\x00_C\x00\x00]C\x00\x80\x08D\x00\x00^C\x00\xc0\x10D\x00\x00\x14C\x00\x00\xcaC\x00\x80\x80C\x00\x80\x97C\x00\x80\xcbC\x00\x00DB\x00\x00(B\x00\x00\x8bC\x00\x00\x06C\x00\x00\xe9C\x00\x00\xb6B\x00\x00\x86C\x00\x00\x92B\x00\x80\xa1C\x00\x80\x01D\x00\xc0\nD\x00\x00\xb9C\x00\x00\xc3C\x00\x80\xafC\x00\x00\xe1C\x00\x00\xd4B\x00\x00@@\x00\x00/C\x00\x80\tD\x00\x80\xd0C\x00\x80\xe1C\x00\x00\xfcC\x00\x003C\x00\x00#C\x00\x00\x00C\x00\x00\x9aB\x00\x00"C\x00\x00pC\x00\x00\xd6C\x00\xc0\x0fD\x00\x00\tD\x00\x00QC\x00\x80\xd6C\x00\x80\xdcC\x00\x80\x14D\x00\x00\x18C\x00\x80\xf3C\x00\x00\xceB\x00\x00IC\x00\x00cC\x00\x00\xe0C\x00\x80\x9aC\x00\x80\x8cC\x00\x00KC\x00\x00\x05D\x00\x00>C\x00\x80\x81C\x00\x00|C\x00\x80\xd7C\x00\x00\xe3C\x00\x00\xadC\x00\x80\nD\x00\x80\x12D\x00\x00(C\x00\x80\xa0C\x00\x80\x8aC\x00\x00\xbbC\x00\x00\xd8B\x00\x00\x14B\x00\x00\xf6C\x00\x00VC\x00\x80\xa3C\x00\x00\x00\x00\x00\x00<B\x00@\x15D\x00\x80\xc7C\x00\x00\x15C\x00\x00\x01C\x00\x00\x16C\x00\x00\xacB\x00\x80\xedC\x00\x00\x93C\x00\x00\x88A\x00\x00xC\x00\x80\xf9C\x00\x00\x17C\x00\x80\xc8C\x00\x00\xb8A\x00@\x0bD\x00\x00uC\x00\x00\xabC\x00\x00\x07C\x00\x00\xdaC\x00\x00aC\x00\x00!C\x00@\tD\x00\x80\xdbC\x00\x80\x0bD\x00\x00\xf4C\x00\x00\x9dC\x00\x80\xceC\x00\x00\xbeC\x00\x00\x0bC\x00\x80\x8eC\x00\x00AC\x00\x00\xaaC\x00\x00\xa6C\x00\x00\xb0C\x00\x00\xb0A\x00@\x13D\x00\x00\xf0B\x00\x00RC\x00\x80\xe6C\x00@\x10D\x00\x00\xf9C\x00@\x14D\x00@\x01D\x00\x00 C\x00\x00\xa9C\x00\x00\x08B\x00\x00{C\x00\x00\xf0A\x00\x009C\x00\x80\xfaC\x00\x80\xc4C\x00@\x0cD\x00\x00\x96C\x00\x00iC\x00\x00PC\x00\x00lC\x00\x00\x02C\x00\x80\x06D\x00\x00\xdcB\x00@\x04D\x00\x00\x00D\x00\x00\xc0A\x00\x00\xf2B\x00\x00CC\x00\x00\x0cC\x00\x80\xe3C\x00\x00\xeeB\x00\x00\xeeC\x00\x00yC\x00\x00\x1dC\x00\x00\xe0A\x00\x00`C\x00\x00\xc2B\x00\x00.C\x00\x80\xd1C\x00\x00fC\x00\x00\xaeB\x00\x80\xfdC\x00\x00\x18B\x00\x00hB\x00\x00EC\x00\x00wC\x00\x00\x97C\x00\x00\x90A\x00\x00\nC\x00\x00,B\x00\x00\x94C\x00\x00\xd8C\x00\x00\x7fC\x00\x80\x0eD\x00\x00\xbcC\x00\x00`A\x00\x80\x88C\x00\x80\xb9C\x00\x00\x10B\x00@\x06D\x00@\x02D\x00\xc0\x13D\x00\x80\xadC\x00\x00\x04B\x00\x00\x9cB\x00\x00\xbeB\x00\x00\xddC\x00\x00HB\x00\x00\xb8C\x00\x80\x9dC\x00\x80\xfeC\x00\x80\xa4C\x00\x80\x8fC\x00\x00\xa0C\x00\x00tB\x00\x00`B\x00\x00\xc6C\x00\x00\x82B\x00\x00\xccC\x00\x00@C\x00\x00\x8eB\x00\x00\xdeC\x00\x00DC\x00\x00\xd4C\x00\x00\xa0@\x00\x80\xc1C\x00\x00\xc0B\x00\x00\xc6B\x00\x00\x0fC\x00\x80\x0cD\x00\x00\xafC\x00\x00\x07D\x00\x00\xbaC\x00\x80\x90C\x00\x00\xeaC\x00\x80\xf2C\x00\x00\x1bC\x00\x80\xe9C\x00\x80\xd2C\x00\x00sC\x00\x00\x98C\x00\x00\xd3C\x00\x80\xecC\x00\x00\xa7C\x00\x00\xfeB\x00\x00\xe6C\x00\x00\x1fC\x00\x005C\x00\x00\xe8C\x00\x00\xeaB\x00\x000B\x00\x80\xe7C\x00\x00\xfbC\x00\x00\xbcB\x00\x00\xf5C\x00\x00FC\x00\x80\xefC\x00\x80\xf7C\x00\x80\xaeC\x00\x80\x84C\x00\x80\x99C\x00\x00\x9bC\x00\x00*C\x00\x00\x80C\x00\x00dB\x00\x00\x95C\x00\x80\x87C\x00\x00\xe5C\x00\x00\x84C\x00\x00\xd1C\x00\x00\tC\x00\x80\xbaC\x00\x00\'C\x00\x00\x8cB\x00\x00\xa0B\x00\x00\xdeB\x00\x80\x86C\x00\xc0\x06D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4554
(dp4555
g60
(dp4556
g48
I01
sg56
I01
ssg62
g4547
sg63
(lp4557
g48
ag56
asg65
(lp4558
I600
aI1
asbsg67
S'random'
p4559
sg69
g70
(g51
(I0
tS'b'
tRp4560
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4561
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\xa8\x01\x00\x00\x13\x01\x00\x00A\x00\x00\x00z\x01\x00\x00\x00\x00\x00\x00"\x02\x00\x00\xad\x00\x00\x00\t\x01\x00\x00\xbf\x00\x00\x00\t\x00\x00\x00;\x00\x00\x00X\x01\x00\x00\x0e\x01\x00\x00\x87\x00\x00\x00\x05\x02\x00\x00\x99\x00\x00\x00\xb4\x00\x00\x00\xb2\x01\x00\x00\xfd\x01\x00\x00[\x01\x00\x00\xb5\x00\x00\x00(\x01\x00\x00\xcc\x01\x00\x00\xb7\x01\x00\x00\xe7\x01\x00\x00T\x01\x00\x00\xde\x00\x00\x00.\x01\x00\x00\xf0\x01\x00\x00/\x00\x00\x00\xd9\x01\x00\x00D\x01\x00\x00\xf8\x00\x00\x00\r\x02\x00\x00\xd7\x01\x00\x00\xb6\x00\x00\x00\x08\x02\x00\x00\xa4\x01\x00\x00\xf8\x01\x00\x00*\x00\x00\x00;\x01\x00\x00$\x01\x00\x00k\x01\x00\x00\xff\x01\x00\x00<\x02\x00\x008\x01\x00\x00.\x00\x00\x00\xa9\x01\x00\x00=\x01\x00\x00j\x01\x00\x00\x11\x02\x00\x00\x10\x01\x00\x00\x01\x01\x00\x00\xca\x00\x00\x00\x7f\x00\x00\x00 \x01\x00\x00\x19\x02\x00\x00J\x02\x00\x00\xf9\x01\x00\x00{\x00\x00\x00B\x00\x00\x00\x18\x02\x00\x00\x84\x00\x00\x00J\x00\x00\x00\xdf\x00\x00\x00\x1b\x02\x00\x00\xcc\x00\x00\x000\x01\x00\x00\x9c\x00\x00\x001\x00\x00\x00S\x02\x00\x00\x1e\x02\x00\x00O\x00\x00\x00q\x01\x00\x00H\x00\x00\x00\xb9\x00\x00\x00\x8d\x00\x00\x00\x83\x01\x00\x00\x0e\x02\x00\x00\xea\x00\x00\x00T\x02\x00\x00\xd2\x00\x00\x00\x8b\x00\x00\x00\xd7\x00\x00\x00]\x00\x00\x002\x00\x00\x00\xaf\x01\x00\x00\xf6\x01\x00\x00:\x01\x00\x004\x00\x00\x00\xc9\x00\x00\x00o\x01\x00\x00\xaf\x00\x00\x00V\x00\x00\x00?\x02\x00\x00\x0f\x02\x00\x00$\x02\x00\x00\xf2\x01\x00\x00\x02\x00\x00\x00%\x02\x00\x00\xfa\x00\x00\x00@\x00\x00\x00\'\x01\x00\x00\x8f\x01\x00\x00\x80\x00\x00\x00C\x01\x00\x00y\x01\x00\x00\x91\x00\x00\x00\xa3\x01\x00\x00\x03\x00\x00\x00\xe4\x01\x00\x00U\x02\x00\x00\x8e\x00\x00\x006\x00\x00\x00\xe7\x00\x00\x00U\x01\x00\x00\xf9\x00\x00\x00;\x02\x00\x00\x08\x01\x00\x00\xec\x01\x00\x00\xce\x01\x00\x00\xe8\x01\x00\x00s\x00\x00\x00\x8f\x00\x00\x003\x00\x00\x00\xa1\x00\x00\x00\x86\x00\x00\x006\x02\x00\x00\x82\x01\x00\x00\xad\x01\x00\x00\xe2\x01\x00\x00 \x00\x00\x00\xd1\x00\x00\x00\n\x00\x00\x00m\x01\x00\x00\xbb\x01\x00\x00p\x00\x00\x00P\x02\x00\x00\xfe\x01\x00\x00\xc6\x01\x00\x00\xea\x01\x00\x00)\x01\x00\x00\xf7\x00\x00\x00&\x02\x00\x00\xe0\x00\x00\x00E\x01\x00\x00\xdd\x00\x00\x00}\x00\x00\x00e\x01\x00\x00\xac\x01\x00\x00\xae\x01\x00\x00\xb5\x01\x00\x00\x8d\x01\x00\x00S\x00\x00\x00S\x01\x00\x00.\x02\x00\x00l\x00\x00\x00\xef\x01\x00\x00\xd3\x00\x00\x008\x02\x00\x00\xd5\x01\x00\x00\xbe\x01\x00\x00\x84\x01\x00\x00\x81\x01\x00\x001\x01\x00\x00\x0b\x01\x00\x00\xd8\x00\x00\x00R\x02\x00\x00\x9f\x01\x00\x00\xac\x00\x00\x00H\x02\x00\x00\x16\x00\x00\x000\x00\x00\x00M\x00\x00\x00\xf3\x01\x00\x00{\x01\x00\x00\x15\x01\x00\x00I\x01\x00\x00\x18\x00\x00\x00\x80\x01\x00\x00\xb8\x00\x00\x009\x02\x00\x00\xe1\x00\x00\x00R\x01\x00\x00\xda\x00\x00\x00\xda\x01\x00\x00\x14\x00\x00\x00e\x00\x00\x00<\x01\x00\x00\x06\x01\x00\x00\x97\x01\x00\x00\xe8\x00\x00\x00\x1d\x02\x00\x00\xc8\x01\x00\x00\x94\x00\x00\x00\xe9\x01\x00\x00 \x02\x00\x00\xfa\x01\x00\x00A\x02\x00\x00\xa8\x00\x00\x00\x06\x00\x00\x00\x90\x01\x00\x00\x1a\x01\x00\x00\x95\x01\x00\x007\x00\x00\x00\x1c\x00\x00\x00d\x00\x00\x00\x1e\x00\x00\x00\xe0\x01\x00\x00\x89\x01\x00\x00\xcf\x01\x00\x00\xba\x00\x00\x00\x17\x01\x00\x00\xef\x00\x00\x00\xa6\x01\x00\x00q\x00\x00\x00?\x01\x00\x00Y\x01\x00\x00N\x01\x00\x00\xce\x00\x00\x00L\x01\x00\x00a\x01\x00\x00c\x01\x00\x00`\x01\x00\x00\xf1\x01\x00\x00\xbd\x01\x00\x00\x96\x00\x00\x00\x91\x01\x00\x00=\x00\x00\x00\xc2\x00\x00\x00\xf5\x01\x00\x00C\x00\x00\x00&\x01\x00\x00\xdf\x01\x00\x00>\x01\x00\x00\xd5\x00\x00\x00\xe1\x01\x00\x00\xfb\x00\x00\x00D\x00\x00\x00]\x01\x00\x00\x85\x01\x00\x00#\x01\x00\x00,\x01\x00\x001\x02\x00\x00\xfc\x00\x00\x00\xb9\x01\x00\x00\x12\x01\x00\x00\xfb\x01\x00\x00\xb3\x01\x00\x00\xee\x01\x00\x00\x85\x00\x00\x00\xd8\x01\x00\x00\x99\x01\x00\x00\xbe\x00\x00\x00\x82\x00\x00\x00\x02\x02\x00\x00I\x02\x00\x00g\x01\x00\x00\xf2\x00\x00\x00\x98\x01\x00\x00\xbc\x00\x00\x00-\x01\x00\x00n\x00\x00\x00\xf3\x00\x00\x00N\x02\x00\x00E\x02\x00\x00\x01\x00\x00\x00z\x00\x00\x00p\x01\x00\x00V\x02\x00\x00\xb2\x00\x00\x00L\x02\x00\x00\xcf\x00\x00\x00\x06\x02\x00\x00\x9e\x00\x00\x00\xa7\x00\x00\x00\r\x00\x00\x00\xa1\x01\x00\x00l\x01\x00\x004\x01\x00\x00\x0b\x00\x00\x00\x94\x01\x00\x00\xe5\x00\x00\x003\x01\x00\x00G\x00\x00\x00\xc7\x01\x00\x00\x95\x00\x00\x00\x16\x02\x00\x00\xe6\x00\x00\x00+\x02\x00\x00^\x01\x00\x00\xa3\x00\x00\x00\x07\x00\x00\x00\x19\x01\x00\x00\xb1\x01\x00\x00\xab\x00\x00\x00\x00\x02\x00\x00\xfd\x00\x00\x00K\x02\x00\x00\x18\x01\x00\x00\xde\x01\x00\x00?\x00\x00\x00\xfc\x01\x00\x00h\x01\x00\x002\x02\x00\x00\x05\x00\x00\x00\x1c\x01\x00\x00F\x02\x00\x00|\x00\x00\x00\x93\x01\x00\x00G\x02\x00\x00\x89\x00\x00\x00\x04\x00\x00\x00Z\x01\x00\x00\xc3\x01\x00\x00\x13\x02\x00\x00\xed\x00\x00\x00\xc7\x00\x00\x00\xae\x00\x00\x00\x9f\x00\x00\x00\x17\x02\x00\x00\xa0\x01\x00\x00-\x00\x00\x00r\x01\x00\x00\x1f\x00\x00\x00\\\x01\x00\x00\x11\x00\x00\x00\xa7\x01\x00\x00\x1b\x01\x00\x00\x15\x02\x00\x00,\x00\x00\x00\xcd\x00\x00\x00\xca\x01\x00\x00\xf6\x00\x00\x005\x02\x00\x00!\x01\x00\x00B\x01\x00\x00\x14\x01\x00\x00\xd6\x01\x00\x00t\x00\x00\x00\xc9\x01\x00\x00)\x00\x00\x00\xba\x01\x00\x00\x04\x01\x00\x00\xf0\x00\x00\x00\xa2\x00\x00\x00\x9c\x01\x00\x00\x0c\x02\x00\x00\xb3\x00\x00\x00D\x02\x00\x00(\x02\x00\x00w\x01\x00\x00\xcb\x01\x00\x00\x8c\x00\x00\x007\x01\x00\x00T\x00\x00\x00W\x00\x00\x00\x1d\x01\x00\x00>\x00\x00\x00*\x01\x00\x00"\x01\x00\x00H\x01\x00\x00c\x00\x00\x00\x1b\x00\x00\x00\r\x01\x00\x00\x0f\x01\x00\x00\x0c\x00\x00\x00o\x00\x00\x00\x12\x02\x00\x00\xc5\x00\x00\x00u\x01\x00\x00\x07\x02\x00\x00*\x02\x00\x00Q\x02\x00\x00\xa2\x01\x00\x00\x03\x01\x00\x00\x04\x02\x00\x00\xbd\x00\x00\x00\xf4\x00\x00\x00%\x00\x00\x00\xc5\x01\x00\x00_\x00\x00\x00M\x01\x00\x00@\x01\x00\x00k\x00\x00\x00i\x00\x00\x00K\x01\x00\x00#\x02\x00\x00\xe2\x00\x00\x00\x13\x00\x00\x00v\x01\x00\x00(\x00\x00\x00\x9d\x00\x00\x00\xdc\x01\x00\x00\x19\x00\x00\x00\x83\x00\x00\x00\x1a\x02\x00\x00\x93\x00\x00\x00\x81\x00\x00\x00\xab\x01\x00\x00\x0f\x00\x00\x00\xb6\x01\x00\x00<\x00\x00\x00\xb1\x00\x00\x00f\x01\x00\x00\xc6\x00\x00\x00\x88\x00\x00\x00i\x01\x00\x00\x1c\x02\x00\x00E\x00\x00\x00Y\x00\x00\x00\\\x00\x00\x00v\x00\x00\x00\xc4\x01\x00\x00g\x00\x00\x009\x00\x00\x00X\x00\x00\x00}\x01\x00\x00O\x02\x00\x00\xf4\x01\x00\x00y\x00\x00\x000\x02\x00\x003\x02\x00\x00$\x00\x00\x00!\x02\x00\x00\x1f\x01\x00\x00\xfe\x00\x00\x00\x8a\x00\x00\x00\x86\x01\x00\x00\x8a\x01\x00\x00A\x01\x00\x00\x9a\x01\x00\x00\x01\x02\x00\x00\x1e\x01\x00\x00\xa9\x00\x00\x00x\x00\x00\x00\xbc\x01\x00\x00\x12\x00\x00\x00\xcb\x00\x00\x00\xc0\x01\x00\x00\x08\x00\x00\x00\x8b\x01\x00\x00\x10\x02\x00\x00[\x00\x00\x00\x1f\x02\x00\x00\xdc\x00\x00\x008\x00\x00\x00\x16\x01\x00\x00\x92\x01\x00\x00\x1d\x00\x00\x00x\x01\x00\x00~\x01\x00\x00!\x00\x00\x00"\x00\x00\x00\x9b\x01\x00\x00\xeb\x01\x00\x00\x98\x00\x00\x005\x00\x00\x00M\x02\x00\x00\x97\x00\x00\x007\x02\x00\x00\xd0\x01\x00\x00\xd4\x00\x00\x00=\x02\x00\x00:\x02\x00\x00\xc0\x00\x00\x00n\x01\x00\x00/\x02\x00\x00,\x02\x00\x00V\x01\x00\x00\xc3\x00\x00\x00K\x00\x00\x009\x01\x00\x004\x02\x00\x00Q\x00\x00\x00\xb0\x01\x00\x00\xed\x01\x00\x00\x90\x00\x00\x00\xff\x00\x00\x00B\x02\x00\x00\x10\x00\x00\x00\x9a\x00\x00\x00\x11\x01\x00\x00F\x00\x00\x00F\x01\x00\x00-\x02\x00\x00\x15\x00\x00\x00\x8e\x01\x00\x00\xc2\x01\x00\x00~\x00\x00\x00@\x02\x00\x00\x1a\x00\x00\x00\xa5\x01\x00\x00\x17\x00\x00\x00\xee\x00\x00\x00C\x02\x00\x00h\x00\x00\x00w\x00\x00\x00\xd2\x01\x00\x00\xb4\x01\x00\x00R\x00\x00\x00\xdb\x01\x00\x00>\x02\x00\x00^\x00\x00\x00\x7f\x01\x00\x00I\x00\x00\x00:\x00\x00\x00\xf7\x01\x00\x00+\x01\x00\x00\x14\x02\x00\x00\xbb\x00\x00\x00\x07\x01\x00\x00\xe6\x01\x00\x00r\x00\x00\x00O\x01\x00\x00\xd0\x00\x00\x00W\x01\x00\x00\xd4\x01\x00\x00s\x01\x00\x00\xb7\x00\x00\x00#\x00\x00\x00\n\x02\x00\x00\xeb\x00\x00\x00J\x01\x00\x00\x0e\x00\x00\x00j\x00\x00\x00u\x00\x00\x00&\x00\x00\x00f\x00\x00\x00\xe5\x01\x00\x00_\x01\x00\x00\xe3\x00\x00\x00\x96\x01\x00\x00\xe9\x00\x00\x00+\x00\x00\x00N\x00\x00\x00\x00\x01\x00\x00\t\x02\x00\x00\xe3\x01\x00\x00W\x02\x00\x00)\x02\x00\x006\x01\x00\x00\xf1\x00\x00\x00\x0c\x01\x00\x00\'\x00\x00\x00a\x00\x00\x00b\x01\x00\x00\xa4\x00\x00\x00\x88\x01\x00\x00\xbf\x01\x00\x00|\x01\x00\x00\xa5\x00\x00\x00\x92\x00\x00\x00Q\x01\x00\x00\x9d\x01\x00\x00t\x01\x00\x00\xec\x00\x00\x00\xb8\x01\x00\x00\xc1\x01\x00\x00m\x00\x00\x00`\x00\x00\x00\xdd\x01\x00\x00\'\x02\x00\x00Z\x00\x00\x00L\x00\x00\x00\x02\x01\x00\x00\xc4\x00\x00\x00/\x01\x00\x00\x9b\x00\x00\x00b\x00\x00\x00\x03\x02\x00\x00\xf5\x00\x00\x00P\x00\x00\x00\xe4\x00\x00\x00\xa0\x00\x00\x00\x87\x01\x00\x00G\x01\x00\x00\xd1\x01\x00\x00\xd6\x00\x00\x00d\x01\x00\x00P\x01\x00\x00\x05\x01\x00\x00U\x00\x00\x00\n\x01\x00\x00\xd9\x00\x00\x00\xb0\x00\x00\x00\x9e\x01\x00\x00\xc8\x00\x00\x002\x01\x00\x00\xcd\x01\x00\x00\xaa\x00\x00\x00\x0b\x02\x00\x005\x01\x00\x00\xd3\x01\x00\x00\x8c\x01\x00\x00%\x01\x00\x00\xa6\x00\x00\x00\xaa\x01\x00\x00\xdb\x00\x00\x00\xc1\x00\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4562
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4563
(g4561
S'\xc1\x00\x00\x00'
tRp4564
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4565
I01
sb.