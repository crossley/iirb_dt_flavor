ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject803
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 803
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VF
sS'age'
p31
V19
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I1
sS'_exp'
p41
I73972048
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I54
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I11
I55
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I11
I55
tg55
I00
S'\x00\x00\xe0@\x00\x00 A\x00\x00\x90A\x00\x00\xf8A\x00\x00\x14B\x00\x008B\x00\x00\\B\x00\x00\x8cB\x00\x00\xb2B\x00\x00\xd2B\x00\x00\x13C\x00\x00\x16C\x00\x00\x1dC\x00\x00#C\x00\x00&C\x00\x003C\x00\x00<C\x00\x00BC\x00\x00^C\x00\x00hC\x00\x00qC\x00\x00}C\x00\x80\x80C\x00\x80\x84C\x00\x80\x85C\x00\x80\x89C\x00\x80\x8cC\x00\x80\x95C\x00\x00\x98C\x00\x80\x9bC\x00\x00\x9cC\x00\x00\x9dC\x00\x80\xb3C\x00\x80\xb8C\x00\x00\xbbC\x00\x80\xc3C\x00\x80\xc4C\x00\x80\xcdC\x00\x80\xcfC\x00\x00\xd6C\x00\x80\xdeC\x00\x80\xe5C\x00\x80\xe8C\x00\x00\xefC\x00\x00\xfbC\x00\x80\xfdC\x00@\x03D\x00\x00\x04D\x00@\x04D\x00\x80\x04D\x00\x00\x07D\x00@\x08D\x00\xc0\x0fD\x00@\x10D\x00\x80\x10D\x00\x00PA\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xf0A\x00\x00|B\x00\x00\xa0B\x00\x00\xaeB\x00\x00\xb6B\x00\x00\xceB\x00\x00\xeeB\x00\x00\x1aC\x00\x00\'C\x00\x009C\x00\x00>C\x00\x00`C\x00\x00lC\x00\x00xC\x00\x00\x8cC\x00\x00\x94C\x00\x80\x9dC\x00\x00\x9eC\x00\x80\x9eC\x00\x80\xa4C\x00\x80\xa7C\x00\x80\xa8C\x00\x00\xabC\x00\x00\xacC\x00\x00\xafC\x00\x80\xb4C\x00\x80\xb9C\x00\x00\xbaC\x00\x00\xbfC\x00\x80\xbfC\x00\x80\xcaC\x00\x80\xcbC\x00\x00\xd3C\x00\x00\xd4C\x00\x80\xd8C\x00\x80\xddC\x00\x00\xe1C\x00\x00\xe6C\x00\x00\xe7C\x00\x80\xf5C\x00\x80\xfcC\x00\x00\xffC\x00\x00\x00D\x00\xc0\x07D\x00\xc0\tD\x00\x00\x0bD\x00@\rD\x00\xc0\x10D\x00\xc0\x12D\x00\xc0\x14D\x00\x00\x15D\x00\xc0\x15D\x00\x00\x80?\x00\x00\x00A\x00\x00\xd0A\x00\x00\xe8A\x00\x00\x08B\x00\x00 B\x00\x00LB\x00\x00\x90B\x00\x00\xa8B\x00\x00\xc0B\x00\x00\xd4B\x00\x00\xf6B\x00\x00\xfeB\x00\x00\x06C\x00\x00\x0bC\x00\x00\x14C\x00\x00)C\x00\x00+C\x00\x00-C\x00\x00OC\x00\x00eC\x00\x00tC\x00\x00uC\x00\x80\x88C\x00\x00\x8dC\x00\x80\x8dC\x00\x80\x90C\x00\x00\x96C\x00\x80\x99C\x00\x00\x9aC\x00\x80\x9fC\x00\x00\xa0C\x00\x80\xa3C\x00\x80\xa6C\x00\x00\xa9C\x00\x80\xabC\x00\x00\xaeC\x00\x80\xb5C\x00\x80\xbeC\x00\x00\xc1C\x00\x00\xc3C\x00\x00\xc6C\x00\x80\xc6C\x00\x00\xc9C\x00\x80\xc9C\x00\x80\xd0C\x00\x80\xd4C\x00\x00\xdbC\x00\x80\xdfC\x00\x80\xe0C\x00\x80\xe9C\x00\x80\xfaC\x00\x00\x01D\x00\x80\x08D\x00@\x15D\x00\x00\x98A\x00\x00\xb8A\x00\x00lB\x00\x00\x82B\x00\x00\x84B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x96B\x00\x00\xa4B\x00\x00\xf4B\x00\x00\xf8B\x00\x00\x0cC\x00\x00\x1eC\x00\x001C\x00\x00DC\x00\x00JC\x00\x00LC\x00\x00XC\x00\x00[C\x00\x00bC\x00\x00dC\x00\x00vC\x00\x80\x86C\x00\x80\x8bC\x00\x80\x8fC\x00\x80\x91C\x00\x00\x92C\x00\x80\x94C\x00\x80\x98C\x00\x80\xa5C\x00\x00\xa6C\x00\x00\xadC\x00\x80\xafC\x00\x80\xb0C\x00\x00\xb8C\x00\x00\xb9C\x00\x00\xc5C\x00\x80\xceC\x00\x00\xd0C\x00\x00\xdaC\x00\x00\xdfC\x00\x00\xe4C\x00\x00\xe5C\x00\x80\xe7C\x00\x00\xf0C\x00\x80\xf0C\x00\x80\xf4C\x00\x00\xfdC\x00\x80\xffC\x00\xc0\x01D\x00\x80\x02D\x00\x80\x07D\x00\x80\x0cD\x00\x00\x13D\x00\xc0\x13D\x00\x00@@\x00\x00\xc0@\x00\x00\x04B\x00\x00,B\x00\x000B\x00\x00XB\x00\x00\x86B\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xc2B\x00\x00\xecB\x00\x00\x04C\x00\x00\nC\x00\x00\x0fC\x00\x00\x12C\x00\x00%C\x00\x00*C\x00\x002C\x00\x00AC\x00\x00CC\x00\x00NC\x00\x00PC\x00\x00RC\x00\x00WC\x00\x00\\C\x00\x00pC\x00\x00rC\x00\x80\x81C\x00\x80\x83C\x00\x00\x88C\x00\x00\x95C\x00\x00\x9fC\x00\x00\xa2C\x00\x00\xa5C\x00\x00\xa7C\x00\x00\xaaC\x00\x80\xaeC\x00\x00\xb2C\x00\x00\xb4C\x00\x80\xb7C\x00\x00\xbeC\x00\x00\xc0C\x00\x80\xccC\x00\x00\xceC\x00\x80\xd2C\x00\x00\xd5C\x00\x80\xd6C\x00\x00\xe2C\x00\x00\xeaC\x00\x00\xf1C\x00\x80\xf8C\x00\x00\xfcC\x00\x80\x05D\x00\xc0\x0eD\x00\x80\x12D\x00\x000A\x00\x00pA\x00\x00\x10B\x00\x00TB\x00\x00pB\x00\x00\x92B\x00\x00\x9aB\x00\x00\xc8B\x00\x00\xe8B\x00\x00\x05C\x00\x00\x11C\x00\x00\x18C\x00\x00!C\x00\x00"C\x00\x00.C\x00\x00:C\x00\x00;C\x00\x00GC\x00\x00IC\x00\x00KC\x00\x00kC\x00\x00\x83C\x00\x00\x8bC\x00\x80\x97C\x00\x80\x9aC\x00\x80\xa2C\x00\x80\xacC\x00\x00\xb7C\x00\x00\xbcC\x00\x80\xc1C\x00\x00\xcbC\x00\x00\xd1C\x00\x80\xd1C\x00\x80\xd5C\x00\x00\xd8C\x00\x80\xdbC\x00\x80\xdcC\x00\x00\xe3C\x00\x80\xeeC\x00\x80\xf1C\x00\x00\xf3C\x00\x00\xf8C\x00\x00\xfeC\x00@\x00D\x00\x00\x05D\x00\xc0\x06D\x00@\x07D\x00\x00\x08D\x00\x00\tD\x00\x00\rD\x00\xc0\rD\x00\x00\x0eD\x00@\x0fD\x00\x80\x0fD\x00\x00\x14D\x00\x00\x00@\x00\x00\xd8A\x00\x00\x18B\x00\x00DB\x00\x00xB\x00\x00\x80B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xd0B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xf2B\x00\x00\xfaB\x00\x00\x08C\x00\x00\x1bC\x00\x00\x1cC\x00\x00$C\x00\x007C\x00\x00SC\x00\x00YC\x00\x00nC\x00\x00zC\x00\x00{C\x00\x00\x7fC\x00\x00\x84C\x00\x00\x89C\x00\x80\x8aC\x00\x80\x92C\x00\x00\x99C\x00\x80\x9cC\x00\x80\xaaC\x00\x80\xb2C\x00\x00\xb6C\x00\x80\xbaC\x00\x80\xbbC\x00\x80\xc2C\x00\x80\xc5C\x00\x00\xcaC\x00\x00\xcfC\x00\x00\xd2C\x00\x80\xd9C\x00\x00\xe0C\x00\x80\xe1C\x00\x80\xecC\x00\xc0\x05D\x00\x00\x06D\x00\x80\tD\x00\x80\x0bD\x00@\x0cD\x00\x80\x0eD\x00@\x11D\x00\xc0\x11D\x00\x00\x12D\x00\x00\x00\x00\x00\x00\x80@\x00\x00\xa0@\x00\x00\x80A\x00\x00\xb0A\x00\x00\xe0A\x00\x00\x0cB\x00\x00\x1cB\x00\x00<B\x00\x00@B\x00\x00hB\x00\x00\xaaB\x00\x00\xbaB\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xd6B\x00\x00\xe2B\x00\x00\xe6B\x00\x00\xfcB\x00\x00\x02C\x00\x00\x17C\x00\x006C\x00\x00EC\x00\x00VC\x00\x00ZC\x00\x00]C\x00\x00gC\x00\x00\x80C\x00\x00\x82C\x00\x80\x87C\x00\x00\x8aC\x00\x00\x8fC\x00\x00\x91C\x00\x00\x93C\x00\x80\xa1C\x00\x80\xa9C\x00\x00\xb0C\x00\x00\xb1C\x00\x80\xb1C\x00\x00\xb3C\x00\x00\xc2C\x00\x00\xc7C\x00\x00\xccC\x00\x80\xd3C\x00\x00\xdeC\x00\x80\xedC\x00\x00\xf4C\x00@\x02D\x00\x00\x03D\x00\xc0\x04D\x00@\x06D\x00\x80\x06D\x00\x00\x0fD\x00@\x12D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@A\x00\x00\x88A\x00\x00\xc8A\x00\x00dB\x00\x00\xb0B\x00\x00\xf0B\x00\x00\x10C\x00\x00\x15C\x00\x00(C\x00\x00,C\x00\x00/C\x00\x005C\x00\x008C\x00\x00HC\x00\x00MC\x00\x00QC\x00\x00_C\x00\x00mC\x00\x00sC\x00\x00|C\x00\x00\x85C\x00\x00\x86C\x00\x00\x87C\x00\x00\x8eC\x00\x80\x8eC\x00\x00\x90C\x00\x80\x96C\x00\x00\x9bC\x00\x80\xa0C\x00\x00\xb5C\x00\x00\xc8C\x00\x00\xd9C\x00\x00\xe8C\x00\x00\xe9C\x00\x00\xecC\x00\x00\xedC\x00\x80\xefC\x00\x00\xf2C\x00\x80\xf3C\x00\x00\xf7C\x00\x80\xf7C\x00\x80\xf9C\x00\x80\xfeC\x00\xc0\x00D\x00@\x01D\x00\x80\x01D\x00\xc0\x02D\x00\x80\x03D\x00@\x05D\x00@\x0bD\x00\xc0\x0bD\x00\xc0\x0cD\x00\x80\rD\x00@\x14D\x00\x00\x00\x00\x00\x00\x00B\x00\x004B\x00\x00HB\x00\x00PB\x00\x00\x98B\x00\x00\xacB\x00\x00\xb8B\x00\x00\xe0B\x00\x00\x03C\x00\x00\x07C\x00\x00\tC\x00\x00\rC\x00\x00\x19C\x00\x00\x1fC\x00\x00 C\x00\x000C\x00\x00=C\x00\x00FC\x00\x00TC\x00\x00fC\x00\x00oC\x00\x00wC\x00\x00\x81C\x00\x80\x93C\x00\x00\x97C\x00\x00\xa3C\x00\x80\xbcC\x00\x00\xbdC\x00\x80\xbdC\x00\x80\xc7C\x00\x00\xcdC\x00\x00\xd7C\x00\x00\xddC\x00\x80\xe2C\x00\x80\xe3C\x00\x80\xe6C\x00\x80\xeaC\x00\x00\xebC\x00\x80\xebC\x00\x00\xeeC\x00\x80\xf2C\x00\x00\xf5C\x00\x00\xf9C\x00\x80\xfbC\x00\x80\x00D\x00\x00\x02D\x00\xc0\x08D\x00@\tD\x00\x00\nD\x00\x80\nD\x00\x00\x0cD\x00@\x0eD\x00\x00\x10D\x00\x80\x11D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10A\x00\x00`A\x00\x00\xc0A\x00\x00$B\x00\x00(B\x00\x00`B\x00\x00tB\x00\x00\x8eB\x00\x00\x94B\x00\x00\xa2B\x00\x00\xa6B\x00\x00\xb4B\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xd8B\x00\x00\xe4B\x00\x00\xeaB\x00\x00\x00C\x00\x00\x01C\x00\x00\x0eC\x00\x004C\x00\x00?C\x00\x00@C\x00\x00UC\x00\x00aC\x00\x00cC\x00\x00iC\x00\x00jC\x00\x00yC\x00\x00~C\x00\x80\x82C\x00\x00\xa1C\x00\x00\xa4C\x00\x00\xa8C\x00\x80\xadC\x00\x80\xb6C\x00\x80\xc0C\x00\x00\xc4C\x00\x80\xc8C\x00\x80\xd7C\x00\x80\xdaC\x00\x00\xdcC\x00\x80\xe4C\x00\x00\xf6C\x00\x80\xf6C\x00\x00\xfaC\x00\xc0\x03D\x00@\nD\x00\xc0\nD\x00\x00\x11D\x00@\x13D\x00\x80\x13D\x00\x80\x14D\x00\x80\x15D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I11
aI55
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I11
I55
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I10
aI5
aI7
aI4
aI4
aI0
aI3
aI5
aI8
aI7
aI6
aI6
aI4
aI4
aI1
aI4
aI9
aI5
aI9
aI8
aI4
aI7
aI4
aI0
aI6
aI0
aI7
aI3
aI2
aI2
aI4
aI6
aI7
aI2
aI0
aI10
aI2
aI1
aI5
aI4
aI10
aI6
aI1
aI6
aI8
aI8
aI3
aI8
aI0
aI5
aI6
aI6
aI7
aI6
aI10
aI2
aI8
aI3
aI2
aI9
aI10
aI4
aI4
aI0
aI5
aI6
aI3
aI5
aI8
aI6
aI0
aI3
aI0
aI5
aI4
aI7
aI0
aI8
aI10
aI0
aI7
aI3
aI4
aI5
aI2
aI3
aI1
aI3
aI6
aI6
aI2
aI2
aI7
aI5
aI9
aI5
aI4
aI3
aI8
aI9
aI5
aI0
aI8
aI0
aI0
aI1
aI3
aI5
aI6
aI1
aI6
aI1
aI10
aI7
aI0
aI8
aI3
aI4
aI10
aI6
aI9
aI2
aI2
aI5
aI6
aI1
aI4
aI9
aI8
aI6
aI0
aI10
aI2
aI6
aI8
aI6
aI8
aI0
aI8
aI8
aI3
aI2
aI7
aI10
aI5
aI5
aI7
aI4
aI6
aI10
aI9
aI9
aI8
aI7
aI5
aI4
aI5
aI3
aI0
aI5
aI9
aI8
aI5
aI7
aI1
aI4
aI10
aI8
aI5
aI7
aI7
aI3
aI1
aI1
aI6
aI7
aI3
aI9
aI4
aI0
aI8
aI0
aI1
aI5
aI9
aI8
aI10
aI2
aI7
aI0
aI5
aI2
aI2
aI0
aI10
aI2
aI1
aI7
aI5
aI9
aI7
aI9
aI9
aI4
aI5
aI1
aI5
aI0
aI9
aI8
aI9
aI8
aI9
aI7
aI3
aI10
aI5
aI0
aI4
aI2
aI7
aI5
aI2
aI0
aI7
aI3
aI0
aI10
aI9
aI1
aI10
aI6
aI6
aI0
aI3
aI2
aI10
aI10
aI3
aI10
aI1
aI5
aI3
aI0
aI8
aI3
aI7
aI8
aI0
aI7
aI4
aI5
aI4
aI4
aI9
aI6
aI8
aI0
aI1
aI1
aI7
aI9
aI8
aI5
aI7
aI8
aI1
aI7
aI5
aI1
aI9
aI1
aI9
aI1
aI10
aI7
aI7
aI6
aI6
aI6
aI5
aI10
aI3
aI7
aI6
aI7
aI7
aI9
aI2
aI9
aI4
aI8
aI10
aI5
aI7
aI10
aI1
aI9
aI9
aI3
aI1
aI3
aI9
aI6
aI4
aI1
aI3
aI6
aI3
aI9
aI2
aI10
aI4
aI7
aI8
aI0
aI3
aI2
aI0
aI3
aI10
aI3
aI3
aI8
aI5
aI10
aI8
aI0
aI3
aI1
aI4
aI8
aI7
aI7
aI9
aI10
aI2
aI10
aI10
aI0
aI5
aI2
aI4
aI8
aI9
aI2
aI7
aI4
aI3
aI4
aI3
aI8
aI1
aI4
aI8
aI0
aI3
aI5
aI0
aI5
aI10
aI10
aI7
aI0
aI4
aI0
aI2
aI3
aI1
aI6
aI3
aI10
aI4
aI8
aI9
aI2
aI1
aI8
aI4
aI0
aI1
aI5
aI0
aI10
aI9
aI0
aI0
aI2
aI2
aI2
aI6
aI5
aI2
aI10
aI2
aI10
aI10
aI2
aI0
aI5
aI8
aI6
aI0
aI8
aI3
aI10
aI6
aI10
aI7
aI7
aI2
aI6
aI0
aI1
aI9
aI1
aI2
aI0
aI3
aI2
aI10
aI2
aI6
aI2
aI3
aI2
aI3
aI9
aI3
aI1
aI0
aI5
aI7
aI6
aI2
aI8
aI5
aI1
aI10
aI8
aI2
aI3
aI1
aI10
aI9
aI1
aI10
aI7
aI2
aI7
aI4
aI10
aI3
aI7
aI5
aI2
aI8
aI4
aI4
aI6
aI3
aI9
aI6
aI10
aI4
aI2
aI7
aI3
aI1
aI2
aI2
aI4
aI4
aI1
aI1
aI0
aI6
aI0
aI4
aI10
aI6
aI0
aI9
aI3
aI10
aI9
aI9
aI0
aI6
aI9
aI6
aI9
aI10
aI3
aI7
aI10
aI1
aI0
aI10
aI5
aI6
aI3
aI9
aI4
aI10
aI1
aI7
aI9
aI5
aI0
aI5
aI1
aI3
aI2
aI7
aI2
aI4
aI6
aI5
aI2
aI8
aI9
aI6
aI1
aI10
aI7
aI1
aI1
aI1
aI1
aI3
aI1
aI3
aI5
aI2
aI2
aI1
aI9
aI4
aI10
aI4
aI8
aI8
aI7
aI5
aI8
aI6
aI6
aI5
aI7
aI0
aI1
aI9
aI4
aI4
aI3
aI9
aI1
aI7
aI6
aI8
aI9
aI10
aI9
aI6
aI8
aI5
aI7
aI4
aI3
aI9
aI0
aI8
aI4
aI6
aI8
aI1
aI2
aI4
aI1
aI4
aI3
aI8
aI6
aI4
aI6
aI5
aI2
aI0
aI5
aI1
aI9
aI8
aI5
aI8
aI1
aI2
aI10
aI7
aI9
aI9
aI4
aI9
aI8
aI6
atbsS'finished'
p74
I00
sS'nReps'
p75
I55
sS'nRemaining'
p76
I5
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p79
NsS'thisIndex'
p80
I1
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I5
sS'nTotal'
p83
I605
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I10
sS'.thisRepN'
p96
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I10
sg15
(lp100
S'k'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'k'
asg95
I2
sS'.thisRepN'
p103
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I2
sg15
(lp107
S'k'
asg17
S'Y'
sg14
I1
sa(dp108
g16
(lp109
S'k'
asg18
S'Y'
sS'.thisRepN'
p110
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I6
sg15
(lp114
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp115
S'space'
p116
asg95
I6
sa(dp117
g16
(lp118
S'd'
asg18
S'Y'
sS'.thisRepN'
p119
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p120
I3
sS'.thisN'
p121
I3
sS'.thisIndex'
p122
I4
sg15
(lp123
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp124
S'space'
p125
asg95
I4
sa(dp126
g16
(lp127
S'k'
asg18
S'Y'
sS'.thisRepN'
p128
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p129
I4
sS'.thisN'
p130
I4
sS'.thisIndex'
p131
I7
sg15
(lp132
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp133
S'space'
p134
asg95
I7
sa(dp135
g16
(lp136
S'd'
asg18
S'N'
sS'.thisRepN'
p137
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p138
I5
sS'.thisN'
p139
I5
sS'.thisIndex'
p140
I7
sg15
(lp141
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp142
g16
(lp143
S'd'
asg18
S'Y'
sS'.thisRepN'
p144
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p145
I6
sS'.thisN'
p146
I6
sS'.thisIndex'
p147
I4
sg15
(lp148
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp149
S'space'
p150
asg95
I4
sa(dp151
g16
(lp152
S'k'
asg18
S'N'
sS'.thisRepN'
p153
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p154
I7
sS'.thisN'
p155
I7
sS'.thisIndex'
p156
I0
sg15
(lp157
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp158
g16
(lp159
S'k'
asg18
S'N'
sS'.thisRepN'
p160
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p161
I8
sS'.thisN'
p162
I8
sS'.thisIndex'
p163
I2
sg15
(lp164
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp165
g16
(lp166
S'd'
asg18
S'Y'
sS'.thisRepN'
p167
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p168
I9
sS'.thisN'
p169
I9
sS'.thisIndex'
p170
I10
sg15
(lp171
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp172
S'space'
p173
asg95
I10
sa(dp174
g16
(lp175
S'k'
asg18
S'Y'
sS'.thisRepN'
p176
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p177
I10
sS'.thisN'
p178
I10
sS'.thisIndex'
p179
I0
sg15
(lp180
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp181
S'd'
asg95
I0
sa(dp182
g16
(lp183
S'd'
asg18
S'N'
sS'.thisRepN'
p184
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p185
I0
sS'.thisN'
p186
I11
sS'.thisIndex'
p187
I5
sg15
(lp188
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp189
S'space'
p190
asg95
I5
sa(dp191
g16
(lp192
S'k'
asg18
S'N'
sS'.thisRepN'
p193
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p194
I1
sS'.thisN'
p195
I12
sS'.thisIndex'
p196
I8
sg15
(lp197
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp198
S'space'
p199
asg95
I8
sa(dp200
g16
(lp201
S'k'
asg18
S'Y'
sS'.thisRepN'
p202
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p203
I2
sS'.thisN'
p204
I13
sS'.thisIndex'
p205
I1
sg15
(lp206
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp207
S'space'
p208
asg95
I1
sa(dp209
g16
(lp210
S'd'
asg18
S'N'
sS'.thisRepN'
p211
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p212
I3
sS'.thisN'
p213
I14
sS'.thisIndex'
p214
I10
sg15
(lp215
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp216
g16
(lp217
S'k'
asg18
S'Y'
sS'.thisRepN'
p218
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p219
I4
sS'.thisN'
p220
I15
sS'.thisIndex'
p221
I5
sg15
(lp222
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp223
S'space'
p224
asg95
I5
sa(dp225
g16
(lp226
S'd'
asg18
S'N'
sS'.thisRepN'
p227
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p228
I5
sS'.thisN'
p229
I16
sS'.thisIndex'
p230
I7
sg15
(lp231
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp232
g16
(lp233
S'd'
asg18
S'Y'
sS'.thisRepN'
p234
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p235
I6
sS'.thisN'
p236
I17
sS'.thisIndex'
p237
I8
sg15
(lp238
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp239
S'space'
p240
asg95
I8
sa(dp241
g16
(lp242
S'k'
asg18
S'Y'
sS'.thisRepN'
p243
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p244
I7
sS'.thisN'
p245
I18
sS'.thisIndex'
p246
I0
sg15
(lp247
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp248
g16
(lp249
S'k'
asg18
S'Y'
sS'.thisRepN'
p250
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p251
I8
sS'.thisN'
p252
I19
sS'.thisIndex'
p253
I3
sg15
(lp254
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp255
S'space'
p256
asg95
I3
sa(dp257
g16
(lp258
S'k'
asg18
S'Y'
sS'.thisRepN'
p259
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p260
I9
sS'.thisN'
p261
I20
sS'.thisIndex'
p262
I1
sg15
(lp263
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp264
S'space'
p265
asg95
I1
sa(dp266
g16
(lp267
S'd'
asg18
S'N'
sS'.thisRepN'
p268
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p269
I10
sS'.thisN'
p270
I21
sS'.thisIndex'
p271
I1
sg15
(lp272
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp273
g16
(lp274
S'k'
asg18
S'Y'
sS'.thisRepN'
p275
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p276
I0
sS'.thisN'
p277
I22
sS'.thisIndex'
p278
I7
sg15
(lp279
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp280
S'space'
p281
asg95
I7
sa(dp282
g16
(lp283
S'd'
asg18
S'N'
sS'.thisRepN'
p284
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p285
I1
sS'.thisN'
p286
I23
sS'.thisIndex'
p287
I3
sg15
(lp288
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp289
g16
(lp290
S'k'
asg18
S'N'
sS'.thisRepN'
p291
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p292
I2
sS'.thisN'
p293
I24
sS'.thisIndex'
p294
I10
sg15
(lp295
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp296
g16
(lp297
S'k'
asg18
S'Y'
sS'.thisRepN'
p298
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p299
I3
sS'.thisN'
p300
I25
sS'.thisIndex'
p301
I8
sg15
(lp302
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp303
g16
(lp304
S'd'
asg18
S'N'
sS'.thisRepN'
p305
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p306
I4
sS'.thisN'
p307
I26
sS'.thisIndex'
p308
I2
sg15
(lp309
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp310
S'space'
p311
asg95
I2
sa(dp312
g16
(lp313
S'k'
asg18
S'Y'
sS'.thisRepN'
p314
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p315
I5
sS'.thisN'
p316
I27
sS'.thisIndex'
p317
I6
sg15
(lp318
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp319
g16
(lp320
S'd'
asg18
S'N'
sS'.thisRepN'
p321
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p322
I6
sS'.thisN'
p323
I28
sS'.thisIndex'
p324
I7
sg15
(lp325
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp326
g16
(lp327
S'k'
asg18
S'Y'
sS'.thisRepN'
p328
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p329
I7
sS'.thisN'
p330
I29
sS'.thisIndex'
p331
I2
sg15
(lp332
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp333
S'space'
p334
asg95
I2
sa(dp335
g16
(lp336
S'd'
asg18
S'Y'
sS'.thisRepN'
p337
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p338
I8
sS'.thisN'
p339
I30
sS'.thisIndex'
p340
I1
sg15
(lp341
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp342
S'space'
p343
asg95
I1
sa(dp344
g16
(lp345
S'k'
asg18
S'N'
sS'.thisRepN'
p346
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p347
I9
sS'.thisN'
p348
I31
sS'.thisIndex'
p349
I0
sg15
(lp350
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp351
g16
(lp352
S'k'
asg18
S'Y'
sS'.thisRepN'
p353
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p354
I10
sS'.thisN'
p355
I32
sS'.thisIndex'
p356
I9
sg15
(lp357
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp358
g16
(lp359
S'd'
asg18
S'N'
sS'.thisRepN'
p360
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p361
I0
sS'.thisN'
p362
I33
sS'.thisIndex'
p363
I4
sg15
(lp364
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp365
g16
(lp366
S'k'
asg18
S'N'
sS'.thisRepN'
p367
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p368
I1
sS'.thisN'
p369
I34
sS'.thisIndex'
p370
I2
sg15
(lp371
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp372
g16
(lp373
S'd'
asg18
S'Y'
sS'.thisRepN'
p374
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p375
I2
sS'.thisN'
p376
I35
sS'.thisIndex'
p377
I7
sg15
(lp378
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp379
g16
(lp380
S'k'
asg18
S'Y'
sS'.thisRepN'
p381
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p382
I3
sS'.thisN'
p383
I36
sS'.thisIndex'
p384
I5
sg15
(lp385
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp386
g16
(lp387
S'd'
asg18
S'N'
sS'.thisRepN'
p388
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p389
I4
sS'.thisN'
p390
I37
sS'.thisIndex'
p391
I0
sg15
(lp392
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp393
S'space'
p394
asg95
I0
sa(dp395
g16
(lp396
S'k'
asg18
S'N'
sS'.thisRepN'
p397
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p398
I5
sS'.thisN'
p399
I38
sS'.thisIndex'
p400
I6
sg15
(lp401
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp402
g16
(lp403
S'd'
asg18
S'Y'
sS'.thisRepN'
p404
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p405
I6
sS'.thisN'
p406
I39
sS'.thisIndex'
p407
I7
sg15
(lp408
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp409
S'space'
p410
asg95
I7
sa(dp411
g16
(lp412
S'k'
asg18
S'Y'
sS'.thisRepN'
p413
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p414
I7
sS'.thisN'
p415
I40
sS'.thisIndex'
p416
I2
sg15
(lp417
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp418
S'space'
p419
asg95
I2
sa(dp420
g16
(lp421
S'k'
asg18
S'N'
sS'.thisRepN'
p422
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p423
I8
sS'.thisN'
p424
I41
sS'.thisIndex'
p425
I10
sg15
(lp426
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp427
g16
(lp428
S'd'
asg18
S'N'
sS'.thisRepN'
p429
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p430
I9
sS'.thisN'
p431
I42
sS'.thisIndex'
p432
I10
sg15
(lp433
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp434
g16
(lp435
S'k'
asg18
S'N'
sS'.thisRepN'
p436
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p437
I10
sS'.thisN'
p438
I43
sS'.thisIndex'
p439
I4
sg15
(lp440
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp441
g16
(lp442
S'k'
asg18
S'N'
sS'.thisRepN'
p443
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p444
I0
sS'.thisN'
p445
I44
sS'.thisIndex'
p446
I4
sg15
(lp447
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp448
g16
(lp449
S'k'
asg18
S'Y'
sS'.thisRepN'
p450
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p451
I1
sS'.thisN'
p452
I45
sS'.thisIndex'
p453
I9
sg15
(lp454
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp455
S'space'
p456
asg95
I9
sa(dp457
g16
(lp458
S'k'
asg18
S'Y'
sS'.thisRepN'
p459
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p460
I2
sS'.thisN'
p461
I46
sS'.thisIndex'
p462
I0
sg15
(lp463
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp464
S'space'
p465
asg95
I0
sa(dp466
g16
(lp467
S'd'
asg18
S'N'
sS'.thisRepN'
p468
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p469
I3
sS'.thisN'
p470
I47
sS'.thisIndex'
p471
I7
sg15
(lp472
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp473
g16
(lp474
S'd'
asg18
S'N'
sS'.thisRepN'
p475
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p476
I4
sS'.thisN'
p477
I48
sS'.thisIndex'
p478
I7
sg15
(lp479
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp480
g16
(lp481
S'd'
asg18
S'N'
sg22
I37
sS'.thisN'
p482
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p483
I5
sS'.thisRepN'
p484
I4
sg21
I39
sS'.thisIndex'
p485
I6
sg23
I24
sg15
(lp486
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp487
g16
(lp488
S'd'
asg95
I9
sS'.thisRepN'
p489
I4
sg30
VF
sg31
g32
sS'.thisTrialN'
p490
I6
sS'.thisN'
p491
I50
sS'.thisIndex'
p492
I9
sg15
(lp493
S'd'
asg17
S'Y'
sg14
I2
sa(dp494
g16
(lp495
S'k'
asg95
I2
sS'.thisRepN'
p496
I4
sg30
VF
sg31
g32
sS'.thisTrialN'
p497
I7
sS'.thisN'
p498
I51
sS'.thisIndex'
p499
I2
sg15
(lp500
S'k'
asg17
S'Y'
sg14
I2
sa(dp501
g16
(lp502
S'k'
asg18
S'Y'
sS'.thisRepN'
p503
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p504
I8
sS'.thisN'
p505
I52
sS'.thisIndex'
p506
I9
sg15
(lp507
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp508
S'space'
p509
asg95
I9
sa(dp510
g16
(lp511
S'k'
asg18
S'Y'
sS'.thisRepN'
p512
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p513
I9
sS'.thisN'
p514
I53
sS'.thisIndex'
p515
I5
sg15
(lp516
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp517
S'space'
p518
asg95
I5
sa(dp519
g16
(lp520
S'd'
asg18
S'Y'
sS'.thisRepN'
p521
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p522
I10
sS'.thisN'
p523
I54
sS'.thisIndex'
p524
I4
sg15
(lp525
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp526
S'space'
p527
asg95
I4
sa(dp528
g16
(lp529
S'k'
asg18
S'Y'
sS'.thisRepN'
p530
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p531
I0
sS'.thisN'
p532
I55
sS'.thisIndex'
p533
I0
sg15
(lp534
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp535
g16
(lp536
S'k'
asg18
S'N'
sS'.thisRepN'
p537
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p538
I1
sS'.thisN'
p539
I56
sS'.thisIndex'
p540
I10
sg15
(lp541
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp542
g16
(lp543
S'k'
asg18
S'Y'
sS'.thisRepN'
p544
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p545
I2
sS'.thisN'
p546
I57
sS'.thisIndex'
p547
I8
sg15
(lp548
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp549
S'space'
p550
asg95
I8
sa(dp551
g16
(lp552
S'k'
asg18
S'Y'
sS'.thisRepN'
p553
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p554
I3
sS'.thisN'
p555
I58
sS'.thisIndex'
p556
I7
sg15
(lp557
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp558
S'space'
p559
asg95
I7
sa(dp560
g16
(lp561
S'k'
asg18
S'Y'
sS'.thisRepN'
p562
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p563
I4
sS'.thisN'
p564
I59
sS'.thisIndex'
p565
I3
sg15
(lp566
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp567
S'space'
p568
asg95
I3
sa(dp569
g16
(lp570
S'd'
asg18
S'Y'
sS'.thisRepN'
p571
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p572
I5
sS'.thisN'
p573
I60
sS'.thisIndex'
p574
I5
sg15
(lp575
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp576
S'space'
p577
asg95
I5
sa(dp578
g16
(lp579
S'd'
asg18
S'Y'
sS'.thisRepN'
p580
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p581
I6
sS'.thisN'
p582
I61
sS'.thisIndex'
p583
I10
sg15
(lp584
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp585
S'space'
p586
asg95
I10
sa(dp587
g16
(lp588
S'k'
asg18
S'N'
sS'.thisRepN'
p589
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p590
I7
sS'.thisN'
p591
I62
sS'.thisIndex'
p592
I6
sg15
(lp593
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp594
g16
(lp595
S'd'
asg18
S'N'
sS'.thisRepN'
p596
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p597
I8
sS'.thisN'
p598
I63
sS'.thisIndex'
p599
I1
sg15
(lp600
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp601
g16
(lp602
S'k'
asg18
S'N'
sS'.thisRepN'
p603
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p604
I9
sS'.thisN'
p605
I64
sS'.thisIndex'
p606
I6
sg15
(lp607
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp608
S'space'
p609
asg95
I6
sa(dp610
g16
(lp611
S'k'
asg18
S'N'
sS'.thisRepN'
p612
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p613
I10
sS'.thisN'
p614
I65
sS'.thisIndex'
p615
I3
sg15
(lp616
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp617
g16
(lp618
S'd'
asg18
S'N'
sS'.thisRepN'
p619
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p620
I0
sS'.thisN'
p621
I66
sS'.thisIndex'
p622
I3
sg15
(lp623
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp624
g16
(lp625
S'd'
asg18
S'Y'
sS'.thisRepN'
p626
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p627
I1
sS'.thisN'
p628
I67
sS'.thisIndex'
p629
I4
sg15
(lp630
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp631
S'space'
p632
asg95
I4
sa(dp633
g16
(lp634
S'd'
asg18
S'N'
sS'.thisRepN'
p635
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p636
I2
sS'.thisN'
p637
I68
sS'.thisIndex'
p638
I3
sg15
(lp639
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp640
g16
(lp641
S'd'
asg18
S'N'
sS'.thisRepN'
p642
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p643
I3
sS'.thisN'
p644
I69
sS'.thisIndex'
p645
I3
sg15
(lp646
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp647
S'space'
p648
asg95
I3
sa(dp649
g16
(lp650
S'k'
asg18
S'Y'
sS'.thisRepN'
p651
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p652
I4
sS'.thisN'
p653
I70
sS'.thisIndex'
p654
I0
sg15
(lp655
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp656
S'space'
p657
asg95
I0
sa(dp658
g16
(lp659
S'd'
asg18
S'N'
sS'.thisRepN'
p660
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p661
I5
sS'.thisN'
p662
I71
sS'.thisIndex'
p663
I10
sg15
(lp664
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp665
g16
(lp666
S'd'
asg18
S'N'
sS'.thisRepN'
p667
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p668
I6
sS'.thisN'
p669
I72
sS'.thisIndex'
p670
I2
sg15
(lp671
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I2
sa(dp672
g16
(lp673
S'k'
asg18
S'N'
sS'.thisRepN'
p674
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p675
I7
sS'.thisN'
p676
I73
sS'.thisIndex'
p677
I5
sg15
(lp678
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp679
g16
(lp680
S'k'
asg18
S'Y'
sS'.thisRepN'
p681
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p682
I8
sS'.thisN'
p683
I74
sS'.thisIndex'
p684
I10
sg15
(lp685
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp686
S'space'
p687
asg95
I10
sa(dp688
g16
(lp689
S'k'
asg18
S'N'
sS'.thisRepN'
p690
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p691
I9
sS'.thisN'
p692
I75
sS'.thisIndex'
p693
I3
sg15
(lp694
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp695
g16
(lp696
S'd'
asg18
S'Y'
sS'.thisRepN'
p697
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p698
I10
sS'.thisN'
p699
I76
sS'.thisIndex'
p700
I9
sg15
(lp701
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp702
g16
(lp703
S'd'
asg18
S'Y'
sS'.thisRepN'
p704
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p705
I0
sS'.thisN'
p706
I77
sS'.thisIndex'
p707
I5
sg15
(lp708
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp709
S'space'
p710
asg95
I5
sa(dp711
g16
(lp712
S'd'
asg18
S'Y'
sS'.thisRepN'
p713
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p714
I1
sS'.thisN'
p715
I78
sS'.thisIndex'
p716
I4
sg15
(lp717
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp718
S'k'
asg95
I4
sa(dp719
g16
(lp720
S'k'
asg18
S'N'
sS'.thisRepN'
p721
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p722
I2
sS'.thisN'
p723
I79
sS'.thisIndex'
p724
I4
sg15
(lp725
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp726
g16
(lp727
S'k'
asg18
S'N'
sS'.thisRepN'
p728
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p729
I3
sS'.thisN'
p730
I80
sS'.thisIndex'
p731
I1
sg15
(lp732
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp733
g16
(lp734
S'd'
asg18
S'Y'
sS'.thisRepN'
p735
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p736
I4
sS'.thisN'
p737
I81
sS'.thisIndex'
p738
I10
sg15
(lp739
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp740
g16
(lp741
S'd'
asg18
S'Y'
sS'.thisRepN'
p742
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p743
I5
sS'.thisN'
p744
I82
sS'.thisIndex'
p745
I3
sg15
(lp746
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp747
S'space'
p748
asg95
I3
sa(dp749
g16
(lp750
S'k'
asg18
S'Y'
sS'.thisRepN'
p751
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p752
I6
sS'.thisN'
p753
I83
sS'.thisIndex'
p754
I10
sg15
(lp755
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp756
S'space'
p757
asg95
I10
sa(dp758
g16
(lp759
S'd'
asg18
S'Y'
sS'.thisRepN'
p760
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p761
I7
sS'.thisN'
p762
I84
sS'.thisIndex'
p763
I2
sg15
(lp764
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp765
S'space'
p766
asg95
I2
sa(dp767
g16
(lp768
S'k'
asg18
S'Y'
sS'.thisRepN'
p769
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p770
I8
sS'.thisN'
p771
I85
sS'.thisIndex'
p772
I7
sg15
(lp773
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp774
S'space'
p775
asg95
I7
sa(dp776
g16
(lp777
S'd'
asg18
S'N'
sS'.thisRepN'
p778
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p779
I9
sS'.thisN'
p780
I86
sS'.thisIndex'
p781
I9
sg15
(lp782
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp783
g16
(lp784
S'd'
asg18
S'Y'
sS'.thisRepN'
p785
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p786
I10
sS'.thisN'
p787
I87
sS'.thisIndex'
p788
I1
sg15
(lp789
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp790
S'space'
p791
asg95
I1
sa(dp792
g16
(lp793
S'd'
asg18
S'N'
sS'.thisRepN'
p794
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p795
I0
sS'.thisN'
p796
I88
sS'.thisIndex'
p797
I8
sg15
(lp798
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp799
g16
(lp800
S'd'
asg18
S'Y'
sS'.thisRepN'
p801
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p802
I1
sS'.thisN'
p803
I89
sS'.thisIndex'
p804
I0
sg15
(lp805
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp806
S'space'
p807
asg95
I0
sa(dp808
g16
(lp809
S'd'
asg18
S'N'
sS'.thisRepN'
p810
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p811
I2
sS'.thisN'
p812
I90
sS'.thisIndex'
p813
I10
sg15
(lp814
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp815
g16
(lp816
S'k'
asg18
S'N'
sS'.thisRepN'
p817
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p818
I3
sS'.thisN'
p819
I91
sS'.thisIndex'
p820
I1
sg15
(lp821
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp822
g16
(lp823
S'k'
asg18
S'N'
sS'.thisRepN'
p824
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p825
I4
sS'.thisN'
p826
I92
sS'.thisIndex'
p827
I9
sg15
(lp828
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp829
g16
(lp830
S'd'
asg18
S'N'
sS'.thisRepN'
p831
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p832
I5
sS'.thisN'
p833
I93
sS'.thisIndex'
p834
I7
sg15
(lp835
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp836
g16
(lp837
S'k'
asg18
S'Y'
sS'.thisRepN'
p838
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p839
I6
sS'.thisN'
p840
I94
sS'.thisIndex'
p841
I10
sg15
(lp842
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp843
S'space'
p844
asg95
I10
sa(dp845
g16
(lp846
S'd'
asg18
S'Y'
sS'.thisRepN'
p847
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p848
I7
sS'.thisN'
p849
I95
sS'.thisIndex'
p850
I10
sg15
(lp851
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp852
S'space'
p853
asg95
I10
sa(dp854
g16
(lp855
S'k'
asg18
S'N'
sS'.thisRepN'
p856
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p857
I8
sS'.thisN'
p858
I96
sS'.thisIndex'
p859
I2
sg15
(lp860
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp861
g16
(lp862
S'k'
asg18
S'Y'
sS'.thisRepN'
p863
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p864
I9
sS'.thisN'
p865
I97
sS'.thisIndex'
p866
I4
sg15
(lp867
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp868
g16
(lp869
S'k'
asg18
S'N'
sS'.thisRepN'
p870
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p871
I10
sS'.thisN'
p872
I98
sS'.thisIndex'
p873
I7
sg15
(lp874
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp875
S'space'
p876
asg95
I7
sa(dp877
g16
(lp878
S'k'
asg18
S'N'
sg22
I40
sS'.thisN'
p879
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p880
I0
sS'.thisRepN'
p881
I9
sg21
I44
sS'.thisIndex'
p882
I7
sg23
I25
sg15
(lp883
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp884
g16
(lp885
S'k'
asg95
I5
sS'.thisRepN'
p886
I9
sg30
VF
sg31
g32
sS'.thisTrialN'
p887
I1
sS'.thisN'
p888
I100
sS'.thisIndex'
p889
I5
sg15
(lp890
S'k'
asg17
S'Y'
sg14
I3
sa(dp891
g16
(lp892
S'd'
asg95
I6
sS'.thisRepN'
p893
I9
sg30
VF
sg31
g32
sS'.thisTrialN'
p894
I2
sS'.thisN'
p895
I101
sS'.thisIndex'
p896
I6
sg15
(lp897
S'k'
asg17
S'N'
sg14
I3
sa(dp898
g16
(lp899
S'd'
asg18
S'N'
sS'.thisRepN'
p900
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p901
I3
sS'.thisN'
p902
I102
sS'.thisIndex'
p903
I6
sg15
(lp904
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp905
g16
(lp906
S'd'
asg18
S'Y'
sS'.thisRepN'
p907
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p908
I4
sS'.thisN'
p909
I103
sS'.thisIndex'
p910
I1
sg15
(lp911
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp912
S'space'
p913
asg95
I1
sa(dp914
g16
(lp915
S'k'
asg18
S'N'
sS'.thisRepN'
p916
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p917
I5
sS'.thisN'
p918
I104
sS'.thisIndex'
p919
I6
sg15
(lp920
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp921
g16
(lp922
S'd'
asg18
S'N'
sS'.thisRepN'
p923
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p924
I6
sS'.thisN'
p925
I105
sS'.thisIndex'
p926
I0
sg15
(lp927
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp928
g16
(lp929
S'd'
asg18
S'N'
sS'.thisRepN'
p930
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p931
I7
sS'.thisN'
p932
I106
sS'.thisIndex'
p933
I2
sg15
(lp934
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp935
g16
(lp936
S'k'
asg18
S'Y'
sS'.thisRepN'
p937
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p938
I8
sS'.thisN'
p939
I107
sS'.thisIndex'
p940
I7
sg15
(lp941
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp942
S'space'
p943
asg95
I7
sa(dp944
g16
(lp945
S'k'
asg18
S'N'
sS'.thisRepN'
p946
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p947
I9
sS'.thisN'
p948
I108
sS'.thisIndex'
p949
I10
sg15
(lp950
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp951
g16
(lp952
S'd'
asg18
S'Y'
sS'.thisRepN'
p953
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p954
I10
sS'.thisN'
p955
I109
sS'.thisIndex'
p956
I6
sg15
(lp957
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp958
S'space'
p959
asg95
I6
sa(dp960
g16
(lp961
S'k'
asg18
S'Y'
sS'.thisRepN'
p962
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p963
I0
sS'.thisN'
p964
I110
sS'.thisIndex'
p965
I6
sg15
(lp966
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp967
g16
(lp968
S'k'
asg18
S'Y'
sS'.thisRepN'
p969
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p970
I1
sS'.thisN'
p971
I111
sS'.thisIndex'
p972
I6
sg15
(lp973
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp974
S'space'
p975
asg95
I6
sa(dp976
g16
(lp977
S'd'
asg18
S'N'
sS'.thisRepN'
p978
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p979
I2
sS'.thisN'
p980
I112
sS'.thisIndex'
p981
I9
sg15
(lp982
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp983
g16
(lp984
S'k'
asg18
S'Y'
sS'.thisRepN'
p985
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p986
I3
sS'.thisN'
p987
I113
sS'.thisIndex'
p988
I7
sg15
(lp989
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp990
S'space'
p991
asg95
I7
sa(dp992
g16
(lp993
S'd'
asg18
S'N'
sS'.thisRepN'
p994
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p995
I4
sS'.thisN'
p996
I114
sS'.thisIndex'
p997
I10
sg15
(lp998
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp999
g16
(lp1000
S'k'
asg18
S'Y'
sS'.thisRepN'
p1001
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1002
I5
sS'.thisN'
p1003
I115
sS'.thisIndex'
p1004
I7
sg15
(lp1005
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1006
g16
(lp1007
S'd'
asg18
S'N'
sS'.thisRepN'
p1008
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1009
I6
sS'.thisN'
p1010
I116
sS'.thisIndex'
p1011
I5
sg15
(lp1012
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I5
sa(dp1013
g16
(lp1014
S'd'
asg18
S'N'
sS'.thisRepN'
p1015
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1016
I7
sS'.thisN'
p1017
I117
sS'.thisIndex'
p1018
I10
sg15
(lp1019
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1020
S'space'
p1021
asg95
I10
sa(dp1022
g16
(lp1023
S'k'
asg18
S'Y'
sS'.thisRepN'
p1024
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1025
I8
sS'.thisN'
p1026
I118
sS'.thisIndex'
p1027
I4
sg15
(lp1028
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1029
S'space'
p1030
asg95
I4
sa(dp1031
g16
(lp1032
S'k'
asg18
S'N'
sS'.thisRepN'
p1033
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1034
I9
sS'.thisN'
p1035
I119
sS'.thisIndex'
p1036
I1
sg15
(lp1037
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1038
g16
(lp1039
S'k'
asg18
S'Y'
sS'.thisRepN'
p1040
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1041
I10
sS'.thisN'
p1042
I120
sS'.thisIndex'
p1043
I8
sg15
(lp1044
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I8
sa(dp1045
g16
(lp1046
S'k'
asg18
S'N'
sS'.thisRepN'
p1047
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1048
I0
sS'.thisN'
p1049
I121
sS'.thisIndex'
p1050
I6
sg15
(lp1051
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1052
g16
(lp1053
S'd'
asg18
S'N'
sS'.thisRepN'
p1054
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1055
I1
sS'.thisN'
p1056
I122
sS'.thisIndex'
p1057
I3
sg15
(lp1058
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1059
g16
(lp1060
S'k'
asg18
S'N'
sS'.thisRepN'
p1061
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1062
I2
sS'.thisN'
p1063
I123
sS'.thisIndex'
p1064
I2
sg15
(lp1065
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1066
g16
(lp1067
S'd'
asg18
S'N'
sS'.thisRepN'
p1068
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1069
I3
sS'.thisN'
p1070
I124
sS'.thisIndex'
p1071
I3
sg15
(lp1072
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1073
g16
(lp1074
S'k'
asg18
S'N'
sS'.thisRepN'
p1075
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1076
I4
sS'.thisN'
p1077
I125
sS'.thisIndex'
p1078
I6
sg15
(lp1079
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1080
g16
(lp1081
S'd'
asg18
S'N'
sS'.thisRepN'
p1082
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1083
I5
sS'.thisN'
p1084
I126
sS'.thisIndex'
p1085
I7
sg15
(lp1086
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1087
g16
(lp1088
S'd'
asg18
S'Y'
sS'.thisRepN'
p1089
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1090
I6
sS'.thisN'
p1091
I127
sS'.thisIndex'
p1092
I2
sg15
(lp1093
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1094
S'space'
p1095
asg95
I2
sa(dp1096
g16
(lp1097
S'd'
asg18
S'N'
sS'.thisRepN'
p1098
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1099
I7
sS'.thisN'
p1100
I128
sS'.thisIndex'
p1101
I10
sg15
(lp1102
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1103
g16
(lp1104
S'd'
asg18
S'Y'
sS'.thisRepN'
p1105
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1106
I8
sS'.thisN'
p1107
I129
sS'.thisIndex'
p1108
I10
sg15
(lp1109
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1110
S'space'
p1111
asg95
I10
sa(dp1112
g16
(lp1113
S'k'
asg18
S'Y'
sS'.thisRepN'
p1114
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1115
I9
sS'.thisN'
p1116
I130
sS'.thisIndex'
p1117
I7
sg15
(lp1118
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1119
S'space'
p1120
asg95
I7
sa(dp1121
g16
(lp1122
S'd'
asg18
S'N'
sS'.thisRepN'
p1123
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1124
I10
sS'.thisN'
p1125
I131
sS'.thisIndex'
p1126
I9
sg15
(lp1127
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp1128
g16
(lp1129
S'k'
asg18
S'Y'
sS'.thisRepN'
p1130
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1131
I0
sS'.thisN'
p1132
I132
sS'.thisIndex'
p1133
I4
sg15
(lp1134
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1135
S'space'
p1136
asg95
I4
sa(dp1137
g16
(lp1138
S'd'
asg18
S'Y'
sS'.thisRepN'
p1139
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1140
I1
sS'.thisN'
p1141
I133
sS'.thisIndex'
p1142
I5
sg15
(lp1143
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1144
S'space'
p1145
asg95
I5
sa(dp1146
g16
(lp1147
S'k'
asg18
S'Y'
sS'.thisRepN'
p1148
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1149
I2
sS'.thisN'
p1150
I134
sS'.thisIndex'
p1151
I2
sg15
(lp1152
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1153
S'space'
p1154
asg95
I2
sa(dp1155
g16
(lp1156
S'd'
asg18
S'Y'
sS'.thisRepN'
p1157
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1158
I3
sS'.thisN'
p1159
I135
sS'.thisIndex'
p1160
I9
sg15
(lp1161
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1162
S'space'
p1163
asg95
I9
sa(dp1164
g16
(lp1165
S'd'
asg18
S'Y'
sS'.thisRepN'
p1166
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1167
I4
sS'.thisN'
p1168
I136
sS'.thisIndex'
p1169
I6
sg15
(lp1170
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1171
S'space'
p1172
asg95
I6
sa(dp1173
g16
(lp1174
S'd'
asg18
S'Y'
sS'.thisRepN'
p1175
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1176
I5
sS'.thisN'
p1177
I137
sS'.thisIndex'
p1178
I9
sg15
(lp1179
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1180
S'space'
p1181
asg95
I9
sa(dp1182
g16
(lp1183
S'k'
asg18
S'Y'
sS'.thisRepN'
p1184
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1185
I6
sS'.thisN'
p1186
I138
sS'.thisIndex'
p1187
I4
sg15
(lp1188
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1189
S'space'
p1190
asg95
I4
sa(dp1191
g16
(lp1192
S'k'
asg18
S'Y'
sS'.thisRepN'
p1193
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1194
I7
sS'.thisN'
p1195
I139
sS'.thisIndex'
p1196
I2
sg15
(lp1197
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1198
S'space'
p1199
asg95
I2
sa(dp1200
g16
(lp1201
S'k'
asg18
S'Y'
sS'.thisRepN'
p1202
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1203
I8
sS'.thisN'
p1204
I140
sS'.thisIndex'
p1205
I3
sg15
(lp1206
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1207
S'space'
p1208
asg95
I3
sa(dp1209
g16
(lp1210
S'd'
asg18
S'Y'
sS'.thisRepN'
p1211
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1212
I9
sS'.thisN'
p1213
I141
sS'.thisIndex'
p1214
I9
sg15
(lp1215
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1216
S'space'
p1217
asg95
I9
sa(dp1218
g16
(lp1219
S'k'
asg18
S'Y'
sS'.thisRepN'
p1220
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1221
I10
sS'.thisN'
p1222
I142
sS'.thisIndex'
p1223
I10
sg15
(lp1224
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1225
S'space'
p1226
asg95
I10
sa(dp1227
g16
(lp1228
S'k'
asg18
S'Y'
sS'.thisRepN'
p1229
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1230
I0
sS'.thisN'
p1231
I143
sS'.thisIndex'
p1232
I4
sg15
(lp1233
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1234
S'space'
p1235
asg95
I4
sa(dp1236
g16
(lp1237
S'd'
asg18
S'Y'
sS'.thisRepN'
p1238
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1239
I1
sS'.thisN'
p1240
I144
sS'.thisIndex'
p1241
I8
sg15
(lp1242
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1243
S'space'
p1244
asg95
I8
sa(dp1245
g16
(lp1246
S'd'
asg18
S'N'
sS'.thisRepN'
p1247
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1248
I2
sS'.thisN'
p1249
I145
sS'.thisIndex'
p1250
I5
sg15
(lp1251
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I5
sa(dp1252
g16
(lp1253
S'k'
asg18
S'N'
sS'.thisRepN'
p1254
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1255
I3
sS'.thisN'
p1256
I146
sS'.thisIndex'
p1257
I4
sg15
(lp1258
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp1259
g16
(lp1260
S'k'
asg18
S'N'
sS'.thisRepN'
p1261
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1262
I4
sS'.thisN'
p1263
I147
sS'.thisIndex'
p1264
I0
sg15
(lp1265
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1266
g16
(lp1267
S'd'
asg18
S'N'
sS'.thisRepN'
p1268
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1269
I5
sS'.thisN'
p1270
I148
sS'.thisIndex'
p1271
I2
sg15
(lp1272
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1273
g16
(lp1274
S'd'
asg18
S'N'
sg22
I44
sS'.thisN'
p1275
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1276
I6
sS'.thisRepN'
p1277
I13
sg21
I38
sS'.thisIndex'
p1278
I8
sg23
I25
sg15
(lp1279
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1280
g16
(lp1281
S'd'
asg95
I0
sS'.thisRepN'
p1282
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1283
I7
sS'.thisN'
p1284
I150
sS'.thisIndex'
p1285
I0
sg15
(lp1286
S'k'
asg17
S'N'
sg14
I4
sa(dp1287
g16
(lp1288
S'd'
asg95
I7
sS'.thisRepN'
p1289
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1290
I8
sS'.thisN'
p1291
I151
sS'.thisIndex'
p1292
I7
sg15
(lp1293
S'd'
asg17
S'Y'
sg14
I4
sa(dp1294
g16
(lp1295
S'k'
asg18
S'N'
sS'.thisRepN'
p1296
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1297
I9
sS'.thisN'
p1298
I152
sS'.thisIndex'
p1299
I5
sg15
(lp1300
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1301
g16
(lp1302
S'd'
asg18
S'Y'
sS'.thisRepN'
p1303
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1304
I10
sS'.thisN'
p1305
I153
sS'.thisIndex'
p1306
I9
sg15
(lp1307
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1308
S'space'
p1309
asg95
I9
sa(dp1310
g16
(lp1311
S'd'
asg18
S'N'
sS'.thisRepN'
p1312
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1313
I0
sS'.thisN'
p1314
I154
sS'.thisIndex'
p1315
I1
sg15
(lp1316
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1317
g16
(lp1318
S'k'
asg18
S'Y'
sS'.thisRepN'
p1319
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1320
I1
sS'.thisN'
p1321
I155
sS'.thisIndex'
p1322
I6
sg15
(lp1323
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1324
S'space'
p1325
asg95
I6
sa(dp1326
g16
(lp1327
S'k'
asg18
S'N'
sS'.thisRepN'
p1328
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1329
I2
sS'.thisN'
p1330
I156
sS'.thisIndex'
p1331
I6
sg15
(lp1332
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I6
sa(dp1333
g16
(lp1334
S'k'
asg18
S'N'
sS'.thisRepN'
p1335
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1336
I3
sS'.thisN'
p1337
I157
sS'.thisIndex'
p1338
I0
sg15
(lp1339
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1340
g16
(lp1341
S'k'
asg18
S'Y'
sS'.thisRepN'
p1342
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1343
I4
sS'.thisN'
p1344
I158
sS'.thisIndex'
p1345
I3
sg15
(lp1346
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1347
S'space'
p1348
asg95
I3
sa(dp1349
g16
(lp1350
S'd'
asg18
S'Y'
sS'.thisRepN'
p1351
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1352
I5
sS'.thisN'
p1353
I159
sS'.thisIndex'
p1354
I9
sg15
(lp1355
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1356
S'space'
p1357
asg95
I9
sa(dp1358
g16
(lp1359
S'k'
asg18
S'N'
sS'.thisRepN'
p1360
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1361
I6
sS'.thisN'
p1362
I160
sS'.thisIndex'
p1363
I9
sg15
(lp1364
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1365
g16
(lp1366
S'k'
asg18
S'N'
sS'.thisRepN'
p1367
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1368
I7
sS'.thisN'
p1369
I161
sS'.thisIndex'
p1370
I5
sg15
(lp1371
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1372
g16
(lp1373
S'd'
asg18
S'N'
sS'.thisRepN'
p1374
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1375
I8
sS'.thisN'
p1376
I162
sS'.thisIndex'
p1377
I5
sg15
(lp1378
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1379
S'space'
p1380
asg95
I5
sa(dp1381
g16
(lp1382
S'd'
asg18
S'N'
sS'.thisRepN'
p1383
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1384
I9
sS'.thisN'
p1385
I163
sS'.thisIndex'
p1386
I0
sg15
(lp1387
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1388
g16
(lp1389
S'k'
asg18
S'Y'
sS'.thisRepN'
p1390
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1391
I10
sS'.thisN'
p1392
I164
sS'.thisIndex'
p1393
I6
sg15
(lp1394
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1395
S'space'
p1396
asg95
I6
sa(dp1397
g16
(lp1398
S'k'
asg18
S'Y'
sS'.thisRepN'
p1399
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1400
I0
sS'.thisN'
p1401
I165
sS'.thisIndex'
p1402
I4
sg15
(lp1403
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1404
S'space'
p1405
asg95
I4
sa(dp1406
g16
(lp1407
S'k'
asg18
S'N'
sS'.thisRepN'
p1408
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1409
I1
sS'.thisN'
p1410
I166
sS'.thisIndex'
p1411
I0
sg15
(lp1412
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1413
S'space'
p1414
asg95
I0
sa(dp1415
g16
(lp1416
S'd'
asg18
S'N'
sS'.thisRepN'
p1417
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1418
I2
sS'.thisN'
p1419
I167
sS'.thisIndex'
p1420
I1
sg15
(lp1421
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1422
g16
(lp1423
S'k'
asg18
S'N'
sS'.thisRepN'
p1424
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1425
I3
sS'.thisN'
p1426
I168
sS'.thisIndex'
p1427
I8
sg15
(lp1428
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1429
g16
(lp1430
S'd'
asg18
S'Y'
sS'.thisRepN'
p1431
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1432
I4
sS'.thisN'
p1433
I169
sS'.thisIndex'
p1434
I2
sg15
(lp1435
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1436
S'space'
p1437
asg95
I2
sa(dp1438
g16
(lp1439
S'd'
asg18
S'N'
sS'.thisRepN'
p1440
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1441
I5
sS'.thisN'
p1442
I170
sS'.thisIndex'
p1443
I4
sg15
(lp1444
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1445
g16
(lp1446
S'k'
asg18
S'Y'
sS'.thisRepN'
p1447
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1448
I6
sS'.thisN'
p1449
I171
sS'.thisIndex'
p1450
I2
sg15
(lp1451
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1452
S'space'
p1453
asg95
I2
sa(dp1454
g16
(lp1455
S'k'
asg18
S'Y'
sS'.thisRepN'
p1456
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1457
I7
sS'.thisN'
p1458
I172
sS'.thisIndex'
p1459
I8
sg15
(lp1460
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1461
S'space'
p1462
asg95
I8
sa(dp1463
g16
(lp1464
S'k'
asg18
S'N'
sS'.thisRepN'
p1465
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1466
I8
sS'.thisN'
p1467
I173
sS'.thisIndex'
p1468
I2
sg15
(lp1469
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1470
g16
(lp1471
S'k'
asg18
S'N'
sS'.thisRepN'
p1472
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1473
I9
sS'.thisN'
p1474
I174
sS'.thisIndex'
p1475
I5
sg15
(lp1476
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1477
g16
(lp1478
S'd'
asg18
S'N'
sS'.thisRepN'
p1479
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1480
I10
sS'.thisN'
p1481
I175
sS'.thisIndex'
p1482
I8
sg15
(lp1483
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1484
g16
(lp1485
S'd'
asg18
S'N'
sS'.thisRepN'
p1486
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1487
I0
sS'.thisN'
p1488
I176
sS'.thisIndex'
p1489
I9
sg15
(lp1490
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1491
g16
(lp1492
S'd'
asg18
S'N'
sS'.thisRepN'
p1493
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1494
I1
sS'.thisN'
p1495
I177
sS'.thisIndex'
p1496
I3
sg15
(lp1497
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I3
sa(dp1498
g16
(lp1499
S'd'
asg18
S'N'
sS'.thisRepN'
p1500
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1501
I2
sS'.thisN'
p1502
I178
sS'.thisIndex'
p1503
I4
sg15
(lp1504
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1505
g16
(lp1506
S'k'
asg18
S'N'
sS'.thisRepN'
p1507
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1508
I3
sS'.thisN'
p1509
I179
sS'.thisIndex'
p1510
I0
sg15
(lp1511
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1512
g16
(lp1513
S'k'
asg18
S'N'
sS'.thisRepN'
p1514
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1515
I4
sS'.thisN'
p1516
I180
sS'.thisIndex'
p1517
I10
sg15
(lp1518
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1519
g16
(lp1520
S'd'
asg18
S'Y'
sS'.thisRepN'
p1521
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1522
I5
sS'.thisN'
p1523
I181
sS'.thisIndex'
p1524
I8
sg15
(lp1525
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1526
g16
(lp1527
S'd'
asg18
S'Y'
sS'.thisRepN'
p1528
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1529
I6
sS'.thisN'
p1530
I182
sS'.thisIndex'
p1531
I7
sg15
(lp1532
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1533
g16
(lp1534
S'd'
asg18
S'Y'
sS'.thisRepN'
p1535
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1536
I7
sS'.thisN'
p1537
I183
sS'.thisIndex'
p1538
I6
sg15
(lp1539
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I6
sa(dp1540
g16
(lp1541
S'd'
asg18
S'N'
sS'.thisRepN'
p1542
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1543
I8
sS'.thisN'
p1544
I184
sS'.thisIndex'
p1545
I8
sg15
(lp1546
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1547
g16
(lp1548
S'd'
asg18
S'Y'
sS'.thisRepN'
p1549
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1550
I9
sS'.thisN'
p1551
I185
sS'.thisIndex'
p1552
I1
sg15
(lp1553
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1554
S'space'
p1555
asg95
I1
sa(dp1556
g16
(lp1557
S'k'
asg18
S'N'
sS'.thisRepN'
p1558
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1559
I10
sS'.thisN'
p1560
I186
sS'.thisIndex'
p1561
I5
sg15
(lp1562
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1563
g16
(lp1564
S'k'
asg18
S'Y'
sS'.thisRepN'
p1565
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1566
I0
sS'.thisN'
p1567
I187
sS'.thisIndex'
p1568
I5
sg15
(lp1569
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1570
S'space'
p1571
asg95
I5
sa(dp1572
g16
(lp1573
S'd'
asg18
S'N'
sS'.thisRepN'
p1574
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1575
I1
sS'.thisN'
p1576
I188
sS'.thisIndex'
p1577
I0
sg15
(lp1578
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1579
S'space'
p1580
asg95
I0
sa(dp1581
g16
(lp1582
S'd'
asg18
S'Y'
sS'.thisRepN'
p1583
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1584
I2
sS'.thisN'
p1585
I189
sS'.thisIndex'
p1586
I9
sg15
(lp1587
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1588
S'space'
p1589
asg95
I9
sa(dp1590
g16
(lp1591
S'k'
asg18
S'Y'
sS'.thisRepN'
p1592
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1593
I3
sS'.thisN'
p1594
I190
sS'.thisIndex'
p1595
I1
sg15
(lp1596
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1597
S'space'
p1598
asg95
I1
sa(dp1599
g16
(lp1600
S'k'
asg18
S'N'
sS'.thisRepN'
p1601
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1602
I4
sS'.thisN'
p1603
I191
sS'.thisIndex'
p1604
I10
sg15
(lp1605
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1606
g16
(lp1607
S'd'
asg18
S'N'
sS'.thisRepN'
p1608
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1609
I5
sS'.thisN'
p1610
I192
sS'.thisIndex'
p1611
I10
sg15
(lp1612
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1613
g16
(lp1614
S'k'
asg18
S'N'
sS'.thisRepN'
p1615
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1616
I6
sS'.thisN'
p1617
I193
sS'.thisIndex'
p1618
I4
sg15
(lp1619
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1620
g16
(lp1621
S'd'
asg18
S'N'
sS'.thisRepN'
p1622
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1623
I7
sS'.thisN'
p1624
I194
sS'.thisIndex'
p1625
I0
sg15
(lp1626
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1627
g16
(lp1628
S'k'
asg18
S'Y'
sS'.thisRepN'
p1629
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1630
I8
sS'.thisN'
p1631
I195
sS'.thisIndex'
p1632
I4
sg15
(lp1633
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1634
S'space'
p1635
asg95
I4
sa(dp1636
g16
(lp1637
S'k'
asg18
S'Y'
sS'.thisRepN'
p1638
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1639
I9
sS'.thisN'
p1640
I196
sS'.thisIndex'
p1641
I3
sg15
(lp1642
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1643
S'space'
p1644
asg95
I3
sa(dp1645
g16
(lp1646
S'k'
asg18
S'Y'
sS'.thisRepN'
p1647
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1648
I10
sS'.thisN'
p1649
I197
sS'.thisIndex'
p1650
I7
sg15
(lp1651
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1652
S'space'
p1653
asg95
I7
sa(dp1654
g16
(lp1655
S'k'
asg18
S'N'
sS'.thisRepN'
p1656
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1657
I0
sS'.thisN'
p1658
I198
sS'.thisIndex'
p1659
I9
sg15
(lp1660
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1661
g16
(lp1662
S'k'
asg18
S'Y'
sg22
I42
sS'.thisN'
p1663
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1664
I1
sS'.thisRepN'
p1665
I18
sg21
I44
sS'.thisIndex'
p1666
I5
sg23
I20
sg15
(lp1667
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1668
S'space'
p1669
asg95
I5
sa(dp1670
g16
(lp1671
S'k'
asg95
I8
sS'.thisRepN'
p1672
I18
sg30
VF
sg31
g32
sS'.thisTrialN'
p1673
I2
sS'.thisN'
p1674
I200
sS'.thisIndex'
p1675
I8
sg15
(lp1676
S'k'
asg17
S'Y'
sg14
I5
sa(dp1677
g16
(lp1678
S'd'
asg95
I5
sS'.thisRepN'
p1679
I18
sg30
VF
sg31
g32
sS'.thisTrialN'
p1680
I3
sS'.thisN'
p1681
I201
sS'.thisIndex'
p1682
I5
sg15
(lp1683
S'd'
asg17
S'Y'
sg14
I5
sa(dp1684
g16
(lp1685
S'k'
asg18
S'Y'
sS'.thisRepN'
p1686
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1687
I4
sS'.thisN'
p1688
I202
sS'.thisIndex'
p1689
I3
sg15
(lp1690
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1691
S'space'
p1692
asg95
I3
sa(dp1693
g16
(lp1694
S'k'
asg18
S'Y'
sS'.thisRepN'
p1695
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1696
I5
sS'.thisN'
p1697
I203
sS'.thisIndex'
p1698
I5
sg15
(lp1699
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1700
S'space'
p1701
asg95
I5
sa(dp1702
g16
(lp1703
S'k'
asg18
S'N'
sS'.thisRepN'
p1704
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1705
I6
sS'.thisN'
p1706
I204
sS'.thisIndex'
p1707
I3
sg15
(lp1708
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1709
g16
(lp1710
S'd'
asg18
S'Y'
sS'.thisRepN'
p1711
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1712
I7
sS'.thisN'
p1713
I205
sS'.thisIndex'
p1714
I8
sg15
(lp1715
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1716
S'space'
p1717
asg95
I8
sa(dp1718
g16
(lp1719
S'k'
asg18
S'N'
sS'.thisRepN'
p1720
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1721
I8
sS'.thisN'
p1722
I206
sS'.thisIndex'
p1723
I4
sg15
(lp1724
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I4
sa(dp1725
g16
(lp1726
S'd'
asg18
S'Y'
sS'.thisRepN'
p1727
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1728
I9
sS'.thisN'
p1729
I207
sS'.thisIndex'
p1730
I2
sg15
(lp1731
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1732
g16
(lp1733
S'd'
asg18
S'N'
sS'.thisRepN'
p1734
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1735
I10
sS'.thisN'
p1736
I208
sS'.thisIndex'
p1737
I4
sg15
(lp1738
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I4
sa(dp1739
g16
(lp1740
S'd'
asg18
S'N'
sS'.thisRepN'
p1741
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1742
I0
sS'.thisN'
p1743
I209
sS'.thisIndex'
p1744
I8
sg15
(lp1745
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1746
g16
(lp1747
S'k'
asg18
S'Y'
sS'.thisRepN'
p1748
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1749
I1
sS'.thisN'
p1750
I210
sS'.thisIndex'
p1751
I4
sg15
(lp1752
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1753
S'space'
p1754
asg95
I4
sa(dp1755
g16
(lp1756
S'k'
asg18
S'Y'
sS'.thisRepN'
p1757
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1758
I2
sS'.thisN'
p1759
I211
sS'.thisIndex'
p1760
I6
sg15
(lp1761
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1762
g16
(lp1763
S'd'
asg18
S'Y'
sS'.thisRepN'
p1764
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1765
I3
sS'.thisN'
p1766
I212
sS'.thisIndex'
p1767
I9
sg15
(lp1768
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1769
S'space'
p1770
asg95
I9
sa(dp1771
g16
(lp1772
S'd'
asg18
S'N'
sS'.thisRepN'
p1773
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1774
I4
sS'.thisN'
p1775
I213
sS'.thisIndex'
p1776
I10
sg15
(lp1777
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1778
g16
(lp1779
S'd'
asg18
S'Y'
sS'.thisRepN'
p1780
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1781
I5
sS'.thisN'
p1782
I214
sS'.thisIndex'
p1783
I7
sg15
(lp1784
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1785
g16
(lp1786
S'k'
asg18
S'N'
sS'.thisRepN'
p1787
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1788
I6
sS'.thisN'
p1789
I215
sS'.thisIndex'
p1790
I4
sg15
(lp1791
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1792
g16
(lp1793
S'k'
asg18
S'Y'
sS'.thisRepN'
p1794
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1795
I7
sS'.thisN'
p1796
I216
sS'.thisIndex'
p1797
I3
sg15
(lp1798
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1799
S'space'
p1800
asg95
I3
sa(dp1801
g16
(lp1802
S'd'
asg18
S'Y'
sS'.thisRepN'
p1803
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1804
I8
sS'.thisN'
p1805
I217
sS'.thisIndex'
p1806
I6
sg15
(lp1807
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I6
sa(dp1808
g16
(lp1809
S'd'
asg18
S'N'
sS'.thisRepN'
p1810
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1811
I9
sS'.thisN'
p1812
I218
sS'.thisIndex'
p1813
I7
sg15
(lp1814
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1815
g16
(lp1816
S'd'
asg18
S'N'
sS'.thisRepN'
p1817
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1818
I10
sS'.thisN'
p1819
I219
sS'.thisIndex'
p1820
I3
sg15
(lp1821
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1822
g16
(lp1823
S'd'
asg18
S'N'
sS'.thisRepN'
p1824
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1825
I0
sS'.thisN'
p1826
I220
sS'.thisIndex'
p1827
I4
sg15
(lp1828
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1829
g16
(lp1830
S'd'
asg18
S'Y'
sS'.thisRepN'
p1831
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1832
I1
sS'.thisN'
p1833
I221
sS'.thisIndex'
p1834
I7
sg15
(lp1835
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1836
S'space'
p1837
asg95
I7
sa(dp1838
g16
(lp1839
S'd'
asg18
S'N'
sS'.thisRepN'
p1840
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1841
I2
sS'.thisN'
p1842
I222
sS'.thisIndex'
p1843
I0
sg15
(lp1844
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1845
g16
(lp1846
S'd'
asg18
S'N'
sS'.thisRepN'
p1847
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1848
I3
sS'.thisN'
p1849
I223
sS'.thisIndex'
p1850
I8
sg15
(lp1851
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1852
g16
(lp1853
S'k'
asg18
S'N'
sS'.thisRepN'
p1854
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1855
I4
sS'.thisN'
p1856
I224
sS'.thisIndex'
p1857
I1
sg15
(lp1858
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1859
g16
(lp1860
S'd'
asg18
S'N'
sS'.thisRepN'
p1861
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1862
I5
sS'.thisN'
p1863
I225
sS'.thisIndex'
p1864
I10
sg15
(lp1865
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1866
g16
(lp1867
S'k'
asg18
S'Y'
sS'.thisRepN'
p1868
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1869
I6
sS'.thisN'
p1870
I226
sS'.thisIndex'
p1871
I3
sg15
(lp1872
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1873
S'k'
asg95
I3
sa(dp1874
g16
(lp1875
S'k'
asg18
S'N'
sS'.thisRepN'
p1876
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1877
I7
sS'.thisN'
p1878
I227
sS'.thisIndex'
p1879
I10
sg15
(lp1880
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1881
g16
(lp1882
S'k'
asg18
S'N'
sS'.thisRepN'
p1883
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1884
I8
sS'.thisN'
p1885
I228
sS'.thisIndex'
p1886
I3
sg15
(lp1887
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1888
g16
(lp1889
S'k'
asg18
S'Y'
sS'.thisRepN'
p1890
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1891
I9
sS'.thisN'
p1892
I229
sS'.thisIndex'
p1893
I2
sg15
(lp1894
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1895
S'space'
p1896
asg95
I2
sa(dp1897
g16
(lp1898
S'k'
asg18
S'N'
sS'.thisRepN'
p1899
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1900
I10
sS'.thisN'
p1901
I230
sS'.thisIndex'
p1902
I9
sg15
(lp1903
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1904
g16
(lp1905
S'd'
asg18
S'N'
sS'.thisRepN'
p1906
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1907
I0
sS'.thisN'
p1908
I231
sS'.thisIndex'
p1909
I7
sg15
(lp1910
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I7
sa(dp1911
g16
(lp1912
S'd'
asg18
S'Y'
sS'.thisRepN'
p1913
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1914
I1
sS'.thisN'
p1915
I232
sS'.thisIndex'
p1916
I0
sg15
(lp1917
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1918
S'space'
p1919
asg95
I0
sa(dp1920
g16
(lp1921
S'k'
asg18
S'N'
sS'.thisRepN'
p1922
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1923
I2
sS'.thisN'
p1924
I233
sS'.thisIndex'
p1925
I10
sg15
(lp1926
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1927
g16
(lp1928
S'k'
asg18
S'N'
sS'.thisRepN'
p1929
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1930
I3
sS'.thisN'
p1931
I234
sS'.thisIndex'
p1932
I10
sg15
(lp1933
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1934
S'space'
p1935
asg95
I10
sa(dp1936
g16
(lp1937
S'd'
asg18
S'Y'
sS'.thisRepN'
p1938
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1939
I4
sS'.thisN'
p1940
I235
sS'.thisIndex'
p1941
I5
sg15
(lp1942
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1943
S'space'
p1944
asg95
I5
sa(dp1945
g16
(lp1946
S'k'
asg18
S'Y'
sS'.thisRepN'
p1947
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1948
I5
sS'.thisN'
p1949
I236
sS'.thisIndex'
p1950
I1
sg15
(lp1951
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1952
S'space'
p1953
asg95
I1
sa(dp1954
g16
(lp1955
S'd'
asg18
S'Y'
sS'.thisRepN'
p1956
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1957
I6
sS'.thisN'
p1958
I237
sS'.thisIndex'
p1959
I8
sg15
(lp1960
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1961
S'space'
p1962
asg95
I8
sa(dp1963
g16
(lp1964
S'd'
asg18
S'N'
sS'.thisRepN'
p1965
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1966
I7
sS'.thisN'
p1967
I238
sS'.thisIndex'
p1968
I6
sg15
(lp1969
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I6
sa(dp1970
g16
(lp1971
S'k'
asg18
S'Y'
sS'.thisRepN'
p1972
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1973
I8
sS'.thisN'
p1974
I239
sS'.thisIndex'
p1975
I9
sg15
(lp1976
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1977
S'space'
p1978
asg95
I9
sa(dp1979
g16
(lp1980
S'k'
asg18
S'Y'
sS'.thisRepN'
p1981
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1982
I9
sS'.thisN'
p1983
I240
sS'.thisIndex'
p1984
I4
sg15
(lp1985
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1986
S'space'
p1987
asg95
I4
sa(dp1988
g16
(lp1989
S'd'
asg18
S'N'
sS'.thisRepN'
p1990
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1991
I10
sS'.thisN'
p1992
I241
sS'.thisIndex'
p1993
I0
sg15
(lp1994
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1995
g16
(lp1996
S'd'
asg18
S'N'
sS'.thisRepN'
p1997
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1998
I0
sS'.thisN'
p1999
I242
sS'.thisIndex'
p2000
I4
sg15
(lp2001
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp2002
g16
(lp2003
S'k'
asg18
S'N'
sS'.thisRepN'
p2004
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2005
I1
sS'.thisN'
p2006
I243
sS'.thisIndex'
p2007
I8
sg15
(lp2008
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp2009
g16
(lp2010
S'd'
asg18
S'N'
sS'.thisRepN'
p2011
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2012
I2
sS'.thisN'
p2013
I244
sS'.thisIndex'
p2014
I2
sg15
(lp2015
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp2016
g16
(lp2017
S'd'
asg18
S'Y'
sS'.thisRepN'
p2018
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2019
I3
sS'.thisN'
p2020
I245
sS'.thisIndex'
p2021
I2
sg15
(lp2022
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp2023
g16
(lp2024
S'k'
asg18
S'Y'
sS'.thisRepN'
p2025
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2026
I4
sS'.thisN'
p2027
I246
sS'.thisIndex'
p2028
I3
sg15
(lp2029
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2030
S'space'
p2031
asg95
I3
sa(dp2032
g16
(lp2033
S'd'
asg18
S'Y'
sS'.thisRepN'
p2034
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2035
I5
sS'.thisN'
p2036
I247
sS'.thisIndex'
p2037
I9
sg15
(lp2038
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp2039
S'space'
p2040
asg95
I9
sa(dp2041
g16
(lp2042
S'd'
asg18
S'Y'
sS'.thisRepN'
p2043
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2044
I6
sS'.thisN'
p2045
I248
sS'.thisIndex'
p2046
I1
sg15
(lp2047
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2048
S'space'
p2049
asg95
I1
sa(dp2050
g16
(lp2051
S'k'
asg18
S'N'
sg22
I41
sS'.thisN'
p2052
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2053
I7
sS'.thisRepN'
p2054
I22
sg21
I40
sS'.thisIndex'
p2055
I10
sg23
I23
sg15
(lp2056
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp2057
g16
(lp2058
S'd'
asg95
I6
sS'.thisRepN'
p2059
I22
sg30
VF
sg31
g32
sS'.thisTrialN'
p2060
I8
sS'.thisN'
p2061
I250
sS'.thisIndex'
p2062
I6
sg15
(lp2063
S'd'
asg17
S'Y'
sg14
I6
sa(dp2064
g16
(lp2065
S'd'
asg95
I6
sS'.thisRepN'
p2066
I22
sg30
VF
sg31
g32
sS'.thisTrialN'
p2067
I9
sS'.thisN'
p2068
I251
sS'.thisIndex'
p2069
I6
sg15
(lp2070
S'd'
asg17
S'Y'
sg14
I6
sa(dp2071
g16
(lp2072
S'd'
asg18
S'Y'
sS'.thisRepN'
p2073
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2074
I10
sS'.thisN'
p2075
I252
sS'.thisIndex'
p2076
I8
sg15
(lp2077
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2078
S'space'
p2079
asg95
I8
sa(dp2080
g16
(lp2081
S'd'
asg18
S'Y'
sS'.thisRepN'
p2082
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2083
I0
sS'.thisN'
p2084
I253
sS'.thisIndex'
p2085
I0
sg15
(lp2086
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2087
g16
(lp2088
S'k'
asg18
S'Y'
sS'.thisRepN'
p2089
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2090
I1
sS'.thisN'
p2091
I254
sS'.thisIndex'
p2092
I10
sg15
(lp2093
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2094
S'space'
p2095
asg95
I10
sa(dp2096
g16
(lp2097
S'd'
asg18
S'Y'
sS'.thisRepN'
p2098
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2099
I2
sS'.thisN'
p2100
I255
sS'.thisIndex'
p2101
I6
sg15
(lp2102
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2103
S'space'
p2104
asg95
I6
sa(dp2105
g16
(lp2106
S'k'
asg18
S'N'
sS'.thisRepN'
p2107
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2108
I3
sS'.thisN'
p2109
I256
sS'.thisIndex'
p2110
I7
sg15
(lp2111
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2112
g16
(lp2113
S'd'
asg18
S'N'
sS'.thisRepN'
p2114
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2115
I4
sS'.thisN'
p2116
I257
sS'.thisIndex'
p2117
I0
sg15
(lp2118
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2119
g16
(lp2120
S'd'
asg18
S'Y'
sS'.thisRepN'
p2121
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2122
I5
sS'.thisN'
p2123
I258
sS'.thisIndex'
p2124
I9
sg15
(lp2125
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2126
S'space'
p2127
asg95
I9
sa(dp2128
g16
(lp2129
S'k'
asg18
S'N'
sS'.thisRepN'
p2130
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2131
I6
sS'.thisN'
p2132
I259
sS'.thisIndex'
p2133
I4
sg15
(lp2134
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2135
g16
(lp2136
S'k'
asg18
S'Y'
sS'.thisRepN'
p2137
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2138
I7
sS'.thisN'
p2139
I260
sS'.thisIndex'
p2140
I7
sg15
(lp2141
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2142
S'space'
p2143
asg95
I7
sa(dp2144
g16
(lp2145
S'd'
asg18
S'N'
sS'.thisRepN'
p2146
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2147
I8
sS'.thisN'
p2148
I261
sS'.thisIndex'
p2149
I10
sg15
(lp2150
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2151
g16
(lp2152
S'd'
asg18
S'Y'
sS'.thisRepN'
p2153
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2154
I9
sS'.thisN'
p2155
I262
sS'.thisIndex'
p2156
I5
sg15
(lp2157
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2158
S'space'
p2159
asg95
I5
sa(dp2160
g16
(lp2161
S'd'
asg18
S'Y'
sS'.thisRepN'
p2162
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2163
I10
sS'.thisN'
p2164
I263
sS'.thisIndex'
p2165
I4
sg15
(lp2166
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2167
g16
(lp2168
S'k'
asg18
S'N'
sS'.thisRepN'
p2169
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2170
I0
sS'.thisN'
p2171
I264
sS'.thisIndex'
p2172
I6
sg15
(lp2173
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2174
g16
(lp2175
S'd'
asg18
S'N'
sS'.thisRepN'
p2176
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2177
I1
sS'.thisN'
p2178
I265
sS'.thisIndex'
p2179
I0
sg15
(lp2180
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2181
g16
(lp2182
S'd'
asg18
S'Y'
sS'.thisRepN'
p2183
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2184
I2
sS'.thisN'
p2185
I266
sS'.thisIndex'
p2186
I8
sg15
(lp2187
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2188
S'space'
p2189
asg95
I8
sa(dp2190
g16
(lp2191
S'd'
asg18
S'N'
sS'.thisRepN'
p2192
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2193
I3
sS'.thisN'
p2194
I267
sS'.thisIndex'
p2195
I0
sg15
(lp2196
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2197
g16
(lp2198
S'd'
asg18
S'Y'
sS'.thisRepN'
p2199
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2200
I4
sS'.thisN'
p2201
I268
sS'.thisIndex'
p2202
I8
sg15
(lp2203
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2204
g16
(lp2205
S'd'
asg18
S'N'
sS'.thisRepN'
p2206
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2207
I5
sS'.thisN'
p2208
I269
sS'.thisIndex'
p2209
I3
sg15
(lp2210
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2211
g16
(lp2212
S'd'
asg18
S'Y'
sS'.thisRepN'
p2213
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2214
I6
sS'.thisN'
p2215
I270
sS'.thisIndex'
p2216
I8
sg15
(lp2217
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2218
S'space'
p2219
asg95
I8
sa(dp2220
g16
(lp2221
S'd'
asg18
S'Y'
sS'.thisRepN'
p2222
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2223
I7
sS'.thisN'
p2224
I271
sS'.thisIndex'
p2225
I7
sg15
(lp2226
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2227
S'space'
p2228
asg95
I7
sa(dp2229
g16
(lp2230
S'k'
asg18
S'Y'
sS'.thisRepN'
p2231
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2232
I8
sS'.thisN'
p2233
I272
sS'.thisIndex'
p2234
I4
sg15
(lp2235
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2236
S'space'
p2237
asg95
I4
sa(dp2238
g16
(lp2239
S'k'
asg18
S'Y'
sS'.thisRepN'
p2240
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2241
I9
sS'.thisN'
p2242
I273
sS'.thisIndex'
p2243
I2
sg15
(lp2244
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2245
S'space'
p2246
asg95
I2
sa(dp2247
g16
(lp2248
S'k'
asg18
S'N'
sS'.thisRepN'
p2249
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2250
I10
sS'.thisN'
p2251
I274
sS'.thisIndex'
p2252
I6
sg15
(lp2253
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2254
g16
(lp2255
S'd'
asg18
S'N'
sS'.thisRepN'
p2256
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2257
I0
sS'.thisN'
p2258
I275
sS'.thisIndex'
p2259
I0
sg15
(lp2260
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2261
g16
(lp2262
S'k'
asg18
S'Y'
sS'.thisRepN'
p2263
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2264
I1
sS'.thisN'
p2265
I276
sS'.thisIndex'
p2266
I7
sg15
(lp2267
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2268
S'space'
p2269
asg95
I7
sa(dp2270
g16
(lp2271
S'k'
asg18
S'N'
sS'.thisRepN'
p2272
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2273
I2
sS'.thisN'
p2274
I277
sS'.thisIndex'
p2275
I6
sg15
(lp2276
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2277
g16
(lp2278
S'd'
asg18
S'N'
sS'.thisRepN'
p2279
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2280
I3
sS'.thisN'
p2281
I278
sS'.thisIndex'
p2282
I5
sg15
(lp2283
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2284
g16
(lp2285
S'd'
asg18
S'Y'
sS'.thisRepN'
p2286
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2287
I4
sS'.thisN'
p2288
I279
sS'.thisIndex'
p2289
I3
sg15
(lp2290
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2291
S'space'
p2292
asg95
I3
sa(dp2293
g16
(lp2294
S'k'
asg18
S'Y'
sS'.thisRepN'
p2295
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2296
I5
sS'.thisN'
p2297
I280
sS'.thisIndex'
p2298
I1
sg15
(lp2299
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2300
S'space'
p2301
asg95
I1
sa(dp2302
g16
(lp2303
S'd'
asg18
S'Y'
sS'.thisRepN'
p2304
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2305
I6
sS'.thisN'
p2306
I281
sS'.thisIndex'
p2307
I0
sg15
(lp2308
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2309
S'space'
p2310
asg95
I0
sa(dp2311
g16
(lp2312
S'k'
asg18
S'N'
sS'.thisRepN'
p2313
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2314
I7
sS'.thisN'
p2315
I282
sS'.thisIndex'
p2316
I2
sg15
(lp2317
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2318
g16
(lp2319
S'k'
asg18
S'N'
sS'.thisRepN'
p2320
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2321
I8
sS'.thisN'
p2322
I283
sS'.thisIndex'
p2323
I2
sg15
(lp2324
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2325
g16
(lp2326
S'd'
asg18
S'Y'
sS'.thisRepN'
p2327
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2328
I9
sS'.thisN'
p2329
I284
sS'.thisIndex'
p2330
I8
sg15
(lp2331
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2332
S'space'
p2333
asg95
I8
sa(dp2334
g16
(lp2335
S'k'
asg18
S'N'
sS'.thisRepN'
p2336
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2337
I10
sS'.thisN'
p2338
I285
sS'.thisIndex'
p2339
I8
sg15
(lp2340
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2341
g16
(lp2342
S'd'
asg18
S'N'
sS'.thisRepN'
p2343
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2344
I0
sS'.thisN'
p2345
I286
sS'.thisIndex'
p2346
I7
sg15
(lp2347
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I7
sa(dp2348
g16
(lp2349
S'd'
asg18
S'Y'
sS'.thisRepN'
p2350
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2351
I1
sS'.thisN'
p2352
I287
sS'.thisIndex'
p2353
I3
sg15
(lp2354
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2355
S'space'
p2356
asg95
I3
sa(dp2357
g16
(lp2358
S'k'
asg18
S'N'
sS'.thisRepN'
p2359
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2360
I2
sS'.thisN'
p2361
I288
sS'.thisIndex'
p2362
I8
sg15
(lp2363
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2364
g16
(lp2365
S'd'
asg18
S'Y'
sS'.thisRepN'
p2366
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2367
I3
sS'.thisN'
p2368
I289
sS'.thisIndex'
p2369
I2
sg15
(lp2370
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2371
S'space'
p2372
asg95
I2
sa(dp2373
g16
(lp2374
S'd'
asg18
S'Y'
sS'.thisRepN'
p2375
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2376
I4
sS'.thisN'
p2377
I290
sS'.thisIndex'
p2378
I7
sg15
(lp2379
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2380
S'space'
p2381
asg95
I7
sa(dp2382
g16
(lp2383
S'd'
asg18
S'N'
sS'.thisRepN'
p2384
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2385
I5
sS'.thisN'
p2386
I291
sS'.thisIndex'
p2387
I3
sg15
(lp2388
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2389
g16
(lp2390
S'k'
asg18
S'Y'
sS'.thisRepN'
p2391
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2392
I6
sS'.thisN'
p2393
I292
sS'.thisIndex'
p2394
I3
sg15
(lp2395
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2396
S'space'
p2397
asg95
I3
sa(dp2398
g16
(lp2399
S'k'
asg18
S'N'
sS'.thisRepN'
p2400
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2401
I7
sS'.thisN'
p2402
I293
sS'.thisIndex'
p2403
I6
sg15
(lp2404
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2405
g16
(lp2406
S'k'
asg18
S'N'
sS'.thisRepN'
p2407
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2408
I8
sS'.thisN'
p2409
I294
sS'.thisIndex'
p2410
I7
sg15
(lp2411
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2412
g16
(lp2413
S'd'
asg18
S'N'
sS'.thisRepN'
p2414
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2415
I9
sS'.thisN'
p2416
I295
sS'.thisIndex'
p2417
I9
sg15
(lp2418
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2419
g16
(lp2420
S'd'
asg18
S'Y'
sS'.thisRepN'
p2421
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2422
I10
sS'.thisN'
p2423
I296
sS'.thisIndex'
p2424
I1
sg15
(lp2425
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2426
S'space'
p2427
asg95
I1
sa(dp2428
g16
(lp2429
S'k'
asg18
S'Y'
sS'.thisRepN'
p2430
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2431
I0
sS'.thisN'
p2432
I297
sS'.thisIndex'
p2433
I3
sg15
(lp2434
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2435
S'space'
p2436
asg95
I3
sa(dp2437
g16
(lp2438
S'd'
asg18
S'N'
sS'.thisRepN'
p2439
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2440
I1
sS'.thisN'
p2441
I298
sS'.thisIndex'
p2442
I4
sg15
(lp2443
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2444
g16
(lp2445
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p2446
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2447
I2
sS'.thisRepN'
p2448
I27
sg21
I42
sS'.thisIndex'
p2449
I0
sg23
I25
sg15
(lp2450
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I0
sa(dp2451
g16
(lp2452
S'd'
asg95
I2
sS'.thisRepN'
p2453
I27
sg30
VF
sg31
g32
sS'.thisTrialN'
p2454
I3
sS'.thisN'
p2455
I300
sS'.thisIndex'
p2456
I2
sg15
(lp2457
S'k'
asg17
S'N'
sg14
I7
sa(dp2458
g16
(lp2459
S'd'
asg95
I8
sS'.thisRepN'
p2460
I27
sg30
VF
sg31
g32
sS'.thisTrialN'
p2461
I4
sS'.thisN'
p2462
I301
sS'.thisIndex'
p2463
I8
sg15
(lp2464
S'd'
asg17
S'Y'
sg14
I7
sa(dp2465
g16
(lp2466
S'k'
asg18
S'Y'
sS'.thisRepN'
p2467
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2468
I5
sS'.thisN'
p2469
I302
sS'.thisIndex'
p2470
I9
sg15
(lp2471
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2472
S'space'
p2473
asg95
I9
sa(dp2474
g16
(lp2475
S'k'
asg18
S'Y'
sS'.thisRepN'
p2476
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2477
I6
sS'.thisN'
p2478
I303
sS'.thisIndex'
p2479
I5
sg15
(lp2480
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2481
S'space'
p2482
asg95
I5
sa(dp2483
g16
(lp2484
S'k'
asg18
S'N'
sS'.thisRepN'
p2485
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2486
I7
sS'.thisN'
p2487
I304
sS'.thisIndex'
p2488
I0
sg15
(lp2489
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2490
g16
(lp2491
S'd'
asg18
S'N'
sS'.thisRepN'
p2492
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2493
I8
sS'.thisN'
p2494
I305
sS'.thisIndex'
p2495
I3
sg15
(lp2496
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2497
g16
(lp2498
S'd'
asg18
S'Y'
sS'.thisRepN'
p2499
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2500
I9
sS'.thisN'
p2501
I306
sS'.thisIndex'
p2502
I6
sg15
(lp2503
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2504
S'space'
p2505
asg95
I6
sa(dp2506
g16
(lp2507
S'd'
asg18
S'N'
sS'.thisRepN'
p2508
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2509
I10
sS'.thisN'
p2510
I307
sS'.thisIndex'
p2511
I2
sg15
(lp2512
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2513
g16
(lp2514
S'd'
asg18
S'Y'
sS'.thisRepN'
p2515
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2516
I0
sS'.thisN'
p2517
I308
sS'.thisIndex'
p2518
I2
sg15
(lp2519
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2520
S'space'
p2521
asg95
I2
sa(dp2522
g16
(lp2523
S'd'
asg18
S'N'
sS'.thisRepN'
p2524
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2525
I1
sS'.thisN'
p2526
I309
sS'.thisIndex'
p2527
I5
sg15
(lp2528
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I5
sa(dp2529
g16
(lp2530
S'k'
asg18
S'Y'
sS'.thisRepN'
p2531
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2532
I2
sS'.thisN'
p2533
I310
sS'.thisIndex'
p2534
I8
sg15
(lp2535
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2536
S'space'
p2537
asg95
I8
sa(dp2538
g16
(lp2539
S'd'
asg18
S'Y'
sS'.thisRepN'
p2540
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2541
I3
sS'.thisN'
p2542
I311
sS'.thisIndex'
p2543
I0
sg15
(lp2544
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2545
g16
(lp2546
S'k'
asg18
S'Y'
sS'.thisRepN'
p2547
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2548
I4
sS'.thisN'
p2549
I312
sS'.thisIndex'
p2550
I0
sg15
(lp2551
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2552
S'space'
p2553
asg95
I0
sa(dp2554
g16
(lp2555
S'k'
asg18
S'N'
sS'.thisRepN'
p2556
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2557
I5
sS'.thisN'
p2558
I313
sS'.thisIndex'
p2559
I6
sg15
(lp2560
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I6
sa(dp2561
g16
(lp2562
S'd'
asg18
S'Y'
sS'.thisRepN'
p2563
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2564
I6
sS'.thisN'
p2565
I314
sS'.thisIndex'
p2566
I0
sg15
(lp2567
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2568
S'space'
p2569
asg95
I0
sa(dp2570
g16
(lp2571
S'd'
asg18
S'N'
sS'.thisRepN'
p2572
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2573
I7
sS'.thisN'
p2574
I315
sS'.thisIndex'
p2575
I1
sg15
(lp2576
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2577
g16
(lp2578
S'k'
asg18
S'Y'
sS'.thisRepN'
p2579
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2580
I8
sS'.thisN'
p2581
I316
sS'.thisIndex'
p2582
I1
sg15
(lp2583
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2584
S'space'
p2585
asg95
I1
sa(dp2586
g16
(lp2587
S'd'
asg18
S'N'
sS'.thisRepN'
p2588
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2589
I9
sS'.thisN'
p2590
I317
sS'.thisIndex'
p2591
I1
sg15
(lp2592
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2593
g16
(lp2594
S'k'
asg18
S'N'
sS'.thisRepN'
p2595
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2596
I10
sS'.thisN'
p2597
I318
sS'.thisIndex'
p2598
I4
sg15
(lp2599
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2600
g16
(lp2601
S'd'
asg18
S'N'
sS'.thisRepN'
p2602
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2603
I0
sS'.thisN'
p2604
I319
sS'.thisIndex'
p2605
I2
sg15
(lp2606
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2607
g16
(lp2608
S'k'
asg18
S'Y'
sS'.thisRepN'
p2609
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2610
I1
sS'.thisN'
p2611
I320
sS'.thisIndex'
p2612
I2
sg15
(lp2613
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2614
S'space'
p2615
asg95
I2
sa(dp2616
g16
(lp2617
S'k'
asg18
S'N'
sS'.thisRepN'
p2618
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2619
I2
sS'.thisN'
p2620
I321
sS'.thisIndex'
p2621
I8
sg15
(lp2622
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2623
g16
(lp2624
S'k'
asg18
S'Y'
sS'.thisRepN'
p2625
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2626
I3
sS'.thisN'
p2627
I322
sS'.thisIndex'
p2628
I10
sg15
(lp2629
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2630
S'space'
p2631
asg95
I10
sa(dp2632
g16
(lp2633
S'd'
asg18
S'Y'
sS'.thisRepN'
p2634
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2635
I4
sS'.thisN'
p2636
I323
sS'.thisIndex'
p2637
I7
sg15
(lp2638
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2639
g16
(lp2640
S'k'
asg18
S'N'
sS'.thisRepN'
p2641
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2642
I5
sS'.thisN'
p2643
I324
sS'.thisIndex'
p2644
I4
sg15
(lp2645
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2646
g16
(lp2647
S'd'
asg18
S'Y'
sS'.thisRepN'
p2648
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2649
I6
sS'.thisN'
p2650
I325
sS'.thisIndex'
p2651
I5
sg15
(lp2652
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2653
S'space'
p2654
asg95
I5
sa(dp2655
g16
(lp2656
S'd'
asg18
S'N'
sS'.thisRepN'
p2657
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2658
I7
sS'.thisN'
p2659
I326
sS'.thisIndex'
p2660
I9
sg15
(lp2661
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I9
sa(dp2662
g16
(lp2663
S'k'
asg18
S'Y'
sS'.thisRepN'
p2664
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2665
I8
sS'.thisN'
p2666
I327
sS'.thisIndex'
p2667
I2
sg15
(lp2668
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2669
S'space'
p2670
asg95
I2
sa(dp2671
g16
(lp2672
S'd'
asg18
S'N'
sS'.thisRepN'
p2673
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2674
I9
sS'.thisN'
p2675
I328
sS'.thisIndex'
p2676
I10
sg15
(lp2677
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2678
g16
(lp2679
S'k'
asg18
S'Y'
sS'.thisRepN'
p2680
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2681
I10
sS'.thisN'
p2682
I329
sS'.thisIndex'
p2683
I1
sg15
(lp2684
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2685
S'space'
p2686
asg95
I1
sa(dp2687
g16
(lp2688
S'k'
asg18
S'Y'
sS'.thisRepN'
p2689
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2690
I0
sS'.thisN'
p2691
I330
sS'.thisIndex'
p2692
I4
sg15
(lp2693
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2694
S'space'
p2695
asg95
I4
sa(dp2696
g16
(lp2697
S'k'
asg18
S'N'
sS'.thisRepN'
p2698
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2699
I1
sS'.thisN'
p2700
I331
sS'.thisIndex'
p2701
I3
sg15
(lp2702
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2703
g16
(lp2704
S'k'
asg18
S'N'
sS'.thisRepN'
p2705
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2706
I2
sS'.thisN'
p2707
I332
sS'.thisIndex'
p2708
I3
sg15
(lp2709
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2710
S'k'
asg95
I3
sa(dp2711
g16
(lp2712
S'k'
asg18
S'N'
sS'.thisRepN'
p2713
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2714
I3
sS'.thisN'
p2715
I333
sS'.thisIndex'
p2716
I2
sg15
(lp2717
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2718
S'space'
p2719
asg95
I2
sa(dp2720
g16
(lp2721
S'k'
asg18
S'N'
sS'.thisRepN'
p2722
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2723
I4
sS'.thisN'
p2724
I334
sS'.thisIndex'
p2725
I4
sg15
(lp2726
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I4
sa(dp2727
g16
(lp2728
S'd'
asg18
S'Y'
sS'.thisRepN'
p2729
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2730
I5
sS'.thisN'
p2731
I335
sS'.thisIndex'
p2732
I1
sg15
(lp2733
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2734
S'space'
p2735
asg95
I1
sa(dp2736
g16
(lp2737
S'k'
asg18
S'Y'
sS'.thisRepN'
p2738
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2739
I6
sS'.thisN'
p2740
I336
sS'.thisIndex'
p2741
I10
sg15
(lp2742
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2743
S'space'
p2744
asg95
I10
sa(dp2745
g16
(lp2746
S'k'
asg18
S'Y'
sS'.thisRepN'
p2747
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2748
I7
sS'.thisN'
p2749
I337
sS'.thisIndex'
p2750
I1
sg15
(lp2751
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2752
S'space'
p2753
asg95
I1
sa(dp2754
g16
(lp2755
S'k'
asg18
S'Y'
sS'.thisRepN'
p2756
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2757
I8
sS'.thisN'
p2758
I338
sS'.thisIndex'
p2759
I2
sg15
(lp2760
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2761
S'space'
p2762
asg95
I2
sa(dp2763
g16
(lp2764
S'd'
asg18
S'N'
sS'.thisRepN'
p2765
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2766
I9
sS'.thisN'
p2767
I339
sS'.thisIndex'
p2768
I7
sg15
(lp2769
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2770
g16
(lp2771
S'k'
asg18
S'Y'
sS'.thisRepN'
p2772
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2773
I10
sS'.thisN'
p2774
I340
sS'.thisIndex'
p2775
I4
sg15
(lp2776
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2777
g16
(lp2778
S'd'
asg18
S'N'
sS'.thisRepN'
p2779
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2780
I0
sS'.thisN'
p2781
I341
sS'.thisIndex'
p2782
I6
sg15
(lp2783
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2784
g16
(lp2785
S'd'
asg18
S'Y'
sS'.thisRepN'
p2786
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2787
I1
sS'.thisN'
p2788
I342
sS'.thisIndex'
p2789
I1
sg15
(lp2790
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2791
S'space'
p2792
asg95
I1
sa(dp2793
g16
(lp2794
S'd'
asg18
S'Y'
sS'.thisRepN'
p2795
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2796
I2
sS'.thisN'
p2797
I343
sS'.thisIndex'
p2798
I2
sg15
(lp2799
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2800
g16
(lp2801
S'k'
asg18
S'N'
sS'.thisRepN'
p2802
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2803
I3
sS'.thisN'
p2804
I344
sS'.thisIndex'
p2805
I1
sg15
(lp2806
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2807
S'space'
p2808
asg95
I1
sa(dp2809
g16
(lp2810
S'd'
asg18
S'N'
sS'.thisRepN'
p2811
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2812
I4
sS'.thisN'
p2813
I345
sS'.thisIndex'
p2814
I5
sg15
(lp2815
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2816
g16
(lp2817
S'd'
asg18
S'Y'
sS'.thisRepN'
p2818
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2819
I5
sS'.thisN'
p2820
I346
sS'.thisIndex'
p2821
I3
sg15
(lp2822
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2823
S'space'
p2824
asg95
I3
sa(dp2825
g16
(lp2826
S'k'
asg18
S'Y'
sS'.thisRepN'
p2827
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2828
I6
sS'.thisN'
p2829
I347
sS'.thisIndex'
p2830
I10
sg15
(lp2831
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2832
S'space'
p2833
asg95
I10
sa(dp2834
g16
(lp2835
S'd'
asg18
S'N'
sS'.thisRepN'
p2836
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2837
I7
sS'.thisN'
p2838
I348
sS'.thisIndex'
p2839
I2
sg15
(lp2840
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2841
g16
(lp2842
S'd'
asg18
S'N'
sg22
I41
sS'.thisN'
p2843
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2844
I8
sS'.thisRepN'
p2845
I31
sg21
I40
sS'.thisIndex'
p2846
I4
sg23
I25
sg15
(lp2847
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2848
g16
(lp2849
S'd'
asg95
I1
sS'.thisRepN'
p2850
I31
sg30
VF
sg31
g32
sS'.thisTrialN'
p2851
I9
sS'.thisN'
p2852
I350
sS'.thisIndex'
p2853
I1
sg15
(lp2854
S'd'
asg17
S'Y'
sg14
I8
sa(dp2855
g16
(lp2856
S'k'
asg95
I3
sS'.thisRepN'
p2857
I31
sg30
VF
sg31
g32
sS'.thisTrialN'
p2858
I10
sS'.thisN'
p2859
I351
sS'.thisIndex'
p2860
I3
sg15
(lp2861
S'd'
asg17
S'N'
sg14
I8
sa(dp2862
g16
(lp2863
S'k'
asg18
S'Y'
sS'.thisRepN'
p2864
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2865
I0
sS'.thisN'
p2866
I352
sS'.thisIndex'
p2867
I7
sg15
(lp2868
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2869
g16
(lp2870
S'k'
asg18
S'N'
sS'.thisRepN'
p2871
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2872
I1
sS'.thisN'
p2873
I353
sS'.thisIndex'
p2874
I3
sg15
(lp2875
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I3
sa(dp2876
g16
(lp2877
S'k'
asg18
S'N'
sS'.thisRepN'
p2878
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2879
I2
sS'.thisN'
p2880
I354
sS'.thisIndex'
p2881
I7
sg15
(lp2882
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2883
g16
(lp2884
S'k'
asg18
S'Y'
sS'.thisRepN'
p2885
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2886
I3
sS'.thisN'
p2887
I355
sS'.thisIndex'
p2888
I7
sg15
(lp2889
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2890
g16
(lp2891
S'd'
asg18
S'Y'
sS'.thisRepN'
p2892
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2893
I4
sS'.thisN'
p2894
I356
sS'.thisIndex'
p2895
I4
sg15
(lp2896
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2897
S'space'
p2898
asg95
I4
sa(dp2899
g16
(lp2900
S'k'
asg18
S'N'
sS'.thisRepN'
p2901
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2902
I5
sS'.thisN'
p2903
I357
sS'.thisIndex'
p2904
I6
sg15
(lp2905
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2906
g16
(lp2907
S'd'
asg18
S'N'
sS'.thisRepN'
p2908
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2909
I6
sS'.thisN'
p2910
I358
sS'.thisIndex'
p2911
I7
sg15
(lp2912
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2913
g16
(lp2914
S'k'
asg18
S'N'
sS'.thisRepN'
p2915
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2916
I7
sS'.thisN'
p2917
I359
sS'.thisIndex'
p2918
I0
sg15
(lp2919
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2920
g16
(lp2921
S'k'
asg18
S'Y'
sS'.thisRepN'
p2922
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2923
I8
sS'.thisN'
p2924
I360
sS'.thisIndex'
p2925
I4
sg15
(lp2926
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2927
S'space'
p2928
asg95
I4
sa(dp2929
g16
(lp2930
S'k'
asg18
S'Y'
sS'.thisRepN'
p2931
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2932
I9
sS'.thisN'
p2933
I361
sS'.thisIndex'
p2934
I1
sg15
(lp2935
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2936
S'space'
p2937
asg95
I1
sa(dp2938
g16
(lp2939
S'd'
asg18
S'N'
sS'.thisRepN'
p2940
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2941
I10
sS'.thisN'
p2942
I362
sS'.thisIndex'
p2943
I8
sg15
(lp2944
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2945
g16
(lp2946
S'k'
asg18
S'Y'
sS'.thisRepN'
p2947
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2948
I0
sS'.thisN'
p2949
I363
sS'.thisIndex'
p2950
I2
sg15
(lp2951
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2952
g16
(lp2953
S'k'
asg18
S'Y'
sS'.thisRepN'
p2954
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2955
I1
sS'.thisN'
p2956
I364
sS'.thisIndex'
p2957
I6
sg15
(lp2958
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2959
g16
(lp2960
S'k'
asg18
S'Y'
sS'.thisRepN'
p2961
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2962
I2
sS'.thisN'
p2963
I365
sS'.thisIndex'
p2964
I10
sg15
(lp2965
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2966
S'd'
asg95
I10
sa(dp2967
g16
(lp2968
S'd'
asg18
S'Y'
sS'.thisRepN'
p2969
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2970
I3
sS'.thisN'
p2971
I366
sS'.thisIndex'
p2972
I5
sg15
(lp2973
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2974
S'space'
p2975
asg95
I5
sa(dp2976
g16
(lp2977
S'k'
asg18
S'N'
sS'.thisRepN'
p2978
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2979
I4
sS'.thisN'
p2980
I367
sS'.thisIndex'
p2981
I4
sg15
(lp2982
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2983
g16
(lp2984
S'd'
asg18
S'N'
sS'.thisRepN'
p2985
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2986
I5
sS'.thisN'
p2987
I368
sS'.thisIndex'
p2988
I3
sg15
(lp2989
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp2990
g16
(lp2991
S'd'
asg18
S'Y'
sS'.thisRepN'
p2992
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2993
I6
sS'.thisN'
p2994
I369
sS'.thisIndex'
p2995
I0
sg15
(lp2996
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2997
S'space'
p2998
asg95
I0
sa(dp2999
g16
(lp3000
S'k'
asg18
S'N'
sS'.thisRepN'
p3001
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3002
I7
sS'.thisN'
p3003
I370
sS'.thisIndex'
p3004
I3
sg15
(lp3005
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3006
g16
(lp3007
S'k'
asg18
S'N'
sS'.thisRepN'
p3008
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3009
I8
sS'.thisN'
p3010
I371
sS'.thisIndex'
p3011
I1
sg15
(lp3012
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3013
g16
(lp3014
S'd'
asg18
S'N'
sS'.thisRepN'
p3015
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3016
I9
sS'.thisN'
p3017
I372
sS'.thisIndex'
p3018
I1
sg15
(lp3019
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3020
S'space'
p3021
asg95
I1
sa(dp3022
g16
(lp3023
S'd'
asg18
S'Y'
sS'.thisRepN'
p3024
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3025
I10
sS'.thisN'
p3026
I373
sS'.thisIndex'
p3027
I6
sg15
(lp3028
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3029
S'space'
p3030
asg95
I6
sa(dp3031
g16
(lp3032
S'd'
asg18
S'Y'
sS'.thisRepN'
p3033
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3034
I0
sS'.thisN'
p3035
I374
sS'.thisIndex'
p3036
I0
sg15
(lp3037
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3038
S'space'
p3039
asg95
I0
sa(dp3040
g16
(lp3041
S'k'
asg18
S'N'
sS'.thisRepN'
p3042
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3043
I1
sS'.thisN'
p3044
I375
sS'.thisIndex'
p3045
I6
sg15
(lp3046
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3047
g16
(lp3048
S'd'
asg18
S'N'
sS'.thisRepN'
p3049
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3050
I2
sS'.thisN'
p3051
I376
sS'.thisIndex'
p3052
I5
sg15
(lp3053
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3054
g16
(lp3055
S'k'
asg18
S'N'
sS'.thisRepN'
p3056
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3057
I3
sS'.thisN'
p3058
I377
sS'.thisIndex'
p3059
I9
sg15
(lp3060
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3061
g16
(lp3062
S'd'
asg18
S'Y'
sS'.thisRepN'
p3063
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3064
I4
sS'.thisN'
p3065
I378
sS'.thisIndex'
p3066
I9
sg15
(lp3067
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3068
S'space'
p3069
asg95
I9
sa(dp3070
g16
(lp3071
S'k'
asg18
S'N'
sS'.thisRepN'
p3072
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3073
I5
sS'.thisN'
p3074
I379
sS'.thisIndex'
p3075
I9
sg15
(lp3076
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3077
g16
(lp3078
S'd'
asg18
S'Y'
sS'.thisRepN'
p3079
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3080
I6
sS'.thisN'
p3081
I380
sS'.thisIndex'
p3082
I4
sg15
(lp3083
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp3084
g16
(lp3085
S'k'
asg18
S'Y'
sS'.thisRepN'
p3086
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3087
I7
sS'.thisN'
p3088
I381
sS'.thisIndex'
p3089
I2
sg15
(lp3090
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3091
g16
(lp3092
S'd'
asg18
S'N'
sS'.thisRepN'
p3093
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3094
I8
sS'.thisN'
p3095
I382
sS'.thisIndex'
p3096
I1
sg15
(lp3097
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3098
g16
(lp3099
S'k'
asg18
S'Y'
sS'.thisRepN'
p3100
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3101
I9
sS'.thisN'
p3102
I383
sS'.thisIndex'
p3103
I1
sg15
(lp3104
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3105
S'space'
p3106
asg95
I1
sa(dp3107
g16
(lp3108
S'd'
asg18
S'Y'
sS'.thisRepN'
p3109
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3110
I10
sS'.thisN'
p3111
I384
sS'.thisIndex'
p3112
I4
sg15
(lp3113
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp3114
g16
(lp3115
S'd'
asg18
S'Y'
sS'.thisRepN'
p3116
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3117
I0
sS'.thisN'
p3118
I385
sS'.thisIndex'
p3119
I10
sg15
(lp3120
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3121
S'space'
p3122
asg95
I10
sa(dp3123
g16
(lp3124
S'd'
asg18
S'Y'
sS'.thisRepN'
p3125
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3126
I1
sS'.thisN'
p3127
I386
sS'.thisIndex'
p3128
I2
sg15
(lp3129
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3130
S'space'
p3131
asg95
I2
sa(dp3132
g16
(lp3133
S'd'
asg18
S'Y'
sS'.thisRepN'
p3134
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3135
I2
sS'.thisN'
p3136
I387
sS'.thisIndex'
p3137
I5
sg15
(lp3138
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3139
S'space'
p3140
asg95
I5
sa(dp3141
g16
(lp3142
S'd'
asg18
S'N'
sS'.thisRepN'
p3143
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3144
I3
sS'.thisN'
p3145
I388
sS'.thisIndex'
p3146
I7
sg15
(lp3147
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3148
g16
(lp3149
S'k'
asg18
S'Y'
sS'.thisRepN'
p3150
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3151
I4
sS'.thisN'
p3152
I389
sS'.thisIndex'
p3153
I6
sg15
(lp3154
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3155
S'space'
p3156
asg95
I6
sa(dp3157
g16
(lp3158
S'k'
asg18
S'N'
sS'.thisRepN'
p3159
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3160
I5
sS'.thisN'
p3161
I390
sS'.thisIndex'
p3162
I2
sg15
(lp3163
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3164
S'space'
p3165
asg95
I2
sa(dp3166
g16
(lp3167
S'd'
asg18
S'Y'
sS'.thisRepN'
p3168
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3169
I6
sS'.thisN'
p3170
I391
sS'.thisIndex'
p3171
I0
sg15
(lp3172
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3173
S'space'
p3174
asg95
I0
sa(dp3175
g16
(lp3176
S'k'
asg18
S'Y'
sS'.thisRepN'
p3177
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3178
I7
sS'.thisN'
p3179
I392
sS'.thisIndex'
p3180
I10
sg15
(lp3181
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3182
S'space'
p3183
asg95
I10
sa(dp3184
g16
(lp3185
S'd'
asg18
S'N'
sS'.thisRepN'
p3186
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3187
I8
sS'.thisN'
p3188
I393
sS'.thisIndex'
p3189
I0
sg15
(lp3190
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3191
g16
(lp3192
S'd'
asg18
S'N'
sS'.thisRepN'
p3193
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3194
I9
sS'.thisN'
p3195
I394
sS'.thisIndex'
p3196
I3
sg15
(lp3197
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3198
g16
(lp3199
S'd'
asg18
S'N'
sS'.thisRepN'
p3200
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3201
I10
sS'.thisN'
p3202
I395
sS'.thisIndex'
p3203
I6
sg15
(lp3204
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I6
sa(dp3205
g16
(lp3206
S'd'
asg18
S'Y'
sS'.thisRepN'
p3207
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3208
I0
sS'.thisN'
p3209
I396
sS'.thisIndex'
p3210
I2
sg15
(lp3211
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3212
S'space'
p3213
asg95
I2
sa(dp3214
g16
(lp3215
S'd'
asg18
S'Y'
sS'.thisRepN'
p3216
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3217
I1
sS'.thisN'
p3218
I397
sS'.thisIndex'
p3219
I2
sg15
(lp3220
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3221
S'space'
p3222
asg95
I2
sa(dp3223
g16
(lp3224
S'k'
asg18
S'N'
sS'.thisRepN'
p3225
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3226
I2
sS'.thisN'
p3227
I398
sS'.thisIndex'
p3228
I7
sg15
(lp3229
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3230
g16
(lp3231
S'k'
asg18
S'N'
sg22
I38
sS'.thisN'
p3232
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3233
I3
sS'.thisRepN'
p3234
I36
sg21
I41
sS'.thisIndex'
p3235
I9
sg23
I25
sg15
(lp3236
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3237
g16
(lp3238
S'd'
asg95
I8
sS'.thisRepN'
p3239
I36
sg30
VF
sg31
g32
sS'.thisTrialN'
p3240
I4
sS'.thisN'
p3241
I400
sS'.thisIndex'
p3242
I8
sg15
(lp3243
S'd'
asg17
S'Y'
sg14
I9
sa(dp3244
g16
(lp3245
S'd'
asg95
I10
sS'.thisRepN'
p3246
I36
sg30
VF
sg31
g32
sS'.thisTrialN'
p3247
I5
sS'.thisN'
p3248
I401
sS'.thisIndex'
p3249
I10
sg15
(lp3250
S'd'
asg17
S'Y'
sg14
I9
sa(dp3251
g16
(lp3252
S'k'
asg18
S'Y'
sS'.thisRepN'
p3253
I36
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3254
I6
sS'.thisN'
p3255
I402
sS'.thisIndex'
p3256
I2
sg15
(lp3257
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3258
g16
(lp3259
S'd'
asg18
S'N'
sS'.thisRepN'
p3260
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3261
I7
sS'.thisN'
p3262
I403
sS'.thisIndex'
p3263
I2
sg15
(lp3264
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3265
g16
(lp3266
S'd'
asg18
S'N'
sS'.thisRepN'
p3267
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3268
I8
sS'.thisN'
p3269
I404
sS'.thisIndex'
p3270
I6
sg15
(lp3271
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3272
g16
(lp3273
S'd'
asg18
S'Y'
sS'.thisRepN'
p3274
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3275
I9
sS'.thisN'
p3276
I405
sS'.thisIndex'
p3277
I1
sg15
(lp3278
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3279
S'space'
p3280
asg95
I1
sa(dp3281
g16
(lp3282
S'k'
asg18
S'Y'
sS'.thisRepN'
p3283
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3284
I10
sS'.thisN'
p3285
I406
sS'.thisIndex'
p3286
I5
sg15
(lp3287
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3288
S'space'
p3289
asg95
I5
sa(dp3290
g16
(lp3291
S'd'
asg18
S'N'
sS'.thisRepN'
p3292
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3293
I0
sS'.thisN'
p3294
I407
sS'.thisIndex'
p3295
I1
sg15
(lp3296
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3297
g16
(lp3298
S'd'
asg18
S'N'
sS'.thisRepN'
p3299
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3300
I1
sS'.thisN'
p3301
I408
sS'.thisIndex'
p3302
I7
sg15
(lp3303
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3304
g16
(lp3305
S'k'
asg18
S'Y'
sS'.thisRepN'
p3306
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3307
I2
sS'.thisN'
p3308
I409
sS'.thisIndex'
p3309
I4
sg15
(lp3310
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3311
g16
(lp3312
S'k'
asg18
S'Y'
sS'.thisRepN'
p3313
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3314
I3
sS'.thisN'
p3315
I410
sS'.thisIndex'
p3316
I9
sg15
(lp3317
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3318
S'space'
p3319
asg95
I9
sa(dp3320
g16
(lp3321
S'd'
asg18
S'N'
sS'.thisRepN'
p3322
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3323
I4
sS'.thisN'
p3324
I411
sS'.thisIndex'
p3325
I0
sg15
(lp3326
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3327
g16
(lp3328
S'k'
asg18
S'N'
sS'.thisRepN'
p3329
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3330
I5
sS'.thisN'
p3331
I412
sS'.thisIndex'
p3332
I4
sg15
(lp3333
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3334
g16
(lp3335
S'k'
asg18
S'Y'
sS'.thisRepN'
p3336
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3337
I6
sS'.thisN'
p3338
I413
sS'.thisIndex'
p3339
I3
sg15
(lp3340
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3341
S'space'
p3342
asg95
I3
sa(dp3343
g16
(lp3344
S'd'
asg18
S'N'
sS'.thisRepN'
p3345
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3346
I7
sS'.thisN'
p3347
I414
sS'.thisIndex'
p3348
I6
sg15
(lp3349
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3350
g16
(lp3351
S'd'
asg18
S'N'
sS'.thisRepN'
p3352
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3353
I8
sS'.thisN'
p3354
I415
sS'.thisIndex'
p3355
I0
sg15
(lp3356
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3357
g16
(lp3358
S'k'
asg18
S'N'
sS'.thisRepN'
p3359
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3360
I9
sS'.thisN'
p3361
I416
sS'.thisIndex'
p3362
I3
sg15
(lp3363
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3364
g16
(lp3365
S'k'
asg18
S'N'
sS'.thisRepN'
p3366
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3367
I10
sS'.thisN'
p3368
I417
sS'.thisIndex'
p3369
I2
sg15
(lp3370
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3371
g16
(lp3372
S'd'
asg18
S'N'
sS'.thisRepN'
p3373
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3374
I0
sS'.thisN'
p3375
I418
sS'.thisIndex'
p3376
I5
sg15
(lp3377
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3378
g16
(lp3379
S'd'
asg18
S'N'
sS'.thisRepN'
p3380
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3381
I1
sS'.thisN'
p3382
I419
sS'.thisIndex'
p3383
I5
sg15
(lp3384
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I5
sa(dp3385
g16
(lp3386
S'k'
asg18
S'N'
sS'.thisRepN'
p3387
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3388
I2
sS'.thisN'
p3389
I420
sS'.thisIndex'
p3390
I6
sg15
(lp3391
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3392
g16
(lp3393
S'd'
asg18
S'N'
sS'.thisRepN'
p3394
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3395
I3
sS'.thisN'
p3396
I421
sS'.thisIndex'
p3397
I4
sg15
(lp3398
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I4
sa(dp3399
g16
(lp3400
S'k'
asg18
S'N'
sS'.thisRepN'
p3401
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3402
I4
sS'.thisN'
p3403
I422
sS'.thisIndex'
p3404
I1
sg15
(lp3405
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3406
g16
(lp3407
S'k'
asg18
S'Y'
sS'.thisRepN'
p3408
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3409
I5
sS'.thisN'
p3410
I423
sS'.thisIndex'
p3411
I7
sg15
(lp3412
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3413
S'space'
p3414
asg95
I7
sa(dp3415
g16
(lp3416
S'd'
asg18
S'Y'
sS'.thisRepN'
p3417
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3418
I6
sS'.thisN'
p3419
I424
sS'.thisIndex'
p3420
I1
sg15
(lp3421
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3422
S'space'
p3423
asg95
I1
sa(dp3424
g16
(lp3425
S'k'
asg18
S'N'
sS'.thisRepN'
p3426
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3427
I7
sS'.thisN'
p3428
I425
sS'.thisIndex'
p3429
I2
sg15
(lp3430
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3431
g16
(lp3432
S'd'
asg18
S'N'
sS'.thisRepN'
p3433
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3434
I8
sS'.thisN'
p3435
I426
sS'.thisIndex'
p3436
I4
sg15
(lp3437
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3438
S'space'
p3439
asg95
I4
sa(dp3440
g16
(lp3441
S'd'
asg18
S'N'
sS'.thisRepN'
p3442
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3443
I9
sS'.thisN'
p3444
I427
sS'.thisIndex'
p3445
I5
sg15
(lp3446
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3447
S'k'
asg95
I5
sa(dp3448
g16
(lp3449
S'k'
asg18
S'Y'
sS'.thisRepN'
p3450
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3451
I10
sS'.thisN'
p3452
I428
sS'.thisIndex'
p3453
I0
sg15
(lp3454
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3455
S'space'
p3456
asg95
I0
sa(dp3457
g16
(lp3458
S'k'
asg18
S'N'
sS'.thisRepN'
p3459
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3460
I0
sS'.thisN'
p3461
I429
sS'.thisIndex'
p3462
I4
sg15
(lp3463
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3464
g16
(lp3465
S'k'
asg18
S'Y'
sS'.thisRepN'
p3466
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3467
I1
sS'.thisN'
p3468
I430
sS'.thisIndex'
p3469
I9
sg15
(lp3470
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3471
S'space'
p3472
asg95
I9
sa(dp3473
g16
(lp3474
S'k'
asg18
S'Y'
sS'.thisRepN'
p3475
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3476
I2
sS'.thisN'
p3477
I431
sS'.thisIndex'
p3478
I10
sg15
(lp3479
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3480
S'space'
p3481
asg95
I10
sa(dp3482
g16
(lp3483
S'k'
asg18
S'N'
sS'.thisRepN'
p3484
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3485
I3
sS'.thisN'
p3486
I432
sS'.thisIndex'
p3487
I5
sg15
(lp3488
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I5
sa(dp3489
g16
(lp3490
S'k'
asg18
S'Y'
sS'.thisRepN'
p3491
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3492
I4
sS'.thisN'
p3493
I433
sS'.thisIndex'
p3494
I1
sg15
(lp3495
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3496
S'space'
p3497
asg95
I1
sa(dp3498
g16
(lp3499
S'd'
asg18
S'Y'
sS'.thisRepN'
p3500
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3501
I5
sS'.thisN'
p3502
I434
sS'.thisIndex'
p3503
I8
sg15
(lp3504
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3505
S'space'
p3506
asg95
I8
sa(dp3507
g16
(lp3508
S'd'
asg18
S'Y'
sS'.thisRepN'
p3509
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3510
I6
sS'.thisN'
p3511
I435
sS'.thisIndex'
p3512
I6
sg15
(lp3513
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3514
S'space'
p3515
asg95
I6
sa(dp3516
g16
(lp3517
S'd'
asg18
S'Y'
sS'.thisRepN'
p3518
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3519
I7
sS'.thisN'
p3520
I436
sS'.thisIndex'
p3521
I3
sg15
(lp3522
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3523
S'space'
p3524
asg95
I3
sa(dp3525
g16
(lp3526
S'k'
asg18
S'Y'
sS'.thisRepN'
p3527
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3528
I8
sS'.thisN'
p3529
I437
sS'.thisIndex'
p3530
I10
sg15
(lp3531
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3532
S'space'
p3533
asg95
I10
sa(dp3534
g16
(lp3535
S'd'
asg18
S'Y'
sS'.thisRepN'
p3536
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3537
I9
sS'.thisN'
p3538
I438
sS'.thisIndex'
p3539
I2
sg15
(lp3540
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3541
S'space'
p3542
asg95
I2
sa(dp3543
g16
(lp3544
S'd'
asg18
S'Y'
sS'.thisRepN'
p3545
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3546
I10
sS'.thisN'
p3547
I439
sS'.thisIndex'
p3548
I5
sg15
(lp3549
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3550
S'k'
asg95
I5
sa(dp3551
g16
(lp3552
S'k'
asg18
S'Y'
sS'.thisRepN'
p3553
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3554
I0
sS'.thisN'
p3555
I440
sS'.thisIndex'
p3556
I10
sg15
(lp3557
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3558
S'space'
p3559
asg95
I10
sa(dp3560
g16
(lp3561
S'k'
asg18
S'Y'
sS'.thisRepN'
p3562
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3563
I1
sS'.thisN'
p3564
I441
sS'.thisIndex'
p3565
I5
sg15
(lp3566
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3567
S'space'
p3568
asg95
I5
sa(dp3569
g16
(lp3570
S'd'
asg18
S'N'
sS'.thisRepN'
p3571
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3572
I2
sS'.thisN'
p3573
I442
sS'.thisIndex'
p3574
I9
sg15
(lp3575
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3576
g16
(lp3577
S'k'
asg18
S'N'
sS'.thisRepN'
p3578
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3579
I3
sS'.thisN'
p3580
I443
sS'.thisIndex'
p3581
I1
sg15
(lp3582
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3583
g16
(lp3584
S'k'
asg18
S'Y'
sS'.thisRepN'
p3585
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3586
I4
sS'.thisN'
p3587
I444
sS'.thisIndex'
p3588
I7
sg15
(lp3589
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3590
S'd'
asg95
I7
sa(dp3591
g16
(lp3592
S'k'
asg18
S'N'
sS'.thisRepN'
p3593
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3594
I5
sS'.thisN'
p3595
I445
sS'.thisIndex'
p3596
I0
sg15
(lp3597
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3598
g16
(lp3599
S'k'
asg18
S'Y'
sS'.thisRepN'
p3600
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3601
I6
sS'.thisN'
p3602
I446
sS'.thisIndex'
p3603
I3
sg15
(lp3604
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3605
S'space'
p3606
asg95
I3
sa(dp3607
g16
(lp3608
S'k'
asg18
S'N'
sS'.thisRepN'
p3609
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3610
I7
sS'.thisN'
p3611
I447
sS'.thisIndex'
p3612
I2
sg15
(lp3613
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3614
g16
(lp3615
S'd'
asg18
S'Y'
sS'.thisRepN'
p3616
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3617
I8
sS'.thisN'
p3618
I448
sS'.thisIndex'
p3619
I6
sg15
(lp3620
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3621
S'space'
p3622
asg95
I6
sa(dp3623
g16
(lp3624
S'd'
asg18
S'Y'
sg22
I42
sS'.thisN'
p3625
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3626
I9
sS'.thisRepN'
p3627
I40
sg21
I45
sS'.thisIndex'
p3628
I2
sg23
I24
sg15
(lp3629
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3630
S'space'
p3631
asg95
I2
sa(dp3632
g16
(lp3633
S'd'
asg95
I1
sS'.thisRepN'
p3634
I40
sg30
VF
sg31
g32
sS'.thisTrialN'
p3635
I10
sS'.thisN'
p3636
I450
sS'.thisIndex'
p3637
I1
sg15
(lp3638
S'k'
asg17
S'N'
sg14
I10
sa(dp3639
g16
(lp3640
S'd'
asg95
I6
sS'.thisRepN'
p3641
I41
sg30
VF
sg31
g32
sS'.thisTrialN'
p3642
I0
sS'.thisN'
p3643
I451
sS'.thisIndex'
p3644
I6
sg15
(lp3645
S'k'
asg17
S'N'
sg14
I10
sa(dp3646
g16
(lp3647
S'd'
asg18
S'Y'
sS'.thisRepN'
p3648
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3649
I1
sS'.thisN'
p3650
I452
sS'.thisIndex'
p3651
I4
sg15
(lp3652
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3653
S'space'
p3654
asg95
I4
sa(dp3655
g16
(lp3656
S'd'
asg18
S'Y'
sS'.thisRepN'
p3657
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3658
I2
sS'.thisN'
p3659
I453
sS'.thisIndex'
p3660
I9
sg15
(lp3661
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3662
S'space'
p3663
asg95
I9
sa(dp3664
g16
(lp3665
S'k'
asg18
S'Y'
sS'.thisRepN'
p3666
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3667
I3
sS'.thisN'
p3668
I454
sS'.thisIndex'
p3669
I5
sg15
(lp3670
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3671
S'space'
p3672
asg95
I5
sa(dp3673
g16
(lp3674
S'k'
asg18
S'N'
sS'.thisRepN'
p3675
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3676
I4
sS'.thisN'
p3677
I455
sS'.thisIndex'
p3678
I9
sg15
(lp3679
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3680
g16
(lp3681
S'k'
asg18
S'N'
sS'.thisRepN'
p3682
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3683
I5
sS'.thisN'
p3684
I456
sS'.thisIndex'
p3685
I3
sg15
(lp3686
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3687
g16
(lp3688
S'k'
asg18
S'N'
sS'.thisRepN'
p3689
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3690
I6
sS'.thisN'
p3691
I457
sS'.thisIndex'
p3692
I10
sg15
(lp3693
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3694
g16
(lp3695
S'd'
asg18
S'N'
sS'.thisRepN'
p3696
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3697
I7
sS'.thisN'
p3698
I458
sS'.thisIndex'
p3699
I3
sg15
(lp3700
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3701
g16
(lp3702
S'd'
asg18
S'N'
sS'.thisRepN'
p3703
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3704
I8
sS'.thisN'
p3705
I459
sS'.thisIndex'
p3706
I0
sg15
(lp3707
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3708
g16
(lp3709
S'd'
asg18
S'Y'
sS'.thisRepN'
p3710
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3711
I9
sS'.thisN'
p3712
I460
sS'.thisIndex'
p3713
I1
sg15
(lp3714
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3715
S'space'
p3716
asg95
I1
sa(dp3717
g16
(lp3718
S'd'
asg18
S'N'
sS'.thisRepN'
p3719
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3720
I10
sS'.thisN'
p3721
I461
sS'.thisIndex'
p3722
I9
sg15
(lp3723
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I9
sa(dp3724
g16
(lp3725
S'd'
asg18
S'Y'
sS'.thisRepN'
p3726
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3727
I0
sS'.thisN'
p3728
I462
sS'.thisIndex'
p3729
I1
sg15
(lp3730
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3731
S'space'
p3732
asg95
I1
sa(dp3733
g16
(lp3734
S'k'
asg18
S'N'
sS'.thisRepN'
p3735
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3736
I1
sS'.thisN'
p3737
I463
sS'.thisIndex'
p3738
I3
sg15
(lp3739
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I3
sa(dp3740
g16
(lp3741
S'd'
asg18
S'N'
sS'.thisRepN'
p3742
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3743
I2
sS'.thisN'
p3744
I464
sS'.thisIndex'
p3745
I8
sg15
(lp3746
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3747
S'space'
p3748
asg95
I8
sa(dp3749
g16
(lp3750
S'k'
asg18
S'N'
sS'.thisRepN'
p3751
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3752
I3
sS'.thisN'
p3753
I465
sS'.thisIndex'
p3754
I0
sg15
(lp3755
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3756
g16
(lp3757
S'd'
asg18
S'Y'
sS'.thisRepN'
p3758
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3759
I4
sS'.thisN'
p3760
I466
sS'.thisIndex'
p3761
I8
sg15
(lp3762
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3763
S'space'
p3764
asg95
I8
sa(dp3765
g16
(lp3766
S'd'
asg18
S'N'
sS'.thisRepN'
p3767
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3768
I5
sS'.thisN'
p3769
I467
sS'.thisIndex'
p3770
I2
sg15
(lp3771
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3772
S'space'
p3773
asg95
I2
sa(dp3774
g16
(lp3775
S'k'
asg18
S'Y'
sS'.thisRepN'
p3776
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3777
I6
sS'.thisN'
p3778
I468
sS'.thisIndex'
p3779
I4
sg15
(lp3780
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3781
S'space'
p3782
asg95
I4
sa(dp3783
g16
(lp3784
S'd'
asg18
S'N'
sS'.thisRepN'
p3785
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3786
I7
sS'.thisN'
p3787
I469
sS'.thisIndex'
p3788
I9
sg15
(lp3789
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3790
g16
(lp3791
S'k'
asg18
S'N'
sS'.thisRepN'
p3792
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3793
I8
sS'.thisN'
p3794
I470
sS'.thisIndex'
p3795
I9
sg15
(lp3796
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3797
g16
(lp3798
S'd'
asg18
S'N'
sS'.thisRepN'
p3799
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3800
I9
sS'.thisN'
p3801
I471
sS'.thisIndex'
p3802
I9
sg15
(lp3803
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3804
g16
(lp3805
S'd'
asg18
S'Y'
sS'.thisRepN'
p3806
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3807
I10
sS'.thisN'
p3808
I472
sS'.thisIndex'
p3809
I8
sg15
(lp3810
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3811
S'space'
p3812
asg95
I8
sa(dp3813
g16
(lp3814
S'd'
asg18
S'N'
sS'.thisRepN'
p3815
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3816
I0
sS'.thisN'
p3817
I473
sS'.thisIndex'
p3818
I6
sg15
(lp3819
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3820
g16
(lp3821
S'd'
asg18
S'N'
sS'.thisRepN'
p3822
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3823
I1
sS'.thisN'
p3824
I474
sS'.thisIndex'
p3825
I8
sg15
(lp3826
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I8
sa(dp3827
g16
(lp3828
S'd'
asg18
S'Y'
sS'.thisRepN'
p3829
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3830
I2
sS'.thisN'
p3831
I475
sS'.thisIndex'
p3832
I7
sg15
(lp3833
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3834
S'space'
p3835
asg95
I7
sa(dp3836
g16
(lp3837
S'd'
asg18
S'Y'
sS'.thisRepN'
p3838
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3839
I3
sS'.thisN'
p3840
I476
sS'.thisIndex'
p3841
I9
sg15
(lp3842
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3843
S'space'
p3844
asg95
I9
sa(dp3845
g16
(lp3846
S'k'
asg18
S'N'
sS'.thisRepN'
p3847
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3848
I4
sS'.thisN'
p3849
I477
sS'.thisIndex'
p3850
I5
sg15
(lp3851
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3852
g16
(lp3853
S'k'
asg18
S'N'
sS'.thisRepN'
p3854
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3855
I5
sS'.thisN'
p3856
I478
sS'.thisIndex'
p3857
I0
sg15
(lp3858
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I0
sa(dp3859
g16
(lp3860
S'k'
asg18
S'N'
sS'.thisRepN'
p3861
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3862
I6
sS'.thisN'
p3863
I479
sS'.thisIndex'
p3864
I8
sg15
(lp3865
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3866
g16
(lp3867
S'k'
asg18
S'N'
sS'.thisRepN'
p3868
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3869
I7
sS'.thisN'
p3870
I480
sS'.thisIndex'
p3871
I3
sg15
(lp3872
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I3
sa(dp3873
g16
(lp3874
S'd'
asg18
S'Y'
sS'.thisRepN'
p3875
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3876
I8
sS'.thisN'
p3877
I481
sS'.thisIndex'
p3878
I3
sg15
(lp3879
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3880
S'space'
p3881
asg95
I3
sa(dp3882
g16
(lp3883
S'k'
asg18
S'N'
sS'.thisRepN'
p3884
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3885
I9
sS'.thisN'
p3886
I482
sS'.thisIndex'
p3887
I4
sg15
(lp3888
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3889
g16
(lp3890
S'k'
asg18
S'N'
sS'.thisRepN'
p3891
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3892
I10
sS'.thisN'
p3893
I483
sS'.thisIndex'
p3894
I5
sg15
(lp3895
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3896
g16
(lp3897
S'd'
asg18
S'N'
sS'.thisRepN'
p3898
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3899
I0
sS'.thisN'
p3900
I484
sS'.thisIndex'
p3901
I8
sg15
(lp3902
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3903
g16
(lp3904
S'd'
asg18
S'N'
sS'.thisRepN'
p3905
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3906
I1
sS'.thisN'
p3907
I485
sS'.thisIndex'
p3908
I9
sg15
(lp3909
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3910
g16
(lp3911
S'd'
asg18
S'Y'
sS'.thisRepN'
p3912
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3913
I2
sS'.thisN'
p3914
I486
sS'.thisIndex'
p3915
I5
sg15
(lp3916
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I5
sa(dp3917
g16
(lp3918
S'k'
asg18
S'Y'
sS'.thisRepN'
p3919
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3920
I3
sS'.thisN'
p3921
I487
sS'.thisIndex'
p3922
I8
sg15
(lp3923
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3924
S'space'
p3925
asg95
I8
sa(dp3926
g16
(lp3927
S'k'
asg18
S'Y'
sS'.thisRepN'
p3928
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3929
I4
sS'.thisN'
p3930
I488
sS'.thisIndex'
p3931
I7
sg15
(lp3932
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3933
S'space'
p3934
asg95
I7
sa(dp3935
g16
(lp3936
S'k'
asg18
S'N'
sS'.thisRepN'
p3937
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3938
I5
sS'.thisN'
p3939
I489
sS'.thisIndex'
p3940
I3
sg15
(lp3941
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3942
g16
(lp3943
S'k'
asg18
S'N'
sS'.thisRepN'
p3944
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3945
I6
sS'.thisN'
p3946
I490
sS'.thisIndex'
p3947
I9
sg15
(lp3948
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3949
S'space'
p3950
asg95
I9
sa(dp3951
g16
(lp3952
S'k'
asg18
S'N'
sS'.thisRepN'
p3953
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3954
I7
sS'.thisN'
p3955
I491
sS'.thisIndex'
p3956
I1
sg15
(lp3957
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3958
g16
(lp3959
S'k'
asg18
S'Y'
sS'.thisRepN'
p3960
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3961
I8
sS'.thisN'
p3962
I492
sS'.thisIndex'
p3963
I10
sg15
(lp3964
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3965
S'space'
p3966
asg95
I10
sa(dp3967
g16
(lp3968
S'd'
asg18
S'Y'
sS'.thisRepN'
p3969
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3970
I9
sS'.thisN'
p3971
I493
sS'.thisIndex'
p3972
I10
sg15
(lp3973
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3974
S'space'
p3975
asg95
I10
sa(dp3976
g16
(lp3977
S'k'
asg18
S'Y'
sS'.thisRepN'
p3978
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3979
I10
sS'.thisN'
p3980
I494
sS'.thisIndex'
p3981
I8
sg15
(lp3982
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3983
S'space'
p3984
asg95
I8
sa(dp3985
g16
(lp3986
S'd'
asg18
S'Y'
sS'.thisRepN'
p3987
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3988
I0
sS'.thisN'
p3989
I495
sS'.thisIndex'
p3990
I8
sg15
(lp3991
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3992
S'space'
p3993
asg95
I8
sa(dp3994
g16
(lp3995
S'k'
asg18
S'Y'
sS'.thisRepN'
p3996
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3997
I1
sS'.thisN'
p3998
I496
sS'.thisIndex'
p3999
I5
sg15
(lp4000
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4001
S'space'
p4002
asg95
I5
sa(dp4003
g16
(lp4004
S'd'
asg18
S'N'
sS'.thisRepN'
p4005
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4006
I2
sS'.thisN'
p4007
I497
sS'.thisIndex'
p4008
I4
sg15
(lp4009
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp4010
g16
(lp4011
S'k'
asg18
S'N'
sS'.thisRepN'
p4012
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4013
I3
sS'.thisN'
p4014
I498
sS'.thisIndex'
p4015
I9
sg15
(lp4016
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp4017
g16
(lp4018
S'k'
asg18
S'Y'
sg22
I44
sS'.thisN'
p4019
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4020
I4
sS'.thisRepN'
p4021
I45
sg21
I39
sS'.thisIndex'
p4022
I8
sg23
I20
sg15
(lp4023
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4024
S'space'
p4025
asg95
I8
sa(dp4026
g16
(lp4027
S'k'
asS'.thisIndex'
p4028
I10
sS'.thisRepN'
p4029
I45
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4030
I5
sS'.thisN'
p4031
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4032
S'd'
asg17
S'Y'
sg14
I11
sg95
I10
sa(dp4033
g16
(lp4034
S'd'
asS'.thisIndex'
p4035
I2
sS'.thisRepN'
p4036
I45
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4037
I6
sS'.thisN'
p4038
I501
sg25
S'Y'
sg15
(lp4039
S'k'
asg17
S'Y'
sg14
I11
sg95
I2
sa(dp4040
g16
(lp4041
S'd'
asg18
S'N'
sS'.thisRepN'
p4042
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4043
I7
sS'.thisN'
p4044
I502
sg25
S'Y'
sg15
(lp4045
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4046
I0
sa(dp4047
g16
(lp4048
S'k'
asg18
S'N'
sS'.thisRepN'
p4049
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4050
I8
sS'.thisN'
p4051
I503
sg25
S'Y'
sg15
(lp4052
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4053
I9
sa(dp4054
g16
(lp4055
S'd'
asg18
S'N'
sS'.thisRepN'
p4056
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4057
I9
sS'.thisN'
p4058
I504
sg25
S'Y'
sg15
(lp4059
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4060
I4
sa(dp4061
g16
(lp4062
S'd'
asg18
S'Y'
sS'.thisRepN'
p4063
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4064
I10
sS'.thisN'
p4065
I505
sg25
S'Y'
sg15
(lp4066
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4067
S'space'
p4068
asg95
I1
sS'.thisIndex'
p4069
I1
sa(dp4070
g16
(lp4071
S'd'
asg18
S'Y'
sS'.thisRepN'
p4072
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4073
I0
sS'.thisN'
p4074
I506
sg25
S'Y'
sg15
(lp4075
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4076
S'space'
p4077
asg95
I3
sS'.thisIndex'
p4078
I3
sa(dp4079
g16
(lp4080
S'k'
asg18
S'Y'
sS'.thisRepN'
p4081
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4082
I1
sS'.thisN'
p4083
I507
sg25
S'Y'
sg15
(lp4084
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4085
S'space'
p4086
asg95
I0
sS'.thisIndex'
p4087
I0
sa(dp4088
g16
(lp4089
S'd'
asg18
S'N'
sS'.thisRepN'
p4090
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4091
I2
sS'.thisN'
p4092
I508
sg25
S'Y'
sg15
(lp4093
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4094
I5
sa(dp4095
g16
(lp4096
S'd'
asg18
S'N'
sS'.thisRepN'
p4097
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4098
I3
sS'.thisN'
p4099
I509
sg25
S'Y'
sg15
(lp4100
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4101
I8
sa(dp4102
g16
(lp4103
S'k'
asg18
S'Y'
sS'.thisRepN'
p4104
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4105
I4
sS'.thisN'
p4106
I510
sg25
S'Y'
sg15
(lp4107
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4108
S'space'
p4109
asg95
I1
sS'.thisIndex'
p4110
I1
sa(dp4111
g16
(lp4112
S'k'
asg18
S'N'
sS'.thisRepN'
p4113
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4114
I5
sS'.thisN'
p4115
I511
sg25
S'Y'
sg15
(lp4116
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4117
I3
sa(dp4118
g16
(lp4119
S'd'
asg18
S'N'
sS'.thisRepN'
p4120
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4121
I6
sS'.thisN'
p4122
I512
sg25
S'Y'
sg15
(lp4123
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4124
I1
sa(dp4125
g16
(lp4126
S'd'
asg18
S'Y'
sS'.thisRepN'
p4127
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4128
I7
sS'.thisN'
p4129
I513
sg25
S'Y'
sg15
(lp4130
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4131
S'space'
p4132
asg95
I5
sS'.thisIndex'
p4133
I5
sa(dp4134
g16
(lp4135
S'k'
asg18
S'N'
sS'.thisRepN'
p4136
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4137
I8
sS'.thisN'
p4138
I514
sg25
S'Y'
sg15
(lp4139
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4140
I9
sa(dp4141
g16
(lp4142
S'k'
asg18
S'Y'
sS'.thisRepN'
p4143
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4144
I9
sS'.thisN'
p4145
I515
sg25
S'Y'
sg15
(lp4146
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4147
S'space'
p4148
asg95
I8
sS'.thisIndex'
p4149
I8
sa(dp4150
g16
(lp4151
S'k'
asg18
S'Y'
sS'.thisRepN'
p4152
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4153
I10
sS'.thisN'
p4154
I516
sg25
S'Y'
sg15
(lp4155
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4156
S'space'
p4157
asg95
I2
sS'.thisIndex'
p4158
I2
sa(dp4159
g16
(lp4160
S'k'
asg18
S'N'
sS'.thisRepN'
p4161
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4162
I0
sS'.thisN'
p4163
I517
sg25
S'Y'
sg15
(lp4164
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4165
I8
sa(dp4166
g16
(lp4167
S'd'
asg18
S'N'
sS'.thisRepN'
p4168
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4169
I1
sS'.thisN'
p4170
I518
sg25
S'Y'
sg15
(lp4171
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4172
I8
sa(dp4173
g16
(lp4174
S'k'
asg18
S'Y'
sS'.thisRepN'
p4175
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4176
I2
sS'.thisN'
p4177
I519
sg25
S'Y'
sg15
(lp4178
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4179
S'space'
p4180
asg95
I3
sS'.thisIndex'
p4181
I3
sa(dp4182
g16
(lp4183
S'd'
asg18
S'N'
sS'.thisRepN'
p4184
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4185
I3
sS'.thisN'
p4186
I520
sg25
S'Y'
sg15
(lp4187
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4188
I9
sa(dp4189
g16
(lp4190
S'd'
asg18
S'N'
sS'.thisRepN'
p4191
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4192
I4
sS'.thisN'
p4193
I521
sg25
S'Y'
sg15
(lp4194
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4195
I7
sa(dp4196
g16
(lp4197
S'k'
asg18
S'Y'
sS'.thisRepN'
p4198
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4199
I5
sS'.thisN'
p4200
I522
sg25
S'Y'
sg15
(lp4201
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4202
S'space'
p4203
asg95
I3
sS'.thisIndex'
p4204
I3
sa(dp4205
g16
(lp4206
S'k'
asg18
S'Y'
sS'.thisRepN'
p4207
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4208
I6
sS'.thisN'
p4209
I523
sg25
S'Y'
sg15
(lp4210
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4211
S'space'
p4212
asg95
I8
sS'.thisIndex'
p4213
I8
sa(dp4214
g16
(lp4215
S'd'
asg18
S'Y'
sS'.thisRepN'
p4216
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4217
I7
sS'.thisN'
p4218
I524
sg25
S'Y'
sg15
(lp4219
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4220
S'space'
p4221
asg95
I7
sS'.thisIndex'
p4222
I7
sa(dp4223
g16
(lp4224
S'k'
asg18
S'N'
sS'.thisRepN'
p4225
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4226
I8
sS'.thisN'
p4227
I525
sg25
S'Y'
sg15
(lp4228
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4229
I0
sa(dp4230
g16
(lp4231
S'k'
asg18
S'Y'
sS'.thisRepN'
p4232
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4233
I9
sS'.thisN'
p4234
I526
sg25
S'Y'
sg15
(lp4235
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4236
S'space'
p4237
asg95
I8
sS'.thisIndex'
p4238
I8
sa(dp4239
g16
(lp4240
S'd'
asg18
S'Y'
sS'.thisRepN'
p4241
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4242
I10
sS'.thisN'
p4243
I527
sg25
S'Y'
sg15
(lp4244
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4245
S'space'
p4246
asg95
I10
sS'.thisIndex'
p4247
I10
sa(dp4248
g16
(lp4249
S'd'
asg18
S'N'
sS'.thisRepN'
p4250
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4251
I0
sS'.thisN'
p4252
I528
sg25
S'Y'
sg15
(lp4253
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4254
I0
sa(dp4255
g16
(lp4256
S'd'
asg18
S'Y'
sS'.thisRepN'
p4257
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4258
I1
sS'.thisN'
p4259
I529
sg25
S'Y'
sg15
(lp4260
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4261
S'space'
p4262
asg95
I0
sS'.thisIndex'
p4263
I0
sa(dp4264
g16
(lp4265
S'k'
asg18
S'Y'
sS'.thisRepN'
p4266
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4267
I2
sS'.thisN'
p4268
I530
sg25
S'Y'
sg15
(lp4269
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4270
S'space'
p4271
asg95
I0
sS'.thisIndex'
p4272
I0
sa(dp4273
g16
(lp4274
S'd'
asg18
S'Y'
sS'.thisRepN'
p4275
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4276
I3
sS'.thisN'
p4277
I531
sg25
S'Y'
sg15
(lp4278
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4279
S'space'
p4280
asg95
I7
sS'.thisIndex'
p4281
I7
sa(dp4282
g16
(lp4283
S'k'
asg18
S'N'
sS'.thisRepN'
p4284
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4285
I4
sS'.thisN'
p4286
I532
sg25
S'Y'
sg15
(lp4287
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4288
I5
sa(dp4289
g16
(lp4290
S'd'
asg18
S'N'
sS'.thisRepN'
p4291
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4292
I5
sS'.thisN'
p4293
I533
sg25
S'Y'
sg15
(lp4294
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4295
I8
sa(dp4296
g16
(lp4297
S'k'
asg18
S'Y'
sS'.thisRepN'
p4298
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4299
I6
sS'.thisN'
p4300
I534
sg25
S'Y'
sg15
(lp4301
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4302
S'space'
p4303
asg95
I4
sS'.thisIndex'
p4304
I4
sa(dp4305
g16
(lp4306
S'd'
asg18
S'Y'
sS'.thisRepN'
p4307
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4308
I7
sS'.thisN'
p4309
I535
sg25
S'Y'
sg15
(lp4310
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4311
S'space'
p4312
asg95
I6
sS'.thisIndex'
p4313
I6
sa(dp4314
g16
(lp4315
S'k'
asg18
S'N'
sS'.thisRepN'
p4316
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4317
I8
sS'.thisN'
p4318
I536
sg25
S'Y'
sg15
(lp4319
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4320
I6
sa(dp4321
g16
(lp4322
S'k'
asg18
S'Y'
sS'.thisRepN'
p4323
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4324
I9
sS'.thisN'
p4325
I537
sg25
S'Y'
sg15
(lp4326
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4327
S'space'
p4328
asg95
I7
sS'.thisIndex'
p4329
I7
sa(dp4330
g16
(lp4331
S'k'
asg18
S'Y'
sS'.thisRepN'
p4332
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4333
I10
sS'.thisN'
p4334
I538
sg25
S'Y'
sg15
(lp4335
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4336
S'space'
p4337
asg95
I7
sS'.thisIndex'
p4338
I7
sa(dp4339
g16
(lp4340
S'd'
asg18
S'N'
sS'.thisRepN'
p4341
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4342
I0
sS'.thisN'
p4343
I539
sg25
S'Y'
sg15
(lp4344
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4345
I5
sa(dp4346
g16
(lp4347
S'd'
asg18
S'N'
sS'.thisRepN'
p4348
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4349
I1
sS'.thisN'
p4350
I540
sg25
S'Y'
sg15
(lp4351
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4352
I0
sa(dp4353
g16
(lp4354
S'd'
asg18
S'Y'
sS'.thisRepN'
p4355
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4356
I2
sS'.thisN'
p4357
I541
sg25
S'Y'
sg15
(lp4358
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4359
I5
sa(dp4360
g16
(lp4361
S'd'
asg18
S'Y'
sS'.thisRepN'
p4362
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4363
I3
sS'.thisN'
p4364
I542
sg25
S'Y'
sg15
(lp4365
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4366
S'space'
p4367
asg95
I3
sS'.thisIndex'
p4368
I3
sa(dp4369
g16
(lp4370
S'd'
asg18
S'N'
sS'.thisRepN'
p4371
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4372
I4
sS'.thisN'
p4373
I543
sg25
S'Y'
sg15
(lp4374
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4375
I1
sa(dp4376
g16
(lp4377
S'k'
asg18
S'N'
sS'.thisRepN'
p4378
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4379
I5
sS'.thisN'
p4380
I544
sg25
S'Y'
sg15
(lp4381
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4382
I5
sa(dp4383
g16
(lp4384
S'k'
asg18
S'Y'
sS'.thisRepN'
p4385
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4386
I6
sS'.thisN'
p4387
I545
sg25
S'Y'
sg15
(lp4388
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4389
S'space'
p4390
asg95
I0
sS'.thisIndex'
p4391
I0
sa(dp4392
g16
(lp4393
S'd'
asg18
S'N'
sS'.thisRepN'
p4394
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4395
I7
sS'.thisN'
p4396
I546
sg25
S'Y'
sg15
(lp4397
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4398
I2
sa(dp4399
g16
(lp4400
S'd'
asg18
S'Y'
sS'.thisRepN'
p4401
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4402
I8
sS'.thisN'
p4403
I547
sg25
S'Y'
sg15
(lp4404
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4405
S'space'
p4406
asg95
I9
sS'.thisIndex'
p4407
I9
sa(dp4408
g16
(lp4409
S'k'
asg18
S'N'
sS'.thisRepN'
p4410
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4411
I9
sS'.thisN'
p4412
I548
sg25
S'Y'
sg15
(lp4413
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4414
I5
sa(dp4415
g16
(lp4416
S'k'
asg18
S'Y'
sg22
I47
sg26
S'Y'
sS'.thisN'
p4417
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4418
I10
sS'.thisRepN'
p4419
I49
sg21
I35
sg25
S'Y'
sg23
I25
sg15
(lp4420
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4421
S'space'
p4422
asg95
I9
sS'.thisIndex'
p4423
I9
sa(dp4424
g16
(lp4425
S'd'
asS'.thisIndex'
p4426
I6
sS'.thisRepN'
p4427
I50
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4428
I0
sS'.thisN'
p4429
I550
sg25
S'Y'
sg15
(lp4430
S'k'
asg17
S'Y'
sg14
I12
sg95
I6
sa(dp4431
g16
(lp4432
S'd'
asS'.thisIndex'
p4433
I1
sS'.thisRepN'
p4434
I50
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4435
I1
sS'.thisN'
p4436
I551
sg25
S'Y'
sg15
(lp4437
S'k'
asg17
S'Y'
sg14
I12
sg95
I1
sa(dp4438
g16
(lp4439
S'd'
asg18
S'N'
sS'.thisRepN'
p4440
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4441
I2
sS'.thisN'
p4442
I552
sg25
S'Y'
sg15
(lp4443
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4444
I9
sa(dp4445
g16
(lp4446
S'd'
asg18
S'Y'
sS'.thisRepN'
p4447
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4448
I3
sS'.thisN'
p4449
I553
sg25
S'Y'
sg15
(lp4450
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4451
S'space'
p4452
asg95
I10
sS'.thisIndex'
p4453
I10
sa(dp4454
g16
(lp4455
S'k'
asg18
S'Y'
sS'.thisRepN'
p4456
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4457
I4
sS'.thisN'
p4458
I554
sg25
S'Y'
sg15
(lp4459
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4460
S'space'
p4461
asg95
I9
sS'.thisIndex'
p4462
I9
sa(dp4463
g16
(lp4464
S'd'
asg18
S'N'
sS'.thisRepN'
p4465
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4466
I5
sS'.thisN'
p4467
I555
sg25
S'Y'
sg15
(lp4468
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4469
I10
sa(dp4470
g16
(lp4471
S'd'
asg18
S'Y'
sS'.thisRepN'
p4472
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4473
I6
sS'.thisN'
p4474
I556
sg25
S'Y'
sg15
(lp4475
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4476
S'space'
p4477
asg95
I1
sS'.thisIndex'
p4478
I1
sa(dp4479
g16
(lp4480
S'k'
asg18
S'N'
sS'.thisRepN'
p4481
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4482
I7
sS'.thisN'
p4483
I557
sg25
S'Y'
sg15
(lp4484
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4485
I8
sa(dp4486
g16
(lp4487
S'k'
asg18
S'N'
sS'.thisRepN'
p4488
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4489
I8
sS'.thisN'
p4490
I558
sg25
S'Y'
sg15
(lp4491
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4492
I6
sa(dp4493
g16
(lp4494
S'k'
asg18
S'N'
sS'.thisRepN'
p4495
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4496
I9
sS'.thisN'
p4497
I559
sg25
S'Y'
sg15
(lp4498
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4499
S'space'
p4500
asg95
I8
sS'.thisIndex'
p4501
I8
sa(dp4502
g16
(lp4503
S'k'
asg18
S'N'
sS'.thisRepN'
p4504
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4505
I10
sS'.thisN'
p4506
I560
sg25
S'Y'
sg15
(lp4507
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4508
S'space'
p4509
asg95
I9
sS'.thisIndex'
p4510
I9
sa(dp4511
g16
(lp4512
S'd'
asg18
S'Y'
sS'.thisRepN'
p4513
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4514
I0
sS'.thisN'
p4515
I561
sg25
S'Y'
sg15
(lp4516
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4517
S'space'
p4518
asg95
I6
sS'.thisIndex'
p4519
I6
sa(dp4520
g16
(lp4521
S'k'
asg18
S'N'
sS'.thisRepN'
p4522
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4523
I1
sS'.thisN'
p4524
I562
sg25
S'Y'
sg15
(lp4525
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4526
S'space'
p4527
asg95
I3
sS'.thisIndex'
p4528
I3
sa(dp4529
g16
(lp4530
S'k'
asg18
S'N'
sS'.thisRepN'
p4531
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4532
I2
sS'.thisN'
p4533
I563
sg25
S'Y'
sg15
(lp4534
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4535
S'k'
asg95
I8
sS'.thisIndex'
p4536
I8
sa(dp4537
g16
(lp4538
S'k'
asg18
S'Y'
sS'.thisRepN'
p4539
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4540
I3
sS'.thisN'
p4541
I564
sg25
S'Y'
sg15
(lp4542
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4543
I5
sa(dp4544
g16
(lp4545
S'd'
asg18
S'N'
sS'.thisRepN'
p4546
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4547
I4
sS'.thisN'
p4548
I565
sg25
S'Y'
sg15
(lp4549
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4550
S'space'
p4551
asg95
I1
sS'.thisIndex'
p4552
I1
sa(dp4553
g16
(lp4554
S'd'
asg18
S'N'
sS'.thisRepN'
p4555
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4556
I5
sS'.thisN'
p4557
I566
sg25
S'Y'
sg15
(lp4558
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4559
S'd'
asg95
I8
sS'.thisIndex'
p4560
I8
sa(dp4561
g16
(lp4562
S'd'
asg18
S'N'
sS'.thisRepN'
p4563
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4564
I6
sS'.thisN'
p4565
I567
sg25
S'Y'
sg15
(lp4566
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4567
S'space'
p4568
asg95
I5
sS'.thisIndex'
p4569
I5
sa(dp4570
g16
(lp4571
S'd'
asg18
S'N'
sS'.thisRepN'
p4572
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4573
I7
sS'.thisN'
p4574
I568
sg25
S'Y'
sg15
(lp4575
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4576
S'space'
p4577
asg95
I5
sS'.thisIndex'
p4578
I5
sa(dp4579
g16
(lp4580
S'd'
asg18
S'N'
sS'.thisRepN'
p4581
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4582
I8
sS'.thisN'
p4583
I569
sg25
S'Y'
sg15
(lp4584
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4585
S'space'
p4586
asg95
I9
sS'.thisIndex'
p4587
I9
sa(dp4588
g16
(lp4589
S'k'
asg18
S'Y'
sS'.thisRepN'
p4590
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4591
I9
sS'.thisN'
p4592
I570
sg25
S'Y'
sg15
(lp4593
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4594
S'space'
p4595
asg95
I6
sS'.thisIndex'
p4596
I6
sa(dp4597
g16
(lp4598
S'd'
asg18
S'Y'
sS'.thisRepN'
p4599
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4600
I10
sS'.thisN'
p4601
I571
sg25
S'Y'
sg15
(lp4602
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4603
S'space'
p4604
asg95
I4
sS'.thisIndex'
p4605
I4
sa(dp4606
g16
(lp4607
S'k'
asg18
S'N'
sS'.thisRepN'
p4608
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4609
I0
sS'.thisN'
p4610
I572
sg25
S'Y'
sg15
(lp4611
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4612
I7
sa(dp4613
g16
(lp4614
S'd'
asg18
S'N'
sS'.thisRepN'
p4615
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4616
I1
sS'.thisN'
p4617
I573
sg25
S'Y'
sg15
(lp4618
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4619
S'space'
p4620
asg95
I5
sS'.thisIndex'
p4621
I5
sa(dp4622
g16
(lp4623
S'k'
asg18
S'N'
sS'.thisRepN'
p4624
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4625
I2
sS'.thisN'
p4626
I574
sg25
S'Y'
sg15
(lp4627
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4628
S'space'
p4629
asg95
I5
sS'.thisIndex'
p4630
I5
sa(dp4631
g16
(lp4632
S'k'
asg18
S'Y'
sS'.thisRepN'
p4633
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4634
I3
sS'.thisN'
p4635
I575
sg25
S'Y'
sg15
(lp4636
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4637
S'space'
p4638
asg95
I0
sS'.thisIndex'
p4639
I0
sa(dp4640
g16
(lp4641
S'd'
asg18
S'N'
sS'.thisRepN'
p4642
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4643
I4
sS'.thisN'
p4644
I576
sg25
S'Y'
sg15
(lp4645
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4646
I9
sa(dp4647
g16
(lp4648
S'k'
asg18
S'N'
sS'.thisRepN'
p4649
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4650
I5
sS'.thisN'
p4651
I577
sg25
S'Y'
sg15
(lp4652
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4653
I0
sa(dp4654
g16
(lp4655
S'k'
asg18
S'Y'
sS'.thisRepN'
p4656
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4657
I6
sS'.thisN'
p4658
I578
sg25
S'Y'
sg15
(lp4659
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4660
I0
sa(dp4661
g16
(lp4662
S'k'
asg18
S'N'
sS'.thisRepN'
p4663
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4664
I7
sS'.thisN'
p4665
I579
sg25
S'Y'
sg15
(lp4666
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4667
I1
sa(dp4668
g18
S'N'
sS'.thisRepN'
p4669
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4670
I8
sS'.thisN'
p4671
I580
sg25
S'Y'
sg15
Nsg30
VF
sg17
S'Timed out'
p4672
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4673
I10
sa(dp4674
g16
(lp4675
S'k'
asg18
S'N'
sS'.thisRepN'
p4676
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4677
I9
sS'.thisN'
p4678
I581
sg25
S'Y'
sg15
(lp4679
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4680
I6
sa(dp4681
g16
(lp4682
S'k'
asg18
S'N'
sS'.thisRepN'
p4683
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4684
I10
sS'.thisN'
p4685
I582
sg25
S'Y'
sg15
(lp4686
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4687
I9
sa(dp4688
g16
(lp4689
S'd'
asg18
S'Y'
sS'.thisRepN'
p4690
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4691
I0
sS'.thisN'
p4692
I583
sg25
S'Y'
sg15
(lp4693
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4694
I6
sa(dp4695
g16
(lp4696
S'k'
asg18
S'Y'
sS'.thisRepN'
p4697
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4698
I1
sS'.thisN'
p4699
I584
sg25
S'Y'
sg15
(lp4700
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4701
I6
sa(dp4702
g16
(lp4703
S'd'
asg18
S'N'
sS'.thisRepN'
p4704
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4705
I2
sS'.thisN'
p4706
I585
sg25
S'Y'
sg15
(lp4707
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4708
I7
sa(dp4709
g16
(lp4710
S'd'
asg18
S'N'
sS'.thisRepN'
p4711
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4712
I3
sS'.thisN'
p4713
I586
sg25
S'Y'
sg15
(lp4714
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4715
I4
sa(dp4716
g16
(lp4717
S'k'
asg18
S'N'
sS'.thisRepN'
p4718
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4719
I4
sS'.thisN'
p4720
I587
sg25
S'Y'
sg15
(lp4721
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4722
I1
sa(dp4723
g16
(lp4724
S'd'
asg18
S'Y'
sS'.thisRepN'
p4725
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4726
I5
sS'.thisN'
p4727
I588
sg25
S'Y'
sg15
(lp4728
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4729
S'space'
p4730
asg95
I3
sS'.thisIndex'
p4731
I3
sa(dp4732
g16
(lp4733
S'k'
asg18
S'Y'
sS'.thisRepN'
p4734
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4735
I6
sS'.thisN'
p4736
I589
sg25
S'Y'
sg15
(lp4737
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4738
S'space'
p4739
asg95
I10
sS'.thisIndex'
p4740
I10
sa(dp4741
g16
(lp4742
S'k'
asg18
S'Y'
sS'.thisRepN'
p4743
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4744
I7
sS'.thisN'
p4745
I590
sg25
S'Y'
sg15
(lp4746
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4747
S'space'
p4748
asg95
I10
sS'.thisIndex'
p4749
I10
sa(dp4750
g16
(lp4751
S'k'
asg18
S'Y'
sS'.thisRepN'
p4752
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4753
I8
sS'.thisN'
p4754
I591
sg25
S'Y'
sg15
(lp4755
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4756
S'space'
p4757
asg95
I3
sS'.thisIndex'
p4758
I3
sa(dp4759
g16
(lp4760
S'k'
asg18
S'N'
sS'.thisRepN'
p4761
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4762
I9
sS'.thisN'
p4763
I592
sg25
S'Y'
sg15
(lp4764
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4765
I5
sa(dp4766
g16
(lp4767
S'd'
asg18
S'Y'
sS'.thisRepN'
p4768
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4769
I10
sS'.thisN'
p4770
I593
sg25
S'Y'
sg15
(lp4771
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4772
I8
sa(dp4773
g16
(lp4774
S'k'
asg18
S'Y'
sS'.thisRepN'
p4775
I54
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4776
I0
sS'.thisN'
p4777
I594
sg25
S'Y'
sg15
(lp4778
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4779
I10
sa(dp4780
g16
(lp4781
S'k'
asg18
S'N'
sS'.thisRepN'
p4782
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4783
I1
sS'.thisN'
p4784
I595
sg25
S'Y'
sg15
(lp4785
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4786
I1
sa(dp4787
g16
(lp4788
S'k'
asg18
S'N'
sS'.thisRepN'
p4789
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4790
I2
sS'.thisN'
p4791
I596
sg25
S'Y'
sg15
(lp4792
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4793
I1
sa(dp4794
g16
(lp4795
S'k'
asg18
S'N'
sS'.thisRepN'
p4796
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4797
I3
sS'.thisN'
p4798
I597
sg25
S'Y'
sg15
(lp4799
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4800
I2
sa(dp4801
g16
(lp4802
S'd'
asg18
S'Y'
sS'.thisRepN'
p4803
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4804
I4
sS'.thisN'
p4805
I598
sg25
S'Y'
sg15
(lp4806
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4807
S'space'
p4808
asg95
I10
sS'.thisIndex'
p4809
I10
sa(dp4810
g16
(lp4811
S'k'
asg18
S'N'
sg22
I30
sg26
S'Y'
sS'.thisN'
p4812
I599
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4813
I5
sS'.thisRepN'
p4814
I54
sg21
I37
sg25
S'Y'
sg23
I18
sg15
(lp4815
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4816
S'space'
p4817
asg95
I1
sS'.thisIndex'
p4818
I1
sasS'loops'
p4819
(lp4820
g1
(g35
g3
NtRp4821
(dp4822
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4823
sg40
(lp4824
sg41
I73972048
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4825
g48
g49
(g50
g51
g52
S'b'
tRp4826
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4827
(I1
(I600
I1
tg55
I00
S'\x00\x80\xa2C\x00\x00hC\x00\x80\xc1C\x00\x80\xe9C\x00\x80\xcfC\x00\x80\x82C\x00\x00\x8aB\x00\x00{C\x00\x00\xbcC\x00\x00\xfbC\x00\x00QC\x00\x00\x05C\x00\x00\xfeB\x00\xc0\x07D\x00\x80\x86C\x00\x00\'C\x00\x00tC\x00\x00\xb8C\x00\x80\xa1C\x00\x80\xf7C\x00\x00@C\x00\x00\x9dC\x00\x80\xd5C\x00\x80\xd2C\x00\x00\x0bD\x00\x00\xb7C\x00\x00\xbaC\x00\x00\x11D\x00\x00\x8bC\x00\x00\xeaB\x00\x80\xf8C\x00@\x0eD\x00\x00ZC\x00\x80\xc8C\x00\x00\x80A\x00\x00\xd4C\x00\x00\xd9C\x00\x80\xebC\x00\x00aC\x00\x80\x9aC\x00\x80\xc9C\x00\x80\xe2C\x00\x00\x7fC\x00\x00\xcaB\x00\x80\xfaC\x00\x80\xd9C\x00\x00\xaeB\x00\x00\xdaC\x00@\x07D\x00\x00\x1cB\x00\x00"C\x00\x00\x98B\x00\x00uC\x00@\x12D\x00\x00\xd4B\x00\x00\xe2C\x00\x00PC\x00\x80\x12D\x00\x80\x15D\x00\x80\x08D\x00\x00\xf2C\x00\x80\xecC\x00\x00\x84B\x00\x00\xdbC\x00\x00xC\x00\x00@B\x00\x00\xa4C\x00\x80\xf2C\x00\x00\rC\x00\x00\x08C\x00\x80\xe6C\x00\x00|B\x00\x80\x84C\x00\x00wC\x00\x00\xe0B\x00\x80\xc4C\x00\x00\x17C\x00\x00@@\x00\x80\xc3C\x00\x00\xafC\x00\x00\xd5C\x00\x00\xe0A\x00\x80\xcdC\x00\x80\xfcC\x00@\nD\x00\x00\x8fC\x00\x00\x99C\x00\x00\x04B\x00\x00*C\x00\x80\xc0C\x00\x00<C\x00\x00\xe8C\x00\x00OC\x00\x00\xfeC\x00\x002C\x00\x00\xb3C\x00\x80\x89C\x00\xc0\x0eD\x00\x00\\C\x00\x80\xedC\x00\x80\x99C\x00\x00\x83C\x00\x00\xb5C\x00\x80\x9fC\x00\x80\xf0C\x00\x00\x15C\x00\x00\tC\x00\x80\rD\x00\x80\xa7C\x00\x00\x19C\x00\x00\xbaB\x00\x80\x98C\x00\x00\xdaB\x00\x00\x86B\x00\x00\xccC\x00\x80\x96C\x00\x00\x9cB\x00\x00\xf4B\x00\x00\xb2C\x00\x80\xcbC\x00\x00\x01C\x00\x80\xacC\x00\x00\x10A\x00\x000C\x00\x00MC\x00\x00\x95C\x00\x80\x90C\x00\x80\xf6C\x00\x005C\x00\x00YC\x00\x00\xbeC\x00\x00\x0eD\x00\x00(B\x00\x00\xe6C\x00\xc0\x03D\x00\x00\xa8A\x00\x00BC\x00\x00\x94C\x00\x00gC\x00\x00\xecC\x00\x80\xfeC\x00\x80\xaaC\x00\x00\x10C\x00\x80\xb8C\x00\x00\xc5C\x00@\x14D\x00\x00\x88A\x00@\x00D\x00\x00\nD\x00\x00\x04D\x00\x80\x01D\x00@\rD\x00\x00\xa0@\x00\x009C\x00\x00\xe5C\x00\x80\xcaC\x00\x00\x07D\x00\x006C\x00\x00DB\x00\x80\x8fC\x00\xc0\tD\x00\x00\xc1C\x00\x80\xc6C\x00\x00rC\x00\x80\x8cC\x00\x80\x87C\x00\x00\x00C\x00\x80\tD\x00\x00`A\x00\x000A\x00\x00\xbfC\x00\xc0\nD\x00\x00\xbbC\x00\x00\xf3C\x00\x00zC\x00\x00\xc6C\x00\x00\xcfC\x00\x00\xf8B\x00\x80\x9eC\x00\x80\xd1C\x00\x00\xfcB\x00\x00\xccB\x00\xc0\x08D\x00\x00\xeeC\x00\x00\xe8B\x00\x00\x91C\x00\x00\xa3C\x00\x00mC\x00\x80\xe5C\x00\xc0\rD\x00\x00\x16C\x00\x00pB\x00\x00UC\x00\x00\xbeB\x00\x00TC\x00\x00\xc2C\x00\xc0\x11D\x00\x00\xe4B\x00\x00\x8eB\x00\x00IC\x00\x00\xd2B\x00\x00^C\x00\x00\x9aC\x00\x00<B\x00\x00\xb8A\x00\x00\xfdC\x00\x00\xadC\x00\x80\xa9C\x00\x00\x96C\x00\x00\x86C\x00\x00\xacB\x00\x80\xdbC\x00\x00\xb4B\x00\x00\x9aB\x00\x00kC\x00\x80\x91C\x00\x80\xabC\x00\x00\x13D\x00\x00\xddC\x00\x80\xeaC\x00\x00XB\x00\x00)C\x00\x80\x93C\x00\x80\xbaC\x00\x00\x14C\x00@\x04D\x00\x00\xb0B\x00\x80\x8bC\x00\x00_C\x00\x00\xe0C\x00\x00/C\x00\x80\x9bC\x00\x00\xd1C\x00\x00\x07C\x00\x00\x87C\x00\x00\x8eC\x00\x008C\x00\x00\xa2B\x00\x00\x11C\x00\x00HB\x00\x00\x81C\x00\x00\x02D\x00\x00tB\x00@\x02D\x00\x00\xd0A\x00\x80\x9dC\x00\x00\xa8B\x00\x00\xe9C\x00\x00\xcaC\x00\x00\xa4B\x00\x00VC\x00\xc0\x06D\x00\x00}C\x00\x00\x14B\x00\x00\xe7C\x00\x007C\x00\x80\x85C\x00\x80\xc5C\x00\x001C\x00\x80\x95C\x00\x00\x85C\x00\x00\xc8C\x00\x00=C\x00\x00\xabC\x00\x00\x0cB\x00\xc0\x05D\x00\x80\xe1C\x00\x80\x83C\x00\x00[C\x00\x00\x1aC\x00\x00\xe1C\x00\x80\xaeC\x00\x00\xedC\x00\x00]C\x00\x00\xc0C\x00\x00\xb2B\x00\x00\x1fC\x00\x80\xe0C\x00\x00\xceB\x00\x00\x88B\x00\x00\x03D\x00\xc0\x04D\x00\x00\x10D\x00\x00\x90B\x00\x00\xbdC\x00\x00\xc0@\x00@\x0fD\x00\x80\x80C\x00\x00\x03C\x00\x00nC\x00@\x05D\x00\x80\x07D\x00\x00\xaeC\x00\x00\xfcC\x00\x00\x00D\x00\x00qC\x00@\x0cD\x00\x00|C\x00\x00\xf0A\x00\x00#C\x00\x00FC\x00\x00hB\x00\x00\nC\x00\x80\x0fD\x00\x80\x00D\x00\x00\x0fC\x00\x80\x9cC\x00\x80\x92C\x00\x80\xb9C\x00\x00 C\x00\x00\x92B\x00\x80\x10D\x00\x80\xccC\x00\x00\xc8A\x00\x00\xceC\x00\x80\x8dC\x00\x00!C\x00\x00\xf9C\x00\x00 B\x00\x00LB\x00\x00$B\x00\x80\x11D\x00\x00\xcbC\x00\x00XC\x00\x80\x02D\x00\x00\tD\x00\x80\x06D\x00\x80\xb6C\x00\x00PA\x00\x00\x15D\x00\x00\x8cC\x00\x00\x90A\x00\x00\x1eC\x00\x00\x0cC\x00\x00\xfaC\x00\x00\x00\x00\x00\x00\xb9C\x00\x00\x00A\x00\x80\xd0C\x00\xc0\x01D\x00@\x10D\x00\x00\xf5C\x00\x00eC\x00\x00\x8aC\x00\x00`C\x00\x00\x06D\x00\x00\x12C\x00\x00xB\x00@\x13D\x00\x00\xa5C\x00\x00\xc0A\x00\x00\x08D\x00\x00\xa6B\x00@\tD\x00\x00\x06C\x00\x004C\x00\x00yC\x00\x00\xe2B\x00\x80\x04D\x00\x00NC\x00\x00\\B\x00\x00;C\x00\x00>C\x00\x00\xa0B\x00\x80\xd8C\x00\x00\x14D\x00@\x11D\x00\x00sC\x00\xc0\x15D\x00\x00\x01D\x00\x00\xf1C\x00\x00(C\x00\xc0\x14D\x00\x80\x14D\x00\x00\xefC\x00\x80\xfbC\x00\x00\x80C\x00\xc0\x00D\x00\x80\x0bD\x00\x00AC\x00\x00%C\x00\x00\xacC\x00\x00\x93C\x00\x00\xfaB\x00\x00KC\x00\x00\xa0A\x00\x80\xfdC\x00\x80\xa8C\x00\x00\xbcB\x00\x80\xbdC\x00\x00\x9eB\x00\x00JC\x00\x00\x80?\x00\x00\xa9C\x00\x00\xa2C\x00@\x08D\x00\x00\xd8C\x00\x80\xb0C\x00\x00\xa6C\x00\x00SC\x00\x80\xb1C\x00\x00cC\x00\x00\x82B\x00\x00 A\x00\x00\x0eC\x00\x00\xd3C\x00\x80\xc7C\x00\x00\xb8B\x00\x00\xf0C\x00\x00\x92C\x00\x00\xe4C\x00\x80\xa6C\x00\x00\xffC\x00\x80\xbeC\x00\x00lB\x00\x80\xb5C\x00\x80\xdeC\x00\xc0\x02D\x00\x80\xddC\x00\x00\x90C\x00\x00\xb6C\x00\x00\xd0B\x00\x00\x98A\x00\x80\xa4C\x00\x00\x84C\x00\x80\xf4C\x00\x00\x04C\x00\x80\xa5C\x00\x00\xf8C\x00\x00\x8dC\x00\x00\xc4C\x00\x00\xc2B\x00\x00oC\x00\x00dB\x00\x00\x18B\x00\x00\xd8B\x00\x00&C\x00\x00\x9fC\x00\x00\x1bC\x00@\x0bD\x00\x00LC\x00\x80\xdcC\x00\x00+C\x00\x00\xe0@\x00\x00\xb6B\x00\x80\xb4C\x00\x80\xefC\x00\x00\x02C\x00\x80\xe4C\x00\x00\xb0A\x00\x80\x0eD\x00\x00GC\x00\x00\xc9C\x00\x00\x1dC\x00\x00\xf6B\x00\x00fC\x00\x80\xf3C\x00\x00\x0cD\x00\x00\x9bC\x00\x00\xdeB\x00\x00\xb1C\x00\x80\xd7C\x00\x00\x9cC\x00\x00\xd6B\x00\x80\x8aC\x00\x00\xd0C\x00\x00-C\x00\x80\xceC\x00\x00EC\x00\x00\xe6B\x00\x00dC\x00\x80\xdaC\x00\x000B\x00\x00\xf6C\x00\xc0\x0cD\x00\x00\xeeB\x00\x008B\x00\x00WC\x00\x80\xe8C\x00\x80\x0cD\x00\x003C\x00\x00\xa0C\x00\x00\x98C\x00\x00\xc4B\x00\x00,B\x00\x00\xe3C\x00\xc0\x12D\x00\x80\xa3C\x00\x00\x05D\x00\x00\xdcB\x00\x00\xdeC\x00\x00PB\x00\x00\xd2C\x00\x00\x00@\x00\x00\xdcC\x00\x00bC\x00\x80\xf1C\x00\x00@A\x00\x80\xb3C\x00\x00\xaaC\x00\x00\x82C\x00\x80\xd6C\x00\x80\xdfC\x00\xc0\x10D\x00\x80\xb2C\x00@\x15D\x00\x00lC\x00\x00\xe8A\x00\x00\x0fD\x00\x00\x13C\x00\x00\x80@\x00\xc0\x13D\x00\x00\xeaC\x00\x00DC\x00\x80\xd3C\x00\x80\xa0C\x00\x80\xf5C\x00\x00\xc8B\x00\x00\xaaB\x00@\x03D\x00\x00\xf8A\x00\x80\xeeC\x00\x00\xd7C\x00\xc0\x0fD\x00\x80\xe3C\x00\x00\xb4C\x00\x80\xbbC\x00\x00`B\x00\x00pC\x00\x00\x96B\x00\xc0\x0bD\x00\x00vC\x00\x00~C\x00\x00\x12D\x00\x00\xf7C\x00\x00RC\x00\x80\x13D\x00\x00\xa8C\x00\x80\x05D\x00\x80\x81C\x00\x80\nD\x00\x00\x94B\x00\x00\x97C\x00\x00CC\x00\x00\x10B\x00\x00\xebC\x00\x00.C\x00\x00\x88C\x00\x80\x94C\x00\x004B\x00\x00\x80B\x00\x00\x18C\x00\x00$C\x00\x80\x88C\x00\x00\xc7C\x00\x00\x0bC\x00\x00\rD\x00\x00\xdfC\x00\x00:C\x00\x00\xf2B\x00\x00HC\x00\x00iC\x00\x80\x03D\x00\x00,C\x00\x80\xafC\x00\x80\xbcC\x00\x00\x08B\x00\x00\x00B\x00\x00\xc3C\x00@\x06D\x00\x00\x89C\x00\x00\xc0B\x00\x00\x1cC\x00\x80\xadC\x00\x00\x8cB\x00@\x01D\x00\x00pA\x00\x80\x8eC\x00\x80\xbfC\x00\x80\xffC\x00\x00\xb0C\x00\x00\xd6C\x00\x80\xd4C\x00\x00\xecB\x00\x80\xc2C\x00\x80\xb7C\x00\x00\xc6B\x00\x00jC\x00\x00\xf4C\x00\x80\xe7C\x00\x00?C\x00\x00\x9eC\x00\x00TB\x00\x00\xa7C\x00\x80\xf9C\x00\x80\x97C\x00\x00\xd8A\x00\x00\xf0B\x00\x00\xcdC\x00\x00\xa1C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4828
(dp4829
g60
(dp4830
g48
I01
sg56
I01
ssg62
g4821
sg63
(lp4831
g48
ag56
asg65
(lp4832
I600
aI1
asbsg67
S'random'
p4833
sg69
g70
(g51
(I0
tS'b'
tRp4834
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4835
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'O\x01\x00\x00\x88\x01\x00\x00\xed\x01\x00\x00M\x00\x00\x00\xfe\x01\x00\x00\x98\x00\x00\x00\x1d\x01\x00\x00\xbb\x01\x00\x00Q\x01\x00\x00z\x00\x00\x00\x93\x01\x00\x00\xa9\x00\x00\x00\xf1\x01\x00\x00H\x01\x00\x00\xa8\x00\x00\x00@\x02\x00\x00"\x00\x00\x00\x92\x00\x00\x00K\x01\x00\x00\xa6\x01\x00\x00\x81\x01\x00\x00\x87\x00\x00\x00\xc1\x01\x00\x00\xcc\x00\x00\x00^\x01\x00\x009\x01\x00\x00\xf4\x00\x00\x00T\x02\x00\x00Q\x00\x00\x00\xfb\x01\x00\x00*\x01\x00\x00\x08\x02\x00\x007\x02\x00\x00W\x00\x00\x006\x02\x00\x00\x08\x01\x00\x00 \x02\x00\x00\xfd\x00\x00\x00\xb2\x01\x00\x001\x00\x00\x00>\x01\x00\x00@\x01\x00\x00\x84\x00\x00\x00\xe4\x01\x00\x00\xd8\x01\x00\x00%\x02\x00\x00\xdc\x01\x00\x00\xcb\x00\x00\x00A\x00\x00\x00\x9e\x00\x00\x00\xef\x00\x00\x00?\x01\x00\x00\xeb\x01\x00\x00P\x02\x00\x00\xdc\x00\x00\x00h\x01\x00\x00\x0f\x02\x00\x00\xb1\x01\x00\x00-\x01\x00\x00\x9e\x01\x00\x00\xbf\x00\x00\x00\xf2\x00\x00\x00[\x01\x00\x00G\x00\x00\x00&\x02\x00\x00\x92\x01\x00\x00>\x00\x00\x00q\x00\x00\x00\x17\x01\x00\x00\x06\x00\x00\x00>\x02\x00\x00\xc6\x00\x00\x00\x1b\x01\x00\x006\x01\x00\x00\x1d\x02\x00\x00\x11\x02\x00\x003\x00\x00\x00\xd5\x00\x00\x00t\x00\x00\x00\x86\x01\x00\x00k\x01\x00\x00\xed\x00\x00\x00\xf9\x00\x00\x00`\x01\x00\x00\xf6\x00\x00\x00\x06\x02\x00\x00\xd2\x00\x00\x00.\x00\x00\x00\xe2\x00\x00\x00\x13\x01\x00\x00\xd4\x00\x00\x00\xbc\x01\x00\x00\x97\x01\x00\x00n\x00\x00\x00\x84\x01\x00\x00\xc1\x00\x00\x00;\x02\x00\x00\xaf\x01\x00\x00\xe3\x01\x00\x00J\x02\x00\x00\x05\x02\x00\x00+\x00\x00\x00\xb5\x00\x00\x00\x16\x01\x00\x00\xa5\x01\x00\x00\xc8\x00\x00\x006\x00\x00\x00\xcf\x01\x00\x00\xb3\x01\x00\x00p\x00\x00\x00\xe9\x01\x00\x00\xcb\x01\x00\x00J\x00\x00\x00e\x01\x00\x00\xc5\x00\x00\x00\xd5\x01\x00\x00\xb8\x00\x00\x00\x1d\x00\x00\x00G\x02\x00\x00\xdb\x01\x00\x00U\x02\x00\x00/\x02\x00\x00u\x00\x00\x00\xc6\x01\x00\x00\xb1\x00\x00\x00\x7f\x01\x00\x00\xb4\x00\x00\x00\x0c\x00\x00\x00\xa6\x00\x00\x00x\x00\x00\x00\xbf\x01\x00\x00 \x01\x00\x00\xaa\x01\x00\x00\x0b\x00\x00\x00b\x01\x00\x00\xe9\x00\x00\x00E\x00\x00\x00j\x00\x00\x00.\x01\x00\x00+\x02\x00\x00M\x01\x00\x00D\x00\x00\x00\x94\x01\x00\x001\x01\x00\x00\x8e\x00\x00\x00\xee\x00\x00\x00Z\x01\x00\x00\xfd\x01\x00\x00\xe0\x00\x00\x00i\x00\x00\x00\xbe\x00\x00\x00L\x00\x00\x00\'\x02\x00\x00m\x00\x00\x00\r\x01\x00\x00\xb6\x01\x00\x00<\x02\x00\x00\xc5\x01\x00\x00L\x01\x00\x00\x14\x01\x00\x005\x01\x00\x00<\x01\x00\x002\x00\x00\x00+\x01\x00\x00(\x02\x00\x00|\x01\x00\x00\xb4\x01\x00\x00\x0f\x00\x00\x00s\x01\x00\x00\xdd\x00\x00\x00X\x00\x00\x00\xba\x01\x00\x003\x02\x00\x00\xd2\x01\x00\x00"\x02\x00\x00\xe6\x00\x00\x00{\x00\x00\x00\x02\x01\x00\x00^\x00\x00\x00\xe0\x01\x00\x00c\x01\x00\x00\x80\x00\x00\x00\x9d\x00\x00\x00\xff\x00\x00\x00\xec\x00\x00\x00\x99\x00\x00\x00.\x02\x00\x00i\x01\x00\x00Z\x00\x00\x00\x06\x01\x00\x00j\x01\x00\x00N\x02\x00\x00\x14\x00\x00\x00{\x01\x00\x00\x88\x00\x00\x00\x1f\x02\x00\x00\x01\x02\x00\x00\xd4\x01\x00\x00,\x01\x00\x00\xc3\x01\x00\x000\x02\x00\x00\xc7\x00\x00\x00\x87\x01\x00\x00\x80\x01\x00\x00\xb8\x01\x00\x00|\x00\x00\x00g\x01\x00\x00\\\x00\x00\x008\x00\x00\x00\n\x00\x00\x00\x17\x02\x00\x00\x8f\x01\x00\x00\xc2\x00\x00\x00\xc0\x00\x00\x00\xfa\x00\x00\x00\xdd\x01\x00\x00C\x01\x00\x00\x81\x00\x00\x00 \x00\x00\x00\x0c\x01\x00\x00b\x00\x00\x00\x11\x01\x00\x00\xc9\x00\x00\x00\xe4\x00\x00\x00X\x01\x00\x00&\x00\x00\x00\xef\x01\x00\x00\x91\x01\x00\x00\xd6\x01\x00\x00V\x01\x00\x00\xc7\x01\x00\x00\x8a\x00\x00\x00\x01\x00\x00\x001\x02\x00\x00K\x02\x00\x00\xd6\x00\x00\x00\xfa\x01\x00\x00\xbb\x00\x00\x00!\x01\x00\x00\xb0\x01\x00\x00\x10\x02\x00\x00\'\x01\x00\x00\xa3\x00\x00\x00o\x01\x00\x00\x10\x00\x00\x004\x00\x00\x00\x13\x02\x00\x00I\x00\x00\x00@\x00\x00\x00d\x01\x00\x00\xae\x00\x00\x00\x07\x00\x00\x00)\x01\x00\x00\xfc\x00\x00\x00\x14\x02\x00\x00*\x00\x00\x00x\x01\x00\x00\x1f\x01\x00\x00\xf0\x00\x00\x00\x1b\x02\x00\x00\xf4\x01\x00\x00\x05\x00\x00\x00e\x00\x00\x00\x0b\x01\x00\x00\xa8\x01\x00\x00H\x00\x00\x00\x04\x01\x00\x00\x00\x01\x00\x00\xd1\x00\x00\x00\x0e\x00\x00\x00\xea\x00\x00\x00\xa5\x00\x00\x00#\x02\x00\x00)\x02\x00\x00:\x02\x00\x00`\x00\x00\x00W\x01\x00\x00\xd0\x01\x00\x00\x1c\x00\x00\x00\xe3\x00\x00\x00J\x01\x00\x00\xa4\x00\x00\x00\xad\x01\x00\x00;\x01\x00\x00\xeb\x00\x00\x00A\x02\x00\x00U\x00\x00\x00\x9f\x00\x00\x00\xa3\x01\x00\x00~\x00\x00\x00\xb9\x00\x00\x00\xd7\x00\x00\x00\x99\x01\x00\x003\x01\x00\x00~\x01\x00\x00\xde\x00\x00\x00\x89\x00\x00\x00$\x02\x00\x00}\x00\x00\x00\x03\x01\x00\x00\xd0\x00\x00\x00s\x00\x00\x00\x1e\x02\x00\x00S\x02\x00\x00\xe2\x01\x00\x00o\x00\x00\x00V\x00\x00\x00d\x00\x00\x00\xca\x00\x00\x00\'\x00\x00\x00\xca\x01\x00\x00\xe7\x00\x00\x00\xce\x01\x00\x002\x01\x00\x00\x15\x00\x00\x00\xf5\x00\x00\x00O\x02\x00\x00\xb2\x00\x00\x00\xb5\x01\x00\x00g\x00\x00\x00\xe1\x01\x00\x00\x03\x02\x00\x00W\x02\x00\x00\x12\x00\x00\x00\x8a\x01\x00\x00\x00\x00\x00\x00\xba\x00\x00\x00\xe7\x01\x00\x00B\x00\x00\x00\xa7\x01\x00\x00]\x01\x00\x00\xab\x01\x00\x00\x8e\x01\x00\x00\x9b\x01\x00\x00Q\x02\x00\x00l\x00\x00\x00\x19\x02\x00\x00\x83\x01\x00\x00\x89\x01\x00\x00\xcf\x00\x00\x00\xf3\x01\x00\x00\x8d\x00\x00\x00\x07\x01\x00\x00\xd8\x00\x00\x00}\x01\x00\x00y\x00\x00\x00\xce\x00\x00\x00=\x02\x00\x00$\x01\x00\x00\x0f\x01\x00\x00O\x00\x00\x004\x02\x00\x00D\x02\x00\x00\x8d\x01\x00\x00\xcc\x01\x00\x00\x90\x01\x00\x00v\x00\x00\x00\xf8\x01\x00\x00_\x00\x00\x00\xf2\x01\x00\x00\r\x02\x00\x00\xbd\x01\x00\x00f\x00\x00\x00\x9f\x01\x00\x00\xa4\x01\x00\x00G\x01\x00\x00\x19\x00\x00\x00I\x02\x00\x00\x11\x00\x00\x00\x8f\x00\x00\x00P\x01\x00\x004\x01\x00\x00\x1a\x00\x00\x00\xdf\x00\x00\x00\xac\x00\x00\x00\x0e\x02\x00\x00\x08\x00\x00\x005\x02\x00\x00\x1c\x01\x00\x00\x85\x01\x00\x00\x82\x00\x00\x00\x9d\x01\x00\x00\xaa\x00\x00\x00B\x02\x00\x00\x12\x01\x00\x00Y\x00\x00\x00\xa1\x00\x00\x00\x02\x00\x00\x00\xc3\x00\x00\x00H\x02\x00\x008\x02\x00\x00N\x00\x00\x00\xae\x01\x00\x00K\x00\x00\x00\x90\x00\x00\x00\x01\x01\x00\x00\xaf\x00\x00\x00\xa2\x00\x00\x00*\x02\x00\x00\x96\x01\x00\x00\x05\x01\x00\x00!\x00\x00\x00\xc4\x01\x00\x00(\x00\x00\x00\xf8\x00\x00\x00\x9b\x00\x00\x00B\x01\x00\x00w\x00\x00\x00r\x00\x00\x008\x01\x00\x00V\x02\x00\x00R\x00\x00\x00:\x01\x00\x00\xd3\x01\x00\x00\xb0\x00\x00\x00\x04\x00\x00\x00\xd1\x01\x00\x00R\x01\x00\x00\xe8\x00\x00\x00\xb3\x00\x00\x00\xec\x01\x00\x00\x17\x00\x00\x00\x95\x01\x00\x00\x02\x02\x00\x00#\x00\x00\x00F\x02\x00\x00P\x00\x00\x00\x16\x00\x00\x00E\x02\x00\x00\xf5\x01\x00\x00\n\x02\x00\x00\xcd\x01\x00\x00\x8c\x01\x00\x00l\x01\x00\x00$\x00\x00\x00-\x00\x00\x00/\x00\x00\x00\xd7\x01\x00\x00?\x00\x00\x00\xd3\x00\x00\x00\xee\x01\x00\x00\xb9\x01\x00\x00\xda\x00\x00\x00\xa2\x01\x00\x00\xea\x01\x00\x00\xa0\x01\x00\x00-\x02\x00\x00\xf6\x01\x00\x00\xe5\x00\x00\x00\x15\x01\x00\x00\x0e\x01\x00\x00\n\x01\x00\x007\x00\x00\x00)\x00\x00\x00\xe5\x01\x00\x00\x0c\x02\x00\x00\x9a\x01\x00\x00\xc0\x01\x00\x00\x9a\x00\x00\x00\xbc\x00\x00\x00\x85\x00\x00\x00F\x00\x00\x00\xfe\x00\x00\x00M\x02\x00\x00[\x00\x00\x00\xde\x01\x00\x00\xf7\x00\x00\x00\x03\x00\x00\x00\x00\x02\x00\x00\xdb\x00\x00\x00!\x02\x00\x00%\x00\x00\x00\x8b\x00\x00\x00=\x00\x00\x00\x10\x01\x00\x00c\x00\x00\x00\xb7\x00\x00\x00\t\x02\x00\x00v\x01\x00\x00\xbe\x01\x00\x00\x98\x01\x00\x00h\x00\x00\x00r\x01\x00\x00\xf0\x01\x00\x00<\x00\x00\x00C\x00\x00\x00\xad\x00\x00\x00\xc8\x01\x00\x00L\x02\x00\x00\xa9\x01\x00\x00U\x01\x00\x00\x04\x02\x00\x00\xd9\x01\x00\x00\x7f\x00\x00\x00\x16\x02\x00\x00\x13\x00\x00\x00\xac\x01\x00\x00\x1e\x00\x00\x00=\x01\x00\x00R\x02\x00\x00N\x01\x00\x00,\x00\x00\x00\t\x00\x00\x00w\x01\x00\x00%\x01\x00\x00S\x00\x00\x00\xcd\x00\x00\x00\x82\x01\x00\x00]\x00\x00\x00\x8c\x00\x00\x00\x9c\x01\x00\x00C\x02\x00\x00&\x01\x00\x00\x93\x00\x00\x000\x01\x00\x00y\x01\x00\x00q\x01\x00\x00?\x02\x00\x00\x96\x00\x00\x00S\x01\x00\x00\xf1\x00\x00\x00\xf3\x00\x00\x00D\x01\x00\x00\xa1\x01\x00\x00\x18\x01\x00\x00\x07\x02\x00\x002\x02\x00\x00\x86\x00\x00\x00\x95\x00\x00\x00\xe1\x00\x00\x00f\x01\x00\x00\x19\x01\x00\x00\xe8\x01\x00\x00"\x01\x00\x00\x1a\x02\x00\x00\t\x01\x00\x00Y\x01\x00\x009\x02\x00\x00F\x01\x00\x00\xfb\x00\x00\x00\x9c\x00\x00\x000\x00\x00\x00#\x01\x00\x00\r\x00\x00\x00_\x01\x00\x00\x8b\x01\x00\x00;\x00\x00\x00\xb6\x00\x00\x00E\x01\x00\x00a\x01\x00\x00\xa7\x00\x00\x00\xa0\x00\x00\x00\x94\x00\x00\x00T\x00\x00\x00\x1c\x02\x00\x00\xab\x00\x00\x00\x18\x00\x00\x00\xb7\x01\x00\x00z\x01\x00\x00\x12\x02\x00\x00\xc9\x01\x00\x00(\x01\x00\x00\xdf\x01\x00\x00\xda\x01\x00\x00,\x02\x00\x00\x97\x00\x00\x00k\x00\x00\x00\xbd\x00\x00\x00\x83\x00\x00\x00\x1f\x00\x00\x00\xc2\x01\x00\x00a\x00\x00\x00\xfc\x01\x00\x00\x1e\x01\x00\x00/\x01\x00\x00\x0b\x02\x00\x00\x1a\x01\x00\x00T\x01\x00\x007\x01\x00\x00\xf7\x01\x00\x00\x1b\x00\x00\x00n\x01\x00\x00A\x01\x00\x00\xc4\x00\x00\x00\x15\x02\x00\x005\x00\x00\x009\x00\x00\x00\xe6\x01\x00\x00\xd9\x00\x00\x00\\\x01\x00\x00\x18\x02\x00\x00\xff\x01\x00\x00m\x01\x00\x00\x91\x00\x00\x00u\x01\x00\x00t\x01\x00\x00I\x01\x00\x00\xf9\x01\x00\x00:\x00\x00\x00p\x01\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4836
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4837
(g4835
S'p\x01\x00\x00'
tRp4838
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4839
I01
sb.