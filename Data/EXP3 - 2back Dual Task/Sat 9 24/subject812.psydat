ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject812
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 812
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VMale
p31
sS'age'
p32
V20
p33
ssS'loopsUnfinished'
p34
(lp35
g1
(cpsychopy.data
TrialHandler
p36
g3
NtRp37
(dp38
S'origin'
p39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p40
sS'thisTrial'
p41
I2
sS'_exp'
p42
I75938128
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p43
sS'thisRepN'
p44
I54
sg27
I01
sg28
NsS'data'
p45
g1
(cpsychopy.data
DataHandler
p46
c__builtin__
dict
p47
(dp48
S'ran'
p49
cnumpy.ma.core
_mareconstruct
p50
(cnumpy.ma.core
MaskedArray
p51
cnumpy
ndarray
p52
(I0
tp53
S'b'
tRp54
(I1
(I11
I55
tcnumpy
dtype
p55
(S'f4'
I0
I1
tRp56
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p57
g50
(g51
g52
g53
S'b'
tRp58
(I1
(I11
I55
tg56
I00
S'\x00\x00\x10B\x00\x00DB\x00\x00HB\x00\x00\\B\x00\x00\x90B\x00\x00\xe4B\x00\x00\xf0B\x00\x00\xf4B\x00\x00\tC\x00\x00\x18C\x00\x00\x1fC\x00\x00+C\x00\x00=C\x00\x00?C\x00\x00NC\x00\x00VC\x00\x00fC\x00\x00\x87C\x00\x80\x89C\x00\x00\x8aC\x00\x80\x8cC\x00\x00\x97C\x00\x00\x99C\x00\x80\x9fC\x00\x00\xa3C\x00\x80\xa5C\x00\x80\xb3C\x00\x80\xbbC\x00\x00\xc1C\x00\x80\xc6C\x00\x00\xd3C\x00\x80\xd4C\x00\x00\xd6C\x00\x00\xdbC\x00\x00\xdfC\x00\x00\xeaC\x00\x00\xebC\x00\x80\xf1C\x00\x80\xfdC\x00\x80\xfeC\x00\x00\x01D\x00\x80\x03D\x00\xc0\x03D\x00\x80\x06D\x00\x80\x08D\x00\x00\nD\x00@\nD\x00\x80\nD\x00@\x0cD\x00\x80\x0eD\x00\xc0\x0eD\x00\x80\x0fD\x00@\x14D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\xe0@\x00\x00\x00A\x00\x00 A\x00\x000A\x00\x00\x80A\x00\x00\x88A\x00\x00\xc0A\x00\x00hB\x00\x00\x80B\x00\x00\x88B\x00\x00\x9aB\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xeeB\x00\x00\xf6B\x00\x00\x08C\x00\x00\x12C\x00\x007C\x00\x009C\x00\x00;C\x00\x00BC\x00\x00SC\x00\x00TC\x00\x00_C\x00\x00eC\x00\x80\x81C\x00\x80\x85C\x00\x00\x96C\x00\x00\x9aC\x00\x00\xa5C\x00\x80\xb5C\x00\x80\xbaC\x00\x80\xc1C\x00\x00\xc3C\x00\x00\xc7C\x00\x00\xc9C\x00\x80\xd3C\x00\x00\xd4C\x00\x80\xd6C\x00\x80\xdcC\x00\x80\xdfC\x00\x00\xe9C\x00\x80\xeaC\x00\x80\xebC\x00\x80\xeeC\x00\x00\xefC\x00\x00\xf3C\x00\x00\xf7C\x00\x80\xf7C\x00@\x02D\x00\x00\x04D\x00\x80\x05D\x00@\rD\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8A\x00\x00\xe8A\x00\x00\xf0A\x00\x000B\x00\x00\x82B\x00\x00\xc0B\x00\x00\xdaB\x00\x00\xe2B\x00\x00\xfaB\x00\x00\x0fC\x00\x00\x1aC\x00\x00&C\x00\x00<C\x00\x00RC\x00\x00YC\x00\x00sC\x00\x00|C\x00\x80\x80C\x00\x00\x84C\x00\x80\x88C\x00\x00\x8fC\x00\x80\x98C\x00\x00\xa2C\x00\x80\xa2C\x00\x80\xabC\x00\x00\xacC\x00\x80\xadC\x00\x00\xafC\x00\x80\xb1C\x00\x00\xb2C\x00\x00\xb3C\x00\x80\xbeC\x00\x80\xc0C\x00\x80\xc2C\x00\x00\xc5C\x00\x00\xcaC\x00\x80\xcaC\x00\x80\xccC\x00\x80\xceC\x00\x00\xdaC\x00\x80\xe0C\x00\x00\xe3C\x00\x00\xf2C\x00\x00\xf6C\x00\x00\xf9C\x00\x00\xfcC\x00\x80\xffC\x00\xc0\x00D\x00\xc0\x01D\x00\x80\x02D\x00\x80\x04D\x00@\x07D\x00\x00\rD\x00\xc0\x15D\x00\x00\xb0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\x04B\x00\x00(B\x00\x00LB\x00\x00\x9cB\x00\x00\xc4B\x00\x00\xccB\x00\x00\x00C\x00\x00\x1cC\x00\x00$C\x00\x00(C\x00\x005C\x00\x00>C\x00\x00LC\x00\x00MC\x00\x00UC\x00\x00]C\x00\x00aC\x00\x00bC\x00\x00qC\x00\x00xC\x00\x00{C\x00\x00\x82C\x00\x80\x86C\x00\x00\x89C\x00\x00\x8cC\x00\x00\x8eC\x00\x80\x8fC\x00\x80\x94C\x00\x80\x96C\x00\x80\x99C\x00\x80\xa1C\x00\x80\xa4C\x00\x00\xaaC\x00\x00\xb5C\x00\x00\xb6C\x00\x00\xc2C\x00\x80\xc5C\x00\x80\xc7C\x00\x80\xc9C\x00\x00\xcdC\x00\x00\xceC\x00\x80\xe6C\x00\x00\xedC\x00\x80\xf2C\x00\x80\xf3C\x00\x00\xf5C\x00\x00\xf8C\x00\x80\x07D\x00\x00\tD\x00@\tD\x00\x80\x14D\x00\xc0\x14D\x00\x00\x80?\x00\x00`A\x00\x00pA\x00\x00\x08B\x00\x00\x18B\x00\x00@B\x00\x00dB\x00\x00tB\x00\x00\x8cB\x00\x00\xacB\x00\x00\xe6B\x00\x00\xecB\x00\x00\xfcB\x00\x00\x07C\x00\x00\x0eC\x00\x00\x14C\x00\x00\x15C\x00\x00*C\x00\x003C\x00\x00AC\x00\x00DC\x00\x00KC\x00\x00PC\x00\x00WC\x00\x00`C\x00\x00cC\x00\x00nC\x00\x00\x85C\x00\x80\x8bC\x00\x00\x9cC\x00\x00\xa9C\x00\x00\xbbC\x00\x00\xbeC\x00\x80\xc4C\x00\x00\xc6C\x00\x00\xd5C\x00\x80\xd7C\x00\x80\xdaC\x00\x00\xdcC\x00\x80\xe2C\x00\x80\xe3C\x00\x00\xe5C\x00\x00\xe7C\x00\x00\xe8C\x00\x80\xedC\x00@\x04D\x00\xc0\x04D\x00@\x06D\x00\x00\x07D\x00\x80\tD\x00\xc0\x0cD\x00\x80\rD\x00\xc0\rD\x00@\x12D\x00\x00\x14D\x00\x00\x80@\x00\x00\x90A\x00\x00$B\x00\x004B\x00\x00XB\x00\x00pB\x00\x00\xa4B\x00\x00\xaeB\x00\x00\xb4B\x00\x00\xb8B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xdcB\x00\x00\xfeB\x00\x00\x02C\x00\x00\x1dC\x00\x00 C\x00\x00"C\x00\x00#C\x00\x00/C\x00\x002C\x00\x00CC\x00\x00gC\x00\x00pC\x00\x00vC\x00\x00}C\x00\x00\x90C\x00\x80\x91C\x00\x00\x94C\x00\x80\xacC\x00\x80\xafC\x00\x00\xb4C\x00\x80\xb8C\x00\x80\xbfC\x00\x80\xc3C\x00\x80\xc8C\x00\x80\xcfC\x00\x00\xd0C\x00\x80\xd8C\x00\x00\xddC\x00\x00\xe0C\x00\x80\xe5C\x00\x00\xeeC\x00\x80\xf9C\x00\x80\x00D\x00\x00\x02D\x00\x00\x06D\x00\xc0\tD\x00\xc0\nD\x00@\x0bD\x00\x80\x0bD\x00@\x10D\x00\x80\x12D\x00@\x13D\x00\x00\x00\x00\x00\x00\xc0@\x00\x00PA\x00\x00\xb8A\x00\x00\xe0A\x00\x00,B\x00\x00<B\x00\x00PB\x00\x00|B\x00\x00\x84B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9eB\x00\x00\xc6B\x00\x00\xe0B\x00\x00\xf8B\x00\x00\x03C\x00\x00\x11C\x00\x00,C\x00\x000C\x00\x008C\x00\x00JC\x00\x00\\C\x00\x00mC\x00\x00oC\x00\x00wC\x00\x00\x83C\x00\x80\x84C\x00\x80\x97C\x00\x00\x9bC\x00\x80\x9bC\x00\x00\x9fC\x00\x00\xa4C\x00\x00\xa6C\x00\x80\xb2C\x00\x80\xb4C\x00\x80\xb9C\x00\x00\xbdC\x00\x00\xcbC\x00\x00\xccC\x00\x80\xdbC\x00\x00\xe6C\x00\x80\xefC\x00\x00\xfaC\x00@\x00D\x00\x80\x01D\x00@\x03D\x00\x00\x05D\x00\xc0\x05D\x00\xc0\x07D\x00\x00\x08D\x00\xc0\x08D\x00\x00\x0bD\x00@\x0eD\x00\x80\x10D\x00\xc0\x11D\x00\x00\xa0@\x00\x00\x10A\x00\x00\x98A\x00\x00\x00B\x00\x00`B\x00\x00xB\x00\x00\x8aB\x00\x00\xa2B\x00\x00\xd0B\x00\x00\x0cC\x00\x00\x16C\x00\x00\x19C\x00\x00EC\x00\x00FC\x00\x00GC\x00\x00HC\x00\x00OC\x00\x00XC\x00\x00[C\x00\x00jC\x00\x00yC\x00\x00\x81C\x00\x00\x88C\x00\x80\x8dC\x00\x00\x91C\x00\x80\x9aC\x00\x80\xa3C\x00\x80\xa9C\x00\x00\xb0C\x00\x00\xb7C\x00\x80\xb7C\x00\x00\xbcC\x00\x80\xbcC\x00\x00\xc4C\x00\x00\xcfC\x00\x00\xd1C\x00\x00\xd9C\x00\x80\xd9C\x00\x80\xddC\x00\x80\xdeC\x00\x80\xe9C\x00\x00\xf0C\x00\x80\xf0C\x00\x00\xf1C\x00\x80\xf6C\x00\x00\x03D\x00@\x05D\x00\xc0\x06D\x00@\x08D\x00\x80\x0cD\x00@\x11D\x00\x80\x11D\x00\x00\x15D\x00\x80\x15D\x00\x00\x00\x00\x00\x00\xa0A\x00\x00\xd8A\x00\x00TB\x00\x00lB\x00\x00\x86B\x00\x00\x8eB\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xc2B\x00\x00\xe8B\x00\x00\x05C\x00\x00\x06C\x00\x00\nC\x00\x00\x10C\x00\x00\x13C\x00\x00\x17C\x00\x00\x1bC\x00\x00!C\x00\x00\'C\x00\x00.C\x00\x00IC\x00\x00QC\x00\x00ZC\x00\x00dC\x00\x00hC\x00\x00tC\x00\x80\x82C\x00\x80\x83C\x00\x00\x8dC\x00\x00\x93C\x00\x00\x98C\x00\x80\xa0C\x00\x00\xa1C\x00\x00\xa7C\x00\x00\xa8C\x00\x00\xaeC\x00\x80\xaeC\x00\x00\xd2C\x00\x00\xdeC\x00\x00\xe1C\x00\x00\xe4C\x00\x80\xe4C\x00\x80\xe8C\x00\x00\xf4C\x00\x80\xf8C\x00\x80\xfaC\x00\x00\xfbC\x00\x00\xfdC\x00\x00\xfeC\x00\xc0\x0bD\x00\x00\x0cD\x00\x00\x12D\x00@\x15D\x00\x00\x0cB\x00\x00 B\x00\x00\x92B\x00\x00\xa6B\x00\x00\xceB\x00\x00\xd8B\x00\x00\x01C\x00\x00\x0bC\x00\x00\rC\x00\x00\x1eC\x00\x00%C\x00\x00-C\x00\x001C\x00\x006C\x00\x00:C\x00\x00@C\x00\x00^C\x00\x00iC\x00\x00rC\x00\x00uC\x00\x00~C\x00\x00\x7fC\x00\x00\x80C\x00\x80\x8aC\x00\x80\x8eC\x00\x00\x92C\x00\x80\x92C\x00\x80\x93C\x00\x80\x9cC\x00\x00\x9dC\x00\x80\x9dC\x00\x00\x9eC\x00\x80\x9eC\x00\x00\xa0C\x00\x80\xa6C\x00\x80\xb0C\x00\x00\xb8C\x00\x00\xbaC\x00\x80\xbdC\x00\x00\xbfC\x00\x80\xd0C\x00\x80\xd2C\x00\x00\xd7C\x00\x80\xe1C\x00\x00\xecC\x00\x80\xf4C\x00\x80\xfcC\x00\x00\xffC\x00@\x01D\x00\xc0\x02D\x00\xc0\x0fD\x00\x00\x10D\x00\xc0\x10D\x00\xc0\x12D\x00\xc0\x13D\x00\x00@@\x00\x00@A\x00\x00\xf8A\x00\x00\x14B\x00\x00\x1cB\x00\x008B\x00\x00\x94B\x00\x00\xa0B\x00\x00\xb6B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xd2B\x00\x00\xdeB\x00\x00\xeaB\x00\x00\xf2B\x00\x00\x04C\x00\x00)C\x00\x004C\x00\x00kC\x00\x00lC\x00\x00zC\x00\x00\x86C\x00\x80\x87C\x00\x00\x8bC\x00\x80\x90C\x00\x00\x95C\x00\x80\x95C\x00\x80\xa7C\x00\x80\xa8C\x00\x80\xaaC\x00\x00\xabC\x00\x00\xadC\x00\x00\xb1C\x00\x80\xb6C\x00\x00\xb9C\x00\x00\xc0C\x00\x00\xc8C\x00\x80\xcbC\x00\x80\xcdC\x00\x80\xd1C\x00\x80\xd5C\x00\x00\xd8C\x00\x00\xe2C\x00\x80\xe7C\x00\x80\xecC\x00\x80\xf5C\x00\x80\xfbC\x00\x00\x00D\x00\x00\x0eD\x00\x00\x0fD\x00@\x0fD\x00\x00\x11D\x00\x00\x13D\x00\x80\x13D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp59
(dp60
S'isNumeric'
p61
(dp62
g49
I01
sg57
I01
ssS'trials'
p63
g37
sS'dataTypes'
p64
(lp65
g49
ag57
asS'dataShape'
p66
(lp67
I11
aI55
asbsS'method'
p68
S'fullRandom'
p69
sS'sequenceIndices'
p70
cnumpy.core.multiarray
_reconstruct
p71
(g52
(I0
tS'b'
tRp72
(I1
(I11
I55
tg55
(S'O4'
I0
I1
tRp73
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp74
I2
aI1
aI3
aI3
aI2
aI0
aI6
aI1
aI8
aI6
aI5
aI10
aI10
aI2
aI2
aI9
aI6
aI1
aI7
aI8
aI6
aI5
aI9
aI5
aI2
aI0
aI2
aI3
aI1
aI0
aI1
aI10
aI7
aI1
aI4
aI2
aI4
aI10
aI7
aI1
aI4
aI9
aI4
aI10
aI2
aI1
aI8
aI9
aI1
aI7
aI4
aI0
aI10
aI6
aI3
aI4
aI10
aI6
aI4
aI5
aI7
aI8
aI3
aI8
aI1
aI10
aI0
aI8
aI8
aI8
aI2
aI9
aI2
aI7
aI2
aI3
aI8
aI2
aI9
aI6
aI0
aI3
aI10
aI7
aI9
aI0
aI10
aI9
aI3
aI0
aI0
aI0
aI6
aI10
aI9
aI1
aI10
aI10
aI3
aI3
aI3
aI0
aI6
aI4
aI4
aI5
aI7
aI10
aI8
aI3
aI1
aI6
aI1
aI9
aI10
aI4
aI1
aI6
aI5
aI1
aI6
aI1
aI8
aI6
aI3
aI8
aI5
aI0
aI7
aI1
aI9
aI9
aI8
aI9
aI4
aI9
aI5
aI10
aI6
aI8
aI6
aI2
aI10
aI10
aI7
aI1
aI1
aI2
aI8
aI4
aI5
aI4
aI4
aI4
aI1
aI8
aI8
aI2
aI2
aI2
aI0
aI4
aI0
aI4
aI7
aI10
aI4
aI3
aI0
aI6
aI1
aI7
aI10
aI10
aI3
aI2
aI6
aI4
aI1
aI5
aI3
aI4
aI3
aI8
aI1
aI1
aI7
aI9
aI9
aI1
aI10
aI10
aI1
aI6
aI8
aI9
aI2
aI2
aI7
aI7
aI3
aI3
aI3
aI9
aI10
aI7
aI2
aI8
aI5
aI3
aI2
aI0
aI5
aI4
aI3
aI0
aI2
aI9
aI5
aI8
aI5
aI4
aI3
aI10
aI4
aI8
aI4
aI7
aI5
aI9
aI0
aI2
aI1
aI8
aI9
aI10
aI10
aI0
aI6
aI3
aI4
aI10
aI5
aI2
aI10
aI4
aI7
aI3
aI4
aI3
aI8
aI5
aI2
aI7
aI6
aI2
aI10
aI10
aI0
aI5
aI8
aI4
aI1
aI1
aI8
aI5
aI9
aI1
aI6
aI6
aI0
aI1
aI9
aI9
aI7
aI7
aI1
aI8
aI4
aI0
aI5
aI8
aI5
aI10
aI7
aI4
aI4
aI0
aI4
aI0
aI4
aI3
aI9
aI4
aI0
aI3
aI10
aI6
aI7
aI3
aI3
aI5
aI0
aI9
aI2
aI10
aI10
aI6
aI9
aI9
aI1
aI5
aI3
aI1
aI7
aI7
aI8
aI7
aI1
aI9
aI6
aI2
aI2
aI7
aI6
aI5
aI4
aI5
aI10
aI2
aI6
aI1
aI6
aI10
aI0
aI4
aI0
aI9
aI10
aI10
aI8
aI5
aI8
aI4
aI5
aI0
aI9
aI4
aI3
aI4
aI3
aI6
aI3
aI1
aI0
aI0
aI9
aI6
aI9
aI2
aI8
aI2
aI2
aI5
aI4
aI5
aI1
aI2
aI1
aI7
aI0
aI8
aI0
aI6
aI3
aI8
aI10
aI9
aI1
aI7
aI6
aI4
aI6
aI5
aI7
aI1
aI5
aI2
aI9
aI3
aI7
aI9
aI8
aI10
aI5
aI10
aI3
aI9
aI7
aI8
aI6
aI1
aI1
aI3
aI7
aI4
aI4
aI7
aI3
aI10
aI8
aI9
aI8
aI9
aI0
aI10
aI8
aI0
aI10
aI2
aI7
aI3
aI7
aI0
aI2
aI1
aI4
aI1
aI7
aI10
aI8
aI6
aI7
aI6
aI0
aI5
aI10
aI9
aI10
aI0
aI1
aI7
aI2
aI5
aI6
aI6
aI10
aI8
aI2
aI5
aI4
aI9
aI7
aI8
aI5
aI9
aI6
aI5
aI0
aI2
aI8
aI6
aI10
aI8
aI7
aI7
aI8
aI2
aI9
aI7
aI4
aI8
aI5
aI6
aI9
aI4
aI2
aI5
aI4
aI4
aI5
aI5
aI0
aI7
aI2
aI10
aI5
aI6
aI5
aI6
aI5
aI6
aI10
aI9
aI0
aI7
aI8
aI10
aI3
aI8
aI1
aI6
aI4
aI8
aI9
aI1
aI5
aI9
aI0
aI5
aI8
aI1
aI4
aI7
aI8
aI1
aI5
aI3
aI6
aI2
aI3
aI9
aI0
aI9
aI6
aI7
aI2
aI6
aI9
aI5
aI2
aI2
aI5
aI10
aI0
aI2
aI6
aI1
aI7
aI7
aI2
aI2
aI0
aI4
aI3
aI8
aI0
aI7
aI4
aI5
aI1
aI2
aI7
aI6
aI5
aI2
aI6
aI5
aI3
aI2
aI0
aI6
aI4
aI7
aI3
aI5
aI9
aI7
aI4
aI7
aI0
aI3
aI2
aI8
aI3
aI9
aI5
aI3
aI6
aI3
aI3
aI5
aI3
aI1
aI10
aI3
aI6
aI9
aI0
aI6
aI8
aI3
aI9
aI0
aI1
aI9
aI0
aI0
aI0
aI3
aI8
aI0
aI7
aI0
aI1
atbsS'finished'
p75
I00
sS'nReps'
p76
I55
sS'nRemaining'
p77
I5
sS'trialList'
p78
(lp79
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p80
NsS'thisIndex'
p81
I2
sS'thisN'
p82
I599
sS'thisTrialN'
p83
I5
sS'nTotal'
p84
I605
sS'_warnUseOfNext'
p85
I01
sbasS'saveWideText'
p86
I01
sS'thisEntry'
p87
(dp88
sS'version'
p89
S''
sS'_paramNamesSoFar'
p90
(lp91
sS'entries'
p92
(lp93
(dp94
g16
(lp95
S'd'
asS'.thisTrial'
p96
I2
sS'.thisRepN'
p97
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p98
I0
sS'.thisN'
p99
I0
sS'.thisIndex'
p100
I2
sg15
(lp101
S'k'
asg17
S'N'
sg14
I1
sa(dp102
g16
(lp103
S'd'
asg96
I4
sS'.thisRepN'
p104
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p105
I1
sS'.thisN'
p106
I1
sS'.thisIndex'
p107
I4
sg15
(lp108
S'k'
asg17
S'N'
sg14
I1
sa(dp109
g16
(lp110
S'd'
asg18
S'Y'
sS'.thisRepN'
p111
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p112
I2
sS'.thisN'
p113
I2
sS'.thisIndex'
p114
I1
sg15
(lp115
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp116
S'space'
p117
asg96
I1
sa(dp118
g16
(lp119
S'd'
asg18
S'N'
sS'.thisRepN'
p120
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p121
I3
sS'.thisN'
p122
I3
sS'.thisIndex'
p123
I10
sg15
(lp124
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I10
sa(dp125
g16
(lp126
S'k'
asg18
S'N'
sS'.thisRepN'
p127
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p128
I4
sS'.thisN'
p129
I4
sS'.thisIndex'
p130
I5
sg15
(lp131
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp132
g16
(lp133
S'd'
asg18
S'N'
sS'.thisRepN'
p134
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p135
I5
sS'.thisN'
p136
I5
sS'.thisIndex'
p137
I7
sg15
(lp138
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I7
sa(dp139
g16
(lp140
S'k'
asg18
S'N'
sS'.thisRepN'
p141
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p142
I6
sS'.thisN'
p143
I6
sS'.thisIndex'
p144
I6
sg15
(lp145
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp146
S'd'
asg96
I6
sa(dp147
g16
(lp148
S'd'
asg18
S'Y'
sS'.thisRepN'
p149
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p150
I7
sS'.thisN'
p151
I7
sS'.thisIndex'
p152
I1
sg15
(lp153
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp154
S'space'
p155
asg96
I1
sa(dp156
g16
(lp157
S'd'
asg18
S'N'
sS'.thisRepN'
p158
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p159
I8
sS'.thisN'
p160
I8
sS'.thisIndex'
p161
I1
sg15
(lp162
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I1
sa(dp163
g16
(lp164
S'd'
asg18
S'N'
sS'.thisRepN'
p165
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p166
I9
sS'.thisN'
p167
I9
sS'.thisIndex'
p168
I7
sg15
(lp169
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I7
sa(dp170
g16
(lp171
S'k'
asg18
S'Y'
sS'.thisRepN'
p172
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p173
I10
sS'.thisN'
p174
I10
sS'.thisIndex'
p175
I1
sg15
(lp176
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp177
S'space'
p178
asg96
I1
sa(dp179
g16
(lp180
S'd'
asg18
S'Y'
sS'.thisRepN'
p181
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p182
I0
sS'.thisN'
p183
I11
sS'.thisIndex'
p184
I1
sg15
(lp185
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp186
S'space'
p187
asg96
I1
sa(dp188
g16
(lp189
S'd'
asg18
S'N'
sS'.thisRepN'
p190
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p191
I1
sS'.thisN'
p192
I12
sS'.thisIndex'
p193
I10
sg15
(lp194
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I10
sa(dp195
g16
(lp196
S'k'
asg18
S'N'
sS'.thisRepN'
p197
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p198
I2
sS'.thisN'
p199
I13
sS'.thisIndex'
p200
I6
sg15
(lp201
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp202
g16
(lp203
S'd'
asg18
S'Y'
sS'.thisRepN'
p204
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p205
I3
sS'.thisN'
p206
I14
sS'.thisIndex'
p207
I4
sg15
(lp208
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I4
sa(dp209
g16
(lp210
S'd'
asg18
S'Y'
sS'.thisRepN'
p211
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p212
I4
sS'.thisN'
p213
I15
sS'.thisIndex'
p214
I4
sg15
(lp215
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp216
S'space'
p217
asg96
I4
sa(dp218
g16
(lp219
S'd'
asg18
S'N'
sS'.thisRepN'
p220
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p221
I5
sS'.thisN'
p222
I16
sS'.thisIndex'
p223
I1
sg15
(lp224
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp225
S'space'
p226
asg96
I1
sa(dp227
g16
(lp228
S'd'
asg18
S'Y'
sS'.thisRepN'
p229
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p230
I6
sS'.thisN'
p231
I17
sS'.thisIndex'
p232
I1
sg15
(lp233
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I1
sa(dp234
g16
(lp235
S'k'
asg18
S'N'
sS'.thisRepN'
p236
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p237
I7
sS'.thisN'
p238
I18
sS'.thisIndex'
p239
I5
sg15
(lp240
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp241
g16
(lp242
S'k'
asg18
S'Y'
sS'.thisRepN'
p243
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p244
I8
sS'.thisN'
p245
I19
sS'.thisIndex'
p246
I7
sg15
(lp247
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp248
S'space'
p249
asg96
I7
sa(dp250
g16
(lp251
S'd'
asg18
S'Y'
sS'.thisRepN'
p252
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p253
I9
sS'.thisN'
p254
I20
sS'.thisIndex'
p255
I8
sg15
(lp256
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp257
S'space'
p258
asg96
I8
sa(dp259
g16
(lp260
S'k'
asg18
S'N'
sS'.thisRepN'
p261
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p262
I10
sS'.thisN'
p263
I21
sS'.thisIndex'
p264
I2
sg15
(lp265
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I2
sa(dp266
g16
(lp267
S'k'
asg18
S'Y'
sS'.thisRepN'
p268
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p269
I0
sS'.thisN'
p270
I22
sS'.thisIndex'
p271
I3
sg15
(lp272
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp273
S'space'
p274
asg96
I3
sa(dp275
g16
(lp276
S'k'
asg18
S'N'
sS'.thisRepN'
p277
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p278
I1
sS'.thisN'
p279
I23
sS'.thisIndex'
p280
I6
sg15
(lp281
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp282
g16
(lp283
S'k'
asg18
S'Y'
sS'.thisRepN'
p284
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p285
I2
sS'.thisN'
p286
I24
sS'.thisIndex'
p287
I1
sg15
(lp288
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp289
S'space'
p290
asg96
I1
sa(dp291
g16
(lp292
S'k'
asg18
S'Y'
sS'.thisRepN'
p293
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p294
I3
sS'.thisN'
p295
I25
sS'.thisIndex'
p296
I3
sg15
(lp297
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp298
S'space'
p299
asg96
I3
sa(dp300
g16
(lp301
S'k'
asg18
S'N'
sS'.thisRepN'
p302
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p303
I4
sS'.thisN'
p304
I26
sS'.thisIndex'
p305
I3
sg15
(lp306
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I3
sa(dp307
g16
(lp308
S'k'
asg18
S'N'
sS'.thisRepN'
p309
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p310
I5
sS'.thisN'
p311
I27
sS'.thisIndex'
p312
I8
sg15
(lp313
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I8
sa(dp314
g16
(lp315
S'd'
asg18
S'Y'
sS'.thisRepN'
p316
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p317
I6
sS'.thisN'
p318
I28
sS'.thisIndex'
p319
I6
sg15
(lp320
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp321
S'space'
p322
asg96
I6
sa(dp323
g16
(lp324
S'k'
asg18
S'Y'
sS'.thisRepN'
p325
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p326
I7
sS'.thisN'
p327
I29
sS'.thisIndex'
p328
I2
sg15
(lp329
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp330
S'space'
p331
asg96
I2
sa(dp332
g16
(lp333
S'k'
asg18
S'N'
sS'.thisRepN'
p334
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p335
I8
sS'.thisN'
p336
I30
sS'.thisIndex'
p337
I2
sg15
(lp338
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp339
g16
(lp340
S'd'
asg18
S'N'
sS'.thisRepN'
p341
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p342
I9
sS'.thisN'
p343
I31
sS'.thisIndex'
p344
I10
sg15
(lp345
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I10
sa(dp346
g16
(lp347
S'd'
asg18
S'Y'
sS'.thisRepN'
p348
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p349
I10
sS'.thisN'
p350
I32
sS'.thisIndex'
p351
I7
sg15
(lp352
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp353
S'space'
p354
asg96
I7
sa(dp355
g16
(lp356
S'd'
asg18
S'N'
sS'.thisRepN'
p357
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p358
I0
sS'.thisN'
p359
I33
sS'.thisIndex'
p360
I3
sg15
(lp361
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I3
sa(dp362
g16
(lp363
S'd'
asg18
S'Y'
sS'.thisRepN'
p364
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p365
I1
sS'.thisN'
p366
I34
sS'.thisIndex'
p367
I4
sg15
(lp368
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp369
S'space'
p370
asg96
I4
sa(dp371
g16
(lp372
S'k'
asg18
S'Y'
sS'.thisRepN'
p373
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p374
I2
sS'.thisN'
p375
I35
sS'.thisIndex'
p376
I9
sg15
(lp377
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp378
S'space'
p379
asg96
I9
sa(dp380
g16
(lp381
S'd'
asg18
S'N'
sS'.thisRepN'
p382
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p383
I3
sS'.thisN'
p384
I36
sS'.thisIndex'
p385
I0
sg15
(lp386
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I0
sa(dp387
g16
(lp388
S'k'
asg18
S'Y'
sS'.thisRepN'
p389
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p390
I4
sS'.thisN'
p391
I37
sS'.thisIndex'
p392
I10
sg15
(lp393
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp394
S'space'
p395
asg96
I10
sa(dp396
g16
(lp397
S'k'
asg18
S'N'
sS'.thisRepN'
p398
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p399
I5
sS'.thisN'
p400
I38
sS'.thisIndex'
p401
I4
sg15
(lp402
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I4
sa(dp403
g16
(lp404
S'k'
asg18
S'Y'
sS'.thisRepN'
p405
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p406
I6
sS'.thisN'
p407
I39
sS'.thisIndex'
p408
I10
sg15
(lp409
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp410
S'space'
p411
asg96
I10
sa(dp412
g16
(lp413
S'd'
asg18
S'N'
sS'.thisRepN'
p414
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p415
I7
sS'.thisN'
p416
I40
sS'.thisIndex'
p417
I9
sg15
(lp418
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I9
sa(dp419
g16
(lp420
S'k'
asg18
S'Y'
sS'.thisRepN'
p421
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p422
I8
sS'.thisN'
p423
I41
sS'.thisIndex'
p424
I5
sg15
(lp425
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp426
S'space'
p427
asg96
I5
sa(dp428
g16
(lp429
S'k'
asg18
S'N'
sS'.thisRepN'
p430
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p431
I9
sS'.thisN'
p432
I42
sS'.thisIndex'
p433
I3
sg15
(lp434
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I3
sa(dp435
g16
(lp436
S'k'
asg18
S'Y'
sS'.thisRepN'
p437
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p438
I10
sS'.thisN'
p439
I43
sS'.thisIndex'
p440
I6
sg15
(lp441
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp442
S'space'
p443
asg96
I6
sa(dp444
g16
(lp445
S'k'
asg18
S'Y'
sS'.thisRepN'
p446
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p447
I0
sS'.thisN'
p448
I44
sS'.thisIndex'
p449
I2
sg15
(lp450
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp451
g16
(lp452
S'k'
asg18
S'N'
sS'.thisRepN'
p453
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p454
I1
sS'.thisN'
p455
I45
sS'.thisIndex'
p456
I5
sg15
(lp457
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp458
g16
(lp459
S'k'
asg18
S'Y'
sS'.thisRepN'
p460
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p461
I2
sS'.thisN'
p462
I46
sS'.thisIndex'
p463
I10
sg15
(lp464
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp465
S'space'
p466
asg96
I10
sa(dp467
g16
(lp468
S'd'
asg18
S'Y'
sS'.thisRepN'
p469
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p470
I3
sS'.thisN'
p471
I47
sS'.thisIndex'
p472
I6
sg15
(lp473
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp474
S'space'
p475
asg96
I6
sa(dp476
g16
(lp477
S'k'
asg18
S'Y'
sS'.thisRepN'
p478
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p479
I4
sS'.thisN'
p480
I48
sS'.thisIndex'
p481
I4
sg15
(lp482
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp483
S'space'
p484
asg96
I4
sa(dp485
g16
(lp486
S'd'
asg18
S'N'
sg22
I43
sS'.thisN'
p487
I49
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p488
I5
sS'.thisRepN'
p489
I4
sg21
I39
sS'.thisIndex'
p490
I0
sg23
I25
sg15
(lp491
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I0
sa(dp492
g16
(lp493
S'd'
asg96
I0
sS'.thisRepN'
p494
I4
sg30
g31
sg32
g33
sS'.thisTrialN'
p495
I6
sS'.thisN'
p496
I50
sS'.thisIndex'
p497
I0
sg15
(lp498
S'k'
asg17
S'N'
sg14
I2
sa(dp499
g16
(lp500
S'd'
asg96
I3
sS'.thisRepN'
p501
I4
sg30
g31
sg32
g33
sS'.thisTrialN'
p502
I7
sS'.thisN'
p503
I51
sS'.thisIndex'
p504
I3
sg15
(lp505
S'd'
asg17
S'Y'
sg14
I2
sa(dp506
g16
(lp507
S'k'
asg18
S'Y'
sS'.thisRepN'
p508
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p509
I8
sS'.thisN'
p510
I52
sS'.thisIndex'
p511
I6
sg15
(lp512
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp513
S'space'
p514
asg96
I6
sa(dp515
g16
(lp516
S'k'
asg18
S'Y'
sS'.thisRepN'
p517
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p518
I9
sS'.thisN'
p519
I53
sS'.thisIndex'
p520
I8
sg15
(lp521
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I8
sa(dp522
g16
(lp523
S'd'
asg18
S'N'
sS'.thisRepN'
p524
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p525
I10
sS'.thisN'
p526
I54
sS'.thisIndex'
p527
I5
sg15
(lp528
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp529
g16
(lp530
S'k'
asg18
S'Y'
sS'.thisRepN'
p531
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p532
I0
sS'.thisN'
p533
I55
sS'.thisIndex'
p534
I0
sg15
(lp535
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp536
S'space'
p537
asg96
I0
sa(dp538
g16
(lp539
S'd'
asg18
S'Y'
sS'.thisRepN'
p540
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p541
I1
sS'.thisN'
p542
I56
sS'.thisIndex'
p543
I7
sg15
(lp544
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I7
sa(dp545
g16
(lp546
S'k'
asg18
S'N'
sS'.thisRepN'
p547
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p548
I2
sS'.thisN'
p549
I57
sS'.thisIndex'
p550
I4
sg15
(lp551
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I4
sa(dp552
g16
(lp553
S'k'
asg18
S'Y'
sS'.thisRepN'
p554
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p555
I3
sS'.thisN'
p556
I58
sS'.thisIndex'
p557
I1
sg15
(lp558
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp559
S'space'
p560
asg96
I1
sa(dp561
g16
(lp562
S'k'
asg18
S'N'
sS'.thisRepN'
p563
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p564
I4
sS'.thisN'
p565
I59
sS'.thisIndex'
p566
I8
sg15
(lp567
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I8
sa(dp568
g16
(lp569
S'd'
asg18
S'N'
sS'.thisRepN'
p570
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p571
I5
sS'.thisN'
p572
I60
sS'.thisIndex'
p573
I5
sg15
(lp574
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp575
g16
(lp576
S'd'
asg18
S'Y'
sS'.thisRepN'
p577
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p578
I6
sS'.thisN'
p579
I61
sS'.thisIndex'
p580
I4
sg15
(lp581
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp582
S'space'
p583
asg96
I4
sa(dp584
g16
(lp585
S'd'
asg18
S'Y'
sS'.thisRepN'
p586
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p587
I7
sS'.thisN'
p588
I62
sS'.thisIndex'
p589
I7
sg15
(lp590
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp591
S'space'
p592
asg96
I7
sa(dp593
g16
(lp594
S'k'
asg18
S'N'
sS'.thisRepN'
p595
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p596
I8
sS'.thisN'
p597
I63
sS'.thisIndex'
p598
I6
sg15
(lp599
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I6
sa(dp600
g16
(lp601
S'd'
asg18
S'N'
sS'.thisRepN'
p602
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p603
I9
sS'.thisN'
p604
I64
sS'.thisIndex'
p605
I1
sg15
(lp606
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp607
g16
(lp608
S'd'
asg18
S'Y'
sS'.thisRepN'
p609
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p610
I10
sS'.thisN'
p611
I65
sS'.thisIndex'
p612
I2
sg15
(lp613
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp614
S'space'
p615
asg96
I2
sa(dp616
g16
(lp617
S'k'
asg18
S'Y'
sS'.thisRepN'
p618
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p619
I0
sS'.thisN'
p620
I66
sS'.thisIndex'
p621
I6
sg15
(lp622
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I6
sa(dp623
g16
(lp624
S'k'
asg18
S'Y'
sS'.thisRepN'
p625
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p626
I1
sS'.thisN'
p627
I67
sS'.thisIndex'
p628
I8
sg15
(lp629
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp630
S'space'
p631
asg96
I8
sa(dp632
g16
(lp633
S'd'
asg18
S'N'
sS'.thisRepN'
p634
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p635
I2
sS'.thisN'
p636
I68
sS'.thisIndex'
p637
I1
sg15
(lp638
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp639
g16
(lp640
S'k'
asg18
S'Y'
sS'.thisRepN'
p641
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p642
I3
sS'.thisN'
p643
I69
sS'.thisIndex'
p644
I7
sg15
(lp645
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp646
S'space'
p647
asg96
I7
sa(dp648
g16
(lp649
S'd'
asg18
S'Y'
sS'.thisRepN'
p650
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p651
I4
sS'.thisN'
p652
I70
sS'.thisIndex'
p653
I4
sg15
(lp654
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I4
sa(dp655
g16
(lp656
S'k'
asg18
S'Y'
sS'.thisRepN'
p657
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p658
I5
sS'.thisN'
p659
I71
sS'.thisIndex'
p660
I8
sg15
(lp661
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I8
sa(dp662
g16
(lp663
S'd'
asg18
S'N'
sS'.thisRepN'
p664
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p665
I6
sS'.thisN'
p666
I72
sS'.thisIndex'
p667
I0
sg15
(lp668
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp669
g16
(lp670
S'd'
asg18
S'N'
sS'.thisRepN'
p671
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p672
I7
sS'.thisN'
p673
I73
sS'.thisIndex'
p674
I9
sg15
(lp675
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I9
sa(dp676
g16
(lp677
S'd'
asg18
S'N'
sS'.thisRepN'
p678
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p679
I8
sS'.thisN'
p680
I74
sS'.thisIndex'
p681
I10
sg15
(lp682
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp683
g16
(lp684
S'd'
asg18
S'N'
sS'.thisRepN'
p685
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p686
I9
sS'.thisN'
p687
I75
sS'.thisIndex'
p688
I6
sg15
(lp689
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I6
sa(dp690
g16
(lp691
S'd'
asg18
S'Y'
sS'.thisRepN'
p692
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p693
I10
sS'.thisN'
p694
I76
sS'.thisIndex'
p695
I6
sg15
(lp696
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp697
S'space'
p698
asg96
I6
sa(dp699
g16
(lp700
S'k'
asg18
S'N'
sS'.thisRepN'
p701
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p702
I0
sS'.thisN'
p703
I77
sS'.thisIndex'
p704
I1
sg15
(lp705
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp706
g16
(lp707
S'd'
asg18
S'Y'
sS'.thisRepN'
p708
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p709
I1
sS'.thisN'
p710
I78
sS'.thisIndex'
p711
I3
sg15
(lp712
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp713
S'space'
p714
asg96
I3
sa(dp715
g16
(lp716
S'd'
asg18
S'N'
sS'.thisRepN'
p717
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p718
I2
sS'.thisN'
p719
I79
sS'.thisIndex'
p720
I6
sg15
(lp721
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I6
sa(dp722
g16
(lp723
S'd'
asg18
S'Y'
sS'.thisRepN'
p724
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p725
I3
sS'.thisN'
p726
I80
sS'.thisIndex'
p727
I10
sg15
(lp728
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp729
S'space'
p730
asg96
I10
sa(dp731
g16
(lp732
S'd'
asg18
S'Y'
sS'.thisRepN'
p733
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p734
I4
sS'.thisN'
p735
I81
sS'.thisIndex'
p736
I7
sg15
(lp737
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp738
S'space'
p739
asg96
I7
sa(dp740
g16
(lp741
S'k'
asg18
S'Y'
sS'.thisRepN'
p742
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p743
I5
sS'.thisN'
p744
I82
sS'.thisIndex'
p745
I5
sg15
(lp746
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp747
S'space'
p748
asg96
I5
sa(dp749
g16
(lp750
S'd'
asg18
S'N'
sS'.thisRepN'
p751
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p752
I6
sS'.thisN'
p753
I83
sS'.thisIndex'
p754
I9
sg15
(lp755
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I9
sa(dp756
g16
(lp757
S'd'
asg18
S'Y'
sS'.thisRepN'
p758
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p759
I7
sS'.thisN'
p760
I84
sS'.thisIndex'
p761
I8
sg15
(lp762
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp763
S'space'
p764
asg96
I8
sa(dp765
g16
(lp766
S'd'
asg18
S'Y'
sS'.thisRepN'
p767
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p768
I8
sS'.thisN'
p769
I85
sS'.thisIndex'
p770
I8
sg15
(lp771
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp772
S'space'
p773
asg96
I8
sa(dp774
g16
(lp775
S'k'
asg18
S'N'
sS'.thisRepN'
p776
I7
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p777
I9
sS'.thisN'
p778
I86
sS'.thisIndex'
p779
I4
sg15
(lp780
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp781
S'space'
p782
asg96
I4
sa(dp783
g16
(lp784
S'k'
asg18
S'N'
sS'.thisRepN'
p785
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p786
I10
sS'.thisN'
p787
I87
sS'.thisIndex'
p788
I5
sg15
(lp789
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp790
g16
(lp791
S'k'
asg18
S'Y'
sS'.thisRepN'
p792
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p793
I0
sS'.thisN'
p794
I88
sS'.thisIndex'
p795
I8
sg15
(lp796
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp797
S'space'
p798
asg96
I8
sa(dp799
g16
(lp800
S'k'
asg18
S'N'
sS'.thisRepN'
p801
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p802
I1
sS'.thisN'
p803
I89
sS'.thisIndex'
p804
I8
sg15
(lp805
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I8
sa(dp806
g16
(lp807
S'd'
asg18
S'Y'
sS'.thisRepN'
p808
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p809
I2
sS'.thisN'
p810
I90
sS'.thisIndex'
p811
I5
sg15
(lp812
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp813
S'space'
p814
asg96
I5
sa(dp815
g16
(lp816
S'd'
asg18
S'N'
sS'.thisRepN'
p817
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p818
I3
sS'.thisN'
p819
I91
sS'.thisIndex'
p820
I10
sg15
(lp821
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp822
g16
(lp823
S'd'
asg18
S'N'
sS'.thisRepN'
p824
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p825
I4
sS'.thisN'
p826
I92
sS'.thisIndex'
p827
I5
sg15
(lp828
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp829
S'space'
p830
asg96
I5
sa(dp831
g16
(lp832
S'd'
asg18
S'Y'
sS'.thisRepN'
p833
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p834
I5
sS'.thisN'
p835
I93
sS'.thisIndex'
p836
I10
sg15
(lp837
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp838
S'space'
p839
asg96
I10
sa(dp840
g16
(lp841
S'k'
asg18
S'Y'
sS'.thisRepN'
p842
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p843
I6
sS'.thisN'
p844
I94
sS'.thisIndex'
p845
I10
sg15
(lp846
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp847
S'space'
p848
asg96
I10
sa(dp849
g16
(lp850
S'k'
asg18
S'Y'
sS'.thisRepN'
p851
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p852
I7
sS'.thisN'
p853
I95
sS'.thisIndex'
p854
I10
sg15
(lp855
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp856
S'space'
p857
asg96
I10
sa(dp858
g16
(lp859
S'd'
asg18
S'N'
sS'.thisRepN'
p860
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p861
I8
sS'.thisN'
p862
I96
sS'.thisIndex'
p863
I2
sg15
(lp864
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp865
g16
(lp866
S'k'
asg18
S'N'
sS'.thisRepN'
p867
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p868
I9
sS'.thisN'
p869
I97
sS'.thisIndex'
p870
I8
sg15
(lp871
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I8
sa(dp872
g16
(lp873
S'd'
asg18
S'N'
sS'.thisRepN'
p874
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p875
I10
sS'.thisN'
p876
I98
sS'.thisIndex'
p877
I3
sg15
(lp878
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp879
g16
(lp880
S'd'
asg18
S'N'
sg22
I41
sS'.thisN'
p881
I99
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p882
I0
sS'.thisRepN'
p883
I9
sg21
I43
sS'.thisIndex'
p884
I6
sg23
I25
sg15
(lp885
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I6
sa(dp886
g16
(lp887
S'k'
asg96
I1
sS'.thisRepN'
p888
I9
sg30
g31
sg32
g33
sS'.thisTrialN'
p889
I1
sS'.thisN'
p890
I100
sS'.thisIndex'
p891
I1
sg15
(lp892
S'k'
asg17
S'Y'
sg14
I3
sa(dp893
g16
(lp894
S'k'
asg96
I1
sS'.thisRepN'
p895
I9
sg30
g31
sg32
g33
sS'.thisTrialN'
p896
I2
sS'.thisN'
p897
I101
sS'.thisIndex'
p898
I1
sg15
(lp899
S'k'
asg17
S'Y'
sg14
I3
sa(dp900
g16
(lp901
S'k'
asg18
S'Y'
sS'.thisRepN'
p902
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p903
I3
sS'.thisN'
p904
I102
sS'.thisIndex'
p905
I3
sg15
(lp906
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp907
S'space'
p908
asg96
I3
sa(dp909
g16
(lp910
S'k'
asg18
S'N'
sS'.thisRepN'
p911
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p912
I4
sS'.thisN'
p913
I103
sS'.thisIndex'
p914
I9
sg15
(lp915
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp916
g16
(lp917
S'k'
asg18
S'N'
sS'.thisRepN'
p918
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p919
I5
sS'.thisN'
p920
I104
sS'.thisIndex'
p921
I7
sg15
(lp922
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp923
g16
(lp924
S'k'
asg18
S'N'
sS'.thisRepN'
p925
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p926
I6
sS'.thisN'
p927
I105
sS'.thisIndex'
p928
I10
sg15
(lp929
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp930
g16
(lp931
S'k'
asg18
S'Y'
sS'.thisRepN'
p932
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p933
I7
sS'.thisN'
p934
I106
sS'.thisIndex'
p935
I5
sg15
(lp936
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp937
S'space'
p938
asg96
I5
sa(dp939
g16
(lp940
S'k'
asg18
S'Y'
sS'.thisRepN'
p941
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p942
I8
sS'.thisN'
p943
I107
sS'.thisIndex'
p944
I5
sg15
(lp945
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp946
S'space'
p947
asg96
I5
sa(dp948
g16
(lp949
S'k'
asg18
S'N'
sS'.thisRepN'
p950
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p951
I9
sS'.thisN'
p952
I108
sS'.thisIndex'
p953
I9
sg15
(lp954
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp955
g16
(lp956
S'd'
asg18
S'Y'
sS'.thisRepN'
p957
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p958
I10
sS'.thisN'
p959
I109
sS'.thisIndex'
p960
I2
sg15
(lp961
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp962
S'space'
p963
asg96
I2
sa(dp964
g16
(lp965
S'd'
asg18
S'Y'
sS'.thisRepN'
p966
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p967
I0
sS'.thisN'
p968
I110
sS'.thisIndex'
p969
I5
sg15
(lp970
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp971
S'space'
p972
asg96
I5
sa(dp973
g16
(lp974
S'k'
asg18
S'N'
sS'.thisRepN'
p975
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p976
I1
sS'.thisN'
p977
I111
sS'.thisIndex'
p978
I10
sg15
(lp979
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp980
g16
(lp981
S'k'
asg18
S'N'
sS'.thisRepN'
p982
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p983
I2
sS'.thisN'
p984
I112
sS'.thisIndex'
p985
I6
sg15
(lp986
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp987
g16
(lp988
S'd'
asg18
S'Y'
sS'.thisRepN'
p989
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p990
I3
sS'.thisN'
p991
I113
sS'.thisIndex'
p992
I2
sg15
(lp993
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp994
S'space'
p995
asg96
I2
sa(dp996
g16
(lp997
S'k'
asg18
S'N'
sS'.thisRepN'
p998
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p999
I4
sS'.thisN'
p1000
I114
sS'.thisIndex'
p1001
I0
sg15
(lp1002
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1003
g16
(lp1004
S'd'
asg18
S'N'
sS'.thisRepN'
p1005
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1006
I5
sS'.thisN'
p1007
I115
sS'.thisIndex'
p1008
I4
sg15
(lp1009
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I4
sa(dp1010
g16
(lp1011
S'k'
asg18
S'Y'
sS'.thisRepN'
p1012
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1013
I6
sS'.thisN'
p1014
I116
sS'.thisIndex'
p1015
I8
sg15
(lp1016
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1017
S'space'
p1018
asg96
I8
sa(dp1019
g16
(lp1020
S'k'
asg18
S'Y'
sS'.thisRepN'
p1021
I10
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1022
I7
sS'.thisN'
p1023
I117
sS'.thisIndex'
p1024
I10
sg15
(lp1025
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp1026
g16
(lp1027
S'k'
asg18
S'N'
sS'.thisRepN'
p1028
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1029
I8
sS'.thisN'
p1030
I118
sS'.thisIndex'
p1031
I4
sg15
(lp1032
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I4
sa(dp1033
g16
(lp1034
S'k'
asg18
S'Y'
sS'.thisRepN'
p1035
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1036
I9
sS'.thisN'
p1037
I119
sS'.thisIndex'
p1038
I1
sg15
(lp1039
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1040
S'space'
p1041
asg96
I1
sa(dp1042
g16
(lp1043
S'd'
asg18
S'N'
sS'.thisRepN'
p1044
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1045
I10
sS'.thisN'
p1046
I120
sS'.thisIndex'
p1047
I0
sg15
(lp1048
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1049
g16
(lp1050
S'k'
asg18
S'Y'
sS'.thisRepN'
p1051
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1052
I0
sS'.thisN'
p1053
I121
sS'.thisIndex'
p1054
I10
sg15
(lp1055
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1056
S'space'
p1057
asg96
I10
sa(dp1058
g16
(lp1059
S'd'
asg18
S'N'
sS'.thisRepN'
p1060
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1061
I1
sS'.thisN'
p1062
I122
sS'.thisIndex'
p1063
I0
sg15
(lp1064
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I0
sa(dp1065
g16
(lp1066
S'k'
asg18
S'Y'
sS'.thisRepN'
p1067
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1068
I2
sS'.thisN'
p1069
I123
sS'.thisIndex'
p1070
I1
sg15
(lp1071
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1072
S'space'
p1073
asg96
I1
sa(dp1074
g16
(lp1075
S'k'
asg18
S'Y'
sS'.thisRepN'
p1076
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1077
I3
sS'.thisN'
p1078
I124
sS'.thisIndex'
p1079
I6
sg15
(lp1080
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1081
g16
(lp1082
S'k'
asg18
S'Y'
sS'.thisRepN'
p1083
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1084
I4
sS'.thisN'
p1085
I125
sS'.thisIndex'
p1086
I2
sg15
(lp1087
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1088
S'space'
p1089
asg96
I2
sa(dp1090
g16
(lp1091
S'd'
asg18
S'Y'
sS'.thisRepN'
p1092
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1093
I5
sS'.thisN'
p1094
I126
sS'.thisIndex'
p1095
I4
sg15
(lp1096
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I4
sa(dp1097
g16
(lp1098
S'k'
asg18
S'Y'
sS'.thisRepN'
p1099
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1100
I6
sS'.thisN'
p1101
I127
sS'.thisIndex'
p1102
I5
sg15
(lp1103
S'd'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1104
S'space'
p1105
asg96
I5
sa(dp1106
g16
(lp1107
S'k'
asg18
S'Y'
sS'.thisRepN'
p1108
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1109
I7
sS'.thisN'
p1110
I128
sS'.thisIndex'
p1111
I3
sg15
(lp1112
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp1113
g16
(lp1114
S'd'
asg18
S'N'
sS'.thisRepN'
p1115
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1116
I8
sS'.thisN'
p1117
I129
sS'.thisIndex'
p1118
I9
sg15
(lp1119
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp1120
g16
(lp1121
S'd'
asg18
S'N'
sS'.thisRepN'
p1122
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1123
I9
sS'.thisN'
p1124
I130
sS'.thisIndex'
p1125
I5
sg15
(lp1126
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I5
sa(dp1127
g16
(lp1128
S'd'
asg18
S'Y'
sS'.thisRepN'
p1129
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1130
I10
sS'.thisN'
p1131
I131
sS'.thisIndex'
p1132
I6
sg15
(lp1133
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1134
S'space'
p1135
asg96
I6
sa(dp1136
g16
(lp1137
S'd'
asg18
S'N'
sS'.thisRepN'
p1138
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1139
I0
sS'.thisN'
p1140
I132
sS'.thisIndex'
p1141
I10
sg15
(lp1142
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp1143
g16
(lp1144
S'k'
asg18
S'N'
sS'.thisRepN'
p1145
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1146
I1
sS'.thisN'
p1147
I133
sS'.thisIndex'
p1148
I8
sg15
(lp1149
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I8
sa(dp1150
g16
(lp1151
S'd'
asg18
S'Y'
sS'.thisRepN'
p1152
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1153
I2
sS'.thisN'
p1154
I134
sS'.thisIndex'
p1155
I8
sg15
(lp1156
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1157
S'space'
p1158
asg96
I8
sa(dp1159
g16
(lp1160
S'd'
asg18
S'N'
sS'.thisRepN'
p1161
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1162
I3
sS'.thisN'
p1163
I135
sS'.thisIndex'
p1164
I4
sg15
(lp1165
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I4
sa(dp1166
g16
(lp1167
S'd'
asg18
S'Y'
sS'.thisRepN'
p1168
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1169
I4
sS'.thisN'
p1170
I136
sS'.thisIndex'
p1171
I1
sg15
(lp1172
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1173
S'space'
p1174
asg96
I1
sa(dp1175
g16
(lp1176
S'k'
asg18
S'N'
sS'.thisRepN'
p1177
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1178
I5
sS'.thisN'
p1179
I137
sS'.thisIndex'
p1180
I0
sg15
(lp1181
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1182
g16
(lp1183
S'k'
asg18
S'N'
sS'.thisRepN'
p1184
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1185
I6
sS'.thisN'
p1186
I138
sS'.thisIndex'
p1187
I8
sg15
(lp1188
S'd'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I8
sa(dp1189
g16
(lp1190
S'k'
asg18
S'N'
sS'.thisRepN'
p1191
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1192
I7
sS'.thisN'
p1193
I139
sS'.thisIndex'
p1194
I9
sg15
(lp1195
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp1196
g16
(lp1197
S'd'
asg18
S'Y'
sS'.thisRepN'
p1198
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1199
I8
sS'.thisN'
p1200
I140
sS'.thisIndex'
p1201
I7
sg15
(lp1202
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1203
S'space'
p1204
asg96
I7
sa(dp1205
g16
(lp1206
S'k'
asg18
S'Y'
sS'.thisRepN'
p1207
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1208
I9
sS'.thisN'
p1209
I141
sS'.thisIndex'
p1210
I9
sg15
(lp1211
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1212
S'space'
p1213
asg96
I9
sa(dp1214
g16
(lp1215
S'd'
asg18
S'N'
sS'.thisRepN'
p1216
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1217
I10
sS'.thisN'
p1218
I142
sS'.thisIndex'
p1219
I4
sg15
(lp1220
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I4
sa(dp1221
g16
(lp1222
S'k'
asg18
S'Y'
sS'.thisRepN'
p1223
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1224
I0
sS'.thisN'
p1225
I143
sS'.thisIndex'
p1226
I2
sg15
(lp1227
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1228
S'space'
p1229
asg96
I2
sa(dp1230
g16
(lp1231
S'k'
asg18
S'Y'
sS'.thisRepN'
p1232
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1233
I1
sS'.thisN'
p1234
I144
sS'.thisIndex'
p1235
I8
sg15
(lp1236
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1237
S'space'
p1238
asg96
I8
sa(dp1239
g16
(lp1240
S'd'
asg18
S'N'
sS'.thisRepN'
p1241
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1242
I2
sS'.thisN'
p1243
I145
sS'.thisIndex'
p1244
I6
sg15
(lp1245
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I6
sa(dp1246
g16
(lp1247
S'k'
asg18
S'Y'
sS'.thisRepN'
p1248
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1249
I3
sS'.thisN'
p1250
I146
sS'.thisIndex'
p1251
I1
sg15
(lp1252
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1253
S'space'
p1254
asg96
I1
sa(dp1255
g16
(lp1256
S'd'
asg18
S'Y'
sS'.thisRepN'
p1257
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1258
I4
sS'.thisN'
p1259
I147
sS'.thisIndex'
p1260
I8
sg15
(lp1261
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1262
S'space'
p1263
asg96
I8
sa(dp1264
g16
(lp1265
S'd'
asg18
S'N'
sS'.thisRepN'
p1266
I13
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1267
I5
sS'.thisN'
p1268
I148
sS'.thisIndex'
p1269
I4
sg15
(lp1270
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1271
S'space'
p1272
asg96
I4
sa(dp1273
g16
(lp1274
S'k'
asg18
S'N'
sg22
I42
sS'.thisN'
p1275
I149
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1276
I6
sS'.thisRepN'
p1277
I13
sg21
I43
sS'.thisIndex'
p1278
I4
sg23
I25
sg15
(lp1279
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1280
S'space'
p1281
asg96
I4
sa(dp1282
g16
(lp1283
S'k'
asg96
I7
sS'.thisRepN'
p1284
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1285
I7
sS'.thisN'
p1286
I150
sS'.thisIndex'
p1287
I7
sg15
(lp1288
S'd'
asg17
S'N'
sg14
I4
sa(dp1289
g16
(lp1290
S'd'
asg96
I8
sS'.thisRepN'
p1291
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1292
I8
sS'.thisN'
p1293
I151
sS'.thisIndex'
p1294
I8
sg15
(lp1295
S'k'
asg17
S'N'
sg14
I4
sa(dp1296
g16
(lp1297
S'd'
asg18
S'N'
sS'.thisRepN'
p1298
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1299
I9
sS'.thisN'
p1300
I152
sS'.thisIndex'
p1301
I0
sg15
(lp1302
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1303
g16
(lp1304
S'k'
asg18
S'N'
sS'.thisRepN'
p1305
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1306
I10
sS'.thisN'
p1307
I153
sS'.thisIndex'
p1308
I7
sg15
(lp1309
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1310
g16
(lp1311
S'k'
asg18
S'N'
sS'.thisRepN'
p1312
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1313
I0
sS'.thisN'
p1314
I154
sS'.thisIndex'
p1315
I2
sg15
(lp1316
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I2
sa(dp1317
g16
(lp1318
S'k'
asg18
S'N'
sS'.thisRepN'
p1319
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1320
I1
sS'.thisN'
p1321
I155
sS'.thisIndex'
p1322
I8
sg15
(lp1323
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1324
g16
(lp1325
S'k'
asg18
S'Y'
sS'.thisRepN'
p1326
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1327
I2
sS'.thisN'
p1328
I156
sS'.thisIndex'
p1329
I3
sg15
(lp1330
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1331
S'space'
p1332
asg96
I3
sa(dp1333
g16
(lp1334
S'd'
asg18
S'N'
sS'.thisRepN'
p1335
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1336
I3
sS'.thisN'
p1337
I157
sS'.thisIndex'
p1338
I5
sg15
(lp1339
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I5
sa(dp1340
g16
(lp1341
S'd'
asg18
S'Y'
sS'.thisRepN'
p1342
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1343
I4
sS'.thisN'
p1344
I158
sS'.thisIndex'
p1345
I9
sg15
(lp1346
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1347
S'space'
p1348
asg96
I9
sa(dp1349
g16
(lp1350
S'd'
asg18
S'N'
sS'.thisRepN'
p1351
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1352
I5
sS'.thisN'
p1353
I159
sS'.thisIndex'
p1354
I0
sg15
(lp1355
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1356
g16
(lp1357
S'k'
asg18
S'N'
sS'.thisRepN'
p1358
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1359
I6
sS'.thisN'
p1360
I160
sS'.thisIndex'
p1361
I5
sg15
(lp1362
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I5
sa(dp1363
g16
(lp1364
S'd'
asg18
S'Y'
sS'.thisRepN'
p1365
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1366
I7
sS'.thisN'
p1367
I161
sS'.thisIndex'
p1368
I8
sg15
(lp1369
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1370
S'space'
p1371
asg96
I8
sa(dp1372
g16
(lp1373
S'k'
asg18
S'Y'
sS'.thisRepN'
p1374
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1375
I8
sS'.thisN'
p1376
I162
sS'.thisIndex'
p1377
I5
sg15
(lp1378
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1379
S'space'
p1380
asg96
I5
sa(dp1381
g16
(lp1382
S'd'
asg18
S'N'
sS'.thisRepN'
p1383
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1384
I9
sS'.thisN'
p1385
I163
sS'.thisIndex'
p1386
I5
sg15
(lp1387
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I5
sa(dp1388
g16
(lp1389
S'k'
asg18
S'N'
sS'.thisRepN'
p1390
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1391
I10
sS'.thisN'
p1392
I164
sS'.thisIndex'
p1393
I3
sg15
(lp1394
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I3
sa(dp1395
g16
(lp1396
S'k'
asg18
S'Y'
sS'.thisRepN'
p1397
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1398
I0
sS'.thisN'
p1399
I165
sS'.thisIndex'
p1400
I9
sg15
(lp1401
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1402
S'space'
p1403
asg96
I9
sa(dp1404
g16
(lp1405
S'k'
asg18
S'N'
sS'.thisRepN'
p1406
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1407
I1
sS'.thisN'
p1408
I166
sS'.thisIndex'
p1409
I2
sg15
(lp1410
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1411
g16
(lp1412
S'k'
asg18
S'N'
sS'.thisRepN'
p1413
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1414
I2
sS'.thisN'
p1415
I167
sS'.thisIndex'
p1416
I8
sg15
(lp1417
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I8
sa(dp1418
g16
(lp1419
S'k'
asg18
S'N'
sS'.thisRepN'
p1420
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1421
I3
sS'.thisN'
p1422
I168
sS'.thisIndex'
p1423
I3
sg15
(lp1424
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1425
g16
(lp1426
S'k'
asg18
S'N'
sS'.thisRepN'
p1427
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1428
I4
sS'.thisN'
p1429
I169
sS'.thisIndex'
p1430
I10
sg15
(lp1431
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I10
sa(dp1432
g16
(lp1433
S'k'
asg18
S'N'
sS'.thisRepN'
p1434
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1435
I5
sS'.thisN'
p1436
I170
sS'.thisIndex'
p1437
I4
sg15
(lp1438
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1439
g16
(lp1440
S'k'
asg18
S'Y'
sS'.thisRepN'
p1441
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1442
I6
sS'.thisN'
p1443
I171
sS'.thisIndex'
p1444
I0
sg15
(lp1445
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1446
S'space'
p1447
asg96
I0
sa(dp1448
g16
(lp1449
S'k'
asg18
S'Y'
sS'.thisRepN'
p1450
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1451
I7
sS'.thisN'
p1452
I172
sS'.thisIndex'
p1453
I6
sg15
(lp1454
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1455
g16
(lp1456
S'k'
asg18
S'N'
sS'.thisRepN'
p1457
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1458
I8
sS'.thisN'
p1459
I173
sS'.thisIndex'
p1460
I9
sg15
(lp1461
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1462
g16
(lp1463
S'd'
asg18
S'N'
sS'.thisRepN'
p1464
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1465
I9
sS'.thisN'
p1466
I174
sS'.thisIndex'
p1467
I8
sg15
(lp1468
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1469
g16
(lp1470
S'k'
asg18
S'Y'
sS'.thisRepN'
p1471
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1472
I10
sS'.thisN'
p1473
I175
sS'.thisIndex'
p1474
I5
sg15
(lp1475
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1476
S'space'
p1477
asg96
I5
sa(dp1478
g16
(lp1479
S'k'
asg18
S'N'
sS'.thisRepN'
p1480
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1481
I0
sS'.thisN'
p1482
I176
sS'.thisIndex'
p1483
I6
sg15
(lp1484
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1485
g16
(lp1486
S'd'
asg18
S'Y'
sS'.thisRepN'
p1487
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1488
I1
sS'.thisN'
p1489
I177
sS'.thisIndex'
p1490
I9
sg15
(lp1491
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1492
S'space'
p1493
asg96
I9
sa(dp1494
g16
(lp1495
S'd'
asg18
S'Y'
sS'.thisRepN'
p1496
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1497
I2
sS'.thisN'
p1498
I178
sS'.thisIndex'
p1499
I5
sg15
(lp1500
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1501
S'space'
p1502
asg96
I5
sa(dp1503
g16
(lp1504
S'd'
asg18
S'Y'
sS'.thisRepN'
p1505
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1506
I3
sS'.thisN'
p1507
I179
sS'.thisIndex'
p1508
I4
sg15
(lp1509
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1510
S'space'
p1511
asg96
I4
sa(dp1512
g16
(lp1513
S'k'
asg18
S'Y'
sS'.thisRepN'
p1514
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1515
I4
sS'.thisN'
p1516
I180
sS'.thisIndex'
p1517
I10
sg15
(lp1518
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1519
S'space'
p1520
asg96
I10
sa(dp1521
g16
(lp1522
S'd'
asg18
S'N'
sS'.thisRepN'
p1523
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1524
I5
sS'.thisN'
p1525
I181
sS'.thisIndex'
p1526
I3
sg15
(lp1527
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1528
g16
(lp1529
S'd'
asg18
S'Y'
sS'.thisRepN'
p1530
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1531
I6
sS'.thisN'
p1532
I182
sS'.thisIndex'
p1533
I9
sg15
(lp1534
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1535
S'space'
p1536
asg96
I9
sa(dp1537
g16
(lp1538
S'k'
asg18
S'Y'
sS'.thisRepN'
p1539
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1540
I7
sS'.thisN'
p1541
I183
sS'.thisIndex'
p1542
I1
sg15
(lp1543
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1544
S'space'
p1545
asg96
I1
sa(dp1546
g16
(lp1547
S'k'
asg18
S'Y'
sS'.thisRepN'
p1548
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1549
I8
sS'.thisN'
p1550
I184
sS'.thisIndex'
p1551
I6
sg15
(lp1552
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1553
S'space'
p1554
asg96
I6
sa(dp1555
g16
(lp1556
S'k'
asg18
S'Y'
sS'.thisRepN'
p1557
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1558
I9
sS'.thisN'
p1559
I185
sS'.thisIndex'
p1560
I1
sg15
(lp1561
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1562
S'space'
p1563
asg96
I1
sa(dp1564
g16
(lp1565
S'd'
asg18
S'Y'
sS'.thisRepN'
p1566
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1567
I10
sS'.thisN'
p1568
I186
sS'.thisIndex'
p1569
I9
sg15
(lp1570
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1571
g16
(lp1572
S'k'
asg18
S'Y'
sS'.thisRepN'
p1573
I17
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1574
I0
sS'.thisN'
p1575
I187
sS'.thisIndex'
p1576
I1
sg15
(lp1577
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1578
g16
(lp1579
S'd'
asg18
S'Y'
sS'.thisRepN'
p1580
I17
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1581
I1
sS'.thisN'
p1582
I188
sS'.thisIndex'
p1583
I2
sg15
(lp1584
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1585
g16
(lp1586
S'd'
asg18
S'N'
sS'.thisRepN'
p1587
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1588
I2
sS'.thisN'
p1589
I189
sS'.thisIndex'
p1590
I0
sg15
(lp1591
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1592
g16
(lp1593
S'k'
asg18
S'N'
sS'.thisRepN'
p1594
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1595
I3
sS'.thisN'
p1596
I190
sS'.thisIndex'
p1597
I3
sg15
(lp1598
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1599
g16
(lp1600
S'k'
asg18
S'Y'
sS'.thisRepN'
p1601
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1602
I4
sS'.thisN'
p1603
I191
sS'.thisIndex'
p1604
I0
sg15
(lp1605
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1606
S'space'
p1607
asg96
I0
sa(dp1608
g16
(lp1609
S'd'
asg18
S'N'
sS'.thisRepN'
p1610
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1611
I5
sS'.thisN'
p1612
I192
sS'.thisIndex'
p1613
I9
sg15
(lp1614
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1615
g16
(lp1616
S'k'
asg18
S'N'
sS'.thisRepN'
p1617
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1618
I6
sS'.thisN'
p1619
I193
sS'.thisIndex'
p1620
I4
sg15
(lp1621
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1622
g16
(lp1623
S'k'
asg18
S'Y'
sS'.thisRepN'
p1624
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1625
I7
sS'.thisN'
p1626
I194
sS'.thisIndex'
p1627
I1
sg15
(lp1628
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1629
S'space'
p1630
asg96
I1
sa(dp1631
g16
(lp1632
S'd'
asg18
S'Y'
sS'.thisRepN'
p1633
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1634
I8
sS'.thisN'
p1635
I195
sS'.thisIndex'
p1636
I5
sg15
(lp1637
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1638
S'space'
p1639
asg96
I5
sa(dp1640
g16
(lp1641
S'd'
asg18
S'N'
sS'.thisRepN'
p1642
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1643
I9
sS'.thisN'
p1644
I196
sS'.thisIndex'
p1645
I4
sg15
(lp1646
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1647
g16
(lp1648
S'd'
asg18
S'Y'
sS'.thisRepN'
p1649
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1650
I10
sS'.thisN'
p1651
I197
sS'.thisIndex'
p1652
I7
sg15
(lp1653
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1654
S'space'
p1655
asg96
I7
sa(dp1656
g16
(lp1657
S'd'
asg18
S'N'
sS'.thisRepN'
p1658
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1659
I0
sS'.thisN'
p1660
I198
sS'.thisIndex'
p1661
I7
sg15
(lp1662
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1663
g16
(lp1664
S'k'
asg18
S'Y'
sg22
I43
sS'.thisN'
p1665
I199
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1666
I1
sS'.thisRepN'
p1667
I18
sg21
I41
sS'.thisIndex'
p1668
I7
sg23
I24
sg15
(lp1669
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I7
sa(dp1670
g16
(lp1671
S'k'
asg96
I7
sS'.thisRepN'
p1672
I18
sg30
g31
sg32
g33
sS'.thisTrialN'
p1673
I2
sS'.thisN'
p1674
I200
sS'.thisIndex'
p1675
I7
sg15
(lp1676
S'k'
asg17
S'Y'
sg14
I5
sa(dp1677
g16
(lp1678
S'd'
asg96
I8
sS'.thisRepN'
p1679
I18
sg30
g31
sg32
g33
sS'.thisTrialN'
p1680
I3
sS'.thisN'
p1681
I201
sS'.thisIndex'
p1682
I8
sg15
(lp1683
S'd'
asg17
S'Y'
sg14
I5
sa(dp1684
g16
(lp1685
S'd'
asg18
S'Y'
sS'.thisRepN'
p1686
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1687
I4
sS'.thisN'
p1688
I202
sS'.thisIndex'
p1689
I6
sg15
(lp1690
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1691
S'space'
p1692
asg96
I6
sa(dp1693
g16
(lp1694
S'd'
asg18
S'Y'
sS'.thisRepN'
p1695
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1696
I5
sS'.thisN'
p1697
I203
sS'.thisIndex'
p1698
I4
sg15
(lp1699
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1700
S'space'
p1701
asg96
I4
sa(dp1702
g16
(lp1703
S'k'
asg18
S'Y'
sS'.thisRepN'
p1704
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1705
I6
sS'.thisN'
p1706
I204
sS'.thisIndex'
p1707
I3
sg15
(lp1708
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1709
S'space'
p1710
asg96
I3
sa(dp1711
g16
(lp1712
S'd'
asg18
S'N'
sS'.thisRepN'
p1713
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1714
I7
sS'.thisN'
p1715
I205
sS'.thisIndex'
p1716
I3
sg15
(lp1717
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I3
sa(dp1718
g16
(lp1719
S'd'
asg18
S'N'
sS'.thisRepN'
p1720
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1721
I8
sS'.thisN'
p1722
I206
sS'.thisIndex'
p1723
I0
sg15
(lp1724
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I0
sa(dp1725
g16
(lp1726
S'd'
asg18
S'Y'
sS'.thisRepN'
p1727
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1728
I9
sS'.thisN'
p1729
I207
sS'.thisIndex'
p1730
I7
sg15
(lp1731
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1732
S'space'
p1733
asg96
I7
sa(dp1734
g16
(lp1735
S'd'
asg18
S'N'
sS'.thisRepN'
p1736
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1737
I10
sS'.thisN'
p1738
I208
sS'.thisIndex'
p1739
I4
sg15
(lp1740
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp1741
g16
(lp1742
S'k'
asg18
S'N'
sS'.thisRepN'
p1743
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1744
I0
sS'.thisN'
p1745
I209
sS'.thisIndex'
p1746
I8
sg15
(lp1747
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1748
g16
(lp1749
S'k'
asg18
S'N'
sS'.thisRepN'
p1750
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1751
I1
sS'.thisN'
p1752
I210
sS'.thisIndex'
p1753
I2
sg15
(lp1754
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp1755
g16
(lp1756
S'd'
asg18
S'Y'
sS'.thisRepN'
p1757
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1758
I2
sS'.thisN'
p1759
I211
sS'.thisIndex'
p1760
I1
sg15
(lp1761
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1762
S'space'
p1763
asg96
I1
sa(dp1764
g16
(lp1765
S'k'
asg18
S'N'
sS'.thisRepN'
p1766
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1767
I3
sS'.thisN'
p1768
I212
sS'.thisIndex'
p1769
I1
sg15
(lp1770
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I1
sa(dp1771
g16
(lp1772
S'k'
asg18
S'N'
sS'.thisRepN'
p1773
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1774
I4
sS'.thisN'
p1775
I213
sS'.thisIndex'
p1776
I3
sg15
(lp1777
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1778
g16
(lp1779
S'd'
asg18
S'Y'
sS'.thisRepN'
p1780
I19
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1781
I5
sS'.thisN'
p1782
I214
sS'.thisIndex'
p1783
I0
sg15
(lp1784
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I0
sa(dp1785
g16
(lp1786
S'd'
asg18
S'Y'
sS'.thisRepN'
p1787
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1788
I6
sS'.thisN'
p1789
I215
sS'.thisIndex'
p1790
I4
sg15
(lp1791
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1792
S'space'
p1793
asg96
I4
sa(dp1794
g16
(lp1795
S'k'
asg18
S'Y'
sS'.thisRepN'
p1796
I19
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1797
I7
sS'.thisN'
p1798
I216
sS'.thisIndex'
p1799
I7
sg15
(lp1800
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1801
g16
(lp1802
S'k'
asg18
S'N'
sS'.thisRepN'
p1803
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1804
I8
sS'.thisN'
p1805
I217
sS'.thisIndex'
p1806
I2
sg15
(lp1807
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp1808
g16
(lp1809
S'd'
asg18
S'N'
sS'.thisRepN'
p1810
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1811
I9
sS'.thisN'
p1812
I218
sS'.thisIndex'
p1813
I8
sg15
(lp1814
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I8
sa(dp1815
g16
(lp1816
S'k'
asg18
S'N'
sS'.thisRepN'
p1817
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1818
I10
sS'.thisN'
p1819
I219
sS'.thisIndex'
p1820
I7
sg15
(lp1821
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1822
g16
(lp1823
S'k'
asg18
S'Y'
sS'.thisRepN'
p1824
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1825
I0
sS'.thisN'
p1826
I220
sS'.thisIndex'
p1827
I6
sg15
(lp1828
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1829
S'space'
p1830
asg96
I6
sa(dp1831
g16
(lp1832
S'k'
asg18
S'Y'
sS'.thisRepN'
p1833
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1834
I1
sS'.thisN'
p1835
I221
sS'.thisIndex'
p1836
I3
sg15
(lp1837
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1838
S'space'
p1839
asg96
I3
sa(dp1840
g16
(lp1841
S'k'
asg18
S'Y'
sS'.thisRepN'
p1842
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1843
I2
sS'.thisN'
p1844
I222
sS'.thisIndex'
p1845
I9
sg15
(lp1846
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1847
S'space'
p1848
asg96
I9
sa(dp1849
g16
(lp1850
S'k'
asg18
S'N'
sS'.thisRepN'
p1851
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1852
I3
sS'.thisN'
p1853
I223
sS'.thisIndex'
p1854
I1
sg15
(lp1855
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I1
sa(dp1856
g16
(lp1857
S'd'
asg18
S'N'
sS'.thisRepN'
p1858
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1859
I4
sS'.thisN'
p1860
I224
sS'.thisIndex'
p1861
I4
sg15
(lp1862
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp1863
g16
(lp1864
S'd'
asg18
S'N'
sS'.thisRepN'
p1865
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1866
I5
sS'.thisN'
p1867
I225
sS'.thisIndex'
p1868
I3
sg15
(lp1869
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I3
sa(dp1870
g16
(lp1871
S'd'
asg18
S'Y'
sS'.thisRepN'
p1872
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1873
I6
sS'.thisN'
p1874
I226
sS'.thisIndex'
p1875
I3
sg15
(lp1876
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1877
S'space'
p1878
asg96
I3
sa(dp1879
g16
(lp1880
S'k'
asg18
S'Y'
sS'.thisRepN'
p1881
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1882
I7
sS'.thisN'
p1883
I227
sS'.thisIndex'
p1884
I4
sg15
(lp1885
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1886
S'space'
p1887
asg96
I4
sa(dp1888
g16
(lp1889
S'd'
asg18
S'Y'
sS'.thisRepN'
p1890
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1891
I8
sS'.thisN'
p1892
I228
sS'.thisIndex'
p1893
I8
sg15
(lp1894
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1895
S'space'
p1896
asg96
I8
sa(dp1897
g16
(lp1898
S'k'
asg18
S'N'
sS'.thisRepN'
p1899
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1900
I9
sS'.thisN'
p1901
I229
sS'.thisIndex'
p1902
I1
sg15
(lp1903
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I1
sa(dp1904
g16
(lp1905
S'k'
asg18
S'Y'
sS'.thisRepN'
p1906
I20
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1907
I10
sS'.thisN'
p1908
I230
sS'.thisIndex'
p1909
I0
sg15
(lp1910
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1911
g16
(lp1912
S'd'
asg18
S'Y'
sS'.thisRepN'
p1913
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1914
I0
sS'.thisN'
p1915
I231
sS'.thisIndex'
p1916
I5
sg15
(lp1917
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1918
S'space'
p1919
asg96
I5
sa(dp1920
g16
(lp1921
S'k'
asg18
S'Y'
sS'.thisRepN'
p1922
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1923
I1
sS'.thisN'
p1924
I232
sS'.thisIndex'
p1925
I8
sg15
(lp1926
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1927
g16
(lp1928
S'k'
asg18
S'N'
sS'.thisRepN'
p1929
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1930
I2
sS'.thisN'
p1931
I233
sS'.thisIndex'
p1932
I9
sg15
(lp1933
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1934
g16
(lp1935
S'k'
asg18
S'N'
sS'.thisRepN'
p1936
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1937
I3
sS'.thisN'
p1938
I234
sS'.thisIndex'
p1939
I7
sg15
(lp1940
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1941
g16
(lp1942
S'd'
asg18
S'Y'
sS'.thisRepN'
p1943
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1944
I4
sS'.thisN'
p1945
I235
sS'.thisIndex'
p1946
I10
sg15
(lp1947
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1948
S'space'
p1949
asg96
I10
sa(dp1950
g16
(lp1951
S'k'
asg18
S'Y'
sS'.thisRepN'
p1952
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1953
I5
sS'.thisN'
p1954
I236
sS'.thisIndex'
p1955
I10
sg15
(lp1956
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1957
g16
(lp1958
S'k'
asg18
S'N'
sS'.thisRepN'
p1959
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1960
I6
sS'.thisN'
p1961
I237
sS'.thisIndex'
p1962
I6
sg15
(lp1963
S'd'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I6
sa(dp1964
g16
(lp1965
S'd'
asg18
S'N'
sS'.thisRepN'
p1966
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1967
I7
sS'.thisN'
p1968
I238
sS'.thisIndex'
p1969
I4
sg15
(lp1970
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp1971
g16
(lp1972
S'k'
asg18
S'N'
sS'.thisRepN'
p1973
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1974
I8
sS'.thisN'
p1975
I239
sS'.thisIndex'
p1976
I6
sg15
(lp1977
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I6
sa(dp1978
g16
(lp1979
S'k'
asg18
S'N'
sS'.thisRepN'
p1980
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1981
I9
sS'.thisN'
p1982
I240
sS'.thisIndex'
p1983
I5
sg15
(lp1984
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I5
sa(dp1985
g16
(lp1986
S'd'
asg18
S'N'
sS'.thisRepN'
p1987
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1988
I10
sS'.thisN'
p1989
I241
sS'.thisIndex'
p1990
I3
sg15
(lp1991
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1992
g16
(lp1993
S'k'
asg18
S'N'
sS'.thisRepN'
p1994
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1995
I0
sS'.thisN'
p1996
I242
sS'.thisIndex'
p1997
I9
sg15
(lp1998
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1999
g16
(lp2000
S'k'
asg18
S'Y'
sS'.thisRepN'
p2001
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2002
I1
sS'.thisN'
p2003
I243
sS'.thisIndex'
p2004
I2
sg15
(lp2005
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2006
S'space'
p2007
asg96
I2
sa(dp2008
g16
(lp2009
S'd'
asg18
S'Y'
sS'.thisRepN'
p2010
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2011
I2
sS'.thisN'
p2012
I244
sS'.thisIndex'
p2013
I8
sg15
(lp2014
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2015
S'space'
p2016
asg96
I8
sa(dp2017
g16
(lp2018
S'k'
asg18
S'Y'
sS'.thisRepN'
p2019
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2020
I3
sS'.thisN'
p2021
I245
sS'.thisIndex'
p2022
I9
sg15
(lp2023
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2024
S'space'
p2025
asg96
I9
sa(dp2026
g16
(lp2027
S'k'
asg18
S'Y'
sS'.thisRepN'
p2028
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2029
I4
sS'.thisN'
p2030
I246
sS'.thisIndex'
p2031
I5
sg15
(lp2032
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2033
S'space'
p2034
asg96
I5
sa(dp2035
g16
(lp2036
S'd'
asg18
S'N'
sS'.thisRepN'
p2037
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2038
I5
sS'.thisN'
p2039
I247
sS'.thisIndex'
p2040
I6
sg15
(lp2041
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I6
sa(dp2042
g16
(lp2043
S'd'
asg18
S'N'
sS'.thisRepN'
p2044
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2045
I6
sS'.thisN'
p2046
I248
sS'.thisIndex'
p2047
I3
sg15
(lp2048
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp2049
g16
(lp2050
S'k'
asg18
S'N'
sg22
I43
sS'.thisN'
p2051
I249
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2052
I7
sS'.thisRepN'
p2053
I22
sg21
I41
sS'.thisIndex'
p2054
I7
sg23
I23
sg15
(lp2055
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp2056
g16
(lp2057
S'd'
asg96
I10
sS'.thisRepN'
p2058
I22
sg30
g31
sg32
g33
sS'.thisTrialN'
p2059
I8
sS'.thisN'
p2060
I250
sS'.thisIndex'
p2061
I10
sg15
(lp2062
S'd'
asg17
S'Y'
sg14
I6
sa(dp2063
g16
(lp2064
S'k'
asg96
I3
sS'.thisRepN'
p2065
I22
sg30
g31
sg32
g33
sS'.thisTrialN'
p2066
I9
sS'.thisN'
p2067
I251
sS'.thisIndex'
p2068
I3
sg15
(lp2069
S'k'
asg17
S'Y'
sg14
I6
sa(dp2070
g16
(lp2071
S'k'
asg18
S'Y'
sS'.thisRepN'
p2072
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2073
I10
sS'.thisN'
p2074
I252
sS'.thisIndex'
p2075
I2
sg15
(lp2076
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2077
S'space'
p2078
asg96
I2
sa(dp2079
g16
(lp2080
S'k'
asg18
S'Y'
sS'.thisRepN'
p2081
I23
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2082
I0
sS'.thisN'
p2083
I253
sS'.thisIndex'
p2084
I5
sg15
(lp2085
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2086
g16
(lp2087
S'k'
asg18
S'N'
sS'.thisRepN'
p2088
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2089
I1
sS'.thisN'
p2090
I254
sS'.thisIndex'
p2091
I9
sg15
(lp2092
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2093
g16
(lp2094
S'k'
asg18
S'N'
sS'.thisRepN'
p2095
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2096
I2
sS'.thisN'
p2097
I255
sS'.thisIndex'
p2098
I9
sg15
(lp2099
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2100
g16
(lp2101
S'k'
asg18
S'N'
sS'.thisRepN'
p2102
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2103
I3
sS'.thisN'
p2104
I256
sS'.thisIndex'
p2105
I9
sg15
(lp2106
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2107
g16
(lp2108
S'k'
asg18
S'Y'
sS'.thisRepN'
p2109
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2110
I4
sS'.thisN'
p2111
I257
sS'.thisIndex'
p2112
I2
sg15
(lp2113
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2114
S'space'
p2115
asg96
I2
sa(dp2116
g16
(lp2117
S'd'
asg18
S'Y'
sS'.thisRepN'
p2118
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2119
I5
sS'.thisN'
p2120
I258
sS'.thisIndex'
p2121
I7
sg15
(lp2122
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2123
S'space'
p2124
asg96
I7
sa(dp2125
g16
(lp2126
S'k'
asg18
S'N'
sS'.thisRepN'
p2127
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2128
I6
sS'.thisN'
p2129
I259
sS'.thisIndex'
p2130
I1
sg15
(lp2131
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2132
g16
(lp2133
S'd'
asg18
S'Y'
sS'.thisRepN'
p2134
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2135
I7
sS'.thisN'
p2136
I260
sS'.thisIndex'
p2137
I3
sg15
(lp2138
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2139
S'space'
p2140
asg96
I3
sa(dp2141
g16
(lp2142
S'k'
asg18
S'N'
sS'.thisRepN'
p2143
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2144
I8
sS'.thisN'
p2145
I261
sS'.thisIndex'
p2146
I8
sg15
(lp2147
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2148
g16
(lp2149
S'd'
asg18
S'Y'
sS'.thisRepN'
p2150
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2151
I9
sS'.thisN'
p2152
I262
sS'.thisIndex'
p2153
I6
sg15
(lp2154
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2155
S'space'
p2156
asg96
I6
sa(dp2157
g16
(lp2158
S'k'
asg18
S'N'
sS'.thisRepN'
p2159
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2160
I10
sS'.thisN'
p2161
I263
sS'.thisIndex'
p2162
I8
sg15
(lp2163
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2164
g16
(lp2165
S'k'
asg18
S'Y'
sS'.thisRepN'
p2166
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2167
I0
sS'.thisN'
p2168
I264
sS'.thisIndex'
p2169
I2
sg15
(lp2170
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2171
S'space'
p2172
asg96
I2
sa(dp2173
g16
(lp2174
S'd'
asg18
S'Y'
sS'.thisRepN'
p2175
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2176
I1
sS'.thisN'
p2177
I265
sS'.thisIndex'
p2178
I6
sg15
(lp2179
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2180
S'space'
p2181
asg96
I6
sa(dp2182
g16
(lp2183
S'd'
asg18
S'N'
sS'.thisRepN'
p2184
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2185
I2
sS'.thisN'
p2186
I266
sS'.thisIndex'
p2187
I4
sg15
(lp2188
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I4
sa(dp2189
g16
(lp2190
S'k'
asg18
S'Y'
sS'.thisRepN'
p2191
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2192
I3
sS'.thisN'
p2193
I267
sS'.thisIndex'
p2194
I1
sg15
(lp2195
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2196
S'space'
p2197
asg96
I1
sa(dp2198
g16
(lp2199
S'k'
asg18
S'Y'
sS'.thisRepN'
p2200
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2201
I4
sS'.thisN'
p2202
I268
sS'.thisIndex'
p2203
I10
sg15
(lp2204
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2205
S'space'
p2206
asg96
I10
sa(dp2207
g16
(lp2208
S'k'
asg18
S'Y'
sS'.thisRepN'
p2209
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2210
I5
sS'.thisN'
p2211
I269
sS'.thisIndex'
p2212
I3
sg15
(lp2213
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2214
S'space'
p2215
asg96
I3
sa(dp2216
g16
(lp2217
S'k'
asg18
S'Y'
sS'.thisRepN'
p2218
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2219
I6
sS'.thisN'
p2220
I270
sS'.thisIndex'
p2221
I0
sg15
(lp2222
S'd'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2223
S'space'
p2224
asg96
I0
sa(dp2225
g16
(lp2226
S'd'
asg18
S'Y'
sS'.thisRepN'
p2227
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2228
I7
sS'.thisN'
p2229
I271
sS'.thisIndex'
p2230
I10
sg15
(lp2231
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2232
g16
(lp2233
S'd'
asg18
S'Y'
sS'.thisRepN'
p2234
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2235
I8
sS'.thisN'
p2236
I272
sS'.thisIndex'
p2237
I7
sg15
(lp2238
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I7
sa(dp2239
g16
(lp2240
S'k'
asg18
S'Y'
sS'.thisRepN'
p2241
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2242
I9
sS'.thisN'
p2243
I273
sS'.thisIndex'
p2244
I2
sg15
(lp2245
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2246
S'space'
p2247
asg96
I2
sa(dp2248
g16
(lp2249
S'd'
asg18
S'N'
sS'.thisRepN'
p2250
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2251
I10
sS'.thisN'
p2252
I274
sS'.thisIndex'
p2253
I3
sg15
(lp2254
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I3
sa(dp2255
g16
(lp2256
S'k'
asg18
S'Y'
sS'.thisRepN'
p2257
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2258
I0
sS'.thisN'
p2259
I275
sS'.thisIndex'
p2260
I0
sg15
(lp2261
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2262
S'space'
p2263
asg96
I0
sa(dp2264
g16
(lp2265
S'd'
asg18
S'Y'
sS'.thisRepN'
p2266
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2267
I1
sS'.thisN'
p2268
I276
sS'.thisIndex'
p2269
I0
sg15
(lp2270
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2271
S'space'
p2272
asg96
I0
sa(dp2273
g16
(lp2274
S'k'
asg18
S'N'
sS'.thisRepN'
p2275
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2276
I2
sS'.thisN'
p2277
I277
sS'.thisIndex'
p2278
I9
sg15
(lp2279
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2280
g16
(lp2281
S'k'
asg18
S'Y'
sS'.thisRepN'
p2282
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2283
I3
sS'.thisN'
p2284
I278
sS'.thisIndex'
p2285
I10
sg15
(lp2286
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2287
S'space'
p2288
asg96
I10
sa(dp2289
g16
(lp2290
S'd'
asg18
S'Y'
sS'.thisRepN'
p2291
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2292
I4
sS'.thisN'
p2293
I279
sS'.thisIndex'
p2294
I4
sg15
(lp2295
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2296
S'space'
p2297
asg96
I4
sa(dp2298
g16
(lp2299
S'd'
asg18
S'Y'
sS'.thisRepN'
p2300
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2301
I5
sS'.thisN'
p2302
I280
sS'.thisIndex'
p2303
I3
sg15
(lp2304
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2305
S'space'
p2306
asg96
I3
sa(dp2307
g16
(lp2308
S'd'
asg18
S'Y'
sS'.thisRepN'
p2309
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2310
I6
sS'.thisN'
p2311
I281
sS'.thisIndex'
p2312
I0
sg15
(lp2313
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2314
S'space'
p2315
asg96
I0
sa(dp2316
g16
(lp2317
S'd'
asg18
S'Y'
sS'.thisRepN'
p2318
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2319
I7
sS'.thisN'
p2320
I282
sS'.thisIndex'
p2321
I8
sg15
(lp2322
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2323
g16
(lp2324
S'd'
asg18
S'N'
sS'.thisRepN'
p2325
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2326
I8
sS'.thisN'
p2327
I283
sS'.thisIndex'
p2328
I7
sg15
(lp2329
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I7
sa(dp2330
g16
(lp2331
S'k'
asg18
S'Y'
sS'.thisRepN'
p2332
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2333
I9
sS'.thisN'
p2334
I284
sS'.thisIndex'
p2335
I3
sg15
(lp2336
S'd'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2337
S'space'
p2338
asg96
I3
sa(dp2339
g16
(lp2340
S'k'
asg18
S'Y'
sS'.thisRepN'
p2341
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2342
I10
sS'.thisN'
p2343
I285
sS'.thisIndex'
p2344
I9
sg15
(lp2345
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2346
S'space'
p2347
asg96
I9
sa(dp2348
g16
(lp2349
S'k'
asg18
S'N'
sS'.thisRepN'
p2350
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2351
I0
sS'.thisN'
p2352
I286
sS'.thisIndex'
p2353
I2
sg15
(lp2354
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2355
g16
(lp2356
S'k'
asg18
S'Y'
sS'.thisRepN'
p2357
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2358
I1
sS'.thisN'
p2359
I287
sS'.thisIndex'
p2360
I3
sg15
(lp2361
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2362
S'space'
p2363
asg96
I3
sa(dp2364
g16
(lp2365
S'k'
asg18
S'N'
sS'.thisRepN'
p2366
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2367
I2
sS'.thisN'
p2368
I288
sS'.thisIndex'
p2369
I5
sg15
(lp2370
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2371
g16
(lp2372
S'd'
asg18
S'N'
sS'.thisRepN'
p2373
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2374
I3
sS'.thisN'
p2375
I289
sS'.thisIndex'
p2376
I10
sg15
(lp2377
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2378
g16
(lp2379
S'k'
asg18
S'N'
sS'.thisRepN'
p2380
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2381
I4
sS'.thisN'
p2382
I290
sS'.thisIndex'
p2383
I7
sg15
(lp2384
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I7
sa(dp2385
g16
(lp2386
S'k'
asg18
S'N'
sS'.thisRepN'
p2387
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2388
I5
sS'.thisN'
p2389
I291
sS'.thisIndex'
p2390
I5
sg15
(lp2391
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2392
g16
(lp2393
S'k'
asg18
S'N'
sS'.thisRepN'
p2394
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2395
I6
sS'.thisN'
p2396
I292
sS'.thisIndex'
p2397
I9
sg15
(lp2398
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2399
g16
(lp2400
S'd'
asg18
S'N'
sS'.thisRepN'
p2401
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2402
I7
sS'.thisN'
p2403
I293
sS'.thisIndex'
p2404
I9
sg15
(lp2405
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2406
g16
(lp2407
S'k'
asg18
S'N'
sS'.thisRepN'
p2408
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2409
I8
sS'.thisN'
p2410
I294
sS'.thisIndex'
p2411
I8
sg15
(lp2412
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2413
g16
(lp2414
S'k'
asg18
S'N'
sS'.thisRepN'
p2415
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2416
I9
sS'.thisN'
p2417
I295
sS'.thisIndex'
p2418
I9
sg15
(lp2419
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2420
g16
(lp2421
S'd'
asg18
S'N'
sS'.thisRepN'
p2422
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2423
I10
sS'.thisN'
p2424
I296
sS'.thisIndex'
p2425
I5
sg15
(lp2426
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I5
sa(dp2427
g16
(lp2428
S'k'
asg18
S'N'
sS'.thisRepN'
p2429
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2430
I0
sS'.thisN'
p2431
I297
sS'.thisIndex'
p2432
I3
sg15
(lp2433
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I3
sa(dp2434
g16
(lp2435
S'd'
asg18
S'N'
sS'.thisRepN'
p2436
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2437
I1
sS'.thisN'
p2438
I298
sS'.thisIndex'
p2439
I10
sg15
(lp2440
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2441
g16
(lp2442
S'd'
asg18
S'N'
sg22
I44
sS'.thisN'
p2443
I299
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2444
I2
sS'.thisRepN'
p2445
I27
sg21
I42
sS'.thisIndex'
p2446
I10
sg23
I25
sg15
(lp2447
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2448
g16
(lp2449
S'k'
asg96
I1
sS'.thisRepN'
p2450
I27
sg30
g31
sg32
g33
sS'.thisTrialN'
p2451
I3
sS'.thisN'
p2452
I300
sS'.thisIndex'
p2453
I1
sg15
(lp2454
S'k'
asg17
S'Y'
sg14
I7
sa(dp2455
g16
(lp2456
S'd'
asg96
I3
sS'.thisRepN'
p2457
I27
sg30
g31
sg32
g33
sS'.thisTrialN'
p2458
I4
sS'.thisN'
p2459
I301
sS'.thisIndex'
p2460
I3
sg15
(lp2461
S'd'
asg17
S'Y'
sg14
I7
sa(dp2462
g16
(lp2463
S'k'
asg18
S'Y'
sS'.thisRepN'
p2464
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2465
I5
sS'.thisN'
p2466
I302
sS'.thisIndex'
p2467
I0
sg15
(lp2468
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2469
S'space'
p2470
asg96
I0
sa(dp2471
g16
(lp2472
S'd'
asg18
S'Y'
sS'.thisRepN'
p2473
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2474
I6
sS'.thisN'
p2475
I303
sS'.thisIndex'
p2476
I6
sg15
(lp2477
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2478
S'space'
p2479
asg96
I6
sa(dp2480
g16
(lp2481
S'k'
asg18
S'Y'
sS'.thisRepN'
p2482
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2483
I7
sS'.thisN'
p2484
I304
sS'.thisIndex'
p2485
I8
sg15
(lp2486
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2487
S'space'
p2488
asg96
I8
sa(dp2489
g16
(lp2490
S'k'
asg18
S'N'
sS'.thisRepN'
p2491
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2492
I8
sS'.thisN'
p2493
I305
sS'.thisIndex'
p2494
I2
sg15
(lp2495
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2496
g16
(lp2497
S'k'
asg18
S'Y'
sS'.thisRepN'
p2498
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2499
I9
sS'.thisN'
p2500
I306
sS'.thisIndex'
p2501
I0
sg15
(lp2502
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2503
S'space'
p2504
asg96
I0
sa(dp2505
g16
(lp2506
S'd'
asg18
S'Y'
sS'.thisRepN'
p2507
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2508
I10
sS'.thisN'
p2509
I307
sS'.thisIndex'
p2510
I3
sg15
(lp2511
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2512
S'space'
p2513
asg96
I3
sa(dp2514
g16
(lp2515
S'd'
asg18
S'Y'
sS'.thisRepN'
p2516
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2517
I0
sS'.thisN'
p2518
I308
sS'.thisIndex'
p2519
I1
sg15
(lp2520
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2521
S'space'
p2522
asg96
I1
sa(dp2523
g16
(lp2524
S'd'
asg18
S'N'
sS'.thisRepN'
p2525
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2526
I1
sS'.thisN'
p2527
I309
sS'.thisIndex'
p2528
I7
sg15
(lp2529
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I7
sa(dp2530
g16
(lp2531
S'd'
asg18
S'Y'
sS'.thisRepN'
p2532
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2533
I2
sS'.thisN'
p2534
I310
sS'.thisIndex'
p2535
I6
sg15
(lp2536
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2537
S'space'
p2538
asg96
I6
sa(dp2539
g16
(lp2540
S'd'
asg18
S'N'
sS'.thisRepN'
p2541
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2542
I3
sS'.thisN'
p2543
I311
sS'.thisIndex'
p2544
I6
sg15
(lp2545
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I6
sa(dp2546
g16
(lp2547
S'k'
asg18
S'Y'
sS'.thisRepN'
p2548
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2549
I4
sS'.thisN'
p2550
I312
sS'.thisIndex'
p2551
I4
sg15
(lp2552
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2553
S'space'
p2554
asg96
I4
sa(dp2555
g16
(lp2556
S'd'
asg18
S'Y'
sS'.thisRepN'
p2557
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2558
I5
sS'.thisN'
p2559
I313
sS'.thisIndex'
p2560
I9
sg15
(lp2561
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2562
S'space'
p2563
asg96
I9
sa(dp2564
g16
(lp2565
S'k'
asg18
S'Y'
sS'.thisRepN'
p2566
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2567
I6
sS'.thisN'
p2568
I314
sS'.thisIndex'
p2569
I9
sg15
(lp2570
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2571
S'space'
p2572
asg96
I9
sa(dp2573
g16
(lp2574
S'd'
asg18
S'N'
sS'.thisRepN'
p2575
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2576
I7
sS'.thisN'
p2577
I315
sS'.thisIndex'
p2578
I9
sg15
(lp2579
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I9
sa(dp2580
g16
(lp2581
S'k'
asg18
S'N'
sS'.thisRepN'
p2582
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2583
I8
sS'.thisN'
p2584
I316
sS'.thisIndex'
p2585
I9
sg15
(lp2586
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I9
sa(dp2587
g16
(lp2588
S'k'
asg18
S'N'
sS'.thisRepN'
p2589
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2590
I9
sS'.thisN'
p2591
I317
sS'.thisIndex'
p2592
I9
sg15
(lp2593
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I9
sa(dp2594
g16
(lp2595
S'k'
asg18
S'N'
sS'.thisRepN'
p2596
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2597
I10
sS'.thisN'
p2598
I318
sS'.thisIndex'
p2599
I6
sg15
(lp2600
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I6
sa(dp2601
g16
(lp2602
S'd'
asg18
S'N'
sS'.thisRepN'
p2603
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2604
I0
sS'.thisN'
p2605
I319
sS'.thisIndex'
p2606
I0
sg15
(lp2607
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I0
sa(dp2608
g16
(lp2609
S'd'
asg18
S'Y'
sS'.thisRepN'
p2610
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2611
I1
sS'.thisN'
p2612
I320
sS'.thisIndex'
p2613
I9
sg15
(lp2614
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2615
S'space'
p2616
asg96
I9
sa(dp2617
g16
(lp2618
S'k'
asg18
S'Y'
sS'.thisRepN'
p2619
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2620
I2
sS'.thisN'
p2621
I321
sS'.thisIndex'
p2622
I8
sg15
(lp2623
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2624
S'space'
p2625
asg96
I8
sa(dp2626
g16
(lp2627
S'k'
asg18
S'Y'
sS'.thisRepN'
p2628
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2629
I3
sS'.thisN'
p2630
I322
sS'.thisIndex'
p2631
I8
sg15
(lp2632
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2633
S'space'
p2634
asg96
I8
sa(dp2635
g16
(lp2636
S'k'
asg18
S'Y'
sS'.thisRepN'
p2637
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2638
I4
sS'.thisN'
p2639
I323
sS'.thisIndex'
p2640
I3
sg15
(lp2641
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2642
S'space'
p2643
asg96
I3
sa(dp2644
g16
(lp2645
S'k'
asg18
S'N'
sS'.thisRepN'
p2646
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2647
I5
sS'.thisN'
p2648
I324
sS'.thisIndex'
p2649
I2
sg15
(lp2650
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2651
g16
(lp2652
S'd'
asg18
S'N'
sS'.thisRepN'
p2653
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2654
I6
sS'.thisN'
p2655
I325
sS'.thisIndex'
p2656
I2
sg15
(lp2657
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2658
g16
(lp2659
S'd'
asg18
S'N'
sS'.thisRepN'
p2660
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2661
I7
sS'.thisN'
p2662
I326
sS'.thisIndex'
p2663
I0
sg15
(lp2664
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I0
sa(dp2665
g16
(lp2666
S'd'
asg18
S'N'
sS'.thisRepN'
p2667
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2668
I8
sS'.thisN'
p2669
I327
sS'.thisIndex'
p2670
I7
sg15
(lp2671
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I7
sa(dp2672
g16
(lp2673
S'k'
asg18
S'N'
sS'.thisRepN'
p2674
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2675
I9
sS'.thisN'
p2676
I328
sS'.thisIndex'
p2677
I6
sg15
(lp2678
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I6
sa(dp2679
g16
(lp2680
S'k'
asg18
S'N'
sS'.thisRepN'
p2681
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2682
I10
sS'.thisN'
p2683
I329
sS'.thisIndex'
p2684
I3
sg15
(lp2685
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2686
g16
(lp2687
S'k'
asg18
S'N'
sS'.thisRepN'
p2688
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2689
I0
sS'.thisN'
p2690
I330
sS'.thisIndex'
p2691
I1
sg15
(lp2692
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2693
g16
(lp2694
S'k'
asg18
S'Y'
sS'.thisRepN'
p2695
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2696
I1
sS'.thisN'
p2697
I331
sS'.thisIndex'
p2698
I0
sg15
(lp2699
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2700
S'space'
p2701
asg96
I0
sa(dp2702
g16
(lp2703
S'd'
asg18
S'N'
sS'.thisRepN'
p2704
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2705
I2
sS'.thisN'
p2706
I332
sS'.thisIndex'
p2707
I6
sg15
(lp2708
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2709
S'space'
p2710
asg96
I6
sa(dp2711
g16
(lp2712
S'd'
asg18
S'N'
sS'.thisRepN'
p2713
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2714
I3
sS'.thisN'
p2715
I333
sS'.thisIndex'
p2716
I9
sg15
(lp2717
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I9
sa(dp2718
g16
(lp2719
S'k'
asg18
S'Y'
sS'.thisRepN'
p2720
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2721
I4
sS'.thisN'
p2722
I334
sS'.thisIndex'
p2723
I8
sg15
(lp2724
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I8
sa(dp2725
g16
(lp2726
S'd'
asg18
S'Y'
sS'.thisRepN'
p2727
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2728
I5
sS'.thisN'
p2729
I335
sS'.thisIndex'
p2730
I10
sg15
(lp2731
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2732
S'k'
asg96
I10
sa(dp2733
g16
(lp2734
S'k'
asg18
S'Y'
sS'.thisRepN'
p2735
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2736
I6
sS'.thisN'
p2737
I336
sS'.thisIndex'
p2738
I8
sg15
(lp2739
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I8
sa(dp2740
g16
(lp2741
S'k'
asg18
S'N'
sS'.thisRepN'
p2742
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2743
I7
sS'.thisN'
p2744
I337
sS'.thisIndex'
p2745
I10
sg15
(lp2746
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2747
g16
(lp2748
S'k'
asg18
S'Y'
sS'.thisRepN'
p2749
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2750
I8
sS'.thisN'
p2751
I338
sS'.thisIndex'
p2752
I4
sg15
(lp2753
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2754
S'space'
p2755
asg96
I4
sa(dp2756
g16
(lp2757
S'd'
asg18
S'N'
sS'.thisRepN'
p2758
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2759
I9
sS'.thisN'
p2760
I339
sS'.thisIndex'
p2761
I7
sg15
(lp2762
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I7
sa(dp2763
g16
(lp2764
S'd'
asg18
S'Y'
sS'.thisRepN'
p2765
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2766
I10
sS'.thisN'
p2767
I340
sS'.thisIndex'
p2768
I3
sg15
(lp2769
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2770
S'space'
p2771
asg96
I3
sa(dp2772
g16
(lp2773
S'k'
asg18
S'Y'
sS'.thisRepN'
p2774
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2775
I0
sS'.thisN'
p2776
I341
sS'.thisIndex'
p2777
I10
sg15
(lp2778
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2779
S'space'
p2780
asg96
I10
sa(dp2781
g16
(lp2782
S'k'
asg18
S'Y'
sS'.thisRepN'
p2783
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2784
I1
sS'.thisN'
p2785
I342
sS'.thisIndex'
p2786
I10
sg15
(lp2787
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2788
S'space'
p2789
asg96
I10
sa(dp2790
g16
(lp2791
S'd'
asg18
S'Y'
sS'.thisRepN'
p2792
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2793
I2
sS'.thisN'
p2794
I343
sS'.thisIndex'
p2795
I2
sg15
(lp2796
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2797
S'space'
p2798
asg96
I2
sa(dp2799
g16
(lp2800
S'k'
asg18
S'Y'
sS'.thisRepN'
p2801
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2802
I3
sS'.thisN'
p2803
I344
sS'.thisIndex'
p2804
I2
sg15
(lp2805
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2806
S'space'
p2807
asg96
I2
sa(dp2808
g16
(lp2809
S'k'
asg18
S'N'
sS'.thisRepN'
p2810
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2811
I4
sS'.thisN'
p2812
I345
sS'.thisIndex'
p2813
I5
sg15
(lp2814
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2815
g16
(lp2816
S'k'
asg18
S'N'
sS'.thisRepN'
p2817
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2818
I5
sS'.thisN'
p2819
I346
sS'.thisIndex'
p2820
I10
sg15
(lp2821
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2822
g16
(lp2823
S'd'
asg18
S'N'
sS'.thisRepN'
p2824
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2825
I6
sS'.thisN'
p2826
I347
sS'.thisIndex'
p2827
I2
sg15
(lp2828
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I2
sa(dp2829
g16
(lp2830
S'k'
asg18
S'Y'
sS'.thisRepN'
p2831
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2832
I7
sS'.thisN'
p2833
I348
sS'.thisIndex'
p2834
I8
sg15
(lp2835
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2836
S'space'
p2837
asg96
I8
sa(dp2838
g16
(lp2839
S'k'
asg18
S'N'
sg22
I44
sS'.thisN'
p2840
I349
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2841
I8
sS'.thisRepN'
p2842
I31
sg21
I36
sS'.thisIndex'
p2843
I8
sg23
I25
sg15
(lp2844
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I8
sa(dp2845
g16
(lp2846
S'k'
asg96
I2
sS'.thisRepN'
p2847
I31
sg30
g31
sg32
g33
sS'.thisTrialN'
p2848
I9
sS'.thisN'
p2849
I350
sS'.thisIndex'
p2850
I2
sg15
(lp2851
S'k'
asg17
S'Y'
sg14
I8
sa(dp2852
g16
(lp2853
S'k'
asg96
I5
sS'.thisRepN'
p2854
I31
sg30
g31
sg32
g33
sS'.thisTrialN'
p2855
I10
sS'.thisN'
p2856
I351
sS'.thisIndex'
p2857
I5
sg15
(lp2858
S'k'
asg17
S'Y'
sg14
I8
sa(dp2859
g16
(lp2860
S'd'
asg18
S'Y'
sS'.thisRepN'
p2861
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2862
I0
sS'.thisN'
p2863
I352
sS'.thisIndex'
p2864
I7
sg15
(lp2865
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2866
S'space'
p2867
asg96
I7
sa(dp2868
g16
(lp2869
S'd'
asg18
S'Y'
sS'.thisRepN'
p2870
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2871
I1
sS'.thisN'
p2872
I353
sS'.thisIndex'
p2873
I9
sg15
(lp2874
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2875
S'space'
p2876
asg96
I9
sa(dp2877
g16
(lp2878
S'd'
asg18
S'Y'
sS'.thisRepN'
p2879
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2880
I2
sS'.thisN'
p2881
I354
sS'.thisIndex'
p2882
I10
sg15
(lp2883
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2884
S'space'
p2885
asg96
I10
sa(dp2886
g16
(lp2887
S'd'
asg18
S'Y'
sS'.thisRepN'
p2888
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2889
I3
sS'.thisN'
p2890
I355
sS'.thisIndex'
p2891
I2
sg15
(lp2892
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2893
S'space'
p2894
asg96
I2
sa(dp2895
g16
(lp2896
S'k'
asg18
S'N'
sS'.thisRepN'
p2897
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2898
I4
sS'.thisN'
p2899
I356
sS'.thisIndex'
p2900
I2
sg15
(lp2901
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp2902
g16
(lp2903
S'd'
asg18
S'N'
sS'.thisRepN'
p2904
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2905
I5
sS'.thisN'
p2906
I357
sS'.thisIndex'
p2907
I6
sg15
(lp2908
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp2909
g16
(lp2910
S'k'
asg18
S'Y'
sS'.thisRepN'
p2911
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2912
I6
sS'.thisN'
p2913
I358
sS'.thisIndex'
p2914
I2
sg15
(lp2915
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2916
S'space'
p2917
asg96
I2
sa(dp2918
g16
(lp2919
S'k'
asg18
S'Y'
sS'.thisRepN'
p2920
I32
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2921
I7
sS'.thisN'
p2922
I359
sS'.thisIndex'
p2923
I0
sg15
(lp2924
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp2925
g16
(lp2926
S'k'
asg18
S'N'
sS'.thisRepN'
p2927
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2928
I8
sS'.thisN'
p2929
I360
sS'.thisIndex'
p2930
I5
sg15
(lp2931
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp2932
g16
(lp2933
S'd'
asg18
S'N'
sS'.thisRepN'
p2934
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2935
I9
sS'.thisN'
p2936
I361
sS'.thisIndex'
p2937
I6
sg15
(lp2938
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp2939
g16
(lp2940
S'k'
asg18
S'Y'
sS'.thisRepN'
p2941
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2942
I10
sS'.thisN'
p2943
I362
sS'.thisIndex'
p2944
I3
sg15
(lp2945
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2946
S'space'
p2947
asg96
I3
sa(dp2948
g16
(lp2949
S'd'
asg18
S'Y'
sS'.thisRepN'
p2950
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2951
I0
sS'.thisN'
p2952
I363
sS'.thisIndex'
p2953
I1
sg15
(lp2954
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2955
S'space'
p2956
asg96
I1
sa(dp2957
g16
(lp2958
S'k'
asg18
S'N'
sS'.thisRepN'
p2959
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2960
I1
sS'.thisN'
p2961
I364
sS'.thisIndex'
p2962
I3
sg15
(lp2963
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp2964
g16
(lp2965
S'k'
asg18
S'N'
sS'.thisRepN'
p2966
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2967
I2
sS'.thisN'
p2968
I365
sS'.thisIndex'
p2969
I10
sg15
(lp2970
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp2971
g16
(lp2972
S'd'
asg18
S'Y'
sS'.thisRepN'
p2973
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2974
I3
sS'.thisN'
p2975
I366
sS'.thisIndex'
p2976
I7
sg15
(lp2977
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2978
S'space'
p2979
asg96
I7
sa(dp2980
g16
(lp2981
S'd'
asg18
S'N'
sS'.thisRepN'
p2982
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2983
I4
sS'.thisN'
p2984
I367
sS'.thisIndex'
p2985
I7
sg15
(lp2986
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I7
sa(dp2987
g16
(lp2988
S'd'
asg18
S'Y'
sS'.thisRepN'
p2989
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2990
I5
sS'.thisN'
p2991
I368
sS'.thisIndex'
p2992
I9
sg15
(lp2993
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2994
S'space'
p2995
asg96
I9
sa(dp2996
g16
(lp2997
S'd'
asg18
S'N'
sS'.thisRepN'
p2998
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2999
I6
sS'.thisN'
p3000
I369
sS'.thisIndex'
p3001
I5
sg15
(lp3002
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp3003
g16
(lp3004
S'd'
asg18
S'Y'
sS'.thisRepN'
p3005
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3006
I7
sS'.thisN'
p3007
I370
sS'.thisIndex'
p3008
I10
sg15
(lp3009
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3010
S'space'
p3011
asg96
I10
sa(dp3012
g16
(lp3013
S'd'
asg18
S'N'
sS'.thisRepN'
p3014
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3015
I8
sS'.thisN'
p3016
I371
sS'.thisIndex'
p3017
I6
sg15
(lp3018
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp3019
g16
(lp3020
S'd'
asg18
S'N'
sS'.thisRepN'
p3021
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3022
I9
sS'.thisN'
p3023
I372
sS'.thisIndex'
p3024
I9
sg15
(lp3025
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3026
g16
(lp3027
S'd'
asg18
S'Y'
sS'.thisRepN'
p3028
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3029
I10
sS'.thisN'
p3030
I373
sS'.thisIndex'
p3031
I1
sg15
(lp3032
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3033
S'space'
p3034
asg96
I1
sa(dp3035
g16
(lp3036
S'd'
asg18
S'Y'
sS'.thisRepN'
p3037
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3038
I0
sS'.thisN'
p3039
I374
sS'.thisIndex'
p3040
I4
sg15
(lp3041
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3042
S'space'
p3043
asg96
I4
sa(dp3044
g16
(lp3045
S'd'
asg18
S'N'
sS'.thisRepN'
p3046
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3047
I1
sS'.thisN'
p3048
I375
sS'.thisIndex'
p3049
I0
sg15
(lp3050
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp3051
g16
(lp3052
S'd'
asg18
S'N'
sS'.thisRepN'
p3053
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3054
I2
sS'.thisN'
p3055
I376
sS'.thisIndex'
p3056
I7
sg15
(lp3057
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I7
sa(dp3058
g16
(lp3059
S'k'
asg18
S'N'
sS'.thisRepN'
p3060
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3061
I3
sS'.thisN'
p3062
I377
sS'.thisIndex'
p3063
I7
sg15
(lp3064
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I7
sa(dp3065
g16
(lp3066
S'd'
asg18
S'Y'
sS'.thisRepN'
p3067
I34
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3068
I4
sS'.thisN'
p3069
I378
sS'.thisIndex'
p3070
I6
sg15
(lp3071
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I6
sa(dp3072
g16
(lp3073
S'k'
asg18
S'N'
sS'.thisRepN'
p3074
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3075
I5
sS'.thisN'
p3076
I379
sS'.thisIndex'
p3077
I9
sg15
(lp3078
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3079
g16
(lp3080
S'k'
asg18
S'N'
sS'.thisRepN'
p3081
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3082
I6
sS'.thisN'
p3083
I380
sS'.thisIndex'
p3084
I4
sg15
(lp3085
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I4
sa(dp3086
g16
(lp3087
S'd'
asg18
S'Y'
sS'.thisRepN'
p3088
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3089
I7
sS'.thisN'
p3090
I381
sS'.thisIndex'
p3091
I2
sg15
(lp3092
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3093
S'space'
p3094
asg96
I2
sa(dp3095
g16
(lp3096
S'k'
asg18
S'Y'
sS'.thisRepN'
p3097
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3098
I8
sS'.thisN'
p3099
I382
sS'.thisIndex'
p3100
I9
sg15
(lp3101
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3102
S'space'
p3103
asg96
I9
sa(dp3104
g16
(lp3105
S'k'
asg18
S'Y'
sS'.thisRepN'
p3106
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3107
I9
sS'.thisN'
p3108
I383
sS'.thisIndex'
p3109
I5
sg15
(lp3110
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3111
S'space'
p3112
asg96
I5
sa(dp3113
g16
(lp3114
S'd'
asg18
S'Y'
sS'.thisRepN'
p3115
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3116
I10
sS'.thisN'
p3117
I384
sS'.thisIndex'
p3118
I10
sg15
(lp3119
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3120
S'space'
p3121
asg96
I10
sa(dp3122
g16
(lp3123
S'd'
asg18
S'Y'
sS'.thisRepN'
p3124
I35
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3125
I0
sS'.thisN'
p3126
I385
sS'.thisIndex'
p3127
I2
sg15
(lp3128
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3129
g16
(lp3130
S'd'
asg18
S'N'
sS'.thisRepN'
p3131
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3132
I1
sS'.thisN'
p3133
I386
sS'.thisIndex'
p3134
I0
sg15
(lp3135
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp3136
g16
(lp3137
S'd'
asg18
S'Y'
sS'.thisRepN'
p3138
I35
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3139
I2
sS'.thisN'
p3140
I387
sS'.thisIndex'
p3141
I1
sg15
(lp3142
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I1
sa(dp3143
g16
(lp3144
S'k'
asg18
S'N'
sS'.thisRepN'
p3145
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3146
I3
sS'.thisN'
p3147
I388
sS'.thisIndex'
p3148
I3
sg15
(lp3149
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I3
sa(dp3150
g16
(lp3151
S'd'
asg18
S'Y'
sS'.thisRepN'
p3152
I35
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3153
I4
sS'.thisN'
p3154
I389
sS'.thisIndex'
p3155
I2
sg15
(lp3156
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3157
g16
(lp3158
S'd'
asg18
S'Y'
sS'.thisRepN'
p3159
I35
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3160
I5
sS'.thisN'
p3161
I390
sS'.thisIndex'
p3162
I1
sg15
(lp3163
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I1
sa(dp3164
g16
(lp3165
S'k'
asg18
S'Y'
sS'.thisRepN'
p3166
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3167
I6
sS'.thisN'
p3168
I391
sS'.thisIndex'
p3169
I5
sg15
(lp3170
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3171
S'space'
p3172
asg96
I5
sa(dp3173
g16
(lp3174
S'd'
asg18
S'Y'
sS'.thisRepN'
p3175
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3176
I7
sS'.thisN'
p3177
I392
sS'.thisIndex'
p3178
I7
sg15
(lp3179
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3180
S'space'
p3181
asg96
I7
sa(dp3182
g16
(lp3183
S'k'
asg18
S'Y'
sS'.thisRepN'
p3184
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3185
I8
sS'.thisN'
p3186
I393
sS'.thisIndex'
p3187
I4
sg15
(lp3188
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3189
S'space'
p3190
asg96
I4
sa(dp3191
g16
(lp3192
S'd'
asg18
S'N'
sS'.thisRepN'
p3193
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3194
I9
sS'.thisN'
p3195
I394
sS'.thisIndex'
p3196
I2
sg15
(lp3197
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3198
g16
(lp3199
S'k'
asg18
S'N'
sS'.thisRepN'
p3200
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3201
I10
sS'.thisN'
p3202
I395
sS'.thisIndex'
p3203
I3
sg15
(lp3204
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3205
g16
(lp3206
S'k'
asg18
S'N'
sS'.thisRepN'
p3207
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3208
I0
sS'.thisN'
p3209
I396
sS'.thisIndex'
p3210
I4
sg15
(lp3211
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I4
sa(dp3212
g16
(lp3213
S'd'
asg18
S'N'
sS'.thisRepN'
p3214
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3215
I1
sS'.thisN'
p3216
I397
sS'.thisIndex'
p3217
I0
sg15
(lp3218
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp3219
g16
(lp3220
S'd'
asg18
S'N'
sS'.thisRepN'
p3221
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3222
I2
sS'.thisN'
p3223
I398
sS'.thisIndex'
p3224
I1
sg15
(lp3225
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp3226
g16
(lp3227
S'k'
asg18
S'N'
sg22
I42
sS'.thisN'
p3228
I399
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3229
I3
sS'.thisRepN'
p3230
I36
sg21
I40
sS'.thisIndex'
p3231
I3
sg23
I25
sg15
(lp3232
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3233
g16
(lp3234
S'd'
asg96
I10
sS'.thisRepN'
p3235
I36
sg30
g31
sg32
g33
sS'.thisTrialN'
p3236
I4
sS'.thisN'
p3237
I400
sS'.thisIndex'
p3238
I10
sg15
(lp3239
S'd'
asg17
S'Y'
sg14
I9
sa(dp3240
g16
(lp3241
S'k'
asg96
I5
sS'.thisRepN'
p3242
I36
sg30
g31
sg32
g33
sS'.thisTrialN'
p3243
I5
sS'.thisN'
p3244
I401
sS'.thisIndex'
p3245
I5
sg15
(lp3246
S'k'
asg17
S'Y'
sg14
I9
sa(dp3247
g16
(lp3248
S'd'
asg18
S'N'
sS'.thisRepN'
p3249
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3250
I6
sS'.thisN'
p3251
I402
sS'.thisIndex'
p3252
I1
sg15
(lp3253
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3254
g16
(lp3255
S'd'
asg18
S'N'
sS'.thisRepN'
p3256
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3257
I7
sS'.thisN'
p3258
I403
sS'.thisIndex'
p3259
I3
sg15
(lp3260
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3261
g16
(lp3262
S'k'
asg18
S'Y'
sS'.thisRepN'
p3263
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3264
I8
sS'.thisN'
p3265
I404
sS'.thisIndex'
p3266
I2
sg15
(lp3267
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3268
S'space'
p3269
asg96
I2
sa(dp3270
g16
(lp3271
S'd'
asg18
S'Y'
sS'.thisRepN'
p3272
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3273
I9
sS'.thisN'
p3274
I405
sS'.thisIndex'
p3275
I2
sg15
(lp3276
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3277
S'space'
p3278
asg96
I2
sa(dp3279
g16
(lp3280
S'd'
asg18
S'N'
sS'.thisRepN'
p3281
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3282
I10
sS'.thisN'
p3283
I406
sS'.thisIndex'
p3284
I6
sg15
(lp3285
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3286
g16
(lp3287
S'k'
asg18
S'N'
sS'.thisRepN'
p3288
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3289
I0
sS'.thisN'
p3290
I407
sS'.thisIndex'
p3291
I10
sg15
(lp3292
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3293
g16
(lp3294
S'd'
asg18
S'N'
sS'.thisRepN'
p3295
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3296
I1
sS'.thisN'
p3297
I408
sS'.thisIndex'
p3298
I6
sg15
(lp3299
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3300
g16
(lp3301
S'd'
asg18
S'N'
sS'.thisRepN'
p3302
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3303
I2
sS'.thisN'
p3304
I409
sS'.thisIndex'
p3305
I2
sg15
(lp3306
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3307
g16
(lp3308
S'k'
asg18
S'N'
sS'.thisRepN'
p3309
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3310
I3
sS'.thisN'
p3311
I410
sS'.thisIndex'
p3312
I3
sg15
(lp3313
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3314
g16
(lp3315
S'k'
asg18
S'N'
sS'.thisRepN'
p3316
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3317
I4
sS'.thisN'
p3318
I411
sS'.thisIndex'
p3319
I10
sg15
(lp3320
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3321
g16
(lp3322
S'd'
asg18
S'N'
sS'.thisRepN'
p3323
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3324
I5
sS'.thisN'
p3325
I412
sS'.thisIndex'
p3326
I3
sg15
(lp3327
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3328
g16
(lp3329
S'd'
asg18
S'N'
sS'.thisRepN'
p3330
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3331
I6
sS'.thisN'
p3332
I413
sS'.thisIndex'
p3333
I2
sg15
(lp3334
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3335
g16
(lp3336
S'k'
asg18
S'Y'
sS'.thisRepN'
p3337
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3338
I7
sS'.thisN'
p3339
I414
sS'.thisIndex'
p3340
I7
sg15
(lp3341
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3342
S'space'
p3343
asg96
I7
sa(dp3344
g16
(lp3345
S'd'
asg18
S'Y'
sS'.thisRepN'
p3346
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3347
I8
sS'.thisN'
p3348
I415
sS'.thisIndex'
p3349
I5
sg15
(lp3350
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3351
S'space'
p3352
asg96
I5
sa(dp3353
g16
(lp3354
S'd'
asg18
S'N'
sS'.thisRepN'
p3355
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3356
I9
sS'.thisN'
p3357
I416
sS'.thisIndex'
p3358
I5
sg15
(lp3359
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3360
g16
(lp3361
S'd'
asg18
S'Y'
sS'.thisRepN'
p3362
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3363
I10
sS'.thisN'
p3364
I417
sS'.thisIndex'
p3365
I9
sg15
(lp3366
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3367
S'space'
p3368
asg96
I9
sa(dp3369
g16
(lp3370
S'k'
asg18
S'Y'
sS'.thisRepN'
p3371
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3372
I0
sS'.thisN'
p3373
I418
sS'.thisIndex'
p3374
I7
sg15
(lp3375
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3376
S'space'
p3377
asg96
I7
sa(dp3378
g16
(lp3379
S'd'
asg18
S'N'
sS'.thisRepN'
p3380
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3381
I1
sS'.thisN'
p3382
I419
sS'.thisIndex'
p3383
I10
sg15
(lp3384
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I10
sa(dp3385
g16
(lp3386
S'd'
asg18
S'Y'
sS'.thisRepN'
p3387
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3388
I2
sS'.thisN'
p3389
I420
sS'.thisIndex'
p3390
I8
sg15
(lp3391
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3392
S'space'
p3393
asg96
I8
sa(dp3394
g16
(lp3395
S'k'
asg18
S'Y'
sS'.thisRepN'
p3396
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3397
I3
sS'.thisN'
p3398
I421
sS'.thisIndex'
p3399
I9
sg15
(lp3400
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3401
S'space'
p3402
asg96
I9
sa(dp3403
g16
(lp3404
S'd'
asg18
S'Y'
sS'.thisRepN'
p3405
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3406
I4
sS'.thisN'
p3407
I422
sS'.thisIndex'
p3408
I0
sg15
(lp3409
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3410
S'space'
p3411
asg96
I0
sa(dp3412
g16
(lp3413
S'd'
asg18
S'N'
sS'.thisRepN'
p3414
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3415
I5
sS'.thisN'
p3416
I423
sS'.thisIndex'
p3417
I1
sg15
(lp3418
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I1
sa(dp3419
g16
(lp3420
S'd'
asg18
S'Y'
sS'.thisRepN'
p3421
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3422
I6
sS'.thisN'
p3423
I424
sS'.thisIndex'
p3424
I1
sg15
(lp3425
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3426
S'space'
p3427
asg96
I1
sa(dp3428
g16
(lp3429
S'k'
asg18
S'N'
sS'.thisRepN'
p3430
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3431
I7
sS'.thisN'
p3432
I425
sS'.thisIndex'
p3433
I0
sg15
(lp3434
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I0
sa(dp3435
g16
(lp3436
S'k'
asg18
S'Y'
sS'.thisRepN'
p3437
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3438
I8
sS'.thisN'
p3439
I426
sS'.thisIndex'
p3440
I4
sg15
(lp3441
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3442
S'space'
p3443
asg96
I4
sa(dp3444
g16
(lp3445
S'd'
asg18
S'N'
sS'.thisRepN'
p3446
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3447
I9
sS'.thisN'
p3448
I427
sS'.thisIndex'
p3449
I10
sg15
(lp3450
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3451
g16
(lp3452
S'k'
asg18
S'Y'
sS'.thisRepN'
p3453
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3454
I10
sS'.thisN'
p3455
I428
sS'.thisIndex'
p3456
I0
sg15
(lp3457
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3458
S'space'
p3459
asg96
I0
sa(dp3460
g16
(lp3461
S'd'
asg18
S'Y'
sS'.thisRepN'
p3462
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3463
I0
sS'.thisN'
p3464
I429
sS'.thisIndex'
p3465
I1
sg15
(lp3466
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3467
S'space'
p3468
asg96
I1
sa(dp3469
g16
(lp3470
S'k'
asg18
S'Y'
sS'.thisRepN'
p3471
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3472
I1
sS'.thisN'
p3473
I430
sS'.thisIndex'
p3474
I9
sg15
(lp3475
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3476
S'space'
p3477
asg96
I9
sa(dp3478
g16
(lp3479
S'd'
asg18
S'Y'
sS'.thisRepN'
p3480
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3481
I2
sS'.thisN'
p3482
I431
sS'.thisIndex'
p3483
I4
sg15
(lp3484
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3485
S'space'
p3486
asg96
I4
sa(dp3487
g16
(lp3488
S'k'
asg18
S'N'
sS'.thisRepN'
p3489
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3490
I3
sS'.thisN'
p3491
I432
sS'.thisIndex'
p3492
I10
sg15
(lp3493
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3494
g16
(lp3495
S'k'
asg18
S'Y'
sS'.thisRepN'
p3496
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3497
I4
sS'.thisN'
p3498
I433
sS'.thisIndex'
p3499
I5
sg15
(lp3500
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3501
S'space'
p3502
asg96
I5
sa(dp3503
g16
(lp3504
S'd'
asg18
S'N'
sS'.thisRepN'
p3505
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3506
I5
sS'.thisN'
p3507
I434
sS'.thisIndex'
p3508
I7
sg15
(lp3509
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3510
g16
(lp3511
S'k'
asg18
S'Y'
sS'.thisRepN'
p3512
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3513
I6
sS'.thisN'
p3514
I435
sS'.thisIndex'
p3515
I7
sg15
(lp3516
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3517
S'space'
p3518
asg96
I7
sa(dp3519
g16
(lp3520
S'd'
asg18
S'N'
sS'.thisRepN'
p3521
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3522
I7
sS'.thisN'
p3523
I436
sS'.thisIndex'
p3524
I2
sg15
(lp3525
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3526
g16
(lp3527
S'k'
asg18
S'Y'
sS'.thisRepN'
p3528
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3529
I8
sS'.thisN'
p3530
I437
sS'.thisIndex'
p3531
I4
sg15
(lp3532
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3533
S'space'
p3534
asg96
I4
sa(dp3535
g16
(lp3536
S'd'
asg18
S'N'
sS'.thisRepN'
p3537
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3538
I9
sS'.thisN'
p3539
I438
sS'.thisIndex'
p3540
I0
sg15
(lp3541
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I0
sa(dp3542
g16
(lp3543
S'k'
asg18
S'Y'
sS'.thisRepN'
p3544
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3545
I10
sS'.thisN'
p3546
I439
sS'.thisIndex'
p3547
I6
sg15
(lp3548
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3549
S'space'
p3550
asg96
I6
sa(dp3551
g16
(lp3552
S'k'
asg18
S'Y'
sS'.thisRepN'
p3553
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3554
I0
sS'.thisN'
p3555
I440
sS'.thisIndex'
p3556
I4
sg15
(lp3557
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3558
S'space'
p3559
asg96
I4
sa(dp3560
g16
(lp3561
S'd'
asg18
S'N'
sS'.thisRepN'
p3562
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3563
I1
sS'.thisN'
p3564
I441
sS'.thisIndex'
p3565
I1
sg15
(lp3566
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3567
g16
(lp3568
S'd'
asg18
S'Y'
sS'.thisRepN'
p3569
I40
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3570
I2
sS'.thisN'
p3571
I442
sS'.thisIndex'
p3572
I5
sg15
(lp3573
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3574
g16
(lp3575
S'd'
asg18
S'Y'
sS'.thisRepN'
p3576
I40
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3577
I3
sS'.thisN'
p3578
I443
sS'.thisIndex'
p3579
I7
sg15
(lp3580
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I7
sa(dp3581
g16
(lp3582
S'k'
asg18
S'Y'
sS'.thisRepN'
p3583
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3584
I4
sS'.thisN'
p3585
I444
sS'.thisIndex'
p3586
I8
sg15
(lp3587
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3588
S'space'
p3589
asg96
I8
sa(dp3590
g16
(lp3591
S'd'
asg18
S'Y'
sS'.thisRepN'
p3592
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3593
I5
sS'.thisN'
p3594
I445
sS'.thisIndex'
p3595
I7
sg15
(lp3596
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3597
S'space'
p3598
asg96
I7
sa(dp3599
g16
(lp3600
S'd'
asg18
S'Y'
sS'.thisRepN'
p3601
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3602
I6
sS'.thisN'
p3603
I446
sS'.thisIndex'
p3604
I0
sg15
(lp3605
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3606
S'space'
p3607
asg96
I0
sa(dp3608
g16
(lp3609
S'd'
asg18
S'N'
sS'.thisRepN'
p3610
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3611
I7
sS'.thisN'
p3612
I447
sS'.thisIndex'
p3613
I1
sg15
(lp3614
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3615
g16
(lp3616
S'k'
asg18
S'N'
sS'.thisRepN'
p3617
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3618
I8
sS'.thisN'
p3619
I448
sS'.thisIndex'
p3620
I5
sg15
(lp3621
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I5
sa(dp3622
g16
(lp3623
S'k'
asg18
S'N'
sg22
I46
sS'.thisN'
p3624
I449
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3625
I9
sS'.thisRepN'
p3626
I40
sg21
I42
sS'.thisIndex'
p3627
I2
sg23
I25
sg15
(lp3628
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3629
g16
(lp3630
S'd'
asg96
I8
sS'.thisRepN'
p3631
I40
sg30
g31
sg32
g33
sS'.thisTrialN'
p3632
I10
sS'.thisN'
p3633
I450
sS'.thisIndex'
p3634
I8
sg15
(lp3635
S'd'
asg17
S'Y'
sg14
I10
sa(dp3636
g16
(lp3637
S'k'
asg96
I9
sS'.thisRepN'
p3638
I41
sg30
g31
sg32
g33
sS'.thisTrialN'
p3639
I0
sS'.thisN'
p3640
I451
sS'.thisIndex'
p3641
I9
sg15
(lp3642
S'k'
asg17
S'Y'
sg14
I10
sa(dp3643
g16
(lp3644
S'k'
asg18
S'N'
sS'.thisRepN'
p3645
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3646
I1
sS'.thisN'
p3647
I452
sS'.thisIndex'
p3648
I10
sg15
(lp3649
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I10
sa(dp3650
g16
(lp3651
S'd'
asg18
S'N'
sS'.thisRepN'
p3652
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3653
I2
sS'.thisN'
p3654
I453
sS'.thisIndex'
p3655
I4
sg15
(lp3656
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I4
sa(dp3657
g16
(lp3658
S'k'
asg18
S'Y'
sS'.thisRepN'
p3659
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3660
I3
sS'.thisN'
p3661
I454
sS'.thisIndex'
p3662
I2
sg15
(lp3663
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3664
S'space'
p3665
asg96
I2
sa(dp3666
g16
(lp3667
S'd'
asg18
S'N'
sS'.thisRepN'
p3668
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3669
I4
sS'.thisN'
p3670
I455
sS'.thisIndex'
p3671
I4
sg15
(lp3672
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3673
g16
(lp3674
S'd'
asg18
S'N'
sS'.thisRepN'
p3675
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3676
I5
sS'.thisN'
p3677
I456
sS'.thisIndex'
p3678
I8
sg15
(lp3679
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3680
g16
(lp3681
S'd'
asg18
S'Y'
sS'.thisRepN'
p3682
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3683
I6
sS'.thisN'
p3684
I457
sS'.thisIndex'
p3685
I8
sg15
(lp3686
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3687
S'space'
p3688
asg96
I8
sa(dp3689
g16
(lp3690
S'k'
asg18
S'Y'
sS'.thisRepN'
p3691
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3692
I7
sS'.thisN'
p3693
I458
sS'.thisIndex'
p3694
I4
sg15
(lp3695
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3696
S'space'
p3697
asg96
I4
sa(dp3698
g16
(lp3699
S'd'
asg18
S'Y'
sS'.thisRepN'
p3700
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3701
I8
sS'.thisN'
p3702
I459
sS'.thisIndex'
p3703
I5
sg15
(lp3704
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3705
S'space'
p3706
asg96
I5
sa(dp3707
g16
(lp3708
S'd'
asg18
S'Y'
sS'.thisRepN'
p3709
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3710
I9
sS'.thisN'
p3711
I460
sS'.thisIndex'
p3712
I6
sg15
(lp3713
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3714
S'space'
p3715
asg96
I6
sa(dp3716
g16
(lp3717
S'd'
asg18
S'Y'
sS'.thisRepN'
p3718
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3719
I10
sS'.thisN'
p3720
I461
sS'.thisIndex'
p3721
I3
sg15
(lp3722
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3723
S'space'
p3724
asg96
I3
sa(dp3725
g16
(lp3726
S'd'
asg18
S'Y'
sS'.thisRepN'
p3727
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3728
I0
sS'.thisN'
p3729
I462
sS'.thisIndex'
p3730
I4
sg15
(lp3731
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3732
S'space'
p3733
asg96
I4
sa(dp3734
g16
(lp3735
S'd'
asg18
S'N'
sS'.thisRepN'
p3736
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3737
I1
sS'.thisN'
p3738
I463
sS'.thisIndex'
p3739
I10
sg15
(lp3740
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I10
sa(dp3741
g16
(lp3742
S'd'
asg18
S'N'
sS'.thisRepN'
p3743
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3744
I2
sS'.thisN'
p3745
I464
sS'.thisIndex'
p3746
I4
sg15
(lp3747
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3748
g16
(lp3749
S'd'
asg18
S'Y'
sS'.thisRepN'
p3750
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3751
I3
sS'.thisN'
p3752
I465
sS'.thisIndex'
p3753
I8
sg15
(lp3754
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3755
S'space'
p3756
asg96
I8
sa(dp3757
g16
(lp3758
S'd'
asg18
S'N'
sS'.thisRepN'
p3759
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3760
I4
sS'.thisN'
p3761
I466
sS'.thisIndex'
p3762
I1
sg15
(lp3763
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3764
g16
(lp3765
S'k'
asg18
S'Y'
sS'.thisRepN'
p3766
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3767
I5
sS'.thisN'
p3768
I467
sS'.thisIndex'
p3769
I7
sg15
(lp3770
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3771
S'space'
p3772
asg96
I7
sa(dp3773
g16
(lp3774
S'k'
asg18
S'N'
sS'.thisRepN'
p3775
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3776
I6
sS'.thisN'
p3777
I468
sS'.thisIndex'
p3778
I0
sg15
(lp3779
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I0
sa(dp3780
g16
(lp3781
S'k'
asg18
S'N'
sS'.thisRepN'
p3782
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3783
I7
sS'.thisN'
p3784
I469
sS'.thisIndex'
p3785
I1
sg15
(lp3786
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3787
g16
(lp3788
S'd'
asg18
S'N'
sS'.thisRepN'
p3789
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3790
I8
sS'.thisN'
p3791
I470
sS'.thisIndex'
p3792
I0
sg15
(lp3793
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I0
sa(dp3794
g16
(lp3795
S'd'
asg18
S'N'
sS'.thisRepN'
p3796
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3797
I9
sS'.thisN'
p3798
I471
sS'.thisIndex'
p3799
I1
sg15
(lp3800
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I1
sa(dp3801
g16
(lp3802
S'd'
asg18
S'Y'
sS'.thisRepN'
p3803
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3804
I10
sS'.thisN'
p3805
I472
sS'.thisIndex'
p3806
I9
sg15
(lp3807
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3808
S'space'
p3809
asg96
I9
sa(dp3810
g16
(lp3811
S'k'
asg18
S'N'
sS'.thisRepN'
p3812
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3813
I0
sS'.thisN'
p3814
I473
sS'.thisIndex'
p3815
I10
sg15
(lp3816
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I10
sa(dp3817
g16
(lp3818
S'd'
asg18
S'N'
sS'.thisRepN'
p3819
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3820
I1
sS'.thisN'
p3821
I474
sS'.thisIndex'
p3822
I3
sg15
(lp3823
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3824
g16
(lp3825
S'k'
asg18
S'Y'
sS'.thisRepN'
p3826
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3827
I2
sS'.thisN'
p3828
I475
sS'.thisIndex'
p3829
I4
sg15
(lp3830
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3831
S'space'
p3832
asg96
I4
sa(dp3833
g16
(lp3834
S'd'
asg18
S'Y'
sS'.thisRepN'
p3835
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3836
I3
sS'.thisN'
p3837
I476
sS'.thisIndex'
p3838
I5
sg15
(lp3839
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3840
S'space'
p3841
asg96
I5
sa(dp3842
g16
(lp3843
S'k'
asg18
S'Y'
sS'.thisRepN'
p3844
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3845
I4
sS'.thisN'
p3846
I477
sS'.thisIndex'
p3847
I1
sg15
(lp3848
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3849
S'space'
p3850
asg96
I1
sa(dp3851
g16
(lp3852
S'd'
asg18
S'Y'
sS'.thisRepN'
p3853
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3854
I5
sS'.thisN'
p3855
I478
sS'.thisIndex'
p3856
I1
sg15
(lp3857
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3858
S'space'
p3859
asg96
I1
sa(dp3860
g16
(lp3861
S'd'
asg18
S'Y'
sS'.thisRepN'
p3862
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3863
I6
sS'.thisN'
p3864
I479
sS'.thisIndex'
p3865
I6
sg15
(lp3866
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3867
S'space'
p3868
asg96
I6
sa(dp3869
g16
(lp3870
S'k'
asg18
S'Y'
sS'.thisRepN'
p3871
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3872
I7
sS'.thisN'
p3873
I480
sS'.thisIndex'
p3874
I7
sg15
(lp3875
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3876
S'space'
p3877
asg96
I7
sa(dp3878
g16
(lp3879
S'd'
asg18
S'N'
sS'.thisRepN'
p3880
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3881
I8
sS'.thisN'
p3882
I481
sS'.thisIndex'
p3883
I7
sg15
(lp3884
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I7
sa(dp3885
g16
(lp3886
S'd'
asg18
S'N'
sS'.thisRepN'
p3887
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3888
I9
sS'.thisN'
p3889
I482
sS'.thisIndex'
p3890
I7
sg15
(lp3891
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I7
sa(dp3892
g16
(lp3893
S'k'
asg18
S'Y'
sS'.thisRepN'
p3894
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3895
I10
sS'.thisN'
p3896
I483
sS'.thisIndex'
p3897
I0
sg15
(lp3898
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3899
S'space'
p3900
asg96
I0
sa(dp3901
g16
(lp3902
S'd'
asg18
S'N'
sS'.thisRepN'
p3903
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3904
I0
sS'.thisN'
p3905
I484
sS'.thisIndex'
p3906
I2
sg15
(lp3907
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I2
sa(dp3908
g16
(lp3909
S'k'
asg18
S'N'
sS'.thisRepN'
p3910
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3911
I1
sS'.thisN'
p3912
I485
sS'.thisIndex'
p3913
I3
sg15
(lp3914
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I3
sa(dp3915
g16
(lp3916
S'k'
asg18
S'N'
sS'.thisRepN'
p3917
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3918
I2
sS'.thisN'
p3919
I486
sS'.thisIndex'
p3920
I1
sg15
(lp3921
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3922
g16
(lp3923
S'k'
asg18
S'Y'
sS'.thisRepN'
p3924
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3925
I3
sS'.thisN'
p3926
I487
sS'.thisIndex'
p3927
I3
sg15
(lp3928
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3929
S'space'
p3930
asg96
I3
sa(dp3931
g16
(lp3932
S'd'
asg18
S'Y'
sS'.thisRepN'
p3933
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3934
I4
sS'.thisN'
p3935
I488
sS'.thisIndex'
p3936
I8
sg15
(lp3937
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3938
S'space'
p3939
asg96
I8
sa(dp3940
g16
(lp3941
S'd'
asg18
S'N'
sS'.thisRepN'
p3942
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3943
I5
sS'.thisN'
p3944
I489
sS'.thisIndex'
p3945
I9
sg15
(lp3946
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I9
sa(dp3947
g16
(lp3948
S'k'
asg18
S'Y'
sS'.thisRepN'
p3949
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3950
I6
sS'.thisN'
p3951
I490
sS'.thisIndex'
p3952
I3
sg15
(lp3953
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3954
S'space'
p3955
asg96
I3
sa(dp3956
g16
(lp3957
S'k'
asg18
S'N'
sS'.thisRepN'
p3958
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3959
I7
sS'.thisN'
p3960
I491
sS'.thisIndex'
p3961
I10
sg15
(lp3962
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I10
sa(dp3963
g16
(lp3964
S'd'
asg18
S'N'
sS'.thisRepN'
p3965
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3966
I8
sS'.thisN'
p3967
I492
sS'.thisIndex'
p3968
I2
sg15
(lp3969
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3970
g16
(lp3971
S'k'
asg18
S'Y'
sS'.thisRepN'
p3972
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3973
I9
sS'.thisN'
p3974
I493
sS'.thisIndex'
p3975
I7
sg15
(lp3976
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3977
S'space'
p3978
asg96
I7
sa(dp3979
g16
(lp3980
S'd'
asg18
S'Y'
sS'.thisRepN'
p3981
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3982
I10
sS'.thisN'
p3983
I494
sS'.thisIndex'
p3984
I1
sg15
(lp3985
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3986
S'space'
p3987
asg96
I1
sa(dp3988
g16
(lp3989
S'd'
asg18
S'N'
sS'.thisRepN'
p3990
I45
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3991
I0
sS'.thisN'
p3992
I495
sS'.thisIndex'
p3993
I1
sg15
(lp3994
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3995
S'space'
p3996
asg96
I1
sa(dp3997
g16
(lp3998
S'd'
asg18
S'N'
sS'.thisRepN'
p3999
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4000
I1
sS'.thisN'
p4001
I496
sS'.thisIndex'
p4002
I3
sg15
(lp4003
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp4004
g16
(lp4005
S'k'
asg18
S'Y'
sS'.thisRepN'
p4006
I45
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4007
I2
sS'.thisN'
p4008
I497
sS'.thisIndex'
p4009
I8
sg15
(lp4010
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I8
sa(dp4011
g16
(lp4012
S'd'
asg18
S'N'
sS'.thisRepN'
p4013
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4014
I3
sS'.thisN'
p4015
I498
sS'.thisIndex'
p4016
I2
sg15
(lp4017
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp4018
g16
(lp4019
S'k'
asg18
S'N'
sg22
I46
sS'.thisN'
p4020
I499
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4021
I4
sS'.thisRepN'
p4022
I45
sg21
I36
sS'.thisIndex'
p4023
I5
sg23
I23
sg15
(lp4024
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp4025
g16
(lp4026
S'd'
asS'.thisIndex'
p4027
I6
sS'.thisRepN'
p4028
I45
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4029
I5
sS'.thisN'
p4030
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4031
S'd'
asg17
S'N'
sg14
I11
sg96
I6
sa(dp4032
g16
(lp4033
S'd'
asS'.thisIndex'
p4034
I8
sS'.thisRepN'
p4035
I45
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4036
I6
sS'.thisN'
p4037
I501
sg25
S'Y'
sg15
(lp4038
S'k'
asg17
S'Y'
sg14
I11
sg96
I8
sa(dp4039
g16
(lp4040
S'k'
asg18
S'N'
sS'.thisRepN'
p4041
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4042
I7
sS'.thisN'
p4043
I502
sg25
S'Y'
sg15
(lp4044
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4045
I8
sa(dp4046
g16
(lp4047
S'k'
asg18
S'N'
sS'.thisRepN'
p4048
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4049
I8
sS'.thisN'
p4050
I503
sg25
S'Y'
sg15
(lp4051
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4052
I10
sa(dp4053
g16
(lp4054
S'd'
asg18
S'N'
sS'.thisRepN'
p4055
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4056
I9
sS'.thisN'
p4057
I504
sg25
S'Y'
sg15
(lp4058
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4059
I2
sa(dp4060
g16
(lp4061
S'k'
asg18
S'Y'
sS'.thisRepN'
p4062
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4063
I10
sS'.thisN'
p4064
I505
sg25
S'Y'
sg15
(lp4065
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4066
S'space'
p4067
asg96
I9
sS'.thisIndex'
p4068
I9
sa(dp4069
g16
(lp4070
S'd'
asg18
S'N'
sS'.thisRepN'
p4071
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4072
I0
sS'.thisN'
p4073
I506
sg25
S'Y'
sg15
(lp4074
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4075
I8
sa(dp4076
g16
(lp4077
S'd'
asg18
S'N'
sS'.thisRepN'
p4078
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4079
I1
sS'.thisN'
p4080
I507
sg25
S'Y'
sg15
(lp4081
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4082
I0
sa(dp4083
g16
(lp4084
S'k'
asg18
S'N'
sS'.thisRepN'
p4085
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4086
I2
sS'.thisN'
p4087
I508
sg25
S'Y'
sg15
(lp4088
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4089
I8
sa(dp4090
g16
(lp4091
S'd'
asg18
S'Y'
sS'.thisRepN'
p4092
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4093
I3
sS'.thisN'
p4094
I509
sg25
S'Y'
sg15
(lp4095
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4096
S'space'
p4097
asg96
I0
sS'.thisIndex'
p4098
I0
sa(dp4099
g16
(lp4100
S'k'
asg18
S'Y'
sS'.thisRepN'
p4101
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4102
I4
sS'.thisN'
p4103
I510
sg25
S'Y'
sg15
(lp4104
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4105
S'space'
p4106
asg96
I9
sS'.thisIndex'
p4107
I9
sa(dp4108
g16
(lp4109
S'd'
asg18
S'Y'
sS'.thisRepN'
p4110
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4111
I5
sS'.thisN'
p4112
I511
sg25
S'Y'
sg15
(lp4113
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4114
S'space'
p4115
asg96
I2
sS'.thisIndex'
p4116
I2
sa(dp4117
g16
(lp4118
S'd'
asg18
S'Y'
sS'.thisRepN'
p4119
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4120
I6
sS'.thisN'
p4121
I512
sg25
S'Y'
sg15
(lp4122
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4123
S'space'
p4124
asg96
I10
sS'.thisIndex'
p4125
I10
sa(dp4126
g16
(lp4127
S'd'
asg18
S'Y'
sS'.thisRepN'
p4128
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4129
I7
sS'.thisN'
p4130
I513
sg25
S'Y'
sg15
(lp4131
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4132
S'space'
p4133
asg96
I6
sS'.thisIndex'
p4134
I6
sa(dp4135
g16
(lp4136
S'k'
asg18
S'N'
sS'.thisRepN'
p4137
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4138
I8
sS'.thisN'
p4139
I514
sg25
S'Y'
sg15
(lp4140
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I5
sS'.thisIndex'
p4141
I5
sa(dp4142
g16
(lp4143
S'k'
asg18
S'N'
sS'.thisRepN'
p4144
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4145
I9
sS'.thisN'
p4146
I515
sg25
S'Y'
sg15
(lp4147
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4148
I2
sa(dp4149
g16
(lp4150
S'k'
asg18
S'Y'
sS'.thisRepN'
p4151
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4152
I10
sS'.thisN'
p4153
I516
sg25
S'Y'
sg15
(lp4154
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4155
S'space'
p4156
asg96
I0
sS'.thisIndex'
p4157
I0
sa(dp4158
g16
(lp4159
S'd'
asg18
S'Y'
sS'.thisRepN'
p4160
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4161
I0
sS'.thisN'
p4162
I517
sg25
S'Y'
sg15
(lp4163
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4164
S'space'
p4165
asg96
I9
sS'.thisIndex'
p4166
I9
sa(dp4167
g16
(lp4168
S'k'
asg18
S'Y'
sS'.thisRepN'
p4169
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4170
I1
sS'.thisN'
p4171
I518
sg25
S'Y'
sg15
(lp4172
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4173
S'space'
p4174
asg96
I6
sS'.thisIndex'
p4175
I6
sa(dp4176
g16
(lp4177
S'k'
asg18
S'N'
sS'.thisRepN'
p4178
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4179
I2
sS'.thisN'
p4180
I519
sg25
S'Y'
sg15
(lp4181
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4182
I2
sa(dp4183
g16
(lp4184
S'd'
asg18
S'N'
sS'.thisRepN'
p4185
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4186
I3
sS'.thisN'
p4187
I520
sg25
S'Y'
sg15
(lp4188
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I5
sS'.thisIndex'
p4189
I5
sa(dp4190
g16
(lp4191
S'k'
asg18
S'N'
sS'.thisRepN'
p4192
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4193
I4
sS'.thisN'
p4194
I521
sg25
S'Y'
sg15
(lp4195
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4196
I1
sa(dp4197
g16
(lp4198
S'd'
asg18
S'N'
sS'.thisRepN'
p4199
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4200
I5
sS'.thisN'
p4201
I522
sg25
S'Y'
sg15
(lp4202
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4203
I2
sa(dp4204
g16
(lp4205
S'k'
asg18
S'N'
sS'.thisRepN'
p4206
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4207
I6
sS'.thisN'
p4208
I523
sg25
S'Y'
sg15
(lp4209
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I9
sS'.thisIndex'
p4210
I9
sa(dp4211
g16
(lp4212
S'k'
asg18
S'Y'
sS'.thisRepN'
p4213
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4214
I7
sS'.thisN'
p4215
I524
sg25
S'Y'
sg15
(lp4216
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4217
S'space'
p4218
asg96
I7
sS'.thisIndex'
p4219
I7
sa(dp4220
g16
(lp4221
S'k'
asg18
S'Y'
sS'.thisRepN'
p4222
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4223
I8
sS'.thisN'
p4224
I525
sg25
S'Y'
sg15
(lp4225
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4226
S'space'
p4227
asg96
I6
sS'.thisIndex'
p4228
I6
sa(dp4229
g16
(lp4230
S'd'
asg18
S'N'
sS'.thisRepN'
p4231
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4232
I9
sS'.thisN'
p4233
I526
sg25
S'Y'
sg15
(lp4234
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4235
I0
sa(dp4236
g16
(lp4237
S'd'
asg18
S'N'
sS'.thisRepN'
p4238
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4239
I10
sS'.thisN'
p4240
I527
sg25
S'Y'
sg15
(lp4241
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4242
I0
sa(dp4243
g16
(lp4244
S'k'
asg18
S'Y'
sS'.thisRepN'
p4245
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4246
I0
sS'.thisN'
p4247
I528
sg25
S'Y'
sg15
(lp4248
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4249
S'space'
p4250
asg96
I1
sS'.thisIndex'
p4251
I1
sa(dp4252
g16
(lp4253
S'k'
asg18
S'Y'
sS'.thisRepN'
p4254
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4255
I1
sS'.thisN'
p4256
I529
sg25
S'Y'
sg15
(lp4257
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4258
S'space'
p4259
asg96
I4
sS'.thisIndex'
p4260
I4
sa(dp4261
g16
(lp4262
S'k'
asg18
S'N'
sS'.thisRepN'
p4263
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4264
I2
sS'.thisN'
p4265
I530
sg25
S'Y'
sg15
(lp4266
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4267
I2
sa(dp4268
g16
(lp4269
S'k'
asg18
S'Y'
sS'.thisRepN'
p4270
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4271
I3
sS'.thisN'
p4272
I531
sg25
S'Y'
sg15
(lp4273
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4274
S'space'
p4275
asg96
I4
sS'.thisIndex'
p4276
I4
sa(dp4277
g16
(lp4278
S'k'
asg18
S'N'
sS'.thisRepN'
p4279
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4280
I4
sS'.thisN'
p4281
I532
sg25
S'Y'
sg15
(lp4282
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4283
I6
sa(dp4284
g16
(lp4285
S'k'
asg18
S'Y'
sS'.thisRepN'
p4286
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4287
I5
sS'.thisN'
p4288
I533
sg25
S'Y'
sg15
(lp4289
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4290
S'space'
p4291
asg96
I7
sS'.thisIndex'
p4292
I7
sa(dp4293
g16
(lp4294
S'd'
asg18
S'Y'
sS'.thisRepN'
p4295
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4296
I6
sS'.thisN'
p4297
I534
sg25
S'Y'
sg15
(lp4298
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4299
S'space'
p4300
asg96
I1
sS'.thisIndex'
p4301
I1
sa(dp4302
g16
(lp4303
S'k'
asg18
S'N'
sS'.thisRepN'
p4304
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4305
I7
sS'.thisN'
p4306
I535
sg25
S'Y'
sg15
(lp4307
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4308
I6
sa(dp4309
g16
(lp4310
S'd'
asg18
S'N'
sS'.thisRepN'
p4311
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4312
I8
sS'.thisN'
p4313
I536
sg25
S'Y'
sg15
(lp4314
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I5
sS'.thisIndex'
p4315
I5
sa(dp4316
g16
(lp4317
S'k'
asg18
S'Y'
sS'.thisRepN'
p4318
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4319
I9
sS'.thisN'
p4320
I537
sg25
S'Y'
sg15
(lp4321
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4322
S'space'
p4323
asg96
I4
sS'.thisIndex'
p4324
I4
sa(dp4325
g16
(lp4326
S'k'
asg18
S'N'
sS'.thisRepN'
p4327
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4328
I10
sS'.thisN'
p4329
I538
sg25
S'Y'
sg15
(lp4330
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4331
I0
sa(dp4332
g16
(lp4333
S'k'
asg18
S'N'
sS'.thisRepN'
p4334
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4335
I0
sS'.thisN'
p4336
I539
sg25
S'Y'
sg15
(lp4337
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4338
I7
sa(dp4339
g16
(lp4340
S'd'
asg18
S'N'
sS'.thisRepN'
p4341
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4342
I1
sS'.thisN'
p4343
I540
sg25
S'Y'
sg15
(lp4344
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4345
I4
sa(dp4346
g16
(lp4347
S'd'
asg18
S'N'
sS'.thisRepN'
p4348
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4349
I2
sS'.thisN'
p4350
I541
sg25
S'Y'
sg15
(lp4351
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4352
I2
sa(dp4353
g16
(lp4354
S'd'
asg18
S'N'
sS'.thisRepN'
p4355
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4356
I3
sS'.thisN'
p4357
I542
sg25
S'Y'
sg15
(lp4358
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p4359
I3
sa(dp4360
g16
(lp4361
S'd'
asg18
S'Y'
sS'.thisRepN'
p4362
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4363
I4
sS'.thisN'
p4364
I543
sg25
S'Y'
sg15
(lp4365
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4366
S'space'
p4367
asg96
I6
sS'.thisIndex'
p4368
I6
sa(dp4369
g16
(lp4370
S'k'
asg18
S'N'
sS'.thisRepN'
p4371
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4372
I5
sS'.thisN'
p4373
I544
sg25
S'Y'
sg15
(lp4374
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4375
I6
sa(dp4376
g16
(lp4377
S'd'
asg18
S'N'
sS'.thisRepN'
p4378
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4379
I6
sS'.thisN'
p4380
I545
sg25
S'Y'
sg15
(lp4381
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4382
I7
sa(dp4383
g16
(lp4384
S'd'
asg18
S'N'
sS'.thisRepN'
p4385
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4386
I7
sS'.thisN'
p4387
I546
sg25
S'Y'
sg15
(lp4388
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4389
I0
sa(dp4390
g16
(lp4391
S'k'
asg18
S'N'
sS'.thisRepN'
p4392
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4393
I8
sS'.thisN'
p4394
I547
sg25
S'Y'
sg15
(lp4395
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4396
I6
sa(dp4397
g16
(lp4398
S'k'
asg18
S'Y'
sS'.thisRepN'
p4399
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4400
I9
sS'.thisN'
p4401
I548
sg25
S'Y'
sg15
(lp4402
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4403
S'space'
p4404
asg96
I3
sS'.thisIndex'
p4405
I3
sa(dp4406
g16
(lp4407
S'd'
asg18
S'Y'
sg22
I48
sg26
S'Y'
sS'.thisN'
p4408
I549
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4409
I10
sS'.thisRepN'
p4410
I49
sg21
I45
sg25
S'Y'
sg23
I20
sg15
(lp4411
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4412
S'space'
p4413
asg96
I3
sS'.thisIndex'
p4414
I3
sa(dp4415
g16
(lp4416
S'k'
asS'.thisIndex'
p4417
I4
sS'.thisRepN'
p4418
I50
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4419
I0
sS'.thisN'
p4420
I550
sg25
S'Y'
sg15
(lp4421
S'd'
asg17
S'Y'
sg14
I12
sg96
I4
sa(dp4422
g16
(lp4423
S'd'
asS'.thisIndex'
p4424
I5
sS'.thisRepN'
p4425
I50
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4426
I1
sS'.thisN'
p4427
I551
sg25
S'Y'
sg15
(lp4428
S'k'
asg17
S'Y'
sg14
I12
sg96
I5
sa(dp4429
g16
(lp4430
S'd'
asg18
S'N'
sS'.thisRepN'
p4431
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4432
I2
sS'.thisN'
p4433
I552
sg25
S'Y'
sg15
(lp4434
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4435
I0
sa(dp4436
g16
(lp4437
S'k'
asg18
S'Y'
sS'.thisRepN'
p4438
I50
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4439
I3
sS'.thisN'
p4440
I553
sg25
S'Y'
sg15
(lp4441
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4442
I0
sa(dp4443
g16
(lp4444
S'd'
asg18
S'N'
sS'.thisRepN'
p4445
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4446
I4
sS'.thisN'
p4447
I554
sg25
S'Y'
sg15
(lp4448
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4449
I0
sa(dp4450
g16
(lp4451
S'k'
asg18
S'N'
sS'.thisRepN'
p4452
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4453
I5
sS'.thisN'
p4454
I555
sg25
S'Y'
sg15
(lp4455
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I5
sS'.thisIndex'
p4456
I5
sa(dp4457
g16
(lp4458
S'k'
asg18
S'N'
sS'.thisRepN'
p4459
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4460
I6
sS'.thisN'
p4461
I556
sg25
S'Y'
sg15
(lp4462
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I6
sS'.thisIndex'
p4463
I6
sa(dp4464
g16
(lp4465
S'k'
asg18
S'N'
sS'.thisRepN'
p4466
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4467
I7
sS'.thisN'
p4468
I557
sg25
S'Y'
sg15
(lp4469
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I5
sS'.thisIndex'
p4470
I5
sa(dp4471
g16
(lp4472
S'k'
asg18
S'Y'
sS'.thisRepN'
p4473
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4474
I8
sS'.thisN'
p4475
I558
sg25
S'Y'
sg15
(lp4476
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4477
S'space'
p4478
asg96
I5
sS'.thisIndex'
p4479
I5
sa(dp4480
g16
(lp4481
S'k'
asg18
S'Y'
sS'.thisRepN'
p4482
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4483
I9
sS'.thisN'
p4484
I559
sg25
S'Y'
sg15
(lp4485
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4486
S'space'
p4487
asg96
I8
sS'.thisIndex'
p4488
I8
sa(dp4489
g16
(lp4490
S'd'
asg18
S'Y'
sS'.thisRepN'
p4491
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4492
I10
sS'.thisN'
p4493
I560
sg25
S'Y'
sg15
(lp4494
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4495
S'space'
p4496
asg96
I8
sS'.thisIndex'
p4497
I8
sa(dp4498
g16
(lp4499
S'd'
asg18
S'N'
sS'.thisRepN'
p4500
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4501
I0
sS'.thisN'
p4502
I561
sg25
S'Y'
sg15
(lp4503
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4504
I0
sa(dp4505
g16
(lp4506
S'd'
asg18
S'N'
sS'.thisRepN'
p4507
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4508
I1
sS'.thisN'
p4509
I562
sg25
S'Y'
sg15
(lp4510
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4511
I7
sa(dp4512
g16
(lp4513
S'd'
asg18
S'N'
sS'.thisRepN'
p4514
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4515
I2
sS'.thisN'
p4516
I563
sg25
S'Y'
sg15
(lp4517
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4518
I4
sa(dp4519
g16
(lp4520
S'd'
asg18
S'N'
sS'.thisRepN'
p4521
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4522
I3
sS'.thisN'
p4523
I564
sg25
S'Y'
sg15
(lp4524
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4525
I2
sa(dp4526
g16
(lp4527
S'd'
asg18
S'Y'
sS'.thisRepN'
p4528
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4529
I4
sS'.thisN'
p4530
I565
sg25
S'Y'
sg15
(lp4531
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4532
S'space'
p4533
asg96
I1
sS'.thisIndex'
p4534
I1
sa(dp4535
g16
(lp4536
S'd'
asg18
S'N'
sS'.thisRepN'
p4537
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4538
I5
sS'.thisN'
p4539
I566
sg25
S'Y'
sg15
(lp4540
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4541
I4
sa(dp4542
g16
(lp4543
S'k'
asg18
S'N'
sS'.thisRepN'
p4544
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4545
I6
sS'.thisN'
p4546
I567
sg25
S'Y'
sg15
(lp4547
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4548
I4
sa(dp4549
g16
(lp4550
S'd'
asg18
S'N'
sS'.thisRepN'
p4551
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4552
I7
sS'.thisN'
p4553
I568
sg25
S'Y'
sg15
(lp4554
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4555
I10
sa(dp4556
g16
(lp4557
S'd'
asg18
S'Y'
sS'.thisRepN'
p4558
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4559
I8
sS'.thisN'
p4560
I569
sg25
S'Y'
sg15
(lp4561
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4562
S'space'
p4563
asg96
I6
sS'.thisIndex'
p4564
I6
sa(dp4565
g16
(lp4566
S'd'
asg18
S'N'
sS'.thisRepN'
p4567
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4568
I9
sS'.thisN'
p4569
I570
sg25
S'Y'
sg15
(lp4570
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4571
I0
sa(dp4572
g16
(lp4573
S'd'
asg18
S'Y'
sS'.thisRepN'
p4574
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4575
I10
sS'.thisN'
p4576
I571
sg25
S'Y'
sg15
(lp4577
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4578
S'space'
p4579
asg96
I0
sS'.thisIndex'
p4580
I0
sa(dp4581
g16
(lp4582
S'd'
asg18
S'N'
sS'.thisRepN'
p4583
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4584
I0
sS'.thisN'
p4585
I572
sg25
S'Y'
sg15
(lp4586
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4587
I10
sa(dp4588
g16
(lp4589
S'k'
asg18
S'Y'
sS'.thisRepN'
p4590
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4591
I1
sS'.thisN'
p4592
I573
sg25
S'Y'
sg15
(lp4593
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4594
S'space'
p4595
asg96
I10
sS'.thisIndex'
p4596
I10
sa(dp4597
g16
(lp4598
S'k'
asg18
S'Y'
sS'.thisRepN'
p4599
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4600
I2
sS'.thisN'
p4601
I574
sg25
S'Y'
sg15
(lp4602
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4603
S'space'
p4604
asg96
I0
sS'.thisIndex'
p4605
I0
sa(dp4606
g16
(lp4607
S'k'
asg18
S'N'
sS'.thisRepN'
p4608
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4609
I3
sS'.thisN'
p4610
I575
sg25
S'Y'
sg15
(lp4611
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4612
I9
sa(dp4613
g16
(lp4614
S'd'
asg18
S'N'
sS'.thisRepN'
p4615
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4616
I4
sS'.thisN'
p4617
I576
sg25
S'Y'
sg15
(lp4618
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4619
I9
sa(dp4620
g16
(lp4621
S'k'
asg18
S'N'
sS'.thisRepN'
p4622
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4623
I5
sS'.thisN'
p4624
I577
sg25
S'Y'
sg15
(lp4625
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I5
sS'.thisIndex'
p4626
I5
sa(dp4627
g16
(lp4628
S'd'
asg18
S'Y'
sS'.thisRepN'
p4629
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4630
I6
sS'.thisN'
p4631
I578
sg25
S'Y'
sg15
(lp4632
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4633
S'space'
p4634
asg96
I6
sS'.thisIndex'
p4635
I6
sa(dp4636
g16
(lp4637
S'd'
asg18
S'Y'
sS'.thisRepN'
p4638
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4639
I7
sS'.thisN'
p4640
I579
sg25
S'Y'
sg15
(lp4641
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4642
S'space'
p4643
asg96
I9
sS'.thisIndex'
p4644
I9
sa(dp4645
g16
(lp4646
S'k'
asg18
S'Y'
sS'.thisRepN'
p4647
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4648
I8
sS'.thisN'
p4649
I580
sg25
S'Y'
sg15
(lp4650
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4651
S'space'
p4652
asg96
I10
sS'.thisIndex'
p4653
I10
sa(dp4654
g16
(lp4655
S'd'
asg18
S'N'
sS'.thisRepN'
p4656
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4657
I9
sS'.thisN'
p4658
I581
sg25
S'Y'
sg15
(lp4659
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4660
I7
sa(dp4661
g16
(lp4662
S'd'
asg18
S'Y'
sS'.thisRepN'
p4663
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4664
I10
sS'.thisN'
p4665
I582
sg25
S'Y'
sg15
(lp4666
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4667
S'space'
p4668
asg96
I7
sS'.thisIndex'
p4669
I7
sa(dp4670
g16
(lp4671
S'k'
asg18
S'Y'
sS'.thisRepN'
p4672
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4673
I0
sS'.thisN'
p4674
I583
sg25
S'Y'
sg15
(lp4675
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4676
S'space'
p4677
asg96
I6
sS'.thisIndex'
p4678
I6
sa(dp4679
g16
(lp4680
S'd'
asg18
S'Y'
sS'.thisRepN'
p4681
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4682
I1
sS'.thisN'
p4683
I584
sg25
S'Y'
sg15
(lp4684
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4685
S'space'
p4686
asg96
I8
sS'.thisIndex'
p4687
I8
sa(dp4688
g16
(lp4689
S'd'
asg18
S'N'
sS'.thisRepN'
p4690
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4691
I2
sS'.thisN'
p4692
I585
sg25
S'Y'
sg15
(lp4693
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4694
I4
sa(dp4695
g16
(lp4696
S'd'
asg18
S'Y'
sS'.thisRepN'
p4697
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4698
I3
sS'.thisN'
p4699
I586
sg25
S'Y'
sg15
(lp4700
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4701
S'space'
p4702
asg96
I5
sS'.thisIndex'
p4703
I5
sa(dp4704
g16
(lp4705
S'd'
asg18
S'N'
sS'.thisRepN'
p4706
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4707
I4
sS'.thisN'
p4708
I587
sg25
S'Y'
sg15
(lp4709
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4710
I9
sa(dp4711
g16
(lp4712
S'd'
asg18
S'N'
sS'.thisRepN'
p4713
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4714
I5
sS'.thisN'
p4715
I588
sg25
S'Y'
sg15
(lp4716
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4717
I10
sa(dp4718
g16
(lp4719
S'k'
asg18
S'Y'
sS'.thisRepN'
p4720
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4721
I6
sS'.thisN'
p4722
I589
sg25
S'Y'
sg15
(lp4723
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4724
S'space'
p4725
asg96
I5
sS'.thisIndex'
p4726
I5
sa(dp4727
g16
(lp4728
S'd'
asg18
S'Y'
sS'.thisRepN'
p4729
I53
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4730
I7
sS'.thisN'
p4731
I590
sg25
S'Y'
sg15
(lp4732
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4733
I10
sa(dp4734
g16
(lp4735
S'k'
asg18
S'Y'
sS'.thisRepN'
p4736
I53
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4737
I8
sS'.thisN'
p4738
I591
sg25
S'Y'
sg15
(lp4739
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4740
I9
sa(dp4741
g16
(lp4742
S'd'
asg18
S'Y'
sS'.thisRepN'
p4743
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4744
I9
sS'.thisN'
p4745
I592
sg25
S'Y'
sg15
(lp4746
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4747
S'space'
p4748
asg96
I4
sS'.thisIndex'
p4749
I4
sa(dp4750
g16
(lp4751
S'd'
asg18
S'N'
sS'.thisRepN'
p4752
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4753
I10
sS'.thisN'
p4754
I593
sg25
S'Y'
sg15
(lp4755
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4756
I0
sa(dp4757
g16
(lp4758
S'k'
asg18
S'N'
sS'.thisRepN'
p4759
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4760
I0
sS'.thisN'
p4761
I594
sg25
S'Y'
sg15
(lp4762
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4763
I3
sa(dp4764
g16
(lp4765
S'd'
asg18
S'Y'
sS'.thisRepN'
p4766
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4767
I1
sS'.thisN'
p4768
I595
sg25
S'Y'
sg15
(lp4769
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4770
S'space'
p4771
asg96
I3
sS'.thisIndex'
p4772
I3
sa(dp4773
g16
(lp4774
S'd'
asg18
S'N'
sS'.thisRepN'
p4775
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4776
I2
sS'.thisN'
p4777
I596
sg25
S'Y'
sg15
(lp4778
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4779
I7
sa(dp4780
g16
(lp4781
S'd'
asg18
S'N'
sS'.thisRepN'
p4782
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4783
I3
sS'.thisN'
p4784
I597
sg25
S'Y'
sg15
(lp4785
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I8
sS'.thisIndex'
p4786
I8
sa(dp4787
g16
(lp4788
S'k'
asg18
S'N'
sS'.thisRepN'
p4789
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4790
I4
sS'.thisN'
p4791
I598
sg25
S'Y'
sg15
(lp4792
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4793
I7
sa(dp4794
g16
(lp4795
S'k'
asg18
S'N'
sg22
I45
sg26
S'Y'
sS'.thisN'
p4796
I599
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4797
I5
sS'.thisRepN'
p4798
I54
sg21
I43
sg25
S'Y'
sg23
I21
sg15
(lp4799
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4800
I2
sasS'loops'
p4801
(lp4802
g1
(g36
g3
NtRp4803
(dp4804
g39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4805
sg41
(lp4806
sg42
I75938128
sg10
S''
sg6
g43
sg44
I1
sg27
I01
sg28
Nsg45
g1
(g46
g47
(dp4807
g49
g50
(g51
g52
g53
S'b'
tRp4808
(I1
(I600
I1
tg56
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg57
g50
(g51
g52
g53
S'b'
tRp4809
(I1
(I600
I1
tg56
I00
S'\x00\x00\x07D\x00\x00\x82B\x00\x80\xadC\x00\x00\xc9C\x00\x00FC\x00\x80\x8cC\x00\x00\x13C\x00\x00\xecC\x00\x00\x92B\x00\x00\x1dC\x00@\x08D\x00\x80\xc0C\x00\x80\xabC\x00\x00\x07C\x00\x00\x00D\x00\x80\x87C\x00\x80\xb1C\x00\x80\xc6C\x00\x00\x0eC\x00\x00\x10A\x00\x001C\x00\x80\x9fC\x00\x00pA\x00@\x07D\x00\x00NC\x00\x00\xc0B\x00\x00\x80A\x00\x00\xf1C\x00\x80\xefC\x00\x00\x0cC\x00\x00PC\x00\x80\x10D\x00@\x14D\x00\x00\xdbC\x00@\x0cD\x00\x005C\x00\x00\xf2C\x00\x80\x84C\x00\x80\x92C\x00\x00\xe0A\x00\x00\xe6C\x00\x80\xf4C\x00\x00ZC\x00\x00\x00\x00\x00\x00\x8dC\x00\x80\xb0C\x00\x00`B\x00\x00\x95C\x00\x80\xfaC\x00\x00VC\x00\x80\xe3C\x00\x80\x0cD\x00\x00tB\x00\x00\x80?\x00\x000A\x00\x00\xb8B\x00\x00\x8cC\x00\x00=C\x00\x00@A\x00\x00\x81C\x00\x00\x18C\x00\x00\x90B\x00\x00\xa0C\x00\x00IC\x00\x00\x88A\x00\x00\x9cB\x00\x80\x9aC\x00\x00\xdaC\x00\x00DC\x00\x00\xddC\x00\x00\x94C\x00\x00\xc4B\x00\x80\x99C\x00\x00\xd4C\x00\x00\x02D\x00\x80\x0eD\x00\x00\xf6C\x00\x00\x9eB\x00\x80\xb8C\x00\x006C\x00\x00\xc4C\x00\x00\xbbC\x00\x00\xe0@\x00\x00xB\x00\x00\xb6B\x00\xc0\x0eD\x00\x80\xfdC\x00\x80\x9dC\x00\x80\x8bC\x00\x00\xa0@\x00\x00\xd2C\x00@\x01D\x00\x80\xc9C\x00\x00gC\x00\x80\nD\x00\x00\x14D\x00\x00JC\x00\xc0\x14D\x00\x00\xe8C\x00\x80\xd6C\x00\xc0\tD\x00\x003C\x00\x80\x02D\x00\x80\xb2C\x00\x00\xe7C\x00\x00LB\x00\x00\xebC\x00\x80\xa9C\x00\x00\x85C\x00@\x0eD\x00\x00\xe2B\x00\x80\xa3C\x00\x00\x9bC\x00\x00\nD\x00\x00dC\x00\x00\xe9C\x00\x00\x8cB\x00\x80\xbeC\x00\x80\xebC\x00\x00\xefC\x00\x00\xbaC\x00\x00\x11C\x00\x80\xccC\x00\x00\x89C\x00\x80\xe2C\x00\x80\rD\x00\x00\x88C\x00\x00\x00A\x00\xc0\x0cD\x00\x00\x08C\x00@\x00D\x00\x00SC\x00\x00\xf8C\x00\x00\xaaB\x00\x80\xc1C\x00\x80\xd0C\x00\x00\xa3C\x00\x00\x14C\x00\x00\xfaC\x00\x00\x15D\x00\x002C\x00\x00OC\x00\x00#C\x00\x80\xcfC\x00\x00\x0cD\x00\x00\xa2B\x00\x00zC\x00\x00\xb4B\x00\x00\xb1C\x00\x00\xaaC\x00\x80\xceC\x00\x00\xfdC\x00\x00\x8aC\x00\x80\xcaC\x00\x80\xdfC\x00\x00\x88B\x00\x00CC\x00\x80\x9cC\x00\x00\x06D\x00\x00\x00B\x00\x80\xfeC\x00\x00\xdfC\x00\x00.C\x00\x00\x06C\x00\x80\xa7C\x00\x00\x17C\x00@\rD\x00\x00\xa6B\x00\x00\xf0B\x00\x80\xc2C\x00\x00\x96B\x00\x00\xa0B\x00\x80\x8dC\x00\x00\xedC\x00@\x12D\x00\x00\x01C\x00\x00bC\x00\x00`A\x00\x80\x95C\x00\x00HB\x00\x00\xa6C\x00@\tD\x00\x00\xc8C\x00\x80\xbaC\x00\x00\xa8B\x00\x00\x0eD\x00\x80\xe6C\x00\x00\x12D\x00\x00\xbdC\x00\x80\xbbC\x00\x00\x02C\x00\x80\xddC\x00\x00\xcbC\x00\x00\xb8C\x00\xc0\x07D\x00\x80\xb9C\x00\x00\xf4C\x00\x80\xb5C\x00\x00\x83C\x00\x00kC\x00\x80\xe8C\x00\x00\xc5C\x00\x00\xf8A\x00\x00\x1fC\x00\x00 B\x00\x80\x07D\x00\x00wC\x00\x80\xe4C\x00\x80\xa6C\x00\x00\xdcB\x00@\x15D\x00\x00\x98B\x00\x80\xb4C\x00\x80\xdeC\x00\x80\xd1C\x00\x00qC\x00\x00`C\x00\x00WC\x00\x00\xb7C\x00\x00\x94B\x00\x00\xd9C\x00\x00\x10B\x00\x00\xc1C\x00\x00DB\x00\x00\x1eC\x00\x80\xe5C\x00\x80\x97C\x00\x00\x9aC\x00\x80\xf0C\x00@\x11D\x00\x00\x80B\x00\x00\x82C\x00\x00<C\x00\x00tC\x00\x00xC\x00\x00\x03C\x00\xc0\x12D\x00\x00\xccC\x00\x80\xd5C\x00\x00\xe1C\x00\x00pB\x00\x80\x11D\x00\xc0\x03D\x00\x00\xdaB\x00\x00\xc0C\x00\x00KC\x00\x00\x00@\x00\x00\x0fD\x00\x80\xd7C\x00\x00\xfcC\x00\xc0\x10D\x00\x00\x04B\x00\x00:C\x00\x00\xc3C\x00\x80\xa2C\x00\x00EC\x00\x00\xb0C\x00\x80\x90C\x00\x80\x12D\x00\x80\x9bC\x00\x00\xd3C\x00\x00\xf4B\x00\x00\x10D\x00\x00\xbaB\x00\x00\xd0C\x00\x00XB\x00\x00\xc6B\x00\x00@C\x00\x00\xa0A\x00\x80\xffC\x00\x00\xf9C\x00\x80\xb7C\x00\x00\x08B\x00\x00\xe6B\x00\x80\x08D\x00\x00\xceC\x00\x80\xe7C\x00\x80\xf7C\x00\x00\rD\x00\x80\xdcC\x00\x00\x04C\x00\x80\x03D\x00\x00@@\x00\x80\x96C\x00\x80\xd3C\x00\x00\xc7C\x00\x00\x13D\x00\x00\xe4C\x00\x00MC\x00\x00\xb9C\x00\x00\xfcB\x00\x80\x13D\x00\x00aC\x00\x80\x05D\x00\x00!C\x00\x00<B\x00\x00\xeeC\x00\x00\xbcC\x00\x00nC\x00\x00\xf7C\x00\x00\x19C\x00@\x10D\x00\x00\xffC\x00\x00\xacB\x00\x00\xc8B\x00\xc0\nD\x00\x00LC\x00\xc0\x00D\x00\x004B\x00\x00\xa2C\x00\x00\xd7C\x00\x80\x15D\x00\x00\x14B\x00\x00\xadC\x00\x80\xf6C\x00\x80\x93C\x00\x80\x91C\x00\x00\xa8C\x00\x00*C\x00\x00lB\x00\x80\xa1C\x00\x00@B\x00\x80\xedC\x00\xc0\x02D\x00\x00uC\x00\x00]C\x00\x00\x05C\x00\x00\xccB\x00\x00\x1cB\x00\x009C\x00\x00\xacC\x00\x00\x00C\x00\x80\x0bD\x00\x80\x8eC\x00\x00\xf3C\x00\x00|C\x00\x00(B\x00\x00pC\x00\x00iC\x00\x80\xeaC\x00\x80\xacC\x00\x80\xd2C\x00\x00\xe0B\x00\x80\xbcC\x00\x80\xbdC\x00\x80\xf2C\x00\x00\'C\x00\x00cC\x00\x00(C\x00\x00_C\x00\xc0\x0fD\x00\x00{C\x00\x00hB\x00\x80\x94C\x00\x00\xf2B\x00@\x03D\x00\x00\xc0@\x00\x00\x0cB\x00\x00QC\x00\x80\x01D\x00\x00vC\x00\x00\x92C\x00\x00\x7fC\x00\x00\xc8A\x00\x80\xf3C\x00\x00\xbeC\x00\x00\xceB\x00\x00\xa9C\x00\x80\xfbC\x00\x00\xbeB\x00\x80\xfcC\x00\x80\x81C\x00\x00"C\x00\x80\xd4C\x00\x80\x06D\x00\x80\xf9C\x00\x00\xcaC\x00\x00\xaeC\x00\x00\xaeB\x00\x80\xe9C\x00\x00\xeaB\x00\x00BC\x00@\x02D\x00\x00$B\x00\xc0\x05D\x00\x00\xa4C\x00\x80\xeeC\x00\x00\xe2C\x00\x00\x03D\x00\x80\xdaC\x00\x00%C\x00\x00\x8bC\x00\x00\x05D\x00\x00\x86C\x00\x00\x8eC\x00\x00PB\x00\x00\xd8A\x00\x00\x1aC\x00\x00lC\x00\x80\x85C\x00\x00\xdcC\x00\x00\xe5C\x00\x00 C\x00\x00\xc6C\x00\x80\xaaC\x00\x80\xd8C\x00\x00\xe4B\x00\x00\x8eB\x00\x00}C\x00\x80\xcdC\x00\x00oC\x00\xc0\x0bD\x00\x80\xa0C\x00\x00\x97C\x00\x00\xcaB\x00@\x06D\x00\x00\xa1C\x00\x00\\C\x00\x00~C\x00\x008B\x00\x00\x99C\x00\x00\xa5C\x00\x00\rC\x00\x80\xafC\x00\x00yC\x00\x80\xc7C\x00@\x13D\x00\x00\xe8B\x00\x00\tD\x00\x00dB\x00\x00\x1bC\x00\x00\x9eC\x00\x00\xe8A\x00\x00\xd5C\x00\x00>C\x00\x00,B\x00\x00\xfeB\x00\x00\xb4C\x00\x00[C\x00\x80\x8aC\x00\x00\xd8C\x00\x00\x80C\x00\x00UC\x00\x00\x91C\x00\xc0\x11D\x00\x80\xb3C\x00\x00\xc0A\x00\x80\x04D\x00\x00\x16C\x00\x00\xdeB\x00\x00\nC\x00\x00\x8fC\x00\x80\xaeC\x00\x80\xa4C\x00\x80\x83C\x00\x00\x9cC\x00\x80\xe1C\x00\x00\xe3C\x00\x00+C\x00\x00|B\x00\xc0\x04D\x00\x00\xdeC\x00\x00\xd1C\x00\x00\xfbC\x00\x00\xbfC\x00\x00PA\x00@\x04D\x00\x80\xcbC\x00\x80\xf8C\x00\x00\xc2C\x00\x80\xbfC\x00\x00\xcfC\x00\x80\x00D\x00\x00\xabC\x00\x00,C\x00\x00\xb6C\x00\x00\xfaB\x00\x00sC\x00\x00\xf0A\x00\x004C\x00\x00\xcdC\x00\x00TB\x00\x00mC\x00\x00XC\x00\x00\x80@\x00\xc0\x06D\x00\x00\tC\x00\x00\xb2B\x00\x00\xecB\x00\x00^C\x00\x00\xb8A\x00\x00\xbcB\x00@\nD\x00\x00\x9aB\x00\x00\x0fC\x00\x80\x98C\x00\x00hC\x00\x00jC\x00\xc0\x08D\x00\xc0\x13D\x00\x00\xb0B\x00\x80\xa8C\x00\x80\x89C\x00\x007C\x00\x00\xd0B\x00\x00fC\x00\x00?C\x00\x000B\x00\x00\x84C\x00\x00\xf6B\x00\x00\xd6C\x00\x00\x1cC\x00\x00\xd4B\x00\x00\x93C\x00\x80\x80C\x00\x00\x0bC\x00\x80\xdbC\x00\x00\x86B\x00\x00\xeeB\x00\x00eC\x00\x00;C\x00\x00\x08D\x00\x00\xb3C\x00\x00\x04D\x00\x80\x86C\x00\x80\xc8C\x00\x80\xb6C\x00\x00\x84B\x00\x80\xd9C\x00\x80\xf1C\x00\x80\x0fD\x00\x00\xb5C\x00\x80\xc4C\x00\x00-C\x00@\x0bD\x00\x00\x01D\x00\x00\xd0A\x00\x00\x98A\x00\x00\xeaC\x00\x00/C\x00\x80\x9eC\x00\x00\x10C\x00\x80\x14D\x00\x00&C\x00\x00\xf0C\x00\x80\xc5C\x00\x000C\x00\x00\x15C\x00@\x0fD\x00\x00YC\x00\x00\xa4B\x00\x00\\B\x00\x00\x12C\x00\x00\x98C\x00\x00\x18B\x00\x80\x88C\x00\x80\xc3C\x00\x00\xd6B\x00\x00RC\x00\x80\xecC\x00\xc0\x01D\x00\x80\xe0C\x00\x80\xa5C\x00\x80\tD\x00\x00$C\x00\x80\x8fC\x00\x00\x87C\x00\xc0\x15D\x00\x00\x90C\x00\x00\xafC\x00\x00\xe0C\x00\x00\xd2B\x00\x80\xf5C\x00\x00HC\x00\x00)C\x00\x00\xfeC\x00\x00rC\x00\x80\x82C\x00\x00AC\x00\x00\x8aB\x00\x00 A\x00\x00\x11D\x00\x00\x0bD\x00\x00\xf8B\x00\x008C\x00\x00\xc2B\x00\x00\xa7C\x00\x00TC\x00\xc0\rD\x00\x00GC\x00\x00\x90A\x00@\x05D\x00\x00\xa8A\x00\x00\xb2C\x00\x00\x9dC\x00\x00\xd8B\x00\x00\xf5C\x00\x00\x96C\x00\x00\xb0A\x00\x00\x9fC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4810
(dp4811
g61
(dp4812
g49
I01
sg57
I01
ssg63
g4803
sg64
(lp4813
g49
ag57
asg66
(lp4814
I600
aI1
asbsg68
S'random'
p4815
sg70
g71
(g52
(I0
tS'b'
tRp4816
(I1
(I600
I1
tg55
(S'i4'
I0
I1
tRp4817
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'+\x00\x00\x005\x00\x00\x00\xf6\x00\x00\x00\x1a\x01\x00\x00\xe4\x01\x00\x00Y\x00\x00\x00d\x01\x00\x00R\x00\x00\x00\x7f\x00\x00\x00\x13\x00\x00\x00D\x02\x00\x006\x00\x00\x00:\x00\x00\x00\xd1\x01\x00\x00\xb1\x00\x00\x00\x16\x00\x00\x00\x1a\x00\x00\x00@\x00\x00\x00N\x02\x00\x00\x19\x02\x00\x00\x0c\x01\x00\x00P\x02\x00\x00V\x02\x00\x00\xea\x01\x00\x00\xbe\x01\x00\x00k\x01\x00\x00\x18\x02\x00\x00\x8c\x01\x00\x00\'\x00\x00\x00\xb0\x01\x00\x00\xde\x01\x00\x00\xca\x00\x00\x00\x9f\x00\x00\x00\xfb\x00\x00\x00\x10\x01\x00\x00e\x01\x00\x00\xdd\x00\x00\x008\x01\x00\x00*\x02\x00\x00H\x01\x00\x00\xcc\x00\x00\x00\x7f\x01\x00\x00P\x01\x00\x00\xb3\x01\x00\x00\xfb\x01\x00\x004\x01\x00\x00\xa3\x01\x00\x00\'\x01\x00\x00A\x01\x00\x00\xdf\x00\x00\x00\xb3\x00\x00\x00i\x00\x00\x00\x8b\x01\x00\x00\xe1\x01\x00\x00\t\x01\x00\x00\'\x02\x00\x00.\x00\x00\x00\xad\x01\x00\x00`\x01\x00\x00?\x01\x00\x00\xf0\x00\x00\x004\x00\x00\x00S\x00\x00\x00\xcb\x01\x00\x00\xe6\x00\x00\x00\x01\x00\x00\x00\x0f\x02\x00\x00\x05\x02\x00\x00\x9b\x00\x00\x00C\x02\x00\x00t\x00\x00\x00\x97\x01\x00\x00=\x00\x00\x00\x08\x00\x00\x00\xdb\x00\x00\x00\xaa\x00\x00\x00\xd3\x00\x00\x00\xed\x01\x00\x00A\x00\x00\x00M\x00\x00\x00\xab\x00\x00\x00\x91\x00\x00\x00&\x02\x00\x00\xa7\x00\x00\x00\xb8\x00\x00\x00\x85\x00\x00\x00/\x01\x00\x00z\x01\x00\x00\xf4\x01\x00\x00\xe7\x01\x00\x00\x93\x00\x00\x00T\x00\x00\x007\x00\x00\x00\x07\x01\x00\x00\xeb\x01\x00\x00q\x01\x00\x00\x19\x00\x00\x00I\x02\x00\x00G\x00\x00\x00\n\x01\x00\x000\x01\x00\x00\x9e\x01\x00\x00G\x01\x00\x00n\x01\x00\x00\xf8\x01\x00\x00;\x02\x00\x00\x00\x02\x00\x00-\x02\x00\x00S\x02\x00\x00\xf3\x00\x00\x00\xd1\x00\x00\x00\xc1\x01\x00\x00V\x01\x00\x00n\x00\x00\x00\x96\x01\x00\x00\x11\x01\x00\x00\xab\x01\x00\x00|\x01\x00\x00\xe8\x01\x00\x00\x06\x02\x00\x00\xa8\x00\x00\x00b\x01\x00\x00\x05\x01\x00\x00\xfd\x01\x00\x00G\x02\x00\x00\xdc\x01\x00\x00"\x01\x00\x00\xb4\x01\x00\x00K\x01\x00\x00\xaf\x00\x00\x00\xbe\x00\x00\x00\xeb\x00\x00\x00\x18\x01\x00\x00F\x01\x00\x00\xa3\x00\x00\x00\r\x00\x00\x00\x81\x00\x00\x00\xe6\x01\x00\x00\xc2\x01\x00\x00\x03\x02\x00\x00\x1d\x00\x00\x00\xa6\x01\x00\x00\x12\x00\x00\x00\xee\x01\x00\x00\x1d\x02\x00\x00y\x00\x00\x00(\x02\x00\x00\x06\x00\x00\x00\x89\x00\x00\x00#\x02\x00\x00\xc0\x01\x00\x00\xa5\x00\x00\x00<\x00\x00\x00,\x01\x00\x00\x8d\x01\x00\x00\xae\x01\x00\x00\xff\x01\x00\x00\t\x00\x00\x00\xe0\x00\x00\x00\xcb\x00\x00\x00\x92\x01\x00\x00&\x01\x00\x00t\x01\x00\x00\x8e\x00\x00\x004\x02\x00\x00\x86\x01\x00\x00\x1f\x02\x00\x00Z\x01\x00\x00\\\x01\x00\x00>\x02\x00\x00>\x01\x00\x00\xca\x01\x00\x00\xda\x01\x00\x00\x15\x02\x00\x00\xa2\x00\x00\x00\x1b\x02\x00\x00"\x02\x00\x00\x14\x00\x00\x00\x8c\x00\x00\x00e\x00\x00\x00\xdf\x01\x00\x00#\x00\x00\x00O\x00\x00\x00\xf7\x01\x00\x00H\x02\x00\x00I\x01\x00\x00\xfc\x00\x00\x00\x08\x02\x00\x00\xe8\x00\x00\x009\x00\x00\x00\xb2\x01\x00\x00\xfa\x01\x00\x00\x0b\x01\x00\x00B\x02\x00\x00}\x01\x00\x00\x9c\x00\x00\x00D\x00\x00\x00\xff\x00\x00\x00\x04\x00\x00\x00M\x02\x00\x00=\x02\x00\x00?\x00\x00\x00`\x00\x00\x00\xf5\x00\x00\x002\x01\x00\x00 \x01\x00\x00\x18\x00\x00\x00\x8d\x00\x00\x00\x1e\x00\x00\x00f\x01\x00\x00.\x02\x00\x00\x83\x00\x00\x00K\x02\x00\x00\xba\x01\x00\x001\x00\x00\x00\xd9\x00\x00\x00\xe3\x01\x00\x00%\x02\x00\x00*\x00\x00\x00\xb6\x01\x00\x00\xa1\x01\x00\x00E\x01\x00\x00\xe9\x01\x00\x00]\x01\x00\x00\xd8\x00\x00\x00$\x01\x00\x00\xb0\x00\x00\x00[\x01\x00\x00r\x00\x00\x00\x07\x02\x00\x00\xf9\x01\x00\x00]\x00\x00\x00\xf0\x01\x00\x00R\x01\x00\x00\xf1\x01\x00\x00\xc7\x00\x00\x00\x8e\x01\x00\x00\xe2\x01\x00\x00*\x01\x00\x00\x9a\x01\x00\x00Q\x01\x00\x00\xd7\x00\x00\x00@\x02\x00\x00\xdd\x01\x00\x00\xe9\x00\x00\x00D\x01\x00\x00h\x01\x00\x00\xce\x00\x00\x00\xea\x00\x00\x00\xa8\x01\x00\x00\x92\x00\x00\x00_\x01\x00\x00O\x01\x00\x00\x98\x01\x00\x00\xa2\x01\x00\x00j\x01\x00\x00\xb9\x01\x00\x00\x02\x02\x00\x00;\x00\x00\x00s\x01\x00\x00\xe7\x00\x00\x00A\x02\x00\x00\xc6\x00\x00\x00\xc6\x01\x00\x00\xfc\x01\x00\x00%\x00\x00\x00l\x00\x00\x00\x8f\x01\x00\x00\x89\x01\x00\x00\x0c\x02\x00\x006\x02\x00\x00\x0f\x00\x00\x00~\x00\x00\x00+\x02\x00\x00{\x00\x00\x00\xf6\x01\x00\x00\x98\x00\x00\x00\xb7\x01\x00\x00\x87\x01\x00\x00X\x00\x00\x008\x00\x00\x00\x05\x00\x00\x00,\x00\x00\x00\xac\x00\x00\x00\x8a\x01\x00\x00M\x01\x00\x00\xc3\x01\x00\x005\x02\x00\x008\x02\x00\x00\x01\x01\x00\x00\xbb\x01\x00\x00<\x01\x00\x00i\x01\x00\x00&\x00\x00\x00\x01\x02\x00\x00;\x01\x00\x00F\x00\x00\x00a\x01\x00\x00/\x00\x00\x00\xb2\x00\x00\x00U\x02\x00\x00\x1b\x01\x00\x00\x9d\x01\x00\x00\xe2\x00\x00\x00)\x02\x00\x00\xef\x01\x00\x00\xa4\x01\x00\x00H\x00\x00\x00\xe3\x00\x00\x00B\x00\x00\x00p\x00\x00\x00\x03\x01\x00\x00\xc7\x01\x00\x00\x9d\x00\x00\x00R\x02\x00\x00W\x00\x00\x00\xaf\x01\x00\x00\x1c\x02\x00\x00W\x02\x00\x00\x15\x00\x00\x00>\x00\x00\x00\x9c\x01\x00\x00\xa0\x01\x00\x00@\x01\x00\x005\x01\x00\x00\xfe\x00\x00\x00\x88\x00\x00\x00o\x00\x00\x00\x81\x01\x00\x00\xc5\x01\x00\x00\xa5\x01\x00\x002\x02\x00\x00\xb4\x00\x00\x00\xd0\x00\x00\x00J\x02\x00\x00\xa4\x00\x00\x00=\x01\x00\x00\xf5\x01\x00\x00o\x01\x00\x00k\x00\x00\x00\x95\x00\x00\x00\x94\x01\x00\x00\xd9\x01\x00\x00\x0c\x00\x00\x00J\x01\x00\x00T\x01\x00\x009\x01\x00\x00\x02\x00\x00\x00y\x01\x00\x00\xc4\x01\x00\x009\x02\x00\x00\xa7\x01\x00\x00\x00\x01\x00\x00-\x00\x00\x00\x94\x00\x00\x00\x10\x00\x00\x00Q\x02\x00\x00g\x00\x00\x00\n\x02\x00\x00\xbd\x01\x00\x00\xb5\x01\x00\x00\xd4\x00\x00\x00\x13\x02\x00\x00\xc5\x00\x00\x00\xdb\x01\x00\x00\x0e\x02\x00\x00\xda\x00\x00\x00\x0f\x01\x00\x00\xc1\x00\x00\x00N\x00\x00\x00!\x01\x00\x00\xc3\x00\x00\x00x\x00\x00\x00\xb7\x00\x00\x00Q\x00\x00\x00\xbd\x00\x00\x00)\x01\x00\x00W\x01\x00\x00\xbc\x00\x00\x00X\x01\x00\x00m\x01\x00\x00u\x00\x00\x00\xd0\x01\x00\x00\xd6\x01\x00\x00\xf4\x00\x00\x00\x0b\x00\x00\x00\xde\x00\x00\x00\x86\x00\x00\x00\xd5\x01\x00\x00\xa9\x00\x00\x00\xfd\x00\x00\x00,\x02\x00\x00P\x00\x00\x00\x14\x02\x00\x00\xc9\x00\x00\x00!\x02\x00\x00\x93\x01\x00\x00\x11\x00\x00\x00\x1d\x01\x00\x00\xa9\x01\x00\x00\xb6\x00\x00\x00\r\x02\x00\x00\x03\x00\x00\x00\\\x00\x00\x00x\x01\x00\x00\x99\x00\x00\x00\xc0\x00\x00\x00\xd3\x01\x00\x00\xed\x00\x00\x00z\x00\x00\x00\xe0\x01\x00\x00\x99\x01\x00\x00\x13\x01\x00\x00\x96\x00\x00\x00\xd7\x01\x00\x00\x8f\x00\x00\x00\x08\x01\x00\x00\x87\x00\x00\x00\xce\x01\x00\x00\xd6\x00\x00\x00Z\x00\x00\x00U\x01\x00\x00\x04\x01\x00\x00\x1c\x01\x00\x00I\x00\x00\x00u\x01\x00\x00\xb1\x01\x00\x00\xee\x00\x00\x00\xfe\x01\x00\x00c\x00\x00\x006\x01\x00\x00\xf8\x00\x00\x00\xb8\x01\x00\x00\x95\x01\x00\x00\xdc\x00\x00\x00\x10\x02\x00\x00C\x00\x00\x00\x85\x01\x00\x00!\x00\x00\x00\x04\x02\x00\x00\x90\x01\x00\x00\x17\x01\x00\x00E\x00\x00\x00\xbf\x00\x00\x00\xcd\x01\x00\x00\xd5\x00\x00\x00\xa1\x00\x00\x00\x9a\x00\x00\x00:\x02\x00\x001\x02\x00\x00\xef\x00\x00\x00\xc8\x01\x00\x00\x83\x01\x00\x00|\x00\x00\x00\xc9\x01\x00\x002\x00\x00\x00\x1f\x01\x00\x00\xcf\x00\x00\x00\x91\x01\x00\x00\xe1\x00\x00\x00(\x00\x00\x00\xba\x00\x00\x00h\x00\x00\x00\x14\x01\x00\x00b\x00\x00\x00\xc8\x00\x00\x00s\x00\x00\x00{\x01\x00\x00\x1a\x02\x00\x00S\x01\x00\x00j\x00\x00\x00v\x00\x00\x00\x07\x00\x00\x00/\x02\x00\x00\xad\x00\x00\x00B\x01\x00\x00(\x01\x00\x00\x82\x01\x00\x00w\x00\x00\x00\x1c\x00\x00\x00 \x02\x00\x00\xe4\x00\x00\x00\x1b\x00\x00\x00\x11\x02\x00\x00$\x00\x00\x00Y\x01\x00\x00N\x01\x00\x00l\x01\x00\x00\xc4\x00\x00\x00)\x00\x00\x00T\x02\x00\x00<\x02\x00\x00L\x00\x00\x00:\x01\x00\x00+\x01\x00\x00\x15\x01\x00\x00\x84\x00\x00\x00\xd4\x01\x00\x00\x0e\x01\x00\x00w\x01\x00\x00\x8a\x00\x00\x000\x00\x00\x00\xcf\x01\x00\x00p\x01\x00\x00\xf9\x00\x00\x00r\x01\x00\x00\x97\x00\x00\x00V\x00\x00\x00?\x02\x00\x00\xa0\x00\x00\x00.\x01\x00\x00\r\x01\x00\x00\x0e\x00\x00\x00\x82\x00\x00\x00\xd8\x01\x00\x003\x01\x00\x00\x17\x02\x00\x00[\x00\x00\x00g\x01\x00\x000\x02\x00\x00J\x00\x00\x00~\x01\x00\x00f\x00\x00\x00C\x01\x00\x00\x84\x01\x00\x00c\x01\x00\x00\x19\x01\x00\x00\xf2\x00\x00\x00\x0b\x02\x00\x00\xd2\x01\x00\x00\xbf\x01\x00\x00\xcc\x01\x00\x00\x88\x01\x00\x00O\x02\x00\x00%\x01\x00\x00\x80\x01\x00\x00\x9e\x00\x00\x00\x9f\x01\x00\x00v\x01\x00\x00\xe5\x01\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\xcd\x00\x00\x00\xc2\x00\x00\x00\t\x02\x00\x00\n\x00\x00\x00\x12\x01\x00\x00\xf2\x01\x00\x00\xac\x01\x00\x00\xb5\x00\x00\x003\x02\x00\x00d\x00\x00\x00q\x00\x00\x00\xec\x01\x00\x00^\x00\x00\x001\x01\x00\x00F\x02\x00\x00\x16\x02\x00\x00L\x01\x00\x00\x9b\x01\x00\x00\x90\x00\x00\x00"\x00\x00\x003\x00\x00\x00\x80\x00\x00\x00\x16\x01\x00\x00\xa6\x00\x00\x00}\x00\x00\x00L\x02\x00\x00\xb9\x00\x00\x00m\x00\x00\x00K\x00\x00\x00U\x00\x00\x00\xf7\x00\x00\x00$\x02\x00\x00\x12\x02\x00\x00^\x01\x00\x00\x06\x01\x00\x00-\x01\x00\x00\x1f\x00\x00\x00\xfa\x00\x00\x00E\x02\x00\x00\xe5\x00\x00\x00\xf1\x00\x00\x00\xbc\x01\x00\x00\xbb\x00\x00\x00\xae\x00\x00\x00\x02\x01\x00\x00\xec\x00\x00\x00\x1e\x01\x00\x00\xaa\x01\x00\x00#\x01\x00\x00\xf3\x01\x00\x00_\x00\x00\x00 \x00\x00\x00\x1e\x02\x00\x00a\x00\x00\x00\x8b\x00\x00\x00\xd2\x00\x00\x007\x01\x00\x007\x02\x00\x00'
tbsg75
I01
sg76
I1
sg77
I-1
sg78
(lp4818
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg80
Nsg81
cnumpy.core.multiarray
scalar
p4819
(g4817
S'7\x02\x00\x00'
tRp4820
sg82
I600
sg83
I0
sg84
I600
sg85
I01
sbag37
asS'savePickle'
p4821
I01
sb.