ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject810
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 810
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vf
sS'age'
p31
V22
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I12
sS'_exp'
p41
I74705456
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I39
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I15
I40
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I15
I40
tg55
I00
S'\x00\x00\x98A\x00\x00\xd8A\x00\x00\xe8A\x00\x00\x04B\x00\x00\x1cB\x00\x00HB\x00\x00pB\x00\x00\x84B\x00\x00\x8aB\x00\x00\xb4B\x00\x00\xc6B\x00\x00\x06C\x00\x00 C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x006C\x00\x007C\x00\x00PC\x00\x00^C\x00\x00aC\x00\x00hC\x00\x00tC\x00\x00\x7fC\x00\x00\x87C\x00\x80\x88C\x00\x80\x90C\x00\x80\x9aC\x00\x80\xb1C\x00\x00\xd0C\x00\x80\xd3C\x00\x00\xdcC\x00\x00\xddC\x00\x80\xe6C\x00\x80\xe9C\x00\x00\xf5C\x00\x80\x06D\x00@\tD\x00@\rD\x00\x00\x00\x00\x00\x00\x0cB\x00\x00xB\x00\x00\x9eB\x00\x00\xacB\x00\x00\xb6B\x00\x00\xbcB\x00\x00\xc4B\x00\x00\xd4B\x00\x00\xf0B\x00\x00\x00C\x00\x00\x0fC\x00\x00\x1dC\x00\x000C\x00\x009C\x00\x00GC\x00\x00TC\x00\x00vC\x00\x00\x8cC\x00\x00\x9cC\x00\x80\xa5C\x00\x00\xaaC\x00\x80\xabC\x00\x00\xafC\x00\x00\xb5C\x00\x00\xbdC\x00\x00\xc4C\x00\x00\xc8C\x00\x80\xcdC\x00\x80\xd2C\x00\x00\xdeC\x00\x80\xdeC\x00\x00\xe8C\x00\x80\xfeC\x00\x80\x01D\x00\x00\x04D\x00\x00\x06D\x00\x00\x10D\x00\x00\x11D\x00\x80\x15D\x00\x00\x80?\x00\x00\x90A\x00\x00tB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\x0bC\x00\x00\x0cC\x00\x00\x1aC\x00\x00\x1fC\x00\x00JC\x00\x00VC\x00\x00WC\x00\x00_C\x00\x00rC\x00\x00\x84C\x00\x00\x95C\x00\x00\x98C\x00\x80\x99C\x00\x00\xa7C\x00\x80\xa7C\x00\x80\xaaC\x00\x80\xb5C\x00\x80\xbeC\x00\x00\xc9C\x00\x80\xdbC\x00\x80\xe7C\x00\x00\xf9C\x00\x00\xfaC\x00\x80\xfbC\x00\x00\x02D\x00\x80\x07D\x00\xc0\x0cD\x00\x80\rD\x00\x80\x0eD\x00\x00\x0fD\x00\xc0\x0fD\x00\x80\x10D\x00\xc0\x10D\x00\xc0\x11D\x00@\x12D\x00\x00\x00@\x00\x00PA\x00\x00pA\x00\x00\xc8A\x00\x00\xe0A\x00\x00`B\x00\x00\x88B\x00\x00\xa2B\x00\x00\xecB\x00\x00\x1cC\x00\x00-C\x00\x008C\x00\x00|C\x00\x00\x88C\x00\x80\x94C\x00\x80\x97C\x00\x80\xacC\x00\x80\xb3C\x00\x00\xb6C\x00\x00\xbcC\x00\x00\xccC\x00\x00\xceC\x00\x80\xceC\x00\x00\xcfC\x00\x80\xd4C\x00\x80\xd7C\x00\x00\xd9C\x00\x80\xe0C\x00\x00\xe4C\x00\x80\xe4C\x00\x80\xf5C\x00\x80\xf6C\x00\x80\xf7C\x00\x80\xfdC\x00\x00\xfeC\x00\x00\x01D\x00\x80\x0bD\x00@\x0cD\x00\x00\x13D\x00\xc0\x14D\x00\x00\xa8A\x00\x00\x00B\x00\x00|B\x00\x00\x86B\x00\x00\xd0B\x00\x00\xdcB\x00\x00\xfeB\x00\x00\x01C\x00\x00&C\x00\x00.C\x00\x003C\x00\x00@C\x00\x00CC\x00\x00IC\x00\x00oC\x00\x00wC\x00\x00xC\x00\x00yC\x00\x00zC\x00\x00\x86C\x00\x00\x8aC\x00\x00\x90C\x00\x00\x91C\x00\x80\x93C\x00\x00\x94C\x00\x80\x96C\x00\x80\x9cC\x00\x00\xa1C\x00\x80\xa1C\x00\x80\xa4C\x00\x80\xbdC\x00\x80\xc7C\x00\x80\xc8C\x00\x00\xd6C\x00\x80\xdcC\x00\x00\xedC\x00\xc0\tD\x00\x00\nD\x00\xc0\x0eD\x00\x80\x14D\x00\x00@@\x00\x00\x88A\x00\x00\x14B\x00\x00TB\x00\x00\x80B\x00\x00\xa0B\x00\x00\xa8B\x00\x00\xc8B\x00\x00\xd6B\x00\x00\x02C\x00\x00\x03C\x00\x00\x05C\x00\x00\rC\x00\x00\x0eC\x00\x00\x17C\x00\x00>C\x00\x00KC\x00\x00YC\x00\x00mC\x00\x80\x8dC\x00\x80\x92C\x00\x00\x9eC\x00\x00\xa9C\x00\x00\xb8C\x00\x80\xb9C\x00\x80\xc1C\x00\x00\xc3C\x00\x80\xd0C\x00\x80\xdaC\x00\x80\xdfC\x00\x00\xe1C\x00\x00\xe2C\x00\x80\xe3C\x00\x00\xf8C\x00\x80\xffC\x00\x80\x02D\x00\x00\x03D\x00\xc0\x08D\x00\x80\nD\x00@\x11D\x00\x00\xb8A\x00\x00\xc0A\x00\x00dB\x00\x00\xaaB\x00\x00\xfaB\x00\x00\xfcB\x00\x00\x13C\x00\x00\x1bC\x00\x00<C\x00\x00UC\x00\x00ZC\x00\x00bC\x00\x00eC\x00\x00~C\x00\x00\x80C\x00\x80\x8aC\x00\x00\x8eC\x00\x80\x8eC\x00\x00\x92C\x00\x00\x9dC\x00\x00\xa4C\x00\x00\xacC\x00\x80\xb4C\x00\x00\xb7C\x00\x00\xc5C\x00\x00\xc6C\x00\x00\xc7C\x00\x00\xcdC\x00\x00\xd2C\x00\x00\xd3C\x00\x80\xfcC\x00\x00\xffC\x00\xc0\x00D\x00\x80\x04D\x00@\nD\x00@\x0bD\x00\x00\x0eD\x00@\x0eD\x00\x00\x12D\x00@\x15D\x00\x00`A\x00\x004B\x00\x00PB\x00\x00\xb0B\x00\x00\xe2B\x00\x00\xe6B\x00\x00\xf6B\x00\x00\x15C\x00\x00)C\x00\x00+C\x00\x00=C\x00\x00OC\x00\x00gC\x00\x00iC\x00\x80\x80C\x00\x00\x81C\x00\x80\x82C\x00\x80\x89C\x00\x80\x8cC\x00\x00\x96C\x00\x00\x97C\x00\x80\x98C\x00\x80\x9dC\x00\x80\xa2C\x00\x00\xa3C\x00\x00\xa6C\x00\x00\xb4C\x00\x00\xbaC\x00\x00\xd7C\x00\x80\xe1C\x00\x80\xe8C\x00\x00\xecC\x00\x80\xeeC\x00\x00\xf0C\x00\x80\xf2C\x00@\x01D\x00\x80\x03D\x00@\x05D\x00@\x06D\x00\x00\x0cD\x00\x00@A\x00\x00\x08B\x00\x00,B\x00\x00LB\x00\x00\x82B\x00\x00\xaeB\x00\x00\xbaB\x00\x00\xc2B\x00\x00\xceB\x00\x00\xe4B\x00\x00\xf4B\x00\x00,C\x00\x005C\x00\x00SC\x00\x00nC\x00\x00{C\x00\x80\x83C\x00\x00\x85C\x00\x00\x9aC\x00\x00\xb2C\x00\x80\xb2C\x00\x80\xb8C\x00\x80\xbfC\x00\x00\xc1C\x00\x00\xc2C\x00\x80\xc6C\x00\x80\xd1C\x00\x00\xd8C\x00\x00\xdfC\x00\x00\xe3C\x00\x00\xeaC\x00\x80\xeaC\x00\x80\xf1C\x00\x00\xf3C\x00\x00\xf6C\x00@\x02D\x00\x80\x05D\x00\xc0\x07D\x00\x00\x08D\x00@\x14D\x00\x00\x80@\x00\x00\xa0@\x00\x00\xb0A\x00\x00\x18B\x00\x00XB\x00\x00\\B\x00\x00lB\x00\x00\x8cB\x00\x00\x92B\x00\x00\xa4B\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xccB\x00\x00\x04C\x00\x00\nC\x00\x00\x12C\x00\x00/C\x00\x00:C\x00\x00\\C\x00\x00dC\x00\x00fC\x00\x00uC\x00\x00}C\x00\x80\x85C\x00\x80\xa0C\x00\x00\xb1C\x00\x80\xbbC\x00\x80\xcbC\x00\x00\xd4C\x00\x80\xd5C\x00\x80\xe2C\x00\x80\xe5C\x00\x00\xe9C\x00\x80\xecC\x00\x80\xf3C\x00\x80\xf4C\x00\x00\x00D\x00\x80\x00D\x00\x00\x05D\x00\x00\x07D\x00\x00\xc0@\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00\x8eB\x00\x00\x98B\x00\x00\xa6B\x00\x00\xd8B\x00\x00\x07C\x00\x00\tC\x00\x00\x10C\x00\x00\x1eC\x00\x00\'C\x00\x00?C\x00\x00AC\x00\x00LC\x00\x00QC\x00\x00RC\x00\x00XC\x00\x00jC\x00\x00lC\x00\x80\x86C\x00\x00\x89C\x00\x00\x8dC\x00\x00\xa2C\x00\x80\xa8C\x00\x80\xa9C\x00\x00\xbbC\x00\x80\xc9C\x00\x00\xcbC\x00\x80\xccC\x00\x80\xddC\x00\x00\xe0C\x00\x00\xefC\x00@\x03D\x00@\x04D\x00\x80\x08D\x00\x80\tD\x00\x00\x0bD\x00\xc0\x13D\x00\x00\xa0A\x00\x00\xd0A\x00\x00 B\x00\x00$B\x00\x000B\x00\x00<B\x00\x00hB\x00\x00\x9cB\x00\x00\x08C\x00\x00\x16C\x00\x00FC\x00\x00HC\x00\x00MC\x00\x80\x81C\x00\x80\x84C\x00\x00\x8bC\x00\x80\x8fC\x00\x80\xa3C\x00\x80\xa6C\x00\x80\xafC\x00\x80\xb0C\x00\x00\xb3C\x00\x80\xb6C\x00\x80\xbcC\x00\x00\xbfC\x00\x80\xc0C\x00\x80\xc3C\x00\x80\xcfC\x00\x00\xd5C\x00\x00\xdaC\x00\x00\xe5C\x00\x80\xebC\x00\x80\xefC\x00\x80\xf8C\x00\x80\xfaC\x00\x00\xfbC\x00\x00\xfdC\x00\xc0\x06D\x00\x00\tD\x00\x80\x13D\x00\x00\xe0@\x00\x00\x00A\x00\x00(B\x00\x00DB\x00\x00\xb8B\x00\x00\xcaB\x00\x00\xd2B\x00\x00\xeaB\x00\x00\xf2B\x00\x00\x19C\x00\x00!C\x00\x002C\x00\x00;C\x00\x00EC\x00\x00cC\x00\x00pC\x00\x00sC\x00\x00\x82C\x00\x00\x83C\x00\x80\x9fC\x00\x00\xadC\x00\x80\xadC\x00\x80\xaeC\x00\x00\xb0C\x00\x00\xb9C\x00\x00\xc0C\x00\x00\xd1C\x00\x00\xe7C\x00\x00\xeeC\x00@\x00D\x00\xc0\x01D\x00\xc0\x02D\x00\xc0\x03D\x00\xc0\x05D\x00@\x08D\x00\xc0\nD\x00\x80\x0fD\x00\x80\x11D\x00\xc0\x12D\x00\xc0\x15D\x00\x00\xf0A\x00\x00\xf8A\x00\x008B\x00\x00\x96B\x00\x00\xb2B\x00\x00\xe8B\x00\x00\xf8B\x00\x00\x14C\x00\x00\x18C\x00\x00(C\x00\x00*C\x00\x001C\x00\x00NC\x00\x00kC\x00\x00qC\x00\x80\x8bC\x00\x00\x8fC\x00\x80\x91C\x00\x00\x93C\x00\x00\x99C\x00\x80\x9bC\x00\x00\xa5C\x00\x00\xa8C\x00\x00\xabC\x00\x00\xaeC\x00\x80\xbaC\x00\x80\xc2C\x00\x80\xc5C\x00\x80\xd6C\x00\x00\xebC\x00\x00\xf1C\x00\x00\xf4C\x00\x80\xf9C\x00\xc0\x04D\x00\x80\x0cD\x00\x00\rD\x00@\x0fD\x00@\x10D\x00@\x13D\x00\x00\x15D\x00\x00\x80A\x00\x00\x10B\x00\x00@B\x00\x00\x90B\x00\x00\x94B\x00\x00\x9aB\x00\x00\xdaB\x00\x00\xeeB\x00\x00\x11C\x00\x004C\x00\x00BC\x00\x00DC\x00\x00[C\x00\x00]C\x00\x00`C\x00\x80\x87C\x00\x80\x95C\x00\x00\x9bC\x00\x80\x9eC\x00\x00\x9fC\x00\x00\xa0C\x00\x80\xb7C\x00\x00\xbeC\x00\x80\xc4C\x00\x00\xcaC\x00\x80\xcaC\x00\x80\xd8C\x00\x80\xd9C\x00\x00\xdbC\x00\x00\xe6C\x00\x80\xedC\x00\x80\xf0C\x00\x00\xf2C\x00\x00\xf7C\x00\x00\xfcC\x00@\x07D\x00\xc0\x0bD\x00\xc0\rD\x00\x80\x12D\x00\x00\x14D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I15
aI40
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I15
I40
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I1
aI3
aI13
aI7
aI0
aI13
aI0
aI12
aI1
aI10
aI11
aI0
aI14
aI4
aI10
aI0
aI12
aI0
aI0
aI6
aI7
aI7
aI13
aI3
aI7
aI9
aI5
aI14
aI6
aI14
aI5
aI7
aI7
aI3
aI6
aI10
aI9
aI12
aI2
aI2
aI2
aI14
aI13
aI13
aI2
aI10
aI1
aI1
aI12
aI11
aI5
aI4
aI8
aI14
aI8
aI6
aI13
aI6
aI14
aI13
aI4
aI5
aI1
aI12
aI6
aI3
aI11
aI10
aI1
aI11
aI7
aI9
aI14
aI5
aI5
aI7
aI14
aI10
aI4
aI14
aI3
aI5
aI4
aI11
aI1
aI14
aI12
aI5
aI8
aI10
aI13
aI10
aI0
aI12
aI1
aI12
aI2
aI7
aI3
aI11
aI7
aI14
aI7
aI12
aI1
aI11
aI1
aI9
aI6
aI5
aI5
aI0
aI13
aI11
aI9
aI12
aI2
aI6
aI2
aI12
aI5
aI2
aI0
aI14
aI4
aI11
aI8
aI10
aI7
aI9
aI12
aI13
aI0
aI11
aI6
aI9
aI12
aI7
aI0
aI4
aI3
aI14
aI11
aI13
aI2
aI1
aI14
aI3
aI0
aI14
aI9
aI8
aI8
aI2
aI12
aI1
aI8
aI3
aI13
aI3
aI9
aI0
aI8
aI12
aI5
aI1
aI1
aI14
aI13
aI2
aI2
aI7
aI3
aI1
aI2
aI6
aI0
aI11
aI10
aI0
aI2
aI12
aI2
aI12
aI3
aI4
aI6
aI10
aI9
aI2
aI8
aI8
aI14
aI13
aI9
aI10
aI8
aI14
aI12
aI13
aI9
aI11
aI1
aI0
aI8
aI5
aI9
aI4
aI6
aI2
aI6
aI13
aI1
aI11
aI2
aI9
aI9
aI12
aI7
aI4
aI7
aI14
aI2
aI1
aI11
aI14
aI13
aI6
aI3
aI0
aI5
aI13
aI7
aI2
aI6
aI6
aI12
aI7
aI2
aI11
aI10
aI4
aI14
aI8
aI0
aI3
aI9
aI2
aI6
aI5
aI3
aI7
aI9
aI4
aI10
aI7
aI1
aI7
aI4
aI13
aI13
aI9
aI13
aI11
aI6
aI2
aI6
aI1
aI11
aI4
aI3
aI11
aI8
aI11
aI3
aI13
aI10
aI3
aI1
aI10
aI12
aI9
aI5
aI7
aI4
aI9
aI8
aI2
aI4
aI5
aI1
aI8
aI12
aI2
aI5
aI0
aI4
aI12
aI6
aI6
aI2
aI4
aI10
aI12
aI14
aI11
aI8
aI3
aI9
aI0
aI3
aI7
aI9
aI11
aI7
aI9
aI5
aI13
aI13
aI14
aI12
aI6
aI9
aI5
aI3
aI10
aI1
aI7
aI1
aI1
aI10
aI3
aI6
aI5
aI6
aI7
aI4
aI8
aI11
aI5
aI8
aI4
aI5
aI11
aI5
aI8
aI6
aI3
aI4
aI10
aI11
aI9
aI13
aI2
aI1
aI7
aI11
aI2
aI2
aI8
aI10
aI6
aI0
aI9
aI0
aI5
aI0
aI8
aI4
aI10
aI2
aI4
aI7
aI10
aI14
aI10
aI4
aI2
aI13
aI13
aI0
aI10
aI10
aI9
aI8
aI12
aI4
aI3
aI13
aI1
aI9
aI4
aI9
aI14
aI12
aI8
aI0
aI13
aI2
aI4
aI10
aI3
aI11
aI9
aI9
aI6
aI5
aI7
aI5
aI14
aI0
aI9
aI5
aI11
aI9
aI13
aI4
aI11
aI1
aI4
aI14
aI7
aI1
aI0
aI12
aI11
aI1
aI11
aI7
aI1
aI14
aI14
aI0
aI6
aI2
aI12
aI10
aI0
aI1
aI3
aI10
aI11
aI11
aI3
aI10
aI1
aI12
aI13
aI5
aI9
aI12
aI1
aI10
aI13
aI14
aI10
aI8
aI8
aI7
aI4
aI13
aI7
aI2
aI8
aI5
aI8
aI4
aI0
aI3
aI8
aI0
aI12
aI3
aI11
aI8
aI1
aI4
aI2
aI5
aI13
aI8
aI0
aI12
aI6
aI14
aI8
aI9
aI12
aI9
aI6
aI0
aI13
aI4
aI7
aI0
aI5
aI3
aI9
aI10
aI3
aI1
aI11
aI13
aI8
aI7
aI5
aI2
aI5
aI8
aI5
aI12
aI7
aI8
aI3
aI5
aI7
aI4
aI14
aI12
aI6
aI3
aI3
aI8
aI11
aI9
aI7
aI8
aI3
aI5
aI13
aI0
aI12
aI10
aI0
aI2
aI8
aI9
aI4
aI5
aI2
aI4
aI6
aI1
aI11
aI13
aI8
aI10
aI12
aI14
aI10
aI2
aI10
aI3
aI3
aI12
aI0
aI6
aI6
aI2
aI1
aI7
aI0
aI11
aI9
aI14
aI13
aI4
aI14
aI0
aI7
aI0
aI4
aI14
aI10
aI14
aI4
aI6
aI10
aI6
aI14
aI6
aI4
aI6
aI3
aI10
aI13
aI14
aI8
aI3
aI3
aI1
aI11
aI14
aI1
aI5
aI11
aI5
aI6
aI6
aI12
atbsS'finished'
p74
I00
sS'nReps'
p75
I40
sS'nRemaining'
p76
I0
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p79
NsS'thisIndex'
p80
I12
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I14
sS'nTotal'
p83
I600
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I1
sS'.thisRepN'
p96
I0
sg30
Vf
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I1
sg15
(lp100
S'k'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'k'
asg95
I2
sS'.thisRepN'
p103
I0
sg30
Vf
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I2
sg15
(lp107
S'k'
asg17
S'Y'
sg14
I1
sa(dp108
g16
(lp109
S'k'
asg18
S'Y'
sS'.thisRepN'
p110
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I3
sg15
(lp114
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp115
g16
(lp116
S'k'
asg18
S'Y'
sS'.thisRepN'
p117
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I5
sg15
(lp121
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp122
g16
(lp123
S'k'
asg18
S'Y'
sS'.thisRepN'
p124
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p125
I4
sS'.thisN'
p126
I4
sS'.thisIndex'
p127
I9
sg15
(lp128
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp129
g16
(lp130
S'k'
asg18
S'Y'
sS'.thisRepN'
p131
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p132
I5
sS'.thisN'
p133
I5
sS'.thisIndex'
p134
I9
sg15
(lp135
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp136
g16
(lp137
S'd'
asg18
S'Y'
sS'.thisRepN'
p138
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p139
I6
sS'.thisN'
p140
I6
sS'.thisIndex'
p141
I10
sg15
(lp142
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp143
S'space'
p144
asg95
I10
sa(dp145
g16
(lp146
S'd'
asg18
S'N'
sS'.thisRepN'
p147
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p148
I7
sS'.thisN'
p149
I7
sS'.thisIndex'
p150
I12
sg15
(lp151
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp152
g16
(lp153
S'k'
asg18
S'Y'
sS'.thisRepN'
p154
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p155
I8
sS'.thisN'
p156
I8
sS'.thisIndex'
p157
I12
sg15
(lp158
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp159
g16
(lp160
S'k'
asg18
S'N'
sS'.thisRepN'
p161
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p162
I9
sS'.thisN'
p163
I9
sS'.thisIndex'
p164
I10
sg15
(lp165
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp166
g16
(lp167
S'd'
asg18
S'N'
sS'.thisRepN'
p168
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p169
I10
sS'.thisN'
p170
I10
sS'.thisIndex'
p171
I10
sg15
(lp172
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp173
g16
(lp174
S'd'
asg18
S'Y'
sS'.thisRepN'
p175
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p176
I11
sS'.thisN'
p177
I11
sS'.thisIndex'
p178
I10
sg15
(lp179
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I10
sa(dp180
g16
(lp181
S'k'
asg18
S'N'
sS'.thisRepN'
p182
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p183
I12
sS'.thisN'
p184
I12
sS'.thisIndex'
p185
I8
sg15
(lp186
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp187
g16
(lp188
S'd'
asg18
S'Y'
sS'.thisRepN'
p189
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p190
I13
sS'.thisN'
p191
I13
sS'.thisIndex'
p192
I3
sg15
(lp193
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp194
S'space'
p195
asg95
I3
sa(dp196
g16
(lp197
S'd'
asg18
S'Y'
sS'.thisRepN'
p198
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p199
I14
sS'.thisN'
p200
I14
sS'.thisIndex'
p201
I7
sg15
(lp202
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp203
g16
(lp204
S'd'
asg18
S'Y'
sS'.thisRepN'
p205
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p206
I0
sS'.thisN'
p207
I15
sS'.thisIndex'
p208
I3
sg15
(lp209
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp210
S'space'
p211
asg95
I3
sa(dp212
g16
(lp213
S'k'
asg18
S'N'
sS'.thisRepN'
p214
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p215
I1
sS'.thisN'
p216
I16
sS'.thisIndex'
p217
I14
sg15
(lp218
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I14
sa(dp219
g16
(lp220
S'd'
asg18
S'Y'
sS'.thisRepN'
p221
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p222
I2
sS'.thisN'
p223
I17
sS'.thisIndex'
p224
I5
sg15
(lp225
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp226
g16
(lp227
S'k'
asg18
S'Y'
sS'.thisRepN'
p228
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p229
I3
sS'.thisN'
p230
I18
sS'.thisIndex'
p231
I2
sg15
(lp232
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp233
g16
(lp234
S'd'
asg18
S'Y'
sS'.thisRepN'
p235
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p236
I4
sS'.thisN'
p237
I19
sS'.thisIndex'
p238
I0
sg15
(lp239
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp240
S'space'
p241
asg95
I0
sa(dp242
g16
(lp243
S'd'
asg18
S'N'
sS'.thisRepN'
p244
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p245
I5
sS'.thisN'
p246
I20
sS'.thisIndex'
p247
I11
sg15
(lp248
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp249
g16
(lp250
S'd'
asg18
S'N'
sS'.thisRepN'
p251
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p252
I6
sS'.thisN'
p253
I21
sS'.thisIndex'
p254
I4
sg15
(lp255
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp256
g16
(lp257
S'd'
asg18
S'Y'
sS'.thisRepN'
p258
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p259
I7
sS'.thisN'
p260
I22
sS'.thisIndex'
p261
I9
sg15
(lp262
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp263
g16
(lp264
S'k'
asg18
S'Y'
sS'.thisRepN'
p265
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p266
I8
sS'.thisN'
p267
I23
sS'.thisIndex'
p268
I6
sg15
(lp269
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp270
S'space'
p271
asg95
I6
sa(dp272
g16
(lp273
S'k'
asg18
S'N'
sS'.thisRepN'
p274
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p275
I9
sS'.thisN'
p276
I24
sS'.thisIndex'
p277
I6
sg15
(lp278
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp279
g16
(lp280
S'k'
asg18
S'Y'
sS'.thisRepN'
p281
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p282
I10
sS'.thisN'
p283
I25
sS'.thisIndex'
p284
I3
sg15
(lp285
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp286
S'space'
p287
asg95
I3
sa(dp288
g16
(lp289
S'd'
asg18
S'N'
sS'.thisRepN'
p290
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p291
I11
sS'.thisN'
p292
I26
sS'.thisIndex'
p293
I11
sg15
(lp294
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp295
g16
(lp296
S'k'
asg18
S'Y'
sS'.thisRepN'
p297
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p298
I12
sS'.thisN'
p299
I27
sS'.thisIndex'
p300
I0
sg15
(lp301
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp302
S'space'
p303
asg95
I0
sa(dp304
g16
(lp305
S'd'
asg18
S'Y'
sS'.thisRepN'
p306
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p307
I13
sS'.thisN'
p308
I28
sS'.thisIndex'
p309
I3
sg15
(lp310
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp311
S'space'
p312
asg95
I3
sa(dp313
g16
(lp314
S'd'
asg18
S'Y'
sS'.thisRepN'
p315
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p316
I14
sS'.thisN'
p317
I29
sS'.thisIndex'
p318
I0
sg15
(lp319
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp320
S'space'
p321
asg95
I0
sa(dp322
g16
(lp323
S'k'
asg18
S'N'
sS'.thisRepN'
p324
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p325
I0
sS'.thisN'
p326
I30
sS'.thisIndex'
p327
I13
sg15
(lp328
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp329
g16
(lp330
S'd'
asg18
S'Y'
sS'.thisRepN'
p331
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p332
I1
sS'.thisN'
p333
I31
sS'.thisIndex'
p334
I13
sg15
(lp335
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp336
S'space'
p337
asg95
I13
sa(dp338
g16
(lp339
S'k'
asg18
S'N'
sS'.thisRepN'
p340
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p341
I2
sS'.thisN'
p342
I32
sS'.thisIndex'
p343
I4
sg15
(lp344
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp345
S'space'
p346
asg95
I4
sa(dp347
g16
(lp348
S'd'
asg18
S'Y'
sS'.thisRepN'
p349
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p350
I3
sS'.thisN'
p351
I33
sS'.thisIndex'
p352
I0
sg15
(lp353
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp354
S'space'
p355
asg95
I0
sa(dp356
g16
(lp357
S'd'
asg18
S'N'
sS'.thisRepN'
p358
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p359
I4
sS'.thisN'
p360
I34
sS'.thisIndex'
p361
I8
sg15
(lp362
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I8
sa(dp363
g16
(lp364
S'd'
asg18
S'N'
sS'.thisRepN'
p365
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p366
I5
sS'.thisN'
p367
I35
sS'.thisIndex'
p368
I1
sg15
(lp369
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp370
g16
(lp371
S'd'
asg18
S'N'
sS'.thisRepN'
p372
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p373
I6
sS'.thisN'
p374
I36
sS'.thisIndex'
p375
I14
sg15
(lp376
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp377
g16
(lp378
S'k'
asg18
S'Y'
sS'.thisRepN'
p379
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p380
I7
sS'.thisN'
p381
I37
sS'.thisIndex'
p382
I5
sg15
(lp383
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp384
g16
(lp385
S'd'
asg18
S'Y'
sS'.thisRepN'
p386
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p387
I8
sS'.thisN'
p388
I38
sS'.thisIndex'
p389
I9
sg15
(lp390
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp391
g16
(lp392
S'd'
asg18
S'N'
sS'.thisRepN'
p393
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p394
I9
sS'.thisN'
p395
I39
sS'.thisIndex'
p396
I0
sg15
(lp397
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp398
g16
(lp399
S'k'
asg18
S'Y'
sS'.thisRepN'
p400
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p401
I10
sS'.thisN'
p402
I40
sS'.thisIndex'
p403
I11
sg15
(lp404
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp405
g16
(lp406
S'd'
asg18
S'N'
sS'.thisRepN'
p407
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p408
I11
sS'.thisN'
p409
I41
sS'.thisIndex'
p410
I11
sg15
(lp411
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp412
S'space'
p413
asg95
I11
sa(dp414
g16
(lp415
S'k'
asg18
S'Y'
sS'.thisRepN'
p416
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p417
I12
sS'.thisN'
p418
I42
sS'.thisIndex'
p419
I12
sg15
(lp420
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp421
g16
(lp422
S'k'
asg18
S'N'
sS'.thisRepN'
p423
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p424
I13
sS'.thisN'
p425
I43
sS'.thisIndex'
p426
I8
sg15
(lp427
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp428
g16
(lp429
S'k'
asg18
S'N'
sS'.thisRepN'
p430
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p431
I14
sS'.thisN'
p432
I44
sS'.thisIndex'
p433
I11
sg15
(lp434
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp435
S'space'
p436
asg95
I11
sa(dp437
g16
(lp438
S'd'
asg18
S'N'
sS'.thisRepN'
p439
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p440
I0
sS'.thisN'
p441
I45
sS'.thisIndex'
p442
I7
sg15
(lp443
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp444
S'space'
p445
asg95
I7
sa(dp446
g16
(lp447
S'k'
asg18
S'N'
sS'.thisRepN'
p448
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p449
I1
sS'.thisN'
p450
I46
sS'.thisIndex'
p451
I13
sg15
(lp452
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp453
g16
(lp454
S'd'
asg18
S'N'
sS'.thisRepN'
p455
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p456
I2
sS'.thisN'
p457
I47
sS'.thisIndex'
p458
I11
sg15
(lp459
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp460
g16
(lp461
S'k'
asg18
S'N'
sS'.thisRepN'
p462
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p463
I3
sS'.thisN'
p464
I48
sS'.thisIndex'
p465
I14
sg15
(lp466
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I14
sa(dp467
g16
(lp468
S'd'
asg18
S'N'
sg22
I30
sS'.thisN'
p469
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p470
I4
sS'.thisRepN'
p471
I3
sg21
I37
sS'.thisIndex'
p472
I12
sg23
I25
sg15
(lp473
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp474
g16
(lp475
S'k'
asg95
I0
sS'.thisRepN'
p476
I3
sg30
Vf
sg31
g32
sS'.thisTrialN'
p477
I5
sS'.thisN'
p478
I50
sS'.thisIndex'
p479
I0
sg15
(lp480
S'k'
asg17
S'Y'
sg14
I2
sa(dp481
g16
(lp482
S'k'
asg95
I8
sS'.thisRepN'
p483
I3
sg30
Vf
sg31
g32
sS'.thisTrialN'
p484
I6
sS'.thisN'
p485
I51
sS'.thisIndex'
p486
I8
sg15
(lp487
S'k'
asg17
S'Y'
sg14
I2
sa(dp488
g16
(lp489
S'd'
asg18
S'Y'
sS'.thisRepN'
p490
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p491
I7
sS'.thisN'
p492
I52
sS'.thisIndex'
p493
I7
sg15
(lp494
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp495
S'space'
p496
asg95
I7
sa(dp497
g16
(lp498
S'd'
asg18
S'Y'
sS'.thisRepN'
p499
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p500
I8
sS'.thisN'
p501
I53
sS'.thisIndex'
p502
I5
sg15
(lp503
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp504
S'space'
p505
asg95
I5
sa(dp506
g16
(lp507
S'd'
asg18
S'N'
sS'.thisRepN'
p508
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p509
I9
sS'.thisN'
p510
I54
sS'.thisIndex'
p511
I9
sg15
(lp512
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp513
g16
(lp514
S'd'
asg18
S'Y'
sS'.thisRepN'
p515
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p516
I10
sS'.thisN'
p517
I55
sS'.thisIndex'
p518
I9
sg15
(lp519
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp520
S'd'
asg95
I9
sa(dp521
g16
(lp522
S'k'
asg18
S'Y'
sS'.thisRepN'
p523
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p524
I11
sS'.thisN'
p525
I56
sS'.thisIndex'
p526
I3
sg15
(lp527
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp528
g16
(lp529
S'd'
asg18
S'N'
sS'.thisRepN'
p530
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p531
I12
sS'.thisN'
p532
I57
sS'.thisIndex'
p533
I6
sg15
(lp534
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp535
g16
(lp536
S'd'
asg18
S'N'
sS'.thisRepN'
p537
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p538
I13
sS'.thisN'
p539
I58
sS'.thisIndex'
p540
I11
sg15
(lp541
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp542
g16
(lp543
S'd'
asg18
S'N'
sS'.thisRepN'
p544
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p545
I14
sS'.thisN'
p546
I59
sS'.thisIndex'
p547
I9
sg15
(lp548
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp549
g16
(lp550
S'k'
asg18
S'N'
sS'.thisRepN'
p551
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p552
I0
sS'.thisN'
p553
I60
sS'.thisIndex'
p554
I0
sg15
(lp555
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp556
g16
(lp557
S'd'
asg18
S'Y'
sS'.thisRepN'
p558
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p559
I1
sS'.thisN'
p560
I61
sS'.thisIndex'
p561
I2
sg15
(lp562
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp563
S'space'
p564
asg95
I2
sa(dp565
g16
(lp566
S'k'
asg18
S'N'
sS'.thisRepN'
p567
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p568
I2
sS'.thisN'
p569
I62
sS'.thisIndex'
p570
I1
sg15
(lp571
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp572
g16
(lp573
S'd'
asg18
S'Y'
sS'.thisRepN'
p574
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p575
I3
sS'.thisN'
p576
I63
sS'.thisIndex'
p577
I4
sg15
(lp578
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp579
S'space'
p580
asg95
I4
sa(dp581
g16
(lp582
S'k'
asg18
S'Y'
sS'.thisRepN'
p583
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p584
I4
sS'.thisN'
p585
I64
sS'.thisIndex'
p586
I5
sg15
(lp587
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp588
g16
(lp589
S'k'
asg18
S'N'
sS'.thisRepN'
p590
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p591
I5
sS'.thisN'
p592
I65
sS'.thisIndex'
p593
I8
sg15
(lp594
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp595
S'space'
p596
asg95
I8
sa(dp597
g16
(lp598
S'd'
asg18
S'N'
sS'.thisRepN'
p599
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p600
I6
sS'.thisN'
p601
I66
sS'.thisIndex'
p602
I0
sg15
(lp603
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp604
S'space'
p605
asg95
I0
sa(dp606
g16
(lp607
S'k'
asg18
S'Y'
sS'.thisRepN'
p608
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p609
I7
sS'.thisN'
p610
I67
sS'.thisIndex'
p611
I4
sg15
(lp612
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp613
g16
(lp614
S'd'
asg18
S'Y'
sS'.thisRepN'
p615
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p616
I8
sS'.thisN'
p617
I68
sS'.thisIndex'
p618
I3
sg15
(lp619
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp620
g16
(lp621
S'd'
asg18
S'Y'
sS'.thisRepN'
p622
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p623
I9
sS'.thisN'
p624
I69
sS'.thisIndex'
p625
I0
sg15
(lp626
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp627
S'space'
p628
asg95
I0
sa(dp629
g16
(lp630
S'd'
asg18
S'Y'
sS'.thisRepN'
p631
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p632
I10
sS'.thisN'
p633
I70
sS'.thisIndex'
p634
I9
sg15
(lp635
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp636
g16
(lp637
S'k'
asg18
S'N'
sS'.thisRepN'
p638
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p639
I11
sS'.thisN'
p640
I71
sS'.thisIndex'
p641
I10
sg15
(lp642
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp643
g16
(lp644
S'k'
asg18
S'N'
sS'.thisRepN'
p645
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p646
I12
sS'.thisN'
p647
I72
sS'.thisIndex'
p648
I14
sg15
(lp649
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp650
g16
(lp651
S'd'
asg18
S'Y'
sS'.thisRepN'
p652
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p653
I13
sS'.thisN'
p654
I73
sS'.thisIndex'
p655
I9
sg15
(lp656
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp657
S'space'
p658
asg95
I9
sa(dp659
g16
(lp660
S'd'
asg18
S'N'
sS'.thisRepN'
p661
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p662
I14
sS'.thisN'
p663
I74
sS'.thisIndex'
p664
I14
sg15
(lp665
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp666
g16
(lp667
S'k'
asg18
S'Y'
sS'.thisRepN'
p668
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p669
I0
sS'.thisN'
p670
I75
sS'.thisIndex'
p671
I13
sg15
(lp672
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I13
sa(dp673
g16
(lp674
S'k'
asg18
S'Y'
sS'.thisRepN'
p675
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p676
I1
sS'.thisN'
p677
I76
sS'.thisIndex'
p678
I10
sg15
(lp679
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp680
g16
(lp681
S'd'
asg18
S'N'
sS'.thisRepN'
p682
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p683
I2
sS'.thisN'
p684
I77
sS'.thisIndex'
p685
I14
sg15
(lp686
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp687
g16
(lp688
S'd'
asg18
S'Y'
sS'.thisRepN'
p689
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p690
I3
sS'.thisN'
p691
I78
sS'.thisIndex'
p692
I11
sg15
(lp693
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp694
S'space'
p695
asg95
I11
sa(dp696
g16
(lp697
S'k'
asg18
S'N'
sS'.thisRepN'
p698
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p699
I4
sS'.thisN'
p700
I79
sS'.thisIndex'
p701
I1
sg15
(lp702
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp703
S'space'
p704
asg95
I1
sa(dp705
g16
(lp706
S'd'
asg18
S'Y'
sS'.thisRepN'
p707
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p708
I5
sS'.thisN'
p709
I80
sS'.thisIndex'
p710
I5
sg15
(lp711
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp712
S'space'
p713
asg95
I5
sa(dp714
g16
(lp715
S'k'
asg18
S'Y'
sS'.thisRepN'
p716
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p717
I6
sS'.thisN'
p718
I81
sS'.thisIndex'
p719
I3
sg15
(lp720
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp721
S'space'
p722
asg95
I3
sa(dp723
g16
(lp724
S'd'
asg18
S'Y'
sS'.thisRepN'
p725
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p726
I7
sS'.thisN'
p727
I82
sS'.thisIndex'
p728
I9
sg15
(lp729
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp730
S'space'
p731
asg95
I9
sa(dp732
g16
(lp733
S'k'
asg18
S'Y'
sS'.thisRepN'
p734
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p735
I8
sS'.thisN'
p736
I83
sS'.thisIndex'
p737
I10
sg15
(lp738
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I10
sa(dp739
g16
(lp740
S'd'
asg18
S'Y'
sS'.thisRepN'
p741
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p742
I9
sS'.thisN'
p743
I84
sS'.thisIndex'
p744
I5
sg15
(lp745
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp746
S'space'
p747
asg95
I5
sa(dp748
g16
(lp749
S'd'
asg18
S'N'
sS'.thisRepN'
p750
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p751
I10
sS'.thisN'
p752
I85
sS'.thisIndex'
p753
I6
sg15
(lp754
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp755
g16
(lp756
S'k'
asg18
S'N'
sS'.thisRepN'
p757
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p758
I11
sS'.thisN'
p759
I86
sS'.thisIndex'
p760
I1
sg15
(lp761
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp762
S'space'
p763
asg95
I1
sa(dp764
g16
(lp765
S'd'
asg18
S'N'
sS'.thisRepN'
p766
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p767
I12
sS'.thisN'
p768
I87
sS'.thisIndex'
p769
I8
sg15
(lp770
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp771
S'space'
p772
asg95
I8
sa(dp773
g16
(lp774
S'k'
asg18
S'N'
sS'.thisRepN'
p775
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p776
I13
sS'.thisN'
p777
I88
sS'.thisIndex'
p778
I7
sg15
(lp779
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp780
g16
(lp781
S'd'
asg18
S'N'
sS'.thisRepN'
p782
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p783
I14
sS'.thisN'
p784
I89
sS'.thisIndex'
p785
I13
sg15
(lp786
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I13
sa(dp787
g16
(lp788
S'd'
asg18
S'Y'
sS'.thisRepN'
p789
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p790
I0
sS'.thisN'
p791
I90
sS'.thisIndex'
p792
I0
sg15
(lp793
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp794
g16
(lp795
S'k'
asg18
S'N'
sS'.thisRepN'
p796
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p797
I1
sS'.thisN'
p798
I91
sS'.thisIndex'
p799
I1
sg15
(lp800
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp801
g16
(lp802
S'k'
asg18
S'N'
sS'.thisRepN'
p803
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p804
I2
sS'.thisN'
p805
I92
sS'.thisIndex'
p806
I12
sg15
(lp807
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp808
g16
(lp809
S'k'
asg18
S'Y'
sS'.thisRepN'
p810
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p811
I3
sS'.thisN'
p812
I93
sS'.thisIndex'
p813
I8
sg15
(lp814
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp815
g16
(lp816
S'k'
asg18
S'N'
sS'.thisRepN'
p817
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p818
I4
sS'.thisN'
p819
I94
sS'.thisIndex'
p820
I1
sg15
(lp821
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp822
S'space'
p823
asg95
I1
sa(dp824
g16
(lp825
S'k'
asg18
S'N'
sS'.thisRepN'
p826
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p827
I5
sS'.thisN'
p828
I95
sS'.thisIndex'
p829
I9
sg15
(lp830
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp831
g16
(lp832
S'd'
asg18
S'Y'
sS'.thisRepN'
p833
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p834
I6
sS'.thisN'
p835
I96
sS'.thisIndex'
p836
I9
sg15
(lp837
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp838
g16
(lp839
S'k'
asg18
S'Y'
sS'.thisRepN'
p840
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p841
I7
sS'.thisN'
p842
I97
sS'.thisIndex'
p843
I8
sg15
(lp844
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp845
g16
(lp846
S'k'
asg18
S'Y'
sS'.thisRepN'
p847
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p848
I8
sS'.thisN'
p849
I98
sS'.thisIndex'
p850
I1
sg15
(lp851
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp852
S'd'
asg95
I1
sa(dp853
g16
(lp854
S'd'
asg18
S'N'
sg22
I28
sS'.thisN'
p855
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p856
I9
sS'.thisRepN'
p857
I6
sg21
I36
sS'.thisIndex'
p858
I0
sg23
I25
sg15
(lp859
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp860
g16
(lp861
S'd'
asg95
I5
sS'.thisRepN'
p862
I6
sg30
Vf
sg31
g32
sS'.thisTrialN'
p863
I10
sS'.thisN'
p864
I100
sS'.thisIndex'
p865
I5
sg15
(lp866
S'd'
asg17
S'Y'
sg14
I3
sa(dp867
g16
(lp868
S'k'
asg95
I12
sS'.thisRepN'
p869
I6
sg30
Vf
sg31
g32
sS'.thisTrialN'
p870
I11
sS'.thisN'
p871
I101
sS'.thisIndex'
p872
I12
sg15
(lp873
S'k'
asg17
S'Y'
sg14
I3
sa(dp874
g16
(lp875
S'd'
asg18
S'Y'
sS'.thisRepN'
p876
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p877
I12
sS'.thisN'
p878
I102
sS'.thisIndex'
p879
I9
sg15
(lp880
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp881
S'd'
asg95
I9
sa(dp882
g16
(lp883
S'k'
asg18
S'Y'
sS'.thisRepN'
p884
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p885
I13
sS'.thisN'
p886
I103
sS'.thisIndex'
p887
I8
sg15
(lp888
S'd'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp889
S'space'
p890
asg95
I8
sa(dp891
g16
(lp892
S'k'
asg18
S'N'
sS'.thisRepN'
p893
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p894
I14
sS'.thisN'
p895
I104
sS'.thisIndex'
p896
I4
sg15
(lp897
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp898
g16
(lp899
S'd'
asg18
S'Y'
sS'.thisRepN'
p900
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p901
I0
sS'.thisN'
p902
I105
sS'.thisIndex'
p903
I12
sg15
(lp904
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp905
g16
(lp906
S'd'
asg18
S'Y'
sS'.thisRepN'
p907
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p908
I1
sS'.thisN'
p909
I106
sS'.thisIndex'
p910
I1
sg15
(lp911
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp912
S'space'
p913
asg95
I1
sa(dp914
g16
(lp915
S'd'
asg18
S'N'
sS'.thisRepN'
p916
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p917
I2
sS'.thisN'
p918
I107
sS'.thisIndex'
p919
I5
sg15
(lp920
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I5
sa(dp921
g16
(lp922
S'd'
asg18
S'Y'
sS'.thisRepN'
p923
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p924
I3
sS'.thisN'
p925
I108
sS'.thisIndex'
p926
I10
sg15
(lp927
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I10
sa(dp928
g16
(lp929
S'k'
asg18
S'Y'
sS'.thisRepN'
p930
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p931
I4
sS'.thisN'
p932
I109
sS'.thisIndex'
p933
I14
sg15
(lp934
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I14
sa(dp935
g16
(lp936
S'k'
asg18
S'Y'
sS'.thisRepN'
p937
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p938
I5
sS'.thisN'
p939
I110
sS'.thisIndex'
p940
I4
sg15
(lp941
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp942
S'space'
p943
asg95
I4
sa(dp944
g16
(lp945
S'd'
asg18
S'N'
sS'.thisRepN'
p946
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p947
I6
sS'.thisN'
p948
I111
sS'.thisIndex'
p949
I2
sg15
(lp950
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp951
g16
(lp952
S'd'
asg18
S'Y'
sS'.thisRepN'
p953
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p954
I7
sS'.thisN'
p955
I112
sS'.thisIndex'
p956
I2
sg15
(lp957
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp958
S'space'
p959
asg95
I2
sa(dp960
g16
(lp961
S'd'
asg18
S'N'
sS'.thisRepN'
p962
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p963
I8
sS'.thisN'
p964
I113
sS'.thisIndex'
p965
I7
sg15
(lp966
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp967
g16
(lp968
S'd'
asg18
S'Y'
sS'.thisRepN'
p969
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p970
I9
sS'.thisN'
p971
I114
sS'.thisIndex'
p972
I8
sg15
(lp973
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp974
g16
(lp975
S'k'
asg18
S'N'
sS'.thisRepN'
p976
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p977
I10
sS'.thisN'
p978
I115
sS'.thisIndex'
p979
I7
sg15
(lp980
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp981
S'space'
p982
asg95
I7
sa(dp983
g16
(lp984
S'd'
asg18
S'Y'
sS'.thisRepN'
p985
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p986
I11
sS'.thisN'
p987
I116
sS'.thisIndex'
p988
I13
sg15
(lp989
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp990
S'space'
p991
asg95
I13
sa(dp992
g16
(lp993
S'd'
asg18
S'N'
sS'.thisRepN'
p994
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p995
I12
sS'.thisN'
p996
I117
sS'.thisIndex'
p997
I12
sg15
(lp998
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp999
S'space'
p1000
asg95
I12
sa(dp1001
g16
(lp1002
S'd'
asg18
S'Y'
sS'.thisRepN'
p1003
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1004
I13
sS'.thisN'
p1005
I118
sS'.thisIndex'
p1006
I3
sg15
(lp1007
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1008
S'space'
p1009
asg95
I3
sa(dp1010
g16
(lp1011
S'd'
asg18
S'Y'
sS'.thisRepN'
p1012
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1013
I14
sS'.thisN'
p1014
I119
sS'.thisIndex'
p1015
I14
sg15
(lp1016
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1017
S'space'
p1018
asg95
I14
sa(dp1019
g16
(lp1020
S'd'
asg18
S'N'
sS'.thisRepN'
p1021
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1022
I0
sS'.thisN'
p1023
I120
sS'.thisIndex'
p1024
I1
sg15
(lp1025
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1026
g16
(lp1027
S'd'
asg18
S'Y'
sS'.thisRepN'
p1028
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1029
I1
sS'.thisN'
p1030
I121
sS'.thisIndex'
p1031
I12
sg15
(lp1032
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1033
g16
(lp1034
S'k'
asg18
S'Y'
sS'.thisRepN'
p1035
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1036
I2
sS'.thisN'
p1037
I122
sS'.thisIndex'
p1038
I8
sg15
(lp1039
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1040
S'space'
p1041
asg95
I8
sa(dp1042
g16
(lp1043
S'k'
asg18
S'Y'
sS'.thisRepN'
p1044
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1045
I3
sS'.thisN'
p1046
I123
sS'.thisIndex'
p1047
I7
sg15
(lp1048
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1049
S'space'
p1050
asg95
I7
sa(dp1051
g16
(lp1052
S'k'
asg18
S'N'
sS'.thisRepN'
p1053
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1054
I4
sS'.thisN'
p1055
I124
sS'.thisIndex'
p1056
I13
sg15
(lp1057
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1058
g16
(lp1059
S'k'
asg18
S'N'
sS'.thisRepN'
p1060
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1061
I5
sS'.thisN'
p1062
I125
sS'.thisIndex'
p1063
I6
sg15
(lp1064
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1065
g16
(lp1066
S'k'
asg18
S'N'
sS'.thisRepN'
p1067
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1068
I6
sS'.thisN'
p1069
I126
sS'.thisIndex'
p1070
I6
sg15
(lp1071
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1072
S'space'
p1073
asg95
I6
sa(dp1074
g16
(lp1075
S'd'
asg18
S'Y'
sS'.thisRepN'
p1076
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1077
I7
sS'.thisN'
p1078
I127
sS'.thisIndex'
p1079
I4
sg15
(lp1080
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1081
S'space'
p1082
asg95
I4
sa(dp1083
g16
(lp1084
S'd'
asg18
S'Y'
sS'.thisRepN'
p1085
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1086
I8
sS'.thisN'
p1087
I128
sS'.thisIndex'
p1088
I1
sg15
(lp1089
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp1090
g16
(lp1091
S'd'
asg18
S'Y'
sS'.thisRepN'
p1092
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1093
I9
sS'.thisN'
p1094
I129
sS'.thisIndex'
p1095
I4
sg15
(lp1096
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1097
S'space'
p1098
asg95
I4
sa(dp1099
g16
(lp1100
S'k'
asg18
S'N'
sS'.thisRepN'
p1101
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1102
I10
sS'.thisN'
p1103
I130
sS'.thisIndex'
p1104
I5
sg15
(lp1105
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1106
g16
(lp1107
S'd'
asg18
S'N'
sS'.thisRepN'
p1108
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1109
I11
sS'.thisN'
p1110
I131
sS'.thisIndex'
p1111
I5
sg15
(lp1112
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I5
sa(dp1113
g16
(lp1114
S'k'
asg18
S'N'
sS'.thisRepN'
p1115
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1116
I12
sS'.thisN'
p1117
I132
sS'.thisIndex'
p1118
I9
sg15
(lp1119
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1120
S'space'
p1121
asg95
I9
sa(dp1122
g16
(lp1123
S'd'
asg18
S'N'
sS'.thisRepN'
p1124
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1125
I13
sS'.thisN'
p1126
I133
sS'.thisIndex'
p1127
I5
sg15
(lp1128
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1129
g16
(lp1130
S'd'
asg18
S'Y'
sS'.thisRepN'
p1131
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1132
I14
sS'.thisN'
p1133
I134
sS'.thisIndex'
p1134
I0
sg15
(lp1135
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1136
g16
(lp1137
S'd'
asg18
S'N'
sS'.thisRepN'
p1138
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1139
I0
sS'.thisN'
p1140
I135
sS'.thisIndex'
p1141
I10
sg15
(lp1142
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1143
g16
(lp1144
S'k'
asg18
S'N'
sS'.thisRepN'
p1145
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1146
I1
sS'.thisN'
p1147
I136
sS'.thisIndex'
p1148
I11
sg15
(lp1149
S'd'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I11
sa(dp1150
g16
(lp1151
S'd'
asg18
S'N'
sS'.thisRepN'
p1152
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1153
I2
sS'.thisN'
p1154
I137
sS'.thisIndex'
p1155
I10
sg15
(lp1156
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1157
g16
(lp1158
S'd'
asg18
S'N'
sS'.thisRepN'
p1159
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1160
I3
sS'.thisN'
p1161
I138
sS'.thisIndex'
p1162
I9
sg15
(lp1163
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp1164
g16
(lp1165
S'd'
asg18
S'Y'
sS'.thisRepN'
p1166
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1167
I4
sS'.thisN'
p1168
I139
sS'.thisIndex'
p1169
I2
sg15
(lp1170
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1171
g16
(lp1172
S'd'
asg18
S'Y'
sS'.thisRepN'
p1173
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1174
I5
sS'.thisN'
p1175
I140
sS'.thisIndex'
p1176
I2
sg15
(lp1177
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1178
g16
(lp1179
S'd'
asg18
S'N'
sS'.thisRepN'
p1180
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1181
I6
sS'.thisN'
p1182
I141
sS'.thisIndex'
p1183
I5
sg15
(lp1184
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1185
S'space'
p1186
asg95
I5
sa(dp1187
g16
(lp1188
S'd'
asg18
S'N'
sS'.thisRepN'
p1189
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1190
I7
sS'.thisN'
p1191
I142
sS'.thisIndex'
p1192
I5
sg15
(lp1193
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp1194
S'space'
p1195
asg95
I5
sa(dp1196
g16
(lp1197
S'k'
asg18
S'N'
sS'.thisRepN'
p1198
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1199
I8
sS'.thisN'
p1200
I143
sS'.thisIndex'
p1201
I1
sg15
(lp1202
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1203
g16
(lp1204
S'k'
asg18
S'N'
sS'.thisRepN'
p1205
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1206
I9
sS'.thisN'
p1207
I144
sS'.thisIndex'
p1208
I10
sg15
(lp1209
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1210
g16
(lp1211
S'k'
asg18
S'N'
sS'.thisRepN'
p1212
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1213
I10
sS'.thisN'
p1214
I145
sS'.thisIndex'
p1215
I14
sg15
(lp1216
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I14
sa(dp1217
g16
(lp1218
S'd'
asg18
S'Y'
sS'.thisRepN'
p1219
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1220
I11
sS'.thisN'
p1221
I146
sS'.thisIndex'
p1222
I9
sg15
(lp1223
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1224
S'space'
p1225
asg95
I9
sa(dp1226
g16
(lp1227
S'k'
asg18
S'N'
sS'.thisRepN'
p1228
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1229
I12
sS'.thisN'
p1230
I147
sS'.thisIndex'
p1231
I6
sg15
(lp1232
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1233
S'space'
p1234
asg95
I6
sa(dp1235
g16
(lp1236
S'd'
asg18
S'N'
sS'.thisRepN'
p1237
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1238
I13
sS'.thisN'
p1239
I148
sS'.thisIndex'
p1240
I13
sg15
(lp1241
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1242
g16
(lp1243
S'd'
asg18
S'Y'
sg22
I31
sS'.thisN'
p1244
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1245
I14
sS'.thisRepN'
p1246
I9
sg21
I40
sS'.thisIndex'
p1247
I7
sg23
I23
sg15
(lp1248
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1249
S'space'
p1250
asg95
I7
sa(dp1251
g16
(lp1252
S'd'
asg95
I11
sS'.thisRepN'
p1253
I10
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1254
I0
sS'.thisN'
p1255
I150
sS'.thisIndex'
p1256
I11
sg15
(lp1257
S'd'
asg17
S'Y'
sg14
I4
sa(dp1258
g16
(lp1259
S'k'
asg95
I5
sS'.thisRepN'
p1260
I10
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1261
I1
sS'.thisN'
p1262
I151
sS'.thisIndex'
p1263
I5
sg15
(lp1264
S'k'
asg17
S'Y'
sg14
I4
sa(dp1265
g16
(lp1266
S'd'
asg18
S'N'
sS'.thisRepN'
p1267
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1268
I2
sS'.thisN'
p1269
I152
sS'.thisIndex'
p1270
I13
sg15
(lp1271
S'k'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
Nsg95
I13
sa(dp1272
g16
(lp1273
S'k'
asg18
S'Y'
sS'.thisRepN'
p1274
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1275
I3
sS'.thisN'
p1276
I153
sS'.thisIndex'
p1277
I12
sg15
(lp1278
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1279
S'space'
p1280
asg95
I12
sa(dp1281
g16
(lp1282
S'd'
asg18
S'Y'
sS'.thisRepN'
p1283
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1284
I4
sS'.thisN'
p1285
I154
sS'.thisIndex'
p1286
I2
sg15
(lp1287
S'k'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1288
g16
(lp1289
S'd'
asg18
S'N'
sS'.thisRepN'
p1290
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1291
I5
sS'.thisN'
p1292
I155
sS'.thisIndex'
p1293
I6
sg15
(lp1294
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1295
g16
(lp1296
S'k'
asg18
S'Y'
sS'.thisRepN'
p1297
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1298
I6
sS'.thisN'
p1299
I156
sS'.thisIndex'
p1300
I3
sg15
(lp1301
S'd'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
(lp1302
S'space'
p1303
asg95
I3
sa(dp1304
g16
(lp1305
S'k'
asg18
S'Y'
sS'.thisRepN'
p1306
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1307
I7
sS'.thisN'
p1308
I157
sS'.thisIndex'
p1309
I1
sg15
(lp1310
S'd'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
Nsg95
I1
sa(dp1311
g16
(lp1312
S'k'
asg18
S'Y'
sS'.thisRepN'
p1313
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1314
I8
sS'.thisN'
p1315
I158
sS'.thisIndex'
p1316
I10
sg15
(lp1317
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1318
g16
(lp1319
S'k'
asg18
S'N'
sS'.thisRepN'
p1320
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1321
I9
sS'.thisN'
p1322
I159
sS'.thisIndex'
p1323
I2
sg15
(lp1324
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1325
g16
(lp1326
S'd'
asg18
S'Y'
sS'.thisRepN'
p1327
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1328
I10
sS'.thisN'
p1329
I160
sS'.thisIndex'
p1330
I0
sg15
(lp1331
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1332
S'space'
p1333
asg95
I0
sa(dp1334
g16
(lp1335
S'd'
asg18
S'N'
sS'.thisRepN'
p1336
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1337
I11
sS'.thisN'
p1338
I161
sS'.thisIndex'
p1339
I12
sg15
(lp1340
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1341
g16
(lp1342
S'k'
asg18
S'Y'
sS'.thisRepN'
p1343
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1344
I12
sS'.thisN'
p1345
I162
sS'.thisIndex'
p1346
I0
sg15
(lp1347
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1348
S'space'
p1349
asg95
I0
sa(dp1350
g16
(lp1351
S'd'
asg18
S'Y'
sS'.thisRepN'
p1352
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1353
I13
sS'.thisN'
p1354
I163
sS'.thisIndex'
p1355
I0
sg15
(lp1356
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1357
S'space'
p1358
asg95
I0
sa(dp1359
g16
(lp1360
S'k'
asg18
S'Y'
sS'.thisRepN'
p1361
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1362
I14
sS'.thisN'
p1363
I164
sS'.thisIndex'
p1364
I0
sg15
(lp1365
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1366
S'space'
p1367
asg95
I0
sa(dp1368
g16
(lp1369
S'k'
asg18
S'Y'
sS'.thisRepN'
p1370
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1371
I0
sS'.thisN'
p1372
I165
sS'.thisIndex'
p1373
I0
sg15
(lp1374
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1375
S'space'
p1376
asg95
I0
sa(dp1377
g16
(lp1378
S'k'
asg18
S'N'
sS'.thisRepN'
p1379
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1380
I1
sS'.thisN'
p1381
I166
sS'.thisIndex'
p1382
I4
sg15
(lp1383
S'd'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
Nsg95
I4
sa(dp1384
g16
(lp1385
S'k'
asg18
S'N'
sS'.thisRepN'
p1386
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1387
I2
sS'.thisN'
p1388
I167
sS'.thisIndex'
p1389
I10
sg15
(lp1390
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1391
g16
(lp1392
S'k'
asg18
S'N'
sS'.thisRepN'
p1393
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1394
I3
sS'.thisN'
p1395
I168
sS'.thisIndex'
p1396
I13
sg15
(lp1397
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1398
g16
(lp1399
S'd'
asg18
S'Y'
sS'.thisRepN'
p1400
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1401
I4
sS'.thisN'
p1402
I169
sS'.thisIndex'
p1403
I7
sg15
(lp1404
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1405
S'space'
p1406
asg95
I7
sa(dp1407
g16
(lp1408
S'k'
asg18
S'N'
sS'.thisRepN'
p1409
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1410
I5
sS'.thisN'
p1411
I170
sS'.thisIndex'
p1412
I13
sg15
(lp1413
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1414
g16
(lp1415
S'd'
asg18
S'Y'
sS'.thisRepN'
p1416
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1417
I6
sS'.thisN'
p1418
I171
sS'.thisIndex'
p1419
I7
sg15
(lp1420
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1421
S'space'
p1422
asg95
I7
sa(dp1423
g16
(lp1424
S'd'
asg18
S'Y'
sS'.thisRepN'
p1425
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1426
I7
sS'.thisN'
p1427
I172
sS'.thisIndex'
p1428
I8
sg15
(lp1429
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1430
S'space'
p1431
asg95
I8
sa(dp1432
g16
(lp1433
S'd'
asg18
S'N'
sS'.thisRepN'
p1434
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1435
I8
sS'.thisN'
p1436
I173
sS'.thisIndex'
p1437
I3
sg15
(lp1438
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1439
g16
(lp1440
S'k'
asg18
S'Y'
sS'.thisRepN'
p1441
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1442
I9
sS'.thisN'
p1443
I174
sS'.thisIndex'
p1444
I4
sg15
(lp1445
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1446
g16
(lp1447
S'd'
asg18
S'N'
sS'.thisRepN'
p1448
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1449
I10
sS'.thisN'
p1450
I175
sS'.thisIndex'
p1451
I9
sg15
(lp1452
S'k'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
Nsg95
I9
sa(dp1453
g16
(lp1454
S'd'
asg18
S'N'
sS'.thisRepN'
p1455
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1456
I11
sS'.thisN'
p1457
I176
sS'.thisIndex'
p1458
I1
sg15
(lp1459
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1460
g16
(lp1461
S'k'
asg18
S'N'
sS'.thisRepN'
p1462
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1463
I12
sS'.thisN'
p1464
I177
sS'.thisIndex'
p1465
I13
sg15
(lp1466
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1467
g16
(lp1468
S'd'
asg18
S'N'
sS'.thisRepN'
p1469
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1470
I13
sS'.thisN'
p1471
I178
sS'.thisIndex'
p1472
I12
sg15
(lp1473
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1474
g16
(lp1475
S'k'
asg18
S'Y'
sS'.thisRepN'
p1476
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1477
I14
sS'.thisN'
p1478
I179
sS'.thisIndex'
p1479
I4
sg15
(lp1480
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1481
S'space'
p1482
asg95
I4
sa(dp1483
g16
(lp1484
S'd'
asg18
S'Y'
sS'.thisRepN'
p1485
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1486
I0
sS'.thisN'
p1487
I180
sS'.thisIndex'
p1488
I14
sg15
(lp1489
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1490
S'space'
p1491
asg95
I14
sa(dp1492
g16
(lp1493
S'k'
asg18
S'Y'
sS'.thisRepN'
p1494
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1495
I1
sS'.thisN'
p1496
I181
sS'.thisIndex'
p1497
I8
sg15
(lp1498
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1499
g16
(lp1500
S'k'
asg18
S'Y'
sS'.thisRepN'
p1501
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1502
I2
sS'.thisN'
p1503
I182
sS'.thisIndex'
p1504
I0
sg15
(lp1505
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1506
S'space'
p1507
asg95
I0
sa(dp1508
g16
(lp1509
S'd'
asg18
S'N'
sS'.thisRepN'
p1510
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1511
I3
sS'.thisN'
p1512
I183
sS'.thisIndex'
p1513
I0
sg15
(lp1514
S'k'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
Nsg95
I0
sa(dp1515
g16
(lp1516
S'd'
asg18
S'Y'
sS'.thisRepN'
p1517
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1518
I4
sS'.thisN'
p1519
I184
sS'.thisIndex'
p1520
I3
sg15
(lp1521
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1522
S'space'
p1523
asg95
I3
sa(dp1524
g16
(lp1525
S'd'
asg18
S'Y'
sS'.thisRepN'
p1526
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1527
I5
sS'.thisN'
p1528
I185
sS'.thisIndex'
p1529
I1
sg15
(lp1530
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1531
S'k'
asg95
I1
sa(dp1532
g16
(lp1533
S'k'
asg18
S'N'
sS'.thisRepN'
p1534
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1535
I6
sS'.thisN'
p1536
I186
sS'.thisIndex'
p1537
I9
sg15
(lp1538
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1539
g16
(lp1540
S'k'
asg18
S'N'
sS'.thisRepN'
p1541
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1542
I7
sS'.thisN'
p1543
I187
sS'.thisIndex'
p1544
I12
sg15
(lp1545
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1546
g16
(lp1547
S'k'
asg18
S'Y'
sS'.thisRepN'
p1548
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1549
I8
sS'.thisN'
p1550
I188
sS'.thisIndex'
p1551
I6
sg15
(lp1552
S'd'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
(lp1553
S'space'
p1554
asg95
I6
sa(dp1555
g16
(lp1556
S'k'
asg18
S'Y'
sS'.thisRepN'
p1557
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1558
I9
sS'.thisN'
p1559
I189
sS'.thisIndex'
p1560
I7
sg15
(lp1561
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1562
S'space'
p1563
asg95
I7
sa(dp1564
g16
(lp1565
S'k'
asg18
S'N'
sS'.thisRepN'
p1566
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1567
I10
sS'.thisN'
p1568
I190
sS'.thisIndex'
p1569
I5
sg15
(lp1570
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1571
S'space'
p1572
asg95
I5
sa(dp1573
g16
(lp1574
S'd'
asg18
S'N'
sS'.thisRepN'
p1575
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1576
I11
sS'.thisN'
p1577
I191
sS'.thisIndex'
p1578
I10
sg15
(lp1579
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1580
g16
(lp1581
S'd'
asg18
S'Y'
sS'.thisRepN'
p1582
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1583
I12
sS'.thisN'
p1584
I192
sS'.thisIndex'
p1585
I4
sg15
(lp1586
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1587
S'space'
p1588
asg95
I4
sa(dp1589
g16
(lp1590
S'd'
asg18
S'Y'
sS'.thisRepN'
p1591
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1592
I13
sS'.thisN'
p1593
I193
sS'.thisIndex'
p1594
I10
sg15
(lp1595
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1596
S'space'
p1597
asg95
I10
sa(dp1598
g16
(lp1599
S'k'
asg18
S'N'
sS'.thisRepN'
p1600
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1601
I14
sS'.thisN'
p1602
I194
sS'.thisIndex'
p1603
I14
sg15
(lp1604
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I14
sa(dp1605
g16
(lp1606
S'k'
asg18
S'N'
sS'.thisRepN'
p1607
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1608
I0
sS'.thisN'
p1609
I195
sS'.thisIndex'
p1610
I4
sg15
(lp1611
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1612
g16
(lp1613
S'k'
asg18
S'N'
sS'.thisRepN'
p1614
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1615
I1
sS'.thisN'
p1616
I196
sS'.thisIndex'
p1617
I14
sg15
(lp1618
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1619
S'space'
p1620
asg95
I14
sa(dp1621
g16
(lp1622
S'k'
asg18
S'N'
sS'.thisRepN'
p1623
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1624
I2
sS'.thisN'
p1625
I197
sS'.thisIndex'
p1626
I12
sg15
(lp1627
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1628
S'space'
p1629
asg95
I12
sa(dp1630
g16
(lp1631
S'k'
asg18
S'Y'
sS'.thisRepN'
p1632
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1633
I3
sS'.thisN'
p1634
I198
sS'.thisIndex'
p1635
I11
sg15
(lp1636
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1637
S'space'
p1638
asg95
I11
sa(dp1639
g16
(lp1640
S'k'
asg18
S'N'
sg22
I38
sS'.thisN'
p1641
I199
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1642
I4
sS'.thisRepN'
p1643
I13
sg21
I41
sS'.thisIndex'
p1644
I1
sg23
I25
sg15
(lp1645
S'd'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
(lp1646
S'space'
p1647
asg95
I1
sa(dp1648
g16
(lp1649
S'k'
asg95
I11
sS'.thisRepN'
p1650
I13
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1651
I5
sS'.thisN'
p1652
I200
sS'.thisIndex'
p1653
I11
sg15
(lp1654
S'k'
asg17
S'Y'
sg14
I5
sa(dp1655
g16
(lp1656
S'd'
asg95
I4
sS'.thisRepN'
p1657
I13
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1658
I6
sS'.thisN'
p1659
I201
sS'.thisIndex'
p1660
I4
sg15
(lp1661
S'd'
asg17
S'Y'
sg14
I5
sa(dp1662
g16
(lp1663
S'd'
asg18
S'N'
sS'.thisRepN'
p1664
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1665
I7
sS'.thisN'
p1666
I202
sS'.thisIndex'
p1667
I2
sg15
(lp1668
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1669
g16
(lp1670
S'k'
asg18
S'N'
sS'.thisRepN'
p1671
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1672
I8
sS'.thisN'
p1673
I203
sS'.thisIndex'
p1674
I5
sg15
(lp1675
S'd'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp1676
g16
(lp1677
S'd'
asg18
S'N'
sS'.thisRepN'
p1678
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1679
I9
sS'.thisN'
p1680
I204
sS'.thisIndex'
p1681
I10
sg15
(lp1682
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1683
g16
(lp1684
S'k'
asg18
S'N'
sS'.thisRepN'
p1685
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1686
I10
sS'.thisN'
p1687
I205
sS'.thisIndex'
p1688
I11
sg15
(lp1689
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I11
sa(dp1690
g16
(lp1691
S'd'
asg18
S'N'
sS'.thisRepN'
p1692
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1693
I11
sS'.thisN'
p1694
I206
sS'.thisIndex'
p1695
I13
sg15
(lp1696
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1697
S'space'
p1698
asg95
I13
sa(dp1699
g16
(lp1700
S'd'
asg18
S'N'
sS'.thisRepN'
p1701
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1702
I12
sS'.thisN'
p1703
I207
sS'.thisIndex'
p1704
I7
sg15
(lp1705
S'k'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I7
sa(dp1706
g16
(lp1707
S'k'
asg18
S'Y'
sS'.thisRepN'
p1708
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1709
I13
sS'.thisN'
p1710
I208
sS'.thisIndex'
p1711
I0
sg15
(lp1712
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1713
S'space'
p1714
asg95
I0
sa(dp1715
g16
(lp1716
S'd'
asg18
S'Y'
sS'.thisRepN'
p1717
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1718
I14
sS'.thisN'
p1719
I209
sS'.thisIndex'
p1720
I10
sg15
(lp1721
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1722
g16
(lp1723
S'd'
asg18
S'N'
sS'.thisRepN'
p1724
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1725
I0
sS'.thisN'
p1726
I210
sS'.thisIndex'
p1727
I10
sg15
(lp1728
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1729
g16
(lp1730
S'k'
asg18
S'Y'
sS'.thisRepN'
p1731
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1732
I1
sS'.thisN'
p1733
I211
sS'.thisIndex'
p1734
I8
sg15
(lp1735
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1736
g16
(lp1737
S'k'
asg18
S'N'
sS'.thisRepN'
p1738
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1739
I2
sS'.thisN'
p1740
I212
sS'.thisIndex'
p1741
I1
sg15
(lp1742
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1743
g16
(lp1744
S'k'
asg18
S'Y'
sS'.thisRepN'
p1745
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1746
I3
sS'.thisN'
p1747
I213
sS'.thisIndex'
p1748
I6
sg15
(lp1749
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1750
g16
(lp1751
S'd'
asg18
S'N'
sS'.thisRepN'
p1752
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1753
I4
sS'.thisN'
p1754
I214
sS'.thisIndex'
p1755
I2
sg15
(lp1756
S'k'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I2
sa(dp1757
g16
(lp1758
S'd'
asg18
S'N'
sS'.thisRepN'
p1759
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1760
I5
sS'.thisN'
p1761
I215
sS'.thisIndex'
p1762
I2
sg15
(lp1763
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1764
g16
(lp1765
S'k'
asg18
S'Y'
sS'.thisRepN'
p1766
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1767
I6
sS'.thisN'
p1768
I216
sS'.thisIndex'
p1769
I10
sg15
(lp1770
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1771
S'space'
p1772
asg95
I10
sa(dp1773
g16
(lp1774
S'k'
asg18
S'Y'
sS'.thisRepN'
p1775
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1776
I7
sS'.thisN'
p1777
I217
sS'.thisIndex'
p1778
I5
sg15
(lp1779
S'd'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
(lp1780
S'space'
p1781
asg95
I5
sa(dp1782
g16
(lp1783
S'k'
asg18
S'Y'
sS'.thisRepN'
p1784
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1785
I8
sS'.thisN'
p1786
I218
sS'.thisIndex'
p1787
I6
sg15
(lp1788
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1789
S'space'
p1790
asg95
I6
sa(dp1791
g16
(lp1792
S'k'
asg18
S'Y'
sS'.thisRepN'
p1793
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1794
I9
sS'.thisN'
p1795
I219
sS'.thisIndex'
p1796
I14
sg15
(lp1797
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1798
g16
(lp1799
S'k'
asg18
S'N'
sS'.thisRepN'
p1800
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1801
I10
sS'.thisN'
p1802
I220
sS'.thisIndex'
p1803
I9
sg15
(lp1804
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1805
g16
(lp1806
S'd'
asg18
S'Y'
sS'.thisRepN'
p1807
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1808
I11
sS'.thisN'
p1809
I221
sS'.thisIndex'
p1810
I14
sg15
(lp1811
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1812
S'space'
p1813
asg95
I14
sa(dp1814
g16
(lp1815
S'd'
asg18
S'Y'
sS'.thisRepN'
p1816
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1817
I12
sS'.thisN'
p1818
I222
sS'.thisIndex'
p1819
I0
sg15
(lp1820
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1821
S'space'
p1822
asg95
I0
sa(dp1823
g16
(lp1824
S'k'
asg18
S'Y'
sS'.thisRepN'
p1825
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1826
I13
sS'.thisN'
p1827
I223
sS'.thisIndex'
p1828
I2
sg15
(lp1829
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1830
S'space'
p1831
asg95
I2
sa(dp1832
g16
(lp1833
S'd'
asg18
S'N'
sS'.thisRepN'
p1834
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1835
I14
sS'.thisN'
p1836
I224
sS'.thisIndex'
p1837
I14
sg15
(lp1838
S'k'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I14
sa(dp1839
g16
(lp1840
S'd'
asg18
S'Y'
sS'.thisRepN'
p1841
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1842
I0
sS'.thisN'
p1843
I225
sS'.thisIndex'
p1844
I0
sg15
(lp1845
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1846
S'space'
p1847
asg95
I0
sa(dp1848
g16
(lp1849
S'k'
asg18
S'N'
sS'.thisRepN'
p1850
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1851
I1
sS'.thisN'
p1852
I226
sS'.thisIndex'
p1853
I6
sg15
(lp1854
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1855
g16
(lp1856
S'k'
asg18
S'N'
sS'.thisRepN'
p1857
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1858
I2
sS'.thisN'
p1859
I227
sS'.thisIndex'
p1860
I12
sg15
(lp1861
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1862
S'space'
p1863
asg95
I12
sa(dp1864
g16
(lp1865
S'k'
asg18
S'Y'
sS'.thisRepN'
p1866
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1867
I3
sS'.thisN'
p1868
I228
sS'.thisIndex'
p1869
I9
sg15
(lp1870
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1871
g16
(lp1872
S'k'
asg18
S'N'
sS'.thisRepN'
p1873
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1874
I4
sS'.thisN'
p1875
I229
sS'.thisIndex'
p1876
I6
sg15
(lp1877
S'd'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I6
sa(dp1878
g16
(lp1879
S'd'
asg18
S'N'
sS'.thisRepN'
p1880
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1881
I5
sS'.thisN'
p1882
I230
sS'.thisIndex'
p1883
I9
sg15
(lp1884
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1885
g16
(lp1886
S'k'
asg18
S'N'
sS'.thisRepN'
p1887
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1888
I6
sS'.thisN'
p1889
I231
sS'.thisIndex'
p1890
I7
sg15
(lp1891
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1892
g16
(lp1893
S'k'
asg18
S'N'
sS'.thisRepN'
p1894
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1895
I7
sS'.thisN'
p1896
I232
sS'.thisIndex'
p1897
I0
sg15
(lp1898
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1899
S'space'
p1900
asg95
I0
sa(dp1901
g16
(lp1902
S'k'
asg18
S'N'
sS'.thisRepN'
p1903
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1904
I8
sS'.thisN'
p1905
I233
sS'.thisIndex'
p1906
I7
sg15
(lp1907
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1908
S'space'
p1909
asg95
I7
sa(dp1910
g16
(lp1911
S'd'
asg18
S'Y'
sS'.thisRepN'
p1912
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1913
I9
sS'.thisN'
p1914
I234
sS'.thisIndex'
p1915
I10
sg15
(lp1916
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1917
S'space'
p1918
asg95
I10
sa(dp1919
g16
(lp1920
S'k'
asg18
S'Y'
sS'.thisRepN'
p1921
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1922
I10
sS'.thisN'
p1923
I235
sS'.thisIndex'
p1924
I13
sg15
(lp1925
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1926
S'space'
p1927
asg95
I13
sa(dp1928
g16
(lp1929
S'k'
asg18
S'Y'
sS'.thisRepN'
p1930
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1931
I11
sS'.thisN'
p1932
I236
sS'.thisIndex'
p1933
I10
sg15
(lp1934
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1935
S'space'
p1936
asg95
I10
sa(dp1937
g16
(lp1938
S'k'
asg18
S'N'
sS'.thisRepN'
p1939
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1940
I12
sS'.thisN'
p1941
I237
sS'.thisIndex'
p1942
I5
sg15
(lp1943
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1944
g16
(lp1945
S'd'
asg18
S'N'
sS'.thisRepN'
p1946
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1947
I13
sS'.thisN'
p1948
I238
sS'.thisIndex'
p1949
I8
sg15
(lp1950
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1951
g16
(lp1952
S'd'
asg18
S'N'
sS'.thisRepN'
p1953
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1954
I14
sS'.thisN'
p1955
I239
sS'.thisIndex'
p1956
I4
sg15
(lp1957
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1958
S'space'
p1959
asg95
I4
sa(dp1960
g16
(lp1961
S'k'
asg18
S'N'
sS'.thisRepN'
p1962
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1963
I0
sS'.thisN'
p1964
I240
sS'.thisIndex'
p1965
I12
sg15
(lp1966
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1967
S'space'
p1968
asg95
I12
sa(dp1969
g16
(lp1970
S'd'
asg18
S'Y'
sS'.thisRepN'
p1971
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1972
I1
sS'.thisN'
p1973
I241
sS'.thisIndex'
p1974
I13
sg15
(lp1975
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1976
S'space'
p1977
asg95
I13
sa(dp1978
g16
(lp1979
S'd'
asg18
S'N'
sS'.thisRepN'
p1980
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1981
I2
sS'.thisN'
p1982
I242
sS'.thisIndex'
p1983
I2
sg15
(lp1984
S'k'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I2
sa(dp1985
g16
(lp1986
S'k'
asg18
S'Y'
sS'.thisRepN'
p1987
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1988
I3
sS'.thisN'
p1989
I243
sS'.thisIndex'
p1990
I12
sg15
(lp1991
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1992
g16
(lp1993
S'k'
asg18
S'Y'
sS'.thisRepN'
p1994
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1995
I4
sS'.thisN'
p1996
I244
sS'.thisIndex'
p1997
I0
sg15
(lp1998
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1999
g16
(lp2000
S'k'
asg18
S'N'
sS'.thisRepN'
p2001
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2002
I5
sS'.thisN'
p2003
I245
sS'.thisIndex'
p2004
I9
sg15
(lp2005
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp2006
S'space'
p2007
asg95
I9
sa(dp2008
g16
(lp2009
S'k'
asg18
S'Y'
sS'.thisRepN'
p2010
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2011
I6
sS'.thisN'
p2012
I246
sS'.thisIndex'
p2013
I1
sg15
(lp2014
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp2015
S'space'
p2016
asg95
I1
sa(dp2017
g16
(lp2018
S'd'
asg18
S'Y'
sS'.thisRepN'
p2019
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2020
I7
sS'.thisN'
p2021
I247
sS'.thisIndex'
p2022
I4
sg15
(lp2023
S'k'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I4
sa(dp2024
g16
(lp2025
S'k'
asg18
S'N'
sS'.thisRepN'
p2026
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2027
I8
sS'.thisN'
p2028
I248
sS'.thisIndex'
p2029
I4
sg15
(lp2030
S'd'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I4
sa(dp2031
g16
(lp2032
S'd'
asg18
S'Y'
sg22
I33
sS'.thisN'
p2033
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2034
I9
sS'.thisRepN'
p2035
I16
sg21
I41
sS'.thisIndex'
p2036
I4
sg23
I22
sg15
(lp2037
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp2038
S'space'
p2039
asg95
I4
sa(dp2040
g16
(lp2041
S'k'
asg95
I4
sS'.thisRepN'
p2042
I16
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2043
I10
sS'.thisN'
p2044
I250
sS'.thisIndex'
p2045
I4
sg15
(lp2046
S'k'
asg17
S'Y'
sg14
I6
sa(dp2047
g16
(lp2048
S'k'
asg95
I8
sS'.thisRepN'
p2049
I16
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2050
I11
sS'.thisN'
p2051
I251
sS'.thisIndex'
p2052
I8
sg15
(lp2053
S'd'
asg17
S'N'
sg14
I6
sa(dp2054
g16
(lp2055
S'd'
asg18
S'N'
sS'.thisRepN'
p2056
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2057
I12
sS'.thisN'
p2058
I252
sS'.thisIndex'
p2059
I3
sg15
(lp2060
S'k'
asg30
Vf
sg17
S'N'
sg14
I6
sg19
Nsg95
I3
sa(dp2061
g16
(lp2062
S'k'
asg18
S'N'
sS'.thisRepN'
p2063
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2064
I13
sS'.thisN'
p2065
I253
sS'.thisIndex'
p2066
I9
sg15
(lp2067
S'd'
asg30
Vf
sg17
S'N'
sg14
I6
sg19
(lp2068
S'space'
p2069
asg95
I9
sa(dp2070
g16
(lp2071
S'd'
asg18
S'N'
sS'.thisRepN'
p2072
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2073
I14
sS'.thisN'
p2074
I254
sS'.thisIndex'
p2075
I6
sg15
(lp2076
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2077
g16
(lp2078
S'd'
asg18
S'N'
sS'.thisRepN'
p2079
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2080
I0
sS'.thisN'
p2081
I255
sS'.thisIndex'
p2082
I0
sg15
(lp2083
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2084
g16
(lp2085
S'k'
asg18
S'Y'
sS'.thisRepN'
p2086
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2087
I1
sS'.thisN'
p2088
I256
sS'.thisIndex'
p2089
I6
sg15
(lp2090
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2091
S'space'
p2092
asg95
I6
sa(dp2093
g16
(lp2094
S'k'
asg18
S'N'
sS'.thisRepN'
p2095
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2096
I2
sS'.thisN'
p2097
I257
sS'.thisIndex'
p2098
I7
sg15
(lp2099
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2100
g16
(lp2101
S'k'
asg18
S'N'
sS'.thisRepN'
p2102
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2103
I3
sS'.thisN'
p2104
I258
sS'.thisIndex'
p2105
I7
sg15
(lp2106
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2107
S'space'
p2108
asg95
I7
sa(dp2109
g16
(lp2110
S'k'
asg18
S'Y'
sS'.thisRepN'
p2111
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2112
I4
sS'.thisN'
p2113
I259
sS'.thisIndex'
p2114
I11
sg15
(lp2115
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2116
S'space'
p2117
asg95
I11
sa(dp2118
g16
(lp2119
S'd'
asg18
S'N'
sS'.thisRepN'
p2120
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2121
I5
sS'.thisN'
p2122
I260
sS'.thisIndex'
p2123
I12
sg15
(lp2124
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2125
g16
(lp2126
S'k'
asg18
S'N'
sS'.thisRepN'
p2127
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2128
I6
sS'.thisN'
p2129
I261
sS'.thisIndex'
p2130
I7
sg15
(lp2131
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2132
g16
(lp2133
S'k'
asg18
S'N'
sS'.thisRepN'
p2134
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2135
I7
sS'.thisN'
p2136
I262
sS'.thisIndex'
p2137
I12
sg15
(lp2138
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2139
S'd'
asg95
I12
sa(dp2140
g16
(lp2141
S'k'
asg18
S'N'
sS'.thisRepN'
p2142
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2143
I8
sS'.thisN'
p2144
I263
sS'.thisIndex'
p2145
I8
sg15
(lp2146
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2147
S'space'
p2148
asg95
I8
sa(dp2149
g16
(lp2150
S'd'
asg18
S'N'
sS'.thisRepN'
p2151
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2152
I9
sS'.thisN'
p2153
I264
sS'.thisIndex'
p2154
I2
sg15
(lp2155
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2156
g16
(lp2157
S'd'
asg18
S'N'
sS'.thisRepN'
p2158
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2159
I10
sS'.thisN'
p2160
I265
sS'.thisIndex'
p2161
I11
sg15
(lp2162
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2163
g16
(lp2164
S'k'
asg18
S'N'
sS'.thisRepN'
p2165
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2166
I11
sS'.thisN'
p2167
I266
sS'.thisIndex'
p2168
I8
sg15
(lp2169
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2170
S'space'
p2171
asg95
I8
sa(dp2172
g16
(lp2173
S'd'
asg18
S'N'
sS'.thisRepN'
p2174
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2175
I12
sS'.thisN'
p2176
I267
sS'.thisIndex'
p2177
I9
sg15
(lp2178
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2179
S'space'
p2180
asg95
I9
sa(dp2181
g16
(lp2182
S'k'
asg18
S'Y'
sS'.thisRepN'
p2183
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2184
I13
sS'.thisN'
p2185
I268
sS'.thisIndex'
p2186
I4
sg15
(lp2187
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2188
S'space'
p2189
asg95
I4
sa(dp2190
g16
(lp2191
S'd'
asg18
S'Y'
sS'.thisRepN'
p2192
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2193
I14
sS'.thisN'
p2194
I269
sS'.thisIndex'
p2195
I10
sg15
(lp2196
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2197
S'space'
p2198
asg95
I10
sa(dp2199
g16
(lp2200
S'd'
asg18
S'N'
sS'.thisRepN'
p2201
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2202
I0
sS'.thisN'
p2203
I270
sS'.thisIndex'
p2204
I0
sg15
(lp2205
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2206
g16
(lp2207
S'd'
asg18
S'Y'
sS'.thisRepN'
p2208
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2209
I1
sS'.thisN'
p2210
I271
sS'.thisIndex'
p2211
I14
sg15
(lp2212
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2213
S'space'
p2214
asg95
I14
sa(dp2215
g16
(lp2216
S'd'
asg18
S'N'
sS'.thisRepN'
p2217
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2218
I2
sS'.thisN'
p2219
I272
sS'.thisIndex'
p2220
I3
sg15
(lp2221
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2222
g16
(lp2223
S'k'
asg18
S'Y'
sS'.thisRepN'
p2224
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2225
I3
sS'.thisN'
p2226
I273
sS'.thisIndex'
p2227
I0
sg15
(lp2228
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2229
S'space'
p2230
asg95
I0
sa(dp2231
g16
(lp2232
S'd'
asg18
S'N'
sS'.thisRepN'
p2233
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2234
I4
sS'.thisN'
p2235
I274
sS'.thisIndex'
p2236
I10
sg15
(lp2237
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2238
g16
(lp2239
S'd'
asg18
S'N'
sS'.thisRepN'
p2240
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2241
I5
sS'.thisN'
p2242
I275
sS'.thisIndex'
p2243
I7
sg15
(lp2244
S'k'
asg30
Vf
sg17
S'N'
sg14
I6
sg19
Nsg95
I7
sa(dp2245
g16
(lp2246
S'k'
asg18
S'N'
sS'.thisRepN'
p2247
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2248
I6
sS'.thisN'
p2249
I276
sS'.thisIndex'
p2250
I4
sg15
(lp2251
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2252
g16
(lp2253
S'd'
asg18
S'Y'
sS'.thisRepN'
p2254
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2255
I7
sS'.thisN'
p2256
I277
sS'.thisIndex'
p2257
I6
sg15
(lp2258
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2259
g16
(lp2260
S'k'
asg18
S'N'
sS'.thisRepN'
p2261
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2262
I8
sS'.thisN'
p2263
I278
sS'.thisIndex'
p2264
I11
sg15
(lp2265
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2266
g16
(lp2267
S'd'
asg18
S'Y'
sS'.thisRepN'
p2268
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2269
I9
sS'.thisN'
p2270
I279
sS'.thisIndex'
p2271
I13
sg15
(lp2272
S'k'
asg30
Vf
sg17
S'N'
sg14
I6
sg19
(lp2273
S'space'
p2274
asg95
I13
sa(dp2275
g16
(lp2276
S'k'
asg18
S'Y'
sS'.thisRepN'
p2277
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2278
I10
sS'.thisN'
p2279
I280
sS'.thisIndex'
p2280
I1
sg15
(lp2281
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2282
g16
(lp2283
S'k'
asg18
S'N'
sS'.thisRepN'
p2284
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2285
I11
sS'.thisN'
p2286
I281
sS'.thisIndex'
p2287
I7
sg15
(lp2288
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2289
g16
(lp2290
S'k'
asg18
S'Y'
sS'.thisRepN'
p2291
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2292
I12
sS'.thisN'
p2293
I282
sS'.thisIndex'
p2294
I10
sg15
(lp2295
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2296
S'space'
p2297
asg95
I10
sa(dp2298
g16
(lp2299
S'd'
asg18
S'N'
sS'.thisRepN'
p2300
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2301
I13
sS'.thisN'
p2302
I283
sS'.thisIndex'
p2303
I5
sg15
(lp2304
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2305
g16
(lp2306
S'd'
asg18
S'Y'
sS'.thisRepN'
p2307
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2308
I14
sS'.thisN'
p2309
I284
sS'.thisIndex'
p2310
I6
sg15
(lp2311
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2312
g16
(lp2313
S'd'
asg18
S'Y'
sS'.thisRepN'
p2314
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2315
I0
sS'.thisN'
p2316
I285
sS'.thisIndex'
p2317
I6
sg15
(lp2318
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2319
S'space'
p2320
asg95
I6
sa(dp2321
g16
(lp2322
S'k'
asg18
S'Y'
sS'.thisRepN'
p2323
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2324
I1
sS'.thisN'
p2325
I286
sS'.thisIndex'
p2326
I13
sg15
(lp2327
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2328
S'space'
p2329
asg95
I13
sa(dp2330
g16
(lp2331
S'k'
asg18
S'N'
sS'.thisRepN'
p2332
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2333
I2
sS'.thisN'
p2334
I287
sS'.thisIndex'
p2335
I11
sg15
(lp2336
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2337
g16
(lp2338
S'k'
asg18
S'Y'
sS'.thisRepN'
p2339
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2340
I3
sS'.thisN'
p2341
I288
sS'.thisIndex'
p2342
I4
sg15
(lp2343
S'd'
asg30
Vf
sg17
S'N'
sg14
I6
sg19
(lp2344
S'space'
p2345
asg95
I4
sa(dp2346
g16
(lp2347
S'd'
asg18
S'N'
sS'.thisRepN'
p2348
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2349
I4
sS'.thisN'
p2350
I289
sS'.thisIndex'
p2351
I0
sg15
(lp2352
S'k'
asg30
Vf
sg17
S'N'
sg14
I6
sg19
Nsg95
I0
sa(dp2353
g16
(lp2354
S'd'
asg18
S'N'
sS'.thisRepN'
p2355
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2356
I5
sS'.thisN'
p2357
I290
sS'.thisIndex'
p2358
I4
sg15
(lp2359
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2360
g16
(lp2361
S'k'
asg18
S'Y'
sS'.thisRepN'
p2362
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2363
I6
sS'.thisN'
p2364
I291
sS'.thisIndex'
p2365
I13
sg15
(lp2366
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2367
g16
(lp2368
S'k'
asg18
S'Y'
sS'.thisRepN'
p2369
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2370
I7
sS'.thisN'
p2371
I292
sS'.thisIndex'
p2372
I6
sg15
(lp2373
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2374
g16
(lp2375
S'd'
asg18
S'Y'
sS'.thisRepN'
p2376
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2377
I8
sS'.thisN'
p2378
I293
sS'.thisIndex'
p2379
I5
sg15
(lp2380
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2381
S'space'
p2382
asg95
I5
sa(dp2383
g16
(lp2384
S'd'
asg18
S'N'
sS'.thisRepN'
p2385
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2386
I9
sS'.thisN'
p2387
I294
sS'.thisIndex'
p2388
I13
sg15
(lp2389
S'k'
asg30
Vf
sg17
S'N'
sg14
I6
sg19
(lp2390
S'space'
p2391
asg95
I13
sa(dp2392
g16
(lp2393
S'd'
asg18
S'Y'
sS'.thisRepN'
p2394
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2395
I10
sS'.thisN'
p2396
I295
sS'.thisIndex'
p2397
I4
sg15
(lp2398
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2399
S'space'
p2400
asg95
I4
sa(dp2401
g16
(lp2402
S'k'
asg18
S'Y'
sS'.thisRepN'
p2403
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2404
I11
sS'.thisN'
p2405
I296
sS'.thisIndex'
p2406
I4
sg15
(lp2407
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2408
g16
(lp2409
S'k'
asg18
S'N'
sS'.thisRepN'
p2410
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2411
I12
sS'.thisN'
p2412
I297
sS'.thisIndex'
p2413
I3
sg15
(lp2414
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2415
g16
(lp2416
S'k'
asg18
S'Y'
sS'.thisRepN'
p2417
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2418
I13
sS'.thisN'
p2419
I298
sS'.thisIndex'
p2420
I2
sg15
(lp2421
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2422
g16
(lp2423
S'k'
asg18
S'N'
sg22
I34
sS'.thisN'
p2424
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2425
I14
sS'.thisRepN'
p2426
I19
sg21
I42
sS'.thisIndex'
p2427
I14
sg23
I20
sg15
(lp2428
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I14
sa(dp2429
g16
(lp2430
S'd'
asg95
I7
sS'.thisRepN'
p2431
I20
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2432
I0
sS'.thisN'
p2433
I300
sS'.thisIndex'
p2434
I7
sg15
(lp2435
S'd'
asg17
S'Y'
sg14
I7
sa(dp2436
g16
(lp2437
S'd'
asg95
I4
sS'.thisRepN'
p2438
I20
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2439
I1
sS'.thisN'
p2440
I301
sS'.thisIndex'
p2441
I4
sg15
(lp2442
S'd'
asg17
S'Y'
sg14
I7
sa(dp2443
g16
(lp2444
S'k'
asg18
S'Y'
sS'.thisRepN'
p2445
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2446
I2
sS'.thisN'
p2447
I302
sS'.thisIndex'
p2448
I7
sg15
(lp2449
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2450
g16
(lp2451
S'd'
asg18
S'Y'
sS'.thisRepN'
p2452
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2453
I3
sS'.thisN'
p2454
I303
sS'.thisIndex'
p2455
I3
sg15
(lp2456
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2457
S'space'
p2458
asg95
I3
sa(dp2459
g16
(lp2460
S'k'
asg18
S'Y'
sS'.thisRepN'
p2461
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2462
I4
sS'.thisN'
p2463
I304
sS'.thisIndex'
p2464
I2
sg15
(lp2465
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2466
S'k'
asg95
I2
sa(dp2467
g16
(lp2468
S'd'
asg18
S'Y'
sS'.thisRepN'
p2469
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2470
I5
sS'.thisN'
p2471
I305
sS'.thisIndex'
p2472
I7
sg15
(lp2473
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2474
g16
(lp2475
S'k'
asg18
S'N'
sS'.thisRepN'
p2476
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2477
I6
sS'.thisN'
p2478
I306
sS'.thisIndex'
p2479
I13
sg15
(lp2480
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2481
S'space'
p2482
asg95
I13
sa(dp2483
g16
(lp2484
S'd'
asg18
S'N'
sS'.thisRepN'
p2485
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2486
I7
sS'.thisN'
p2487
I307
sS'.thisIndex'
p2488
I2
sg15
(lp2489
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2490
g16
(lp2491
S'd'
asg18
S'N'
sS'.thisRepN'
p2492
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2493
I8
sS'.thisN'
p2494
I308
sS'.thisIndex'
p2495
I8
sg15
(lp2496
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2497
S'space'
p2498
asg95
I8
sa(dp2499
g16
(lp2500
S'd'
asg18
S'N'
sS'.thisRepN'
p2501
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2502
I9
sS'.thisN'
p2503
I309
sS'.thisIndex'
p2504
I0
sg15
(lp2505
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2506
g16
(lp2507
S'k'
asg18
S'Y'
sS'.thisRepN'
p2508
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2509
I10
sS'.thisN'
p2510
I310
sS'.thisIndex'
p2511
I14
sg15
(lp2512
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2513
S'space'
p2514
asg95
I14
sa(dp2515
g16
(lp2516
S'k'
asg18
S'Y'
sS'.thisRepN'
p2517
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2518
I11
sS'.thisN'
p2519
I311
sS'.thisIndex'
p2520
I13
sg15
(lp2521
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2522
S'space'
p2523
asg95
I13
sa(dp2524
g16
(lp2525
S'k'
asg18
S'N'
sS'.thisRepN'
p2526
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2527
I12
sS'.thisN'
p2528
I312
sS'.thisIndex'
p2529
I1
sg15
(lp2530
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2531
g16
(lp2532
S'd'
asg18
S'Y'
sS'.thisRepN'
p2533
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2534
I13
sS'.thisN'
p2535
I313
sS'.thisIndex'
p2536
I4
sg15
(lp2537
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
(lp2538
S'space'
p2539
asg95
I4
sa(dp2540
g16
(lp2541
S'd'
asg18
S'N'
sS'.thisRepN'
p2542
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2543
I14
sS'.thisN'
p2544
I314
sS'.thisIndex'
p2545
I6
sg15
(lp2546
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2547
g16
(lp2548
S'd'
asg18
S'N'
sS'.thisRepN'
p2549
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2550
I0
sS'.thisN'
p2551
I315
sS'.thisIndex'
p2552
I7
sg15
(lp2553
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2554
g16
(lp2555
S'd'
asg18
S'N'
sS'.thisRepN'
p2556
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2557
I1
sS'.thisN'
p2558
I316
sS'.thisIndex'
p2559
I5
sg15
(lp2560
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
Nsg95
I5
sa(dp2561
g16
(lp2562
S'k'
asg18
S'Y'
sS'.thisRepN'
p2563
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2564
I2
sS'.thisN'
p2565
I317
sS'.thisIndex'
p2566
I14
sg15
(lp2567
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2568
g16
(lp2569
S'k'
asg18
S'N'
sS'.thisRepN'
p2570
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2571
I3
sS'.thisN'
p2572
I318
sS'.thisIndex'
p2573
I14
sg15
(lp2574
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2575
g16
(lp2576
S'd'
asg18
S'N'
sS'.thisRepN'
p2577
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2578
I4
sS'.thisN'
p2579
I319
sS'.thisIndex'
p2580
I12
sg15
(lp2581
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2582
g16
(lp2583
S'k'
asg18
S'Y'
sS'.thisRepN'
p2584
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2585
I5
sS'.thisN'
p2586
I320
sS'.thisIndex'
p2587
I14
sg15
(lp2588
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2589
g16
(lp2590
S'd'
asg18
S'Y'
sS'.thisRepN'
p2591
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2592
I6
sS'.thisN'
p2593
I321
sS'.thisIndex'
p2594
I9
sg15
(lp2595
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2596
S'space'
p2597
asg95
I9
sa(dp2598
g16
(lp2599
S'd'
asg18
S'Y'
sS'.thisRepN'
p2600
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2601
I7
sS'.thisN'
p2602
I322
sS'.thisIndex'
p2603
I4
sg15
(lp2604
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2605
g16
(lp2606
S'd'
asg18
S'N'
sS'.thisRepN'
p2607
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2608
I8
sS'.thisN'
p2609
I323
sS'.thisIndex'
p2610
I4
sg15
(lp2611
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2612
g16
(lp2613
S'k'
asg18
S'Y'
sS'.thisRepN'
p2614
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2615
I9
sS'.thisN'
p2616
I324
sS'.thisIndex'
p2617
I10
sg15
(lp2618
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2619
S'space'
p2620
asg95
I10
sa(dp2621
g16
(lp2622
S'd'
asg18
S'N'
sS'.thisRepN'
p2623
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2624
I10
sS'.thisN'
p2625
I325
sS'.thisIndex'
p2626
I7
sg15
(lp2627
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2628
g16
(lp2629
S'k'
asg18
S'Y'
sS'.thisRepN'
p2630
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2631
I11
sS'.thisN'
p2632
I326
sS'.thisIndex'
p2633
I7
sg15
(lp2634
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2635
g16
(lp2636
S'k'
asg18
S'N'
sS'.thisRepN'
p2637
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2638
I12
sS'.thisN'
p2639
I327
sS'.thisIndex'
p2640
I11
sg15
(lp2641
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2642
g16
(lp2643
S'd'
asg18
S'N'
sS'.thisRepN'
p2644
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2645
I13
sS'.thisN'
p2646
I328
sS'.thisIndex'
p2647
I6
sg15
(lp2648
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2649
g16
(lp2650
S'k'
asg18
S'N'
sS'.thisRepN'
p2651
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2652
I14
sS'.thisN'
p2653
I329
sS'.thisIndex'
p2654
I4
sg15
(lp2655
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2656
g16
(lp2657
S'k'
asg18
S'N'
sS'.thisRepN'
p2658
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2659
I0
sS'.thisN'
p2660
I330
sS'.thisIndex'
p2661
I13
sg15
(lp2662
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I13
sa(dp2663
g16
(lp2664
S'k'
asg18
S'N'
sS'.thisRepN'
p2665
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2666
I1
sS'.thisN'
p2667
I331
sS'.thisIndex'
p2668
I1
sg15
(lp2669
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2670
g16
(lp2671
S'k'
asg18
S'Y'
sS'.thisRepN'
p2672
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2673
I2
sS'.thisN'
p2674
I332
sS'.thisIndex'
p2675
I7
sg15
(lp2676
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2677
g16
(lp2678
S'd'
asg18
S'Y'
sS'.thisRepN'
p2679
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2680
I3
sS'.thisN'
p2681
I333
sS'.thisIndex'
p2682
I11
sg15
(lp2683
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2684
S'space'
p2685
asg95
I11
sa(dp2686
g16
(lp2687
S'd'
asg18
S'N'
sS'.thisRepN'
p2688
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2689
I4
sS'.thisN'
p2690
I334
sS'.thisIndex'
p2691
I2
sg15
(lp2692
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2693
g16
(lp2694
S'd'
asg18
S'Y'
sS'.thisRepN'
p2695
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2696
I5
sS'.thisN'
p2697
I335
sS'.thisIndex'
p2698
I2
sg15
(lp2699
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
(lp2700
S'space'
p2701
asg95
I2
sa(dp2702
g16
(lp2703
S'd'
asg18
S'Y'
sS'.thisRepN'
p2704
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2705
I6
sS'.thisN'
p2706
I336
sS'.thisIndex'
p2707
I13
sg15
(lp2708
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
Nsg95
I13
sa(dp2709
g16
(lp2710
S'd'
asg18
S'Y'
sS'.thisRepN'
p2711
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2712
I7
sS'.thisN'
p2713
I337
sS'.thisIndex'
p2714
I10
sg15
(lp2715
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2716
S'space'
p2717
asg95
I10
sa(dp2718
g16
(lp2719
S'd'
asg18
S'N'
sS'.thisRepN'
p2720
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2721
I8
sS'.thisN'
p2722
I338
sS'.thisIndex'
p2723
I5
sg15
(lp2724
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
Nsg95
I5
sa(dp2725
g16
(lp2726
S'k'
asg18
S'Y'
sS'.thisRepN'
p2727
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2728
I9
sS'.thisN'
p2729
I339
sS'.thisIndex'
p2730
I10
sg15
(lp2731
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2732
g16
(lp2733
S'k'
asg18
S'Y'
sS'.thisRepN'
p2734
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2735
I10
sS'.thisN'
p2736
I340
sS'.thisIndex'
p2737
I1
sg15
(lp2738
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2739
S'space'
p2740
asg95
I1
sa(dp2741
g16
(lp2742
S'k'
asg18
S'N'
sS'.thisRepN'
p2743
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2744
I11
sS'.thisN'
p2745
I341
sS'.thisIndex'
p2746
I2
sg15
(lp2747
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2748
g16
(lp2749
S'd'
asg18
S'N'
sS'.thisRepN'
p2750
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2751
I12
sS'.thisN'
p2752
I342
sS'.thisIndex'
p2753
I13
sg15
(lp2754
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2755
S'space'
p2756
asg95
I13
sa(dp2757
g16
(lp2758
S'k'
asg18
S'N'
sS'.thisRepN'
p2759
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2760
I13
sS'.thisN'
p2761
I343
sS'.thisIndex'
p2762
I1
sg15
(lp2763
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2764
S'space'
p2765
asg95
I1
sa(dp2766
g16
(lp2767
S'k'
asg18
S'Y'
sS'.thisRepN'
p2768
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2769
I14
sS'.thisN'
p2770
I344
sS'.thisIndex'
p2771
I6
sg15
(lp2772
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2773
g16
(lp2774
S'k'
asg18
S'Y'
sS'.thisRepN'
p2775
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2776
I0
sS'.thisN'
p2777
I345
sS'.thisIndex'
p2778
I3
sg15
(lp2779
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2780
g16
(lp2781
S'k'
asg18
S'N'
sS'.thisRepN'
p2782
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2783
I1
sS'.thisN'
p2784
I346
sS'.thisIndex'
p2785
I12
sg15
(lp2786
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2787
g16
(lp2788
S'd'
asg18
S'Y'
sS'.thisRepN'
p2789
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2790
I2
sS'.thisN'
p2791
I347
sS'.thisIndex'
p2792
I12
sg15
(lp2793
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
(lp2794
S'space'
p2795
asg95
I12
sa(dp2796
g16
(lp2797
S'd'
asg18
S'Y'
sS'.thisRepN'
p2798
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2799
I3
sS'.thisN'
p2800
I348
sS'.thisIndex'
p2801
I13
sg15
(lp2802
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
Nsg95
I13
sa(dp2803
g16
(lp2804
S'd'
asg18
S'N'
sg22
I31
sS'.thisN'
p2805
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2806
I4
sS'.thisRepN'
p2807
I23
sg21
I41
sS'.thisIndex'
p2808
I12
sg23
I24
sg15
(lp2809
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
Nsg95
I12
sa(dp2810
g16
(lp2811
S'd'
asg95
I1
sS'.thisRepN'
p2812
I23
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2813
I5
sS'.thisN'
p2814
I350
sS'.thisIndex'
p2815
I1
sg15
(lp2816
S'd'
asg17
S'Y'
sg14
I8
sa(dp2817
g16
(lp2818
S'k'
asg95
I11
sS'.thisRepN'
p2819
I23
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2820
I6
sS'.thisN'
p2821
I351
sS'.thisIndex'
p2822
I11
sg15
(lp2823
S'k'
asg17
S'Y'
sg14
I8
sa(dp2824
g16
(lp2825
S'd'
asg18
S'Y'
sS'.thisRepN'
p2826
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2827
I7
sS'.thisN'
p2828
I352
sS'.thisIndex'
p2829
I12
sg15
(lp2830
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2831
S'space'
p2832
asg95
I12
sa(dp2833
g16
(lp2834
S'd'
asg18
S'N'
sS'.thisRepN'
p2835
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2836
I8
sS'.thisN'
p2837
I353
sS'.thisIndex'
p2838
I11
sg15
(lp2839
S'k'
asg30
Vf
sg17
S'N'
sg14
I8
sg19
Nsg95
I11
sa(dp2840
g16
(lp2841
S'k'
asg18
S'N'
sS'.thisRepN'
p2842
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2843
I9
sS'.thisN'
p2844
I354
sS'.thisIndex'
p2845
I9
sg15
(lp2846
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2847
g16
(lp2848
S'd'
asg18
S'N'
sS'.thisRepN'
p2849
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2850
I10
sS'.thisN'
p2851
I355
sS'.thisIndex'
p2852
I0
sg15
(lp2853
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2854
g16
(lp2855
S'd'
asg18
S'Y'
sS'.thisRepN'
p2856
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2857
I11
sS'.thisN'
p2858
I356
sS'.thisIndex'
p2859
I8
sg15
(lp2860
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2861
g16
(lp2862
S'k'
asg18
S'Y'
sS'.thisRepN'
p2863
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2864
I12
sS'.thisN'
p2865
I357
sS'.thisIndex'
p2866
I8
sg15
(lp2867
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2868
S'space'
p2869
asg95
I8
sa(dp2870
g16
(lp2871
S'd'
asg18
S'N'
sS'.thisRepN'
p2872
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2873
I13
sS'.thisN'
p2874
I358
sS'.thisIndex'
p2875
I11
sg15
(lp2876
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp2877
g16
(lp2878
S'k'
asg18
S'N'
sS'.thisRepN'
p2879
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2880
I14
sS'.thisN'
p2881
I359
sS'.thisIndex'
p2882
I3
sg15
(lp2883
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp2884
g16
(lp2885
S'k'
asg18
S'Y'
sS'.thisRepN'
p2886
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2887
I0
sS'.thisN'
p2888
I360
sS'.thisIndex'
p2889
I7
sg15
(lp2890
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2891
S'space'
p2892
asg95
I7
sa(dp2893
g16
(lp2894
S'd'
asg18
S'N'
sS'.thisRepN'
p2895
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2896
I1
sS'.thisN'
p2897
I361
sS'.thisIndex'
p2898
I6
sg15
(lp2899
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2900
S'space'
p2901
asg95
I6
sa(dp2902
g16
(lp2903
S'k'
asg18
S'Y'
sS'.thisRepN'
p2904
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2905
I2
sS'.thisN'
p2906
I362
sS'.thisIndex'
p2907
I1
sg15
(lp2908
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2909
S'space'
p2910
asg95
I1
sa(dp2911
g16
(lp2912
S'k'
asg18
S'Y'
sS'.thisRepN'
p2913
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2914
I3
sS'.thisN'
p2915
I363
sS'.thisIndex'
p2916
I2
sg15
(lp2917
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2918
S'space'
p2919
asg95
I2
sa(dp2920
g16
(lp2921
S'k'
asg18
S'Y'
sS'.thisRepN'
p2922
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2923
I4
sS'.thisN'
p2924
I364
sS'.thisIndex'
p2925
I3
sg15
(lp2926
S'd'
asg30
Vf
sg17
S'N'
sg14
I8
sg19
(lp2927
S'space'
p2928
asg95
I3
sa(dp2929
g16
(lp2930
S'd'
asg18
S'Y'
sS'.thisRepN'
p2931
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2932
I5
sS'.thisN'
p2933
I365
sS'.thisIndex'
p2934
I11
sg15
(lp2935
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2936
S'space'
p2937
asg95
I11
sa(dp2938
g16
(lp2939
S'k'
asg18
S'Y'
sS'.thisRepN'
p2940
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2941
I6
sS'.thisN'
p2942
I366
sS'.thisIndex'
p2943
I6
sg15
(lp2944
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2945
g16
(lp2946
S'k'
asg18
S'Y'
sS'.thisRepN'
p2947
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2948
I7
sS'.thisN'
p2949
I367
sS'.thisIndex'
p2950
I14
sg15
(lp2951
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2952
S'space'
p2953
asg95
I14
sa(dp2954
g16
(lp2955
S'd'
asg18
S'Y'
sS'.thisRepN'
p2956
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2957
I8
sS'.thisN'
p2958
I368
sS'.thisIndex'
p2959
I5
sg15
(lp2960
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2961
S'space'
p2962
asg95
I5
sa(dp2963
g16
(lp2964
S'k'
asg18
S'Y'
sS'.thisRepN'
p2965
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2966
I9
sS'.thisN'
p2967
I369
sS'.thisIndex'
p2968
I8
sg15
(lp2969
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2970
g16
(lp2971
S'k'
asg18
S'N'
sS'.thisRepN'
p2972
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2973
I10
sS'.thisN'
p2974
I370
sS'.thisIndex'
p2975
I12
sg15
(lp2976
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp2977
g16
(lp2978
S'd'
asg18
S'N'
sS'.thisRepN'
p2979
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2980
I11
sS'.thisN'
p2981
I371
sS'.thisIndex'
p2982
I5
sg15
(lp2983
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2984
g16
(lp2985
S'd'
asg18
S'N'
sS'.thisRepN'
p2986
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2987
I12
sS'.thisN'
p2988
I372
sS'.thisIndex'
p2989
I7
sg15
(lp2990
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2991
g16
(lp2992
S'k'
asg18
S'N'
sS'.thisRepN'
p2993
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2994
I13
sS'.thisN'
p2995
I373
sS'.thisIndex'
p2996
I13
sg15
(lp2997
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2998
S'space'
p2999
asg95
I13
sa(dp3000
g16
(lp3001
S'd'
asg18
S'N'
sS'.thisRepN'
p3002
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3003
I14
sS'.thisN'
p3004
I374
sS'.thisIndex'
p3005
I10
sg15
(lp3006
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3007
S'space'
p3008
asg95
I10
sa(dp3009
g16
(lp3010
S'd'
asg18
S'Y'
sS'.thisRepN'
p3011
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3012
I0
sS'.thisN'
p3013
I375
sS'.thisIndex'
p3014
I9
sg15
(lp3015
S'k'
asg30
Vf
sg17
S'N'
sg14
I8
sg19
Nsg95
I9
sa(dp3016
g16
(lp3017
S'k'
asg18
S'N'
sS'.thisRepN'
p3018
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3019
I1
sS'.thisN'
p3020
I376
sS'.thisIndex'
p3021
I3
sg15
(lp3022
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3023
g16
(lp3024
S'k'
asg18
S'N'
sS'.thisRepN'
p3025
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3026
I2
sS'.thisN'
p3027
I377
sS'.thisIndex'
p3028
I11
sg15
(lp3029
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp3030
g16
(lp3031
S'd'
asg18
S'Y'
sS'.thisRepN'
p3032
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3033
I3
sS'.thisN'
p3034
I378
sS'.thisIndex'
p3035
I1
sg15
(lp3036
S'k'
asg30
Vf
sg17
S'N'
sg14
I8
sg19
(lp3037
S'space'
p3038
asg95
I1
sa(dp3039
g16
(lp3040
S'd'
asg18
S'N'
sS'.thisRepN'
p3041
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3042
I4
sS'.thisN'
p3043
I379
sS'.thisIndex'
p3044
I4
sg15
(lp3045
S'k'
asg30
Vf
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp3046
g16
(lp3047
S'k'
asg18
S'Y'
sS'.thisRepN'
p3048
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3049
I5
sS'.thisN'
p3050
I380
sS'.thisIndex'
p3051
I14
sg15
(lp3052
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3053
S'space'
p3054
asg95
I14
sa(dp3055
g16
(lp3056
S'd'
asg18
S'Y'
sS'.thisRepN'
p3057
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3058
I6
sS'.thisN'
p3059
I381
sS'.thisIndex'
p3060
I2
sg15
(lp3061
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3062
g16
(lp3063
S'd'
asg18
S'Y'
sS'.thisRepN'
p3064
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3065
I7
sS'.thisN'
p3066
I382
sS'.thisIndex'
p3067
I11
sg15
(lp3068
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3069
S'space'
p3070
asg95
I11
sa(dp3071
g16
(lp3072
S'd'
asg18
S'Y'
sS'.thisRepN'
p3073
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3074
I8
sS'.thisN'
p3075
I383
sS'.thisIndex'
p3076
I8
sg15
(lp3077
S'k'
asg30
Vf
sg17
S'N'
sg14
I8
sg19
Nsg95
I8
sa(dp3078
g16
(lp3079
S'd'
asg18
S'N'
sS'.thisRepN'
p3080
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3081
I9
sS'.thisN'
p3082
I384
sS'.thisIndex'
p3083
I12
sg15
(lp3084
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp3085
g16
(lp3086
S'k'
asg18
S'N'
sS'.thisRepN'
p3087
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3088
I10
sS'.thisN'
p3089
I385
sS'.thisIndex'
p3090
I11
sg15
(lp3091
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp3092
g16
(lp3093
S'k'
asg18
S'N'
sS'.thisRepN'
p3094
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3095
I11
sS'.thisN'
p3096
I386
sS'.thisIndex'
p3097
I8
sg15
(lp3098
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3099
g16
(lp3100
S'k'
asg18
S'N'
sS'.thisRepN'
p3101
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3102
I12
sS'.thisN'
p3103
I387
sS'.thisIndex'
p3104
I5
sg15
(lp3105
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3106
S'space'
p3107
asg95
I5
sa(dp3108
g16
(lp3109
S'k'
asg18
S'N'
sS'.thisRepN'
p3110
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3111
I13
sS'.thisN'
p3112
I388
sS'.thisIndex'
p3113
I8
sg15
(lp3114
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3115
g16
(lp3116
S'd'
asg18
S'Y'
sS'.thisRepN'
p3117
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3118
I14
sS'.thisN'
p3119
I389
sS'.thisIndex'
p3120
I13
sg15
(lp3121
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp3122
g16
(lp3123
S'd'
asg18
S'N'
sS'.thisRepN'
p3124
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3125
I0
sS'.thisN'
p3126
I390
sS'.thisIndex'
p3127
I5
sg15
(lp3128
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3129
g16
(lp3130
S'd'
asg18
S'Y'
sS'.thisRepN'
p3131
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3132
I1
sS'.thisN'
p3133
I391
sS'.thisIndex'
p3134
I11
sg15
(lp3135
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp3136
g16
(lp3137
S'd'
asg18
S'Y'
sS'.thisRepN'
p3138
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3139
I2
sS'.thisN'
p3140
I392
sS'.thisIndex'
p3141
I1
sg15
(lp3142
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3143
S'space'
p3144
asg95
I1
sa(dp3145
g16
(lp3146
S'd'
asg18
S'N'
sS'.thisRepN'
p3147
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3148
I3
sS'.thisN'
p3149
I393
sS'.thisIndex'
p3150
I14
sg15
(lp3151
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I14
sa(dp3152
g16
(lp3153
S'k'
asg18
S'Y'
sS'.thisRepN'
p3154
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3155
I4
sS'.thisN'
p3156
I394
sS'.thisIndex'
p3157
I6
sg15
(lp3158
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3159
g16
(lp3160
S'k'
asg18
S'N'
sS'.thisRepN'
p3161
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3162
I5
sS'.thisN'
p3163
I395
sS'.thisIndex'
p3164
I13
sg15
(lp3165
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp3166
g16
(lp3167
S'd'
asg18
S'N'
sS'.thisRepN'
p3168
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3169
I6
sS'.thisN'
p3170
I396
sS'.thisIndex'
p3171
I6
sg15
(lp3172
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3173
g16
(lp3174
S'k'
asg18
S'Y'
sS'.thisRepN'
p3175
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3176
I7
sS'.thisN'
p3177
I397
sS'.thisIndex'
p3178
I8
sg15
(lp3179
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3180
S'space'
p3181
asg95
I8
sa(dp3182
g16
(lp3183
S'd'
asg18
S'Y'
sS'.thisRepN'
p3184
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3185
I8
sS'.thisN'
p3186
I398
sS'.thisIndex'
p3187
I6
sg15
(lp3188
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3189
S'space'
p3190
asg95
I6
sa(dp3191
g16
(lp3192
S'k'
asg18
S'N'
sg22
I35
sS'.thisN'
p3193
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3194
I9
sS'.thisRepN'
p3195
I26
sg21
I43
sS'.thisIndex'
p3196
I4
sg23
I24
sg15
(lp3197
S'd'
asg30
Vf
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp3198
g16
(lp3199
S'k'
asg95
I1
sS'.thisRepN'
p3200
I26
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3201
I10
sS'.thisN'
p3202
I400
sS'.thisIndex'
p3203
I1
sg15
(lp3204
S'k'
asg17
S'Y'
sg14
I9
sa(dp3205
g16
(lp3206
S'd'
asg95
I4
sS'.thisRepN'
p3207
I26
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3208
I11
sS'.thisN'
p3209
I401
sS'.thisIndex'
p3210
I4
sg15
(lp3211
S'd'
asg17
S'Y'
sg14
I9
sa(dp3212
g16
(lp3213
S'd'
asg18
S'N'
sS'.thisRepN'
p3214
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3215
I12
sS'.thisN'
p3216
I402
sS'.thisIndex'
p3217
I2
sg15
(lp3218
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3219
g16
(lp3220
S'k'
asg18
S'Y'
sS'.thisRepN'
p3221
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3222
I13
sS'.thisN'
p3223
I403
sS'.thisIndex'
p3224
I10
sg15
(lp3225
S'd'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
(lp3226
S'space'
p3227
asg95
I10
sa(dp3228
g16
(lp3229
S'k'
asg18
S'Y'
sS'.thisRepN'
p3230
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3231
I14
sS'.thisN'
p3232
I404
sS'.thisIndex'
p3233
I14
sg15
(lp3234
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3235
S'space'
p3236
asg95
I14
sa(dp3237
g16
(lp3238
S'k'
asg18
S'Y'
sS'.thisRepN'
p3239
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3240
I0
sS'.thisN'
p3241
I405
sS'.thisIndex'
p3242
I14
sg15
(lp3243
S'd'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
(lp3244
S'space'
p3245
asg95
I14
sa(dp3246
g16
(lp3247
S'd'
asg18
S'Y'
sS'.thisRepN'
p3248
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3249
I1
sS'.thisN'
p3250
I406
sS'.thisIndex'
p3251
I10
sg15
(lp3252
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3253
S'space'
p3254
asg95
I10
sa(dp3255
g16
(lp3256
S'd'
asg18
S'Y'
sS'.thisRepN'
p3257
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3258
I2
sS'.thisN'
p3259
I407
sS'.thisIndex'
p3260
I9
sg15
(lp3261
S'k'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
(lp3262
S'space'
p3263
asg95
I9
sa(dp3264
g16
(lp3265
S'k'
asg18
S'N'
sS'.thisRepN'
p3266
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3267
I3
sS'.thisN'
p3268
I408
sS'.thisIndex'
p3269
I3
sg15
(lp3270
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3271
g16
(lp3272
S'k'
asg18
S'Y'
sS'.thisRepN'
p3273
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3274
I4
sS'.thisN'
p3275
I409
sS'.thisIndex'
p3276
I10
sg15
(lp3277
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3278
S'space'
p3279
asg95
I10
sa(dp3280
g16
(lp3281
S'k'
asg18
S'Y'
sS'.thisRepN'
p3282
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3283
I5
sS'.thisN'
p3284
I410
sS'.thisIndex'
p3285
I6
sg15
(lp3286
S'd'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
(lp3287
S'space'
p3288
asg95
I6
sa(dp3289
g16
(lp3290
S'k'
asg18
S'Y'
sS'.thisRepN'
p3291
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3292
I6
sS'.thisN'
p3293
I411
sS'.thisIndex'
p3294
I1
sg15
(lp3295
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3296
g16
(lp3297
S'k'
asg18
S'Y'
sS'.thisRepN'
p3298
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3299
I7
sS'.thisN'
p3300
I412
sS'.thisIndex'
p3301
I3
sg15
(lp3302
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3303
S'k'
asg95
I3
sa(dp3304
g16
(lp3305
S'd'
asg18
S'N'
sS'.thisRepN'
p3306
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3307
I8
sS'.thisN'
p3308
I413
sS'.thisIndex'
p3309
I3
sg15
(lp3310
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3311
S'space'
p3312
asg95
I3
sa(dp3313
g16
(lp3314
S'k'
asg18
S'N'
sS'.thisRepN'
p3315
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3316
I9
sS'.thisN'
p3317
I414
sS'.thisIndex'
p3318
I3
sg15
(lp3319
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3320
g16
(lp3321
S'd'
asg18
S'N'
sS'.thisRepN'
p3322
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3323
I10
sS'.thisN'
p3324
I415
sS'.thisIndex'
p3325
I11
sg15
(lp3326
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3327
g16
(lp3328
S'k'
asg18
S'N'
sS'.thisRepN'
p3329
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3330
I11
sS'.thisN'
p3331
I416
sS'.thisIndex'
p3332
I0
sg15
(lp3333
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3334
g16
(lp3335
S'd'
asg18
S'N'
sS'.thisRepN'
p3336
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3337
I12
sS'.thisN'
p3338
I417
sS'.thisIndex'
p3339
I5
sg15
(lp3340
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3341
g16
(lp3342
S'd'
asg18
S'Y'
sS'.thisRepN'
p3343
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3344
I13
sS'.thisN'
p3345
I418
sS'.thisIndex'
p3346
I12
sg15
(lp3347
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3348
S'space'
p3349
asg95
I12
sa(dp3350
g16
(lp3351
S'd'
asg18
S'N'
sS'.thisRepN'
p3352
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3353
I14
sS'.thisN'
p3354
I419
sS'.thisIndex'
p3355
I8
sg15
(lp3356
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3357
S'space'
p3358
asg95
I8
sa(dp3359
g16
(lp3360
S'k'
asg18
S'N'
sS'.thisRepN'
p3361
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3362
I0
sS'.thisN'
p3363
I420
sS'.thisIndex'
p3364
I6
sg15
(lp3365
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3366
g16
(lp3367
S'k'
asg18
S'N'
sS'.thisRepN'
p3368
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3369
I1
sS'.thisN'
p3370
I421
sS'.thisIndex'
p3371
I1
sg15
(lp3372
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3373
g16
(lp3374
S'k'
asg18
S'Y'
sS'.thisRepN'
p3375
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3376
I2
sS'.thisN'
p3377
I422
sS'.thisIndex'
p3378
I6
sg15
(lp3379
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3380
g16
(lp3381
S'd'
asg18
S'Y'
sS'.thisRepN'
p3382
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3383
I3
sS'.thisN'
p3384
I423
sS'.thisIndex'
p3385
I0
sg15
(lp3386
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3387
S'space'
p3388
asg95
I0
sa(dp3389
g16
(lp3390
S'd'
asg18
S'Y'
sS'.thisRepN'
p3391
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3392
I4
sS'.thisN'
p3393
I424
sS'.thisIndex'
p3394
I9
sg15
(lp3395
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3396
S'space'
p3397
asg95
I9
sa(dp3398
g16
(lp3399
S'k'
asg18
S'N'
sS'.thisRepN'
p3400
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3401
I5
sS'.thisN'
p3402
I425
sS'.thisIndex'
p3403
I3
sg15
(lp3404
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3405
g16
(lp3406
S'd'
asg18
S'Y'
sS'.thisRepN'
p3407
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3408
I6
sS'.thisN'
p3409
I426
sS'.thisIndex'
p3410
I11
sg15
(lp3411
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3412
S'space'
p3413
asg95
I11
sa(dp3414
g16
(lp3415
S'd'
asg18
S'Y'
sS'.thisRepN'
p3416
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3417
I7
sS'.thisN'
p3418
I427
sS'.thisIndex'
p3419
I9
sg15
(lp3420
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3421
S'space'
p3422
asg95
I9
sa(dp3423
g16
(lp3424
S'd'
asg18
S'N'
sS'.thisRepN'
p3425
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3426
I8
sS'.thisN'
p3427
I428
sS'.thisIndex'
p3428
I4
sg15
(lp3429
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3430
g16
(lp3431
S'k'
asg18
S'Y'
sS'.thisRepN'
p3432
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3433
I9
sS'.thisN'
p3434
I429
sS'.thisIndex'
p3435
I13
sg15
(lp3436
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3437
S'space'
p3438
asg95
I13
sa(dp3439
g16
(lp3440
S'd'
asg18
S'Y'
sS'.thisRepN'
p3441
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3442
I10
sS'.thisN'
p3443
I430
sS'.thisIndex'
p3444
I7
sg15
(lp3445
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3446
S'space'
p3447
asg95
I7
sa(dp3448
g16
(lp3449
S'k'
asg18
S'Y'
sS'.thisRepN'
p3450
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3451
I11
sS'.thisN'
p3452
I431
sS'.thisIndex'
p3453
I3
sg15
(lp3454
S'd'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
(lp3455
S'space'
p3456
asg95
I3
sa(dp3457
g16
(lp3458
S'k'
asg18
S'N'
sS'.thisRepN'
p3459
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3460
I12
sS'.thisN'
p3461
I432
sS'.thisIndex'
p3462
I8
sg15
(lp3463
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3464
g16
(lp3465
S'd'
asg18
S'N'
sS'.thisRepN'
p3466
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3467
I13
sS'.thisN'
p3468
I433
sS'.thisIndex'
p3469
I14
sg15
(lp3470
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3471
g16
(lp3472
S'd'
asg18
S'N'
sS'.thisRepN'
p3473
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3474
I14
sS'.thisN'
p3475
I434
sS'.thisIndex'
p3476
I3
sg15
(lp3477
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3478
g16
(lp3479
S'd'
asg18
S'N'
sS'.thisRepN'
p3480
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3481
I0
sS'.thisN'
p3482
I435
sS'.thisIndex'
p3483
I14
sg15
(lp3484
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3485
S'space'
p3486
asg95
I14
sa(dp3487
g16
(lp3488
S'd'
asg18
S'N'
sS'.thisRepN'
p3489
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3490
I1
sS'.thisN'
p3491
I436
sS'.thisIndex'
p3492
I11
sg15
(lp3493
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3494
g16
(lp3495
S'k'
asg18
S'N'
sS'.thisRepN'
p3496
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3497
I2
sS'.thisN'
p3498
I437
sS'.thisIndex'
p3499
I5
sg15
(lp3500
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3501
g16
(lp3502
S'd'
asg18
S'Y'
sS'.thisRepN'
p3503
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3504
I3
sS'.thisN'
p3505
I438
sS'.thisIndex'
p3506
I14
sg15
(lp3507
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3508
S'space'
p3509
asg95
I14
sa(dp3510
g16
(lp3511
S'k'
asg18
S'Y'
sS'.thisRepN'
p3512
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3513
I4
sS'.thisN'
p3514
I439
sS'.thisIndex'
p3515
I2
sg15
(lp3516
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3517
g16
(lp3518
S'k'
asg18
S'Y'
sS'.thisRepN'
p3519
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3520
I5
sS'.thisN'
p3521
I440
sS'.thisIndex'
p3522
I0
sg15
(lp3523
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3524
S'space'
p3525
asg95
I0
sa(dp3526
g16
(lp3527
S'd'
asg18
S'N'
sS'.thisRepN'
p3528
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3529
I6
sS'.thisN'
p3530
I441
sS'.thisIndex'
p3531
I4
sg15
(lp3532
S'k'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
Nsg95
I4
sa(dp3533
g16
(lp3534
S'k'
asg18
S'N'
sS'.thisRepN'
p3535
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3536
I7
sS'.thisN'
p3537
I442
sS'.thisIndex'
p3538
I0
sg15
(lp3539
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3540
g16
(lp3541
S'k'
asg18
S'Y'
sS'.thisRepN'
p3542
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3543
I8
sS'.thisN'
p3544
I443
sS'.thisIndex'
p3545
I10
sg15
(lp3546
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3547
S'space'
p3548
asg95
I10
sa(dp3549
g16
(lp3550
S'd'
asg18
S'Y'
sS'.thisRepN'
p3551
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3552
I9
sS'.thisN'
p3553
I444
sS'.thisIndex'
p3554
I1
sg15
(lp3555
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3556
S'space'
p3557
asg95
I1
sa(dp3558
g16
(lp3559
S'd'
asg18
S'N'
sS'.thisRepN'
p3560
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3561
I10
sS'.thisN'
p3562
I445
sS'.thisIndex'
p3563
I1
sg15
(lp3564
S'k'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
Nsg95
I1
sa(dp3565
g16
(lp3566
S'k'
asg18
S'Y'
sS'.thisRepN'
p3567
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3568
I11
sS'.thisN'
p3569
I446
sS'.thisIndex'
p3570
I8
sg15
(lp3571
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3572
S'space'
p3573
asg95
I8
sa(dp3574
g16
(lp3575
S'd'
asg18
S'Y'
sS'.thisRepN'
p3576
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3577
I12
sS'.thisN'
p3578
I447
sS'.thisIndex'
p3579
I5
sg15
(lp3580
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3581
S'space'
p3582
asg95
I5
sa(dp3583
g16
(lp3584
S'd'
asg18
S'N'
sS'.thisRepN'
p3585
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3586
I13
sS'.thisN'
p3587
I448
sS'.thisIndex'
p3588
I10
sg15
(lp3589
S'k'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
Nsg95
I10
sa(dp3590
g16
(lp3591
S'k'
asg18
S'N'
sg22
I41
sS'.thisN'
p3592
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3593
I14
sS'.thisRepN'
p3594
I29
sg21
I42
sS'.thisIndex'
p3595
I3
sg23
I25
sg15
(lp3596
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3597
g16
(lp3598
S'k'
asg95
I5
sS'.thisRepN'
p3599
I30
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3600
I0
sS'.thisN'
p3601
I450
sS'.thisIndex'
p3602
I5
sg15
(lp3603
S'k'
asg17
S'Y'
sg14
I10
sa(dp3604
g16
(lp3605
S'd'
asg95
I7
sS'.thisRepN'
p3606
I30
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3607
I1
sS'.thisN'
p3608
I451
sS'.thisIndex'
p3609
I7
sg15
(lp3610
S'd'
asg17
S'Y'
sg14
I10
sa(dp3611
g16
(lp3612
S'd'
asg18
S'N'
sS'.thisRepN'
p3613
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3614
I2
sS'.thisN'
p3615
I452
sS'.thisIndex'
p3616
I5
sg15
(lp3617
S'k'
asg30
Vf
sg17
S'N'
sg14
I10
sg19
Nsg95
I5
sa(dp3618
g16
(lp3619
S'k'
asg18
S'N'
sS'.thisRepN'
p3620
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3621
I3
sS'.thisN'
p3622
I453
sS'.thisIndex'
p3623
I9
sg15
(lp3624
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3625
g16
(lp3626
S'd'
asg18
S'Y'
sS'.thisRepN'
p3627
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3628
I4
sS'.thisN'
p3629
I454
sS'.thisIndex'
p3630
I8
sg15
(lp3631
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3632
S'space'
p3633
asg95
I8
sa(dp3634
g16
(lp3635
S'k'
asg18
S'Y'
sS'.thisRepN'
p3636
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3637
I5
sS'.thisN'
p3638
I455
sS'.thisIndex'
p3639
I5
sg15
(lp3640
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3641
S'space'
p3642
asg95
I5
sa(dp3643
g16
(lp3644
S'd'
asg18
S'Y'
sS'.thisRepN'
p3645
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3646
I6
sS'.thisN'
p3647
I456
sS'.thisIndex'
p3648
I3
sg15
(lp3649
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3650
S'space'
p3651
asg95
I3
sa(dp3652
g16
(lp3653
S'k'
asg18
S'N'
sS'.thisRepN'
p3654
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3655
I7
sS'.thisN'
p3656
I457
sS'.thisIndex'
p3657
I3
sg15
(lp3658
S'd'
asg30
Vf
sg17
S'N'
sg14
I10
sg19
Nsg95
I3
sa(dp3659
g16
(lp3660
S'k'
asg18
S'Y'
sS'.thisRepN'
p3661
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3662
I8
sS'.thisN'
p3663
I458
sS'.thisIndex'
p3664
I11
sg15
(lp3665
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3666
S'space'
p3667
asg95
I11
sa(dp3668
g16
(lp3669
S'd'
asg18
S'N'
sS'.thisRepN'
p3670
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3671
I9
sS'.thisN'
p3672
I459
sS'.thisIndex'
p3673
I9
sg15
(lp3674
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3675
S'space'
p3676
asg95
I9
sa(dp3677
g16
(lp3678
S'd'
asg18
S'Y'
sS'.thisRepN'
p3679
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3680
I10
sS'.thisN'
p3681
I460
sS'.thisIndex'
p3682
I14
sg15
(lp3683
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3684
S'space'
p3685
asg95
I14
sa(dp3686
g16
(lp3687
S'k'
asg18
S'N'
sS'.thisRepN'
p3688
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3689
I11
sS'.thisN'
p3690
I461
sS'.thisIndex'
p3691
I0
sg15
(lp3692
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3693
S'd'
asg95
I0
sa(dp3694
g16
(lp3695
S'd'
asg18
S'N'
sS'.thisRepN'
p3696
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3697
I12
sS'.thisN'
p3698
I462
sS'.thisIndex'
p3699
I12
sg15
(lp3700
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3701
g16
(lp3702
S'd'
asg18
S'N'
sS'.thisRepN'
p3703
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3704
I13
sS'.thisN'
p3705
I463
sS'.thisIndex'
p3706
I2
sg15
(lp3707
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3708
g16
(lp3709
S'k'
asg18
S'Y'
sS'.thisRepN'
p3710
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3711
I14
sS'.thisN'
p3712
I464
sS'.thisIndex'
p3713
I1
sg15
(lp3714
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3715
S'space'
p3716
asg95
I1
sa(dp3717
g16
(lp3718
S'k'
asg18
S'Y'
sS'.thisRepN'
p3719
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3720
I0
sS'.thisN'
p3721
I465
sS'.thisIndex'
p3722
I7
sg15
(lp3723
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3724
S'space'
p3725
asg95
I7
sa(dp3726
g16
(lp3727
S'k'
asg18
S'Y'
sS'.thisRepN'
p3728
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3729
I1
sS'.thisN'
p3730
I466
sS'.thisIndex'
p3731
I9
sg15
(lp3732
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3733
S'space'
p3734
asg95
I9
sa(dp3735
g16
(lp3736
S'k'
asg18
S'N'
sS'.thisRepN'
p3737
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3738
I2
sS'.thisN'
p3739
I467
sS'.thisIndex'
p3740
I0
sg15
(lp3741
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3742
g16
(lp3743
S'd'
asg18
S'N'
sS'.thisRepN'
p3744
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3745
I3
sS'.thisN'
p3746
I468
sS'.thisIndex'
p3747
I8
sg15
(lp3748
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3749
S'space'
p3750
asg95
I8
sa(dp3751
g16
(lp3752
S'k'
asg18
S'Y'
sS'.thisRepN'
p3753
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3754
I4
sS'.thisN'
p3755
I469
sS'.thisIndex'
p3756
I8
sg15
(lp3757
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3758
S'space'
p3759
asg95
I8
sa(dp3760
g16
(lp3761
S'd'
asg18
S'N'
sS'.thisRepN'
p3762
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3763
I5
sS'.thisN'
p3764
I470
sS'.thisIndex'
p3765
I13
sg15
(lp3766
S'k'
asg30
Vf
sg17
S'N'
sg14
I10
sg19
Nsg95
I13
sa(dp3767
g16
(lp3768
S'd'
asg18
S'N'
sS'.thisRepN'
p3769
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3770
I6
sS'.thisN'
p3771
I471
sS'.thisIndex'
p3772
I11
sg15
(lp3773
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3774
g16
(lp3775
S'k'
asg18
S'Y'
sS'.thisRepN'
p3776
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3777
I7
sS'.thisN'
p3778
I472
sS'.thisIndex'
p3779
I7
sg15
(lp3780
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3781
g16
(lp3782
S'd'
asg18
S'N'
sS'.thisRepN'
p3783
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3784
I8
sS'.thisN'
p3785
I473
sS'.thisIndex'
p3786
I9
sg15
(lp3787
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3788
S'space'
p3789
asg95
I9
sa(dp3790
g16
(lp3791
S'd'
asg18
S'N'
sS'.thisRepN'
p3792
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3793
I9
sS'.thisN'
p3794
I474
sS'.thisIndex'
p3795
I4
sg15
(lp3796
S'k'
asg30
Vf
sg17
S'N'
sg14
I10
sg19
Nsg95
I4
sa(dp3797
g16
(lp3798
S'd'
asg18
S'N'
sS'.thisRepN'
p3799
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3800
I10
sS'.thisN'
p3801
I475
sS'.thisIndex'
p3802
I14
sg15
(lp3803
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3804
g16
(lp3805
S'k'
asg18
S'Y'
sS'.thisRepN'
p3806
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3807
I11
sS'.thisN'
p3808
I476
sS'.thisIndex'
p3809
I12
sg15
(lp3810
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3811
S'space'
p3812
asg95
I12
sa(dp3813
g16
(lp3814
S'k'
asg18
S'N'
sS'.thisRepN'
p3815
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3816
I12
sS'.thisN'
p3817
I477
sS'.thisIndex'
p3818
I7
sg15
(lp3819
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3820
S'space'
p3821
asg95
I7
sa(dp3822
g16
(lp3823
S'd'
asg18
S'N'
sS'.thisRepN'
p3824
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3825
I13
sS'.thisN'
p3826
I478
sS'.thisIndex'
p3827
I10
sg15
(lp3828
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3829
g16
(lp3830
S'k'
asg18
S'N'
sS'.thisRepN'
p3831
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3832
I14
sS'.thisN'
p3833
I479
sS'.thisIndex'
p3834
I11
sg15
(lp3835
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3836
g16
(lp3837
S'k'
asg18
S'N'
sS'.thisRepN'
p3838
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3839
I0
sS'.thisN'
p3840
I480
sS'.thisIndex'
p3841
I7
sg15
(lp3842
S'd'
asg30
Vf
sg17
S'N'
sg14
I10
sg19
(lp3843
S'space'
p3844
asg95
I7
sa(dp3845
g16
(lp3846
S'k'
asg18
S'Y'
sS'.thisRepN'
p3847
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3848
I1
sS'.thisN'
p3849
I481
sS'.thisIndex'
p3850
I14
sg15
(lp3851
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3852
S'space'
p3853
asg95
I14
sa(dp3854
g16
(lp3855
S'd'
asg18
S'N'
sS'.thisRepN'
p3856
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3857
I2
sS'.thisN'
p3858
I482
sS'.thisIndex'
p3859
I13
sg15
(lp3860
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3861
g16
(lp3862
S'k'
asg18
S'Y'
sS'.thisRepN'
p3863
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3864
I3
sS'.thisN'
p3865
I483
sS'.thisIndex'
p3866
I8
sg15
(lp3867
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3868
S'space'
p3869
asg95
I8
sa(dp3870
g16
(lp3871
S'k'
asg18
S'N'
sS'.thisRepN'
p3872
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3873
I4
sS'.thisN'
p3874
I484
sS'.thisIndex'
p3875
I14
sg15
(lp3876
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3877
g16
(lp3878
S'k'
asg18
S'Y'
sS'.thisRepN'
p3879
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3880
I5
sS'.thisN'
p3881
I485
sS'.thisIndex'
p3882
I7
sg15
(lp3883
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3884
g16
(lp3885
S'k'
asg18
S'N'
sS'.thisRepN'
p3886
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3887
I6
sS'.thisN'
p3888
I486
sS'.thisIndex'
p3889
I8
sg15
(lp3890
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3891
S'space'
p3892
asg95
I8
sa(dp3893
g16
(lp3894
S'k'
asg18
S'Y'
sS'.thisRepN'
p3895
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3896
I7
sS'.thisN'
p3897
I487
sS'.thisIndex'
p3898
I9
sg15
(lp3899
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3900
S'space'
p3901
asg95
I9
sa(dp3902
g16
(lp3903
S'd'
asg18
S'N'
sS'.thisRepN'
p3904
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3905
I8
sS'.thisN'
p3906
I488
sS'.thisIndex'
p3907
I13
sg15
(lp3908
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3909
S'space'
p3910
asg95
I13
sa(dp3911
g16
(lp3912
S'k'
asg18
S'Y'
sS'.thisRepN'
p3913
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3914
I9
sS'.thisN'
p3915
I489
sS'.thisIndex'
p3916
I9
sg15
(lp3917
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3918
S'space'
p3919
asg95
I9
sa(dp3920
g16
(lp3921
S'd'
asg18
S'N'
sS'.thisRepN'
p3922
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3923
I10
sS'.thisN'
p3924
I490
sS'.thisIndex'
p3925
I0
sg15
(lp3926
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3927
g16
(lp3928
S'k'
asg18
S'Y'
sS'.thisRepN'
p3929
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3930
I11
sS'.thisN'
p3931
I491
sS'.thisIndex'
p3932
I3
sg15
(lp3933
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3934
S'space'
p3935
asg95
I3
sa(dp3936
g16
(lp3937
S'k'
asg18
S'Y'
sS'.thisRepN'
p3938
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3939
I12
sS'.thisN'
p3940
I492
sS'.thisIndex'
p3941
I8
sg15
(lp3942
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3943
S'space'
p3944
asg95
I8
sa(dp3945
g16
(lp3946
S'd'
asg18
S'Y'
sS'.thisRepN'
p3947
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3948
I13
sS'.thisN'
p3949
I493
sS'.thisIndex'
p3950
I3
sg15
(lp3951
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3952
S'space'
p3953
asg95
I3
sa(dp3954
g16
(lp3955
S'k'
asg18
S'N'
sS'.thisRepN'
p3956
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3957
I14
sS'.thisN'
p3958
I494
sS'.thisIndex'
p3959
I14
sg15
(lp3960
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3961
g16
(lp3962
S'd'
asg18
S'N'
sS'.thisRepN'
p3963
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3964
I0
sS'.thisN'
p3965
I495
sS'.thisIndex'
p3966
I3
sg15
(lp3967
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3968
g16
(lp3969
S'k'
asg18
S'Y'
sS'.thisRepN'
p3970
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3971
I1
sS'.thisN'
p3972
I496
sS'.thisIndex'
p3973
I5
sg15
(lp3974
S'd'
asg30
Vf
sg17
S'N'
sg14
I10
sg19
Nsg95
I5
sa(dp3975
g16
(lp3976
S'k'
asg18
S'N'
sS'.thisRepN'
p3977
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3978
I2
sS'.thisN'
p3979
I497
sS'.thisIndex'
p3980
I11
sg15
(lp3981
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3982
S'space'
p3983
asg95
I11
sa(dp3984
g16
(lp3985
S'k'
asg18
S'N'
sS'.thisRepN'
p3986
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3987
I3
sS'.thisN'
p3988
I498
sS'.thisIndex'
p3989
I2
sg15
(lp3990
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3991
g16
(lp3992
S'd'
asg18
S'Y'
sg22
I36
sS'.thisN'
p3993
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3994
I4
sS'.thisRepN'
p3995
I33
sg21
I44
sS'.thisIndex'
p3996
I13
sg23
I21
sg15
(lp3997
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3998
S'space'
p3999
asg95
I13
sa(dp4000
g16
(lp4001
S'd'
asS'.thisIndex'
p4002
I2
sS'.thisRepN'
p4003
I33
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4004
I5
sS'.thisN'
p4005
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4006
S'd'
asg17
S'N'
sg14
I11
sg95
I2
sa(dp4007
g16
(lp4008
S'k'
asS'.thisIndex'
p4009
I11
sS'.thisRepN'
p4010
I33
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4011
I6
sS'.thisN'
p4012
I501
sg25
S'Y'
sg15
(lp4013
S'd'
asg17
S'Y'
sg14
I11
sg95
I11
sa(dp4014
g16
(lp4015
S'k'
asg18
S'N'
sS'.thisRepN'
p4016
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4017
I7
sS'.thisN'
p4018
I502
sg25
S'Y'
sg15
(lp4019
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4020
I11
sa(dp4021
g16
(lp4022
S'd'
asg18
S'N'
sS'.thisRepN'
p4023
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4024
I8
sS'.thisN'
p4025
I503
sg25
S'Y'
sg15
(lp4026
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4027
S'space'
p4028
asg95
I2
sS'.thisIndex'
p4029
I2
sa(dp4030
g16
(lp4031
S'd'
asg18
S'N'
sS'.thisRepN'
p4032
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4033
I9
sS'.thisN'
p4034
I504
sg25
S'Y'
sg15
(lp4035
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4036
I14
sa(dp4037
g16
(lp4038
S'k'
asg18
S'Y'
sS'.thisRepN'
p4039
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4040
I10
sS'.thisN'
p4041
I505
sg25
S'Y'
sg15
(lp4042
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
(lp4043
S'space'
p4044
asg95
I6
sS'.thisIndex'
p4045
I6
sa(dp4046
g16
(lp4047
S'k'
asg18
S'Y'
sS'.thisRepN'
p4048
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4049
I11
sS'.thisN'
p4050
I506
sg25
S'Y'
sg15
(lp4051
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4052
I11
sa(dp4053
g16
(lp4054
S'd'
asg18
S'N'
sS'.thisRepN'
p4055
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4056
I12
sS'.thisN'
p4057
I507
sg25
S'Y'
sg15
(lp4058
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4059
I3
sa(dp4060
g16
(lp4061
S'k'
asg18
S'Y'
sS'.thisRepN'
p4062
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4063
I13
sS'.thisN'
p4064
I508
sg25
S'Y'
sg15
(lp4065
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4066
I3
sa(dp4067
g16
(lp4068
S'd'
asg18
S'N'
sS'.thisRepN'
p4069
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4070
I14
sS'.thisN'
p4071
I509
sg25
S'Y'
sg15
(lp4072
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4073
I1
sa(dp4074
g16
(lp4075
S'k'
asg18
S'N'
sS'.thisRepN'
p4076
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4077
I0
sS'.thisN'
p4078
I510
sg25
S'Y'
sg15
(lp4079
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4080
I6
sa(dp4081
g16
(lp4082
S'd'
asg18
S'N'
sS'.thisRepN'
p4083
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4084
I1
sS'.thisN'
p4085
I511
sg25
S'Y'
sg15
(lp4086
S'd'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
(lp4087
S'space'
p4088
asg95
I5
sS'.thisIndex'
p4089
I5
sa(dp4090
g16
(lp4091
S'k'
asg18
S'Y'
sS'.thisRepN'
p4092
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4093
I2
sS'.thisN'
p4094
I512
sg25
S'Y'
sg15
(lp4095
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
(lp4096
S'space'
p4097
asg95
I9
sS'.thisIndex'
p4098
I9
sa(dp4099
g16
(lp4100
S'd'
asg18
S'N'
sS'.thisRepN'
p4101
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4102
I3
sS'.thisN'
p4103
I513
sg25
S'Y'
sg15
(lp4104
S'd'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4105
I12
sa(dp4106
g16
(lp4107
S'k'
asg18
S'N'
sS'.thisRepN'
p4108
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4109
I4
sS'.thisN'
p4110
I514
sg25
S'Y'
sg15
(lp4111
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4112
I9
sa(dp4113
g16
(lp4114
S'k'
asg18
S'N'
sS'.thisRepN'
p4115
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4116
I5
sS'.thisN'
p4117
I515
sg25
S'Y'
sg15
(lp4118
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4119
S'space'
p4120
asg95
I6
sS'.thisIndex'
p4121
I6
sa(dp4122
g16
(lp4123
S'k'
asg18
S'Y'
sS'.thisRepN'
p4124
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4125
I6
sS'.thisN'
p4126
I516
sg25
S'Y'
sg15
(lp4127
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4128
I3
sa(dp4129
g16
(lp4130
S'k'
asg18
S'N'
sS'.thisRepN'
p4131
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4132
I7
sS'.thisN'
p4133
I517
sg25
S'Y'
sg15
(lp4134
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4135
I7
sa(dp4136
g16
(lp4137
S'k'
asg18
S'Y'
sS'.thisRepN'
p4138
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4139
I8
sS'.thisN'
p4140
I518
sg25
S'Y'
sg15
(lp4141
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4142
S'space'
p4143
asg95
I1
sS'.thisIndex'
p4144
I1
sa(dp4145
g16
(lp4146
S'k'
asg18
S'N'
sS'.thisRepN'
p4147
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4148
I9
sS'.thisN'
p4149
I519
sg25
S'Y'
sg15
(lp4150
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4151
I12
sa(dp4152
g16
(lp4153
S'd'
asg18
S'N'
sS'.thisRepN'
p4154
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4155
I10
sS'.thisN'
p4156
I520
sg25
S'Y'
sg15
(lp4157
S'd'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4158
I2
sa(dp4159
g16
(lp4160
S'd'
asg18
S'N'
sS'.thisRepN'
p4161
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4162
I11
sS'.thisN'
p4163
I521
sg25
S'Y'
sg15
(lp4164
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4165
I8
sa(dp4166
g16
(lp4167
S'k'
asg18
S'Y'
sS'.thisRepN'
p4168
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4169
I12
sS'.thisN'
p4170
I522
sg25
S'Y'
sg15
(lp4171
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
(lp4172
S'space'
p4173
asg95
I5
sS'.thisIndex'
p4174
I5
sa(dp4175
g16
(lp4176
S'd'
asg18
S'Y'
sS'.thisRepN'
p4177
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4178
I13
sS'.thisN'
p4179
I523
sg25
S'Y'
sg15
(lp4180
S'd'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4181
I12
sa(dp4182
g16
(lp4183
S'd'
asg18
S'Y'
sS'.thisRepN'
p4184
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4185
I14
sS'.thisN'
p4186
I524
sg25
S'Y'
sg15
(lp4187
S'd'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4188
I5
sa(dp4189
g16
(lp4190
S'k'
asg18
S'N'
sS'.thisRepN'
p4191
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4192
I0
sS'.thisN'
p4193
I525
sg25
S'Y'
sg15
(lp4194
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4195
I10
sa(dp4196
g16
(lp4197
S'd'
asg18
S'N'
sS'.thisRepN'
p4198
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4199
I1
sS'.thisN'
p4200
I526
sg25
S'Y'
sg15
(lp4201
S'd'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4202
I7
sa(dp4203
g16
(lp4204
S'd'
asg18
S'Y'
sS'.thisRepN'
p4205
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4206
I2
sS'.thisN'
p4207
I527
sg25
S'Y'
sg15
(lp4208
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4209
S'space'
p4210
asg95
I12
sS'.thisIndex'
p4211
I12
sa(dp4212
g16
(lp4213
S'k'
asg18
S'N'
sS'.thisRepN'
p4214
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4215
I3
sS'.thisN'
p4216
I528
sg25
S'Y'
sg15
(lp4217
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4218
I1
sa(dp4219
g16
(lp4220
S'k'
asg18
S'Y'
sS'.thisRepN'
p4221
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4222
I4
sS'.thisN'
p4223
I529
sg25
S'Y'
sg15
(lp4224
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4225
I10
sa(dp4226
g16
(lp4227
S'k'
asg18
S'N'
sS'.thisRepN'
p4228
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4229
I5
sS'.thisN'
p4230
I530
sg25
S'Y'
sg15
(lp4231
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4232
I6
sa(dp4233
g16
(lp4234
S'k'
asg18
S'N'
sS'.thisRepN'
p4235
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4236
I6
sS'.thisN'
p4237
I531
sg25
S'Y'
sg15
(lp4238
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4239
I13
sa(dp4240
g16
(lp4241
S'd'
asg18
S'N'
sS'.thisRepN'
p4242
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4243
I7
sS'.thisN'
p4244
I532
sg25
S'Y'
sg15
(lp4245
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4246
S'space'
p4247
asg95
I9
sS'.thisIndex'
p4248
I9
sa(dp4249
g16
(lp4250
S'k'
asg18
S'N'
sS'.thisRepN'
p4251
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4252
I8
sS'.thisN'
p4253
I533
sg25
S'Y'
sg15
(lp4254
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4255
I7
sa(dp4256
g16
(lp4257
S'd'
asg18
S'Y'
sS'.thisRepN'
p4258
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4259
I9
sS'.thisN'
p4260
I534
sg25
S'Y'
sg15
(lp4261
S'd'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4262
I8
sa(dp4263
g16
(lp4264
S'd'
asg18
S'N'
sS'.thisRepN'
p4265
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4266
I10
sS'.thisN'
p4267
I535
sg25
S'Y'
sg15
(lp4268
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4269
S'space'
p4270
asg95
I12
sS'.thisIndex'
p4271
I12
sa(dp4272
g16
(lp4273
S'k'
asg18
S'N'
sS'.thisRepN'
p4274
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4275
I11
sS'.thisN'
p4276
I536
sg25
S'Y'
sg15
(lp4277
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4278
I1
sa(dp4279
g16
(lp4280
S'k'
asg18
S'N'
sS'.thisRepN'
p4281
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4282
I12
sS'.thisN'
p4283
I537
sg25
S'Y'
sg15
(lp4284
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4285
I7
sa(dp4286
g16
(lp4287
S'k'
asg18
S'Y'
sS'.thisRepN'
p4288
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4289
I13
sS'.thisN'
p4290
I538
sg25
S'Y'
sg15
(lp4291
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4292
S'space'
p4293
asg95
I0
sS'.thisIndex'
p4294
I0
sa(dp4295
g16
(lp4296
S'k'
asg18
S'N'
sS'.thisRepN'
p4297
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4298
I14
sS'.thisN'
p4299
I539
sg25
S'Y'
sg15
(lp4300
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4301
I11
sa(dp4302
g16
(lp4303
S'd'
asg18
S'Y'
sS'.thisRepN'
p4304
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4305
I0
sS'.thisN'
p4306
I540
sg25
S'Y'
sg15
(lp4307
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4308
S'space'
p4309
asg95
I9
sS'.thisIndex'
p4310
I9
sa(dp4311
g16
(lp4312
S'k'
asg18
S'N'
sS'.thisRepN'
p4313
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4314
I1
sS'.thisN'
p4315
I541
sg25
S'Y'
sg15
(lp4316
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4317
I14
sa(dp4318
g16
(lp4319
S'k'
asg18
S'Y'
sS'.thisRepN'
p4320
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4321
I2
sS'.thisN'
p4322
I542
sg25
S'Y'
sg15
(lp4323
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4324
S'space'
p4325
asg95
I2
sS'.thisIndex'
p4326
I2
sa(dp4327
g16
(lp4328
S'k'
asg18
S'N'
sS'.thisRepN'
p4329
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4330
I3
sS'.thisN'
p4331
I543
sg25
S'Y'
sg15
(lp4332
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4333
I8
sa(dp4334
g16
(lp4335
S'k'
asg18
S'Y'
sS'.thisRepN'
p4336
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4337
I4
sS'.thisN'
p4338
I544
sg25
S'Y'
sg15
(lp4339
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4340
I8
sa(dp4341
g16
(lp4342
S'd'
asg18
S'N'
sS'.thisRepN'
p4343
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4344
I5
sS'.thisN'
p4345
I545
sg25
S'Y'
sg15
(lp4346
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4347
S'space'
p4348
asg95
I12
sS'.thisIndex'
p4349
I12
sa(dp4350
g16
(lp4351
S'd'
asg18
S'N'
sS'.thisRepN'
p4352
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4353
I6
sS'.thisN'
p4354
I546
sg25
S'Y'
sg15
(lp4355
S'd'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4356
I10
sa(dp4357
g16
(lp4358
S'd'
asg18
S'Y'
sS'.thisRepN'
p4359
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4360
I7
sS'.thisN'
p4361
I547
sg25
S'Y'
sg15
(lp4362
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4363
I5
sa(dp4364
g16
(lp4365
S'k'
asg18
S'Y'
sS'.thisRepN'
p4366
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4367
I8
sS'.thisN'
p4368
I548
sg25
S'Y'
sg15
(lp4369
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4370
I11
sa(dp4371
g16
(lp4372
S'k'
asg18
S'N'
sg22
I32
sg26
S'Y'
sS'.thisN'
p4373
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4374
I9
sS'.thisRepN'
p4375
I36
sg21
I33
sg25
S'Y'
sg23
I18
sg15
(lp4376
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4377
I0
sa(dp4378
g16
(lp4379
S'k'
asS'.thisIndex'
p4380
I10
sS'.thisRepN'
p4381
I36
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4382
I10
sS'.thisN'
p4383
I550
sg25
S'Y'
sg15
(lp4384
S'd'
asg17
S'Y'
sg14
I12
sg95
I10
sa(dp4385
g16
(lp4386
S'd'
asS'.thisIndex'
p4387
I4
sS'.thisRepN'
p4388
I36
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4389
I11
sS'.thisN'
p4390
I551
sg25
S'Y'
sg15
(lp4391
S'k'
asg17
S'Y'
sg14
I12
sg95
I4
sa(dp4392
g16
(lp4393
S'k'
asg18
S'Y'
sS'.thisRepN'
p4394
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4395
I12
sS'.thisN'
p4396
I552
sg25
S'Y'
sg15
(lp4397
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4398
S'space'
p4399
asg95
I4
sS'.thisIndex'
p4400
I4
sa(dp4401
g16
(lp4402
S'd'
asg18
S'Y'
sS'.thisRepN'
p4403
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4404
I13
sS'.thisN'
p4405
I553
sg25
S'Y'
sg15
(lp4406
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4407
S'space'
p4408
asg95
I6
sS'.thisIndex'
p4409
I6
sa(dp4410
g16
(lp4411
S'k'
asg18
S'Y'
sS'.thisRepN'
p4412
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4413
I14
sS'.thisN'
p4414
I554
sg25
S'Y'
sg15
(lp4415
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4416
S'space'
p4417
asg95
I5
sS'.thisIndex'
p4418
I5
sa(dp4419
g16
(lp4420
S'd'
asg18
S'N'
sS'.thisRepN'
p4421
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4422
I0
sS'.thisN'
p4423
I555
sg25
S'Y'
sg15
(lp4424
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4425
I12
sa(dp4426
g16
(lp4427
S'd'
asg18
S'N'
sS'.thisRepN'
p4428
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4429
I1
sS'.thisN'
p4430
I556
sg25
S'Y'
sg15
(lp4431
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4432
I10
sa(dp4433
g16
(lp4434
S'd'
asg18
S'N'
sS'.thisRepN'
p4435
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4436
I2
sS'.thisN'
p4437
I557
sg25
S'Y'
sg15
(lp4438
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4439
I6
sa(dp4440
g16
(lp4441
S'd'
asg18
S'Y'
sS'.thisRepN'
p4442
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4443
I3
sS'.thisN'
p4444
I558
sg25
S'Y'
sg15
(lp4445
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4446
S'space'
p4447
asg95
I3
sS'.thisIndex'
p4448
I3
sa(dp4449
g16
(lp4450
S'd'
asg18
S'Y'
sS'.thisRepN'
p4451
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4452
I4
sS'.thisN'
p4453
I559
sg25
S'Y'
sg15
(lp4454
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4455
S'k'
asg95
I14
sS'.thisIndex'
p4456
I14
sa(dp4457
g16
(lp4458
S'k'
asg18
S'Y'
sS'.thisRepN'
p4459
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4460
I5
sS'.thisN'
p4461
I560
sg25
S'Y'
sg15
(lp4462
S'k'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4463
S'space'
p4464
asg95
I7
sS'.thisIndex'
p4465
I7
sa(dp4466
g16
(lp4467
S'k'
asg18
S'Y'
sS'.thisRepN'
p4468
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4469
I6
sS'.thisN'
p4470
I561
sg25
S'Y'
sg15
(lp4471
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4472
S'space'
p4473
asg95
I3
sS'.thisIndex'
p4474
I3
sa(dp4475
g16
(lp4476
S'd'
asg18
S'Y'
sS'.thisRepN'
p4477
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4478
I7
sS'.thisN'
p4479
I562
sg25
S'Y'
sg15
(lp4480
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4481
S'space'
p4482
asg95
I13
sS'.thisIndex'
p4483
I13
sa(dp4484
g16
(lp4485
S'd'
asg18
S'Y'
sS'.thisRepN'
p4486
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4487
I8
sS'.thisN'
p4488
I563
sg25
S'Y'
sg15
(lp4489
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4490
S'space'
p4491
asg95
I2
sS'.thisIndex'
p4492
I2
sa(dp4493
g16
(lp4494
S'd'
asg18
S'N'
sS'.thisRepN'
p4495
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4496
I9
sS'.thisN'
p4497
I564
sg25
S'Y'
sg15
(lp4498
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4499
I13
sa(dp4500
g16
(lp4501
S'd'
asg18
S'Y'
sS'.thisRepN'
p4502
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4503
I10
sS'.thisN'
p4504
I565
sg25
S'Y'
sg15
(lp4505
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4506
I0
sa(dp4507
g16
(lp4508
S'd'
asg18
S'Y'
sS'.thisRepN'
p4509
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4510
I11
sS'.thisN'
p4511
I566
sg25
S'Y'
sg15
(lp4512
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4513
I2
sa(dp4514
g16
(lp4515
S'd'
asg18
S'Y'
sS'.thisRepN'
p4516
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4517
I12
sS'.thisN'
p4518
I567
sg25
S'Y'
sg15
(lp4519
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4520
S'space'
p4521
asg95
I14
sS'.thisIndex'
p4522
I14
sa(dp4523
g16
(lp4524
S'k'
asg18
S'Y'
sS'.thisRepN'
p4525
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4526
I13
sS'.thisN'
p4527
I568
sg25
S'Y'
sg15
(lp4528
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4529
I6
sa(dp4530
g16
(lp4531
S'k'
asg18
S'N'
sS'.thisRepN'
p4532
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4533
I14
sS'.thisN'
p4534
I569
sg25
S'Y'
sg15
(lp4535
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4536
S'space'
p4537
asg95
I6
sS'.thisIndex'
p4538
I6
sa(dp4539
g16
(lp4540
S'k'
asg18
S'N'
sS'.thisRepN'
p4541
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4542
I0
sS'.thisN'
p4543
I570
sg25
S'Y'
sg15
(lp4544
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4545
I2
sa(dp4546
g16
(lp4547
S'k'
asg18
S'Y'
sS'.thisRepN'
p4548
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4549
I1
sS'.thisN'
p4550
I571
sg25
S'Y'
sg15
(lp4551
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4552
S'space'
p4553
asg95
I4
sS'.thisIndex'
p4554
I4
sa(dp4555
g16
(lp4556
S'd'
asg18
S'Y'
sS'.thisRepN'
p4557
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4558
I2
sS'.thisN'
p4559
I572
sg25
S'Y'
sg15
(lp4560
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4561
S'space'
p4562
asg95
I2
sS'.thisIndex'
p4563
I2
sa(dp4564
g16
(lp4565
S'd'
asg18
S'Y'
sS'.thisRepN'
p4566
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4567
I3
sS'.thisN'
p4568
I573
sg25
S'Y'
sg15
(lp4569
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4570
S'space'
p4571
asg95
I13
sS'.thisIndex'
p4572
I13
sa(dp4573
g16
(lp4574
S'k'
asg18
S'Y'
sS'.thisRepN'
p4575
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4576
I4
sS'.thisN'
p4577
I574
sg25
S'Y'
sg15
(lp4578
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4579
S'space'
p4580
asg95
I12
sS'.thisIndex'
p4581
I12
sa(dp4582
g16
(lp4583
S'd'
asg18
S'N'
sS'.thisRepN'
p4584
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4585
I5
sS'.thisN'
p4586
I575
sg25
S'Y'
sg15
(lp4587
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4588
S'space'
p4589
asg95
I2
sS'.thisIndex'
p4590
I2
sa(dp4591
g16
(lp4592
S'd'
asg18
S'Y'
sS'.thisRepN'
p4593
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4594
I6
sS'.thisN'
p4595
I576
sg25
S'Y'
sg15
(lp4596
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4597
S'space'
p4598
asg95
I1
sS'.thisIndex'
p4599
I1
sa(dp4600
g16
(lp4601
S'd'
asg18
S'Y'
sS'.thisRepN'
p4602
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4603
I7
sS'.thisN'
p4604
I577
sg25
S'Y'
sg15
(lp4605
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4606
S'space'
p4607
asg95
I13
sS'.thisIndex'
p4608
I13
sa(dp4609
g16
(lp4610
S'd'
asg18
S'N'
sS'.thisRepN'
p4611
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4612
I8
sS'.thisN'
p4613
I578
sg25
S'Y'
sg15
(lp4614
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4615
I2
sa(dp4616
g16
(lp4617
S'd'
asg18
S'Y'
sS'.thisRepN'
p4618
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4619
I9
sS'.thisN'
p4620
I579
sg25
S'Y'
sg15
(lp4621
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4622
S'space'
p4623
asg95
I2
sS'.thisIndex'
p4624
I2
sa(dp4625
g16
(lp4626
S'k'
asg18
S'N'
sS'.thisRepN'
p4627
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4628
I10
sS'.thisN'
p4629
I580
sg25
S'Y'
sg15
(lp4630
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4631
I1
sa(dp4632
g16
(lp4633
S'd'
asg18
S'N'
sS'.thisRepN'
p4634
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4635
I11
sS'.thisN'
p4636
I581
sg25
S'Y'
sg15
(lp4637
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4638
I5
sa(dp4639
g16
(lp4640
S'd'
asg18
S'N'
sS'.thisRepN'
p4641
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4642
I12
sS'.thisN'
p4643
I582
sg25
S'Y'
sg15
(lp4644
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4645
I12
sa(dp4646
g16
(lp4647
S'd'
asg18
S'N'
sS'.thisRepN'
p4648
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4649
I13
sS'.thisN'
p4650
I583
sg25
S'Y'
sg15
(lp4651
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4652
S'space'
p4653
asg95
I2
sS'.thisIndex'
p4654
I2
sa(dp4655
g16
(lp4656
S'k'
asg18
S'N'
sS'.thisRepN'
p4657
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4658
I14
sS'.thisN'
p4659
I584
sg25
S'Y'
sg15
(lp4660
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4661
I6
sa(dp4662
g16
(lp4663
S'k'
asg18
S'Y'
sS'.thisRepN'
p4664
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4665
I0
sS'.thisN'
p4666
I585
sg25
S'Y'
sg15
(lp4667
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4668
I2
sa(dp4669
g16
(lp4670
S'd'
asg18
S'Y'
sS'.thisRepN'
p4671
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4672
I1
sS'.thisN'
p4673
I586
sg25
S'Y'
sg15
(lp4674
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I14
sS'.thisIndex'
p4675
I14
sa(dp4676
g16
(lp4677
S'k'
asg18
S'Y'
sS'.thisRepN'
p4678
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4679
I2
sS'.thisN'
p4680
I587
sg25
S'Y'
sg15
(lp4681
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4682
S'space'
p4683
asg95
I12
sS'.thisIndex'
p4684
I12
sa(dp4685
g16
(lp4686
S'k'
asg18
S'Y'
sS'.thisRepN'
p4687
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4688
I3
sS'.thisN'
p4689
I588
sg25
S'Y'
sg15
(lp4690
S'k'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4691
I3
sa(dp4692
g16
(lp4693
S'd'
asg18
S'N'
sS'.thisRepN'
p4694
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4695
I4
sS'.thisN'
p4696
I589
sg25
S'Y'
sg15
(lp4697
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4698
I13
sa(dp4699
g16
(lp4700
S'd'
asg18
S'Y'
sS'.thisRepN'
p4701
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4702
I5
sS'.thisN'
p4703
I590
sg25
S'Y'
sg15
(lp4704
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4705
S'space'
p4706
asg95
I11
sS'.thisIndex'
p4707
I11
sa(dp4708
g16
(lp4709
S'd'
asg18
S'N'
sS'.thisRepN'
p4710
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4711
I6
sS'.thisN'
p4712
I591
sg25
S'Y'
sg15
(lp4713
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4714
I10
sa(dp4715
g16
(lp4716
S'd'
asg18
S'N'
sS'.thisRepN'
p4717
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4718
I7
sS'.thisN'
p4719
I592
sg25
S'Y'
sg15
(lp4720
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4721
S'space'
p4722
asg95
I14
sS'.thisIndex'
p4723
I14
sa(dp4724
g16
(lp4725
S'k'
asg18
S'N'
sS'.thisRepN'
p4726
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4727
I8
sS'.thisN'
p4728
I593
sg25
S'Y'
sg15
(lp4729
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4730
I8
sa(dp4731
g16
(lp4732
S'd'
asg18
S'N'
sS'.thisRepN'
p4733
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4734
I9
sS'.thisN'
p4735
I594
sg25
S'Y'
sg15
(lp4736
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4737
I4
sa(dp4738
g16
(lp4739
S'd'
asg18
S'N'
sS'.thisRepN'
p4740
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4741
I10
sS'.thisN'
p4742
I595
sg25
S'Y'
sg15
(lp4743
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4744
I3
sa(dp4745
g16
(lp4746
S'd'
asg18
S'N'
sS'.thisRepN'
p4747
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4748
I11
sS'.thisN'
p4749
I596
sg25
S'Y'
sg15
(lp4750
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4751
I13
sa(dp4752
g16
(lp4753
S'k'
asg18
S'N'
sS'.thisRepN'
p4754
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4755
I12
sS'.thisN'
p4756
I597
sg25
S'Y'
sg15
(lp4757
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4758
I6
sa(dp4759
g16
(lp4760
S'd'
asg18
S'N'
sS'.thisRepN'
p4761
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4762
I13
sS'.thisN'
p4763
I598
sg25
S'Y'
sg15
(lp4764
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4765
I1
sa(dp4766
g16
(lp4767
S'k'
asg18
S'N'
sg22
I36
sg26
S'Y'
sS'.thisN'
p4768
I599
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4769
I14
sS'.thisRepN'
p4770
I39
sg21
I39
sg25
S'Y'
sg23
I25
sg15
(lp4771
S'k'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4772
S'space'
p4773
asg95
I12
sS'.thisIndex'
p4774
I12
sasS'loops'
p4775
(lp4776
g1
(g35
g3
NtRp4777
(dp4778
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4779
sg40
(lp4780
sg41
I74705456
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4781
g48
g49
(g50
g51
g52
S'b'
tRp4782
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4783
(I1
(I600
I1
tg55
I00
S'\x00\x00\x98A\x00\x00\xc4C\x00\x80\xa7C\x00\x00\xd6C\x00\x00\xd2B\x00\x00\x88B\x00\x00\xfcC\x00\x00\x88C\x00\x80\xd5C\x00\x00<B\x00\x00yC\x00@\rD\x00@\x10D\x00\xc0\x0cD\x00\x80\x84C\x00\x00\x15D\x00\x00\x16C\x00\xc0\x08D\x00\x00\xbbC\x00\x00\x87C\x00@\x13D\x00\x00DB\x00\x00\x05D\x00\xc0\rD\x00\x00lB\x00\x00wC\x00\x80\xfeC\x00\x00\xa9C\x00\x00\x9eC\x00\x00\xfeB\x00\x00\x14C\x00\x80\xecC\x00\xc0\x10D\x00\x00\xb2C\x00\x00/C\x00\x00\xe4C\x00\x80\xdfC\x00\x00JC\x00\x00\xe3C\x00\x00\x00C\x00\x007C\x00\x00\xe8A\x00\x00\x88A\x00\x80\x8bC\x00\x80\xebC\x00\x00\xf2B\x00\x00\x07C\x00\x00~C\x00\x80\x13D\x00\x80\xffC\x00@\x00D\x00\x00\xf0B\x00\x00\xd8B\x00\x80\x12D\x00\x80\xc3C\x00\x00\xdeB\x00\x80\x9cC\x00\x00\x10B\x00\x00\xbdC\x00\x80\x08D\x00\x00|B\x00\x00\xb0A\x00\x00\x96C\x00\x00\x93C\x00\x80\xd3C\x00\x00\xaaB\x00\x00\x12C\x00\x00\xecB\x00\x00\x9aC\x00\x00\nC\x00\x00\xa8C\x00\x00\xeaC\x00\x008C\x00\x00\xaeB\x00\x00\x06C\x00\x00\tC\x00\x00@C\x00\x004B\x00\x80\x05D\x00\x00\x03D\x00\x00\xb8C\x00\x00\rD\x00\x00,C\x00\x00VC\x00\x00\x92B\x00\x00\x08B\x00\x80\xaeC\x00\x80\xd1C\x00@\x08D\x00\x80\xdeC\x00\x80\x10D\x00\x00^C\x00\x00\xa0A\x00@\x02D\x00\x80\xf9C\x00\x00\xd0A\x00\x00rC\x00\x00aC\x00\x80\x03D\x00\x80\x15D\x00\x00\xaeC\x00\x00\xd4C\x00\xc0\x11D\x00\x00\x0bC\x00\x00\xf5C\x00\x00\xfaC\x00\x80\xfdC\x00\xc0\x03D\x00\x00\x0cB\x00\x00\x91C\x00\x00\xbaC\x00\x80\x8dC\x00\x00oC\x00\x00IC\x00\x00\x14D\x00\xc0\tD\x00\x00\x8cB\x00\x80\x90C\x00\xc0\x05D\x00\x00\x82C\x00\x80\xbdC\x00\x00\xd5C\x00\x00\xe2C\x00\x80\xb4C\x00\x00\xd1C\x00\x80\xd8C\x00\x00\xe4B\x00\x00NC\x00\x00\x0cC\x00\x00\xf8A\x00\x00|C\x00\x00\xc0@\x00\x00\x89C\x00\x00`A\x00\x80\x99C\x00\x80\xc4C\x00\x00jC\x00\x80\xcbC\x00\x00\x1aC\x00\xc0\x02D\x00\x80\x9fC\x00\x00LC\x00\x00XB\x00\x00!C\x00\xc0\nD\x00\x00\rC\x00\x00\xeaB\x00\x00\x18B\x00\x00]C\x00\xc0\x14D\x00\x00 A\x00\x00hB\x00\x00dB\x00\x00#C\x00\x00\xa8A\x00\x00PA\x00\x00\xe8B\x00\x00\x07D\x00\x004C\x00\x00\xf4C\x00\x80\xb9C\x00\x00\xb2B\x00\x00\xb0C\x00@\x0bD\x00\x00 C\x00\x009C\x00\x80\x85C\x00\x002C\x00\x80\xd0C\x00\x80\x96C\x00\x00\x0fD\x00\x00AC\x00\x00\xe0@\x00\x00\xa7C\x00\x80\xa0C\x00\xc0\x13D\x00\x00\xc6C\x00\x00\xc0B\x00\x80\xe7C\x00\x00\x0eC\x00\x00\x9aB\x00\x00\x02D\x00\x00\x05C\x00\x00\xe0A\x00\x80\x0bD\x00\x80\x11D\x00\x80\xb0C\x00\x80\xf6C\x00\x00\xa0B\x00\x00qC\x00\x80\xdcC\x00\x00\xdeC\x00\x00\x8eC\x00\x00\xdbC\x00\x00\\B\x00\x00\xb3C\x00\x80\xbbC\x00\x00\x94B\x00\x80\x86C\x00\x80\xe1C\x00\x80\xfbC\x00\x00TB\x00\x00\x0bD\x00\x00tB\x00\x80\xa1C\x00\x00\xf1C\x00\x80\xcfC\x00\x80\x14D\x00\x000A\x00\x00\xc3C\x00\x00\x1cB\x00\xc0\x0fD\x00\x00\x9dC\x00\x80\xc2C\x00\x00RC\x00\x00\xc6B\x00\x00\x8aB\x00\x00\x03C\x00@\x0fD\x00\x80\x0cD\x00\x00\xc0C\x00\x00fC\x00\x00\xebC\x00\x80\xa6C\x00\x00nC\x00\x00\xbfC\x00\x00\xa4C\x00\x00\xa1C\x00\x80\xbeC\x00\x80\rD\x00\x00\xc8B\x00\x00\xd7C\x00\x00QC\x00\x00\x9cB\x00\x00\xd6B\x00\x00)C\x00\x00\xd9C\x00\x80\xa8C\x00@\nD\x00\x00\xb4B\x00\x80\xedC\x00\xc0\x0bD\x00\x00`C\x00\x00\xe0B\x00\x80\xceC\x00\x80\x97C\x00\x00-C\x00\x00\x01C\x00@\x11D\x00\x00+C\x00\x80\x8aC\x00\x00\x10D\x00\x80\x9dC\x00\x80\x89C\x00\x00WC\x00\x00\xa8B\x00\x00\xafC\x00\x00\x84B\x00\x00\xc7C\x00\x80\xbfC\x00\x80\xe5C\x00\x80\x98C\x00\x00\xcbC\x00\x80\xc8C\x00\x00\xa4B\x00\x00\x1bC\x00\x00?C\x00\x80\xf7C\x00\x80\x93C\x00\x00PB\x00\x00\xabC\x00\x00\xe6C\x00\x00\xccB\x00\x00\xe0C\x00\x80\x92C\x00\x00\xeeB\x00\x80\xb1C\x00\x00pA\x00\x00\x7fC\x00\x00OC\x00\x80\x87C\x00\x00$B\x00\x00\x15C\x00\x80\xadC\x00\x80\x8eC\x00\x00\xc9C\x00\x000C\x00\x80\x9aC\x00\x00\x04B\x00\x00\xe2B\x00\x00\xdaC\x00\x00\xedC\x00\x00\x18C\x00\x80\xb6C\x00\x00\x84C\x00\x80\xa2C\x00\x00\xefC\x00\x00\xe7C\x00\x00\xd4B\x00\x80\xd9C\x00\x80\x91C\x00\x00\x86B\x00\x00sC\x00\x00\xdcB\x00\x00\x81C\x00\x00%C\x00@\x07D\x00\x80\xcdC\x00\x00\xfeC\x00\x80\x01D\x00@\x06D\x00\x00\xc4B\x00\x00\x80?\x00\x00\x80@\x00\x80\xfcC\x00\x00XC\x00\x80\xe6C\x00\x00\xcaB\x00\xc0\x12D\x00\x00\x95C\x00\x00\x83C\x00\x80\xb7C\x00\x80\x07D\x00\x00@@\x00\x00\xc5C\x00\x00\xbeB\x00\x00\x1dC\x00\xc0\x00D\x00\x00\x9eB\x00\x80\xe2C\x00\x00\xc8C\x00\x80\xf4C\x00\x00YC\x00\x00\xb1C\x00\x00\x8bC\x00\x00\xacC\x00\x00\x80B\x00\x80\x9bC\x00\x00\xeeC\x00\x00\tD\x00\x80\xe3C\x00\x00KC\x00\x00\xbcC\x00\x00\x11D\x00\x00\xf3C\x00\x008B\x00\x80\xcaC\x00\x80\x82C\x00\x00@A\x00\x00\xf8C\x00\x00\x94C\x00\x00\x98C\x00\x00CC\x00\x00\x14B\x00\x80\xe9C\x00\xc0\x06D\x00\x00\xadC\x00\x00\x1cC\x00\x80\xeeC\x00\x00eC\x00\x00\x11C\x00\x80\xf8C\x00@\x15D\x00\x00\x00\x00\x00\x00\x04D\x00\x00\xaaC\x00\x00pB\x00@\x03D\x00\x00uC\x00\x000B\x00\x00\x90A\x00\x80\x04D\x00@\x12D\x00\x80\xc9C\x00\x00\x80A\x00\x00\x90B\x00\x005C\x00\x80\xc5C\x00\x00\xb8A\x00\x00\xceB\x00\x00\xacB\x00\x00\xb9C\x00\x00$C\x00\x00,B\x00\x00\x13D\x00\x80\xa3C\x00\x00\xe9C\x00\x00TC\x00\x80\xafC\x00\x80\x80C\x00\x00\xb7C\x00\x00\x12D\x00\x80\xc1C\x00\x80\x94C\x00\x00\xb0B\x00\x00\x0fC\x00\x80\xccC\x00\x00\xf0C\x00\x00\xf2C\x00\x00\x98B\x00\x00\x99C\x00\x80\x95C\x00\x00\xecC\x00\x80\x88C\x00\x00{C\x00\x80\xaaC\x00@\x14D\x00\x80\xddC\x00\x00\x8cC\x00\x00zC\x00\x00\x9cC\x00\x80\xeaC\x00\x00\xf9C\x00\x001C\x00\x80\xf3C\x00\x80\xc0C\x00\x00\xd2C\x00\x00\x8aC\x00\x80\xfaC\x00\x00[C\x00\x00\x00@\x00\x00.C\x00\xc0\x0eD\x00\x80\xb3C\x00\x00\xe1C\x00\x00cC\x00\x00dC\x00\x80\tD\x00\x00bC\x00\x80\x8cC\x00\x00\xc8A\x00\x00\xc2B\x00\x00\xa0@\x00\x00\xa6B\x00@\tD\x00\x80\x83C\x00\x00\x0cD\x00\x80\xbaC\x00\x00\x9bC\x00@\x05D\x00\x80\xd2C\x00\x00*C\x00\x00mC\x00\xc0\x15D\x00\x00\xe8C\x00\x00tC\x00\x006C\x00\x00hC\x00\x00`B\x00\x00ZC\x00\x00xC\x00\x00MC\x00\x80\xf2C\x00\x00=C\x00\x00\xffC\x00\x00\xcaC\x00\x80\xdbC\x00\x00"C\x00\x00\xe6B\x00\x00\xbeC\x00\x80\xc6C\x00\x80\x00D\x00\x80\xd7C\x00\x00\xceC\x00\x80\x81C\x00\x00FC\x00\x00\x1eC\x00\x80\xa4C\x00\x00\x00B\x00\x00SC\x00\x00 B\x00\x00xB\x00\x00\xa6C\x00\x00\x10C\x00\x00\xfaB\x00\x00@B\x00\x00\xdaB\x00\x00\x10A\x00\x00\xd3C\x00\x00\xbcB\x00\x00UC\x00\x00>C\x00\x00\xb8B\x00\x80\xc7C\x00\x00(C\x00\x00\xf8B\x00\x00\xf6B\x00\x00vC\x00\x00\xddC\x00\x80\xe8C\x00\x80\xf1C\x00\xc0\x04D\x00\x80\nD\x00\x00\x06D\x00\x00\x00D\x00\x00\x00A\x00\x00\xa0C\x00\x00\nD\x00\x80\xb5C\x00\x00LB\x00\x00GC\x00\x00\x97C\x00\x80\xbcC\x00\x00\xccC\x00\x00\xfdC\x00\x80\xe4C\x00\x80\xf5C\x00\x00kC\x00@\x04D\x00\x00\x9fC\x00\x00\x02C\x00\x00\x8eB\x00\xc0\x01D\x00\x00\xcdC\x00\x00\xfcB\x00\x00BC\x00\x00\xb4C\x00\x80\x8fC\x00\x80\x9eC\x00\x00\xdfC\x00\x003C\x00\x00\x96B\x00\x00\xb6C\x00\x00\xc2C\x00\x80\xf0C\x00\x80\xe0C\x00\x00\x13C\x00@\x01D\x00\x00iC\x00\x00\xf6C\x00\x00\x1fC\x00@\x0cD\x00\x00\xc1C\x00\x00pC\x00\x80\xacC\x00\x00\x08D\x00\x00\x8fC\x00\x00\x17C\x00\x00\x04C\x00\x80\xdaC\x00\x00\'C\x00\x80\xb2C\x00\x00\x86C\x00\x80\xefC\x00\x00\xb5C\x00\x80\xa5C\x00\x00_C\x00\x00\xcfC\x00\x00\xd0B\x00\x00gC\x00\x00\\C\x00\x00\x82B\x00\x00\xf4B\x00\x00HB\x00\x00\xbaB\x00\x80\xb8C\x00\x80\x0eD\x00\x00\xdcC\x00\x00PC\x00\x00\x85C\x00\x80\xabC\x00\x80\xd6C\x00\x80\xd4C\x00\x00lC\x00\x80\x0fD\x00\x00\xa5C\x00\x00}C\x00\x00\x90C\x00\x00\x19C\x00\x00\xd0C\x00\x00(B\x00\x00\x8dC\x00\x00\xf7C\x00\x00\xd8A\x00\x00\xfbC\x00\x00\xf0A\x00\x00\x92C\x00\x00\xc0A\x00\x00DC\x00\x00<C\x00\x00\x80C\x00@\x0eD\x00\x00\x0eD\x00\x00;C\x00\x00\x08C\x00\x00\xb6B\x00\x00\xa2B\x00\x80\x06D\x00\x00EC\x00\x00&C\x00\x00\xe5C\x00\x00\x01D\x00\xc0\x07D\x00\x00HC\x00\x80\xa9C\x00\x00:C\x00\x00\xa3C\x00\x00\xa2C\x00\x00\xd8C\x00\x80\x02D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4784
(dp4785
g60
(dp4786
g48
I01
sg56
I01
ssg62
g4777
sg63
(lp4787
g48
ag56
asg65
(lp4788
I600
aI1
asbsg67
S'random'
p4789
sg69
g70
(g51
(I0
tS'b'
tRp4790
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4791
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'k\x01\x00\x008\x01\x00\x00\xa4\x01\x00\x00C\x01\x00\x009\x01\x00\x00\xb0\x01\x00\x00\x83\x00\x00\x00\xac\x00\x00\x00\xef\x01\x00\x00\xdd\x01\x00\x00\x96\x00\x00\x00\xd0\x00\x00\x00\\\x01\x00\x00\x9b\x00\x00\x00\x85\x00\x00\x00\x15\x01\x00\x00v\x01\x00\x00*\x00\x00\x00r\x01\x00\x00\x00\x00\x00\x00\\\x00\x00\x00\x9a\x00\x00\x00=\x00\x00\x00z\x01\x00\x00A\x02\x00\x00\xae\x01\x00\x00_\x00\x00\x00=\x02\x00\x00\xb7\x00\x00\x00)\x00\x00\x00?\x02\x00\x00\x81\x00\x00\x00\xd4\x01\x00\x00 \x01\x00\x00U\x00\x00\x00l\x00\x00\x009\x00\x00\x00a\x01\x00\x00\x93\x00\x00\x00\xd2\x00\x00\x00\xd6\x01\x00\x00\x19\x01\x00\x00:\x02\x00\x00\x7f\x01\x00\x00q\x01\x00\x00M\x00\x00\x00Y\x01\x00\x00\t\x00\x00\x00\xdb\x01\x00\x00\x15\x00\x00\x00)\x02\x00\x00\xf3\x01\x00\x00\r\x01\x00\x00\xc9\x00\x00\x00\x8e\x00\x00\x00\xc2\x00\x00\x00\xc0\x01\x00\x00\x98\x00\x00\x00\x97\x00\x00\x00\x18\x00\x00\x00n\x01\x00\x00\xcb\x00\x00\x00\xd7\x01\x00\x00<\x00\x00\x00P\x01\x00\x00\'\x02\x00\x00\x01\x01\x00\x00-\x01\x00\x00\x05\x00\x00\x00\xd8\x00\x00\x00t\x00\x00\x00\xff\x01\x00\x00w\x01\x00\x00T\x00\x00\x00\xc5\x00\x00\x00\t\x02\x00\x00\x8f\x01\x00\x00\xb4\x00\x00\x00\xe9\x00\x00\x00H\x01\x00\x00\xbc\x00\x00\x00J\x02\x00\x00\x08\x01\x00\x00\xb1\x01\x00\x00\xff\x00\x00\x00A\x00\x00\x00|\x01\x00\x00I\x00\x00\x00\x8a\x01\x00\x00\xa1\x00\x00\x00\xef\x00\x00\x00I\x02\x00\x00\xe2\x01\x00\x00*\x02\x00\x00\xdf\x01\x00\x00E\x01\x00\x00\xb1\x00\x00\x00\xaf\x01\x00\x007\x01\x00\x00\xd7\x00\x00\x00\xe6\x00\x00\x00=\x01\x00\x00\x10\x01\x00\x00{\x01\x00\x00$\x02\x00\x00\x04\x00\x00\x00*\x01\x00\x00\xea\x00\x00\x004\x00\x00\x00\xdc\x01\x00\x00/\x01\x00\x007\x00\x00\x00\xf3\x00\x00\x00!\x01\x00\x00~\x00\x00\x00\xca\x01\x00\x00\x9c\x00\x00\x00\x92\x00\x00\x00C\x00\x00\x00\x13\x01\x00\x003\x00\x00\x00-\x00\x00\x00(\x02\x00\x00\xe6\x01\x00\x00\xe5\x01\x00\x00\xda\x01\x00\x00\x02\x02\x00\x00\x1d\x00\x00\x00\'\x00\x00\x00\xf7\x00\x00\x00\xfe\x01\x00\x00\xd9\x00\x00\x00\x1a\x02\x00\x00\xb6\x00\x00\x00J\x00\x00\x00.\x00\x00\x00H\x02\x00\x00K\x00\x00\x00E\x00\x00\x00g\x00\x00\x00\x80\x00\x00\x00\x91\x00\x00\x00\xb3\x00\x00\x00\x8b\x01\x00\x00\xd9\x01\x00\x00h\x01\x00\x00B\x00\x00\x00\x0e\x02\x00\x00\x1e\x00\x00\x00\x1a\x01\x00\x00\x10\x00\x00\x00\x19\x02\x00\x00$\x01\x00\x008\x02\x00\x00\x8a\x00\x00\x00\t\x01\x00\x00e\x01\x00\x00F\x01\x00\x00\xd2\x01\x00\x00\x12\x02\x00\x00\xa4\x00\x00\x00\x8f\x00\x00\x00\xc9\x01\x00\x00\x99\x00\x00\x00~\x01\x00\x001\x01\x00\x00M\x02\x00\x00\x1c\x02\x00\x00\xe4\x01\x00\x00\xeb\x00\x00\x00\xb9\x01\x00\x00\xf9\x00\x00\x00R\x00\x00\x00\xf6\x00\x00\x00\xa5\x01\x00\x00"\x00\x00\x00\x1e\x01\x00\x00\x9d\x01\x00\x00\xa7\x00\x00\x00\x08\x02\x00\x00\x9e\x00\x00\x00x\x01\x00\x00\xbe\x01\x00\x00(\x00\x00\x00H\x00\x00\x00\xa5\x00\x00\x00S\x02\x00\x00G\x02\x00\x00C\x02\x00\x00\xc5\x01\x00\x00\xe1\x01\x00\x00\n\x01\x00\x00L\x00\x00\x00\xab\x00\x00\x00\x03\x02\x00\x00`\x01\x00\x00B\x02\x00\x00L\x02\x00\x00\xd1\x01\x00\x00\xf4\x01\x00\x00Q\x02\x00\x00q\x00\x00\x00%\x00\x00\x00U\x01\x00\x00\x8d\x00\x00\x00\xc3\x01\x00\x00\x7f\x00\x00\x00\x17\x01\x00\x00.\x02\x00\x00\xe8\x00\x00\x00\xd6\x00\x00\x00\xd5\x01\x00\x00\x83\x01\x00\x00\xe0\x01\x00\x00S\x00\x00\x00\xfe\x00\x00\x00;\x01\x00\x00L\x01\x00\x00\xc1\x01\x00\x00\xa3\x01\x00\x00&\x02\x00\x00\x94\x00\x00\x00[\x00\x00\x00"\x02\x00\x00\xf2\x00\x00\x00a\x00\x00\x00\xac\x01\x00\x00\xa9\x01\x00\x00\xaa\x01\x00\x00g\x01\x00\x00\xdd\x00\x00\x00%\x02\x00\x00\xbf\x01\x00\x00\x10\x02\x00\x00\x88\x00\x00\x00\xfb\x01\x00\x003\x02\x00\x00\xba\x01\x00\x00\xe0\x00\x00\x00p\x00\x00\x00\x15\x02\x00\x00\xbd\x00\x00\x00`\x00\x00\x00.\x01\x00\x00\xbd\x01\x00\x00p\x01\x00\x00\xe7\x01\x00\x00\x19\x00\x00\x00\xc2\x01\x00\x00\n\x00\x00\x00\x99\x01\x00\x00\x94\x01\x00\x00\x82\x00\x00\x006\x02\x00\x00/\x00\x00\x00\x16\x01\x00\x00D\x02\x00\x00\x85\x01\x00\x000\x01\x00\x00\xd0\x01\x00\x00w\x00\x00\x00[\x01\x00\x00@\x01\x00\x00\xb3\x01\x00\x00&\x01\x00\x00\x0e\x00\x00\x00/\x02\x00\x00\xa6\x00\x00\x00\x1e\x02\x00\x00\xc6\x00\x00\x00\x13\x00\x00\x00\x18\x01\x00\x00\x07\x00\x00\x00\x93\x01\x00\x00\x84\x00\x00\x00\xfd\x00\x00\x00\xa1\x01\x00\x00\xfa\x00\x00\x00N\x01\x00\x00+\x00\x00\x00\x98\x01\x00\x00\xad\x01\x00\x00;\x02\x00\x00o\x00\x00\x00\xc0\x00\x00\x00\x1c\x01\x00\x00\x18\x02\x00\x00\x05\x02\x00\x007\x02\x00\x00u\x00\x00\x00m\x00\x00\x00,\x01\x00\x00@\x02\x00\x00\x12\x01\x00\x00?\x00\x00\x00\x0c\x01\x00\x00^\x01\x00\x00\x89\x01\x00\x00?\x01\x00\x00\x91\x01\x00\x00>\x00\x00\x00\xa9\x00\x00\x00\xf5\x01\x00\x00\xf5\x00\x00\x00_\x01\x00\x00\x05\x01\x00\x00\x90\x01\x00\x00\x86\x00\x00\x00D\x00\x00\x00\x1f\x01\x00\x00\xb6\x01\x00\x00Q\x01\x00\x00\x9a\x01\x00\x008\x00\x00\x00\xd4\x00\x00\x00\xfc\x00\x00\x00\x1c\x00\x00\x00\x06\x02\x00\x00\xfd\x01\x00\x00\x8c\x00\x00\x00\xf0\x01\x00\x00\xae\x00\x00\x00\xe3\x00\x00\x00\xcc\x00\x00\x00U\x02\x00\x00\'\x01\x00\x00T\x02\x00\x00\x81\x01\x00\x00\xe2\x00\x00\x00\xd3\x01\x00\x005\x02\x00\x00!\x02\x00\x00\xd8\x01\x00\x00\xdf\x00\x00\x00\xad\x00\x00\x00\x02\x00\x00\x00F\x00\x00\x00\xed\x00\x00\x00\x1b\x00\x00\x00R\x02\x00\x00m\x01\x00\x00\x95\x01\x00\x00\x0e\x01\x00\x000\x02\x00\x00O\x01\x00\x00\x16\x02\x00\x00d\x01\x00\x00\x1b\x01\x00\x00d\x00\x00\x00V\x00\x00\x00\x00\x01\x00\x00\x84\x01\x00\x00\xa2\x00\x00\x00\xba\x00\x00\x00M\x01\x00\x00\x14\x01\x00\x00!\x00\x00\x00\x1d\x02\x00\x00\xc3\x00\x00\x00\xa7\x01\x00\x00\x04\x02\x00\x00{\x00\x00\x00 \x02\x00\x00\xf2\x01\x00\x00\n\x02\x00\x00%\x01\x00\x00\x86\x01\x00\x00A\x01\x00\x00P\x00\x00\x00+\x02\x00\x00}\x01\x00\x00\xa0\x00\x00\x00n\x00\x00\x00\xb5\x01\x00\x00\x12\x00\x00\x00\xc4\x00\x00\x00V\x01\x00\x00\xf6\x01\x00\x00:\x00\x00\x00x\x00\x00\x00\xcb\x01\x00\x00\xe4\x00\x00\x00\xe1\x00\x00\x00\x03\x01\x00\x00\xdc\x00\x00\x00\x9f\x01\x00\x00\x14\x02\x00\x00\x88\x01\x00\x00\x0b\x02\x00\x00\xd5\x00\x00\x00\xd1\x00\x00\x006\x00\x00\x00\x01\x00\x00\x00\x87\x00\x00\x00D\x01\x00\x00y\x01\x00\x00\xb0\x00\x00\x00\xcc\x01\x00\x00\x02\x01\x00\x00\xe3\x01\x00\x00J\x01\x00\x00\x07\x01\x00\x00\x1d\x01\x00\x00u\x01\x00\x00\xc7\x01\x00\x00Z\x01\x00\x00\x06\x01\x00\x00\x89\x00\x00\x00\xf7\x01\x00\x00\x8c\x01\x00\x00\x01\x02\x00\x003\x01\x00\x00\xcf\x01\x00\x00\xf4\x00\x00\x00#\x02\x00\x00\xce\x00\x00\x009\x02\x00\x00\xa8\x00\x00\x00|\x00\x00\x00W\x00\x00\x00\xa0\x01\x00\x00\xb8\x01\x00\x00\xde\x01\x00\x00@\x00\x00\x00e\x00\x00\x002\x02\x00\x00y\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x001\x02\x00\x00\xe7\x00\x00\x00\xce\x01\x00\x00V\x02\x00\x00}\x00\x00\x00\xec\x00\x00\x00+\x01\x00\x00"\x01\x00\x00\x1b\x02\x00\x00\xc1\x00\x00\x00\xc8\x01\x00\x00-\x02\x00\x00\xbe\x00\x00\x00\xe8\x01\x00\x00\x97\x01\x00\x00\xbf\x00\x00\x00Y\x00\x00\x00\x07\x02\x00\x00$\x00\x00\x00\x11\x01\x00\x00\r\x02\x00\x00\xa8\x01\x00\x00\xc7\x00\x00\x00z\x00\x00\x00I\x01\x00\x00&\x00\x00\x00T\x01\x00\x00#\x00\x00\x00\xf9\x01\x00\x00N\x02\x00\x00\x04\x01\x00\x00\x0f\x01\x00\x00<\x01\x00\x00)\x01\x00\x00\xb2\x00\x00\x00\xbc\x01\x00\x00\xe9\x01\x00\x00\x82\x01\x00\x00b\x01\x00\x00G\x00\x00\x00\x9b\x01\x00\x00\xde\x00\x00\x00,\x00\x00\x00\x92\x01\x00\x00\x1f\x00\x00\x00#\x01\x00\x00\xf0\x00\x00\x00R\x01\x00\x00f\x01\x00\x00(\x01\x00\x00\x1f\x02\x00\x00\x8d\x01\x00\x00\x0c\x02\x00\x00\xcd\x00\x00\x00\xea\x01\x00\x00\x8e\x01\x00\x00\xc4\x01\x00\x00X\x01\x00\x00\x9e\x01\x00\x00\x9f\x00\x00\x00K\x01\x00\x00h\x00\x00\x00\xfa\x01\x00\x00\x11\x02\x00\x00\xbb\x00\x00\x00<\x02\x00\x00\x0b\x01\x00\x00]\x01\x00\x00i\x01\x00\x00\x9c\x01\x00\x00^\x00\x00\x00i\x00\x00\x00\xa2\x01\x00\x00>\x02\x00\x00\xc8\x00\x00\x00\x06\x00\x00\x00:\x01\x00\x00\xf8\x01\x00\x00j\x00\x00\x004\x01\x00\x00\x1a\x00\x00\x00\xc6\x01\x00\x001\x00\x00\x00\xee\x01\x00\x002\x00\x00\x00\xcd\x01\x00\x00G\x01\x00\x00O\x02\x00\x00\x0f\x02\x00\x005\x01\x00\x00\x00\x02\x00\x00\xb5\x00\x00\x00]\x00\x00\x00W\x02\x00\x00\x8b\x00\x00\x00O\x00\x00\x00o\x01\x00\x00b\x00\x00\x00k\x00\x00\x00l\x01\x00\x00\xfc\x01\x00\x00s\x01\x00\x00\xeb\x01\x00\x00\x16\x00\x00\x00\xb7\x01\x00\x00N\x00\x00\x00v\x00\x00\x00\xed\x01\x00\x006\x01\x00\x00K\x02\x00\x00c\x01\x00\x00\x9d\x00\x00\x002\x01\x00\x00B\x01\x00\x00P\x02\x00\x00\x17\x02\x00\x00X\x00\x00\x00;\x00\x00\x00\x11\x00\x00\x00S\x01\x00\x00\xb2\x01\x00\x00\xab\x01\x00\x00s\x00\x00\x00\xf1\x01\x00\x00\xee\x00\x00\x00\xec\x01\x00\x00\x90\x00\x00\x00\xca\x00\x00\x00\xa3\x00\x00\x00\xb8\x00\x00\x00\xf1\x00\x00\x00\xb4\x01\x00\x00\x13\x02\x00\x00\xdb\x00\x00\x00\r\x00\x00\x00Q\x00\x00\x00\x0b\x00\x00\x00\xe5\x00\x00\x00\x17\x00\x00\x00F\x02\x00\x00E\x02\x00\x00,\x02\x00\x00\xa6\x01\x00\x00\xaa\x00\x00\x00\xda\x00\x00\x004\x02\x00\x00\xd3\x00\x00\x00\xfb\x00\x00\x00\x0c\x00\x00\x00Z\x00\x00\x00 \x00\x00\x00W\x01\x00\x00\xf8\x00\x00\x00\xb9\x00\x00\x00f\x00\x00\x00\x87\x01\x00\x00t\x01\x00\x005\x00\x00\x00>\x01\x00\x00\x80\x01\x00\x00\x14\x00\x00\x000\x00\x00\x00\xaf\x00\x00\x00r\x00\x00\x00\x96\x01\x00\x00\xcf\x00\x00\x00\x95\x00\x00\x00\x0f\x00\x00\x00j\x01\x00\x00c\x00\x00\x00\xbb\x01\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4792
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4793
(g4791
S'\xbb\x01\x00\x00'
tRp4794
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4795
I01
sb.