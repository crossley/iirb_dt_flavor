ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject806
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 806
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VM
sS'age'
p31
V20
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I14
sS'_exp'
p41
I76233264
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I39
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I15
I40
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I15
I40
tg55
I00
S'\x00\x00\x00@\x00\x00\x10A\x00\x00\xd8A\x00\x00\x0cB\x00\x00\x18B\x00\x00\x92B\x00\x00\xe2B\x00\x00\xeeB\x00\x00\x16C\x00\x00-C\x00\x007C\x00\x00@C\x00\x00FC\x00\x00_C\x00\x00lC\x00\x00\x7fC\x00\x00\x89C\x00\x80\x91C\x00\x80\x92C\x00\x00\x95C\x00\x00\x97C\x00\x00\xa0C\x00\x80\xa5C\x00\x00\xa7C\x00\x80\xacC\x00\x80\xb2C\x00\x80\xc1C\x00\x00\xc8C\x00\x00\xccC\x00\x80\xd8C\x00\x00\xe5C\x00\x80\xebC\x00\x80\xf5C\x00\x00\xfbC\x00\xc0\x00D\x00\xc0\x06D\x00\x80\nD\x00@\x10D\x00@\x12D\x00@\x13D\x00\x00\xa0@\x00\x00\x88A\x00\x00\x14B\x00\x00\x1cB\x00\x008B\x00\x00<B\x00\x00PB\x00\x00\x96B\x00\x00\xaaB\x00\x00\xdcB\x00\x00\x05C\x00\x00\x18C\x00\x00/C\x00\x00>C\x00\x00?C\x00\x00JC\x00\x00KC\x00\x00LC\x00\x00SC\x00\x00fC\x00\x00pC\x00\x00sC\x00\x00\x8cC\x00\x00\x93C\x00\x80\x94C\x00\x80\x9aC\x00\x80\xd3C\x00\x00\xd7C\x00\x00\xe0C\x00\x00\xe3C\x00\x00\xe4C\x00\x80\xe7C\x00\x80\x00D\x00\x80\x07D\x00@\x08D\x00\xc0\x0cD\x00\xc0\x0fD\x00\x80\x11D\x00\x00\x13D\x00\xc0\x13D\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\xa8A\x00\x00\xc0A\x00\x00\xe8A\x00\x00\x08B\x00\x00HB\x00\x00\x88B\x00\x00\xc0B\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00 C\x00\x00CC\x00\x00NC\x00\x00mC\x00\x00oC\x00\x00qC\x00\x00\x81C\x00\x00\x85C\x00\x80\x8fC\x00\x80\x9eC\x00\x00\xabC\x00\x80\xb0C\x00\x00\xb2C\x00\x00\xb3C\x00\x00\xb4C\x00\x80\xc3C\x00\x00\xc7C\x00\x80\xc7C\x00\x00\xe2C\x00\x00\xf1C\x00\x80\xf4C\x00\x00\xf9C\x00\x80\xf9C\x00@\x02D\x00\xc0\x04D\x00\x80\tD\x00\x80\x0fD\x00@\x11D\x00\x00PA\x00\x00\xb0A\x00\x00$B\x00\x00\x9aB\x00\x00\xa4B\x00\x00\xb4B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xf6B\x00\x00\x01C\x00\x00\x06C\x00\x00\x15C\x00\x00\x1bC\x00\x00\x1cC\x00\x00!C\x00\x00"C\x00\x00<C\x00\x00VC\x00\x00[C\x00\x80\x85C\x00\x00\x86C\x00\x80\x86C\x00\x80\x90C\x00\x00\xb7C\x00\x80\xbbC\x00\x80\xbeC\x00\x00\xc5C\x00\x80\xcbC\x00\x00\xd4C\x00\x00\xd5C\x00\x80\xe0C\x00\x00\xe6C\x00\x00\xf6C\x00\x00\xf7C\x00@\x06D\x00\xc0\rD\x00\x00\x0eD\x00\x80\x10D\x00@\x14D\x00\x00\x15D\x00\x00\x80@\x00\x00\xb8A\x00\x00 B\x00\x00TB\x00\x00\x80B\x00\x00\x9cB\x00\x00\xb0B\x00\x00\xbcB\x00\x00\xe0B\x00\x00\x14C\x00\x00\x17C\x00\x00\x19C\x00\x00(C\x00\x00+C\x00\x00DC\x00\x00]C\x00\x00^C\x00\x00iC\x00\x00rC\x00\x00tC\x00\x00wC\x00\x80\x80C\x00\x00\x8bC\x00\x80\xafC\x00\x00\xb5C\x00\x00\xbfC\x00\x00\xc4C\x00\x80\xc5C\x00\x00\xcdC\x00\x00\xd6C\x00\x80\xdaC\x00\x00\xddC\x00\x80\xe2C\x00\x80\xf3C\x00\x00\xf5C\x00\x00\xffC\x00\x00\x01D\x00\x00\rD\x00\xc0\x12D\x00\x80\x15D\x00\x00\xc8A\x00\x00\xd0A\x00\x00\x00B\x00\x00DB\x00\x00LB\x00\x00xB\x00\x00\xacB\x00\x00\xb2B\x00\x00\xc8B\x00\x00\xdeB\x00\x00\x00C\x00\x00\x0bC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x006C\x00\x00OC\x00\x00aC\x00\x00dC\x00\x00gC\x00\x00kC\x00\x80\x84C\x00\x00\x8fC\x00\x80\x95C\x00\x80\x96C\x00\x00\xa6C\x00\x80\xa9C\x00\x00\xb9C\x00\x00\xbdC\x00\x00\xc3C\x00\x00\xcaC\x00\x00\xcbC\x00\x00\xdbC\x00\x80\xe5C\x00\x80\xedC\x00\x00\xefC\x00\x00\xf0C\x00\x00\x07D\x00\x80\x08D\x00@\x0bD\x00\x00@A\x00\x00\\B\x00\x00\xd2B\x00\x00\x1dC\x00\x002C\x00\x005C\x00\x00TC\x00\x00WC\x00\x00nC\x00\x00}C\x00\x00\x84C\x00\x80\x88C\x00\x80\x8cC\x00\x00\x99C\x00\x00\x9bC\x00\x00\xa1C\x00\x80\xa1C\x00\x80\xa6C\x00\x00\xa9C\x00\x80\xaaC\x00\x00\xb8C\x00\x80\xccC\x00\x80\xceC\x00\x00\xd9C\x00\x00\xdcC\x00\x80\xdcC\x00\x80\xdeC\x00\x00\xe1C\x00\x80\xeeC\x00\x80\xfcC\x00\x80\x02D\x00\x80\x03D\x00@\x04D\x00\x80\x05D\x00@\x07D\x00\x00\x08D\x00\x00\nD\x00\xc0\x10D\x00\x80\x13D\x00\x80\x14D\x00\x00`A\x00\x00,B\x00\x000B\x00\x00XB\x00\x00\x90B\x00\x00\x98B\x00\x00\xcaB\x00\x00\rC\x00\x00\'C\x00\x00.C\x00\x00EC\x00\x00GC\x00\x00`C\x00\x80\x99C\x00\x00\x9aC\x00\x80\xa0C\x00\x80\xa3C\x00\x00\xb1C\x00\x80\xb3C\x00\x80\xb4C\x00\x80\xb5C\x00\x80\xb6C\x00\x00\xc1C\x00\x80\xc2C\x00\x80\xc4C\x00\x00\xc6C\x00\x80\xc8C\x00\x00\xd3C\x00\x80\xd4C\x00\x80\xdbC\x00\x80\xe4C\x00\x80\xe9C\x00\x00\xf2C\x00\x00\xf3C\x00\x80\xf7C\x00\x80\xf8C\x00\x00\xfdC\x00\xc0\x03D\x00@\x0fD\x00\x00\x14D\x00\x00\x98A\x00\x00tB\x00\x00\x8aB\x00\x00\xc6B\x00\x00\xd0B\x00\x00\xeaB\x00\x00\xfcB\x00\x00\x07C\x00\x00\nC\x00\x00IC\x00\x00QC\x00\x00UC\x00\x00YC\x00\x00jC\x00\x00\x80C\x00\x80\x82C\x00\x00\x83C\x00\x00\x8aC\x00\x00\x8dC\x00\x80\x98C\x00\x00\xadC\x00\x00\xafC\x00\x00\xb0C\x00\x80\xbcC\x00\x00\xc0C\x00\x00\xcfC\x00\x80\xcfC\x00\x00\xdeC\x00\x00\xdfC\x00\x00\xe9C\x00\x00\xecC\x00\x80\xecC\x00\x00\xeeC\x00\x80\xf6C\x00\x80\xfbC\x00@\x01D\x00\x80\x01D\x00\xc0\x02D\x00\xc0\x05D\x00\xc0\x0eD\x00\x00@@\x00\x00 A\x00\x000A\x00\x00\x90A\x00\x00(B\x00\x00@B\x00\x00\x82B\x00\x00\xa8B\x00\x00\xb6B\x00\x00\xe6B\x00\x00\xfeB\x00\x00%C\x00\x00&C\x00\x003C\x00\x00=C\x00\x00AC\x00\x00eC\x00\x00hC\x00\x80\x83C\x00\x00\x87C\x00\x80\x8aC\x00\x80\x8eC\x00\x00\x96C\x00\x00\xa4C\x00\x00\xa8C\x00\x00\xaaC\x00\x80\xb7C\x00\x80\xb9C\x00\x80\xbfC\x00\x80\xcaC\x00\x80\xd6C\x00\x00\xd8C\x00\x00\xfaC\x00\x80\xffC\x00\xc0\x01D\x00\x00\x06D\x00@\rD\x00\x00\x0fD\x00\x00\x10D\x00\xc0\x14D\x00\x00pA\x00\x00\xf0A\x00\x00hB\x00\x00\x86B\x00\x00\x8eB\x00\x00\x94B\x00\x00\xc4B\x00\x00\xf0B\x00\x00\tC\x00\x00\x1fC\x00\x000C\x00\x001C\x00\x00;C\x00\x00PC\x00\x00XC\x00\x00|C\x00\x00\x82C\x00\x00\x88C\x00\x80\x89C\x00\x00\x8eC\x00\x00\x91C\x00\x80\x9bC\x00\x00\x9cC\x00\x80\x9dC\x00\x80\xadC\x00\x80\xb1C\x00\x00\xbaC\x00\x00\xc2C\x00\x80\xcdC\x00\x80\xd0C\x00\x00\xdaC\x00\x80\xe1C\x00\x80\xefC\x00\x80\xf1C\x00\x00\x03D\x00@\x05D\x00\x80\x06D\x00\x00\tD\x00@\tD\x00\x00\x12D\x00\x00\x80?\x00\x00\x10B\x00\x00dB\x00\x00pB\x00\x00|B\x00\x00\x9eB\x00\x00\xa6B\x00\x00\xbeB\x00\x00\xceB\x00\x00\xdaB\x00\x00\x12C\x00\x00#C\x00\x00)C\x00\x00*C\x00\x008C\x00\x00vC\x00\x00zC\x00\x80\x8dC\x00\x00\x98C\x00\x80\x9cC\x00\x00\xa2C\x00\x00\xa3C\x00\x80\xa8C\x00\x00\xaeC\x00\x80\xc6C\x00\x00\xceC\x00\x00\xd1C\x00\x80\xd5C\x00\x80\xe6C\x00\x00\xe8C\x00\x00\x00D\x00\x80\x04D\x00\x00\x05D\x00@\nD\x00\x00\x0bD\x00\xc0\x0bD\x00\x00\x0cD\x00@\x0cD\x00\x80\rD\x00\x80\x12D\x00\x00\x00A\x00\x00`B\x00\x00\x8cB\x00\x00\xecB\x00\x00\xf8B\x00\x00\x08C\x00\x00\x0cC\x00\x00\x0eC\x00\x00\x13C\x00\x00\x1aC\x00\x00\x1eC\x00\x004C\x00\x00:C\x00\x00BC\x00\x00RC\x00\x00\\C\x00\x00yC\x00\x00~C\x00\x80\x81C\x00\x80\x87C\x00\x80\x8bC\x00\x00\x92C\x00\x00\x9dC\x00\x80\x9fC\x00\x00\xb6C\x00\x80\xb8C\x00\x80\xbaC\x00\x00\xbeC\x00\x80\xc9C\x00\x00\xd0C\x00\x80\xd2C\x00\x80\xe3C\x00\x80\xeaC\x00\x80\xf0C\x00\x00\xf8C\x00\x80\xfdC\x00@\x00D\x00\xc0\x07D\x00\xc0\tD\x00@\x15D\x00\x00\x80A\x00\x00\x04B\x00\x00\x84B\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xbaB\x00\x00\xd8B\x00\x00\xe8B\x00\x00\xfaB\x00\x00$C\x00\x00,C\x00\x009C\x00\x00MC\x00\x00ZC\x00\x00bC\x00\x80\x93C\x00\x80\xa4C\x00\x80\xaeC\x00\x00\xbbC\x00\x80\xbdC\x00\x80\xc0C\x00\x00\xc9C\x00\x80\xd7C\x00\x80\xd9C\x00\x80\xddC\x00\x80\xdfC\x00\x00\xe7C\x00\x80\xe8C\x00\x00\xedC\x00\x00\xf4C\x00\x80\xfaC\x00\x00\xfeC\x00\x80\xfeC\x00@\x03D\x00\xc0\x08D\x00\xc0\nD\x00\x80\x0bD\x00\x80\x0cD\x00@\x0eD\x00\x80\x0eD\x00\x00\xe0@\x00\x00\xa0A\x00\x00\xe0A\x00\x00\xf8A\x00\x004B\x00\x00lB\x00\x00\xaeB\x00\x00\xb8B\x00\x00\xc2B\x00\x00\xccB\x00\x00\xe4B\x00\x00\xf2B\x00\x00\xf4B\x00\x00HC\x00\x00cC\x00\x00uC\x00\x00xC\x00\x00{C\x00\x00\x90C\x00\x00\x94C\x00\x80\x97C\x00\x00\x9eC\x00\x00\x9fC\x00\x80\xa2C\x00\x00\xa5C\x00\x80\xa7C\x00\x80\xabC\x00\x00\xacC\x00\x00\xbcC\x00\x80\xd1C\x00\x00\xd2C\x00\x00\xeaC\x00\x00\xebC\x00\x80\xf2C\x00\x00\xfcC\x00\x00\x02D\x00\x00\x04D\x00\x00\x11D\x00\xc0\x11D\x00\xc0\x15D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I15
aI40
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I15
I40
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I2
aI10
aI10
aI14
aI11
aI1
aI3
aI6
aI10
aI8
aI0
aI9
aI12
aI2
aI12
aI5
aI1
aI0
aI9
aI9
aI9
aI10
aI14
aI0
aI2
aI3
aI5
aI9
aI14
aI13
aI6
aI13
aI5
aI7
aI4
aI13
aI5
aI13
aI13
aI0
aI11
aI13
aI14
aI1
aI8
aI7
aI9
aI3
aI14
aI12
aI4
aI9
aI6
aI4
aI1
aI13
aI2
aI8
aI12
aI5
aI5
aI14
aI0
aI8
aI7
aI14
aI2
aI5
aI12
aI10
aI10
aI8
aI12
aI12
aI9
aI6
aI6
aI11
aI8
aI11
aI0
aI1
aI5
aI1
aI5
aI3
aI14
aI3
aI14
aI10
aI1
aI7
aI5
aI7
aI6
aI14
aI4
aI4
aI10
aI2
aI0
aI2
aI5
aI10
aI4
aI8
aI4
aI3
aI7
aI4
aI2
aI7
aI2
aI7
aI11
aI7
aI1
aI5
aI9
aI4
aI9
aI9
aI13
aI9
aI11
aI4
aI13
aI13
aI3
aI8
aI4
aI4
aI0
aI0
aI8
aI5
aI1
aI2
aI6
aI14
aI14
aI14
aI6
aI11
aI7
aI5
aI7
aI0
aI1
aI5
aI4
aI14
aI10
aI2
aI12
aI14
aI12
aI13
aI7
aI1
aI4
aI8
aI2
aI5
aI4
aI11
aI4
aI11
aI12
aI5
aI12
aI11
aI11
aI7
aI3
aI9
aI4
aI12
aI0
aI3
aI11
aI12
aI0
aI13
aI12
aI13
aI3
aI6
aI3
aI7
aI1
aI12
aI7
aI2
aI1
aI6
aI6
aI11
aI2
aI0
aI1
aI14
aI0
aI2
aI9
aI13
aI11
aI1
aI13
aI12
aI3
aI11
aI13
aI14
aI6
aI1
aI14
aI10
aI10
aI10
aI8
aI0
aI14
aI8
aI7
aI12
aI4
aI4
aI7
aI6
aI12
aI14
aI14
aI9
aI0
aI11
aI1
aI11
aI1
aI6
aI2
aI2
aI11
aI5
aI13
aI13
aI2
aI5
aI8
aI7
aI3
aI4
aI12
aI8
aI10
aI5
aI11
aI8
aI8
aI0
aI6
aI7
aI9
aI4
aI3
aI3
aI7
aI10
aI3
aI6
aI1
aI0
aI7
aI13
aI4
aI2
aI5
aI11
aI9
aI1
aI14
aI3
aI1
aI1
aI10
aI3
aI14
aI4
aI9
aI12
aI6
aI13
aI10
aI1
aI8
aI9
aI4
aI8
aI9
aI12
aI7
aI6
aI11
aI8
aI9
aI4
aI11
aI11
aI11
aI4
aI7
aI8
aI4
aI0
aI8
aI11
aI13
aI13
aI0
aI7
aI12
aI4
aI0
aI4
aI2
aI11
aI10
aI0
aI5
aI5
aI12
aI0
aI3
aI1
aI13
aI4
aI14
aI9
aI4
aI0
aI7
aI6
aI6
aI2
aI6
aI9
aI2
aI6
aI4
aI13
aI0
aI8
aI13
aI8
aI8
aI10
aI10
aI1
aI3
aI3
aI0
aI2
aI1
aI7
aI8
aI9
aI8
aI14
aI3
aI5
aI10
aI7
aI9
aI1
aI3
aI8
aI12
aI6
aI12
aI1
aI1
aI11
aI5
aI7
aI12
aI8
aI2
aI8
aI9
aI8
aI5
aI13
aI2
aI14
aI9
aI6
aI10
aI4
aI6
aI6
aI9
aI5
aI4
aI6
aI12
aI1
aI5
aI9
aI2
aI5
aI2
aI1
aI1
aI13
aI12
aI5
aI11
aI5
aI1
aI13
aI6
aI14
aI9
aI10
aI5
aI13
aI0
aI8
aI1
aI6
aI3
aI5
aI4
aI6
aI14
aI8
aI2
aI9
aI14
aI9
aI9
aI5
aI3
aI12
aI10
aI5
aI7
aI13
aI2
aI11
aI3
aI10
aI1
aI2
aI4
aI0
aI14
aI2
aI6
aI14
aI10
aI11
aI6
aI2
aI9
aI7
aI7
aI12
aI13
aI8
aI11
aI8
aI0
aI7
aI2
aI9
aI12
aI11
aI2
aI3
aI6
aI0
aI9
aI11
aI7
aI14
aI14
aI8
aI2
aI12
aI3
aI10
aI0
aI5
aI4
aI2
aI10
aI3
aI8
aI1
aI10
aI7
aI2
aI0
aI10
aI0
aI13
aI10
aI9
aI13
aI13
aI6
aI3
aI12
aI6
aI3
aI6
aI3
aI1
aI12
aI3
aI14
aI7
aI10
aI0
aI4
aI11
aI12
aI1
aI4
aI11
aI6
aI9
aI10
aI0
aI6
aI6
aI3
aI11
aI0
aI11
aI9
aI14
aI2
aI12
aI10
aI12
aI11
aI0
aI1
aI1
aI5
aI8
aI13
aI8
aI10
aI11
aI3
aI14
aI4
aI7
aI2
aI7
aI14
aI10
aI5
aI8
aI0
aI3
aI3
aI13
aI9
aI12
aI8
aI7
aI2
aI12
aI3
aI10
aI5
aI12
aI13
aI14
aI7
aI13
aI7
aI5
aI14
aI6
aI3
aI11
aI10
aI3
aI13
aI10
aI0
aI0
aI13
aI10
aI14
atbsS'finished'
p74
I00
sS'nReps'
p75
I40
sS'nRemaining'
p76
I0
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p79
NsS'thisIndex'
p80
I14
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I14
sS'nTotal'
p83
I600
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I2
sS'.thisRepN'
p96
I0
sg30
VM
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I2
sg15
(lp100
S'k'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'd'
asg95
I11
sS'.thisRepN'
p103
I0
sg30
VM
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I11
sg15
(lp107
S'd'
asg17
S'Y'
sg14
I1
sa(dp108
g16
(lp109
S'k'
asg18
S'N'
sS'.thisRepN'
p110
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I0
sg15
(lp114
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp115
S'd'
asg95
I0
sa(dp116
g16
(lp117
S'k'
asg18
S'Y'
sS'.thisRepN'
p118
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p119
I3
sS'.thisN'
p120
I3
sS'.thisIndex'
p121
I9
sg15
(lp122
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp123
g16
(lp124
S'k'
asg18
S'Y'
sS'.thisRepN'
p125
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p126
I4
sS'.thisN'
p127
I4
sS'.thisIndex'
p128
I4
sg15
(lp129
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp130
g16
(lp131
S'k'
asg18
S'Y'
sS'.thisRepN'
p132
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p133
I5
sS'.thisN'
p134
I5
sS'.thisIndex'
p135
I1
sg15
(lp136
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp137
S'space'
p138
asg95
I1
sa(dp139
g16
(lp140
S'k'
asg18
S'N'
sS'.thisRepN'
p141
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p142
I6
sS'.thisN'
p143
I6
sS'.thisIndex'
p144
I2
sg15
(lp145
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp146
g16
(lp147
S'd'
asg18
S'Y'
sS'.thisRepN'
p148
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p149
I7
sS'.thisN'
p150
I7
sS'.thisIndex'
p151
I14
sg15
(lp152
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp153
S'space'
p154
asg95
I14
sa(dp155
g16
(lp156
S'k'
asg18
S'N'
sS'.thisRepN'
p157
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p158
I8
sS'.thisN'
p159
I8
sS'.thisIndex'
p160
I12
sg15
(lp161
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp162
g16
(lp163
S'k'
asg18
S'Y'
sS'.thisRepN'
p164
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p165
I9
sS'.thisN'
p166
I9
sS'.thisIndex'
p167
I0
sg15
(lp168
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp169
S'space'
p170
asg95
I0
sa(dp171
g16
(lp172
S'k'
asg18
S'Y'
sS'.thisRepN'
p173
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p174
I10
sS'.thisN'
p175
I10
sS'.thisIndex'
p176
I9
sg15
(lp177
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp178
S'space'
p179
asg95
I9
sa(dp180
g16
(lp181
S'd'
asg18
S'Y'
sS'.thisRepN'
p182
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p183
I11
sS'.thisN'
p184
I11
sS'.thisIndex'
p185
I9
sg15
(lp186
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp187
g16
(lp188
S'k'
asg18
S'Y'
sS'.thisRepN'
p189
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p190
I12
sS'.thisN'
p191
I12
sS'.thisIndex'
p192
I6
sg15
(lp193
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp194
S'space'
p195
asg95
I6
sa(dp196
g16
(lp197
S'd'
asg18
S'N'
sS'.thisRepN'
p198
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p199
I13
sS'.thisN'
p200
I13
sS'.thisIndex'
p201
I3
sg15
(lp202
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp203
g16
(lp204
S'd'
asg18
S'N'
sS'.thisRepN'
p205
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p206
I14
sS'.thisN'
p207
I14
sS'.thisIndex'
p208
I7
sg15
(lp209
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp210
g16
(lp211
S'k'
asg18
S'N'
sS'.thisRepN'
p212
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p213
I0
sS'.thisN'
p214
I15
sS'.thisIndex'
p215
I10
sg15
(lp216
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp217
g16
(lp218
S'd'
asg18
S'N'
sS'.thisRepN'
p219
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p220
I1
sS'.thisN'
p221
I16
sS'.thisIndex'
p222
I13
sg15
(lp223
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp224
g16
(lp225
S'd'
asg18
S'Y'
sS'.thisRepN'
p226
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p227
I2
sS'.thisN'
p228
I17
sS'.thisIndex'
p229
I1
sg15
(lp230
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp231
g16
(lp232
S'd'
asg18
S'Y'
sS'.thisRepN'
p233
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p234
I3
sS'.thisN'
p235
I18
sS'.thisIndex'
p236
I9
sg15
(lp237
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
(lp238
S'space'
p239
asg95
I9
sa(dp240
g16
(lp241
S'd'
asg18
S'Y'
sS'.thisRepN'
p242
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p243
I4
sS'.thisN'
p244
I19
sS'.thisIndex'
p245
I8
sg15
(lp246
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp247
g16
(lp248
S'k'
asg18
S'Y'
sS'.thisRepN'
p249
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p250
I5
sS'.thisN'
p251
I20
sS'.thisIndex'
p252
I14
sg15
(lp253
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp254
S'space'
p255
asg95
I14
sa(dp256
g16
(lp257
S'd'
asg18
S'Y'
sS'.thisRepN'
p258
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p259
I6
sS'.thisN'
p260
I21
sS'.thisIndex'
p261
I2
sg15
(lp262
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp263
g16
(lp264
S'k'
asg18
S'Y'
sS'.thisRepN'
p265
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p266
I7
sS'.thisN'
p267
I22
sS'.thisIndex'
p268
I3
sg15
(lp269
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp270
g16
(lp271
S'd'
asg18
S'N'
sS'.thisRepN'
p272
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p273
I8
sS'.thisN'
p274
I23
sS'.thisIndex'
p275
I4
sg15
(lp276
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp277
g16
(lp278
S'k'
asg18
S'N'
sS'.thisRepN'
p279
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p280
I9
sS'.thisN'
p281
I24
sS'.thisIndex'
p282
I2
sg15
(lp283
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp284
g16
(lp285
S'k'
asg18
S'N'
sS'.thisRepN'
p286
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p287
I10
sS'.thisN'
p288
I25
sS'.thisIndex'
p289
I5
sg15
(lp290
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp291
S'space'
p292
asg95
I5
sa(dp293
g16
(lp294
S'd'
asg18
S'N'
sS'.thisRepN'
p295
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p296
I11
sS'.thisN'
p297
I26
sS'.thisIndex'
p298
I5
sg15
(lp299
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp300
g16
(lp301
S'd'
asg18
S'N'
sS'.thisRepN'
p302
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p303
I12
sS'.thisN'
p304
I27
sS'.thisIndex'
p305
I0
sg15
(lp306
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp307
g16
(lp308
S'k'
asg18
S'N'
sS'.thisRepN'
p309
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p310
I13
sS'.thisN'
p311
I28
sS'.thisIndex'
p312
I14
sg15
(lp313
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp314
S'space'
p315
asg95
I14
sa(dp316
g16
(lp317
S'd'
asg18
S'N'
sS'.thisRepN'
p318
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p319
I14
sS'.thisN'
p320
I29
sS'.thisIndex'
p321
I2
sg15
(lp322
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp323
S'space'
p324
asg95
I2
sa(dp325
g16
(lp326
S'd'
asg18
S'Y'
sS'.thisRepN'
p327
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p328
I0
sS'.thisN'
p329
I30
sS'.thisIndex'
p330
I10
sg15
(lp331
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
Nsg95
I10
sa(dp332
g16
(lp333
S'd'
asg18
S'Y'
sS'.thisRepN'
p334
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p335
I1
sS'.thisN'
p336
I31
sS'.thisIndex'
p337
I14
sg15
(lp338
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
Nsg95
I14
sa(dp339
g16
(lp340
S'd'
asg18
S'N'
sS'.thisRepN'
p341
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p342
I2
sS'.thisN'
p343
I32
sS'.thisIndex'
p344
I5
sg15
(lp345
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp346
g16
(lp347
S'k'
asg18
S'Y'
sS'.thisRepN'
p348
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p349
I3
sS'.thisN'
p350
I33
sS'.thisIndex'
p351
I13
sg15
(lp352
S'd'
asg30
VM
sg17
S'N'
sg14
I1
sg19
(lp353
S'space'
p354
asg95
I13
sa(dp355
g16
(lp356
S'k'
asg18
S'Y'
sS'.thisRepN'
p357
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p358
I4
sS'.thisN'
p359
I34
sS'.thisIndex'
p360
I2
sg15
(lp361
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp362
g16
(lp363
S'd'
asg18
S'Y'
sS'.thisRepN'
p364
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p365
I5
sS'.thisN'
p366
I35
sS'.thisIndex'
p367
I0
sg15
(lp368
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp369
S'space'
p370
asg95
I0
sa(dp371
g16
(lp372
S'd'
asg18
S'Y'
sS'.thisRepN'
p373
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p374
I6
sS'.thisN'
p375
I36
sS'.thisIndex'
p376
I11
sg15
(lp377
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp378
S'space'
p379
asg95
I11
sa(dp380
g16
(lp381
S'k'
asg18
S'N'
sS'.thisRepN'
p382
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p383
I7
sS'.thisN'
p384
I37
sS'.thisIndex'
p385
I1
sg15
(lp386
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp387
S'd'
asg95
I1
sa(dp388
g16
(lp389
S'd'
asg18
S'N'
sS'.thisRepN'
p390
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p391
I8
sS'.thisN'
p392
I38
sS'.thisIndex'
p393
I0
sg15
(lp394
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp395
g16
(lp396
S'k'
asg18
S'Y'
sS'.thisRepN'
p397
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p398
I9
sS'.thisN'
p399
I39
sS'.thisIndex'
p400
I1
sg15
(lp401
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp402
g16
(lp403
S'k'
asg18
S'N'
sS'.thisRepN'
p404
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p405
I10
sS'.thisN'
p406
I40
sS'.thisIndex'
p407
I4
sg15
(lp408
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp409
g16
(lp410
S'd'
asg18
S'Y'
sS'.thisRepN'
p411
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p412
I11
sS'.thisN'
p413
I41
sS'.thisIndex'
p414
I3
sg15
(lp415
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp416
g16
(lp417
S'd'
asg18
S'Y'
sS'.thisRepN'
p418
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p419
I12
sS'.thisN'
p420
I42
sS'.thisIndex'
p421
I9
sg15
(lp422
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp423
g16
(lp424
S'd'
asg18
S'N'
sS'.thisRepN'
p425
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p426
I13
sS'.thisN'
p427
I43
sS'.thisIndex'
p428
I7
sg15
(lp429
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp430
g16
(lp431
S'd'
asg18
S'Y'
sS'.thisRepN'
p432
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p433
I14
sS'.thisN'
p434
I44
sS'.thisIndex'
p435
I7
sg15
(lp436
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp437
g16
(lp438
S'k'
asg18
S'Y'
sS'.thisRepN'
p439
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p440
I0
sS'.thisN'
p441
I45
sS'.thisIndex'
p442
I14
sg15
(lp443
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp444
S'space'
p445
asg95
I14
sa(dp446
g16
(lp447
S'd'
asg18
S'N'
sS'.thisRepN'
p448
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p449
I1
sS'.thisN'
p450
I46
sS'.thisIndex'
p451
I1
sg15
(lp452
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
(lp453
S'space'
p454
asg95
I1
sa(dp455
g16
(lp456
S'd'
asg18
S'N'
sS'.thisRepN'
p457
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p458
I2
sS'.thisN'
p459
I47
sS'.thisIndex'
p460
I1
sg15
(lp461
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp462
g16
(lp463
S'd'
asg18
S'N'
sS'.thisRepN'
p464
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p465
I3
sS'.thisN'
p466
I48
sS'.thisIndex'
p467
I9
sg15
(lp468
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp469
g16
(lp470
S'k'
asg18
S'N'
sg22
I27
sS'.thisN'
p471
I49
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p472
I4
sS'.thisRepN'
p473
I3
sg21
I42
sS'.thisIndex'
p474
I5
sg23
I25
sg15
(lp475
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp476
S'space'
p477
asg95
I5
sa(dp478
g16
(lp479
S'd'
asg95
I2
sS'.thisRepN'
p480
I3
sg30
VM
sg31
g32
sS'.thisTrialN'
p481
I5
sS'.thisN'
p482
I50
sS'.thisIndex'
p483
I2
sg15
(lp484
S'd'
asg17
S'Y'
sg14
I2
sa(dp485
g16
(lp486
S'd'
asg95
I5
sS'.thisRepN'
p487
I3
sg30
VM
sg31
g32
sS'.thisTrialN'
p488
I6
sS'.thisN'
p489
I51
sS'.thisIndex'
p490
I5
sg15
(lp491
S'k'
asg17
S'N'
sg14
I2
sa(dp492
g16
(lp493
S'k'
asg18
S'N'
sS'.thisRepN'
p494
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p495
I7
sS'.thisN'
p496
I52
sS'.thisIndex'
p497
I1
sg15
(lp498
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp499
g16
(lp500
S'd'
asg18
S'N'
sS'.thisRepN'
p501
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p502
I8
sS'.thisN'
p503
I53
sS'.thisIndex'
p504
I4
sg15
(lp505
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp506
g16
(lp507
S'k'
asg18
S'N'
sS'.thisRepN'
p508
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p509
I9
sS'.thisN'
p510
I54
sS'.thisIndex'
p511
I7
sg15
(lp512
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp513
g16
(lp514
S'd'
asg18
S'N'
sS'.thisRepN'
p515
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p516
I10
sS'.thisN'
p517
I55
sS'.thisIndex'
p518
I6
sg15
(lp519
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp520
g16
(lp521
S'k'
asg18
S'Y'
sS'.thisRepN'
p522
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p523
I11
sS'.thisN'
p524
I56
sS'.thisIndex'
p525
I12
sg15
(lp526
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp527
S'space'
p528
asg95
I12
sa(dp529
g16
(lp530
S'k'
asg18
S'Y'
sS'.thisRepN'
p531
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p532
I12
sS'.thisN'
p533
I57
sS'.thisIndex'
p534
I11
sg15
(lp535
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp536
g16
(lp537
S'k'
asg18
S'N'
sS'.thisRepN'
p538
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p539
I13
sS'.thisN'
p540
I58
sS'.thisIndex'
p541
I10
sg15
(lp542
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp543
g16
(lp544
S'd'
asg18
S'Y'
sS'.thisRepN'
p545
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p546
I14
sS'.thisN'
p547
I59
sS'.thisIndex'
p548
I14
sg15
(lp549
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp550
S'space'
p551
asg95
I14
sa(dp552
g16
(lp553
S'd'
asg18
S'N'
sS'.thisRepN'
p554
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p555
I0
sS'.thisN'
p556
I60
sS'.thisIndex'
p557
I11
sg15
(lp558
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp559
g16
(lp560
S'k'
asg18
S'N'
sS'.thisRepN'
p561
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p562
I1
sS'.thisN'
p563
I61
sS'.thisIndex'
p564
I8
sg15
(lp565
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp566
g16
(lp567
S'k'
asg18
S'N'
sS'.thisRepN'
p568
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p569
I2
sS'.thisN'
p570
I62
sS'.thisIndex'
p571
I5
sg15
(lp572
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp573
g16
(lp574
S'd'
asg18
S'Y'
sS'.thisRepN'
p575
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p576
I3
sS'.thisN'
p577
I63
sS'.thisIndex'
p578
I11
sg15
(lp579
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp580
S'space'
p581
asg95
I11
sa(dp582
g16
(lp583
S'd'
asg18
S'N'
sS'.thisRepN'
p584
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p585
I4
sS'.thisN'
p586
I64
sS'.thisIndex'
p587
I4
sg15
(lp588
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp589
g16
(lp590
S'd'
asg18
S'N'
sS'.thisRepN'
p591
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p592
I5
sS'.thisN'
p593
I65
sS'.thisIndex'
p594
I9
sg15
(lp595
S'k'
asg30
VM
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp596
g16
(lp597
S'd'
asg18
S'Y'
sS'.thisRepN'
p598
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p599
I6
sS'.thisN'
p600
I66
sS'.thisIndex'
p601
I13
sg15
(lp602
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp603
S'space'
p604
asg95
I13
sa(dp605
g16
(lp606
S'k'
asg18
S'N'
sS'.thisRepN'
p607
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p608
I7
sS'.thisN'
p609
I67
sS'.thisIndex'
p610
I10
sg15
(lp611
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp612
g16
(lp613
S'd'
asg18
S'Y'
sS'.thisRepN'
p614
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p615
I8
sS'.thisN'
p616
I68
sS'.thisIndex'
p617
I2
sg15
(lp618
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp619
S'space'
p620
asg95
I2
sa(dp621
g16
(lp622
S'd'
asg18
S'Y'
sS'.thisRepN'
p623
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p624
I9
sS'.thisN'
p625
I69
sS'.thisIndex'
p626
I8
sg15
(lp627
S'k'
asg30
VM
sg17
S'N'
sg14
I2
sg19
(lp628
S'space'
p629
asg95
I8
sa(dp630
g16
(lp631
S'k'
asg18
S'N'
sS'.thisRepN'
p632
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p633
I10
sS'.thisN'
p634
I70
sS'.thisIndex'
p635
I12
sg15
(lp636
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp637
g16
(lp638
S'k'
asg18
S'N'
sS'.thisRepN'
p639
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p640
I11
sS'.thisN'
p641
I71
sS'.thisIndex'
p642
I10
sg15
(lp643
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp644
S'space'
p645
asg95
I10
sa(dp646
g16
(lp647
S'k'
asg18
S'Y'
sS'.thisRepN'
p648
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p649
I12
sS'.thisN'
p650
I72
sS'.thisIndex'
p651
I7
sg15
(lp652
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp653
S'space'
p654
asg95
I7
sa(dp655
g16
(lp656
S'd'
asg18
S'N'
sS'.thisRepN'
p657
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p658
I13
sS'.thisN'
p659
I73
sS'.thisIndex'
p660
I0
sg15
(lp661
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp662
g16
(lp663
S'd'
asg18
S'Y'
sS'.thisRepN'
p664
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p665
I14
sS'.thisN'
p666
I74
sS'.thisIndex'
p667
I10
sg15
(lp668
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp669
S'space'
p670
asg95
I10
sa(dp671
g16
(lp672
S'k'
asg18
S'N'
sS'.thisRepN'
p673
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p674
I0
sS'.thisN'
p675
I75
sS'.thisIndex'
p676
I1
sg15
(lp677
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp678
g16
(lp679
S'k'
asg18
S'N'
sS'.thisRepN'
p680
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p681
I1
sS'.thisN'
p682
I76
sS'.thisIndex'
p683
I7
sg15
(lp684
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp685
g16
(lp686
S'k'
asg18
S'N'
sS'.thisRepN'
p687
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p688
I2
sS'.thisN'
p689
I77
sS'.thisIndex'
p690
I3
sg15
(lp691
S'd'
asg30
VM
sg17
S'N'
sg14
I2
sg19
(lp692
S'space'
p693
asg95
I3
sa(dp694
g16
(lp695
S'k'
asg18
S'Y'
sS'.thisRepN'
p696
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p697
I3
sS'.thisN'
p698
I78
sS'.thisIndex'
p699
I4
sg15
(lp700
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp701
S'space'
p702
asg95
I4
sa(dp703
g16
(lp704
S'k'
asg18
S'Y'
sS'.thisRepN'
p705
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p706
I4
sS'.thisN'
p707
I79
sS'.thisIndex'
p708
I11
sg15
(lp709
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp710
S'space'
p711
asg95
I11
sa(dp712
g16
(lp713
S'd'
asg18
S'Y'
sS'.thisRepN'
p714
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p715
I5
sS'.thisN'
p716
I80
sS'.thisIndex'
p717
I13
sg15
(lp718
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp719
S'space'
p720
asg95
I13
sa(dp721
g16
(lp722
S'd'
asg18
S'Y'
sS'.thisRepN'
p723
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p724
I6
sS'.thisN'
p725
I81
sS'.thisIndex'
p726
I13
sg15
(lp727
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp728
S'space'
p729
asg95
I13
sa(dp730
g16
(lp731
S'k'
asg18
S'N'
sS'.thisRepN'
p732
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p733
I7
sS'.thisN'
p734
I82
sS'.thisIndex'
p735
I3
sg15
(lp736
S'd'
asg30
VM
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp737
g16
(lp738
S'd'
asg18
S'N'
sS'.thisRepN'
p739
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p740
I8
sS'.thisN'
p741
I83
sS'.thisIndex'
p742
I11
sg15
(lp743
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp744
g16
(lp745
S'd'
asg18
S'N'
sS'.thisRepN'
p746
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p747
I9
sS'.thisN'
p748
I84
sS'.thisIndex'
p749
I9
sg15
(lp750
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp751
g16
(lp752
S'd'
asg18
S'Y'
sS'.thisRepN'
p753
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p754
I10
sS'.thisN'
p755
I85
sS'.thisIndex'
p756
I1
sg15
(lp757
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp758
S'space'
p759
asg95
I1
sa(dp760
g16
(lp761
S'k'
asg18
S'N'
sS'.thisRepN'
p762
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p763
I11
sS'.thisN'
p764
I86
sS'.thisIndex'
p765
I5
sg15
(lp766
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp767
g16
(lp768
S'k'
asg18
S'N'
sS'.thisRepN'
p769
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p770
I12
sS'.thisN'
p771
I87
sS'.thisIndex'
p772
I14
sg15
(lp773
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp774
g16
(lp775
S'k'
asg18
S'Y'
sS'.thisRepN'
p776
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p777
I13
sS'.thisN'
p778
I88
sS'.thisIndex'
p779
I4
sg15
(lp780
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp781
S'space'
p782
asg95
I4
sa(dp783
g16
(lp784
S'd'
asg18
S'Y'
sS'.thisRepN'
p785
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p786
I14
sS'.thisN'
p787
I89
sS'.thisIndex'
p788
I5
sg15
(lp789
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp790
S'space'
p791
asg95
I5
sa(dp792
g16
(lp793
S'd'
asg18
S'Y'
sS'.thisRepN'
p794
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p795
I0
sS'.thisN'
p796
I90
sS'.thisIndex'
p797
I3
sg15
(lp798
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp799
S'space'
p800
asg95
I3
sa(dp801
g16
(lp802
S'k'
asg18
S'Y'
sS'.thisRepN'
p803
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p804
I1
sS'.thisN'
p805
I91
sS'.thisIndex'
p806
I9
sg15
(lp807
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp808
S'space'
p809
asg95
I9
sa(dp810
g16
(lp811
S'k'
asg18
S'N'
sS'.thisRepN'
p812
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p813
I2
sS'.thisN'
p814
I92
sS'.thisIndex'
p815
I14
sg15
(lp816
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp817
g16
(lp818
S'd'
asg18
S'N'
sS'.thisRepN'
p819
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p820
I3
sS'.thisN'
p821
I93
sS'.thisIndex'
p822
I13
sg15
(lp823
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I13
sa(dp824
g16
(lp825
S'k'
asg18
S'N'
sS'.thisRepN'
p826
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p827
I4
sS'.thisN'
p828
I94
sS'.thisIndex'
p829
I4
sg15
(lp830
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp831
g16
(lp832
S'k'
asg18
S'N'
sS'.thisRepN'
p833
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p834
I5
sS'.thisN'
p835
I95
sS'.thisIndex'
p836
I11
sg15
(lp837
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp838
g16
(lp839
S'k'
asg18
S'Y'
sS'.thisRepN'
p840
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p841
I6
sS'.thisN'
p842
I96
sS'.thisIndex'
p843
I2
sg15
(lp844
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp845
S'space'
p846
asg95
I2
sa(dp847
g16
(lp848
S'k'
asg18
S'Y'
sS'.thisRepN'
p849
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p850
I7
sS'.thisN'
p851
I97
sS'.thisIndex'
p852
I14
sg15
(lp853
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp854
S'space'
p855
asg95
I14
sa(dp856
g16
(lp857
S'd'
asg18
S'Y'
sS'.thisRepN'
p858
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p859
I8
sS'.thisN'
p860
I98
sS'.thisIndex'
p861
I10
sg15
(lp862
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp863
S'space'
p864
asg95
I10
sa(dp865
g16
(lp866
S'k'
asg18
S'N'
sg22
I45
sS'.thisN'
p867
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p868
I9
sS'.thisRepN'
p869
I6
sg21
I45
sS'.thisIndex'
p870
I8
sg23
I21
sg15
(lp871
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp872
g16
(lp873
S'd'
asg95
I5
sS'.thisRepN'
p874
I6
sg30
VM
sg31
g32
sS'.thisTrialN'
p875
I10
sS'.thisN'
p876
I100
sS'.thisIndex'
p877
I5
sg15
(lp878
S'd'
asg17
S'Y'
sg14
I3
sa(dp879
g16
(lp880
S'k'
asg95
I7
sS'.thisRepN'
p881
I6
sg30
VM
sg31
g32
sS'.thisTrialN'
p882
I11
sS'.thisN'
p883
I101
sS'.thisIndex'
p884
I7
sg15
(lp885
S'k'
asg17
S'Y'
sg14
I3
sa(dp886
g16
(lp887
S'd'
asg18
S'N'
sS'.thisRepN'
p888
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p889
I12
sS'.thisN'
p890
I102
sS'.thisIndex'
p891
I14
sg15
(lp892
S'k'
asg30
VM
sg17
S'N'
sg14
I3
sg19
Nsg95
I14
sa(dp893
g16
(lp894
S'k'
asg18
S'Y'
sS'.thisRepN'
p895
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p896
I13
sS'.thisN'
p897
I103
sS'.thisIndex'
p898
I11
sg15
(lp899
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp900
S'space'
p901
asg95
I11
sa(dp902
g16
(lp903
S'd'
asg18
S'N'
sS'.thisRepN'
p904
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p905
I14
sS'.thisN'
p906
I104
sS'.thisIndex'
p907
I8
sg15
(lp908
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp909
g16
(lp910
S'd'
asg18
S'Y'
sS'.thisRepN'
p911
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p912
I0
sS'.thisN'
p913
I105
sS'.thisIndex'
p914
I6
sg15
(lp915
S'k'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp916
S'space'
p917
asg95
I6
sa(dp918
g16
(lp919
S'k'
asg18
S'N'
sS'.thisRepN'
p920
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p921
I1
sS'.thisN'
p922
I106
sS'.thisIndex'
p923
I3
sg15
(lp924
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp925
S'space'
p926
asg95
I3
sa(dp927
g16
(lp928
S'k'
asg18
S'Y'
sS'.thisRepN'
p929
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p930
I2
sS'.thisN'
p931
I107
sS'.thisIndex'
p932
I3
sg15
(lp933
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp934
S'space'
p935
asg95
I3
sa(dp936
g16
(lp937
S'k'
asg18
S'N'
sS'.thisRepN'
p938
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p939
I3
sS'.thisN'
p940
I108
sS'.thisIndex'
p941
I13
sg15
(lp942
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp943
g16
(lp944
S'k'
asg18
S'N'
sS'.thisRepN'
p945
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p946
I4
sS'.thisN'
p947
I109
sS'.thisIndex'
p948
I11
sg15
(lp949
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp950
g16
(lp951
S'd'
asg18
S'Y'
sS'.thisRepN'
p952
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p953
I5
sS'.thisN'
p954
I110
sS'.thisIndex'
p955
I1
sg15
(lp956
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp957
g16
(lp958
S'd'
asg18
S'Y'
sS'.thisRepN'
p959
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p960
I6
sS'.thisN'
p961
I111
sS'.thisIndex'
p962
I5
sg15
(lp963
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp964
S'space'
p965
asg95
I5
sa(dp966
g16
(lp967
S'k'
asg18
S'Y'
sS'.thisRepN'
p968
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p969
I7
sS'.thisN'
p970
I112
sS'.thisIndex'
p971
I4
sg15
(lp972
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp973
g16
(lp974
S'd'
asg18
S'N'
sS'.thisRepN'
p975
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p976
I8
sS'.thisN'
p977
I113
sS'.thisIndex'
p978
I0
sg15
(lp979
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp980
g16
(lp981
S'k'
asg18
S'Y'
sS'.thisRepN'
p982
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p983
I9
sS'.thisN'
p984
I114
sS'.thisIndex'
p985
I14
sg15
(lp986
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp987
S'space'
p988
asg95
I14
sa(dp989
g16
(lp990
S'd'
asg18
S'N'
sS'.thisRepN'
p991
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p992
I10
sS'.thisN'
p993
I115
sS'.thisIndex'
p994
I9
sg15
(lp995
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp996
S'space'
p997
asg95
I9
sa(dp998
g16
(lp999
S'k'
asg18
S'Y'
sS'.thisRepN'
p1000
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1001
I11
sS'.thisN'
p1002
I116
sS'.thisIndex'
p1003
I13
sg15
(lp1004
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1005
S'space'
p1006
asg95
I13
sa(dp1007
g16
(lp1008
S'k'
asg18
S'Y'
sS'.thisRepN'
p1009
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1010
I12
sS'.thisN'
p1011
I117
sS'.thisIndex'
p1012
I8
sg15
(lp1013
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1014
S'space'
p1015
asg95
I8
sa(dp1016
g16
(lp1017
S'k'
asg18
S'Y'
sS'.thisRepN'
p1018
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1019
I13
sS'.thisN'
p1020
I118
sS'.thisIndex'
p1021
I12
sg15
(lp1022
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1023
S'space'
p1024
asg95
I12
sa(dp1025
g16
(lp1026
S'k'
asg18
S'Y'
sS'.thisRepN'
p1027
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1028
I14
sS'.thisN'
p1029
I119
sS'.thisIndex'
p1030
I0
sg15
(lp1031
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp1032
S'space'
p1033
asg95
I0
sa(dp1034
g16
(lp1035
S'k'
asg18
S'N'
sS'.thisRepN'
p1036
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1037
I0
sS'.thisN'
p1038
I120
sS'.thisIndex'
p1039
I10
sg15
(lp1040
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1041
g16
(lp1042
S'k'
asg18
S'Y'
sS'.thisRepN'
p1043
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1044
I1
sS'.thisN'
p1045
I121
sS'.thisIndex'
p1046
I14
sg15
(lp1047
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1048
S'space'
p1049
asg95
I14
sa(dp1050
g16
(lp1051
S'k'
asg18
S'Y'
sS'.thisRepN'
p1052
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1053
I2
sS'.thisN'
p1054
I122
sS'.thisIndex'
p1055
I14
sg15
(lp1056
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1057
S'space'
p1058
asg95
I14
sa(dp1059
g16
(lp1060
S'd'
asg18
S'N'
sS'.thisRepN'
p1061
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1062
I3
sS'.thisN'
p1063
I123
sS'.thisIndex'
p1064
I3
sg15
(lp1065
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1066
g16
(lp1067
S'd'
asg18
S'N'
sS'.thisRepN'
p1068
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1069
I4
sS'.thisN'
p1070
I124
sS'.thisIndex'
p1071
I12
sg15
(lp1072
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1073
g16
(lp1074
S'd'
asg18
S'Y'
sS'.thisRepN'
p1075
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1076
I5
sS'.thisN'
p1077
I125
sS'.thisIndex'
p1078
I13
sg15
(lp1079
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1080
g16
(lp1081
S'k'
asg18
S'Y'
sS'.thisRepN'
p1082
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1083
I6
sS'.thisN'
p1084
I126
sS'.thisIndex'
p1085
I8
sg15
(lp1086
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1087
S'space'
p1088
asg95
I8
sa(dp1089
g16
(lp1090
S'k'
asg18
S'Y'
sS'.thisRepN'
p1091
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1092
I7
sS'.thisN'
p1093
I127
sS'.thisIndex'
p1094
I9
sg15
(lp1095
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1096
S'space'
p1097
asg95
I9
sa(dp1098
g16
(lp1099
S'k'
asg18
S'Y'
sS'.thisRepN'
p1100
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1101
I8
sS'.thisN'
p1102
I128
sS'.thisIndex'
p1103
I5
sg15
(lp1104
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp1105
S'space'
p1106
asg95
I5
sa(dp1107
g16
(lp1108
S'k'
asg18
S'Y'
sS'.thisRepN'
p1109
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1110
I9
sS'.thisN'
p1111
I129
sS'.thisIndex'
p1112
I3
sg15
(lp1113
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp1114
S'space'
p1115
asg95
I3
sa(dp1116
g16
(lp1117
S'd'
asg18
S'Y'
sS'.thisRepN'
p1118
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1119
I10
sS'.thisN'
p1120
I130
sS'.thisIndex'
p1121
I2
sg15
(lp1122
S'k'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp1123
S'space'
p1124
asg95
I2
sa(dp1125
g16
(lp1126
S'd'
asg18
S'Y'
sS'.thisRepN'
p1127
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1128
I11
sS'.thisN'
p1129
I131
sS'.thisIndex'
p1130
I2
sg15
(lp1131
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1132
S'space'
p1133
asg95
I2
sa(dp1134
g16
(lp1135
S'k'
asg18
S'N'
sS'.thisRepN'
p1136
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1137
I12
sS'.thisN'
p1138
I132
sS'.thisIndex'
p1139
I2
sg15
(lp1140
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1141
g16
(lp1142
S'd'
asg18
S'N'
sS'.thisRepN'
p1143
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1144
I13
sS'.thisN'
p1145
I133
sS'.thisIndex'
p1146
I1
sg15
(lp1147
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1148
g16
(lp1149
S'd'
asg18
S'N'
sS'.thisRepN'
p1150
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1151
I14
sS'.thisN'
p1152
I134
sS'.thisIndex'
p1153
I3
sg15
(lp1154
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1155
g16
(lp1156
S'd'
asg18
S'Y'
sS'.thisRepN'
p1157
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1158
I0
sS'.thisN'
p1159
I135
sS'.thisIndex'
p1160
I8
sg15
(lp1161
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1162
S'space'
p1163
asg95
I8
sa(dp1164
g16
(lp1165
S'k'
asg18
S'N'
sS'.thisRepN'
p1166
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1167
I1
sS'.thisN'
p1168
I136
sS'.thisIndex'
p1169
I12
sg15
(lp1170
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1171
g16
(lp1172
S'k'
asg18
S'Y'
sS'.thisRepN'
p1173
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1174
I2
sS'.thisN'
p1175
I137
sS'.thisIndex'
p1176
I10
sg15
(lp1177
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1178
S'space'
p1179
asg95
I10
sa(dp1180
g16
(lp1181
S'd'
asg18
S'N'
sS'.thisRepN'
p1182
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1183
I3
sS'.thisN'
p1184
I138
sS'.thisIndex'
p1185
I8
sg15
(lp1186
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1187
g16
(lp1188
S'd'
asg18
S'N'
sS'.thisRepN'
p1189
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1190
I4
sS'.thisN'
p1191
I139
sS'.thisIndex'
p1192
I5
sg15
(lp1193
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1194
g16
(lp1195
S'd'
asg18
S'Y'
sS'.thisRepN'
p1196
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1197
I5
sS'.thisN'
p1198
I140
sS'.thisIndex'
p1199
I12
sg15
(lp1200
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1201
S'space'
p1202
asg95
I12
sa(dp1203
g16
(lp1204
S'k'
asg18
S'N'
sS'.thisRepN'
p1205
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1206
I6
sS'.thisN'
p1207
I141
sS'.thisIndex'
p1208
I7
sg15
(lp1209
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1210
g16
(lp1211
S'd'
asg18
S'Y'
sS'.thisRepN'
p1212
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1213
I7
sS'.thisN'
p1214
I142
sS'.thisIndex'
p1215
I12
sg15
(lp1216
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1217
g16
(lp1218
S'd'
asg18
S'N'
sS'.thisRepN'
p1219
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1220
I8
sS'.thisN'
p1221
I143
sS'.thisIndex'
p1222
I5
sg15
(lp1223
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1224
g16
(lp1225
S'd'
asg18
S'Y'
sS'.thisRepN'
p1226
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1227
I9
sS'.thisN'
p1228
I144
sS'.thisIndex'
p1229
I5
sg15
(lp1230
S'k'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp1231
S'space'
p1232
asg95
I5
sa(dp1233
g16
(lp1234
S'k'
asg18
S'N'
sS'.thisRepN'
p1235
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1236
I10
sS'.thisN'
p1237
I145
sS'.thisIndex'
p1238
I5
sg15
(lp1239
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1240
g16
(lp1241
S'k'
asg18
S'N'
sS'.thisRepN'
p1242
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1243
I11
sS'.thisN'
p1244
I146
sS'.thisIndex'
p1245
I11
sg15
(lp1246
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp1247
g16
(lp1248
S'k'
asg18
S'N'
sS'.thisRepN'
p1249
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1250
I12
sS'.thisN'
p1251
I147
sS'.thisIndex'
p1252
I12
sg15
(lp1253
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1254
g16
(lp1255
S'k'
asg18
S'N'
sS'.thisRepN'
p1256
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1257
I13
sS'.thisN'
p1258
I148
sS'.thisIndex'
p1259
I4
sg15
(lp1260
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1261
g16
(lp1262
S'd'
asg18
S'N'
sg22
I42
sS'.thisN'
p1263
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1264
I14
sS'.thisRepN'
p1265
I9
sg21
I39
sS'.thisIndex'
p1266
I3
sg23
I25
sg15
(lp1267
S'k'
asg30
VM
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1268
g16
(lp1269
S'k'
asg95
I0
sS'.thisRepN'
p1270
I10
sg30
VM
sg31
g32
sS'.thisTrialN'
p1271
I0
sS'.thisN'
p1272
I150
sS'.thisIndex'
p1273
I0
sg15
(lp1274
S'k'
asg17
S'Y'
sg14
I4
sa(dp1275
g16
(lp1276
S'd'
asg95
I4
sS'.thisRepN'
p1277
I10
sg30
VM
sg31
g32
sS'.thisTrialN'
p1278
I1
sS'.thisN'
p1279
I151
sS'.thisIndex'
p1280
I4
sg15
(lp1281
S'd'
asg17
S'Y'
sg14
I4
sa(dp1282
g16
(lp1283
S'd'
asg18
S'N'
sS'.thisRepN'
p1284
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1285
I2
sS'.thisN'
p1286
I152
sS'.thisIndex'
p1287
I1
sg15
(lp1288
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1289
g16
(lp1290
S'k'
asg18
S'Y'
sS'.thisRepN'
p1291
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1292
I3
sS'.thisN'
p1293
I153
sS'.thisIndex'
p1294
I4
sg15
(lp1295
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1296
S'space'
p1297
asg95
I4
sa(dp1298
g16
(lp1299
S'd'
asg18
S'N'
sS'.thisRepN'
p1300
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1301
I4
sS'.thisN'
p1302
I154
sS'.thisIndex'
p1303
I12
sg15
(lp1304
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1305
g16
(lp1306
S'k'
asg18
S'N'
sS'.thisRepN'
p1307
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1308
I5
sS'.thisN'
p1309
I155
sS'.thisIndex'
p1310
I3
sg15
(lp1311
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1312
g16
(lp1313
S'd'
asg18
S'N'
sS'.thisRepN'
p1314
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1315
I6
sS'.thisN'
p1316
I156
sS'.thisIndex'
p1317
I3
sg15
(lp1318
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1319
g16
(lp1320
S'k'
asg18
S'Y'
sS'.thisRepN'
p1321
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1322
I7
sS'.thisN'
p1323
I157
sS'.thisIndex'
p1324
I6
sg15
(lp1325
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1326
S'space'
p1327
asg95
I6
sa(dp1328
g16
(lp1329
S'k'
asg18
S'Y'
sS'.thisRepN'
p1330
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1331
I8
sS'.thisN'
p1332
I158
sS'.thisIndex'
p1333
I12
sg15
(lp1334
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1335
S'space'
p1336
asg95
I12
sa(dp1337
g16
(lp1338
S'k'
asg18
S'N'
sS'.thisRepN'
p1339
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1340
I9
sS'.thisN'
p1341
I159
sS'.thisIndex'
p1342
I10
sg15
(lp1343
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1344
g16
(lp1345
S'k'
asg18
S'Y'
sS'.thisRepN'
p1346
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1347
I10
sS'.thisN'
p1348
I160
sS'.thisIndex'
p1349
I2
sg15
(lp1350
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1351
S'space'
p1352
asg95
I2
sa(dp1353
g16
(lp1354
S'd'
asg18
S'N'
sS'.thisRepN'
p1355
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1356
I11
sS'.thisN'
p1357
I161
sS'.thisIndex'
p1358
I3
sg15
(lp1359
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
(lp1360
S'space'
p1361
asg95
I3
sa(dp1362
g16
(lp1363
S'd'
asg18
S'Y'
sS'.thisRepN'
p1364
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1365
I12
sS'.thisN'
p1366
I162
sS'.thisIndex'
p1367
I3
sg15
(lp1368
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1369
S'space'
p1370
asg95
I3
sa(dp1371
g16
(lp1372
S'd'
asg18
S'N'
sS'.thisRepN'
p1373
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1374
I13
sS'.thisN'
p1375
I163
sS'.thisIndex'
p1376
I11
sg15
(lp1377
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I11
sa(dp1378
g16
(lp1379
S'd'
asg18
S'Y'
sS'.thisRepN'
p1380
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1381
I14
sS'.thisN'
p1382
I164
sS'.thisIndex'
p1383
I13
sg15
(lp1384
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1385
g16
(lp1386
S'd'
asg18
S'Y'
sS'.thisRepN'
p1387
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1388
I0
sS'.thisN'
p1389
I165
sS'.thisIndex'
p1390
I9
sg15
(lp1391
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1392
S'space'
p1393
asg95
I9
sa(dp1394
g16
(lp1395
S'k'
asg18
S'N'
sS'.thisRepN'
p1396
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1397
I1
sS'.thisN'
p1398
I166
sS'.thisIndex'
p1399
I9
sg15
(lp1400
S'd'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I9
sa(dp1401
g16
(lp1402
S'k'
asg18
S'N'
sS'.thisRepN'
p1403
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1404
I2
sS'.thisN'
p1405
I167
sS'.thisIndex'
p1406
I7
sg15
(lp1407
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1408
g16
(lp1409
S'k'
asg18
S'Y'
sS'.thisRepN'
p1410
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1411
I3
sS'.thisN'
p1412
I168
sS'.thisIndex'
p1413
I4
sg15
(lp1414
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1415
g16
(lp1416
S'd'
asg18
S'Y'
sS'.thisRepN'
p1417
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1418
I4
sS'.thisN'
p1419
I169
sS'.thisIndex'
p1420
I11
sg15
(lp1421
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1422
g16
(lp1423
S'd'
asg18
S'N'
sS'.thisRepN'
p1424
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1425
I5
sS'.thisN'
p1426
I170
sS'.thisIndex'
p1427
I11
sg15
(lp1428
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1429
g16
(lp1430
S'k'
asg18
S'N'
sS'.thisRepN'
p1431
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1432
I6
sS'.thisN'
p1433
I171
sS'.thisIndex'
p1434
I4
sg15
(lp1435
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1436
g16
(lp1437
S'k'
asg18
S'Y'
sS'.thisRepN'
p1438
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1439
I7
sS'.thisN'
p1440
I172
sS'.thisIndex'
p1441
I13
sg15
(lp1442
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1443
S'space'
p1444
asg95
I13
sa(dp1445
g16
(lp1446
S'd'
asg18
S'N'
sS'.thisRepN'
p1447
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1448
I8
sS'.thisN'
p1449
I173
sS'.thisIndex'
p1450
I0
sg15
(lp1451
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1452
g16
(lp1453
S'k'
asg18
S'N'
sS'.thisRepN'
p1454
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1455
I9
sS'.thisN'
p1456
I174
sS'.thisIndex'
p1457
I7
sg15
(lp1458
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1459
g16
(lp1460
S'k'
asg18
S'Y'
sS'.thisRepN'
p1461
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1462
I10
sS'.thisN'
p1463
I175
sS'.thisIndex'
p1464
I1
sg15
(lp1465
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1466
S'space'
p1467
asg95
I1
sa(dp1468
g16
(lp1469
S'k'
asg18
S'Y'
sS'.thisRepN'
p1470
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1471
I11
sS'.thisN'
p1472
I176
sS'.thisIndex'
p1473
I10
sg15
(lp1474
S'd'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I10
sa(dp1475
g16
(lp1476
S'd'
asg18
S'N'
sS'.thisRepN'
p1477
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1478
I12
sS'.thisN'
p1479
I177
sS'.thisIndex'
p1480
I10
sg15
(lp1481
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1482
g16
(lp1483
S'k'
asg18
S'Y'
sS'.thisRepN'
p1484
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1485
I13
sS'.thisN'
p1486
I178
sS'.thisIndex'
p1487
I6
sg15
(lp1488
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1489
S'space'
p1490
asg95
I6
sa(dp1491
g16
(lp1492
S'd'
asg18
S'Y'
sS'.thisRepN'
p1493
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1494
I14
sS'.thisN'
p1495
I179
sS'.thisIndex'
p1496
I9
sg15
(lp1497
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1498
S'space'
p1499
asg95
I9
sa(dp1500
g16
(lp1501
S'k'
asg18
S'N'
sS'.thisRepN'
p1502
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1503
I0
sS'.thisN'
p1504
I180
sS'.thisIndex'
p1505
I12
sg15
(lp1506
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1507
g16
(lp1508
S'k'
asg18
S'Y'
sS'.thisRepN'
p1509
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1510
I1
sS'.thisN'
p1511
I181
sS'.thisIndex'
p1512
I6
sg15
(lp1513
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1514
S'space'
p1515
asg95
I6
sa(dp1516
g16
(lp1517
S'd'
asg18
S'Y'
sS'.thisRepN'
p1518
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1519
I2
sS'.thisN'
p1520
I182
sS'.thisIndex'
p1521
I5
sg15
(lp1522
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1523
S'space'
p1524
asg95
I5
sa(dp1525
g16
(lp1526
S'k'
asg18
S'N'
sS'.thisRepN'
p1527
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1528
I3
sS'.thisN'
p1529
I183
sS'.thisIndex'
p1530
I0
sg15
(lp1531
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1532
g16
(lp1533
S'd'
asg18
S'Y'
sS'.thisRepN'
p1534
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1535
I4
sS'.thisN'
p1536
I184
sS'.thisIndex'
p1537
I11
sg15
(lp1538
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I11
sa(dp1539
g16
(lp1540
S'd'
asg18
S'N'
sS'.thisRepN'
p1541
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1542
I5
sS'.thisN'
p1543
I185
sS'.thisIndex'
p1544
I13
sg15
(lp1545
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I13
sa(dp1546
g16
(lp1547
S'k'
asg18
S'N'
sS'.thisRepN'
p1548
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1549
I6
sS'.thisN'
p1550
I186
sS'.thisIndex'
p1551
I12
sg15
(lp1552
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1553
g16
(lp1554
S'd'
asg18
S'N'
sS'.thisRepN'
p1555
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1556
I7
sS'.thisN'
p1557
I187
sS'.thisIndex'
p1558
I10
sg15
(lp1559
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1560
g16
(lp1561
S'd'
asg18
S'Y'
sS'.thisRepN'
p1562
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1563
I8
sS'.thisN'
p1564
I188
sS'.thisIndex'
p1565
I3
sg15
(lp1566
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1567
S'space'
p1568
asg95
I3
sa(dp1569
g16
(lp1570
S'k'
asg18
S'N'
sS'.thisRepN'
p1571
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1572
I9
sS'.thisN'
p1573
I189
sS'.thisIndex'
p1574
I9
sg15
(lp1575
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1576
g16
(lp1577
S'd'
asg18
S'Y'
sS'.thisRepN'
p1578
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1579
I10
sS'.thisN'
p1580
I190
sS'.thisIndex'
p1581
I1
sg15
(lp1582
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
(lp1583
S'space'
p1584
asg95
I1
sa(dp1585
g16
(lp1586
S'd'
asg18
S'N'
sS'.thisRepN'
p1587
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1588
I11
sS'.thisN'
p1589
I191
sS'.thisIndex'
p1590
I1
sg15
(lp1591
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1592
g16
(lp1593
S'k'
asg18
S'N'
sS'.thisRepN'
p1594
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1595
I12
sS'.thisN'
p1596
I192
sS'.thisIndex'
p1597
I0
sg15
(lp1598
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1599
g16
(lp1600
S'k'
asg18
S'N'
sS'.thisRepN'
p1601
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1602
I13
sS'.thisN'
p1603
I193
sS'.thisIndex'
p1604
I9
sg15
(lp1605
S'd'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I9
sa(dp1606
g16
(lp1607
S'd'
asg18
S'Y'
sS'.thisRepN'
p1608
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1609
I14
sS'.thisN'
p1610
I194
sS'.thisIndex'
p1611
I12
sg15
(lp1612
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1613
S'space'
p1614
asg95
I12
sa(dp1615
g16
(lp1616
S'd'
asg18
S'Y'
sS'.thisRepN'
p1617
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1618
I0
sS'.thisN'
p1619
I195
sS'.thisIndex'
p1620
I2
sg15
(lp1621
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
(lp1622
S'space'
p1623
asg95
I2
sa(dp1624
g16
(lp1625
S'd'
asg18
S'N'
sS'.thisRepN'
p1626
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1627
I1
sS'.thisN'
p1628
I196
sS'.thisIndex'
p1629
I4
sg15
(lp1630
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1631
g16
(lp1632
S'd'
asg18
S'N'
sS'.thisRepN'
p1633
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1634
I2
sS'.thisN'
p1635
I197
sS'.thisIndex'
p1636
I7
sg15
(lp1637
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1638
g16
(lp1639
S'k'
asg18
S'N'
sS'.thisRepN'
p1640
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1641
I3
sS'.thisN'
p1642
I198
sS'.thisIndex'
p1643
I0
sg15
(lp1644
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1645
g16
(lp1646
S'k'
asg18
S'N'
sg22
I42
sS'.thisN'
p1647
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1648
I4
sS'.thisRepN'
p1649
I13
sg21
I41
sS'.thisIndex'
p1650
I7
sg23
I21
sg15
(lp1651
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1652
g16
(lp1653
S'k'
asg95
I14
sS'.thisRepN'
p1654
I13
sg30
VM
sg31
g32
sS'.thisTrialN'
p1655
I5
sS'.thisN'
p1656
I200
sS'.thisIndex'
p1657
I14
sg15
(lp1658
S'd'
asg17
S'N'
sg14
I5
sa(dp1659
g16
(lp1660
S'd'
asg95
I8
sS'.thisRepN'
p1661
I13
sg30
VM
sg31
g32
sS'.thisTrialN'
p1662
I6
sS'.thisN'
p1663
I201
sS'.thisIndex'
p1664
I8
sg15
(lp1665
S'd'
asg17
S'Y'
sg14
I5
sa(dp1666
g16
(lp1667
S'd'
asg18
S'N'
sS'.thisRepN'
p1668
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1669
I7
sS'.thisN'
p1670
I202
sS'.thisIndex'
p1671
I1
sg15
(lp1672
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1673
g16
(lp1674
S'd'
asg18
S'Y'
sS'.thisRepN'
p1675
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1676
I8
sS'.thisN'
p1677
I203
sS'.thisIndex'
p1678
I1
sg15
(lp1679
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1680
S'space'
p1681
asg95
I1
sa(dp1682
g16
(lp1683
S'd'
asg18
S'N'
sS'.thisRepN'
p1684
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1685
I9
sS'.thisN'
p1686
I204
sS'.thisIndex'
p1687
I1
sg15
(lp1688
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1689
g16
(lp1690
S'd'
asg18
S'N'
sS'.thisRepN'
p1691
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1692
I10
sS'.thisN'
p1693
I205
sS'.thisIndex'
p1694
I13
sg15
(lp1695
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1696
g16
(lp1697
S'd'
asg18
S'Y'
sS'.thisRepN'
p1698
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1699
I11
sS'.thisN'
p1700
I206
sS'.thisIndex'
p1701
I2
sg15
(lp1702
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1703
S'space'
p1704
asg95
I2
sa(dp1705
g16
(lp1706
S'k'
asg18
S'Y'
sS'.thisRepN'
p1707
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1708
I12
sS'.thisN'
p1709
I207
sS'.thisIndex'
p1710
I5
sg15
(lp1711
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1712
S'space'
p1713
asg95
I5
sa(dp1714
g16
(lp1715
S'd'
asg18
S'N'
sS'.thisRepN'
p1716
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1717
I13
sS'.thisN'
p1718
I208
sS'.thisIndex'
p1719
I10
sg15
(lp1720
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1721
g16
(lp1722
S'd'
asg18
S'N'
sS'.thisRepN'
p1723
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1724
I14
sS'.thisN'
p1725
I209
sS'.thisIndex'
p1726
I8
sg15
(lp1727
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1728
g16
(lp1729
S'd'
asg18
S'Y'
sS'.thisRepN'
p1730
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1731
I0
sS'.thisN'
p1732
I210
sS'.thisIndex'
p1733
I12
sg15
(lp1734
S'k'
asg30
VM
sg17
S'N'
sg14
I5
sg19
(lp1735
S'space'
p1736
asg95
I12
sa(dp1737
g16
(lp1738
S'd'
asg18
S'Y'
sS'.thisRepN'
p1739
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1740
I1
sS'.thisN'
p1741
I211
sS'.thisIndex'
p1742
I1
sg15
(lp1743
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1744
g16
(lp1745
S'd'
asg18
S'N'
sS'.thisRepN'
p1746
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1747
I2
sS'.thisN'
p1748
I212
sS'.thisIndex'
p1749
I6
sg15
(lp1750
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1751
g16
(lp1752
S'k'
asg18
S'Y'
sS'.thisRepN'
p1753
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1754
I3
sS'.thisN'
p1755
I213
sS'.thisIndex'
p1756
I8
sg15
(lp1757
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1758
S'space'
p1759
asg95
I8
sa(dp1760
g16
(lp1761
S'k'
asg18
S'Y'
sS'.thisRepN'
p1762
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1763
I4
sS'.thisN'
p1764
I214
sS'.thisIndex'
p1765
I3
sg15
(lp1766
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1767
S'space'
p1768
asg95
I3
sa(dp1769
g16
(lp1770
S'd'
asg18
S'Y'
sS'.thisRepN'
p1771
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1772
I5
sS'.thisN'
p1773
I215
sS'.thisIndex'
p1774
I6
sg15
(lp1775
S'k'
asg30
VM
sg17
S'N'
sg14
I5
sg19
(lp1776
S'space'
p1777
asg95
I6
sa(dp1778
g16
(lp1779
S'd'
asg18
S'Y'
sS'.thisRepN'
p1780
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1781
I6
sS'.thisN'
p1782
I216
sS'.thisIndex'
p1783
I10
sg15
(lp1784
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1785
S'space'
p1786
asg95
I10
sa(dp1787
g16
(lp1788
S'd'
asg18
S'Y'
sS'.thisRepN'
p1789
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1790
I7
sS'.thisN'
p1791
I217
sS'.thisIndex'
p1792
I8
sg15
(lp1793
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1794
S'space'
p1795
asg95
I8
sa(dp1796
g16
(lp1797
S'k'
asg18
S'N'
sS'.thisRepN'
p1798
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1799
I8
sS'.thisN'
p1800
I218
sS'.thisIndex'
p1801
I13
sg15
(lp1802
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1803
g16
(lp1804
S'd'
asg18
S'N'
sS'.thisRepN'
p1805
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1806
I9
sS'.thisN'
p1807
I219
sS'.thisIndex'
p1808
I3
sg15
(lp1809
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1810
g16
(lp1811
S'k'
asg18
S'N'
sS'.thisRepN'
p1812
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1813
I10
sS'.thisN'
p1814
I220
sS'.thisIndex'
p1815
I12
sg15
(lp1816
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1817
g16
(lp1818
S'd'
asg18
S'N'
sS'.thisRepN'
p1819
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1820
I11
sS'.thisN'
p1821
I221
sS'.thisIndex'
p1822
I4
sg15
(lp1823
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1824
g16
(lp1825
S'd'
asg18
S'Y'
sS'.thisRepN'
p1826
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1827
I12
sS'.thisN'
p1828
I222
sS'.thisIndex'
p1829
I4
sg15
(lp1830
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1831
S'space'
p1832
asg95
I4
sa(dp1833
g16
(lp1834
S'd'
asg18
S'Y'
sS'.thisRepN'
p1835
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1836
I13
sS'.thisN'
p1837
I223
sS'.thisIndex'
p1838
I0
sg15
(lp1839
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1840
S'space'
p1841
asg95
I0
sa(dp1842
g16
(lp1843
S'k'
asg18
S'N'
sS'.thisRepN'
p1844
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1845
I14
sS'.thisN'
p1846
I224
sS'.thisIndex'
p1847
I7
sg15
(lp1848
S'd'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I7
sa(dp1849
g16
(lp1850
S'd'
asg18
S'N'
sS'.thisRepN'
p1851
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1852
I0
sS'.thisN'
p1853
I225
sS'.thisIndex'
p1854
I5
sg15
(lp1855
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1856
g16
(lp1857
S'k'
asg18
S'N'
sS'.thisRepN'
p1858
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1859
I1
sS'.thisN'
p1860
I226
sS'.thisIndex'
p1861
I13
sg15
(lp1862
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1863
g16
(lp1864
S'k'
asg18
S'N'
sS'.thisRepN'
p1865
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1866
I2
sS'.thisN'
p1867
I227
sS'.thisIndex'
p1868
I14
sg15
(lp1869
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1870
g16
(lp1871
S'd'
asg18
S'Y'
sS'.thisRepN'
p1872
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1873
I3
sS'.thisN'
p1874
I228
sS'.thisIndex'
p1875
I5
sg15
(lp1876
S'k'
asg30
VM
sg17
S'N'
sg14
I5
sg19
(lp1877
S'space'
p1878
asg95
I5
sa(dp1879
g16
(lp1880
S'k'
asg18
S'N'
sS'.thisRepN'
p1881
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1882
I4
sS'.thisN'
p1883
I229
sS'.thisIndex'
p1884
I9
sg15
(lp1885
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1886
g16
(lp1887
S'd'
asg18
S'N'
sS'.thisRepN'
p1888
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1889
I5
sS'.thisN'
p1890
I230
sS'.thisIndex'
p1891
I1
sg15
(lp1892
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1893
g16
(lp1894
S'k'
asg18
S'Y'
sS'.thisRepN'
p1895
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1896
I6
sS'.thisN'
p1897
I231
sS'.thisIndex'
p1898
I5
sg15
(lp1899
S'd'
asg30
VM
sg17
S'N'
sg14
I5
sg19
(lp1900
S'space'
p1901
asg95
I5
sa(dp1902
g16
(lp1903
S'k'
asg18
S'N'
sS'.thisRepN'
p1904
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1905
I7
sS'.thisN'
p1906
I232
sS'.thisIndex'
p1907
I9
sg15
(lp1908
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1909
S'space'
p1910
asg95
I9
sa(dp1911
g16
(lp1912
S'd'
asg18
S'Y'
sS'.thisRepN'
p1913
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1914
I8
sS'.thisN'
p1915
I233
sS'.thisIndex'
p1916
I4
sg15
(lp1917
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1918
g16
(lp1919
S'd'
asg18
S'Y'
sS'.thisRepN'
p1920
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1921
I9
sS'.thisN'
p1922
I234
sS'.thisIndex'
p1923
I8
sg15
(lp1924
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1925
S'space'
p1926
asg95
I8
sa(dp1927
g16
(lp1928
S'd'
asg18
S'Y'
sS'.thisRepN'
p1929
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1930
I10
sS'.thisN'
p1931
I235
sS'.thisIndex'
p1932
I5
sg15
(lp1933
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1934
S'space'
p1935
asg95
I5
sa(dp1936
g16
(lp1937
S'd'
asg18
S'N'
sS'.thisRepN'
p1938
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1939
I11
sS'.thisN'
p1940
I236
sS'.thisIndex'
p1941
I0
sg15
(lp1942
S'k'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1943
g16
(lp1944
S'd'
asg18
S'Y'
sS'.thisRepN'
p1945
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1946
I12
sS'.thisN'
p1947
I237
sS'.thisIndex'
p1948
I2
sg15
(lp1949
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1950
S'space'
p1951
asg95
I2
sa(dp1952
g16
(lp1953
S'd'
asg18
S'Y'
sS'.thisRepN'
p1954
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1955
I13
sS'.thisN'
p1956
I238
sS'.thisIndex'
p1957
I6
sg15
(lp1958
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1959
S'space'
p1960
asg95
I6
sa(dp1961
g16
(lp1962
S'k'
asg18
S'Y'
sS'.thisRepN'
p1963
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1964
I14
sS'.thisN'
p1965
I239
sS'.thisIndex'
p1966
I2
sg15
(lp1967
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1968
S'space'
p1969
asg95
I2
sa(dp1970
g16
(lp1971
S'k'
asg18
S'Y'
sS'.thisRepN'
p1972
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1973
I0
sS'.thisN'
p1974
I240
sS'.thisIndex'
p1975
I1
sg15
(lp1976
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1977
S'space'
p1978
asg95
I1
sa(dp1979
g16
(lp1980
S'd'
asg18
S'N'
sS'.thisRepN'
p1981
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1982
I1
sS'.thisN'
p1983
I241
sS'.thisIndex'
p1984
I2
sg15
(lp1985
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1986
g16
(lp1987
S'd'
asg18
S'N'
sS'.thisRepN'
p1988
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1989
I2
sS'.thisN'
p1990
I242
sS'.thisIndex'
p1991
I4
sg15
(lp1992
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1993
g16
(lp1994
S'd'
asg18
S'N'
sS'.thisRepN'
p1995
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1996
I3
sS'.thisN'
p1997
I243
sS'.thisIndex'
p1998
I1
sg15
(lp1999
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp2000
g16
(lp2001
S'd'
asg18
S'Y'
sS'.thisRepN'
p2002
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2003
I4
sS'.thisN'
p2004
I244
sS'.thisIndex'
p2005
I4
sg15
(lp2006
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp2007
S'space'
p2008
asg95
I4
sa(dp2009
g16
(lp2010
S'd'
asg18
S'N'
sS'.thisRepN'
p2011
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2012
I5
sS'.thisN'
p2013
I245
sS'.thisIndex'
p2014
I14
sg15
(lp2015
S'k'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I14
sa(dp2016
g16
(lp2017
S'd'
asg18
S'N'
sS'.thisRepN'
p2018
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2019
I6
sS'.thisN'
p2020
I246
sS'.thisIndex'
p2021
I11
sg15
(lp2022
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I11
sa(dp2023
g16
(lp2024
S'd'
asg18
S'Y'
sS'.thisRepN'
p2025
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2026
I7
sS'.thisN'
p2027
I247
sS'.thisIndex'
p2028
I4
sg15
(lp2029
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp2030
g16
(lp2031
S'k'
asg18
S'Y'
sS'.thisRepN'
p2032
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2033
I8
sS'.thisN'
p2034
I248
sS'.thisIndex'
p2035
I14
sg15
(lp2036
S'd'
asg30
VM
sg17
S'N'
sg14
I5
sg19
(lp2037
S'space'
p2038
asg95
I14
sa(dp2039
g16
(lp2040
S'k'
asg18
S'N'
sg22
I44
sS'.thisN'
p2041
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2042
I9
sS'.thisRepN'
p2043
I16
sg21
I41
sS'.thisIndex'
p2044
I12
sg23
I24
sg15
(lp2045
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp2046
g16
(lp2047
S'k'
asg95
I11
sS'.thisRepN'
p2048
I16
sg30
VM
sg31
g32
sS'.thisTrialN'
p2049
I10
sS'.thisN'
p2050
I250
sS'.thisIndex'
p2051
I11
sg15
(lp2052
S'k'
asg17
S'Y'
sg14
I6
sa(dp2053
g16
(lp2054
S'k'
asg95
I14
sS'.thisRepN'
p2055
I16
sg30
VM
sg31
g32
sS'.thisTrialN'
p2056
I11
sS'.thisN'
p2057
I251
sS'.thisIndex'
p2058
I14
sg15
(lp2059
S'k'
asg17
S'Y'
sg14
I6
sa(dp2060
g16
(lp2061
S'k'
asg18
S'N'
sS'.thisRepN'
p2062
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2063
I12
sS'.thisN'
p2064
I252
sS'.thisIndex'
p2065
I10
sg15
(lp2066
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2067
g16
(lp2068
S'd'
asg18
S'N'
sS'.thisRepN'
p2069
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2070
I13
sS'.thisN'
p2071
I253
sS'.thisIndex'
p2072
I6
sg15
(lp2073
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2074
g16
(lp2075
S'd'
asg18
S'N'
sS'.thisRepN'
p2076
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2077
I14
sS'.thisN'
p2078
I254
sS'.thisIndex'
p2079
I12
sg15
(lp2080
S'k'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I12
sa(dp2081
g16
(lp2082
S'k'
asg18
S'Y'
sS'.thisRepN'
p2083
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2084
I0
sS'.thisN'
p2085
I255
sS'.thisIndex'
p2086
I0
sg15
(lp2087
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2088
S'd'
asg95
I0
sa(dp2089
g16
(lp2090
S'd'
asg18
S'N'
sS'.thisRepN'
p2091
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2092
I1
sS'.thisN'
p2093
I256
sS'.thisIndex'
p2094
I8
sg15
(lp2095
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2096
g16
(lp2097
S'k'
asg18
S'N'
sS'.thisRepN'
p2098
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2099
I2
sS'.thisN'
p2100
I257
sS'.thisIndex'
p2101
I4
sg15
(lp2102
S'd'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I4
sa(dp2103
g16
(lp2104
S'k'
asg18
S'Y'
sS'.thisRepN'
p2105
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2106
I3
sS'.thisN'
p2107
I258
sS'.thisIndex'
p2108
I2
sg15
(lp2109
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2110
S'space'
p2111
asg95
I2
sa(dp2112
g16
(lp2113
S'd'
asg18
S'N'
sS'.thisRepN'
p2114
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2115
I4
sS'.thisN'
p2116
I259
sS'.thisIndex'
p2117
I12
sg15
(lp2118
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2119
g16
(lp2120
S'd'
asg18
S'N'
sS'.thisRepN'
p2121
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2122
I5
sS'.thisN'
p2123
I260
sS'.thisIndex'
p2124
I10
sg15
(lp2125
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2126
g16
(lp2127
S'd'
asg18
S'N'
sS'.thisRepN'
p2128
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2129
I6
sS'.thisN'
p2130
I261
sS'.thisIndex'
p2131
I8
sg15
(lp2132
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2133
g16
(lp2134
S'd'
asg18
S'Y'
sS'.thisRepN'
p2135
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2136
I7
sS'.thisN'
p2137
I262
sS'.thisIndex'
p2138
I8
sg15
(lp2139
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2140
S'space'
p2141
asg95
I8
sa(dp2142
g16
(lp2143
S'd'
asg18
S'N'
sS'.thisRepN'
p2144
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2145
I8
sS'.thisN'
p2146
I263
sS'.thisIndex'
p2147
I9
sg15
(lp2148
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2149
g16
(lp2150
S'k'
asg18
S'N'
sS'.thisRepN'
p2151
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2152
I9
sS'.thisN'
p2153
I264
sS'.thisIndex'
p2154
I6
sg15
(lp2155
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2156
g16
(lp2157
S'd'
asg18
S'N'
sS'.thisRepN'
p2158
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2159
I10
sS'.thisN'
p2160
I265
sS'.thisIndex'
p2161
I5
sg15
(lp2162
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2163
g16
(lp2164
S'd'
asg18
S'N'
sS'.thisRepN'
p2165
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2166
I11
sS'.thisN'
p2167
I266
sS'.thisIndex'
p2168
I2
sg15
(lp2169
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2170
g16
(lp2171
S'k'
asg18
S'Y'
sS'.thisRepN'
p2172
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2173
I12
sS'.thisN'
p2174
I267
sS'.thisIndex'
p2175
I3
sg15
(lp2176
S'd'
asg30
VM
sg17
S'N'
sg14
I6
sg19
(lp2177
S'space'
p2178
asg95
I3
sa(dp2179
g16
(lp2180
S'd'
asg18
S'N'
sS'.thisRepN'
p2181
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2182
I13
sS'.thisN'
p2183
I268
sS'.thisIndex'
p2184
I3
sg15
(lp2185
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2186
g16
(lp2187
S'k'
asg18
S'Y'
sS'.thisRepN'
p2188
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2189
I14
sS'.thisN'
p2190
I269
sS'.thisIndex'
p2191
I3
sg15
(lp2192
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2193
S'space'
p2194
asg95
I3
sa(dp2195
g16
(lp2196
S'd'
asg18
S'N'
sS'.thisRepN'
p2197
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2198
I0
sS'.thisN'
p2199
I270
sS'.thisIndex'
p2200
I9
sg15
(lp2201
S'k'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2202
g16
(lp2203
S'd'
asg18
S'N'
sS'.thisRepN'
p2204
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2205
I1
sS'.thisN'
p2206
I271
sS'.thisIndex'
p2207
I12
sg15
(lp2208
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2209
g16
(lp2210
S'd'
asg18
S'N'
sS'.thisRepN'
p2211
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2212
I2
sS'.thisN'
p2213
I272
sS'.thisIndex'
p2214
I10
sg15
(lp2215
S'k'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I10
sa(dp2216
g16
(lp2217
S'k'
asg18
S'Y'
sS'.thisRepN'
p2218
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2219
I3
sS'.thisN'
p2220
I273
sS'.thisIndex'
p2221
I6
sg15
(lp2222
S'd'
asg30
VM
sg17
S'N'
sg14
I6
sg19
(lp2223
S'space'
p2224
asg95
I6
sa(dp2225
g16
(lp2226
S'k'
asg18
S'Y'
sS'.thisRepN'
p2227
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2228
I4
sS'.thisN'
p2229
I274
sS'.thisIndex'
p2230
I0
sg15
(lp2231
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2232
S'space'
p2233
asg95
I0
sa(dp2234
g16
(lp2235
S'd'
asg18
S'Y'
sS'.thisRepN'
p2236
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2237
I5
sS'.thisN'
p2238
I275
sS'.thisIndex'
p2239
I10
sg15
(lp2240
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2241
S'space'
p2242
asg95
I10
sa(dp2243
g16
(lp2244
S'd'
asg18
S'N'
sS'.thisRepN'
p2245
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2246
I6
sS'.thisN'
p2247
I276
sS'.thisIndex'
p2248
I8
sg15
(lp2249
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2250
g16
(lp2251
S'k'
asg18
S'Y'
sS'.thisRepN'
p2252
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2253
I7
sS'.thisN'
p2254
I277
sS'.thisIndex'
p2255
I9
sg15
(lp2256
S'd'
asg30
VM
sg17
S'N'
sg14
I6
sg19
(lp2257
S'space'
p2258
asg95
I9
sa(dp2259
g16
(lp2260
S'd'
asg18
S'N'
sS'.thisRepN'
p2261
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2262
I8
sS'.thisN'
p2263
I278
sS'.thisIndex'
p2264
I4
sg15
(lp2265
S'k'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I4
sa(dp2266
g16
(lp2267
S'd'
asg18
S'Y'
sS'.thisRepN'
p2268
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2269
I9
sS'.thisN'
p2270
I279
sS'.thisIndex'
p2271
I12
sg15
(lp2272
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2273
S'space'
p2274
asg95
I12
sa(dp2275
g16
(lp2276
S'd'
asg18
S'N'
sS'.thisRepN'
p2277
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2278
I10
sS'.thisN'
p2279
I280
sS'.thisIndex'
p2280
I1
sg15
(lp2281
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2282
g16
(lp2283
S'k'
asg18
S'N'
sS'.thisRepN'
p2284
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2285
I11
sS'.thisN'
p2286
I281
sS'.thisIndex'
p2287
I6
sg15
(lp2288
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2289
g16
(lp2290
S'k'
asg18
S'Y'
sS'.thisRepN'
p2291
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2292
I12
sS'.thisN'
p2293
I282
sS'.thisIndex'
p2294
I8
sg15
(lp2295
S'd'
asg30
VM
sg17
S'N'
sg14
I6
sg19
(lp2296
S'space'
p2297
asg95
I8
sa(dp2298
g16
(lp2299
S'd'
asg18
S'N'
sS'.thisRepN'
p2300
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2301
I13
sS'.thisN'
p2302
I283
sS'.thisIndex'
p2303
I11
sg15
(lp2304
S'k'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I11
sa(dp2305
g16
(lp2306
S'k'
asg18
S'N'
sS'.thisRepN'
p2307
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2308
I14
sS'.thisN'
p2309
I284
sS'.thisIndex'
p2310
I10
sg15
(lp2311
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2312
g16
(lp2313
S'd'
asg18
S'N'
sS'.thisRepN'
p2314
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2315
I0
sS'.thisN'
p2316
I285
sS'.thisIndex'
p2317
I9
sg15
(lp2318
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2319
g16
(lp2320
S'k'
asg18
S'Y'
sS'.thisRepN'
p2321
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2322
I1
sS'.thisN'
p2323
I286
sS'.thisIndex'
p2324
I5
sg15
(lp2325
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2326
S'space'
p2327
asg95
I5
sa(dp2328
g16
(lp2329
S'd'
asg18
S'N'
sS'.thisRepN'
p2330
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2331
I2
sS'.thisN'
p2332
I287
sS'.thisIndex'
p2333
I2
sg15
(lp2334
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2335
g16
(lp2336
S'k'
asg18
S'N'
sS'.thisRepN'
p2337
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2338
I3
sS'.thisN'
p2339
I288
sS'.thisIndex'
p2340
I14
sg15
(lp2341
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2342
S'space'
p2343
asg95
I14
sa(dp2344
g16
(lp2345
S'd'
asg18
S'N'
sS'.thisRepN'
p2346
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2347
I4
sS'.thisN'
p2348
I289
sS'.thisIndex'
p2349
I3
sg15
(lp2350
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2351
g16
(lp2352
S'k'
asg18
S'N'
sS'.thisRepN'
p2353
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2354
I5
sS'.thisN'
p2355
I290
sS'.thisIndex'
p2356
I10
sg15
(lp2357
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2358
S'space'
p2359
asg95
I10
sa(dp2360
g16
(lp2361
S'k'
asg18
S'N'
sS'.thisRepN'
p2362
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2363
I6
sS'.thisN'
p2364
I291
sS'.thisIndex'
p2365
I0
sg15
(lp2366
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2367
g16
(lp2368
S'd'
asg18
S'Y'
sS'.thisRepN'
p2369
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2370
I7
sS'.thisN'
p2371
I292
sS'.thisIndex'
p2372
I12
sg15
(lp2373
S'k'
asg30
VM
sg17
S'N'
sg14
I6
sg19
(lp2374
S'space'
p2375
asg95
I12
sa(dp2376
g16
(lp2377
S'd'
asg18
S'N'
sS'.thisRepN'
p2378
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2379
I8
sS'.thisN'
p2380
I293
sS'.thisIndex'
p2381
I0
sg15
(lp2382
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2383
g16
(lp2384
S'd'
asg18
S'N'
sS'.thisRepN'
p2385
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2386
I9
sS'.thisN'
p2387
I294
sS'.thisIndex'
p2388
I1
sg15
(lp2389
S'k'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I1
sa(dp2390
g16
(lp2391
S'k'
asg18
S'N'
sS'.thisRepN'
p2392
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2393
I10
sS'.thisN'
p2394
I295
sS'.thisIndex'
p2395
I13
sg15
(lp2396
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2397
g16
(lp2398
S'd'
asg18
S'N'
sS'.thisRepN'
p2399
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2400
I11
sS'.thisN'
p2401
I296
sS'.thisIndex'
p2402
I14
sg15
(lp2403
S'k'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I14
sa(dp2404
g16
(lp2405
S'd'
asg18
S'Y'
sS'.thisRepN'
p2406
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2407
I12
sS'.thisN'
p2408
I297
sS'.thisIndex'
p2409
I1
sg15
(lp2410
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2411
S'space'
p2412
asg95
I1
sa(dp2413
g16
(lp2414
S'k'
asg18
S'Y'
sS'.thisRepN'
p2415
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2416
I13
sS'.thisN'
p2417
I298
sS'.thisIndex'
p2418
I0
sg15
(lp2419
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2420
S'space'
p2421
asg95
I0
sa(dp2422
g16
(lp2423
S'k'
asg18
S'Y'
sg22
I45
sS'.thisN'
p2424
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2425
I14
sS'.thisRepN'
p2426
I19
sg21
I37
sS'.thisIndex'
p2427
I5
sg23
I16
sg15
(lp2428
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2429
S'space'
p2430
asg95
I5
sa(dp2431
g16
(lp2432
S'k'
asg95
I9
sS'.thisRepN'
p2433
I20
sg30
VM
sg31
g32
sS'.thisTrialN'
p2434
I0
sS'.thisN'
p2435
I300
sS'.thisIndex'
p2436
I9
sg15
(lp2437
S'k'
asg17
S'Y'
sg14
I7
sa(dp2438
g16
(lp2439
S'k'
asg95
I5
sS'.thisRepN'
p2440
I20
sg30
VM
sg31
g32
sS'.thisTrialN'
p2441
I1
sS'.thisN'
p2442
I301
sS'.thisIndex'
p2443
I5
sg15
(lp2444
S'k'
asg17
S'Y'
sg14
I7
sa(dp2445
g16
(lp2446
S'k'
asg18
S'Y'
sS'.thisRepN'
p2447
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2448
I2
sS'.thisN'
p2449
I302
sS'.thisIndex'
p2450
I0
sg15
(lp2451
S'd'
asg30
VM
sg17
S'N'
sg14
I7
sg19
(lp2452
S'space'
p2453
asg95
I0
sa(dp2454
g16
(lp2455
S'd'
asg18
S'Y'
sS'.thisRepN'
p2456
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2457
I3
sS'.thisN'
p2458
I303
sS'.thisIndex'
p2459
I14
sg15
(lp2460
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2461
S'space'
p2462
asg95
I14
sa(dp2463
g16
(lp2464
S'd'
asg18
S'Y'
sS'.thisRepN'
p2465
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2466
I4
sS'.thisN'
p2467
I304
sS'.thisIndex'
p2468
I11
sg15
(lp2469
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2470
S'space'
p2471
asg95
I11
sa(dp2472
g16
(lp2473
S'k'
asg18
S'Y'
sS'.thisRepN'
p2474
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2475
I5
sS'.thisN'
p2476
I305
sS'.thisIndex'
p2477
I8
sg15
(lp2478
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2479
S'space'
p2480
asg95
I8
sa(dp2481
g16
(lp2482
S'd'
asg18
S'N'
sS'.thisRepN'
p2483
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2484
I6
sS'.thisN'
p2485
I306
sS'.thisIndex'
p2486
I6
sg15
(lp2487
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2488
g16
(lp2489
S'k'
asg18
S'Y'
sS'.thisRepN'
p2490
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2491
I7
sS'.thisN'
p2492
I307
sS'.thisIndex'
p2493
I7
sg15
(lp2494
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2495
S'space'
p2496
asg95
I7
sa(dp2497
g16
(lp2498
S'd'
asg18
S'Y'
sS'.thisRepN'
p2499
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2500
I8
sS'.thisN'
p2501
I308
sS'.thisIndex'
p2502
I7
sg15
(lp2503
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2504
S'space'
p2505
asg95
I7
sa(dp2506
g16
(lp2507
S'd'
asg18
S'Y'
sS'.thisRepN'
p2508
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2509
I9
sS'.thisN'
p2510
I309
sS'.thisIndex'
p2511
I1
sg15
(lp2512
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2513
S'space'
p2514
asg95
I1
sa(dp2515
g16
(lp2516
S'd'
asg18
S'N'
sS'.thisRepN'
p2517
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2518
I10
sS'.thisN'
p2519
I310
sS'.thisIndex'
p2520
I6
sg15
(lp2521
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2522
g16
(lp2523
S'd'
asg18
S'Y'
sS'.thisRepN'
p2524
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2525
I11
sS'.thisN'
p2526
I311
sS'.thisIndex'
p2527
I10
sg15
(lp2528
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2529
S'space'
p2530
asg95
I10
sa(dp2531
g16
(lp2532
S'd'
asg18
S'Y'
sS'.thisRepN'
p2533
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2534
I12
sS'.thisN'
p2535
I312
sS'.thisIndex'
p2536
I10
sg15
(lp2537
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2538
S'space'
p2539
asg95
I10
sa(dp2540
g16
(lp2541
S'k'
asg18
S'N'
sS'.thisRepN'
p2542
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2543
I13
sS'.thisN'
p2544
I313
sS'.thisIndex'
p2545
I11
sg15
(lp2546
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2547
S'space'
p2548
asg95
I11
sa(dp2549
g16
(lp2550
S'd'
asg18
S'Y'
sS'.thisRepN'
p2551
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2552
I14
sS'.thisN'
p2553
I314
sS'.thisIndex'
p2554
I12
sg15
(lp2555
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2556
g16
(lp2557
S'k'
asg18
S'Y'
sS'.thisRepN'
p2558
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2559
I0
sS'.thisN'
p2560
I315
sS'.thisIndex'
p2561
I10
sg15
(lp2562
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2563
S'space'
p2564
asg95
I10
sa(dp2565
g16
(lp2566
S'k'
asg18
S'Y'
sS'.thisRepN'
p2567
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2568
I1
sS'.thisN'
p2569
I316
sS'.thisIndex'
p2570
I14
sg15
(lp2571
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2572
S'space'
p2573
asg95
I14
sa(dp2574
g16
(lp2575
S'k'
asg18
S'N'
sS'.thisRepN'
p2576
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2577
I2
sS'.thisN'
p2578
I317
sS'.thisIndex'
p2579
I2
sg15
(lp2580
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2581
g16
(lp2582
S'k'
asg18
S'Y'
sS'.thisRepN'
p2583
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2584
I3
sS'.thisN'
p2585
I318
sS'.thisIndex'
p2586
I14
sg15
(lp2587
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2588
S'space'
p2589
asg95
I14
sa(dp2590
g16
(lp2591
S'd'
asg18
S'Y'
sS'.thisRepN'
p2592
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2593
I4
sS'.thisN'
p2594
I319
sS'.thisIndex'
p2595
I12
sg15
(lp2596
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2597
S'space'
p2598
asg95
I12
sa(dp2599
g16
(lp2600
S'd'
asg18
S'N'
sS'.thisRepN'
p2601
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2602
I5
sS'.thisN'
p2603
I320
sS'.thisIndex'
p2604
I0
sg15
(lp2605
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2606
g16
(lp2607
S'k'
asg18
S'N'
sS'.thisRepN'
p2608
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2609
I6
sS'.thisN'
p2610
I321
sS'.thisIndex'
p2611
I7
sg15
(lp2612
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2613
g16
(lp2614
S'd'
asg18
S'N'
sS'.thisRepN'
p2615
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2616
I7
sS'.thisN'
p2617
I322
sS'.thisIndex'
p2618
I6
sg15
(lp2619
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2620
g16
(lp2621
S'd'
asg18
S'Y'
sS'.thisRepN'
p2622
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2623
I8
sS'.thisN'
p2624
I323
sS'.thisIndex'
p2625
I6
sg15
(lp2626
S'k'
asg30
VM
sg17
S'N'
sg14
I7
sg19
Nsg95
I6
sa(dp2627
g16
(lp2628
S'k'
asg18
S'N'
sS'.thisRepN'
p2629
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2630
I9
sS'.thisN'
p2631
I324
sS'.thisIndex'
p2632
I11
sg15
(lp2633
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2634
g16
(lp2635
S'k'
asg18
S'N'
sS'.thisRepN'
p2636
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2637
I10
sS'.thisN'
p2638
I325
sS'.thisIndex'
p2639
I14
sg15
(lp2640
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2641
g16
(lp2642
S'd'
asg18
S'N'
sS'.thisRepN'
p2643
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2644
I11
sS'.thisN'
p2645
I326
sS'.thisIndex'
p2646
I11
sg15
(lp2647
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2648
g16
(lp2649
S'k'
asg18
S'N'
sS'.thisRepN'
p2650
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2651
I12
sS'.thisN'
p2652
I327
sS'.thisIndex'
p2653
I7
sg15
(lp2654
S'd'
asg30
VM
sg17
S'N'
sg14
I7
sg19
Nsg95
I7
sa(dp2655
g16
(lp2656
S'd'
asg18
S'N'
sS'.thisRepN'
p2657
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2658
I13
sS'.thisN'
p2659
I328
sS'.thisIndex'
p2660
I9
sg15
(lp2661
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2662
g16
(lp2663
S'd'
asg18
S'N'
sS'.thisRepN'
p2664
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2665
I14
sS'.thisN'
p2666
I329
sS'.thisIndex'
p2667
I13
sg15
(lp2668
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I13
sa(dp2669
g16
(lp2670
S'd'
asg18
S'N'
sS'.thisRepN'
p2671
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2672
I0
sS'.thisN'
p2673
I330
sS'.thisIndex'
p2674
I14
sg15
(lp2675
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2676
g16
(lp2677
S'd'
asg18
S'Y'
sS'.thisRepN'
p2678
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2679
I1
sS'.thisN'
p2680
I331
sS'.thisIndex'
p2681
I0
sg15
(lp2682
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2683
g16
(lp2684
S'd'
asg18
S'Y'
sS'.thisRepN'
p2685
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2686
I2
sS'.thisN'
p2687
I332
sS'.thisIndex'
p2688
I5
sg15
(lp2689
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2690
S'space'
p2691
asg95
I5
sa(dp2692
g16
(lp2693
S'd'
asg18
S'N'
sS'.thisRepN'
p2694
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2695
I3
sS'.thisN'
p2696
I333
sS'.thisIndex'
p2697
I6
sg15
(lp2698
S'k'
asg30
VM
sg17
S'N'
sg14
I7
sg19
Nsg95
I6
sa(dp2699
g16
(lp2700
S'd'
asg18
S'N'
sS'.thisRepN'
p2701
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2702
I4
sS'.thisN'
p2703
I334
sS'.thisIndex'
p2704
I0
sg15
(lp2705
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2706
g16
(lp2707
S'k'
asg18
S'N'
sS'.thisRepN'
p2708
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2709
I5
sS'.thisN'
p2710
I335
sS'.thisIndex'
p2711
I14
sg15
(lp2712
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2713
g16
(lp2714
S'k'
asg18
S'N'
sS'.thisRepN'
p2715
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2716
I6
sS'.thisN'
p2717
I336
sS'.thisIndex'
p2718
I9
sg15
(lp2719
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2720
g16
(lp2721
S'k'
asg18
S'N'
sS'.thisRepN'
p2722
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2723
I7
sS'.thisN'
p2724
I337
sS'.thisIndex'
p2725
I11
sg15
(lp2726
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2727
g16
(lp2728
S'd'
asg18
S'Y'
sS'.thisRepN'
p2729
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2730
I8
sS'.thisN'
p2731
I338
sS'.thisIndex'
p2732
I6
sg15
(lp2733
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2734
S'space'
p2735
asg95
I6
sa(dp2736
g16
(lp2737
S'k'
asg18
S'N'
sS'.thisRepN'
p2738
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2739
I9
sS'.thisN'
p2740
I339
sS'.thisIndex'
p2741
I5
sg15
(lp2742
S'd'
asg30
VM
sg17
S'N'
sg14
I7
sg19
Nsg95
I5
sa(dp2743
g16
(lp2744
S'd'
asg18
S'Y'
sS'.thisRepN'
p2745
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2746
I10
sS'.thisN'
p2747
I340
sS'.thisIndex'
p2748
I9
sg15
(lp2749
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2750
S'space'
p2751
asg95
I9
sa(dp2752
g16
(lp2753
S'd'
asg18
S'N'
sS'.thisRepN'
p2754
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2755
I11
sS'.thisN'
p2756
I341
sS'.thisIndex'
p2757
I6
sg15
(lp2758
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2759
g16
(lp2760
S'k'
asg18
S'Y'
sS'.thisRepN'
p2761
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2762
I12
sS'.thisN'
p2763
I342
sS'.thisIndex'
p2764
I2
sg15
(lp2765
S'd'
asg30
VM
sg17
S'N'
sg14
I7
sg19
(lp2766
S'space'
p2767
asg95
I2
sa(dp2768
g16
(lp2769
S'd'
asg18
S'Y'
sS'.thisRepN'
p2770
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2771
I13
sS'.thisN'
p2772
I343
sS'.thisIndex'
p2773
I14
sg15
(lp2774
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2775
S'space'
p2776
asg95
I14
sa(dp2777
g16
(lp2778
S'd'
asg18
S'N'
sS'.thisRepN'
p2779
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2780
I14
sS'.thisN'
p2781
I344
sS'.thisIndex'
p2782
I14
sg15
(lp2783
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2784
g16
(lp2785
S'd'
asg18
S'N'
sS'.thisRepN'
p2786
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2787
I0
sS'.thisN'
p2788
I345
sS'.thisIndex'
p2789
I0
sg15
(lp2790
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2791
g16
(lp2792
S'k'
asg18
S'Y'
sS'.thisRepN'
p2793
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2794
I1
sS'.thisN'
p2795
I346
sS'.thisIndex'
p2796
I8
sg15
(lp2797
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2798
S'space'
p2799
asg95
I8
sa(dp2800
g16
(lp2801
S'd'
asg18
S'Y'
sS'.thisRepN'
p2802
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2803
I2
sS'.thisN'
p2804
I347
sS'.thisIndex'
p2805
I10
sg15
(lp2806
S'k'
asg30
VM
sg17
S'N'
sg14
I7
sg19
(lp2807
S'space'
p2808
asg95
I10
sa(dp2809
g16
(lp2810
S'd'
asg18
S'Y'
sS'.thisRepN'
p2811
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2812
I3
sS'.thisN'
p2813
I348
sS'.thisIndex'
p2814
I11
sg15
(lp2815
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2816
S'space'
p2817
asg95
I11
sa(dp2818
g16
(lp2819
S'd'
asg18
S'Y'
sg22
I44
sS'.thisN'
p2820
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2821
I4
sS'.thisRepN'
p2822
I23
sg21
I43
sS'.thisIndex'
p2823
I13
sg23
I25
sg15
(lp2824
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2825
S'space'
p2826
asg95
I13
sa(dp2827
g16
(lp2828
S'k'
asg95
I8
sS'.thisRepN'
p2829
I23
sg30
VM
sg31
g32
sS'.thisTrialN'
p2830
I5
sS'.thisN'
p2831
I350
sS'.thisIndex'
p2832
I8
sg15
(lp2833
S'k'
asg17
S'Y'
sg14
I8
sa(dp2834
g16
(lp2835
S'k'
asg95
I4
sS'.thisRepN'
p2836
I23
sg30
VM
sg31
g32
sS'.thisTrialN'
p2837
I6
sS'.thisN'
p2838
I351
sS'.thisIndex'
p2839
I4
sg15
(lp2840
S'k'
asg17
S'Y'
sg14
I8
sa(dp2841
g16
(lp2842
S'd'
asg18
S'Y'
sS'.thisRepN'
p2843
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2844
I7
sS'.thisN'
p2845
I352
sS'.thisIndex'
p2846
I8
sg15
(lp2847
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2848
S'space'
p2849
asg95
I8
sa(dp2850
g16
(lp2851
S'k'
asg18
S'N'
sS'.thisRepN'
p2852
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2853
I8
sS'.thisN'
p2854
I353
sS'.thisIndex'
p2855
I2
sg15
(lp2856
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2857
g16
(lp2858
S'k'
asg18
S'N'
sS'.thisRepN'
p2859
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2860
I9
sS'.thisN'
p2861
I354
sS'.thisIndex'
p2862
I7
sg15
(lp2863
S'd'
asg30
VM
sg17
S'N'
sg14
I8
sg19
Nsg95
I7
sa(dp2864
g16
(lp2865
S'k'
asg18
S'Y'
sS'.thisRepN'
p2866
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2867
I10
sS'.thisN'
p2868
I355
sS'.thisIndex'
p2869
I10
sg15
(lp2870
S'd'
asg30
VM
sg17
S'N'
sg14
I8
sg19
(lp2871
S'space'
p2872
asg95
I10
sa(dp2873
g16
(lp2874
S'd'
asg18
S'N'
sS'.thisRepN'
p2875
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2876
I11
sS'.thisN'
p2877
I356
sS'.thisIndex'
p2878
I2
sg15
(lp2879
S'k'
asg30
VM
sg17
S'N'
sg14
I8
sg19
(lp2880
S'space'
p2881
asg95
I2
sa(dp2882
g16
(lp2883
S'k'
asg18
S'Y'
sS'.thisRepN'
p2884
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2885
I12
sS'.thisN'
p2886
I357
sS'.thisIndex'
p2887
I0
sg15
(lp2888
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2889
S'space'
p2890
asg95
I0
sa(dp2891
g16
(lp2892
S'k'
asg18
S'N'
sS'.thisRepN'
p2893
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2894
I13
sS'.thisN'
p2895
I358
sS'.thisIndex'
p2896
I2
sg15
(lp2897
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2898
g16
(lp2899
S'd'
asg18
S'Y'
sS'.thisRepN'
p2900
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2901
I14
sS'.thisN'
p2902
I359
sS'.thisIndex'
p2903
I7
sg15
(lp2904
S'k'
asg30
VM
sg17
S'N'
sg14
I8
sg19
(lp2905
S'space'
p2906
asg95
I7
sa(dp2907
g16
(lp2908
S'd'
asg18
S'Y'
sS'.thisRepN'
p2909
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2910
I0
sS'.thisN'
p2911
I360
sS'.thisIndex'
p2912
I2
sg15
(lp2913
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2914
S'space'
p2915
asg95
I2
sa(dp2916
g16
(lp2917
S'k'
asg18
S'Y'
sS'.thisRepN'
p2918
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2919
I1
sS'.thisN'
p2920
I361
sS'.thisIndex'
p2921
I7
sg15
(lp2922
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2923
S'space'
p2924
asg95
I7
sa(dp2925
g16
(lp2926
S'k'
asg18
S'Y'
sS'.thisRepN'
p2927
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2928
I2
sS'.thisN'
p2929
I362
sS'.thisIndex'
p2930
I4
sg15
(lp2931
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2932
S'space'
p2933
asg95
I4
sa(dp2934
g16
(lp2935
S'd'
asg18
S'N'
sS'.thisRepN'
p2936
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2937
I3
sS'.thisN'
p2938
I363
sS'.thisIndex'
p2939
I7
sg15
(lp2940
S'k'
asg30
VM
sg17
S'N'
sg14
I8
sg19
Nsg95
I7
sa(dp2941
g16
(lp2942
S'd'
asg18
S'N'
sS'.thisRepN'
p2943
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2944
I4
sS'.thisN'
p2945
I364
sS'.thisIndex'
p2946
I12
sg15
(lp2947
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp2948
g16
(lp2949
S'd'
asg18
S'Y'
sS'.thisRepN'
p2950
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2951
I5
sS'.thisN'
p2952
I365
sS'.thisIndex'
p2953
I7
sg15
(lp2954
S'k'
asg30
VM
sg17
S'N'
sg14
I8
sg19
(lp2955
S'space'
p2956
asg95
I7
sa(dp2957
g16
(lp2958
S'k'
asg18
S'Y'
sS'.thisRepN'
p2959
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2960
I6
sS'.thisN'
p2961
I366
sS'.thisIndex'
p2962
I3
sg15
(lp2963
S'd'
asg30
VM
sg17
S'N'
sg14
I8
sg19
(lp2964
S'space'
p2965
asg95
I3
sa(dp2966
g16
(lp2967
S'd'
asg18
S'Y'
sS'.thisRepN'
p2968
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2969
I7
sS'.thisN'
p2970
I367
sS'.thisIndex'
p2971
I9
sg15
(lp2972
S'k'
asg30
VM
sg17
S'N'
sg14
I8
sg19
(lp2973
S'space'
p2974
asg95
I9
sa(dp2975
g16
(lp2976
S'd'
asg18
S'Y'
sS'.thisRepN'
p2977
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2978
I8
sS'.thisN'
p2979
I368
sS'.thisIndex'
p2980
I6
sg15
(lp2981
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2982
S'space'
p2983
asg95
I6
sa(dp2984
g16
(lp2985
S'd'
asg18
S'Y'
sS'.thisRepN'
p2986
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2987
I9
sS'.thisN'
p2988
I369
sS'.thisIndex'
p2989
I12
sg15
(lp2990
S'k'
asg30
VM
sg17
S'N'
sg14
I8
sg19
(lp2991
S'space'
p2992
asg95
I12
sa(dp2993
g16
(lp2994
S'k'
asg18
S'Y'
sS'.thisRepN'
p2995
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2996
I10
sS'.thisN'
p2997
I370
sS'.thisIndex'
p2998
I5
sg15
(lp2999
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3000
S'space'
p3001
asg95
I5
sa(dp3002
g16
(lp3003
S'd'
asg18
S'N'
sS'.thisRepN'
p3004
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3005
I11
sS'.thisN'
p3006
I371
sS'.thisIndex'
p3007
I9
sg15
(lp3008
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3009
g16
(lp3010
S'k'
asg18
S'Y'
sS'.thisRepN'
p3011
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3012
I12
sS'.thisN'
p3013
I372
sS'.thisIndex'
p3014
I10
sg15
(lp3015
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3016
S'space'
p3017
asg95
I10
sa(dp3018
g16
(lp3019
S'k'
asg18
S'Y'
sS'.thisRepN'
p3020
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3021
I13
sS'.thisN'
p3022
I373
sS'.thisIndex'
p3023
I12
sg15
(lp3024
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3025
S'space'
p3026
asg95
I12
sa(dp3027
g16
(lp3028
S'k'
asg18
S'N'
sS'.thisRepN'
p3029
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3030
I14
sS'.thisN'
p3031
I374
sS'.thisIndex'
p3032
I13
sg15
(lp3033
S'd'
asg30
VM
sg17
S'N'
sg14
I8
sg19
Nsg95
I13
sa(dp3034
g16
(lp3035
S'k'
asg18
S'Y'
sS'.thisRepN'
p3036
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3037
I0
sS'.thisN'
p3038
I375
sS'.thisIndex'
p3039
I3
sg15
(lp3040
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3041
S'space'
p3042
asg95
I3
sa(dp3043
g16
(lp3044
S'd'
asg18
S'Y'
sS'.thisRepN'
p3045
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3046
I1
sS'.thisN'
p3047
I376
sS'.thisIndex'
p3048
I14
sg15
(lp3049
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3050
S'space'
p3051
asg95
I14
sa(dp3052
g16
(lp3053
S'k'
asg18
S'Y'
sS'.thisRepN'
p3054
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3055
I2
sS'.thisN'
p3056
I377
sS'.thisIndex'
p3057
I8
sg15
(lp3058
S'd'
asg30
VM
sg17
S'N'
sg14
I8
sg19
(lp3059
S'space'
p3060
asg95
I8
sa(dp3061
g16
(lp3062
S'k'
asg18
S'Y'
sS'.thisRepN'
p3063
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3064
I3
sS'.thisN'
p3065
I378
sS'.thisIndex'
p3066
I5
sg15
(lp3067
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3068
S'space'
p3069
asg95
I5
sa(dp3070
g16
(lp3071
S'k'
asg18
S'N'
sS'.thisRepN'
p3072
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3073
I4
sS'.thisN'
p3074
I379
sS'.thisIndex'
p3075
I13
sg15
(lp3076
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp3077
g16
(lp3078
S'k'
asg18
S'N'
sS'.thisRepN'
p3079
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3080
I5
sS'.thisN'
p3081
I380
sS'.thisIndex'
p3082
I12
sg15
(lp3083
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp3084
g16
(lp3085
S'd'
asg18
S'N'
sS'.thisRepN'
p3086
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3087
I6
sS'.thisN'
p3088
I381
sS'.thisIndex'
p3089
I3
sg15
(lp3090
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3091
g16
(lp3092
S'd'
asg18
S'N'
sS'.thisRepN'
p3093
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3094
I7
sS'.thisN'
p3095
I382
sS'.thisIndex'
p3096
I4
sg15
(lp3097
S'k'
asg30
VM
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp3098
g16
(lp3099
S'k'
asg18
S'N'
sS'.thisRepN'
p3100
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3101
I8
sS'.thisN'
p3102
I383
sS'.thisIndex'
p3103
I9
sg15
(lp3104
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3105
g16
(lp3106
S'd'
asg18
S'N'
sS'.thisRepN'
p3107
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3108
I9
sS'.thisN'
p3109
I384
sS'.thisIndex'
p3110
I8
sg15
(lp3111
S'k'
asg30
VM
sg17
S'N'
sg14
I8
sg19
Nsg95
I8
sa(dp3112
g16
(lp3113
S'k'
asg18
S'Y'
sS'.thisRepN'
p3114
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3115
I10
sS'.thisN'
p3116
I385
sS'.thisIndex'
p3117
I13
sg15
(lp3118
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3119
S'space'
p3120
asg95
I13
sa(dp3121
g16
(lp3122
S'k'
asg18
S'N'
sS'.thisRepN'
p3123
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3124
I11
sS'.thisN'
p3125
I386
sS'.thisIndex'
p3126
I7
sg15
(lp3127
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3128
g16
(lp3129
S'd'
asg18
S'Y'
sS'.thisRepN'
p3130
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3131
I12
sS'.thisN'
p3132
I387
sS'.thisIndex'
p3133
I0
sg15
(lp3134
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3135
g16
(lp3136
S'k'
asg18
S'N'
sS'.thisRepN'
p3137
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3138
I13
sS'.thisN'
p3139
I388
sS'.thisIndex'
p3140
I10
sg15
(lp3141
S'd'
asg30
VM
sg17
S'N'
sg14
I8
sg19
Nsg95
I10
sa(dp3142
g16
(lp3143
S'k'
asg18
S'Y'
sS'.thisRepN'
p3144
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3145
I14
sS'.thisN'
p3146
I389
sS'.thisIndex'
p3147
I7
sg15
(lp3148
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3149
S'space'
p3150
asg95
I7
sa(dp3151
g16
(lp3152
S'd'
asg18
S'N'
sS'.thisRepN'
p3153
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3154
I0
sS'.thisN'
p3155
I390
sS'.thisIndex'
p3156
I5
sg15
(lp3157
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3158
g16
(lp3159
S'd'
asg18
S'Y'
sS'.thisRepN'
p3160
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3161
I1
sS'.thisN'
p3162
I391
sS'.thisIndex'
p3163
I2
sg15
(lp3164
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3165
g16
(lp3166
S'd'
asg18
S'N'
sS'.thisRepN'
p3167
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3168
I2
sS'.thisN'
p3169
I392
sS'.thisIndex'
p3170
I4
sg15
(lp3171
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp3172
g16
(lp3173
S'd'
asg18
S'Y'
sS'.thisRepN'
p3174
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3175
I3
sS'.thisN'
p3176
I393
sS'.thisIndex'
p3177
I7
sg15
(lp3178
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3179
S'space'
p3180
asg95
I7
sa(dp3181
g16
(lp3182
S'd'
asg18
S'N'
sS'.thisRepN'
p3183
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3184
I4
sS'.thisN'
p3185
I394
sS'.thisIndex'
p3186
I3
sg15
(lp3187
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3188
g16
(lp3189
S'd'
asg18
S'Y'
sS'.thisRepN'
p3190
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3191
I5
sS'.thisN'
p3192
I395
sS'.thisIndex'
p3193
I4
sg15
(lp3194
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3195
S'space'
p3196
asg95
I4
sa(dp3197
g16
(lp3198
S'd'
asg18
S'N'
sS'.thisRepN'
p3199
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3200
I6
sS'.thisN'
p3201
I396
sS'.thisIndex'
p3202
I7
sg15
(lp3203
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3204
g16
(lp3205
S'k'
asg18
S'N'
sS'.thisRepN'
p3206
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3207
I7
sS'.thisN'
p3208
I397
sS'.thisIndex'
p3209
I11
sg15
(lp3210
S'd'
asg30
VM
sg17
S'N'
sg14
I8
sg19
Nsg95
I11
sa(dp3211
g16
(lp3212
S'k'
asg18
S'N'
sS'.thisRepN'
p3213
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3214
I8
sS'.thisN'
p3215
I398
sS'.thisIndex'
p3216
I2
sg15
(lp3217
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3218
g16
(lp3219
S'k'
asg18
S'N'
sg22
I44
sS'.thisN'
p3220
I399
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3221
I9
sS'.thisRepN'
p3222
I26
sg21
I35
sS'.thisIndex'
p3223
I2
sg23
I25
sg15
(lp3224
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3225
S'space'
p3226
asg95
I2
sa(dp3227
g16
(lp3228
S'd'
asg95
I0
sS'.thisRepN'
p3229
I26
sg30
VM
sg31
g32
sS'.thisTrialN'
p3230
I10
sS'.thisN'
p3231
I400
sS'.thisIndex'
p3232
I0
sg15
(lp3233
S'd'
asg17
S'Y'
sg14
I9
sa(dp3234
g16
(lp3235
S'k'
asg95
I7
sS'.thisRepN'
p3236
I26
sg30
VM
sg31
g32
sS'.thisTrialN'
p3237
I11
sS'.thisN'
p3238
I401
sS'.thisIndex'
p3239
I7
sg15
(lp3240
S'k'
asg17
S'Y'
sg14
I9
sa(dp3241
g16
(lp3242
S'k'
asg18
S'N'
sS'.thisRepN'
p3243
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3244
I12
sS'.thisN'
p3245
I402
sS'.thisIndex'
p3246
I13
sg15
(lp3247
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I13
sa(dp3248
g16
(lp3249
S'k'
asg18
S'N'
sS'.thisRepN'
p3250
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3251
I13
sS'.thisN'
p3252
I403
sS'.thisIndex'
p3253
I12
sg15
(lp3254
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3255
g16
(lp3256
S'd'
asg18
S'Y'
sS'.thisRepN'
p3257
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3258
I14
sS'.thisN'
p3259
I404
sS'.thisIndex'
p3260
I5
sg15
(lp3261
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3262
g16
(lp3263
S'k'
asg18
S'Y'
sS'.thisRepN'
p3264
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3265
I0
sS'.thisN'
p3266
I405
sS'.thisIndex'
p3267
I9
sg15
(lp3268
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3269
S'space'
p3270
asg95
I9
sa(dp3271
g16
(lp3272
S'd'
asg18
S'Y'
sS'.thisRepN'
p3273
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3274
I1
sS'.thisN'
p3275
I406
sS'.thisIndex'
p3276
I5
sg15
(lp3277
S'k'
asg30
VM
sg17
S'N'
sg14
I9
sg19
(lp3278
S'space'
p3279
asg95
I5
sa(dp3280
g16
(lp3281
S'd'
asg18
S'N'
sS'.thisRepN'
p3282
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3283
I2
sS'.thisN'
p3284
I407
sS'.thisIndex'
p3285
I3
sg15
(lp3286
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3287
g16
(lp3288
S'd'
asg18
S'Y'
sS'.thisRepN'
p3289
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3290
I3
sS'.thisN'
p3291
I408
sS'.thisIndex'
p3292
I0
sg15
(lp3293
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3294
S'space'
p3295
asg95
I0
sa(dp3296
g16
(lp3297
S'k'
asg18
S'N'
sS'.thisRepN'
p3298
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3299
I4
sS'.thisN'
p3300
I409
sS'.thisIndex'
p3301
I6
sg15
(lp3302
S'd'
asg30
VM
sg17
S'N'
sg14
I9
sg19
Nsg95
I6
sa(dp3303
g16
(lp3304
S'k'
asg18
S'Y'
sS'.thisRepN'
p3305
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3306
I5
sS'.thisN'
p3307
I410
sS'.thisIndex'
p3308
I4
sg15
(lp3309
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3310
S'space'
p3311
asg95
I4
sa(dp3312
g16
(lp3313
S'k'
asg18
S'Y'
sS'.thisRepN'
p3314
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3315
I6
sS'.thisN'
p3316
I411
sS'.thisIndex'
p3317
I10
sg15
(lp3318
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3319
S'space'
p3320
asg95
I10
sa(dp3321
g16
(lp3322
S'k'
asg18
S'Y'
sS'.thisRepN'
p3323
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3324
I7
sS'.thisN'
p3325
I412
sS'.thisIndex'
p3326
I11
sg15
(lp3327
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3328
S'space'
p3329
asg95
I11
sa(dp3330
g16
(lp3331
S'k'
asg18
S'N'
sS'.thisRepN'
p3332
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3333
I8
sS'.thisN'
p3334
I413
sS'.thisIndex'
p3335
I6
sg15
(lp3336
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3337
S'space'
p3338
asg95
I6
sa(dp3339
g16
(lp3340
S'd'
asg18
S'Y'
sS'.thisRepN'
p3341
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3342
I9
sS'.thisN'
p3343
I414
sS'.thisIndex'
p3344
I8
sg15
(lp3345
S'k'
asg30
VM
sg17
S'N'
sg14
I9
sg19
(lp3346
S'space'
p3347
asg95
I8
sa(dp3348
g16
(lp3349
S'k'
asg18
S'N'
sS'.thisRepN'
p3350
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3351
I10
sS'.thisN'
p3352
I415
sS'.thisIndex'
p3353
I8
sg15
(lp3354
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3355
g16
(lp3356
S'k'
asg18
S'Y'
sS'.thisRepN'
p3357
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3358
I11
sS'.thisN'
p3359
I416
sS'.thisIndex'
p3360
I12
sg15
(lp3361
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3362
S'space'
p3363
asg95
I12
sa(dp3364
g16
(lp3365
S'd'
asg18
S'N'
sS'.thisRepN'
p3366
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3367
I12
sS'.thisN'
p3368
I417
sS'.thisIndex'
p3369
I10
sg15
(lp3370
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3371
g16
(lp3372
S'k'
asg18
S'Y'
sS'.thisRepN'
p3373
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3374
I13
sS'.thisN'
p3375
I418
sS'.thisIndex'
p3376
I11
sg15
(lp3377
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3378
g16
(lp3379
S'k'
asg18
S'Y'
sS'.thisRepN'
p3380
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3381
I14
sS'.thisN'
p3382
I419
sS'.thisIndex'
p3383
I14
sg15
(lp3384
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3385
S'space'
p3386
asg95
I14
sa(dp3387
g16
(lp3388
S'd'
asg18
S'Y'
sS'.thisRepN'
p3389
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3390
I0
sS'.thisN'
p3391
I420
sS'.thisIndex'
p3392
I14
sg15
(lp3393
S'k'
asg30
VM
sg17
S'N'
sg14
I9
sg19
Nsg95
I14
sa(dp3394
g16
(lp3395
S'd'
asg18
S'Y'
sS'.thisRepN'
p3396
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3397
I1
sS'.thisN'
p3398
I421
sS'.thisIndex'
p3399
I12
sg15
(lp3400
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3401
S'space'
p3402
asg95
I12
sa(dp3403
g16
(lp3404
S'd'
asg18
S'N'
sS'.thisRepN'
p3405
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3406
I2
sS'.thisN'
p3407
I422
sS'.thisIndex'
p3408
I7
sg15
(lp3409
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3410
g16
(lp3411
S'd'
asg18
S'Y'
sS'.thisRepN'
p3412
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3413
I3
sS'.thisN'
p3414
I423
sS'.thisIndex'
p3415
I1
sg15
(lp3416
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3417
S'space'
p3418
asg95
I1
sa(dp3419
g16
(lp3420
S'd'
asg18
S'N'
sS'.thisRepN'
p3421
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3422
I4
sS'.thisN'
p3423
I424
sS'.thisIndex'
p3424
I3
sg15
(lp3425
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3426
g16
(lp3427
S'k'
asg18
S'N'
sS'.thisRepN'
p3428
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3429
I5
sS'.thisN'
p3430
I425
sS'.thisIndex'
p3431
I7
sg15
(lp3432
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3433
S'space'
p3434
asg95
I7
sa(dp3435
g16
(lp3436
S'd'
asg18
S'Y'
sS'.thisRepN'
p3437
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3438
I6
sS'.thisN'
p3439
I426
sS'.thisIndex'
p3440
I3
sg15
(lp3441
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3442
S'space'
p3443
asg95
I3
sa(dp3444
g16
(lp3445
S'd'
asg18
S'Y'
sS'.thisRepN'
p3446
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3447
I7
sS'.thisN'
p3448
I427
sS'.thisIndex'
p3449
I11
sg15
(lp3450
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3451
S'space'
p3452
asg95
I11
sa(dp3453
g16
(lp3454
S'k'
asg18
S'Y'
sS'.thisRepN'
p3455
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3456
I8
sS'.thisN'
p3457
I428
sS'.thisIndex'
p3458
I4
sg15
(lp3459
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3460
S'space'
p3461
asg95
I4
sa(dp3462
g16
(lp3463
S'k'
asg18
S'N'
sS'.thisRepN'
p3464
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3465
I9
sS'.thisN'
p3466
I429
sS'.thisIndex'
p3467
I9
sg15
(lp3468
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3469
g16
(lp3470
S'd'
asg18
S'Y'
sS'.thisRepN'
p3471
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3472
I10
sS'.thisN'
p3473
I430
sS'.thisIndex'
p3474
I1
sg15
(lp3475
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3476
S'space'
p3477
asg95
I1
sa(dp3478
g16
(lp3479
S'k'
asg18
S'N'
sS'.thisRepN'
p3480
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3481
I11
sS'.thisN'
p3482
I431
sS'.thisIndex'
p3483
I13
sg15
(lp3484
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I13
sa(dp3485
g16
(lp3486
S'k'
asg18
S'N'
sS'.thisRepN'
p3487
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3488
I12
sS'.thisN'
p3489
I432
sS'.thisIndex'
p3490
I9
sg15
(lp3491
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3492
S'space'
p3493
asg95
I9
sa(dp3494
g16
(lp3495
S'k'
asg18
S'N'
sS'.thisRepN'
p3496
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3497
I13
sS'.thisN'
p3498
I433
sS'.thisIndex'
p3499
I0
sg15
(lp3500
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3501
g16
(lp3502
S'k'
asg18
S'N'
sS'.thisRepN'
p3503
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3504
I14
sS'.thisN'
p3505
I434
sS'.thisIndex'
p3506
I6
sg15
(lp3507
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3508
g16
(lp3509
S'k'
asg18
S'Y'
sS'.thisRepN'
p3510
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3511
I0
sS'.thisN'
p3512
I435
sS'.thisIndex'
p3513
I13
sg15
(lp3514
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3515
S'space'
p3516
asg95
I13
sa(dp3517
g16
(lp3518
S'd'
asg18
S'Y'
sS'.thisRepN'
p3519
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3520
I1
sS'.thisN'
p3521
I436
sS'.thisIndex'
p3522
I10
sg15
(lp3523
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3524
S'space'
p3525
asg95
I10
sa(dp3526
g16
(lp3527
S'd'
asg18
S'N'
sS'.thisRepN'
p3528
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3529
I2
sS'.thisN'
p3530
I437
sS'.thisIndex'
p3531
I4
sg15
(lp3532
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3533
g16
(lp3534
S'd'
asg18
S'Y'
sS'.thisRepN'
p3535
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3536
I3
sS'.thisN'
p3537
I438
sS'.thisIndex'
p3538
I5
sg15
(lp3539
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3540
S'space'
p3541
asg95
I5
sa(dp3542
g16
(lp3543
S'd'
asg18
S'N'
sS'.thisRepN'
p3544
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3545
I4
sS'.thisN'
p3546
I439
sS'.thisIndex'
p3547
I7
sg15
(lp3548
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3549
g16
(lp3550
S'k'
asg18
S'N'
sS'.thisRepN'
p3551
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3552
I5
sS'.thisN'
p3553
I440
sS'.thisIndex'
p3554
I6
sg15
(lp3555
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3556
g16
(lp3557
S'k'
asg18
S'N'
sS'.thisRepN'
p3558
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3559
I6
sS'.thisN'
p3560
I441
sS'.thisIndex'
p3561
I6
sg15
(lp3562
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3563
g16
(lp3564
S'k'
asg18
S'N'
sS'.thisRepN'
p3565
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3566
I7
sS'.thisN'
p3567
I442
sS'.thisIndex'
p3568
I4
sg15
(lp3569
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3570
g16
(lp3571
S'k'
asg18
S'Y'
sS'.thisRepN'
p3572
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3573
I8
sS'.thisN'
p3574
I443
sS'.thisIndex'
p3575
I13
sg15
(lp3576
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3577
S'space'
p3578
asg95
I13
sa(dp3579
g16
(lp3580
S'k'
asg18
S'Y'
sS'.thisRepN'
p3581
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3582
I9
sS'.thisN'
p3583
I444
sS'.thisIndex'
p3584
I8
sg15
(lp3585
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3586
S'space'
p3587
asg95
I8
sa(dp3588
g16
(lp3589
S'k'
asg18
S'Y'
sS'.thisRepN'
p3590
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3591
I10
sS'.thisN'
p3592
I445
sS'.thisIndex'
p3593
I6
sg15
(lp3594
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3595
S'space'
p3596
asg95
I6
sa(dp3597
g16
(lp3598
S'k'
asg18
S'Y'
sS'.thisRepN'
p3599
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3600
I11
sS'.thisN'
p3601
I446
sS'.thisIndex'
p3602
I8
sg15
(lp3603
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3604
S'space'
p3605
asg95
I8
sa(dp3606
g16
(lp3607
S'k'
asg18
S'N'
sS'.thisRepN'
p3608
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3609
I12
sS'.thisN'
p3610
I447
sS'.thisIndex'
p3611
I13
sg15
(lp3612
S'd'
asg30
VM
sg17
S'N'
sg14
I9
sg19
Nsg95
I13
sa(dp3613
g16
(lp3614
S'd'
asg18
S'N'
sS'.thisRepN'
p3615
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3616
I13
sS'.thisN'
p3617
I448
sS'.thisIndex'
p3618
I1
sg15
(lp3619
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3620
g16
(lp3621
S'd'
asg18
S'N'
sg22
I42
sS'.thisN'
p3622
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3623
I14
sS'.thisRepN'
p3624
I29
sg21
I45
sS'.thisIndex'
p3625
I3
sg23
I25
sg15
(lp3626
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3627
g16
(lp3628
S'd'
asg95
I6
sS'.thisRepN'
p3629
I30
sg30
VM
sg31
g32
sS'.thisTrialN'
p3630
I0
sS'.thisN'
p3631
I450
sS'.thisIndex'
p3632
I6
sg15
(lp3633
S'd'
asg17
S'Y'
sg14
I10
sa(dp3634
g16
(lp3635
S'k'
asg95
I10
sS'.thisRepN'
p3636
I30
sg30
VM
sg31
g32
sS'.thisTrialN'
p3637
I1
sS'.thisN'
p3638
I451
sS'.thisIndex'
p3639
I10
sg15
(lp3640
S'k'
asg17
S'Y'
sg14
I10
sa(dp3641
g16
(lp3642
S'd'
asg18
S'Y'
sS'.thisRepN'
p3643
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3644
I2
sS'.thisN'
p3645
I452
sS'.thisIndex'
p3646
I2
sg15
(lp3647
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3648
S'space'
p3649
asg95
I2
sa(dp3650
g16
(lp3651
S'd'
asg18
S'N'
sS'.thisRepN'
p3652
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3653
I3
sS'.thisN'
p3654
I453
sS'.thisIndex'
p3655
I4
sg15
(lp3656
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3657
g16
(lp3658
S'd'
asg18
S'N'
sS'.thisRepN'
p3659
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3660
I4
sS'.thisN'
p3661
I454
sS'.thisIndex'
p3662
I1
sg15
(lp3663
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3664
g16
(lp3665
S'd'
asg18
S'N'
sS'.thisRepN'
p3666
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3667
I5
sS'.thisN'
p3668
I455
sS'.thisIndex'
p3669
I12
sg15
(lp3670
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3671
g16
(lp3672
S'k'
asg18
S'Y'
sS'.thisRepN'
p3673
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3674
I6
sS'.thisN'
p3675
I456
sS'.thisIndex'
p3676
I1
sg15
(lp3677
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3678
S'space'
p3679
asg95
I1
sa(dp3680
g16
(lp3681
S'k'
asg18
S'N'
sS'.thisRepN'
p3682
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3683
I7
sS'.thisN'
p3684
I457
sS'.thisIndex'
p3685
I7
sg15
(lp3686
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3687
g16
(lp3688
S'd'
asg18
S'Y'
sS'.thisRepN'
p3689
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3690
I8
sS'.thisN'
p3691
I458
sS'.thisIndex'
p3692
I0
sg15
(lp3693
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3694
S'space'
p3695
asg95
I0
sa(dp3696
g16
(lp3697
S'k'
asg18
S'Y'
sS'.thisRepN'
p3698
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3699
I9
sS'.thisN'
p3700
I459
sS'.thisIndex'
p3701
I5
sg15
(lp3702
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3703
S'space'
p3704
asg95
I5
sa(dp3705
g16
(lp3706
S'd'
asg18
S'N'
sS'.thisRepN'
p3707
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3708
I10
sS'.thisN'
p3709
I460
sS'.thisIndex'
p3710
I3
sg15
(lp3711
S'k'
asg30
VM
sg17
S'N'
sg14
I10
sg19
(lp3712
S'space'
p3713
asg95
I3
sa(dp3714
g16
(lp3715
S'k'
asg18
S'Y'
sS'.thisRepN'
p3716
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3717
I11
sS'.thisN'
p3718
I461
sS'.thisIndex'
p3719
I11
sg15
(lp3720
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3721
S'space'
p3722
asg95
I11
sa(dp3723
g16
(lp3724
S'd'
asg18
S'Y'
sS'.thisRepN'
p3725
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3726
I12
sS'.thisN'
p3727
I462
sS'.thisIndex'
p3728
I13
sg15
(lp3729
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3730
S'space'
p3731
asg95
I13
sa(dp3732
g16
(lp3733
S'k'
asg18
S'N'
sS'.thisRepN'
p3734
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3735
I13
sS'.thisN'
p3736
I463
sS'.thisIndex'
p3737
I1
sg15
(lp3738
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3739
S'space'
p3740
asg95
I1
sa(dp3741
g16
(lp3742
S'd'
asg18
S'Y'
sS'.thisRepN'
p3743
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3744
I14
sS'.thisN'
p3745
I464
sS'.thisIndex'
p3746
I11
sg15
(lp3747
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3748
S'space'
p3749
asg95
I11
sa(dp3750
g16
(lp3751
S'k'
asg18
S'Y'
sS'.thisRepN'
p3752
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3753
I0
sS'.thisN'
p3754
I465
sS'.thisIndex'
p3755
I13
sg15
(lp3756
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3757
S'space'
p3758
asg95
I13
sa(dp3759
g16
(lp3760
S'k'
asg18
S'N'
sS'.thisRepN'
p3761
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3762
I1
sS'.thisN'
p3763
I466
sS'.thisIndex'
p3764
I8
sg15
(lp3765
S'd'
asg30
VM
sg17
S'N'
sg14
I10
sg19
Nsg95
I8
sa(dp3766
g16
(lp3767
S'k'
asg18
S'Y'
sS'.thisRepN'
p3768
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3769
I2
sS'.thisN'
p3770
I467
sS'.thisIndex'
p3771
I7
sg15
(lp3772
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3773
S'space'
p3774
asg95
I7
sa(dp3775
g16
(lp3776
S'd'
asg18
S'Y'
sS'.thisRepN'
p3777
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3778
I3
sS'.thisN'
p3779
I468
sS'.thisIndex'
p3780
I14
sg15
(lp3781
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3782
S'space'
p3783
asg95
I14
sa(dp3784
g16
(lp3785
S'k'
asg18
S'N'
sS'.thisRepN'
p3786
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3787
I4
sS'.thisN'
p3788
I469
sS'.thisIndex'
p3789
I12
sg15
(lp3790
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3791
g16
(lp3792
S'k'
asg18
S'N'
sS'.thisRepN'
p3793
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3794
I5
sS'.thisN'
p3795
I470
sS'.thisIndex'
p3796
I14
sg15
(lp3797
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3798
g16
(lp3799
S'd'
asg18
S'N'
sS'.thisRepN'
p3800
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3801
I6
sS'.thisN'
p3802
I471
sS'.thisIndex'
p3803
I0
sg15
(lp3804
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3805
g16
(lp3806
S'd'
asg18
S'Y'
sS'.thisRepN'
p3807
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3808
I7
sS'.thisN'
p3809
I472
sS'.thisIndex'
p3810
I8
sg15
(lp3811
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3812
S'space'
p3813
asg95
I8
sa(dp3814
g16
(lp3815
S'k'
asg18
S'N'
sS'.thisRepN'
p3816
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3817
I8
sS'.thisN'
p3818
I473
sS'.thisIndex'
p3819
I8
sg15
(lp3820
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3821
g16
(lp3822
S'k'
asg18
S'N'
sS'.thisRepN'
p3823
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3824
I9
sS'.thisN'
p3825
I474
sS'.thisIndex'
p3826
I13
sg15
(lp3827
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3828
g16
(lp3829
S'k'
asg18
S'Y'
sS'.thisRepN'
p3830
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3831
I10
sS'.thisN'
p3832
I475
sS'.thisIndex'
p3833
I5
sg15
(lp3834
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3835
S'space'
p3836
asg95
I5
sa(dp3837
g16
(lp3838
S'k'
asg18
S'Y'
sS'.thisRepN'
p3839
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3840
I11
sS'.thisN'
p3841
I476
sS'.thisIndex'
p3842
I8
sg15
(lp3843
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3844
S'space'
p3845
asg95
I8
sa(dp3846
g16
(lp3847
S'k'
asg18
S'Y'
sS'.thisRepN'
p3848
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3849
I12
sS'.thisN'
p3850
I477
sS'.thisIndex'
p3851
I6
sg15
(lp3852
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3853
S'space'
p3854
asg95
I6
sa(dp3855
g16
(lp3856
S'd'
asg18
S'Y'
sS'.thisRepN'
p3857
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3858
I13
sS'.thisN'
p3859
I478
sS'.thisIndex'
p3860
I5
sg15
(lp3861
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3862
S'space'
p3863
asg95
I5
sa(dp3864
g16
(lp3865
S'd'
asg18
S'N'
sS'.thisRepN'
p3866
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3867
I14
sS'.thisN'
p3868
I479
sS'.thisIndex'
p3869
I10
sg15
(lp3870
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3871
g16
(lp3872
S'd'
asg18
S'Y'
sS'.thisRepN'
p3873
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3874
I0
sS'.thisN'
p3875
I480
sS'.thisIndex'
p3876
I5
sg15
(lp3877
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3878
S'space'
p3879
asg95
I5
sa(dp3880
g16
(lp3881
S'k'
asg18
S'Y'
sS'.thisRepN'
p3882
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3883
I1
sS'.thisN'
p3884
I481
sS'.thisIndex'
p3885
I12
sg15
(lp3886
S'd'
asg30
VM
sg17
S'N'
sg14
I10
sg19
(lp3887
S'space'
p3888
asg95
I12
sa(dp3889
g16
(lp3890
S'k'
asg18
S'N'
sS'.thisRepN'
p3891
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3892
I2
sS'.thisN'
p3893
I482
sS'.thisIndex'
p3894
I2
sg15
(lp3895
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3896
g16
(lp3897
S'd'
asg18
S'N'
sS'.thisRepN'
p3898
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3899
I3
sS'.thisN'
p3900
I483
sS'.thisIndex'
p3901
I10
sg15
(lp3902
S'k'
asg30
VM
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp3903
g16
(lp3904
S'd'
asg18
S'N'
sS'.thisRepN'
p3905
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3906
I4
sS'.thisN'
p3907
I484
sS'.thisIndex'
p3908
I7
sg15
(lp3909
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3910
g16
(lp3911
S'd'
asg18
S'N'
sS'.thisRepN'
p3912
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3913
I5
sS'.thisN'
p3914
I485
sS'.thisIndex'
p3915
I14
sg15
(lp3916
S'k'
asg30
VM
sg17
S'N'
sg14
I10
sg19
Nsg95
I14
sa(dp3917
g16
(lp3918
S'k'
asg18
S'Y'
sS'.thisRepN'
p3919
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3920
I6
sS'.thisN'
p3921
I486
sS'.thisIndex'
p3922
I7
sg15
(lp3923
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3924
S'space'
p3925
asg95
I7
sa(dp3926
g16
(lp3927
S'k'
asg18
S'N'
sS'.thisRepN'
p3928
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3929
I7
sS'.thisN'
p3930
I487
sS'.thisIndex'
p3931
I4
sg15
(lp3932
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3933
g16
(lp3934
S'd'
asg18
S'Y'
sS'.thisRepN'
p3935
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3936
I8
sS'.thisN'
p3937
I488
sS'.thisIndex'
p3938
I13
sg15
(lp3939
S'k'
asg30
VM
sg17
S'N'
sg14
I10
sg19
(lp3940
S'space'
p3941
asg95
I13
sa(dp3942
g16
(lp3943
S'k'
asg18
S'Y'
sS'.thisRepN'
p3944
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3945
I9
sS'.thisN'
p3946
I489
sS'.thisIndex'
p3947
I2
sg15
(lp3948
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3949
S'space'
p3950
asg95
I2
sa(dp3951
g16
(lp3952
S'd'
asg18
S'N'
sS'.thisRepN'
p3953
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3954
I10
sS'.thisN'
p3955
I490
sS'.thisIndex'
p3956
I4
sg15
(lp3957
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3958
S'space'
p3959
asg95
I4
sa(dp3960
g16
(lp3961
S'd'
asg18
S'Y'
sS'.thisRepN'
p3962
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3963
I11
sS'.thisN'
p3964
I491
sS'.thisIndex'
p3965
I0
sg15
(lp3966
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3967
S'space'
p3968
asg95
I0
sa(dp3969
g16
(lp3970
S'd'
asg18
S'Y'
sS'.thisRepN'
p3971
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3972
I12
sS'.thisN'
p3973
I492
sS'.thisIndex'
p3974
I3
sg15
(lp3975
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3976
S'space'
p3977
asg95
I3
sa(dp3978
g16
(lp3979
S'k'
asg18
S'N'
sS'.thisRepN'
p3980
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3981
I13
sS'.thisN'
p3982
I493
sS'.thisIndex'
p3983
I8
sg15
(lp3984
S'd'
asg30
VM
sg17
S'N'
sg14
I10
sg19
Nsg95
I8
sa(dp3985
g16
(lp3986
S'd'
asg18
S'N'
sS'.thisRepN'
p3987
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3988
I14
sS'.thisN'
p3989
I494
sS'.thisIndex'
p3990
I3
sg15
(lp3991
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3992
g16
(lp3993
S'k'
asg18
S'Y'
sS'.thisRepN'
p3994
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3995
I0
sS'.thisN'
p3996
I495
sS'.thisIndex'
p3997
I7
sg15
(lp3998
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3999
S'space'
p4000
asg95
I7
sa(dp4001
g16
(lp4002
S'd'
asg18
S'Y'
sS'.thisRepN'
p4003
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4004
I1
sS'.thisN'
p4005
I496
sS'.thisIndex'
p4006
I12
sg15
(lp4007
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp4008
S'space'
p4009
asg95
I12
sa(dp4010
g16
(lp4011
S'k'
asg18
S'Y'
sS'.thisRepN'
p4012
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4013
I2
sS'.thisN'
p4014
I497
sS'.thisIndex'
p4015
I7
sg15
(lp4016
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp4017
S'space'
p4018
asg95
I7
sa(dp4019
g16
(lp4020
S'd'
asg18
S'N'
sS'.thisRepN'
p4021
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4022
I3
sS'.thisN'
p4023
I498
sS'.thisIndex'
p4024
I2
sg15
(lp4025
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp4026
g16
(lp4027
S'k'
asg18
S'N'
sg22
I44
sS'.thisN'
p4028
I499
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4029
I4
sS'.thisRepN'
p4030
I33
sg21
I43
sS'.thisIndex'
p4031
I2
sg23
I25
sg15
(lp4032
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp4033
S'space'
p4034
asg95
I2
sa(dp4035
g16
(lp4036
S'k'
asS'.thisIndex'
p4037
I9
sS'.thisRepN'
p4038
I33
sg26
S'Y'
sg30
VM
sg31
g32
sS'.thisTrialN'
p4039
I5
sS'.thisN'
p4040
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4041
S'd'
asg17
S'Y'
sg14
I11
sg95
I9
sa(dp4042
g16
(lp4043
S'd'
asS'.thisIndex'
p4044
I13
sS'.thisRepN'
p4045
I33
sg26
S'Y'
sg30
VM
sg31
g32
sS'.thisTrialN'
p4046
I6
sS'.thisN'
p4047
I501
sg25
S'Y'
sg15
(lp4048
S'k'
asg17
S'Y'
sg14
I11
sg95
I13
sa(dp4049
g16
(lp4050
S'd'
asg18
S'N'
sS'.thisRepN'
p4051
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4052
I7
sS'.thisN'
p4053
I502
sg25
S'Y'
sg15
(lp4054
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4055
I0
sa(dp4056
g16
(lp4057
S'k'
asg18
S'N'
sS'.thisRepN'
p4058
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4059
I8
sS'.thisN'
p4060
I503
sg25
S'Y'
sg15
(lp4061
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4062
I8
sa(dp4063
g16
(lp4064
S'k'
asg18
S'Y'
sS'.thisRepN'
p4065
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4066
I9
sS'.thisN'
p4067
I504
sg25
S'Y'
sg15
(lp4068
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4069
S'space'
p4070
asg95
I14
sS'.thisIndex'
p4071
I14
sa(dp4072
g16
(lp4073
S'k'
asg18
S'Y'
sS'.thisRepN'
p4074
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4075
I10
sS'.thisN'
p4076
I505
sg25
S'Y'
sg15
(lp4077
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4078
S'space'
p4079
asg95
I6
sS'.thisIndex'
p4080
I6
sa(dp4081
g16
(lp4082
S'k'
asg18
S'Y'
sS'.thisRepN'
p4083
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4084
I11
sS'.thisN'
p4085
I506
sg25
S'Y'
sg15
(lp4086
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4087
S'space'
p4088
asg95
I7
sS'.thisIndex'
p4089
I7
sa(dp4090
g16
(lp4091
S'd'
asg18
S'N'
sS'.thisRepN'
p4092
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4093
I12
sS'.thisN'
p4094
I507
sg25
S'Y'
sg15
(lp4095
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4096
I12
sa(dp4097
g16
(lp4098
S'k'
asg18
S'N'
sS'.thisRepN'
p4099
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4100
I13
sS'.thisN'
p4101
I508
sg25
S'Y'
sg15
(lp4102
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4103
I13
sa(dp4104
g16
(lp4105
S'k'
asg18
S'N'
sS'.thisRepN'
p4106
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4107
I14
sS'.thisN'
p4108
I509
sg25
S'Y'
sg15
(lp4109
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4110
S'space'
p4111
asg95
I13
sS'.thisIndex'
p4112
I13
sa(dp4113
g16
(lp4114
S'd'
asg18
S'N'
sS'.thisRepN'
p4115
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4116
I0
sS'.thisN'
p4117
I510
sg25
S'Y'
sg15
(lp4118
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4119
I4
sa(dp4120
g16
(lp4121
S'k'
asg18
S'N'
sS'.thisRepN'
p4122
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4123
I1
sS'.thisN'
p4124
I511
sg25
S'Y'
sg15
(lp4125
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4126
I9
sa(dp4127
g16
(lp4128
S'k'
asg18
S'N'
sS'.thisRepN'
p4129
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4130
I2
sS'.thisN'
p4131
I512
sg25
S'Y'
sg15
(lp4132
S'k'
asg30
VM
sg17
S'N'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4133
I11
sa(dp4134
g16
(lp4135
S'd'
asg18
S'N'
sS'.thisRepN'
p4136
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4137
I3
sS'.thisN'
p4138
I513
sg25
S'Y'
sg15
(lp4139
S'd'
asg30
VM
sg17
S'N'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4140
I12
sa(dp4141
g16
(lp4142
S'd'
asg18
S'N'
sS'.thisRepN'
p4143
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4144
I4
sS'.thisN'
p4145
I514
sg25
S'Y'
sg15
(lp4146
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4147
I1
sa(dp4148
g16
(lp4149
S'd'
asg18
S'N'
sS'.thisRepN'
p4150
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4151
I5
sS'.thisN'
p4152
I515
sg25
S'Y'
sg15
(lp4153
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4154
I0
sa(dp4155
g16
(lp4156
S'k'
asg18
S'N'
sS'.thisRepN'
p4157
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4158
I6
sS'.thisN'
p4159
I516
sg25
S'Y'
sg15
(lp4160
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4161
I4
sa(dp4162
g16
(lp4163
S'd'
asg18
S'N'
sS'.thisRepN'
p4164
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4165
I7
sS'.thisN'
p4166
I517
sg25
S'Y'
sg15
(lp4167
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4168
I8
sa(dp4169
g16
(lp4170
S'd'
asg18
S'N'
sS'.thisRepN'
p4171
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4172
I8
sS'.thisN'
p4173
I518
sg25
S'Y'
sg15
(lp4174
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4175
I8
sa(dp4176
g16
(lp4177
S'd'
asg18
S'N'
sS'.thisRepN'
p4178
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4179
I9
sS'.thisN'
p4180
I519
sg25
S'Y'
sg15
(lp4181
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4182
I9
sa(dp4183
g16
(lp4184
S'd'
asg18
S'Y'
sS'.thisRepN'
p4185
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4186
I10
sS'.thisN'
p4187
I520
sg25
S'Y'
sg15
(lp4188
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4189
S'space'
p4190
asg95
I14
sS'.thisIndex'
p4191
I14
sa(dp4192
g16
(lp4193
S'k'
asg18
S'N'
sS'.thisRepN'
p4194
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4195
I11
sS'.thisN'
p4196
I521
sg25
S'Y'
sg15
(lp4197
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4198
I2
sa(dp4199
g16
(lp4200
S'k'
asg18
S'N'
sS'.thisRepN'
p4201
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4202
I12
sS'.thisN'
p4203
I522
sg25
S'Y'
sg15
(lp4204
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4205
I6
sa(dp4206
g16
(lp4207
S'k'
asg18
S'N'
sS'.thisRepN'
p4208
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4209
I13
sS'.thisN'
p4210
I523
sg25
S'Y'
sg15
(lp4211
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4212
I8
sa(dp4213
g16
(lp4214
S'd'
asg18
S'Y'
sS'.thisRepN'
p4215
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4216
I14
sS'.thisN'
p4217
I524
sg25
S'Y'
sg15
(lp4218
S'd'
asg30
VM
sg17
S'N'
sg14
I11
sg19
(lp4219
S'space'
p4220
asg95
I10
sS'.thisIndex'
p4221
I10
sa(dp4222
g16
(lp4223
S'd'
asg18
S'N'
sS'.thisRepN'
p4224
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4225
I0
sS'.thisN'
p4226
I525
sg25
S'Y'
sg15
(lp4227
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4228
I13
sa(dp4229
g16
(lp4230
S'k'
asg18
S'Y'
sS'.thisRepN'
p4231
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4232
I1
sS'.thisN'
p4233
I526
sg25
S'Y'
sg15
(lp4234
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4235
I6
sa(dp4236
g16
(lp4237
S'd'
asg18
S'N'
sS'.thisRepN'
p4238
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4239
I2
sS'.thisN'
p4240
I527
sg25
S'Y'
sg15
(lp4241
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4242
I7
sa(dp4243
g16
(lp4244
S'k'
asg18
S'Y'
sS'.thisRepN'
p4245
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4246
I3
sS'.thisN'
p4247
I528
sg25
S'Y'
sg15
(lp4248
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4249
S'space'
p4250
asg95
I14
sS'.thisIndex'
p4251
I14
sa(dp4252
g16
(lp4253
S'd'
asg18
S'N'
sS'.thisRepN'
p4254
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4255
I4
sS'.thisN'
p4256
I529
sg25
S'Y'
sg15
(lp4257
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4258
I6
sa(dp4259
g16
(lp4260
S'd'
asg18
S'Y'
sS'.thisRepN'
p4261
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4262
I5
sS'.thisN'
p4263
I530
sg25
S'Y'
sg15
(lp4264
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4265
S'space'
p4266
asg95
I11
sS'.thisIndex'
p4267
I11
sa(dp4268
g16
(lp4269
S'k'
asg18
S'N'
sS'.thisRepN'
p4270
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4271
I6
sS'.thisN'
p4272
I531
sg25
S'Y'
sg15
(lp4273
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4274
I2
sa(dp4275
g16
(lp4276
S'k'
asg18
S'Y'
sS'.thisRepN'
p4277
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4278
I7
sS'.thisN'
p4279
I532
sg25
S'Y'
sg15
(lp4280
S'k'
asg30
VM
sg17
S'N'
sg14
I11
sg19
(lp4281
S'space'
p4282
asg95
I11
sS'.thisIndex'
p4283
I11
sa(dp4284
g16
(lp4285
S'd'
asg18
S'Y'
sS'.thisRepN'
p4286
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4287
I8
sS'.thisN'
p4288
I533
sg25
S'Y'
sg15
(lp4289
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4290
S'space'
p4291
asg95
I10
sS'.thisIndex'
p4292
I10
sa(dp4293
g16
(lp4294
S'k'
asg18
S'N'
sS'.thisRepN'
p4295
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4296
I9
sS'.thisN'
p4297
I534
sg25
S'Y'
sg15
(lp4298
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4299
I6
sa(dp4300
g16
(lp4301
S'k'
asg18
S'N'
sS'.thisRepN'
p4302
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4303
I10
sS'.thisN'
p4304
I535
sg25
S'Y'
sg15
(lp4305
S'k'
asg30
VM
sg17
S'N'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4306
I8
sa(dp4307
g16
(lp4308
S'd'
asg18
S'N'
sS'.thisRepN'
p4309
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4310
I11
sS'.thisN'
p4311
I536
sg25
S'Y'
sg15
(lp4312
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4313
I9
sa(dp4314
g16
(lp4315
S'd'
asg18
S'N'
sS'.thisRepN'
p4316
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4317
I12
sS'.thisN'
p4318
I537
sg25
S'Y'
sg15
(lp4319
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4320
I3
sa(dp4321
g16
(lp4322
S'k'
asg18
S'Y'
sS'.thisRepN'
p4323
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4324
I13
sS'.thisN'
p4325
I538
sg25
S'Y'
sg15
(lp4326
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4327
S'space'
p4328
asg95
I10
sS'.thisIndex'
p4329
I10
sa(dp4330
g16
(lp4331
S'd'
asg18
S'Y'
sS'.thisRepN'
p4332
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4333
I14
sS'.thisN'
p4334
I539
sg25
S'Y'
sg15
(lp4335
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4336
I0
sa(dp4337
g16
(lp4338
S'k'
asg18
S'Y'
sS'.thisRepN'
p4339
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4340
I0
sS'.thisN'
p4341
I540
sg25
S'Y'
sg15
(lp4342
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4343
S'space'
p4344
asg95
I5
sS'.thisIndex'
p4345
I5
sa(dp4346
g16
(lp4347
S'k'
asg18
S'N'
sS'.thisRepN'
p4348
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4349
I1
sS'.thisN'
p4350
I541
sg25
S'Y'
sg15
(lp4351
S'k'
asg30
VM
sg17
S'N'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4352
I6
sa(dp4353
g16
(lp4354
S'k'
asg18
S'Y'
sS'.thisRepN'
p4355
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4356
I2
sS'.thisN'
p4357
I542
sg25
S'Y'
sg15
(lp4358
S'k'
asg30
VM
sg17
S'N'
sg14
I11
sg19
(lp4359
S'space'
p4360
asg95
I1
sS'.thisIndex'
p4361
I1
sa(dp4362
g16
(lp4363
S'k'
asg18
S'Y'
sS'.thisRepN'
p4364
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4365
I3
sS'.thisN'
p4366
I543
sg25
S'Y'
sg15
(lp4367
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4368
S'space'
p4369
asg95
I12
sS'.thisIndex'
p4370
I12
sa(dp4371
g16
(lp4372
S'k'
asg18
S'Y'
sS'.thisRepN'
p4373
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4374
I4
sS'.thisN'
p4375
I544
sg25
S'Y'
sg15
(lp4376
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4377
S'space'
p4378
asg95
I6
sS'.thisIndex'
p4379
I6
sa(dp4380
g16
(lp4381
S'k'
asg18
S'Y'
sS'.thisRepN'
p4382
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4383
I5
sS'.thisN'
p4384
I545
sg25
S'Y'
sg15
(lp4385
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4386
S'space'
p4387
asg95
I1
sS'.thisIndex'
p4388
I1
sa(dp4389
g16
(lp4390
S'k'
asg18
S'Y'
sS'.thisRepN'
p4391
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4392
I6
sS'.thisN'
p4393
I546
sg25
S'Y'
sg15
(lp4394
S'k'
asg30
VM
sg17
S'N'
sg14
I11
sg19
(lp4395
S'space'
p4396
asg95
I5
sS'.thisIndex'
p4397
I5
sa(dp4398
g16
(lp4399
S'k'
asg18
S'N'
sS'.thisRepN'
p4400
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4401
I7
sS'.thisN'
p4402
I547
sg25
S'Y'
sg15
(lp4403
S'k'
asg30
VM
sg17
S'N'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4404
I13
sa(dp4405
g16
(lp4406
S'd'
asg18
S'Y'
sS'.thisRepN'
p4407
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4408
I8
sS'.thisN'
p4409
I548
sg25
S'Y'
sg15
(lp4410
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4411
S'space'
p4412
asg95
I10
sS'.thisIndex'
p4413
I10
sa(dp4414
g16
(lp4415
S'k'
asg18
S'N'
sg22
I45
sg26
S'Y'
sS'.thisN'
p4416
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4417
I9
sS'.thisRepN'
p4418
I36
sg21
I41
sg25
S'Y'
sg23
I19
sg15
(lp4419
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4420
I10
sa(dp4421
g16
(lp4422
S'k'
asS'.thisIndex'
p4423
I2
sS'.thisRepN'
p4424
I36
sg26
S'Y'
sg30
VM
sg31
g32
sS'.thisTrialN'
p4425
I10
sS'.thisN'
p4426
I550
sg25
S'Y'
sg15
(lp4427
S'd'
asg17
S'Y'
sg14
I12
sg95
I2
sa(dp4428
g16
(lp4429
S'd'
asS'.thisIndex'
p4430
I12
sS'.thisRepN'
p4431
I36
sg26
S'Y'
sg30
VM
sg31
g32
sS'.thisTrialN'
p4432
I11
sS'.thisN'
p4433
I551
sg25
S'Y'
sg15
(lp4434
S'd'
asg17
S'N'
sg14
I12
sg95
I12
sa(dp4435
g16
(lp4436
S'k'
asg18
S'Y'
sS'.thisRepN'
p4437
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4438
I12
sS'.thisN'
p4439
I552
sg25
S'Y'
sg15
(lp4440
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4441
S'space'
p4442
asg95
I6
sS'.thisIndex'
p4443
I6
sa(dp4444
g16
(lp4445
S'd'
asg18
S'N'
sS'.thisRepN'
p4446
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4447
I13
sS'.thisN'
p4448
I553
sg25
S'Y'
sg15
(lp4449
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4450
I11
sa(dp4451
g16
(lp4452
S'd'
asg18
S'N'
sS'.thisRepN'
p4453
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4454
I14
sS'.thisN'
p4455
I554
sg25
S'Y'
sg15
(lp4456
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4457
I0
sa(dp4458
g16
(lp4459
S'k'
asg18
S'Y'
sS'.thisRepN'
p4460
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4461
I0
sS'.thisN'
p4462
I555
sg25
S'Y'
sg15
(lp4463
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4464
S'space'
p4465
asg95
I13
sS'.thisIndex'
p4466
I13
sa(dp4467
g16
(lp4468
S'd'
asg18
S'N'
sS'.thisRepN'
p4469
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4470
I1
sS'.thisN'
p4471
I556
sg25
S'Y'
sg15
(lp4472
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4473
I11
sa(dp4474
g16
(lp4475
S'd'
asg18
S'N'
sS'.thisRepN'
p4476
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4477
I2
sS'.thisN'
p4478
I557
sg25
S'Y'
sg15
(lp4479
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4480
I5
sa(dp4481
g16
(lp4482
S'k'
asg18
S'N'
sS'.thisRepN'
p4483
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4484
I3
sS'.thisN'
p4485
I558
sg25
S'Y'
sg15
(lp4486
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4487
I13
sa(dp4488
g16
(lp4489
S'k'
asg18
S'Y'
sS'.thisRepN'
p4490
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4491
I4
sS'.thisN'
p4492
I559
sg25
S'Y'
sg15
(lp4493
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4494
S'space'
p4495
asg95
I11
sS'.thisIndex'
p4496
I11
sa(dp4497
g16
(lp4498
S'd'
asg18
S'Y'
sS'.thisRepN'
p4499
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4500
I5
sS'.thisN'
p4501
I560
sg25
S'Y'
sg15
(lp4502
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4503
S'space'
p4504
asg95
I11
sS'.thisIndex'
p4505
I11
sa(dp4506
g16
(lp4507
S'k'
asg18
S'Y'
sS'.thisRepN'
p4508
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4509
I6
sS'.thisN'
p4510
I561
sg25
S'Y'
sg15
(lp4511
S'k'
asg30
VM
sg17
S'N'
sg14
I12
sg19
(lp4512
S'space'
p4513
asg95
I11
sS'.thisIndex'
p4514
I11
sa(dp4515
g16
(lp4516
S'k'
asg18
S'Y'
sS'.thisRepN'
p4517
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4518
I7
sS'.thisN'
p4519
I562
sg25
S'Y'
sg15
(lp4520
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4521
S'space'
p4522
asg95
I13
sS'.thisIndex'
p4523
I13
sa(dp4524
g16
(lp4525
S'd'
asg18
S'N'
sS'.thisRepN'
p4526
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4527
I8
sS'.thisN'
p4528
I563
sg25
S'Y'
sg15
(lp4529
S'd'
asg30
VM
sg17
S'N'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4530
I1
sa(dp4531
g16
(lp4532
S'k'
asg18
S'N'
sS'.thisRepN'
p4533
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4534
I9
sS'.thisN'
p4535
I564
sg25
S'Y'
sg15
(lp4536
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4537
I4
sa(dp4538
g16
(lp4539
S'd'
asg18
S'Y'
sS'.thisRepN'
p4540
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4541
I10
sS'.thisN'
p4542
I565
sg25
S'Y'
sg15
(lp4543
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4544
S'space'
p4545
asg95
I9
sS'.thisIndex'
p4546
I9
sa(dp4547
g16
(lp4548
S'd'
asg18
S'N'
sS'.thisRepN'
p4549
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4550
I11
sS'.thisN'
p4551
I566
sg25
S'Y'
sg15
(lp4552
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4553
I11
sa(dp4554
g16
(lp4555
S'k'
asg18
S'N'
sS'.thisRepN'
p4556
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4557
I12
sS'.thisN'
p4558
I567
sg25
S'Y'
sg15
(lp4559
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4560
S'space'
p4561
asg95
I3
sS'.thisIndex'
p4562
I3
sa(dp4563
g16
(lp4564
S'd'
asg18
S'Y'
sS'.thisRepN'
p4565
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4566
I13
sS'.thisN'
p4567
I568
sg25
S'Y'
sg15
(lp4568
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4569
S'space'
p4570
asg95
I3
sS'.thisIndex'
p4571
I3
sa(dp4572
g16
(lp4573
S'd'
asg18
S'Y'
sS'.thisRepN'
p4574
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4575
I14
sS'.thisN'
p4576
I569
sg25
S'Y'
sg15
(lp4577
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4578
S'space'
p4579
asg95
I13
sS'.thisIndex'
p4580
I13
sa(dp4581
g16
(lp4582
S'd'
asg18
S'N'
sS'.thisRepN'
p4583
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4584
I0
sS'.thisN'
p4585
I570
sg25
S'Y'
sg15
(lp4586
S'd'
asg30
VM
sg17
S'N'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4587
I13
sa(dp4588
g16
(lp4589
S'k'
asg18
S'Y'
sS'.thisRepN'
p4590
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4591
I1
sS'.thisN'
p4592
I571
sg25
S'Y'
sg15
(lp4593
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4594
I8
sa(dp4595
g16
(lp4596
S'k'
asg18
S'N'
sS'.thisRepN'
p4597
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4598
I2
sS'.thisN'
p4599
I572
sg25
S'Y'
sg15
(lp4600
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4601
I9
sa(dp4602
g16
(lp4603
S'd'
asg18
S'N'
sS'.thisRepN'
p4604
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4605
I3
sS'.thisN'
p4606
I573
sg25
S'Y'
sg15
(lp4607
S'd'
asg30
VM
sg17
S'N'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4608
I7
sa(dp4609
g16
(lp4610
S'k'
asg18
S'N'
sS'.thisRepN'
p4611
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4612
I4
sS'.thisN'
p4613
I574
sg25
S'Y'
sg15
(lp4614
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4615
I2
sa(dp4616
g16
(lp4617
S'd'
asg18
S'N'
sS'.thisRepN'
p4618
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4619
I5
sS'.thisN'
p4620
I575
sg25
S'Y'
sg15
(lp4621
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4622
I1
sa(dp4623
g16
(lp4624
S'k'
asg18
S'N'
sS'.thisRepN'
p4625
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4626
I6
sS'.thisN'
p4627
I576
sg25
S'Y'
sg15
(lp4628
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4629
I9
sa(dp4630
g16
(lp4631
S'd'
asg18
S'N'
sS'.thisRepN'
p4632
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4633
I7
sS'.thisN'
p4634
I577
sg25
S'Y'
sg15
(lp4635
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4636
I0
sa(dp4637
g16
(lp4638
S'k'
asg18
S'Y'
sS'.thisRepN'
p4639
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4640
I8
sS'.thisN'
p4641
I578
sg25
S'Y'
sg15
(lp4642
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4643
S'space'
p4644
asg95
I3
sS'.thisIndex'
p4645
I3
sa(dp4646
g16
(lp4647
S'k'
asg18
S'N'
sS'.thisRepN'
p4648
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4649
I9
sS'.thisN'
p4650
I579
sg25
S'Y'
sg15
(lp4651
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4652
I6
sa(dp4653
g16
(lp4654
S'k'
asg18
S'N'
sS'.thisRepN'
p4655
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4656
I10
sS'.thisN'
p4657
I580
sg25
S'Y'
sg15
(lp4658
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I14
sS'.thisIndex'
p4659
I14
sa(dp4660
g16
(lp4661
S'd'
asg18
S'N'
sS'.thisRepN'
p4662
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4663
I11
sS'.thisN'
p4664
I581
sg25
S'Y'
sg15
(lp4665
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4666
I2
sa(dp4667
g16
(lp4668
S'k'
asg18
S'Y'
sS'.thisRepN'
p4669
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4670
I12
sS'.thisN'
p4671
I582
sg25
S'Y'
sg15
(lp4672
S'k'
asg30
VM
sg17
S'N'
sg14
I12
sg19
(lp4673
S'space'
p4674
asg95
I1
sS'.thisIndex'
p4675
I1
sa(dp4676
g16
(lp4677
S'k'
asg18
S'N'
sS'.thisRepN'
p4678
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4679
I13
sS'.thisN'
p4680
I583
sg25
S'Y'
sg15
(lp4681
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4682
S'space'
p4683
asg95
I14
sS'.thisIndex'
p4684
I14
sa(dp4685
g16
(lp4686
S'k'
asg18
S'N'
sS'.thisRepN'
p4687
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4688
I14
sS'.thisN'
p4689
I584
sg25
S'Y'
sg15
(lp4690
S'k'
asg30
VM
sg17
S'N'
sg14
I12
sg19
(lp4691
S'space'
p4692
asg95
I10
sS'.thisIndex'
p4693
I10
sa(dp4694
g16
(lp4695
S'd'
asg18
S'N'
sS'.thisRepN'
p4696
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4697
I0
sS'.thisN'
p4698
I585
sg25
S'Y'
sg15
(lp4699
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4700
I0
sa(dp4701
g16
(lp4702
S'k'
asg18
S'Y'
sS'.thisRepN'
p4703
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4704
I1
sS'.thisN'
p4705
I586
sg25
S'Y'
sg15
(lp4706
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4707
I11
sa(dp4708
g16
(lp4709
S'k'
asg18
S'N'
sS'.thisRepN'
p4710
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4711
I2
sS'.thisN'
p4712
I587
sg25
S'Y'
sg15
(lp4713
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4714
I4
sa(dp4715
g16
(lp4716
S'k'
asg18
S'Y'
sS'.thisRepN'
p4717
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4718
I3
sS'.thisN'
p4719
I588
sg25
S'Y'
sg15
(lp4720
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4721
S'space'
p4722
asg95
I1
sS'.thisIndex'
p4723
I1
sa(dp4724
g16
(lp4725
S'k'
asg18
S'Y'
sS'.thisRepN'
p4726
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4727
I4
sS'.thisN'
p4728
I589
sg25
S'Y'
sg15
(lp4729
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4730
S'space'
p4731
asg95
I0
sS'.thisIndex'
p4732
I0
sa(dp4733
g16
(lp4734
S'd'
asg18
S'N'
sS'.thisRepN'
p4735
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4736
I5
sS'.thisN'
p4737
I590
sg25
S'Y'
sg15
(lp4738
S'd'
asg30
VM
sg17
S'N'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4739
I6
sa(dp4740
g16
(lp4741
S'k'
asg18
S'N'
sS'.thisRepN'
p4742
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4743
I6
sS'.thisN'
p4744
I591
sg25
S'Y'
sg15
(lp4745
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4746
I1
sa(dp4747
g16
(lp4748
S'k'
asg18
S'N'
sS'.thisRepN'
p4749
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4750
I7
sS'.thisN'
p4751
I592
sg25
S'Y'
sg15
(lp4752
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4753
I7
sa(dp4754
g16
(lp4755
S'k'
asg18
S'N'
sS'.thisRepN'
p4756
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4757
I8
sS'.thisN'
p4758
I593
sg25
S'Y'
sg15
(lp4759
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4760
S'space'
p4761
asg95
I3
sS'.thisIndex'
p4762
I3
sa(dp4763
g16
(lp4764
S'k'
asg18
S'Y'
sS'.thisRepN'
p4765
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4766
I9
sS'.thisN'
p4767
I594
sg25
S'Y'
sg15
(lp4768
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4769
S'space'
p4770
asg95
I6
sS'.thisIndex'
p4771
I6
sa(dp4772
g16
(lp4773
S'd'
asg18
S'N'
sS'.thisRepN'
p4774
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4775
I10
sS'.thisN'
p4776
I595
sg25
S'Y'
sg15
(lp4777
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4778
I9
sa(dp4779
g16
(lp4780
S'k'
asg18
S'Y'
sS'.thisRepN'
p4781
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4782
I11
sS'.thisN'
p4783
I596
sg25
S'Y'
sg15
(lp4784
S'k'
asg30
VM
sg17
S'N'
sg14
I12
sg19
(lp4785
S'space'
p4786
asg95
I3
sS'.thisIndex'
p4787
I3
sa(dp4788
g16
(lp4789
S'd'
asg18
S'Y'
sS'.thisRepN'
p4790
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4791
I12
sS'.thisN'
p4792
I597
sg25
S'Y'
sg15
(lp4793
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4794
S'space'
p4795
asg95
I12
sS'.thisIndex'
p4796
I12
sa(dp4797
g16
(lp4798
S'k'
asg18
S'N'
sS'.thisRepN'
p4799
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4800
I13
sS'.thisN'
p4801
I598
sg25
S'Y'
sg15
(lp4802
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4803
I4
sa(dp4804
g16
(lp4805
S'k'
asg18
S'Y'
sg22
I41
sg26
S'Y'
sS'.thisN'
p4806
I599
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4807
I14
sS'.thisRepN'
p4808
I39
sg21
I41
sg25
S'Y'
sg23
I19
sg15
(lp4809
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I14
sS'.thisIndex'
p4810
I14
sasS'loops'
p4811
(lp4812
g1
(g35
g3
NtRp4813
(dp4814
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4815
sg40
(lp4816
sg41
I76233264
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4817
g48
g49
(g50
g51
g52
S'b'
tRp4818
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4819
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80C\x00\x00\x9dC\x00\x00\xcbC\x00\x00\tD\x00\x00\x0cB\x00\x80\xe2C\x00\x00HB\x00\x00\xf8B\x00\x00KC\x00\x00\xf0A\x00\x00\xe8A\x00\x00\x83C\x00\x80\xaeC\x00\x00\x1aC\x00\x00\x9bC\x00\x00)C\x00\x00\x82C\x00\x00\xe7C\x00\x80\xc1C\x00\x00\xaaC\x00\x80\x81C\x00\x00\x17C\x00\x00\xb6C\x00@\x00D\x00\x00\xcfC\x00\x00iC\x00\x000A\x00\x80\xacC\x00\x00\x94C\x00\x00\xaeC\x00\x00PC\x00\x00DC\x00\x00*C\x00\x80\xe3C\x00\x00RC\x00\x80\xcbC\x00\x00\xecC\x00\x00_C\x00\x80\x9bC\x00\x00\xd2C\x00\x00\xf4C\x00\x00-C\x00\x80\xc3C\x00\x00\x8bC\x00\x80\x94C\x00\x80\x82C\x00\x00\x9aC\x00\x00$B\x00@\x11D\x00\x008C\x00\x80\x8eC\x00\x00\x03D\x00\x00PA\x00\x00JC\x00\x00`A\x00\x00\xc4C\x00\x00\xf9C\x00\x00tC\x00\x80\xb5C\x00\x00\x87C\x00\x000B\x00\x00\xa9C\x00\x80\xdaC\x00\xc0\x0fD\x00\x00\xb8C\x00\x80\xd2C\x00\x00\xa5C\x00\x80\xbeC\x00\x00\x10B\x00\x00rC\x00\x00\x88C\x00\x00\xe8C\x00\x00\xb4C\x00\x00#C\x00\x80\xabC\x00\x00\x98C\x00\x80\x90C\x00\x00lB\x00\x80\x8dC\x00\x00\x84B\x00\x00XC\x00\x80\xb3C\x00\x00\xe5C\x00\x80\xadC\x00\x00\xf0C\x00\x009C\x00\x80\x9fC\x00\x00\xa8B\x00\x00SC\x00\x00<B\x00\x80\xf1C\x00\x00\xefC\x00\x00pB\x00\x00\x8cC\x00\xc0\x03D\x00\x00qC\x00\x00\xa2B\x00\x00\xc4B\x00\x00\xf5C\x00\x80\xe0C\x00\x00$C\x00\x00\xb0C\x00\x80\x89C\x00@\x0eD\x00\x00\nC\x00\x00jC\x00\x80\x01D\x00\x00\xe2B\x00\x00\xdeB\x00\x00\xa8A\x00\x00\xd0B\x00@\nD\x00@\x04D\x00\x001C\x00\x80\x8fC\x00\x00"C\x00\x00\xf2C\x00\x80\x97C\x00\x80\xb9C\x00\x00QC\x00@\x15D\x00\x00\xe6B\x00\x80\xa1C\x00\x00\x0cC\x00@\x0bD\x00\x80\xebC\x00\x00aC\x00\x00\xffC\x00\x00\x92B\x00\x80\xb6C\x00\xc0\x0cD\x00\x00\xc8C\x00\x00\xacC\x00\x00\x05C\x00\x00\xf6B\x00\x00sC\x00\x00\x07C\x00\x00\xc0C\x00\x00\x10C\x00\x00dC\x00\x00\x82B\x00\x00\xdcB\x00\x00\xc6C\x00\x80\x84C\x00\x00\x18B\x00\x80\x00D\x00\x00mC\x00\x003C\x00@\rD\x00\x00\xd2B\x00\x00\xd8A\x00\x00\xaaB\x00\x00\xf8A\x00\x00\x80A\x00\x00\xb4B\x00\x00\xfaB\x00\x80\xaaC\x00@\x01D\x00\x00\xbcC\x00\x80\xa4C\x00\x00;C\x00\x00\x06D\x00\x00\x8aC\x00\x80\xd0C\x00\x00\xa6B\x00@\x0fD\x00\x00YC\x00\x00BC\x00\x00\x06C\x00\x00\xc8B\x00\x00?C\x00\xc0\x14D\x00\x80\x04D\x00\x80\xf2C\x00\xc0\x06D\x00\x00|B\x00\x80\xd5C\x00\x00\x80?\x00\x00IC\x00\x80\xb7C\x00\x00\xbaB\x00\x00\x15C\x00\x00\xa0C\x00\x00\x9cC\x00\x80\xb8C\x00@\x12D\x00@\x06D\x00\x00MC\x00\xc0\x01D\x00\x00\xbfC\x00\x00uC\x00\x00\xd4C\x00\x006C\x00\x00\xe2C\x00\x008B\x00\x00\xccC\x00\x00\x8aB\x00\x00\x0eC\x00\x00\xd7C\x00\x00kC\x00\x00]C\x00\x00\x93C\x00\x00\xdbC\x00\x00@B\x00\x00TB\x00\x00\x98A\x00\x00\x88A\x00\x00\xe6C\x00\x00CC\x00\x00\x1cC\x00\x00EC\x00\x80\xf5C\x00\x80\xdbC\x00@\x05D\x00\x00}C\x00\x00TC\x00\x80\xa6C\x00\x80\x0eD\x00\x00,B\x00\x00\x0bC\x00\x80\xa5C\x00\x00\xfbC\x00\x00!C\x00\x00\xa0B\x00\x80\nD\x00\x00(B\x00\x00fC\x00\x00\\B\x00\x00\xf6C\x00\x00\xeaC\x00\x00\xa6C\x00\x00\xb8A\x00\x00\xc5C\x00\x00\x90A\x00\x00%C\x00\x00\xe0@\x00\x00vC\x00\x00<C\x00\x00LB\x00\x80\xd3C\x00\x00\x03C\x00\x00\x02D\x00\x00\xa1C\x00\x80\xc5C\x00\x00\xa3C\x00\x00\xc3C\x00\x80\rD\x00\x00wC\x00\x00^C\x00\x00\x80B\x00\x80\xfaC\x00\x00\x0eD\x00\x00\xa4C\x00\x00\x02C\x00\x80\x8bC\x00\x00lC\x00\x00\xcaC\x00\x00\xf8C\x00\x00nC\x00\x00WC\x00\xc0\tD\x00\x80\x9aC\x00\x00\xd5C\x00\x80\xc4C\x00\x00\xe1C\x00\x00LC\x00\x00\xe3C\x00\x00NC\x00\x80\xfdC\x00\x00\x88B\x00\x80\x92C\x00\x00\xe0C\x00\x00>C\x00\x00\xb2C\x00\x00\xa7C\x00\x00\xf7C\x00\x80\xefC\x00@\x03D\x00\x00\xdaC\x00\x00\xb2B\x00\x00\x0fC\x00\x00\x0bD\x00\x80\x87C\x00\x00\x92C\x00\x00\x86C\x00\x00\x85C\x00\x00\x00B\x00@\x10D\x00\x00\xccB\x00\x00\xd0A\x00\x00\xd3C\x00\x00\x99C\x00\x00~C\x00\x00\x18C\x00\x00\x94B\x00\xc0\x00D\x00\x00[C\x00\x80\x83C\x00\x80\x13D\x00\x00\x0cD\x00\x00\x81C\x00\x80\xecC\x00\x00\x1cB\x00\x00\x14B\x00\x00\x1bC\x00\x00\xe4B\x00\x00\xb1C\x00\x00\x08B\x00\x00\xe8B\x00\x00yC\x00\x00\xd6C\x00\x00\xabC\x00\x80\xb0C\x00\x80\xafC\x00\x00\x8cB\x00\x00,C\x00\x00tB\x00@\x14D\x00\x80\xe6C\x00\x00\xceC\x00\x80\xcdC\x00\x00|C\x00\x00\xb9C\x00\x00\x05D\x00\x80\xf7C\x00\x00=C\x00\x00\xe9C\x00\x80\x0cD\x00\x00\x96C\x00\x00\x01D\x00\x80\x8aC\x00\x80\x9eC\x00\x80\xb1C\x00\x00\x1eC\x00\x00\x11D\x00\x00\xbaC\x00\x00+C\x00\x00\xb7C\x00\x80\xe9C\x00\x00hC\x00\x00`B\x00\x00\xbbC\x00\x00\xddC\x00\x00\xbeC\x00\x00\x9eC\x00\x00\x8fC\x00\x00\x8dC\x00\x80\xffC\x00\x00\x00A\x00\x00\xeeB\x00\x00xB\x00\xc0\x10D\x00\x00\xeaB\x00\x00\xacB\x00\xc0\x15D\x00\x00\x16C\x00\x00oC\x00\x00\xa4B\x00\x80\x15D\x00\x00\x9aB\x00\x00\xf3C\x00\xc0\x12D\x00\x80\x03D\x00\x00\x96B\x00\x80\x06D\x00@\x08D\x00\x80\xd6C\x00\x00\xc2C\x00\x00\xafC\x00\x00\xfeB\x00\x00\xf0B\x00\x80\x96C\x00\x00\x1dC\x00\x00\xd4B\x00\xc0\x05D\x00\x00\xebC\x00\x00\x7fC\x00\x00\xc0B\x00\x00\x04B\x00\x00\x01C\x00\x80\xfcC\x00\x80\xe8C\x00\x00:C\x00\x80\xcaC\x00\x00 C\x00\x80\x86C\x00\x80\xe1C\x00@\x13D\x00\x00\xadC\x00\x00{C\x00\x00\x84C\x00@\tD\x00\x00\x10D\x00\x00 B\x00\x80\x12D\x00\x80\xc7C\x00\x00\x08D\x00\x80\xf6C\x00\x80\x93C\x00\x00\xb5C\x00\x00\xfcB\x00\x00\xc2B\x00\x80\xfbC\x00\x00\x15D\x00\x80\x88C\x00\x80\xb2C\x00\x00\xdeC\x00\x80\xc0C\x00\x005C\x00\x00\xfeC\x00\x00\xb3C\x00\x80\xbfC\x00\x007C\x00\x00pA\x00\x00@C\x00\x80\xa2C\x00\x00\xbdC\x00\x00\x97C\x00\x00\xfdC\x00\x00\xd1C\x00\x00\xe0A\x00\x00&C\x00\x80\xf3C\x00\x00\xd8C\x00\x00\xc6B\x00\x00\xecB\x00\x80\x10D\x00\x80\xc2C\x00\x00\x8eB\x00\x80\x02D\x00\x00\x95C\x00\x00\x14C\x00\x00@@\x00@\x07D\x00\x80\xa0C\x00\x00\nD\x00\x80\x80C\x00\x00bC\x00\x002C\x00\x00\x00D\x00\x00\xd0C\x00\x00gC\x00\x00(C\x00@\x0cD\x00\x80\x95C\x00\x00\x86B\x00\x00\x00\x00\x00\x00\x9eB\x00\x00\x9cB\x00\x00VC\x00\x00\xceB\x00\x00\xa2C\x00\x00\xedC\x00\x00\xc0@\x00\x00\xb8B\x00\x00\xc0A\x00\x80\xe5C\x00\x00\xdfC\x00\x00\xd9C\x00\x00eC\x00\x80\xd7C\x00\x00\x04D\x00\x00`C\x00\x00\xbcB\x00\x004C\x00\x80\xc8C\x00\x00\xe0B\x00\x00xC\x00\x00\x9fC\x00\xc0\x02D\x00\x80\x85C\x00\x00AC\x00\x00\xaeB\x00\x80\xc9C\x00@\x02D\x00\x80\x08D\x00\xc0\nD\x00\x80\xeeC\x00\x80\xa7C\x00\x80\x0fD\x00\x00GC\x00\x00\x10A\x00\x00\xf4B\x00\x80\xc6C\x00\x00\xfaC\x00\x00\xcdC\x00\x00HC\x00\x00\x13D\x00\x00\x14D\x00\x80\xa9C\x00\x80\xedC\x00\x00\xb0A\x00\x00\x12C\x00\x00XB\x00\x80\xf9C\x00\x000C\x00\x00\'C\x00\x00DB\x00\x00\x11C\x00\x00\xc7C\x00\x80\xbcC\x00\xc0\x11D\x00\x80\x9cC\x00\x00\xa0@\x00\x80\tD\x00\x80\xccC\x00\x80\x14D\x00\x00OC\x00\x80\xddC\x00\x80\x9dC\x00\xc0\x0eD\x00\x00zC\x00\x00\x04C\x00\x00\\C\x00\x00\xa0A\x00\x00\xd8B\x00\x00 A\x00\x00\xcaB\x00\x00hB\x00\x00\xeeC\x00\x00.C\x00\x80\xfeC\x00\x80\xa3C\x00\x00\xb0B\x00\x00\x8eC\x00\x00\x90C\x00\x00\xa8C\x00\xc0\x07D\x00\x00\xb6B\x00\x00\x80@\x00\x80\x0bD\x00\x00\xfcC\x00\x00\rD\x00\x00\xc8A\x00\xc0\x04D\x00\x80\xe4C\x00\x80\xcfC\x00\x00\xf1C\x00\x80\x07D\x00\x00\x1fC\x00\x80\xd8C\x00\x00\x89C\x00\x80\xb4C\x00\xc0\x0bD\x00\x80\xd4C\x00\x00@A\x00\xc0\x13D\x00\x00\xdaB\x00\x00\x91C\x00\x00\x00@\x00\x80\xbaC\x00\x80\xd9C\x00\x00pC\x00\x80\xceC\x00\x00UC\x00\x80\xbdC\x00\x80\xdcC\x00\x00\rC\x00\x80\x98C\x00\x00dB\x00\x004B\x00\x80\xbbC\x00\x00\xdcC\x00\x80\x91C\x00\x80\xf0C\x00\x00\x13C\x00\x80\xf4C\x00\x00\x12D\x00\x00\xd6B\x00\x00\x90B\x00\x00\x19C\x00\x80\xe7C\x00\x00ZC\x00\x80\xf8C\x00\x00\x07D\x00\x80\x8cC\x00\x00PB\x00\x00\x00C\x00\x00\x08C\x00\x80\xdfC\x00\x80\xdeC\x00\x80\x99C\x00\x80\x05D\x00\x00cC\x00\xc0\x08D\x00\x80\xa8C\x00\x80\xeaC\x00\x00FC\x00\x00\x0fD\x00\x80\x11D\x00\x00\xbeB\x00\x00\xf2B\x00\xc0\rD\x00\x80\xd1C\x00\x00\tC\x00\x00\xe4C\x00\x00\xc1C\x00\x00\xc9C\x00\x00\x98B\x00\x00/C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4820
(dp4821
g60
(dp4822
g48
I01
sg56
I01
ssg62
g4813
sg63
(lp4823
g48
ag56
asg65
(lp4824
I600
aI1
asbsg67
S'random'
p4825
sg69
g70
(g51
(I0
tS'b'
tRp4826
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4827
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\xbe\x01\x00\x00\xb1\x00\x00\x00%\x02\x00\x00\xb0\x01\x00\x00\x11\x02\x00\x00\xf7\x01\x00\x00\xc5\x01\x00\x00\xeb\x00\x00\x00\\\x01\x00\x00\xe1\x01\x00\x00\x04\x02\x00\x00\x1a\x00\x00\x00!\x02\x00\x004\x00\x00\x006\x00\x00\x00\x9d\x01\x00\x00\x99\x00\x00\x00\xce\x00\x00\x00\xe9\x00\x00\x00\xcd\x00\x00\x00\x02\x02\x00\x00m\x00\x00\x00\xeb\x01\x00\x00\xe7\x00\x00\x00\xc7\x01\x00\x00\x15\x02\x00\x00!\x01\x00\x00\x96\x00\x00\x00\xa4\x01\x00\x00\n\x00\x00\x00\t\x00\x00\x00\x98\x00\x00\x00\x1e\x01\x00\x00z\x01\x00\x003\x01\x00\x00\x04\x00\x00\x00D\x00\x00\x00/\x01\x00\x00\x90\x00\x00\x00.\x01\x00\x00\x89\x01\x00\x00/\x00\x00\x00\xe1\x00\x00\x00\xda\x00\x00\x00<\x00\x00\x000\x02\x00\x00\xc2\x00\x00\x00Y\x00\x00\x00\xcb\x00\x00\x00\xf1\x01\x00\x00\x06\x00\x00\x00\xee\x00\x00\x00@\x02\x00\x00\xcc\x00\x00\x00\xed\x01\x00\x00\xe3\x00\x00\x00T\x01\x00\x00/\x02\x00\x00\x06\x02\x00\x00M\x00\x00\x00\\\x00\x00\x00<\x01\x00\x00^\x01\x00\x00\xaf\x00\x00\x00\xf9\x00\x00\x00\x8c\x00\x00\x00O\x00\x00\x00\xbd\x01\x00\x00\r\x01\x00\x00\xc4\x00\x00\x00:\x01\x00\x00\xac\x01\x00\x009\x02\x00\x00\x80\x00\x00\x00&\x01\x00\x00k\x01\x00\x00V\x02\x00\x00g\x01\x00\x00\xc0\x01\x00\x00\xbf\x01\x00\x00\xdf\x00\x00\x00`\x00\x00\x00e\x01\x00\x00\xa4\x00\x00\x00W\x00\x00\x00\x97\x00\x00\x00a\x01\x00\x00\xd8\x01\x00\x00\x0b\x02\x00\x00\x17\x01\x00\x00\x9a\x00\x00\x00\x10\x02\x00\x00\xc6\x01\x00\x00\xb4\x00\x00\x00\xcf\x01\x00\x00N\x02\x00\x00y\x01\x00\x00\x91\x01\x00\x00a\x00\x00\x00\xa8\x01\x00\x00\xa9\x00\x00\x00\x05\x02\x00\x00 \x01\x00\x00\xc2\x01\x00\x00n\x00\x00\x00\x95\x00\x00\x00u\x01\x00\x008\x02\x00\x00\x03\x02\x00\x00#\x02\x00\x00\x8d\x00\x00\x00l\x00\x00\x00\xd2\x01\x00\x00k\x00\x00\x001\x01\x00\x00y\x00\x00\x004\x01\x00\x00`\x01\x00\x00\xa9\x01\x00\x00]\x01\x00\x00r\x01\x00\x00O\x02\x00\x00\xe2\x01\x00\x00\x86\x00\x00\x00\x07\x00\x00\x00\x9b\x00\x00\x00\x90\x01\x00\x00q\x01\x00\x00A\x02\x00\x00{\x01\x00\x00\xfd\x00\x00\x00\xf0\x00\x00\x00\x00\x02\x00\x00\x85\x00\x00\x00\xa8\x00\x00\x00\x88\x00\x00\x00B\x02\x00\x00R\x02\x00\x00h\x00\x00\x00\xdb\x00\x00\x00{\x00\x00\x00-\x02\x00\x00\xc5\x00\x00\x00\x18\x01\x00\x00\x8a\x00\x00\x00\xf2\x01\x00\x00\xec\x01\x00\x005\x02\x00\x00\xaf\x01\x00\x00\xb5\x00\x00\x00c\x01\x00\x00\x15\x00\x00\x00%\x01\x00\x00:\x02\x00\x00\r\x00\x00\x000\x01\x00\x00\xd1\x00\x00\x00t\x01\x00\x00M\x01\x00\x00\x1b\x02\x00\x00\x80\x01\x00\x00\xde\x00\x00\x00s\x00\x00\x00I\x00\x00\x00d\x00\x00\x00\xea\x00\x00\x00\xa5\x01\x00\x00\xf0\x01\x00\x00\xba\x01\x00\x00\x0f\x00\x00\x00 \x00\x00\x00P\x01\x00\x00;\x01\x00\x00)\x00\x00\x00\x08\x02\x00\x00W\x02\x00\x00\xef\x01\x00\x00q\x00\x00\x00\xb6\x01\x00\x00\x93\x00\x00\x00\xd0\x01\x00\x00\x98\x01\x00\x00\xc0\x00\x00\x00\x9c\x01\x00\x001\x00\x00\x00U\x00\x00\x00~\x01\x00\x00\xa0\x00\x00\x00\xed\x00\x00\x00E\x01\x00\x00\x10\x01\x00\x00\xaa\x00\x00\x00\x9e\x01\x00\x00\xd7\x01\x00\x00\xa7\x00\x00\x00\xd0\x00\x00\x00\x1f\x00\x00\x00\xd2\x00\x00\x00K\x02\x00\x00\xe0\x01\x00\x00\xe6\x01\x00\x00\xb2\x00\x00\x005\x00\x00\x00\x08\x00\x00\x00\t\x01\x00\x00\xbb\x00\x00\x00\x0b\x01\x00\x00\xfb\x01\x00\x00\x1e\x00\x00\x00w\x00\x00\x00"\x00\x00\x00X\x00\x00\x00\xd7\x00\x00\x00*\x02\x00\x00\xc1\x01\x00\x00\x03\x01\x00\x00P\x00\x00\x00\xa6\x00\x00\x00<\x02\x00\x00(\x01\x00\x00\x01\x02\x00\x00\xc8\x00\x00\x00\xf8\x00\x00\x00%\x00\x00\x00\xce\x01\x00\x00~\x00\x00\x00\xb5\x01\x00\x00G\x02\x00\x00\x8b\x00\x00\x00\xcb\x01\x00\x00\xe2\x00\x00\x00\xb9\x01\x00\x00S\x01\x00\x00\x19\x00\x00\x00i\x00\x00\x00\xc7\x00\x00\x00\xff\x00\x00\x00\x92\x00\x00\x00\x02\x01\x00\x00d\x01\x00\x00(\x02\x00\x00_\x00\x00\x00E\x00\x00\x00\x87\x00\x00\x009\x00\x00\x00\xbe\x00\x00\x00\xec\x00\x00\x00\xf7\x00\x00\x00\xd3\x01\x00\x005\x01\x00\x00\xff\x01\x00\x00\x85\x01\x00\x00A\x01\x00\x00\xd6\x00\x00\x00$\x01\x00\x00x\x01\x00\x00\x00\x00\x00\x00\xb4\x01\x00\x00,\x01\x00\x00\x14\x00\x00\x00\x10\x00\x00\x00-\x00\x00\x00\x0b\x00\x00\x00)\x01\x00\x00\x86\x01\x00\x00\x8f\x00\x00\x00\x1d\x01\x00\x00\xd6\x01\x00\x00\x1c\x01\x00\x00\x81\x01\x00\x00;\x00\x00\x00\x1a\x01\x00\x00F\x00\x00\x00\x94\x01\x00\x00\x1d\x02\x00\x00f\x00\x00\x00\xa2\x00\x00\x00J\x01\x00\x00+\x00\x00\x00\xfe\x00\x00\x00]\x00\x00\x00?\x02\x00\x00Z\x01\x00\x00N\x00\x00\x00\x0c\x02\x00\x002\x00\x00\x00Y\x01\x00\x00r\x00\x00\x00\r\x02\x00\x00L\x00\x00\x00$\x02\x00\x003\x02\x00\x00\x1b\x01\x00\x00\x0e\x01\x00\x00\xc9\x00\x00\x00\x8e\x01\x00\x00\x1c\x00\x00\x00,\x00\x00\x00\xae\x01\x00\x00\xbc\x01\x00\x00H\x01\x00\x00s\x01\x00\x00\xa1\x01\x00\x00u\x00\x00\x00K\x00\x00\x00.\x02\x00\x00#\x01\x00\x00E\x02\x00\x00.\x00\x00\x00\x05\x01\x00\x00\x0e\x00\x00\x00&\x00\x00\x00\xb7\x00\x00\x00\xf6\x01\x00\x00\x01\x00\x00\x00\xfd\x01\x00\x00X\x01\x00\x00K\x01\x00\x00\xd4\x01\x00\x00V\x00\x00\x00\xb6\x00\x00\x00\xb2\x01\x00\x00\xf2\x00\x00\x00z\x00\x00\x00\xc3\x01\x00\x00\x9f\x01\x00\x00\xf4\x00\x00\x00\n\x02\x00\x00\xfc\x00\x00\x00\x9f\x00\x00\x00B\x00\x00\x00\xdc\x00\x00\x00\xe6\x00\x00\x00\xd8\x00\x00\x00\x12\x01\x00\x00\xde\x01\x00\x00\x0e\x02\x00\x00I\x02\x00\x00=\x00\x00\x00\xe9\x01\x00\x00\x13\x00\x00\x00\x9c\x00\x00\x007\x01\x00\x00J\x00\x00\x00\x84\x00\x00\x00\x1b\x00\x00\x00\x84\x01\x00\x00S\x00\x00\x00\x1d\x00\x00\x00\x0c\x00\x00\x00p\x01\x00\x009\x01\x00\x00e\x00\x00\x008\x01\x00\x002\x01\x00\x00L\x01\x00\x00\x11\x01\x00\x00\x95\x01\x00\x00\x9a\x01\x00\x00Q\x00\x00\x00H\x00\x00\x00\x1e\x02\x00\x00\x8f\x01\x00\x00:\x00\x00\x00\x16\x00\x00\x00\x81\x00\x00\x00Q\x01\x00\x00\xb3\x00\x00\x00@\x00\x00\x00\xb8\x00\x00\x00B\x01\x00\x00v\x00\x00\x00O\x01\x00\x00&\x02\x00\x00U\x01\x00\x001\x02\x00\x00\x9e\x00\x00\x00\xf4\x01\x00\x00\xa0\x01\x00\x00+\x02\x00\x00W\x01\x00\x00C\x00\x00\x00\xbd\x00\x00\x00\x9b\x01\x00\x00\x89\x00\x00\x00\x97\x01\x00\x00T\x02\x00\x00\x12\x00\x00\x00o\x01\x00\x00\xab\x01\x00\x00\xf5\x00\x00\x00*\x00\x00\x007\x00\x00\x00\x07\x01\x00\x00\xe8\x00\x00\x00\xf3\x00\x00\x00\x8e\x00\x00\x00\xe3\x01\x00\x00\xf3\x01\x00\x00\x8b\x01\x00\x00\x83\x00\x00\x00\xd1\x01\x00\x00U\x02\x00\x00\xd9\x01\x00\x00\x00\x01\x00\x00\x7f\x01\x00\x00\x02\x00\x00\x00#\x00\x00\x00\xc3\x00\x00\x00\xf9\x01\x00\x00\xe5\x01\x00\x00@\x01\x00\x00?\x01\x00\x00)\x02\x00\x00\x18\x00\x00\x00\x18\x02\x00\x00\xb8\x01\x00\x00\xa3\x00\x00\x00\xa3\x01\x00\x00Q\x02\x00\x00\'\x00\x00\x00A\x00\x00\x00"\x01\x00\x00\xef\x00\x00\x00\xbf\x00\x00\x00 \x02\x00\x00\x06\x01\x00\x00\xb0\x00\x00\x006\x01\x00\x00n\x01\x00\x00\xc6\x00\x00\x00\xcc\x01\x00\x00\xa7\x01\x00\x00\x1c\x02\x00\x00\xca\x01\x00\x00\'\x02\x00\x00\x16\x01\x00\x00>\x00\x00\x00\xca\x00\x00\x00\xd4\x00\x00\x002\x02\x00\x00,\x02\x00\x00V\x01\x00\x00\xfc\x01\x00\x00\x96\x01\x00\x00D\x02\x00\x00\xc9\x01\x00\x00C\x02\x00\x00\x0f\x01\x00\x00c\x00\x00\x00\x08\x01\x00\x00\x82\x01\x00\x00\xc1\x00\x00\x00\x05\x00\x00\x00\n\x01\x00\x00!\x00\x00\x00S\x02\x00\x00\x17\x02\x00\x00R\x00\x00\x00\xc8\x01\x00\x00\xcf\x00\x00\x00>\x01\x00\x00\x11\x00\x00\x00;\x02\x00\x00G\x00\x00\x00}\x01\x00\x00F\x01\x00\x00R\x01\x00\x00\xe5\x00\x00\x00J\x02\x00\x00w\x01\x00\x00}\x00\x00\x00$\x00\x00\x00-\x01\x00\x00\xc4\x01\x00\x00\xea\x01\x00\x00\x07\x02\x00\x00\xdd\x01\x00\x00[\x00\x00\x00\x14\x01\x00\x00T\x00\x00\x004\x02\x00\x00\x19\x02\x00\x00Z\x00\x00\x00t\x00\x00\x00\xad\x00\x00\x00h\x01\x00\x00\xa6\x01\x00\x00(\x00\x00\x006\x02\x00\x00b\x00\x00\x00\xd3\x00\x00\x00\xe4\x00\x00\x00\x8d\x01\x00\x00\x13\x01\x00\x00D\x01\x00\x00\x01\x01\x00\x00=\x02\x00\x008\x00\x00\x00\xee\x01\x00\x00\xe4\x01\x00\x00\xfa\x00\x00\x00\xdd\x00\x00\x00\x92\x01\x00\x00\x13\x02\x00\x00|\x01\x00\x00\xa2\x01\x00\x00\x0c\x01\x00\x00\x99\x01\x00\x00\t\x02\x00\x00\x7f\x00\x00\x00[\x01\x00\x00\xb7\x01\x00\x00\x17\x00\x00\x00\x91\x00\x00\x00\'\x01\x00\x00I\x01\x00\x00\x9d\x00\x00\x00j\x00\x00\x00\xbc\x00\x00\x00\xf1\x00\x00\x00\xda\x01\x00\x00\xad\x01\x00\x00\xd5\x01\x00\x003\x00\x00\x00\x15\x01\x00\x00j\x01\x00\x00^\x00\x00\x00\xcd\x01\x00\x00p\x00\x00\x00\xac\x00\x00\x00\x16\x02\x00\x00C\x01\x00\x00\xd5\x00\x00\x00F\x02\x00\x00v\x01\x00\x00\xa1\x00\x00\x00\xba\x00\x00\x00l\x01\x00\x00\xae\x00\x00\x00>\x02\x00\x00\xb1\x01\x00\x00\x1a\x02\x00\x00\x0f\x02\x00\x00\x8c\x01\x00\x00m\x01\x00\x00\xdb\x01\x00\x00H\x02\x00\x00\x03\x00\x00\x00\x87\x01\x00\x00\xf8\x01\x00\x00\x04\x01\x00\x00\xb3\x01\x00\x00o\x00\x00\x00\xe0\x00\x00\x00\xdc\x01\x00\x00\x19\x01\x00\x00|\x00\x00\x00\x12\x02\x00\x00\x1f\x02\x00\x00+\x01\x00\x00\xbb\x01\x00\x00G\x01\x00\x00\x82\x00\x00\x00\x14\x02\x00\x00\x94\x00\x00\x00\xf6\x00\x00\x00P\x02\x00\x00\xfb\x00\x00\x00g\x00\x00\x00\xd9\x00\x00\x00\xfe\x01\x00\x00L\x02\x00\x00\xa5\x00\x00\x00\xdf\x01\x00\x00?\x00\x00\x00\x88\x01\x00\x00\x1f\x01\x00\x00\xaa\x01\x00\x00_\x01\x00\x00N\x01\x00\x000\x00\x00\x00M\x02\x00\x00\xf5\x01\x00\x007\x02\x00\x00\xb9\x00\x00\x00\x8a\x01\x00\x00i\x01\x00\x00\xe7\x01\x00\x00\x83\x01\x00\x00*\x01\x00\x00"\x02\x00\x00\xe8\x01\x00\x00=\x01\x00\x00\xfa\x01\x00\x00\xab\x00\x00\x00\x93\x01\x00\x00x\x00\x00\x00f\x01\x00\x00b\x01\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4828
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4829
(g4827
S'b\x01\x00\x00'
tRp4830
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4831
I01
sb.