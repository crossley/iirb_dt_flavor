ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject664
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 664
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vf
sS'age'
p31
V20
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I4
sS'_exp'
p41
I74656080
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I54
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I11
I55
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I11
I55
tg55
I00
S'\x00\x00\xd0A\x00\x00\xe8A\x00\x00\x14B\x00\x000B\x00\x00\x9cB\x00\x00\xb4B\x00\x00\xd8B\x00\x00\xf0B\x00\x00\x0bC\x00\x00#C\x00\x00+C\x00\x00-C\x00\x007C\x00\x00?C\x00\x00PC\x00\x00UC\x00\x00VC\x00\x00\\C\x00\x00hC\x00\x00{C\x00\x00\x87C\x00\x00\x8bC\x00\x80\x8bC\x00\x80\xa7C\x00\x00\xa9C\x00\x80\xacC\x00\x00\xadC\x00\x00\xaeC\x00\x00\xb0C\x00\x80\xb0C\x00\x80\xbcC\x00\x80\xbeC\x00\x00\xc4C\x00\x00\xd6C\x00\x80\xe2C\x00\x80\xe4C\x00\x80\xe5C\x00\x80\xefC\x00\x80\xf1C\x00\x80\xf2C\x00\x00\xf4C\x00\x80\xfbC\x00\x80\xfcC\x00\x80\xfdC\x00\x80\xffC\x00\x80\x00D\x00\xc0\x00D\x00@\x06D\x00\x00\nD\x00\x80\x0bD\x00\xc0\x11D\x00@\x12D\x00@\x14D\x00\x80\x14D\x00\x00\x00\x00\x00\x00\x80A\x00\x00\x98A\x00\x00\xa8A\x00\x00\x10B\x00\x00\x90B\x00\x00\xaaB\x00\x00\xb8B\x00\x00\xc0B\x00\x00\xdeB\x00\x00\xeaB\x00\x00\xecB\x00\x00\x03C\x00\x00\x05C\x00\x00\x07C\x00\x003C\x00\x00BC\x00\x00\x84C\x00\x80\x9aC\x00\x00\x9bC\x00\x00\x9cC\x00\x80\x9cC\x00\x00\x9fC\x00\x80\x9fC\x00\x80\xa3C\x00\x80\xa6C\x00\x00\xa7C\x00\x80\xb6C\x00\x80\xb7C\x00\x00\xb9C\x00\x00\xbeC\x00\x80\xc0C\x00\x80\xc7C\x00\x80\xc9C\x00\x00\xccC\x00\x00\xd7C\x00\x00\xdaC\x00\x00\xe3C\x00\x00\xe6C\x00\x00\xe7C\x00\x80\xeaC\x00\x00\xebC\x00\x80\xecC\x00\x80\xf0C\x00\x00\xf3C\x00\x80\xfaC\x00\x00\xfcC\x00\x00\x03D\x00\x80\x07D\x00\x00\x0bD\x00\xc0\x0bD\x00\xc0\rD\x00\x80\x0eD\x00\x80\x10D\x00\x00\x11D\x00\x00\x00\x00\x00\x000A\x00\x00@A\x00\x00\x00B\x00\x00 B\x00\x00HB\x00\x00XB\x00\x00\x82B\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa4B\x00\x00\xbaB\x00\x00\xc2B\x00\x00\xd0B\x00\x00\nC\x00\x00\x0cC\x00\x00\x1bC\x00\x00\x1dC\x00\x001C\x00\x002C\x00\x00:C\x00\x00SC\x00\x00dC\x00\x00mC\x00\x80\x86C\x00\x00\x96C\x00\x80\x96C\x00\x80\x9dC\x00\x80\x9eC\x00\x00\xa1C\x00\x00\xa5C\x00\x80\xa8C\x00\x80\xabC\x00\x80\xadC\x00\x80\xb1C\x00\x00\xb4C\x00\x80\xb4C\x00\x80\xb9C\x00\x00\xbaC\x00\x80\xc1C\x00\x00\xcdC\x00\x00\xcfC\x00\x80\xd1C\x00\x80\xd2C\x00\x00\xdbC\x00\x00\xddC\x00\x00\xe4C\x00\x00\xf6C\x00\x00\xfaC\x00\xc0\nD\x00@\x0eD\x00\x00\x0fD\x00@\x0fD\x00\xc0\x10D\x00@\x13D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@@\x00\x00PA\x00\x00\xb0A\x00\x00\xd8A\x00\x00\xf0A\x00\x00\x04B\x00\x00pB\x00\x00\x84B\x00\x00\x86B\x00\x00\xacB\x00\x00\xb0B\x00\x00\xc4B\x00\x00\xccB\x00\x00\xd6B\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xf6B\x00\x00\xfaB\x00\x00\x08C\x00\x00\x0eC\x00\x00\x12C\x00\x00DC\x00\x00MC\x00\x00RC\x00\x00ZC\x00\x00tC\x00\x00}C\x00\x80\x83C\x00\x00\x86C\x00\x00\x89C\x00\x00\x8aC\x00\x80\x8dC\x00\x00\x8eC\x00\x00\x90C\x00\x00\xa2C\x00\x80\xbbC\x00\x00\xd3C\x00\x80\xd3C\x00\x80\xd4C\x00\x80\xddC\x00\x80\xdeC\x00\x80\xdfC\x00\x80\xe3C\x00\x80\xe8C\x00\x80\xe9C\x00\x00\xecC\x00\x80\x02D\x00@\x03D\x00\xc0\x07D\x00\x00\tD\x00@\nD\x00\x00\x0eD\x00\x00\x12D\x00\x80\x15D\x00\x00\x00@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xe0@\x00\x00\x0cB\x00\x00lB\x00\x00\x88B\x00\x00\x8eB\x00\x00\x98B\x00\x00\xb6B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xfeB\x00\x00\x0fC\x00\x00\x10C\x00\x00\x19C\x00\x00\x1aC\x00\x00\'C\x00\x00(C\x00\x000C\x00\x00JC\x00\x00OC\x00\x00]C\x00\x00_C\x00\x00bC\x00\x00gC\x00\x00\x80C\x00\x80\x80C\x00\x80\x82C\x00\x80\x85C\x00\x00\x8cC\x00\x00\x8dC\x00\x80\x94C\x00\x80\x99C\x00\x00\x9eC\x00\x80\xa9C\x00\x00\xb5C\x00\x80\xb5C\x00\x00\xbdC\x00\x00\xc9C\x00\x00\xd4C\x00\x00\xdcC\x00\x00\xe2C\x00\x80\xe7C\x00\x00\xeeC\x00\x00\xfeC\x00\x00\x00D\x00\x80\x01D\x00\xc0\x03D\x00\xc0\x04D\x00\xc0\x05D\x00\xc0\x0cD\x00\x80\rD\x00\x00\x14D\x00\xc0\x15D\x00\x00\x80?\x00\x00\x90A\x00\x00\xa0A\x00\x00\xb8A\x00\x00\xe0A\x00\x00\x08B\x00\x00\x1cB\x00\x00\x8cB\x00\x00\xbeB\x00\x00\x00C\x00\x00\rC\x00\x00\x17C\x00\x00\x1fC\x00\x00 C\x00\x00"C\x00\x009C\x00\x00AC\x00\x00aC\x00\x00\x85C\x00\x80\x8cC\x00\x80\x8fC\x00\x80\x92C\x00\x00\x99C\x00\x00\x9dC\x00\x80\xa1C\x00\x00\xa3C\x00\x80\xa4C\x00\x00\xa8C\x00\x00\xafC\x00\x80\xbfC\x00\x00\xc1C\x00\x80\xc6C\x00\x00\xc8C\x00\x00\xcaC\x00\x80\xd0C\x00\x80\xd5C\x00\x80\xd9C\x00\x80\xdaC\x00\x80\xdcC\x00\x80\xe1C\x00\x00\xedC\x00\x00\xefC\x00\x00\xf5C\x00\x00\xffC\x00\x00\x02D\x00@\x02D\x00\xc0\x02D\x00\x00\x04D\x00\x00\x05D\x00\x00\x06D\x00\xc0\tD\x00\x00\x10D\x00@\x10D\x00\xc0\x14D\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\x10A\x00\x008B\x00\x00DB\x00\x00PB\x00\x00|B\x00\x00\x8aB\x00\x00\xa2B\x00\x00\xcaB\x00\x00\xdaB\x00\x00\x02C\x00\x00\x11C\x00\x00\x14C\x00\x00\x15C\x00\x00\x18C\x00\x00\x1cC\x00\x00\x1eC\x00\x005C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00KC\x00\x00NC\x00\x00XC\x00\x00qC\x00\x00uC\x00\x00\x82C\x00\x80\x88C\x00\x80\x89C\x00\x80\x8aC\x00\x00\x8fC\x00\x00\x91C\x00\x00\x95C\x00\x80\x95C\x00\x00\x97C\x00\x80\x9bC\x00\x80\xaaC\x00\x00\xacC\x00\x00\xb1C\x00\x00\xb7C\x00\x00\xc2C\x00\x00\xc7C\x00\x80\xcaC\x00\x00\xceC\x00\x00\xd0C\x00\x80\xd6C\x00\x80\xe6C\x00\x00\xe9C\x00\x00\xf1C\x00\x00\xf2C\x00\x80\xf5C\x00\x80\xf8C\x00\x00\x07D\x00\x80\x11D\x00\x80\x13D\x00\x00`A\x00\x00$B\x00\x00@B\x00\x00hB\x00\x00tB\x00\x00\x92B\x00\x00\xaeB\x00\x00\xd4B\x00\x00\xe6B\x00\x00\xfcB\x00\x00!C\x00\x00*C\x00\x00,C\x00\x004C\x00\x006C\x00\x008C\x00\x00IC\x00\x00TC\x00\x00`C\x00\x00vC\x00\x80\x87C\x00\x80\x91C\x00\x00\x93C\x00\x80\x93C\x00\x00\x98C\x00\x00\xa0C\x00\x00\xa6C\x00\x80\xaeC\x00\x80\xafC\x00\x00\xb2C\x00\x80\xb2C\x00\x00\xb3C\x00\x80\xb8C\x00\x80\xbdC\x00\x00\xc0C\x00\x00\xc3C\x00\x80\xcbC\x00\x00\xd1C\x00\x00\xd2C\x00\x00\xd9C\x00\x00\xe5C\x00\x00\xeaC\x00\x00\xf0C\x00\x00\xf7C\x00\x80\xf9C\x00\x00\xfdC\x00@\x05D\x00\xc0\x06D\x00@\x07D\x00@\tD\x00\x00\rD\x00@\rD\x00\xc0\x0fD\x00\xc0\x12D\x00\x00\x13D\x00\x00 A\x00\x00\xf8A\x00\x00,B\x00\x00<B\x00\x00\\B\x00\x00dB\x00\x00\x9aB\x00\x00\xb2B\x00\x00\xbcB\x00\x00\xd2B\x00\x00\xe8B\x00\x00\xeeB\x00\x00\x01C\x00\x00$C\x00\x00%C\x00\x00@C\x00\x00EC\x00\x00FC\x00\x00HC\x00\x00LC\x00\x00WC\x00\x00fC\x00\x00\x88C\x00\x00\x92C\x00\x00\x9aC\x00\x00\xa4C\x00\x80\xa5C\x00\x00\xaaC\x00\x80\xb3C\x00\x00\xb6C\x00\x00\xbbC\x00\x80\xc3C\x00\x80\xc4C\x00\x80\xccC\x00\x80\xcdC\x00\x80\xceC\x00\x00\xd8C\x00\x80\xd8C\x00\x80\xdbC\x00\x00\xdeC\x00\x00\xdfC\x00\x00\xe1C\x00\x80\xf3C\x00\x80\xf4C\x00\x80\xf6C\x00\x00\xf8C\x00@\x00D\x00@\x04D\x00\x80\x05D\x00\xc0\x08D\x00\x80\nD\x00@\x0bD\x00\xc0\x0eD\x00\x80\x12D\x00\x00\x15D\x00\x00pA\x00\x00\x88A\x00\x00\xc0A\x00\x00\x94B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xceB\x00\x00\xdcB\x00\x00\xf8B\x00\x00\x06C\x00\x00/C\x00\x00>C\x00\x00CC\x00\x00GC\x00\x00YC\x00\x00[C\x00\x00eC\x00\x00iC\x00\x00nC\x00\x00pC\x00\x00rC\x00\x00wC\x00\x00zC\x00\x00|C\x00\x00\x7fC\x00\x00\x81C\x00\x80\x81C\x00\x00\x83C\x00\x80\x90C\x00\x00\xb8C\x00\x00\xbcC\x00\x00\xbfC\x00\x80\xc2C\x00\x00\xc5C\x00\x80\xc5C\x00\x00\xc6C\x00\x80\xc8C\x00\x00\xcbC\x00\x80\xd7C\x00\x80\xe0C\x00\x00\xe8C\x00\x80\xebC\x00\x80\xedC\x00\x80\xeeC\x00\x80\xf7C\x00\x00\xf9C\x00\x00\x01D\x00@\x01D\x00\x80\x03D\x00\x80\x04D\x00\x80\x06D\x00\x00\x08D\x00\x80\tD\x00\x80\x0fD\x00\xc0\x13D\x00\x00\x00A\x00\x00\xc8A\x00\x00\x18B\x00\x00(B\x00\x004B\x00\x00LB\x00\x00TB\x00\x00`B\x00\x00xB\x00\x00\x80B\x00\x00\x96B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xe4B\x00\x00\x04C\x00\x00\tC\x00\x00\x13C\x00\x00\x16C\x00\x00&C\x00\x00)C\x00\x00.C\x00\x00QC\x00\x00^C\x00\x00cC\x00\x00jC\x00\x00kC\x00\x00lC\x00\x00oC\x00\x00sC\x00\x00xC\x00\x00yC\x00\x00~C\x00\x80\x84C\x00\x80\x8eC\x00\x00\x94C\x00\x80\x97C\x00\x80\x98C\x00\x80\xa0C\x00\x80\xa2C\x00\x00\xabC\x00\x80\xbaC\x00\x80\xcfC\x00\x00\xd5C\x00\x00\xe0C\x00\x00\xfbC\x00\x80\xfeC\x00\xc0\x01D\x00@\x08D\x00\x80\x08D\x00\x00\x0cD\x00@\x0cD\x00\x80\x0cD\x00@\x11D\x00@\x15D\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I11
aI55
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I11
I55
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I3
aI2
aI3
aI3
aI0
aI8
aI3
aI8
aI3
aI10
aI9
aI4
aI10
aI4
aI4
aI8
aI4
aI6
aI8
aI10
aI0
aI4
aI9
aI3
aI1
aI6
aI6
aI4
aI8
aI1
aI2
aI6
aI0
aI4
aI8
aI1
aI9
aI7
aI7
aI6
aI4
aI5
aI1
aI1
aI6
aI9
aI7
aI9
aI5
aI7
aI9
aI10
aI2
aI0
aI0
aI5
aI2
aI5
aI5
aI10
aI10
aI3
aI0
aI8
aI10
aI1
aI4
aI1
aI4
aI2
aI10
aI2
aI6
aI9
aI3
aI4
aI0
aI10
aI10
aI10
aI3
aI5
aI6
aI1
aI7
aI8
aI10
aI0
aI8
aI3
aI5
aI5
aI1
aI2
aI1
aI5
aI4
aI4
aI5
aI0
aI8
aI0
aI4
aI8
aI6
aI5
aI10
aI2
aI3
aI5
aI4
aI3
aI9
aI4
aI6
aI8
aI4
aI2
aI0
aI6
aI3
aI3
aI9
aI6
aI6
aI4
aI2
aI6
aI8
aI2
aI10
aI9
aI3
aI9
aI5
aI6
aI3
aI6
aI1
aI10
aI7
aI2
aI6
aI1
aI9
aI2
aI6
aI8
aI7
aI9
aI2
aI0
aI9
aI9
aI1
aI6
aI4
aI10
aI9
aI7
aI0
aI4
aI9
aI0
aI8
aI3
aI7
aI10
aI1
aI8
aI7
aI6
aI2
aI4
aI3
aI3
aI9
aI1
aI3
aI2
aI4
aI1
aI9
aI7
aI7
aI4
aI10
aI6
aI4
aI4
aI0
aI9
aI2
aI6
aI2
aI1
aI6
aI2
aI6
aI0
aI6
aI1
aI2
aI2
aI8
aI3
aI1
aI3
aI4
aI8
aI9
aI10
aI5
aI4
aI1
aI3
aI7
aI7
aI8
aI10
aI4
aI9
aI0
aI0
aI7
aI4
aI5
aI6
aI1
aI9
aI10
aI3
aI3
aI10
aI6
aI10
aI7
aI0
aI4
aI0
aI7
aI10
aI7
aI4
aI3
aI0
aI6
aI2
aI1
aI5
aI1
aI0
aI7
aI1
aI4
aI9
aI5
aI8
aI3
aI8
aI8
aI3
aI6
aI9
aI0
aI7
aI5
aI5
aI5
aI3
aI8
aI7
aI5
aI7
aI3
aI4
aI1
aI3
aI10
aI6
aI3
aI4
aI2
aI2
aI2
aI7
aI7
aI10
aI6
aI5
aI7
aI6
aI8
aI6
aI0
aI5
aI10
aI9
aI9
aI2
aI4
aI7
aI6
aI1
aI3
aI0
aI0
aI7
aI9
aI7
aI7
aI9
aI6
aI3
aI7
aI3
aI2
aI3
aI5
aI8
aI2
aI0
aI3
aI7
aI9
aI2
aI4
aI5
aI7
aI4
aI6
aI9
aI5
aI5
aI2
aI7
aI1
aI9
aI8
aI8
aI8
aI4
aI2
aI6
aI5
aI0
aI7
aI5
aI8
aI8
aI4
aI2
aI10
aI9
aI0
aI5
aI8
aI10
aI5
aI10
aI5
aI2
aI7
aI7
aI1
aI8
aI4
aI8
aI4
aI5
aI8
aI0
aI7
aI0
aI5
aI1
aI4
aI5
aI8
aI10
aI1
aI1
aI1
aI2
aI2
aI4
aI5
aI0
aI2
aI10
aI10
aI7
aI9
aI5
aI7
aI1
aI5
aI0
aI10
aI7
aI7
aI0
aI1
aI3
aI6
aI10
aI9
aI10
aI6
aI7
aI4
aI5
aI7
aI2
aI5
aI2
aI0
aI8
aI1
aI0
aI0
aI1
aI2
aI3
aI1
aI3
aI7
aI1
aI7
aI6
aI10
aI8
aI1
aI4
aI10
aI8
aI3
aI2
aI6
aI5
aI10
aI1
aI3
aI7
aI6
aI6
aI9
aI1
aI1
aI3
aI1
aI8
aI2
aI5
aI5
aI0
aI7
aI9
aI6
aI9
aI2
aI10
aI9
aI4
aI8
aI3
aI7
aI10
aI4
aI1
aI0
aI7
aI2
aI2
aI9
aI8
aI5
aI10
aI10
aI5
aI10
aI0
aI1
aI1
aI2
aI0
aI0
aI3
aI5
aI8
aI0
aI2
aI1
aI9
aI0
aI6
aI5
aI8
aI10
aI10
aI10
aI10
aI3
aI2
aI0
aI8
aI6
aI5
aI6
aI0
aI10
aI5
aI3
aI4
aI3
aI9
aI9
aI0
aI9
aI6
aI3
aI7
aI5
aI2
aI8
aI4
aI5
aI2
aI2
aI5
aI9
aI6
aI6
aI5
aI2
aI9
aI1
aI9
aI6
aI8
aI1
aI0
aI9
aI0
aI3
aI1
aI1
aI10
aI4
aI10
aI8
aI1
aI2
aI8
aI2
aI2
aI4
aI7
aI3
aI6
aI0
aI1
aI3
aI4
aI8
aI9
aI2
aI8
aI0
aI9
aI8
aI6
aI9
aI3
aI3
aI10
aI10
aI4
aI1
aI5
aI8
aI7
aI4
aI10
aI7
aI9
aI9
aI5
aI0
aI8
aI8
aI6
aI3
aI0
aI7
aI0
aI9
aI4
aI9
aI7
aI10
aI8
aI6
aI0
aI1
atbsS'finished'
p74
I00
sS'nReps'
p75
I55
sS'nRemaining'
p76
I5
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p79
NsS'thisIndex'
p80
I4
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I5
sS'nTotal'
p83
I605
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I3
sS'.thisRepN'
p96
I0
sg30
Vf
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I3
sg15
(lp100
S'k'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'k'
asg95
I5
sS'.thisRepN'
p103
I0
sg30
Vf
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I5
sg15
(lp107
S'd'
asg17
S'N'
sg14
I1
sa(dp108
g16
(lp109
S'd'
asg18
S'Y'
sS'.thisRepN'
p110
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I4
sg15
(lp114
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp115
g16
(lp116
S'd'
asg18
S'Y'
sS'.thisRepN'
p117
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I3
sg15
(lp121
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp122
S'space'
p123
asg95
I3
sa(dp124
g16
(lp125
S'd'
asg18
S'Y'
sS'.thisRepN'
p126
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p127
I4
sS'.thisN'
p128
I4
sS'.thisIndex'
p129
I4
sg15
(lp130
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp131
g16
(lp132
S'd'
asg18
S'N'
sS'.thisRepN'
p133
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p134
I5
sS'.thisN'
p135
I5
sS'.thisIndex'
p136
I4
sg15
(lp137
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp138
g16
(lp139
S'k'
asg18
S'N'
sS'.thisRepN'
p140
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p141
I6
sS'.thisN'
p142
I6
sS'.thisIndex'
p143
I6
sg15
(lp144
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp145
g16
(lp146
S'd'
asg18
S'N'
sS'.thisRepN'
p147
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p148
I7
sS'.thisN'
p149
I7
sS'.thisIndex'
p150
I4
sg15
(lp151
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp152
S'space'
p153
asg95
I4
sa(dp154
g16
(lp155
S'k'
asg18
S'Y'
sS'.thisRepN'
p156
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p157
I8
sS'.thisN'
p158
I8
sS'.thisIndex'
p159
I10
sg15
(lp160
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp161
S'space'
p162
asg95
I10
sa(dp163
g16
(lp164
S'k'
asg18
S'Y'
sS'.thisRepN'
p165
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p166
I9
sS'.thisN'
p167
I9
sS'.thisIndex'
p168
I6
sg15
(lp169
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp170
S'space'
p171
asg95
I6
sa(dp172
g16
(lp173
S'd'
asg18
S'Y'
sS'.thisRepN'
p174
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p175
I10
sS'.thisN'
p176
I10
sS'.thisIndex'
p177
I8
sg15
(lp178
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp179
S'space'
p180
asg95
I8
sa(dp181
g16
(lp182
S'k'
asg18
S'N'
sS'.thisRepN'
p183
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p184
I0
sS'.thisN'
p185
I11
sS'.thisIndex'
p186
I2
sg15
(lp187
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp188
g16
(lp189
S'k'
asg18
S'N'
sS'.thisRepN'
p190
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p191
I1
sS'.thisN'
p192
I12
sS'.thisIndex'
p193
I2
sg15
(lp194
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp195
g16
(lp196
S'd'
asg18
S'N'
sS'.thisRepN'
p197
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p198
I2
sS'.thisN'
p199
I13
sS'.thisIndex'
p200
I3
sg15
(lp201
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp202
g16
(lp203
S'd'
asg18
S'Y'
sS'.thisRepN'
p204
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p205
I3
sS'.thisN'
p206
I14
sS'.thisIndex'
p207
I7
sg15
(lp208
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp209
g16
(lp210
S'k'
asg18
S'Y'
sS'.thisRepN'
p211
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p212
I4
sS'.thisN'
p213
I15
sS'.thisIndex'
p214
I9
sg15
(lp215
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp216
S'space'
p217
asg95
I9
sa(dp218
g16
(lp219
S'd'
asg18
S'N'
sS'.thisRepN'
p220
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p221
I5
sS'.thisN'
p222
I16
sS'.thisIndex'
p223
I1
sg15
(lp224
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp225
g16
(lp226
S'k'
asg18
S'Y'
sS'.thisRepN'
p227
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p228
I6
sS'.thisN'
p229
I17
sS'.thisIndex'
p230
I9
sg15
(lp231
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp232
S'space'
p233
asg95
I9
sa(dp234
g16
(lp235
S'k'
asg18
S'N'
sS'.thisRepN'
p236
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p237
I7
sS'.thisN'
p238
I18
sS'.thisIndex'
p239
I5
sg15
(lp240
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp241
g16
(lp242
S'd'
asg18
S'N'
sS'.thisRepN'
p243
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p244
I8
sS'.thisN'
p245
I19
sS'.thisIndex'
p246
I1
sg15
(lp247
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp248
S'space'
p249
asg95
I1
sa(dp250
g16
(lp251
S'k'
asg18
S'N'
sS'.thisRepN'
p252
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p253
I9
sS'.thisN'
p254
I20
sS'.thisIndex'
p255
I5
sg15
(lp256
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp257
g16
(lp258
S'd'
asg18
S'Y'
sS'.thisRepN'
p259
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p260
I10
sS'.thisN'
p261
I21
sS'.thisIndex'
p262
I1
sg15
(lp263
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp264
S'space'
p265
asg95
I1
sa(dp266
g16
(lp267
S'd'
asg18
S'Y'
sS'.thisRepN'
p268
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p269
I0
sS'.thisN'
p270
I22
sS'.thisIndex'
p271
I3
sg15
(lp272
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp273
g16
(lp274
S'k'
asg18
S'N'
sS'.thisRepN'
p275
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p276
I1
sS'.thisN'
p277
I23
sS'.thisIndex'
p278
I5
sg15
(lp279
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp280
S'space'
p281
asg95
I5
sa(dp282
g16
(lp283
S'k'
asg18
S'Y'
sS'.thisRepN'
p284
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p285
I2
sS'.thisN'
p286
I24
sS'.thisIndex'
p287
I9
sg15
(lp288
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp289
g16
(lp290
S'd'
asg18
S'N'
sS'.thisRepN'
p291
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p292
I3
sS'.thisN'
p293
I25
sS'.thisIndex'
p294
I10
sg15
(lp295
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp296
g16
(lp297
S'd'
asg18
S'N'
sS'.thisRepN'
p298
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p299
I4
sS'.thisN'
p300
I26
sS'.thisIndex'
p301
I0
sg15
(lp302
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp303
g16
(lp304
S'd'
asg18
S'Y'
sS'.thisRepN'
p305
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p306
I5
sS'.thisN'
p307
I27
sS'.thisIndex'
p308
I3
sg15
(lp309
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp310
g16
(lp311
S'd'
asg18
S'N'
sS'.thisRepN'
p312
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p313
I6
sS'.thisN'
p314
I28
sS'.thisIndex'
p315
I5
sg15
(lp316
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp317
g16
(lp318
S'k'
asg18
S'Y'
sS'.thisRepN'
p319
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p320
I7
sS'.thisN'
p321
I29
sS'.thisIndex'
p322
I0
sg15
(lp323
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp324
g16
(lp325
S'd'
asg18
S'Y'
sS'.thisRepN'
p326
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p327
I8
sS'.thisN'
p328
I30
sS'.thisIndex'
p329
I3
sg15
(lp330
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp331
S'space'
p332
asg95
I3
sa(dp333
g16
(lp334
S'd'
asg18
S'Y'
sS'.thisRepN'
p335
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p336
I9
sS'.thisN'
p337
I31
sS'.thisIndex'
p338
I8
sg15
(lp339
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp340
S'space'
p341
asg95
I8
sa(dp342
g16
(lp343
S'k'
asg18
S'N'
sS'.thisRepN'
p344
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p345
I10
sS'.thisN'
p346
I32
sS'.thisIndex'
p347
I2
sg15
(lp348
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp349
g16
(lp350
S'd'
asg18
S'Y'
sS'.thisRepN'
p351
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p352
I0
sS'.thisN'
p353
I33
sS'.thisIndex'
p354
I3
sg15
(lp355
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp356
g16
(lp357
S'k'
asg18
S'N'
sS'.thisRepN'
p358
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p359
I1
sS'.thisN'
p360
I34
sS'.thisIndex'
p361
I5
sg15
(lp362
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp363
S'space'
p364
asg95
I5
sa(dp365
g16
(lp366
S'd'
asg18
S'Y'
sS'.thisRepN'
p367
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p368
I2
sS'.thisN'
p369
I35
sS'.thisIndex'
p370
I4
sg15
(lp371
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp372
S'k'
asg95
I4
sa(dp373
g16
(lp374
S'd'
asg18
S'Y'
sS'.thisRepN'
p375
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p376
I3
sS'.thisN'
p377
I36
sS'.thisIndex'
p378
I1
sg15
(lp379
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp380
S'space'
p381
asg95
I1
sa(dp382
g16
(lp383
S'k'
asg18
S'Y'
sS'.thisRepN'
p384
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p385
I4
sS'.thisN'
p386
I37
sS'.thisIndex'
p387
I0
sg15
(lp388
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp389
g16
(lp390
S'k'
asg18
S'N'
sS'.thisRepN'
p391
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p392
I5
sS'.thisN'
p393
I38
sS'.thisIndex'
p394
I10
sg15
(lp395
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp396
g16
(lp397
S'd'
asg18
S'N'
sS'.thisRepN'
p398
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p399
I6
sS'.thisN'
p400
I39
sS'.thisIndex'
p401
I5
sg15
(lp402
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp403
g16
(lp404
S'k'
asg18
S'Y'
sS'.thisRepN'
p405
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p406
I7
sS'.thisN'
p407
I40
sS'.thisIndex'
p408
I2
sg15
(lp409
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp410
S'k'
asg95
I2
sa(dp411
g16
(lp412
S'd'
asg18
S'Y'
sS'.thisRepN'
p413
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p414
I8
sS'.thisN'
p415
I41
sS'.thisIndex'
p416
I7
sg15
(lp417
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp418
S'd'
asg95
I7
sa(dp419
g16
(lp420
S'k'
asg18
S'Y'
sS'.thisRepN'
p421
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p422
I9
sS'.thisN'
p423
I42
sS'.thisIndex'
p424
I10
sg15
(lp425
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp426
S'space'
p427
asg95
I10
sa(dp428
g16
(lp429
S'd'
asg18
S'Y'
sS'.thisRepN'
p430
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p431
I10
sS'.thisN'
p432
I43
sS'.thisIndex'
p433
I8
sg15
(lp434
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I8
sa(dp435
g16
(lp436
S'k'
asg18
S'Y'
sS'.thisRepN'
p437
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p438
I0
sS'.thisN'
p439
I44
sS'.thisIndex'
p440
I0
sg15
(lp441
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp442
S'space'
p443
asg95
I0
sa(dp444
g16
(lp445
S'd'
asg18
S'N'
sS'.thisRepN'
p446
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p447
I1
sS'.thisN'
p448
I45
sS'.thisIndex'
p449
I10
sg15
(lp450
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp451
S'space'
p452
asg95
I10
sa(dp453
g16
(lp454
S'd'
asg18
S'N'
sS'.thisRepN'
p455
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p456
I2
sS'.thisN'
p457
I46
sS'.thisIndex'
p458
I6
sg15
(lp459
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp460
g16
(lp461
S'd'
asg18
S'N'
sS'.thisRepN'
p462
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p463
I3
sS'.thisN'
p464
I47
sS'.thisIndex'
p465
I8
sg15
(lp466
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp467
g16
(lp468
S'd'
asg18
S'N'
sS'.thisRepN'
p469
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p470
I4
sS'.thisN'
p471
I48
sS'.thisIndex'
p472
I7
sg15
(lp473
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp474
g16
(lp475
S'd'
asg18
S'N'
sg22
I29
sS'.thisN'
p476
I49
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p477
I5
sS'.thisRepN'
p478
I4
sg21
I21
sS'.thisIndex'
p479
I6
sg23
I25
sg15
(lp480
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp481
S'space'
p482
asg95
I6
sa(dp483
g16
(lp484
S'k'
asg95
I2
sS'.thisRepN'
p485
I4
sg30
Vf
sg31
g32
sS'.thisTrialN'
p486
I6
sS'.thisN'
p487
I50
sS'.thisIndex'
p488
I2
sg15
(lp489
S'k'
asg17
S'Y'
sg14
I2
sa(dp490
g16
(lp491
S'd'
asg95
I10
sS'.thisRepN'
p492
I4
sg30
Vf
sg31
g32
sS'.thisTrialN'
p493
I7
sS'.thisN'
p494
I51
sS'.thisIndex'
p495
I10
sg15
(lp496
S'k'
asg17
S'N'
sg14
I2
sa(dp497
g16
(lp498
S'd'
asg18
S'Y'
sS'.thisRepN'
p499
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p500
I8
sS'.thisN'
p501
I52
sS'.thisIndex'
p502
I6
sg15
(lp503
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp504
S'space'
p505
asg95
I6
sa(dp506
g16
(lp507
S'd'
asg18
S'N'
sS'.thisRepN'
p508
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p509
I9
sS'.thisN'
p510
I53
sS'.thisIndex'
p511
I10
sg15
(lp512
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp513
g16
(lp514
S'k'
asg18
S'N'
sS'.thisRepN'
p515
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p516
I10
sS'.thisN'
p517
I54
sS'.thisIndex'
p518
I2
sg15
(lp519
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp520
S'space'
p521
asg95
I2
sa(dp522
g16
(lp523
S'd'
asg18
S'N'
sS'.thisRepN'
p524
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p525
I0
sS'.thisN'
p526
I55
sS'.thisIndex'
p527
I8
sg15
(lp528
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp529
g16
(lp530
S'k'
asg18
S'Y'
sS'.thisRepN'
p531
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p532
I1
sS'.thisN'
p533
I56
sS'.thisIndex'
p534
I10
sg15
(lp535
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp536
S'space'
p537
asg95
I10
sa(dp538
g16
(lp539
S'd'
asg18
S'N'
sS'.thisRepN'
p540
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p541
I2
sS'.thisN'
p542
I57
sS'.thisIndex'
p543
I8
sg15
(lp544
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp545
g16
(lp546
S'd'
asg18
S'Y'
sS'.thisRepN'
p547
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p548
I3
sS'.thisN'
p549
I58
sS'.thisIndex'
p550
I7
sg15
(lp551
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp552
S'space'
p553
asg95
I7
sa(dp554
g16
(lp555
S'd'
asg18
S'N'
sS'.thisRepN'
p556
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p557
I4
sS'.thisN'
p558
I59
sS'.thisIndex'
p559
I4
sg15
(lp560
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp561
g16
(lp562
S'k'
asg18
S'N'
sS'.thisRepN'
p563
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p564
I5
sS'.thisN'
p565
I60
sS'.thisIndex'
p566
I3
sg15
(lp567
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp568
g16
(lp569
S'k'
asg18
S'Y'
sS'.thisRepN'
p570
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p571
I6
sS'.thisN'
p572
I61
sS'.thisIndex'
p573
I7
sg15
(lp574
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp575
g16
(lp576
S'd'
asg18
S'N'
sS'.thisRepN'
p577
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p578
I7
sS'.thisN'
p579
I62
sS'.thisIndex'
p580
I10
sg15
(lp581
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp582
S'space'
p583
asg95
I10
sa(dp584
g16
(lp585
S'd'
asg18
S'Y'
sS'.thisRepN'
p586
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p587
I8
sS'.thisN'
p588
I63
sS'.thisIndex'
p589
I6
sg15
(lp590
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp591
S'space'
p592
asg95
I6
sa(dp593
g16
(lp594
S'd'
asg18
S'N'
sS'.thisRepN'
p595
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p596
I9
sS'.thisN'
p597
I64
sS'.thisIndex'
p598
I10
sg15
(lp599
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp600
g16
(lp601
S'd'
asg18
S'Y'
sS'.thisRepN'
p602
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p603
I10
sS'.thisN'
p604
I65
sS'.thisIndex'
p605
I2
sg15
(lp606
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp607
S'space'
p608
asg95
I2
sa(dp609
g16
(lp610
S'k'
asg18
S'N'
sS'.thisRepN'
p611
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p612
I0
sS'.thisN'
p613
I66
sS'.thisIndex'
p614
I3
sg15
(lp615
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp616
g16
(lp617
S'k'
asg18
S'Y'
sS'.thisRepN'
p618
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p619
I1
sS'.thisN'
p620
I67
sS'.thisIndex'
p621
I3
sg15
(lp622
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp623
S'space'
p624
asg95
I3
sa(dp625
g16
(lp626
S'k'
asg18
S'Y'
sS'.thisRepN'
p627
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p628
I2
sS'.thisN'
p629
I68
sS'.thisIndex'
p630
I4
sg15
(lp631
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp632
S'space'
p633
asg95
I4
sa(dp634
g16
(lp635
S'k'
asg18
S'N'
sS'.thisRepN'
p636
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p637
I3
sS'.thisN'
p638
I69
sS'.thisIndex'
p639
I6
sg15
(lp640
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp641
g16
(lp642
S'd'
asg18
S'N'
sS'.thisRepN'
p643
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p644
I4
sS'.thisN'
p645
I70
sS'.thisIndex'
p646
I5
sg15
(lp647
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp648
g16
(lp649
S'k'
asg18
S'Y'
sS'.thisRepN'
p650
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p651
I5
sS'.thisN'
p652
I71
sS'.thisIndex'
p653
I4
sg15
(lp654
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp655
S'space'
p656
asg95
I4
sa(dp657
g16
(lp658
S'k'
asg18
S'N'
sS'.thisRepN'
p659
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p660
I6
sS'.thisN'
p661
I72
sS'.thisIndex'
p662
I1
sg15
(lp663
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp664
g16
(lp665
S'd'
asg18
S'N'
sS'.thisRepN'
p666
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p667
I7
sS'.thisN'
p668
I73
sS'.thisIndex'
p669
I7
sg15
(lp670
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp671
g16
(lp672
S'k'
asg18
S'Y'
sS'.thisRepN'
p673
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p674
I8
sS'.thisN'
p675
I74
sS'.thisIndex'
p676
I9
sg15
(lp677
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp678
S'space'
p679
asg95
I9
sa(dp680
g16
(lp681
S'k'
asg18
S'Y'
sS'.thisRepN'
p682
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p683
I9
sS'.thisN'
p684
I75
sS'.thisIndex'
p685
I10
sg15
(lp686
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp687
g16
(lp688
S'k'
asg18
S'N'
sS'.thisRepN'
p689
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p690
I10
sS'.thisN'
p691
I76
sS'.thisIndex'
p692
I4
sg15
(lp693
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp694
S'space'
p695
asg95
I4
sa(dp696
g16
(lp697
S'k'
asg18
S'N'
sS'.thisRepN'
p698
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p699
I0
sS'.thisN'
p700
I77
sS'.thisIndex'
p701
I8
sg15
(lp702
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp703
g16
(lp704
S'd'
asg18
S'N'
sS'.thisRepN'
p705
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p706
I1
sS'.thisN'
p707
I78
sS'.thisIndex'
p708
I0
sg15
(lp709
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp710
g16
(lp711
S'd'
asg18
S'Y'
sS'.thisRepN'
p712
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p713
I2
sS'.thisN'
p714
I79
sS'.thisIndex'
p715
I2
sg15
(lp716
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp717
S'space'
p718
asg95
I2
sa(dp719
g16
(lp720
S'd'
asg18
S'Y'
sS'.thisRepN'
p721
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p722
I3
sS'.thisN'
p723
I80
sS'.thisIndex'
p724
I2
sg15
(lp725
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp726
S'space'
p727
asg95
I2
sa(dp728
g16
(lp729
S'k'
asg18
S'N'
sS'.thisRepN'
p730
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p731
I4
sS'.thisN'
p732
I81
sS'.thisIndex'
p733
I6
sg15
(lp734
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp735
g16
(lp736
S'k'
asg18
S'N'
sS'.thisRepN'
p737
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p738
I5
sS'.thisN'
p739
I82
sS'.thisIndex'
p740
I2
sg15
(lp741
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp742
S'space'
p743
asg95
I2
sa(dp744
g16
(lp745
S'k'
asg18
S'Y'
sS'.thisRepN'
p746
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p747
I6
sS'.thisN'
p748
I83
sS'.thisIndex'
p749
I9
sg15
(lp750
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp751
g16
(lp752
S'd'
asg18
S'Y'
sS'.thisRepN'
p753
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p754
I7
sS'.thisN'
p755
I84
sS'.thisIndex'
p756
I9
sg15
(lp757
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp758
S'space'
p759
asg95
I9
sa(dp760
g16
(lp761
S'k'
asg18
S'N'
sS'.thisRepN'
p762
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p763
I8
sS'.thisN'
p764
I85
sS'.thisIndex'
p765
I1
sg15
(lp766
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp767
g16
(lp768
S'd'
asg18
S'Y'
sS'.thisRepN'
p769
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p770
I9
sS'.thisN'
p771
I86
sS'.thisIndex'
p772
I3
sg15
(lp773
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp774
S'space'
p775
asg95
I3
sa(dp776
g16
(lp777
S'd'
asg18
S'N'
sS'.thisRepN'
p778
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p779
I10
sS'.thisN'
p780
I87
sS'.thisIndex'
p781
I7
sg15
(lp782
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I7
sa(dp783
g16
(lp784
S'd'
asg18
S'Y'
sS'.thisRepN'
p785
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p786
I0
sS'.thisN'
p787
I88
sS'.thisIndex'
p788
I3
sg15
(lp789
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp790
S'space'
p791
asg95
I3
sa(dp792
g16
(lp793
S'k'
asg18
S'Y'
sS'.thisRepN'
p794
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p795
I1
sS'.thisN'
p796
I89
sS'.thisIndex'
p797
I8
sg15
(lp798
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I8
sa(dp799
g16
(lp800
S'k'
asg18
S'N'
sS'.thisRepN'
p801
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p802
I2
sS'.thisN'
p803
I90
sS'.thisIndex'
p804
I0
sg15
(lp805
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp806
g16
(lp807
S'd'
asg18
S'N'
sS'.thisRepN'
p808
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p809
I3
sS'.thisN'
p810
I91
sS'.thisIndex'
p811
I4
sg15
(lp812
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp813
g16
(lp814
S'k'
asg18
S'N'
sS'.thisRepN'
p815
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p816
I4
sS'.thisN'
p817
I92
sS'.thisIndex'
p818
I1
sg15
(lp819
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp820
S'space'
p821
asg95
I1
sa(dp822
g16
(lp823
S'd'
asg18
S'Y'
sS'.thisRepN'
p824
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p825
I5
sS'.thisN'
p826
I93
sS'.thisIndex'
p827
I2
sg15
(lp828
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp829
S'space'
p830
asg95
I2
sa(dp831
g16
(lp832
S'd'
asg18
S'N'
sS'.thisRepN'
p833
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p834
I6
sS'.thisN'
p835
I94
sS'.thisIndex'
p836
I8
sg15
(lp837
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I8
sa(dp838
g16
(lp839
S'd'
asg18
S'Y'
sS'.thisRepN'
p840
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p841
I7
sS'.thisN'
p842
I95
sS'.thisIndex'
p843
I5
sg15
(lp844
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp845
S'space'
p846
asg95
I5
sa(dp847
g16
(lp848
S'k'
asg18
S'Y'
sS'.thisRepN'
p849
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p850
I8
sS'.thisN'
p851
I96
sS'.thisIndex'
p852
I1
sg15
(lp853
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp854
S'space'
p855
asg95
I1
sa(dp856
g16
(lp857
S'k'
asg18
S'N'
sS'.thisRepN'
p858
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p859
I9
sS'.thisN'
p860
I97
sS'.thisIndex'
p861
I2
sg15
(lp862
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I2
sa(dp863
g16
(lp864
S'k'
asg18
S'N'
sS'.thisRepN'
p865
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p866
I10
sS'.thisN'
p867
I98
sS'.thisIndex'
p868
I3
sg15
(lp869
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp870
S'space'
p871
asg95
I3
sa(dp872
g16
(lp873
S'd'
asg18
S'Y'
sg22
I38
sS'.thisN'
p874
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p875
I0
sS'.thisRepN'
p876
I9
sg21
I31
sS'.thisIndex'
p877
I10
sg23
I22
sg15
(lp878
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
(lp879
S'space'
p880
asg95
I10
sa(dp881
g16
(lp882
S'd'
asg95
I10
sS'.thisRepN'
p883
I9
sg30
Vf
sg31
g32
sS'.thisTrialN'
p884
I1
sS'.thisN'
p885
I100
sS'.thisIndex'
p886
I10
sg15
(lp887
S'd'
asg17
S'Y'
sg14
I3
sa(dp888
g16
(lp889
S'd'
asg95
I6
sS'.thisRepN'
p890
I9
sg30
Vf
sg31
g32
sS'.thisTrialN'
p891
I2
sS'.thisN'
p892
I101
sS'.thisIndex'
p893
I6
sg15
(lp894
S'd'
asg17
S'Y'
sg14
I3
sa(dp895
g16
(lp896
S'd'
asg18
S'N'
sS'.thisRepN'
p897
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p898
I3
sS'.thisN'
p899
I102
sS'.thisIndex'
p900
I3
sg15
(lp901
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp902
g16
(lp903
S'k'
asg18
S'N'
sS'.thisRepN'
p904
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p905
I4
sS'.thisN'
p906
I103
sS'.thisIndex'
p907
I9
sg15
(lp908
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp909
g16
(lp910
S'd'
asg18
S'N'
sS'.thisRepN'
p911
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p912
I5
sS'.thisN'
p913
I104
sS'.thisIndex'
p914
I2
sg15
(lp915
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp916
g16
(lp917
S'd'
asg18
S'Y'
sS'.thisRepN'
p918
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p919
I6
sS'.thisN'
p920
I105
sS'.thisIndex'
p921
I8
sg15
(lp922
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp923
S'space'
p924
asg95
I8
sa(dp925
g16
(lp926
S'd'
asg18
S'N'
sS'.thisRepN'
p927
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p928
I7
sS'.thisN'
p929
I106
sS'.thisIndex'
p930
I7
sg15
(lp931
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp932
g16
(lp933
S'd'
asg18
S'N'
sS'.thisRepN'
p934
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p935
I8
sS'.thisN'
p936
I107
sS'.thisIndex'
p937
I3
sg15
(lp938
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp939
g16
(lp940
S'd'
asg18
S'N'
sS'.thisRepN'
p941
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p942
I9
sS'.thisN'
p943
I108
sS'.thisIndex'
p944
I0
sg15
(lp945
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp946
g16
(lp947
S'd'
asg18
S'Y'
sS'.thisRepN'
p948
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p949
I10
sS'.thisN'
p950
I109
sS'.thisIndex'
p951
I6
sg15
(lp952
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp953
S'space'
p954
asg95
I6
sa(dp955
g16
(lp956
S'd'
asg18
S'Y'
sS'.thisRepN'
p957
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p958
I0
sS'.thisN'
p959
I110
sS'.thisIndex'
p960
I9
sg15
(lp961
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp962
g16
(lp963
S'k'
asg18
S'Y'
sS'.thisRepN'
p964
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p965
I1
sS'.thisN'
p966
I111
sS'.thisIndex'
p967
I1
sg15
(lp968
S'd'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp969
g16
(lp970
S'k'
asg18
S'Y'
sS'.thisRepN'
p971
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p972
I2
sS'.thisN'
p973
I112
sS'.thisIndex'
p974
I3
sg15
(lp975
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp976
S'space'
p977
asg95
I3
sa(dp978
g16
(lp979
S'k'
asg18
S'Y'
sS'.thisRepN'
p980
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p981
I3
sS'.thisN'
p982
I113
sS'.thisIndex'
p983
I3
sg15
(lp984
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp985
S'space'
p986
asg95
I3
sa(dp987
g16
(lp988
S'd'
asg18
S'N'
sS'.thisRepN'
p989
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p990
I4
sS'.thisN'
p991
I114
sS'.thisIndex'
p992
I10
sg15
(lp993
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I10
sa(dp994
g16
(lp995
S'd'
asg18
S'N'
sS'.thisRepN'
p996
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p997
I5
sS'.thisN'
p998
I115
sS'.thisIndex'
p999
I7
sg15
(lp1000
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1001
g16
(lp1002
S'd'
asg18
S'Y'
sS'.thisRepN'
p1003
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1004
I6
sS'.thisN'
p1005
I116
sS'.thisIndex'
p1006
I8
sg15
(lp1007
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1008
S'space'
p1009
asg95
I8
sa(dp1010
g16
(lp1011
S'k'
asg18
S'N'
sS'.thisRepN'
p1012
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1013
I7
sS'.thisN'
p1014
I117
sS'.thisIndex'
p1015
I1
sg15
(lp1016
S'd'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp1017
g16
(lp1018
S'k'
asg18
S'N'
sS'.thisRepN'
p1019
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1020
I8
sS'.thisN'
p1021
I118
sS'.thisIndex'
p1022
I1
sg15
(lp1023
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1024
g16
(lp1025
S'd'
asg18
S'Y'
sS'.thisRepN'
p1026
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1027
I9
sS'.thisN'
p1028
I119
sS'.thisIndex'
p1029
I8
sg15
(lp1030
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1031
S'space'
p1032
asg95
I8
sa(dp1033
g16
(lp1034
S'k'
asg18
S'Y'
sS'.thisRepN'
p1035
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1036
I10
sS'.thisN'
p1037
I120
sS'.thisIndex'
p1038
I0
sg15
(lp1039
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1040
S'space'
p1041
asg95
I0
sa(dp1042
g16
(lp1043
S'k'
asg18
S'Y'
sS'.thisRepN'
p1044
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1045
I0
sS'.thisN'
p1046
I121
sS'.thisIndex'
p1047
I4
sg15
(lp1048
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1049
S'space'
p1050
asg95
I4
sa(dp1051
g16
(lp1052
S'd'
asg18
S'Y'
sS'.thisRepN'
p1053
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1054
I1
sS'.thisN'
p1055
I122
sS'.thisIndex'
p1056
I4
sg15
(lp1057
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1058
S'space'
p1059
asg95
I4
sa(dp1060
g16
(lp1061
S'd'
asg18
S'N'
sS'.thisRepN'
p1062
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1063
I2
sS'.thisN'
p1064
I123
sS'.thisIndex'
p1065
I3
sg15
(lp1066
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1067
g16
(lp1068
S'd'
asg18
S'N'
sS'.thisRepN'
p1069
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1070
I3
sS'.thisN'
p1071
I124
sS'.thisIndex'
p1072
I9
sg15
(lp1073
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp1074
g16
(lp1075
S'd'
asg18
S'Y'
sS'.thisRepN'
p1076
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1077
I4
sS'.thisN'
p1078
I125
sS'.thisIndex'
p1079
I3
sg15
(lp1080
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1081
S'space'
p1082
asg95
I3
sa(dp1083
g16
(lp1084
S'k'
asg18
S'N'
sS'.thisRepN'
p1085
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1086
I5
sS'.thisN'
p1087
I126
sS'.thisIndex'
p1088
I7
sg15
(lp1089
S'd'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp1090
g16
(lp1091
S'k'
asg18
S'Y'
sS'.thisRepN'
p1092
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1093
I6
sS'.thisN'
p1094
I127
sS'.thisIndex'
p1095
I4
sg15
(lp1096
S'd'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp1097
S'space'
p1098
asg95
I4
sa(dp1099
g16
(lp1100
S'd'
asg18
S'Y'
sS'.thisRepN'
p1101
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1102
I7
sS'.thisN'
p1103
I128
sS'.thisIndex'
p1104
I5
sg15
(lp1105
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp1106
S'space'
p1107
asg95
I5
sa(dp1108
g16
(lp1109
S'd'
asg18
S'N'
sS'.thisRepN'
p1110
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1111
I8
sS'.thisN'
p1112
I129
sS'.thisIndex'
p1113
I8
sg15
(lp1114
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1115
g16
(lp1116
S'k'
asg18
S'Y'
sS'.thisRepN'
p1117
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1118
I9
sS'.thisN'
p1119
I130
sS'.thisIndex'
p1120
I6
sg15
(lp1121
S'd'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp1122
S'space'
p1123
asg95
I6
sa(dp1124
g16
(lp1125
S'd'
asg18
S'N'
sS'.thisRepN'
p1126
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1127
I10
sS'.thisN'
p1128
I131
sS'.thisIndex'
p1129
I1
sg15
(lp1130
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp1131
g16
(lp1132
S'k'
asg18
S'Y'
sS'.thisRepN'
p1133
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1134
I0
sS'.thisN'
p1135
I132
sS'.thisIndex'
p1136
I10
sg15
(lp1137
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1138
S'space'
p1139
asg95
I10
sa(dp1140
g16
(lp1141
S'k'
asg18
S'Y'
sS'.thisRepN'
p1142
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1143
I1
sS'.thisN'
p1144
I133
sS'.thisIndex'
p1145
I1
sg15
(lp1146
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1147
g16
(lp1148
S'k'
asg18
S'N'
sS'.thisRepN'
p1149
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1150
I2
sS'.thisN'
p1151
I134
sS'.thisIndex'
p1152
I9
sg15
(lp1153
S'd'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp1154
g16
(lp1155
S'k'
asg18
S'N'
sS'.thisRepN'
p1156
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1157
I3
sS'.thisN'
p1158
I135
sS'.thisIndex'
p1159
I1
sg15
(lp1160
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1161
g16
(lp1162
S'k'
asg18
S'Y'
sS'.thisRepN'
p1163
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1164
I4
sS'.thisN'
p1165
I136
sS'.thisIndex'
p1166
I3
sg15
(lp1167
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1168
g16
(lp1169
S'd'
asg18
S'Y'
sS'.thisRepN'
p1170
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1171
I5
sS'.thisN'
p1172
I137
sS'.thisIndex'
p1173
I10
sg15
(lp1174
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1175
S'space'
p1176
asg95
I10
sa(dp1177
g16
(lp1178
S'd'
asg18
S'N'
sS'.thisRepN'
p1179
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1180
I6
sS'.thisN'
p1181
I138
sS'.thisIndex'
p1182
I2
sg15
(lp1183
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1184
g16
(lp1185
S'd'
asg18
S'N'
sS'.thisRepN'
p1186
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1187
I7
sS'.thisN'
p1188
I139
sS'.thisIndex'
p1189
I0
sg15
(lp1190
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp1191
g16
(lp1192
S'd'
asg18
S'Y'
sS'.thisRepN'
p1193
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1194
I8
sS'.thisN'
p1195
I140
sS'.thisIndex'
p1196
I2
sg15
(lp1197
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp1198
S'space'
p1199
asg95
I2
sa(dp1200
g16
(lp1201
S'd'
asg18
S'Y'
sS'.thisRepN'
p1202
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1203
I9
sS'.thisN'
p1204
I141
sS'.thisIndex'
p1205
I5
sg15
(lp1206
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1207
S'space'
p1208
asg95
I5
sa(dp1209
g16
(lp1210
S'k'
asg18
S'N'
sS'.thisRepN'
p1211
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1212
I10
sS'.thisN'
p1213
I142
sS'.thisIndex'
p1214
I3
sg15
(lp1215
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1216
S'space'
p1217
asg95
I3
sa(dp1218
g16
(lp1219
S'k'
asg18
S'N'
sS'.thisRepN'
p1220
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1221
I0
sS'.thisN'
p1222
I143
sS'.thisIndex'
p1223
I4
sg15
(lp1224
S'd'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp1225
g16
(lp1226
S'd'
asg18
S'Y'
sS'.thisRepN'
p1227
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1228
I1
sS'.thisN'
p1229
I144
sS'.thisIndex'
p1230
I4
sg15
(lp1231
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp1232
S'space'
p1233
asg95
I4
sa(dp1234
g16
(lp1235
S'd'
asg18
S'N'
sS'.thisRepN'
p1236
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1237
I2
sS'.thisN'
p1238
I145
sS'.thisIndex'
p1239
I6
sg15
(lp1240
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1241
g16
(lp1242
S'd'
asg18
S'Y'
sS'.thisRepN'
p1243
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1244
I3
sS'.thisN'
p1245
I146
sS'.thisIndex'
p1246
I3
sg15
(lp1247
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1248
S'space'
p1249
asg95
I3
sa(dp1250
g16
(lp1251
S'd'
asg18
S'Y'
sS'.thisRepN'
p1252
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1253
I4
sS'.thisN'
p1254
I147
sS'.thisIndex'
p1255
I10
sg15
(lp1256
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp1257
S'space'
p1258
asg95
I10
sa(dp1259
g16
(lp1260
S'd'
asg18
S'N'
sS'.thisRepN'
p1261
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1262
I5
sS'.thisN'
p1263
I148
sS'.thisIndex'
p1264
I6
sg15
(lp1265
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp1266
S'space'
p1267
asg95
I6
sa(dp1268
g16
(lp1269
S'd'
asg18
S'N'
sg22
I42
sS'.thisN'
p1270
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1271
I6
sS'.thisRepN'
p1272
I13
sg21
I29
sS'.thisIndex'
p1273
I6
sg23
I24
sg15
(lp1274
S'k'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp1275
g16
(lp1276
S'd'
asg95
I10
sS'.thisRepN'
p1277
I13
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1278
I7
sS'.thisN'
p1279
I150
sS'.thisIndex'
p1280
I10
sg15
(lp1281
S'd'
asg17
S'Y'
sg14
I4
sa(dp1282
g16
(lp1283
S'k'
asg95
I5
sS'.thisRepN'
p1284
I13
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1285
I8
sS'.thisN'
p1286
I151
sS'.thisIndex'
p1287
I5
sg15
(lp1288
S'd'
asg17
S'N'
sg14
I4
sa(dp1289
g16
(lp1290
S'k'
asg18
S'N'
sS'.thisRepN'
p1291
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1292
I9
sS'.thisN'
p1293
I152
sS'.thisIndex'
p1294
I6
sg15
(lp1295
S'd'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
Nsg95
I6
sa(dp1296
g16
(lp1297
S'd'
asg18
S'Y'
sS'.thisRepN'
p1298
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1299
I10
sS'.thisN'
p1300
I153
sS'.thisIndex'
p1301
I4
sg15
(lp1302
S'k'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
(lp1303
S'space'
p1304
asg95
I4
sa(dp1305
g16
(lp1306
S'k'
asg18
S'N'
sS'.thisRepN'
p1307
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1308
I0
sS'.thisN'
p1309
I154
sS'.thisIndex'
p1310
I4
sg15
(lp1311
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1312
g16
(lp1313
S'k'
asg18
S'Y'
sS'.thisRepN'
p1314
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1315
I1
sS'.thisN'
p1316
I155
sS'.thisIndex'
p1317
I2
sg15
(lp1318
S'd'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
(lp1319
S'k'
asg95
I2
sa(dp1320
g16
(lp1321
S'k'
asg18
S'N'
sS'.thisRepN'
p1322
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1323
I2
sS'.thisN'
p1324
I156
sS'.thisIndex'
p1325
I6
sg15
(lp1326
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1327
S'space'
p1328
asg95
I6
sa(dp1329
g16
(lp1330
S'd'
asg18
S'Y'
sS'.thisRepN'
p1331
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1332
I3
sS'.thisN'
p1333
I157
sS'.thisIndex'
p1334
I2
sg15
(lp1335
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1336
S'space'
p1337
asg95
I2
sa(dp1338
g16
(lp1339
S'd'
asg18
S'Y'
sS'.thisRepN'
p1340
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1341
I4
sS'.thisN'
p1342
I158
sS'.thisIndex'
p1343
I6
sg15
(lp1344
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1345
g16
(lp1346
S'd'
asg18
S'N'
sS'.thisRepN'
p1347
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1348
I5
sS'.thisN'
p1349
I159
sS'.thisIndex'
p1350
I5
sg15
(lp1351
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1352
g16
(lp1353
S'd'
asg18
S'N'
sS'.thisRepN'
p1354
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1355
I6
sS'.thisN'
p1356
I160
sS'.thisIndex'
p1357
I5
sg15
(lp1358
S'k'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
(lp1359
S'space'
p1360
asg95
I5
sa(dp1361
g16
(lp1362
S'd'
asg18
S'Y'
sS'.thisRepN'
p1363
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1364
I7
sS'.thisN'
p1365
I161
sS'.thisIndex'
p1366
I7
sg15
(lp1367
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1368
g16
(lp1369
S'd'
asg18
S'Y'
sS'.thisRepN'
p1370
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1371
I8
sS'.thisN'
p1372
I162
sS'.thisIndex'
p1373
I5
sg15
(lp1374
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1375
g16
(lp1376
S'k'
asg18
S'Y'
sS'.thisRepN'
p1377
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1378
I9
sS'.thisN'
p1379
I163
sS'.thisIndex'
p1380
I0
sg15
(lp1381
S'd'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
(lp1382
S'space'
p1383
asg95
I0
sa(dp1384
g16
(lp1385
S'k'
asg18
S'N'
sS'.thisRepN'
p1386
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1387
I10
sS'.thisN'
p1388
I164
sS'.thisIndex'
p1389
I8
sg15
(lp1390
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1391
g16
(lp1392
S'k'
asg18
S'N'
sS'.thisRepN'
p1393
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1394
I0
sS'.thisN'
p1395
I165
sS'.thisIndex'
p1396
I8
sg15
(lp1397
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1398
S'space'
p1399
asg95
I8
sa(dp1400
g16
(lp1401
S'k'
asg18
S'N'
sS'.thisRepN'
p1402
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1403
I1
sS'.thisN'
p1404
I166
sS'.thisIndex'
p1405
I10
sg15
(lp1406
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1407
g16
(lp1408
S'k'
asg18
S'N'
sS'.thisRepN'
p1409
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1410
I2
sS'.thisN'
p1411
I167
sS'.thisIndex'
p1412
I4
sg15
(lp1413
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1414
g16
(lp1415
S'd'
asg18
S'Y'
sS'.thisRepN'
p1416
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1417
I3
sS'.thisN'
p1418
I168
sS'.thisIndex'
p1419
I4
sg15
(lp1420
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1421
S'space'
p1422
asg95
I4
sa(dp1423
g16
(lp1424
S'k'
asg18
S'N'
sS'.thisRepN'
p1425
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1426
I4
sS'.thisN'
p1427
I169
sS'.thisIndex'
p1428
I10
sg15
(lp1429
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1430
g16
(lp1431
S'k'
asg18
S'Y'
sS'.thisRepN'
p1432
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1433
I5
sS'.thisN'
p1434
I170
sS'.thisIndex'
p1435
I7
sg15
(lp1436
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1437
S'space'
p1438
asg95
I7
sa(dp1439
g16
(lp1440
S'd'
asg18
S'Y'
sS'.thisRepN'
p1441
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1442
I6
sS'.thisN'
p1443
I171
sS'.thisIndex'
p1444
I0
sg15
(lp1445
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1446
S'space'
p1447
asg95
I0
sa(dp1448
g16
(lp1449
S'd'
asg18
S'N'
sS'.thisRepN'
p1450
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1451
I7
sS'.thisN'
p1452
I172
sS'.thisIndex'
p1453
I7
sg15
(lp1454
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1455
g16
(lp1456
S'd'
asg18
S'N'
sS'.thisRepN'
p1457
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1458
I8
sS'.thisN'
p1459
I173
sS'.thisIndex'
p1460
I0
sg15
(lp1461
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1462
g16
(lp1463
S'd'
asg18
S'Y'
sS'.thisRepN'
p1464
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1465
I9
sS'.thisN'
p1466
I174
sS'.thisIndex'
p1467
I10
sg15
(lp1468
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1469
g16
(lp1470
S'd'
asg18
S'N'
sS'.thisRepN'
p1471
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1472
I10
sS'.thisN'
p1473
I175
sS'.thisIndex'
p1474
I9
sg15
(lp1475
S'k'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
Nsg95
I9
sa(dp1476
g16
(lp1477
S'k'
asg18
S'N'
sS'.thisRepN'
p1478
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1479
I0
sS'.thisN'
p1480
I176
sS'.thisIndex'
p1481
I4
sg15
(lp1482
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1483
g16
(lp1484
S'd'
asg18
S'Y'
sS'.thisRepN'
p1485
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1486
I1
sS'.thisN'
p1487
I177
sS'.thisIndex'
p1488
I2
sg15
(lp1489
S'k'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
(lp1490
S'd'
asg95
I2
sa(dp1491
g16
(lp1492
S'k'
asg18
S'Y'
sS'.thisRepN'
p1493
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1494
I2
sS'.thisN'
p1495
I178
sS'.thisIndex'
p1496
I2
sg15
(lp1497
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1498
g16
(lp1499
S'k'
asg18
S'Y'
sS'.thisRepN'
p1500
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1501
I3
sS'.thisN'
p1502
I179
sS'.thisIndex'
p1503
I1
sg15
(lp1504
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1505
S'space'
p1506
asg95
I1
sa(dp1507
g16
(lp1508
S'd'
asg18
S'N'
sS'.thisRepN'
p1509
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1510
I4
sS'.thisN'
p1511
I180
sS'.thisIndex'
p1512
I7
sg15
(lp1513
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1514
g16
(lp1515
S'd'
asg18
S'N'
sS'.thisRepN'
p1516
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1517
I5
sS'.thisN'
p1518
I181
sS'.thisIndex'
p1519
I6
sg15
(lp1520
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1521
g16
(lp1522
S'k'
asg18
S'Y'
sS'.thisRepN'
p1523
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1524
I6
sS'.thisN'
p1525
I182
sS'.thisIndex'
p1526
I7
sg15
(lp1527
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1528
S'space'
p1529
asg95
I7
sa(dp1530
g16
(lp1531
S'd'
asg18
S'N'
sS'.thisRepN'
p1532
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1533
I7
sS'.thisN'
p1534
I183
sS'.thisIndex'
p1535
I0
sg15
(lp1536
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1537
g16
(lp1538
S'k'
asg18
S'Y'
sS'.thisRepN'
p1539
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1540
I8
sS'.thisN'
p1541
I184
sS'.thisIndex'
p1542
I7
sg15
(lp1543
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1544
S'space'
p1545
asg95
I7
sa(dp1546
g16
(lp1547
S'k'
asg18
S'N'
sS'.thisRepN'
p1548
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1549
I9
sS'.thisN'
p1550
I185
sS'.thisIndex'
p1551
I5
sg15
(lp1552
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1553
g16
(lp1554
S'k'
asg18
S'Y'
sS'.thisRepN'
p1555
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1556
I10
sS'.thisN'
p1557
I186
sS'.thisIndex'
p1558
I2
sg15
(lp1559
S'd'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
(lp1560
S'space'
p1561
asg95
I2
sa(dp1562
g16
(lp1563
S'k'
asg18
S'Y'
sS'.thisRepN'
p1564
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1565
I0
sS'.thisN'
p1566
I187
sS'.thisIndex'
p1567
I6
sg15
(lp1568
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1569
S'space'
p1570
asg95
I6
sa(dp1571
g16
(lp1572
S'k'
asg18
S'N'
sS'.thisRepN'
p1573
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1574
I1
sS'.thisN'
p1575
I188
sS'.thisIndex'
p1576
I6
sg15
(lp1577
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1578
g16
(lp1579
S'd'
asg18
S'Y'
sS'.thisRepN'
p1580
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1581
I2
sS'.thisN'
p1582
I189
sS'.thisIndex'
p1583
I6
sg15
(lp1584
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1585
g16
(lp1586
S'd'
asg18
S'N'
sS'.thisRepN'
p1587
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1588
I3
sS'.thisN'
p1589
I190
sS'.thisIndex'
p1590
I9
sg15
(lp1591
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1592
g16
(lp1593
S'k'
asg18
S'Y'
sS'.thisRepN'
p1594
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1595
I4
sS'.thisN'
p1596
I191
sS'.thisIndex'
p1597
I0
sg15
(lp1598
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1599
S'space'
p1600
asg95
I0
sa(dp1601
g16
(lp1602
S'k'
asg18
S'Y'
sS'.thisRepN'
p1603
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1604
I5
sS'.thisN'
p1605
I192
sS'.thisIndex'
p1606
I8
sg15
(lp1607
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1608
g16
(lp1609
S'k'
asg18
S'N'
sS'.thisRepN'
p1610
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1611
I6
sS'.thisN'
p1612
I193
sS'.thisIndex'
p1613
I5
sg15
(lp1614
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1615
g16
(lp1616
S'k'
asg18
S'Y'
sS'.thisRepN'
p1617
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1618
I7
sS'.thisN'
p1619
I194
sS'.thisIndex'
p1620
I1
sg15
(lp1621
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1622
S'space'
p1623
asg95
I1
sa(dp1624
g16
(lp1625
S'k'
asg18
S'Y'
sS'.thisRepN'
p1626
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1627
I8
sS'.thisN'
p1628
I195
sS'.thisIndex'
p1629
I9
sg15
(lp1630
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1631
S'space'
p1632
asg95
I9
sa(dp1633
g16
(lp1634
S'd'
asg18
S'Y'
sS'.thisRepN'
p1635
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1636
I9
sS'.thisN'
p1637
I196
sS'.thisIndex'
p1638
I3
sg15
(lp1639
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1640
S'space'
p1641
asg95
I3
sa(dp1642
g16
(lp1643
S'k'
asg18
S'N'
sS'.thisRepN'
p1644
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1645
I10
sS'.thisN'
p1646
I197
sS'.thisIndex'
p1647
I8
sg15
(lp1648
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1649
g16
(lp1650
S'd'
asg18
S'Y'
sS'.thisRepN'
p1651
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1652
I0
sS'.thisN'
p1653
I198
sS'.thisIndex'
p1654
I8
sg15
(lp1655
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1656
S'space'
p1657
asg95
I8
sa(dp1658
g16
(lp1659
S'k'
asg18
S'N'
sg22
I35
sS'.thisN'
p1660
I199
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1661
I1
sS'.thisRepN'
p1662
I18
sg21
I41
sS'.thisIndex'
p1663
I9
sg23
I25
sg15
(lp1664
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1665
S'space'
p1666
asg95
I9
sa(dp1667
g16
(lp1668
S'k'
asg95
I8
sS'.thisRepN'
p1669
I18
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1670
I2
sS'.thisN'
p1671
I200
sS'.thisIndex'
p1672
I8
sg15
(lp1673
S'k'
asg17
S'Y'
sg14
I5
sa(dp1674
g16
(lp1675
S'd'
asg95
I7
sS'.thisRepN'
p1676
I18
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1677
I3
sS'.thisN'
p1678
I201
sS'.thisIndex'
p1679
I7
sg15
(lp1680
S'd'
asg17
S'Y'
sg14
I5
sa(dp1681
g16
(lp1682
S'd'
asg18
S'Y'
sS'.thisRepN'
p1683
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1684
I4
sS'.thisN'
p1685
I202
sS'.thisIndex'
p1686
I4
sg15
(lp1687
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1688
S'space'
p1689
asg95
I4
sa(dp1690
g16
(lp1691
S'd'
asg18
S'N'
sS'.thisRepN'
p1692
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1693
I5
sS'.thisN'
p1694
I203
sS'.thisIndex'
p1695
I6
sg15
(lp1696
S'k'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I6
sa(dp1697
g16
(lp1698
S'd'
asg18
S'N'
sS'.thisRepN'
p1699
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1700
I6
sS'.thisN'
p1701
I204
sS'.thisIndex'
p1702
I8
sg15
(lp1703
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1704
g16
(lp1705
S'd'
asg18
S'Y'
sS'.thisRepN'
p1706
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1707
I7
sS'.thisN'
p1708
I205
sS'.thisIndex'
p1709
I3
sg15
(lp1710
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1711
S'space'
p1712
asg95
I3
sa(dp1713
g16
(lp1714
S'd'
asg18
S'N'
sS'.thisRepN'
p1715
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1716
I8
sS'.thisN'
p1717
I206
sS'.thisIndex'
p1718
I6
sg15
(lp1719
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1720
S'space'
p1721
asg95
I6
sa(dp1722
g16
(lp1723
S'd'
asg18
S'Y'
sS'.thisRepN'
p1724
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1725
I9
sS'.thisN'
p1726
I207
sS'.thisIndex'
p1727
I4
sg15
(lp1728
S'k'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
(lp1729
S'space'
p1730
asg95
I4
sa(dp1731
g16
(lp1732
S'd'
asg18
S'N'
sS'.thisRepN'
p1733
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1734
I10
sS'.thisN'
p1735
I208
sS'.thisIndex'
p1736
I0
sg15
(lp1737
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1738
g16
(lp1739
S'd'
asg18
S'N'
sS'.thisRepN'
p1740
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1741
I0
sS'.thisN'
p1742
I209
sS'.thisIndex'
p1743
I10
sg15
(lp1744
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1745
g16
(lp1746
S'd'
asg18
S'N'
sS'.thisRepN'
p1747
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1748
I1
sS'.thisN'
p1749
I210
sS'.thisIndex'
p1750
I3
sg15
(lp1751
S'k'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I3
sa(dp1752
g16
(lp1753
S'k'
asg18
S'Y'
sS'.thisRepN'
p1754
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1755
I2
sS'.thisN'
p1756
I211
sS'.thisIndex'
p1757
I2
sg15
(lp1758
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1759
S'space'
p1760
asg95
I2
sa(dp1761
g16
(lp1762
S'd'
asg18
S'Y'
sS'.thisRepN'
p1763
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1764
I3
sS'.thisN'
p1765
I212
sS'.thisIndex'
p1766
I7
sg15
(lp1767
S'k'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I7
sa(dp1768
g16
(lp1769
S'k'
asg18
S'Y'
sS'.thisRepN'
p1770
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1771
I4
sS'.thisN'
p1772
I213
sS'.thisIndex'
p1773
I0
sg15
(lp1774
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1775
S'space'
p1776
asg95
I0
sa(dp1777
g16
(lp1778
S'k'
asg18
S'Y'
sS'.thisRepN'
p1779
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1780
I5
sS'.thisN'
p1781
I214
sS'.thisIndex'
p1782
I0
sg15
(lp1783
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1784
g16
(lp1785
S'd'
asg18
S'Y'
sS'.thisRepN'
p1786
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1787
I6
sS'.thisN'
p1788
I215
sS'.thisIndex'
p1789
I8
sg15
(lp1790
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1791
S'space'
p1792
asg95
I8
sa(dp1793
g16
(lp1794
S'd'
asg18
S'Y'
sS'.thisRepN'
p1795
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1796
I7
sS'.thisN'
p1797
I216
sS'.thisIndex'
p1798
I6
sg15
(lp1799
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1800
g16
(lp1801
S'd'
asg18
S'Y'
sS'.thisRepN'
p1802
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1803
I8
sS'.thisN'
p1804
I217
sS'.thisIndex'
p1805
I9
sg15
(lp1806
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1807
S'space'
p1808
asg95
I9
sa(dp1809
g16
(lp1810
S'k'
asg18
S'Y'
sS'.thisRepN'
p1811
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1812
I9
sS'.thisN'
p1813
I218
sS'.thisIndex'
p1814
I3
sg15
(lp1815
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1816
S'space'
p1817
asg95
I3
sa(dp1818
g16
(lp1819
S'd'
asg18
S'N'
sS'.thisRepN'
p1820
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1821
I10
sS'.thisN'
p1822
I219
sS'.thisIndex'
p1823
I9
sg15
(lp1824
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1825
g16
(lp1826
S'd'
asg18
S'Y'
sS'.thisRepN'
p1827
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1828
I0
sS'.thisN'
p1829
I220
sS'.thisIndex'
p1830
I0
sg15
(lp1831
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1832
S'space'
p1833
asg95
I0
sa(dp1834
g16
(lp1835
S'd'
asg18
S'Y'
sS'.thisRepN'
p1836
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1837
I1
sS'.thisN'
p1838
I221
sS'.thisIndex'
p1839
I4
sg15
(lp1840
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1841
S'space'
p1842
asg95
I4
sa(dp1843
g16
(lp1844
S'k'
asg18
S'Y'
sS'.thisRepN'
p1845
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1846
I2
sS'.thisN'
p1847
I222
sS'.thisIndex'
p1848
I10
sg15
(lp1849
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1850
S'space'
p1851
asg95
I10
sa(dp1852
g16
(lp1853
S'k'
asg18
S'N'
sS'.thisRepN'
p1854
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1855
I3
sS'.thisN'
p1856
I223
sS'.thisIndex'
p1857
I4
sg15
(lp1858
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1859
g16
(lp1860
S'd'
asg18
S'Y'
sS'.thisRepN'
p1861
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1862
I4
sS'.thisN'
p1863
I224
sS'.thisIndex'
p1864
I7
sg15
(lp1865
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1866
g16
(lp1867
S'k'
asg18
S'N'
sS'.thisRepN'
p1868
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1869
I5
sS'.thisN'
p1870
I225
sS'.thisIndex'
p1871
I5
sg15
(lp1872
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1873
g16
(lp1874
S'd'
asg18
S'Y'
sS'.thisRepN'
p1875
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1876
I6
sS'.thisN'
p1877
I226
sS'.thisIndex'
p1878
I4
sg15
(lp1879
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1880
S'space'
p1881
asg95
I4
sa(dp1882
g16
(lp1883
S'k'
asg18
S'N'
sS'.thisRepN'
p1884
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1885
I7
sS'.thisN'
p1886
I227
sS'.thisIndex'
p1887
I10
sg15
(lp1888
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1889
g16
(lp1890
S'd'
asg18
S'N'
sS'.thisRepN'
p1891
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1892
I8
sS'.thisN'
p1893
I228
sS'.thisIndex'
p1894
I2
sg15
(lp1895
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1896
g16
(lp1897
S'd'
asg18
S'N'
sS'.thisRepN'
p1898
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1899
I9
sS'.thisN'
p1900
I229
sS'.thisIndex'
p1901
I9
sg15
(lp1902
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1903
g16
(lp1904
S'k'
asg18
S'Y'
sS'.thisRepN'
p1905
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1906
I10
sS'.thisN'
p1907
I230
sS'.thisIndex'
p1908
I8
sg15
(lp1909
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1910
g16
(lp1911
S'd'
asg18
S'N'
sS'.thisRepN'
p1912
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1913
I0
sS'.thisN'
p1914
I231
sS'.thisIndex'
p1915
I4
sg15
(lp1916
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1917
S'space'
p1918
asg95
I4
sa(dp1919
g16
(lp1920
S'k'
asg18
S'Y'
sS'.thisRepN'
p1921
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1922
I1
sS'.thisN'
p1923
I232
sS'.thisIndex'
p1924
I0
sg15
(lp1925
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1926
S'space'
p1927
asg95
I0
sa(dp1928
g16
(lp1929
S'k'
asg18
S'N'
sS'.thisRepN'
p1930
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1931
I2
sS'.thisN'
p1932
I233
sS'.thisIndex'
p1933
I9
sg15
(lp1934
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1935
S'space'
p1936
asg95
I9
sa(dp1937
g16
(lp1938
S'd'
asg18
S'N'
sS'.thisRepN'
p1939
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1940
I3
sS'.thisN'
p1941
I234
sS'.thisIndex'
p1942
I10
sg15
(lp1943
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1944
g16
(lp1945
S'd'
asg18
S'Y'
sS'.thisRepN'
p1946
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1947
I4
sS'.thisN'
p1948
I235
sS'.thisIndex'
p1949
I10
sg15
(lp1950
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1951
S'space'
p1952
asg95
I10
sa(dp1953
g16
(lp1954
S'k'
asg18
S'N'
sS'.thisRepN'
p1955
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1956
I5
sS'.thisN'
p1957
I236
sS'.thisIndex'
p1958
I10
sg15
(lp1959
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1960
g16
(lp1961
S'k'
asg18
S'Y'
sS'.thisRepN'
p1962
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1963
I6
sS'.thisN'
p1964
I237
sS'.thisIndex'
p1965
I2
sg15
(lp1966
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1967
S'space'
p1968
asg95
I2
sa(dp1969
g16
(lp1970
S'd'
asg18
S'Y'
sS'.thisRepN'
p1971
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1972
I7
sS'.thisN'
p1973
I238
sS'.thisIndex'
p1974
I9
sg15
(lp1975
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1976
S'space'
p1977
asg95
I9
sa(dp1978
g16
(lp1979
S'k'
asg18
S'N'
sS'.thisRepN'
p1980
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1981
I8
sS'.thisN'
p1982
I239
sS'.thisIndex'
p1983
I10
sg15
(lp1984
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1985
S'space'
p1986
asg95
I10
sa(dp1987
g16
(lp1988
S'k'
asg18
S'Y'
sS'.thisRepN'
p1989
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1990
I9
sS'.thisN'
p1991
I240
sS'.thisIndex'
p1992
I9
sg15
(lp1993
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1994
S'space'
p1995
asg95
I9
sa(dp1996
g16
(lp1997
S'd'
asg18
S'N'
sS'.thisRepN'
p1998
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1999
I10
sS'.thisN'
p2000
I241
sS'.thisIndex'
p2001
I6
sg15
(lp2002
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp2003
g16
(lp2004
S'd'
asg18
S'N'
sS'.thisRepN'
p2005
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2006
I0
sS'.thisN'
p2007
I242
sS'.thisIndex'
p2008
I9
sg15
(lp2009
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp2010
g16
(lp2011
S'd'
asg18
S'Y'
sS'.thisRepN'
p2012
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2013
I1
sS'.thisN'
p2014
I243
sS'.thisIndex'
p2015
I10
sg15
(lp2016
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp2017
S'space'
p2018
asg95
I10
sa(dp2019
g16
(lp2020
S'k'
asg18
S'N'
sS'.thisRepN'
p2021
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2022
I2
sS'.thisN'
p2023
I244
sS'.thisIndex'
p2024
I3
sg15
(lp2025
S'd'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I3
sa(dp2026
g16
(lp2027
S'k'
asg18
S'N'
sS'.thisRepN'
p2028
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2029
I3
sS'.thisN'
p2030
I245
sS'.thisIndex'
p2031
I6
sg15
(lp2032
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp2033
S'space'
p2034
asg95
I6
sa(dp2035
g16
(lp2036
S'k'
asg18
S'N'
sS'.thisRepN'
p2037
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2038
I4
sS'.thisN'
p2039
I246
sS'.thisIndex'
p2040
I7
sg15
(lp2041
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp2042
g16
(lp2043
S'k'
asg18
S'N'
sS'.thisRepN'
p2044
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2045
I5
sS'.thisN'
p2046
I247
sS'.thisIndex'
p2047
I9
sg15
(lp2048
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp2049
g16
(lp2050
S'k'
asg18
S'Y'
sS'.thisRepN'
p2051
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2052
I6
sS'.thisN'
p2053
I248
sS'.thisIndex'
p2054
I10
sg15
(lp2055
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp2056
S'space'
p2057
asg95
I10
sa(dp2058
g16
(lp2059
S'k'
asg18
S'N'
sg22
I38
sS'.thisN'
p2060
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2061
I7
sS'.thisRepN'
p2062
I22
sg21
I45
sS'.thisIndex'
p2063
I10
sg23
I24
sg15
(lp2064
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp2065
g16
(lp2066
S'd'
asg95
I9
sS'.thisRepN'
p2067
I22
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2068
I8
sS'.thisN'
p2069
I250
sS'.thisIndex'
p2070
I9
sg15
(lp2071
S'd'
asg17
S'Y'
sg14
I6
sa(dp2072
g16
(lp2073
S'k'
asg95
I0
sS'.thisRepN'
p2074
I22
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2075
I9
sS'.thisN'
p2076
I251
sS'.thisIndex'
p2077
I0
sg15
(lp2078
S'k'
asg17
S'Y'
sg14
I6
sa(dp2079
g16
(lp2080
S'k'
asg18
S'Y'
sS'.thisRepN'
p2081
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2082
I10
sS'.thisN'
p2083
I252
sS'.thisIndex'
p2084
I9
sg15
(lp2085
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2086
S'space'
p2087
asg95
I9
sa(dp2088
g16
(lp2089
S'k'
asg18
S'Y'
sS'.thisRepN'
p2090
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2091
I0
sS'.thisN'
p2092
I253
sS'.thisIndex'
p2093
I3
sg15
(lp2094
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2095
S'space'
p2096
asg95
I3
sa(dp2097
g16
(lp2098
S'k'
asg18
S'Y'
sS'.thisRepN'
p2099
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2100
I1
sS'.thisN'
p2101
I254
sS'.thisIndex'
p2102
I10
sg15
(lp2103
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2104
S'space'
p2105
asg95
I10
sa(dp2106
g16
(lp2107
S'k'
asg18
S'Y'
sS'.thisRepN'
p2108
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2109
I2
sS'.thisN'
p2110
I255
sS'.thisIndex'
p2111
I9
sg15
(lp2112
S'd'
asg30
Vf
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2113
g16
(lp2114
S'd'
asg18
S'Y'
sS'.thisRepN'
p2115
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2116
I3
sS'.thisN'
p2117
I256
sS'.thisIndex'
p2118
I4
sg15
(lp2119
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2120
S'space'
p2121
asg95
I4
sa(dp2122
g16
(lp2123
S'd'
asg18
S'N'
sS'.thisRepN'
p2124
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2125
I4
sS'.thisN'
p2126
I257
sS'.thisIndex'
p2127
I4
sg15
(lp2128
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2129
g16
(lp2130
S'k'
asg18
S'Y'
sS'.thisRepN'
p2131
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2132
I5
sS'.thisN'
p2133
I258
sS'.thisIndex'
p2134
I9
sg15
(lp2135
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2136
g16
(lp2137
S'k'
asg18
S'N'
sS'.thisRepN'
p2138
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2139
I6
sS'.thisN'
p2140
I259
sS'.thisIndex'
p2141
I9
sg15
(lp2142
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2143
S'space'
p2144
asg95
I9
sa(dp2145
g16
(lp2146
S'k'
asg18
S'N'
sS'.thisRepN'
p2147
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2148
I7
sS'.thisN'
p2149
I260
sS'.thisIndex'
p2150
I6
sg15
(lp2151
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2152
g16
(lp2153
S'k'
asg18
S'N'
sS'.thisRepN'
p2154
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2155
I8
sS'.thisN'
p2156
I261
sS'.thisIndex'
p2157
I4
sg15
(lp2158
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2159
S'space'
p2160
asg95
I4
sa(dp2161
g16
(lp2162
S'd'
asg18
S'N'
sS'.thisRepN'
p2163
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2164
I9
sS'.thisN'
p2165
I262
sS'.thisIndex'
p2166
I9
sg15
(lp2167
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2168
S'space'
p2169
asg95
I9
sa(dp2170
g16
(lp2171
S'd'
asg18
S'Y'
sS'.thisRepN'
p2172
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2173
I10
sS'.thisN'
p2174
I263
sS'.thisIndex'
p2175
I3
sg15
(lp2176
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2177
S'space'
p2178
asg95
I3
sa(dp2179
g16
(lp2180
S'd'
asg18
S'Y'
sS'.thisRepN'
p2181
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2182
I0
sS'.thisN'
p2183
I264
sS'.thisIndex'
p2184
I1
sg15
(lp2185
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2186
S'space'
p2187
asg95
I1
sa(dp2188
g16
(lp2189
S'k'
asg18
S'Y'
sS'.thisRepN'
p2190
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2191
I1
sS'.thisN'
p2192
I265
sS'.thisIndex'
p2193
I10
sg15
(lp2194
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2195
g16
(lp2196
S'k'
asg18
S'N'
sS'.thisRepN'
p2197
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2198
I2
sS'.thisN'
p2199
I266
sS'.thisIndex'
p2200
I5
sg15
(lp2201
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2202
g16
(lp2203
S'd'
asg18
S'Y'
sS'.thisRepN'
p2204
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2205
I3
sS'.thisN'
p2206
I267
sS'.thisIndex'
p2207
I4
sg15
(lp2208
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2209
g16
(lp2210
S'k'
asg18
S'N'
sS'.thisRepN'
p2211
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2212
I4
sS'.thisN'
p2213
I268
sS'.thisIndex'
p2214
I3
sg15
(lp2215
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2216
g16
(lp2217
S'd'
asg18
S'Y'
sS'.thisRepN'
p2218
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2219
I5
sS'.thisN'
p2220
I269
sS'.thisIndex'
p2221
I2
sg15
(lp2222
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2223
S'space'
p2224
asg95
I2
sa(dp2225
g16
(lp2226
S'd'
asg18
S'Y'
sS'.thisRepN'
p2227
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2228
I6
sS'.thisN'
p2229
I270
sS'.thisIndex'
p2230
I0
sg15
(lp2231
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2232
g16
(lp2233
S'k'
asg18
S'Y'
sS'.thisRepN'
p2234
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2235
I7
sS'.thisN'
p2236
I271
sS'.thisIndex'
p2237
I7
sg15
(lp2238
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2239
S'space'
p2240
asg95
I7
sa(dp2241
g16
(lp2242
S'd'
asg18
S'N'
sS'.thisRepN'
p2243
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2244
I8
sS'.thisN'
p2245
I272
sS'.thisIndex'
p2246
I8
sg15
(lp2247
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2248
g16
(lp2249
S'k'
asg18
S'N'
sS'.thisRepN'
p2250
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2251
I9
sS'.thisN'
p2252
I273
sS'.thisIndex'
p2253
I6
sg15
(lp2254
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2255
S'space'
p2256
asg95
I6
sa(dp2257
g16
(lp2258
S'k'
asg18
S'Y'
sS'.thisRepN'
p2259
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2260
I10
sS'.thisN'
p2261
I274
sS'.thisIndex'
p2262
I3
sg15
(lp2263
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2264
S'space'
p2265
asg95
I3
sa(dp2266
g16
(lp2267
S'd'
asg18
S'N'
sS'.thisRepN'
p2268
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2269
I0
sS'.thisN'
p2270
I275
sS'.thisIndex'
p2271
I6
sg15
(lp2272
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2273
S'space'
p2274
asg95
I6
sa(dp2275
g16
(lp2276
S'k'
asg18
S'Y'
sS'.thisRepN'
p2277
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2278
I1
sS'.thisN'
p2279
I276
sS'.thisIndex'
p2280
I3
sg15
(lp2281
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2282
S'space'
p2283
asg95
I3
sa(dp2284
g16
(lp2285
S'd'
asg18
S'N'
sS'.thisRepN'
p2286
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2287
I2
sS'.thisN'
p2288
I277
sS'.thisIndex'
p2289
I6
sg15
(lp2290
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2291
g16
(lp2292
S'd'
asg18
S'Y'
sS'.thisRepN'
p2293
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2294
I3
sS'.thisN'
p2295
I278
sS'.thisIndex'
p2296
I0
sg15
(lp2297
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2298
S'space'
p2299
asg95
I0
sa(dp2300
g16
(lp2301
S'k'
asg18
S'Y'
sS'.thisRepN'
p2302
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2303
I4
sS'.thisN'
p2304
I279
sS'.thisIndex'
p2305
I0
sg15
(lp2306
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2307
S'space'
p2308
asg95
I0
sa(dp2309
g16
(lp2310
S'k'
asg18
S'Y'
sS'.thisRepN'
p2311
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2312
I5
sS'.thisN'
p2313
I280
sS'.thisIndex'
p2314
I4
sg15
(lp2315
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2316
S'd'
asg95
I4
sa(dp2317
g16
(lp2318
S'd'
asg18
S'N'
sS'.thisRepN'
p2319
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2320
I6
sS'.thisN'
p2321
I281
sS'.thisIndex'
p2322
I5
sg15
(lp2323
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2324
g16
(lp2325
S'k'
asg18
S'N'
sS'.thisRepN'
p2326
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2327
I7
sS'.thisN'
p2328
I282
sS'.thisIndex'
p2329
I4
sg15
(lp2330
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2331
g16
(lp2332
S'd'
asg18
S'N'
sS'.thisRepN'
p2333
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2334
I8
sS'.thisN'
p2335
I283
sS'.thisIndex'
p2336
I3
sg15
(lp2337
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2338
g16
(lp2339
S'k'
asg18
S'Y'
sS'.thisRepN'
p2340
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2341
I9
sS'.thisN'
p2342
I284
sS'.thisIndex'
p2343
I3
sg15
(lp2344
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2345
S'space'
p2346
asg95
I3
sa(dp2347
g16
(lp2348
S'k'
asg18
S'N'
sS'.thisRepN'
p2349
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2350
I10
sS'.thisN'
p2351
I285
sS'.thisIndex'
p2352
I10
sg15
(lp2353
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2354
g16
(lp2355
S'd'
asg18
S'Y'
sS'.thisRepN'
p2356
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2357
I0
sS'.thisN'
p2358
I286
sS'.thisIndex'
p2359
I6
sg15
(lp2360
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2361
S'space'
p2362
asg95
I6
sa(dp2363
g16
(lp2364
S'd'
asg18
S'N'
sS'.thisRepN'
p2365
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2366
I1
sS'.thisN'
p2367
I287
sS'.thisIndex'
p2368
I5
sg15
(lp2369
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2370
g16
(lp2371
S'd'
asg18
S'N'
sS'.thisRepN'
p2372
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2373
I2
sS'.thisN'
p2374
I288
sS'.thisIndex'
p2375
I3
sg15
(lp2376
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2377
g16
(lp2378
S'd'
asg18
S'N'
sS'.thisRepN'
p2379
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2380
I3
sS'.thisN'
p2381
I289
sS'.thisIndex'
p2382
I9
sg15
(lp2383
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2384
g16
(lp2385
S'k'
asg18
S'Y'
sS'.thisRepN'
p2386
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2387
I4
sS'.thisN'
p2388
I290
sS'.thisIndex'
p2389
I6
sg15
(lp2390
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2391
S'space'
p2392
asg95
I6
sa(dp2393
g16
(lp2394
S'd'
asg18
S'N'
sS'.thisRepN'
p2395
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2396
I5
sS'.thisN'
p2397
I291
sS'.thisIndex'
p2398
I7
sg15
(lp2399
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2400
g16
(lp2401
S'k'
asg18
S'N'
sS'.thisRepN'
p2402
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2403
I6
sS'.thisN'
p2404
I292
sS'.thisIndex'
p2405
I8
sg15
(lp2406
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2407
g16
(lp2408
S'k'
asg18
S'N'
sS'.thisRepN'
p2409
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2410
I7
sS'.thisN'
p2411
I293
sS'.thisIndex'
p2412
I5
sg15
(lp2413
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2414
g16
(lp2415
S'd'
asg18
S'Y'
sS'.thisRepN'
p2416
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2417
I8
sS'.thisN'
p2418
I294
sS'.thisIndex'
p2419
I7
sg15
(lp2420
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2421
S'space'
p2422
asg95
I7
sa(dp2423
g16
(lp2424
S'k'
asg18
S'Y'
sS'.thisRepN'
p2425
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2426
I9
sS'.thisN'
p2427
I295
sS'.thisIndex'
p2428
I7
sg15
(lp2429
S'd'
asg30
Vf
sg17
S'N'
sg14
I6
sg19
(lp2430
S'space'
p2431
asg95
I7
sa(dp2432
g16
(lp2433
S'k'
asg18
S'N'
sS'.thisRepN'
p2434
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2435
I10
sS'.thisN'
p2436
I296
sS'.thisIndex'
p2437
I10
sg15
(lp2438
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2439
g16
(lp2440
S'k'
asg18
S'Y'
sS'.thisRepN'
p2441
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2442
I0
sS'.thisN'
p2443
I297
sS'.thisIndex'
p2444
I4
sg15
(lp2445
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2446
S'space'
p2447
asg95
I4
sa(dp2448
g16
(lp2449
S'k'
asg18
S'Y'
sS'.thisRepN'
p2450
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2451
I1
sS'.thisN'
p2452
I298
sS'.thisIndex'
p2453
I6
sg15
(lp2454
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2455
S'space'
p2456
asg95
I6
sa(dp2457
g16
(lp2458
S'd'
asg18
S'N'
sg22
I37
sS'.thisN'
p2459
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2460
I2
sS'.thisRepN'
p2461
I27
sg21
I48
sS'.thisIndex'
p2462
I6
sg23
I25
sg15
(lp2463
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2464
g16
(lp2465
S'd'
asg95
I2
sS'.thisRepN'
p2466
I27
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2467
I3
sS'.thisN'
p2468
I300
sS'.thisIndex'
p2469
I2
sg15
(lp2470
S'd'
asg17
S'Y'
sg14
I7
sa(dp2471
g16
(lp2472
S'd'
asg95
I2
sS'.thisRepN'
p2473
I27
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2474
I4
sS'.thisN'
p2475
I301
sS'.thisIndex'
p2476
I2
sg15
(lp2477
S'd'
asg17
S'Y'
sg14
I7
sa(dp2478
g16
(lp2479
S'd'
asg18
S'N'
sS'.thisRepN'
p2480
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2481
I5
sS'.thisN'
p2482
I302
sS'.thisIndex'
p2483
I6
sg15
(lp2484
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
Nsg95
I6
sa(dp2485
g16
(lp2486
S'd'
asg18
S'N'
sS'.thisRepN'
p2487
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2488
I6
sS'.thisN'
p2489
I303
sS'.thisIndex'
p2490
I10
sg15
(lp2491
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2492
g16
(lp2493
S'k'
asg18
S'N'
sS'.thisRepN'
p2494
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2495
I7
sS'.thisN'
p2496
I304
sS'.thisIndex'
p2497
I7
sg15
(lp2498
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2499
g16
(lp2500
S'k'
asg18
S'Y'
sS'.thisRepN'
p2501
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2502
I8
sS'.thisN'
p2503
I305
sS'.thisIndex'
p2504
I10
sg15
(lp2505
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2506
g16
(lp2507
S'd'
asg18
S'N'
sS'.thisRepN'
p2508
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2509
I9
sS'.thisN'
p2510
I306
sS'.thisIndex'
p2511
I5
sg15
(lp2512
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2513
g16
(lp2514
S'k'
asg18
S'N'
sS'.thisRepN'
p2515
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2516
I10
sS'.thisN'
p2517
I307
sS'.thisIndex'
p2518
I4
sg15
(lp2519
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2520
g16
(lp2521
S'k'
asg18
S'N'
sS'.thisRepN'
p2522
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2523
I0
sS'.thisN'
p2524
I308
sS'.thisIndex'
p2525
I8
sg15
(lp2526
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2527
g16
(lp2528
S'k'
asg18
S'Y'
sS'.thisRepN'
p2529
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2530
I1
sS'.thisN'
p2531
I309
sS'.thisIndex'
p2532
I1
sg15
(lp2533
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2534
S'space'
p2535
asg95
I1
sa(dp2536
g16
(lp2537
S'k'
asg18
S'N'
sS'.thisRepN'
p2538
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2539
I2
sS'.thisN'
p2540
I310
sS'.thisIndex'
p2541
I1
sg15
(lp2542
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2543
g16
(lp2544
S'd'
asg18
S'N'
sS'.thisRepN'
p2545
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2546
I3
sS'.thisN'
p2547
I311
sS'.thisIndex'
p2548
I6
sg15
(lp2549
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2550
S'space'
p2551
asg95
I6
sa(dp2552
g16
(lp2553
S'd'
asg18
S'N'
sS'.thisRepN'
p2554
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2555
I4
sS'.thisN'
p2556
I312
sS'.thisIndex'
p2557
I1
sg15
(lp2558
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
(lp2559
S'space'
p2560
asg95
I1
sa(dp2561
g16
(lp2562
S'd'
asg18
S'N'
sS'.thisRepN'
p2563
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2564
I5
sS'.thisN'
p2565
I313
sS'.thisIndex'
p2566
I1
sg15
(lp2567
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2568
S'space'
p2569
asg95
I1
sa(dp2570
g16
(lp2571
S'd'
asg18
S'Y'
sS'.thisRepN'
p2572
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2573
I6
sS'.thisN'
p2574
I314
sS'.thisIndex'
p2575
I5
sg15
(lp2576
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2577
S'space'
p2578
asg95
I5
sa(dp2579
g16
(lp2580
S'k'
asg18
S'N'
sS'.thisRepN'
p2581
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2582
I7
sS'.thisN'
p2583
I315
sS'.thisIndex'
p2584
I2
sg15
(lp2585
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2586
g16
(lp2587
S'd'
asg18
S'Y'
sS'.thisRepN'
p2588
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2589
I8
sS'.thisN'
p2590
I316
sS'.thisIndex'
p2591
I4
sg15
(lp2592
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
(lp2593
S'space'
p2594
asg95
I4
sa(dp2595
g16
(lp2596
S'd'
asg18
S'N'
sS'.thisRepN'
p2597
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2598
I9
sS'.thisN'
p2599
I317
sS'.thisIndex'
p2600
I2
sg15
(lp2601
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2602
g16
(lp2603
S'd'
asg18
S'Y'
sS'.thisRepN'
p2604
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2605
I10
sS'.thisN'
p2606
I318
sS'.thisIndex'
p2607
I1
sg15
(lp2608
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2609
S'space'
p2610
asg95
I1
sa(dp2611
g16
(lp2612
S'd'
asg18
S'N'
sS'.thisRepN'
p2613
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2614
I0
sS'.thisN'
p2615
I319
sS'.thisIndex'
p2616
I1
sg15
(lp2617
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2618
g16
(lp2619
S'd'
asg18
S'Y'
sS'.thisRepN'
p2620
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2621
I1
sS'.thisN'
p2622
I320
sS'.thisIndex'
p2623
I7
sg15
(lp2624
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2625
S'space'
p2626
asg95
I7
sa(dp2627
g16
(lp2628
S'd'
asg18
S'Y'
sS'.thisRepN'
p2629
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2630
I2
sS'.thisN'
p2631
I321
sS'.thisIndex'
p2632
I10
sg15
(lp2633
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2634
S'space'
p2635
asg95
I10
sa(dp2636
g16
(lp2637
S'k'
asg18
S'N'
sS'.thisRepN'
p2638
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2639
I3
sS'.thisN'
p2640
I322
sS'.thisIndex'
p2641
I2
sg15
(lp2642
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2643
g16
(lp2644
S'k'
asg18
S'N'
sS'.thisRepN'
p2645
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2646
I4
sS'.thisN'
p2647
I323
sS'.thisIndex'
p2648
I5
sg15
(lp2649
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2650
g16
(lp2651
S'd'
asg18
S'N'
sS'.thisRepN'
p2652
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2653
I5
sS'.thisN'
p2654
I324
sS'.thisIndex'
p2655
I3
sg15
(lp2656
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2657
S'space'
p2658
asg95
I3
sa(dp2659
g16
(lp2660
S'd'
asg18
S'N'
sS'.thisRepN'
p2661
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2662
I6
sS'.thisN'
p2663
I325
sS'.thisIndex'
p2664
I10
sg15
(lp2665
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2666
g16
(lp2667
S'd'
asg18
S'Y'
sS'.thisRepN'
p2668
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2669
I7
sS'.thisN'
p2670
I326
sS'.thisIndex'
p2671
I5
sg15
(lp2672
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2673
S'space'
p2674
asg95
I5
sa(dp2675
g16
(lp2676
S'd'
asg18
S'N'
sS'.thisRepN'
p2677
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2678
I8
sS'.thisN'
p2679
I327
sS'.thisIndex'
p2680
I1
sg15
(lp2681
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2682
g16
(lp2683
S'k'
asg18
S'Y'
sS'.thisRepN'
p2684
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2685
I9
sS'.thisN'
p2686
I328
sS'.thisIndex'
p2687
I8
sg15
(lp2688
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2689
S'space'
p2690
asg95
I8
sa(dp2691
g16
(lp2692
S'd'
asg18
S'Y'
sS'.thisRepN'
p2693
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2694
I10
sS'.thisN'
p2695
I329
sS'.thisIndex'
p2696
I5
sg15
(lp2697
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2698
S'space'
p2699
asg95
I5
sa(dp2700
g16
(lp2701
S'd'
asg18
S'N'
sS'.thisRepN'
p2702
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2703
I0
sS'.thisN'
p2704
I330
sS'.thisIndex'
p2705
I2
sg15
(lp2706
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2707
g16
(lp2708
S'd'
asg18
S'Y'
sS'.thisRepN'
p2709
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2710
I1
sS'.thisN'
p2711
I331
sS'.thisIndex'
p2712
I8
sg15
(lp2713
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
(lp2714
S'space'
p2715
asg95
I8
sa(dp2716
g16
(lp2717
S'd'
asg18
S'Y'
sS'.thisRepN'
p2718
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2719
I2
sS'.thisN'
p2720
I332
sS'.thisIndex'
p2721
I7
sg15
(lp2722
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2723
S'space'
p2724
asg95
I7
sa(dp2725
g16
(lp2726
S'k'
asg18
S'Y'
sS'.thisRepN'
p2727
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2728
I3
sS'.thisN'
p2729
I333
sS'.thisIndex'
p2730
I1
sg15
(lp2731
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2732
S'space'
p2733
asg95
I1
sa(dp2734
g16
(lp2735
S'k'
asg18
S'N'
sS'.thisRepN'
p2736
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2737
I4
sS'.thisN'
p2738
I334
sS'.thisIndex'
p2739
I1
sg15
(lp2740
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2741
S'space'
p2742
asg95
I1
sa(dp2743
g16
(lp2744
S'k'
asg18
S'Y'
sS'.thisRepN'
p2745
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2746
I5
sS'.thisN'
p2747
I335
sS'.thisIndex'
p2748
I0
sg15
(lp2749
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2750
S'space'
p2751
asg95
I0
sa(dp2752
g16
(lp2753
S'd'
asg18
S'N'
sS'.thisRepN'
p2754
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2755
I6
sS'.thisN'
p2756
I336
sS'.thisIndex'
p2757
I5
sg15
(lp2758
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2759
g16
(lp2760
S'k'
asg18
S'Y'
sS'.thisRepN'
p2761
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2762
I7
sS'.thisN'
p2763
I337
sS'.thisIndex'
p2764
I2
sg15
(lp2765
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2766
S'space'
p2767
asg95
I2
sa(dp2768
g16
(lp2769
S'd'
asg18
S'N'
sS'.thisRepN'
p2770
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2771
I8
sS'.thisN'
p2772
I338
sS'.thisIndex'
p2773
I0
sg15
(lp2774
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2775
g16
(lp2776
S'd'
asg18
S'N'
sS'.thisRepN'
p2777
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2778
I9
sS'.thisN'
p2779
I339
sS'.thisIndex'
p2780
I4
sg15
(lp2781
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2782
g16
(lp2783
S'k'
asg18
S'N'
sS'.thisRepN'
p2784
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2785
I10
sS'.thisN'
p2786
I340
sS'.thisIndex'
p2787
I8
sg15
(lp2788
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2789
g16
(lp2790
S'd'
asg18
S'N'
sS'.thisRepN'
p2791
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2792
I0
sS'.thisN'
p2793
I341
sS'.thisIndex'
p2794
I6
sg15
(lp2795
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
Nsg95
I6
sa(dp2796
g16
(lp2797
S'd'
asg18
S'Y'
sS'.thisRepN'
p2798
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2799
I1
sS'.thisN'
p2800
I342
sS'.thisIndex'
p2801
I10
sg15
(lp2802
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2803
S'space'
p2804
asg95
I10
sa(dp2805
g16
(lp2806
S'd'
asg18
S'Y'
sS'.thisRepN'
p2807
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2808
I2
sS'.thisN'
p2809
I343
sS'.thisIndex'
p2810
I2
sg15
(lp2811
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
(lp2812
S'space'
p2813
asg95
I2
sa(dp2814
g16
(lp2815
S'd'
asg18
S'N'
sS'.thisRepN'
p2816
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2817
I3
sS'.thisN'
p2818
I344
sS'.thisIndex'
p2819
I6
sg15
(lp2820
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2821
g16
(lp2822
S'd'
asg18
S'Y'
sS'.thisRepN'
p2823
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2824
I4
sS'.thisN'
p2825
I345
sS'.thisIndex'
p2826
I0
sg15
(lp2827
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2828
S'space'
p2829
asg95
I0
sa(dp2830
g16
(lp2831
S'd'
asg18
S'N'
sS'.thisRepN'
p2832
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2833
I5
sS'.thisN'
p2834
I346
sS'.thisIndex'
p2835
I0
sg15
(lp2836
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2837
g16
(lp2838
S'd'
asg18
S'Y'
sS'.thisRepN'
p2839
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2840
I6
sS'.thisN'
p2841
I347
sS'.thisIndex'
p2842
I2
sg15
(lp2843
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2844
S'space'
p2845
asg95
I2
sa(dp2846
g16
(lp2847
S'd'
asg18
S'N'
sS'.thisRepN'
p2848
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2849
I7
sS'.thisN'
p2850
I348
sS'.thisIndex'
p2851
I0
sg15
(lp2852
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2853
g16
(lp2854
S'k'
asg18
S'N'
sg22
I42
sS'.thisN'
p2855
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2856
I8
sS'.thisRepN'
p2857
I31
sg21
I43
sS'.thisIndex'
p2858
I7
sg23
I19
sg15
(lp2859
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2860
g16
(lp2861
S'd'
asg95
I5
sS'.thisRepN'
p2862
I31
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2863
I9
sS'.thisN'
p2864
I350
sS'.thisIndex'
p2865
I5
sg15
(lp2866
S'd'
asg17
S'Y'
sg14
I8
sa(dp2867
g16
(lp2868
S'd'
asg95
I7
sS'.thisRepN'
p2869
I31
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2870
I10
sS'.thisN'
p2871
I351
sS'.thisIndex'
p2872
I7
sg15
(lp2873
S'd'
asg17
S'Y'
sg14
I8
sa(dp2874
g16
(lp2875
S'k'
asg18
S'N'
sS'.thisRepN'
p2876
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2877
I0
sS'.thisN'
p2878
I352
sS'.thisIndex'
p2879
I0
sg15
(lp2880
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2881
g16
(lp2882
S'k'
asg18
S'Y'
sS'.thisRepN'
p2883
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2884
I1
sS'.thisN'
p2885
I353
sS'.thisIndex'
p2886
I0
sg15
(lp2887
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2888
S'space'
p2889
asg95
I0
sa(dp2890
g16
(lp2891
S'k'
asg18
S'Y'
sS'.thisRepN'
p2892
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2893
I2
sS'.thisN'
p2894
I354
sS'.thisIndex'
p2895
I6
sg15
(lp2896
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2897
S'space'
p2898
asg95
I6
sa(dp2899
g16
(lp2900
S'k'
asg18
S'N'
sS'.thisRepN'
p2901
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2902
I3
sS'.thisN'
p2903
I355
sS'.thisIndex'
p2904
I2
sg15
(lp2905
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2906
g16
(lp2907
S'k'
asg18
S'N'
sS'.thisRepN'
p2908
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2909
I4
sS'.thisN'
p2910
I356
sS'.thisIndex'
p2911
I7
sg15
(lp2912
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2913
S'space'
p2914
asg95
I7
sa(dp2915
g16
(lp2916
S'd'
asg18
S'N'
sS'.thisRepN'
p2917
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2918
I5
sS'.thisN'
p2919
I357
sS'.thisIndex'
p2920
I7
sg15
(lp2921
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2922
S'space'
p2923
asg95
I7
sa(dp2924
g16
(lp2925
S'k'
asg18
S'Y'
sS'.thisRepN'
p2926
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2927
I6
sS'.thisN'
p2928
I358
sS'.thisIndex'
p2929
I7
sg15
(lp2930
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2931
S'space'
p2932
asg95
I7
sa(dp2933
g16
(lp2934
S'd'
asg18
S'Y'
sS'.thisRepN'
p2935
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2936
I7
sS'.thisN'
p2937
I359
sS'.thisIndex'
p2938
I8
sg15
(lp2939
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2940
S'space'
p2941
asg95
I8
sa(dp2942
g16
(lp2943
S'k'
asg18
S'N'
sS'.thisRepN'
p2944
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2945
I8
sS'.thisN'
p2946
I360
sS'.thisIndex'
p2947
I2
sg15
(lp2948
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2949
g16
(lp2950
S'k'
asg18
S'N'
sS'.thisRepN'
p2951
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2952
I9
sS'.thisN'
p2953
I361
sS'.thisIndex'
p2954
I2
sg15
(lp2955
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2956
g16
(lp2957
S'd'
asg18
S'N'
sS'.thisRepN'
p2958
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2959
I10
sS'.thisN'
p2960
I362
sS'.thisIndex'
p2961
I4
sg15
(lp2962
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2963
g16
(lp2964
S'd'
asg18
S'N'
sS'.thisRepN'
p2965
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2966
I0
sS'.thisN'
p2967
I363
sS'.thisIndex'
p2968
I4
sg15
(lp2969
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2970
g16
(lp2971
S'k'
asg18
S'N'
sS'.thisRepN'
p2972
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2973
I1
sS'.thisN'
p2974
I364
sS'.thisIndex'
p2975
I8
sg15
(lp2976
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2977
g16
(lp2978
S'k'
asg18
S'N'
sS'.thisRepN'
p2979
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2980
I2
sS'.thisN'
p2981
I365
sS'.thisIndex'
p2982
I1
sg15
(lp2983
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp2984
g16
(lp2985
S'k'
asg18
S'N'
sS'.thisRepN'
p2986
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2987
I3
sS'.thisN'
p2988
I366
sS'.thisIndex'
p2989
I6
sg15
(lp2990
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2991
g16
(lp2992
S'k'
asg18
S'N'
sS'.thisRepN'
p2993
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2994
I4
sS'.thisN'
p2995
I367
sS'.thisIndex'
p2996
I1
sg15
(lp2997
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp2998
g16
(lp2999
S'k'
asg18
S'Y'
sS'.thisRepN'
p3000
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3001
I5
sS'.thisN'
p3002
I368
sS'.thisIndex'
p3003
I9
sg15
(lp3004
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3005
g16
(lp3006
S'k'
asg18
S'Y'
sS'.thisRepN'
p3007
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3008
I6
sS'.thisN'
p3009
I369
sS'.thisIndex'
p3010
I7
sg15
(lp3011
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3012
g16
(lp3013
S'k'
asg18
S'Y'
sS'.thisRepN'
p3014
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3015
I7
sS'.thisN'
p3016
I370
sS'.thisIndex'
p3017
I1
sg15
(lp3018
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3019
S'space'
p3020
asg95
I1
sa(dp3021
g16
(lp3022
S'd'
asg18
S'N'
sS'.thisRepN'
p3023
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3024
I8
sS'.thisN'
p3025
I371
sS'.thisIndex'
p3026
I2
sg15
(lp3027
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3028
g16
(lp3029
S'k'
asg18
S'N'
sS'.thisRepN'
p3030
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3031
I9
sS'.thisN'
p3032
I372
sS'.thisIndex'
p3033
I2
sg15
(lp3034
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3035
g16
(lp3036
S'k'
asg18
S'Y'
sS'.thisRepN'
p3037
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3038
I10
sS'.thisN'
p3039
I373
sS'.thisIndex'
p3040
I10
sg15
(lp3041
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3042
g16
(lp3043
S'k'
asg18
S'N'
sS'.thisRepN'
p3044
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3045
I0
sS'.thisN'
p3046
I374
sS'.thisIndex'
p3047
I8
sg15
(lp3048
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3049
g16
(lp3050
S'd'
asg18
S'N'
sS'.thisRepN'
p3051
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3052
I1
sS'.thisN'
p3053
I375
sS'.thisIndex'
p3054
I3
sg15
(lp3055
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3056
g16
(lp3057
S'd'
asg18
S'Y'
sS'.thisRepN'
p3058
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3059
I2
sS'.thisN'
p3060
I376
sS'.thisIndex'
p3061
I9
sg15
(lp3062
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3063
S'space'
p3064
asg95
I9
sa(dp3065
g16
(lp3066
S'k'
asg18
S'N'
sS'.thisRepN'
p3067
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3068
I3
sS'.thisN'
p3069
I377
sS'.thisIndex'
p3070
I0
sg15
(lp3071
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3072
g16
(lp3073
S'd'
asg18
S'Y'
sS'.thisRepN'
p3074
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3075
I4
sS'.thisN'
p3076
I378
sS'.thisIndex'
p3077
I4
sg15
(lp3078
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3079
S'space'
p3080
asg95
I4
sa(dp3081
g16
(lp3082
S'k'
asg18
S'N'
sS'.thisRepN'
p3083
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3084
I5
sS'.thisN'
p3085
I379
sS'.thisIndex'
p3086
I7
sg15
(lp3087
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3088
g16
(lp3089
S'd'
asg18
S'Y'
sS'.thisRepN'
p3090
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3091
I6
sS'.thisN'
p3092
I380
sS'.thisIndex'
p3093
I1
sg15
(lp3094
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3095
S'space'
p3096
asg95
I1
sa(dp3097
g16
(lp3098
S'd'
asg18
S'Y'
sS'.thisRepN'
p3099
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3100
I7
sS'.thisN'
p3101
I381
sS'.thisIndex'
p3102
I0
sg15
(lp3103
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3104
g16
(lp3105
S'k'
asg18
S'Y'
sS'.thisRepN'
p3106
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3107
I8
sS'.thisN'
p3108
I382
sS'.thisIndex'
p3109
I9
sg15
(lp3110
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3111
S'space'
p3112
asg95
I9
sa(dp3113
g16
(lp3114
S'k'
asg18
S'Y'
sS'.thisRepN'
p3115
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3116
I9
sS'.thisN'
p3117
I383
sS'.thisIndex'
p3118
I5
sg15
(lp3119
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3120
g16
(lp3121
S'd'
asg18
S'Y'
sS'.thisRepN'
p3122
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3123
I10
sS'.thisN'
p3124
I384
sS'.thisIndex'
p3125
I7
sg15
(lp3126
S'k'
asg30
Vf
sg17
S'N'
sg14
I8
sg19
(lp3127
S'space'
p3128
asg95
I7
sa(dp3129
g16
(lp3130
S'd'
asg18
S'N'
sS'.thisRepN'
p3131
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3132
I0
sS'.thisN'
p3133
I385
sS'.thisIndex'
p3134
I1
sg15
(lp3135
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3136
g16
(lp3137
S'd'
asg18
S'N'
sS'.thisRepN'
p3138
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3139
I1
sS'.thisN'
p3140
I386
sS'.thisIndex'
p3141
I5
sg15
(lp3142
S'k'
asg30
Vf
sg17
S'N'
sg14
I8
sg19
Nsg95
I5
sa(dp3143
g16
(lp3144
S'k'
asg18
S'Y'
sS'.thisRepN'
p3145
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3146
I2
sS'.thisN'
p3147
I387
sS'.thisIndex'
p3148
I2
sg15
(lp3149
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3150
g16
(lp3151
S'd'
asg18
S'N'
sS'.thisRepN'
p3152
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3153
I3
sS'.thisN'
p3154
I388
sS'.thisIndex'
p3155
I6
sg15
(lp3156
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3157
g16
(lp3158
S'd'
asg18
S'Y'
sS'.thisRepN'
p3159
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3160
I4
sS'.thisN'
p3161
I389
sS'.thisIndex'
p3162
I9
sg15
(lp3163
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3164
S'space'
p3165
asg95
I9
sa(dp3166
g16
(lp3167
S'd'
asg18
S'N'
sS'.thisRepN'
p3168
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3169
I5
sS'.thisN'
p3170
I390
sS'.thisIndex'
p3171
I7
sg15
(lp3172
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3173
g16
(lp3174
S'k'
asg18
S'Y'
sS'.thisRepN'
p3175
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3176
I6
sS'.thisN'
p3177
I391
sS'.thisIndex'
p3178
I8
sg15
(lp3179
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3180
S'space'
p3181
asg95
I8
sa(dp3182
g16
(lp3183
S'd'
asg18
S'Y'
sS'.thisRepN'
p3184
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3185
I7
sS'.thisN'
p3186
I392
sS'.thisIndex'
p3187
I0
sg15
(lp3188
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3189
S'space'
p3190
asg95
I0
sa(dp3191
g16
(lp3192
S'd'
asg18
S'Y'
sS'.thisRepN'
p3193
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3194
I8
sS'.thisN'
p3195
I393
sS'.thisIndex'
p3196
I8
sg15
(lp3197
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3198
S'space'
p3199
asg95
I8
sa(dp3200
g16
(lp3201
S'k'
asg18
S'Y'
sS'.thisRepN'
p3202
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3203
I9
sS'.thisN'
p3204
I394
sS'.thisIndex'
p3205
I9
sg15
(lp3206
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3207
S'space'
p3208
asg95
I9
sa(dp3209
g16
(lp3210
S'd'
asg18
S'N'
sS'.thisRepN'
p3211
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3212
I10
sS'.thisN'
p3213
I395
sS'.thisIndex'
p3214
I9
sg15
(lp3215
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3216
g16
(lp3217
S'k'
asg18
S'N'
sS'.thisRepN'
p3218
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3219
I0
sS'.thisN'
p3220
I396
sS'.thisIndex'
p3221
I9
sg15
(lp3222
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3223
g16
(lp3224
S'k'
asg18
S'N'
sS'.thisRepN'
p3225
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3226
I1
sS'.thisN'
p3227
I397
sS'.thisIndex'
p3228
I5
sg15
(lp3229
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3230
g16
(lp3231
S'k'
asg18
S'N'
sS'.thisRepN'
p3232
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3233
I2
sS'.thisN'
p3234
I398
sS'.thisIndex'
p3235
I6
sg15
(lp3236
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3237
g16
(lp3238
S'd'
asg18
S'N'
sg22
I40
sS'.thisN'
p3239
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3240
I3
sS'.thisRepN'
p3241
I36
sg21
I48
sS'.thisIndex'
p3242
I1
sg23
I21
sg15
(lp3243
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3244
g16
(lp3245
S'd'
asg95
I5
sS'.thisRepN'
p3246
I36
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3247
I4
sS'.thisN'
p3248
I400
sS'.thisIndex'
p3249
I5
sg15
(lp3250
S'd'
asg17
S'Y'
sg14
I9
sa(dp3251
g16
(lp3252
S'd'
asg95
I9
sS'.thisRepN'
p3253
I36
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3254
I5
sS'.thisN'
p3255
I401
sS'.thisIndex'
p3256
I9
sg15
(lp3257
S'd'
asg17
S'Y'
sg14
I9
sa(dp3258
g16
(lp3259
S'k'
asg18
S'Y'
sS'.thisRepN'
p3260
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3261
I6
sS'.thisN'
p3262
I402
sS'.thisIndex'
p3263
I4
sg15
(lp3264
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3265
S'space'
p3266
asg95
I4
sa(dp3267
g16
(lp3268
S'd'
asg18
S'N'
sS'.thisRepN'
p3269
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3270
I7
sS'.thisN'
p3271
I403
sS'.thisIndex'
p3272
I1
sg15
(lp3273
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3274
g16
(lp3275
S'd'
asg18
S'Y'
sS'.thisRepN'
p3276
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3277
I8
sS'.thisN'
p3278
I404
sS'.thisIndex'
p3279
I5
sg15
(lp3280
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3281
S'space'
p3282
asg95
I5
sa(dp3283
g16
(lp3284
S'k'
asg18
S'Y'
sS'.thisRepN'
p3285
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3286
I9
sS'.thisN'
p3287
I405
sS'.thisIndex'
p3288
I6
sg15
(lp3289
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3290
S'space'
p3291
asg95
I6
sa(dp3292
g16
(lp3293
S'k'
asg18
S'Y'
sS'.thisRepN'
p3294
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3295
I10
sS'.thisN'
p3296
I406
sS'.thisIndex'
p3297
I9
sg15
(lp3298
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3299
S'space'
p3300
asg95
I9
sa(dp3301
g16
(lp3302
S'k'
asg18
S'N'
sS'.thisRepN'
p3303
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3304
I0
sS'.thisN'
p3305
I407
sS'.thisIndex'
p3306
I7
sg15
(lp3307
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3308
g16
(lp3309
S'k'
asg18
S'N'
sS'.thisRepN'
p3310
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3311
I1
sS'.thisN'
p3312
I408
sS'.thisIndex'
p3313
I1
sg15
(lp3314
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3315
S'space'
p3316
asg95
I1
sa(dp3317
g16
(lp3318
S'k'
asg18
S'Y'
sS'.thisRepN'
p3319
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3320
I2
sS'.thisN'
p3321
I409
sS'.thisIndex'
p3322
I8
sg15
(lp3323
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3324
g16
(lp3325
S'd'
asg18
S'Y'
sS'.thisRepN'
p3326
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3327
I3
sS'.thisN'
p3328
I410
sS'.thisIndex'
p3329
I2
sg15
(lp3330
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3331
S'space'
p3332
asg95
I2
sa(dp3333
g16
(lp3334
S'd'
asg18
S'Y'
sS'.thisRepN'
p3335
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3336
I4
sS'.thisN'
p3337
I411
sS'.thisIndex'
p3338
I8
sg15
(lp3339
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3340
S'space'
p3341
asg95
I8
sa(dp3342
g16
(lp3343
S'd'
asg18
S'Y'
sS'.thisRepN'
p3344
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3345
I5
sS'.thisN'
p3346
I412
sS'.thisIndex'
p3347
I6
sg15
(lp3348
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3349
S'space'
p3350
asg95
I6
sa(dp3351
g16
(lp3352
S'd'
asg18
S'Y'
sS'.thisRepN'
p3353
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3354
I6
sS'.thisN'
p3355
I413
sS'.thisIndex'
p3356
I8
sg15
(lp3357
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3358
S'space'
p3359
asg95
I8
sa(dp3360
g16
(lp3361
S'k'
asg18
S'Y'
sS'.thisRepN'
p3362
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3363
I7
sS'.thisN'
p3364
I414
sS'.thisIndex'
p3365
I2
sg15
(lp3366
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3367
S'space'
p3368
asg95
I2
sa(dp3369
g16
(lp3370
S'k'
asg18
S'N'
sS'.thisRepN'
p3371
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3372
I8
sS'.thisN'
p3373
I415
sS'.thisIndex'
p3374
I10
sg15
(lp3375
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3376
g16
(lp3377
S'd'
asg18
S'Y'
sS'.thisRepN'
p3378
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3379
I9
sS'.thisN'
p3380
I416
sS'.thisIndex'
p3381
I6
sg15
(lp3382
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3383
S'space'
p3384
asg95
I6
sa(dp3385
g16
(lp3386
S'd'
asg18
S'N'
sS'.thisRepN'
p3387
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3388
I10
sS'.thisN'
p3389
I417
sS'.thisIndex'
p3390
I5
sg15
(lp3391
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3392
g16
(lp3393
S'k'
asg18
S'Y'
sS'.thisRepN'
p3394
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3395
I0
sS'.thisN'
p3396
I418
sS'.thisIndex'
p3397
I7
sg15
(lp3398
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3399
S'space'
p3400
asg95
I7
sa(dp3401
g16
(lp3402
S'k'
asg18
S'Y'
sS'.thisRepN'
p3403
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3404
I1
sS'.thisN'
p3405
I419
sS'.thisIndex'
p3406
I2
sg15
(lp3407
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3408
g16
(lp3409
S'k'
asg18
S'N'
sS'.thisRepN'
p3410
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3411
I2
sS'.thisN'
p3412
I420
sS'.thisIndex'
p3413
I7
sg15
(lp3414
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3415
S'space'
p3416
asg95
I7
sa(dp3417
g16
(lp3418
S'd'
asg18
S'N'
sS'.thisRepN'
p3419
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3420
I3
sS'.thisN'
p3421
I421
sS'.thisIndex'
p3422
I2
sg15
(lp3423
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3424
g16
(lp3425
S'k'
asg18
S'N'
sS'.thisRepN'
p3426
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3427
I4
sS'.thisN'
p3428
I422
sS'.thisIndex'
p3429
I3
sg15
(lp3430
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3431
g16
(lp3432
S'd'
asg18
S'N'
sS'.thisRepN'
p3433
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3434
I5
sS'.thisN'
p3435
I423
sS'.thisIndex'
p3436
I3
sg15
(lp3437
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3438
g16
(lp3439
S'd'
asg18
S'N'
sS'.thisRepN'
p3440
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3441
I6
sS'.thisN'
p3442
I424
sS'.thisIndex'
p3443
I4
sg15
(lp3444
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3445
g16
(lp3446
S'd'
asg18
S'Y'
sS'.thisRepN'
p3447
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3448
I7
sS'.thisN'
p3449
I425
sS'.thisIndex'
p3450
I3
sg15
(lp3451
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3452
S'd'
asg95
I3
sa(dp3453
g16
(lp3454
S'k'
asg18
S'Y'
sS'.thisRepN'
p3455
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3456
I8
sS'.thisN'
p3457
I426
sS'.thisIndex'
p3458
I10
sg15
(lp3459
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3460
S'space'
p3461
asg95
I10
sa(dp3462
g16
(lp3463
S'd'
asg18
S'Y'
sS'.thisRepN'
p3464
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3465
I9
sS'.thisN'
p3466
I427
sS'.thisIndex'
p3467
I5
sg15
(lp3468
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3469
S'space'
p3470
asg95
I5
sa(dp3471
g16
(lp3472
S'k'
asg18
S'N'
sS'.thisRepN'
p3473
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3474
I10
sS'.thisN'
p3475
I428
sS'.thisIndex'
p3476
I0
sg15
(lp3477
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3478
g16
(lp3479
S'd'
asg18
S'Y'
sS'.thisRepN'
p3480
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3481
I0
sS'.thisN'
p3482
I429
sS'.thisIndex'
p3483
I6
sg15
(lp3484
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3485
S'space'
p3486
asg95
I6
sa(dp3487
g16
(lp3488
S'k'
asg18
S'N'
sS'.thisRepN'
p3489
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3490
I1
sS'.thisN'
p3491
I430
sS'.thisIndex'
p3492
I1
sg15
(lp3493
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3494
g16
(lp3495
S'k'
asg18
S'N'
sS'.thisRepN'
p3496
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3497
I2
sS'.thisN'
p3498
I431
sS'.thisIndex'
p3499
I9
sg15
(lp3500
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3501
g16
(lp3502
S'k'
asg18
S'Y'
sS'.thisRepN'
p3503
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3504
I3
sS'.thisN'
p3505
I432
sS'.thisIndex'
p3506
I8
sg15
(lp3507
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3508
g16
(lp3509
S'd'
asg18
S'N'
sS'.thisRepN'
p3510
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3511
I4
sS'.thisN'
p3512
I433
sS'.thisIndex'
p3513
I8
sg15
(lp3514
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3515
g16
(lp3516
S'k'
asg18
S'Y'
sS'.thisRepN'
p3517
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3518
I5
sS'.thisN'
p3519
I434
sS'.thisIndex'
p3520
I7
sg15
(lp3521
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3522
S'space'
p3523
asg95
I7
sa(dp3524
g16
(lp3525
S'k'
asg18
S'Y'
sS'.thisRepN'
p3526
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3527
I6
sS'.thisN'
p3528
I435
sS'.thisIndex'
p3529
I5
sg15
(lp3530
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3531
S'space'
p3532
asg95
I5
sa(dp3533
g16
(lp3534
S'd'
asg18
S'Y'
sS'.thisRepN'
p3535
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3536
I7
sS'.thisN'
p3537
I436
sS'.thisIndex'
p3538
I1
sg15
(lp3539
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3540
S'space'
p3541
asg95
I1
sa(dp3542
g16
(lp3543
S'k'
asg18
S'Y'
sS'.thisRepN'
p3544
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3545
I8
sS'.thisN'
p3546
I437
sS'.thisIndex'
p3547
I5
sg15
(lp3548
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3549
S'space'
p3550
asg95
I5
sa(dp3551
g16
(lp3552
S'k'
asg18
S'N'
sS'.thisRepN'
p3553
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3554
I9
sS'.thisN'
p3555
I438
sS'.thisIndex'
p3556
I2
sg15
(lp3557
S'd'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
Nsg95
I2
sa(dp3558
g16
(lp3559
S'd'
asg18
S'N'
sS'.thisRepN'
p3560
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3561
I10
sS'.thisN'
p3562
I439
sS'.thisIndex'
p3563
I8
sg15
(lp3564
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3565
g16
(lp3566
S'k'
asg18
S'N'
sS'.thisRepN'
p3567
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3568
I0
sS'.thisN'
p3569
I440
sS'.thisIndex'
p3570
I4
sg15
(lp3571
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3572
g16
(lp3573
S'd'
asg18
S'N'
sS'.thisRepN'
p3574
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3575
I1
sS'.thisN'
p3576
I441
sS'.thisIndex'
p3577
I5
sg15
(lp3578
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3579
g16
(lp3580
S'k'
asg18
S'Y'
sS'.thisRepN'
p3581
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3582
I2
sS'.thisN'
p3583
I442
sS'.thisIndex'
p3584
I2
sg15
(lp3585
S'd'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
Nsg95
I2
sa(dp3586
g16
(lp3587
S'k'
asg18
S'N'
sS'.thisRepN'
p3588
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3589
I3
sS'.thisN'
p3590
I443
sS'.thisIndex'
p3591
I3
sg15
(lp3592
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3593
g16
(lp3594
S'k'
asg18
S'N'
sS'.thisRepN'
p3595
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3596
I4
sS'.thisN'
p3597
I444
sS'.thisIndex'
p3598
I8
sg15
(lp3599
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3600
g16
(lp3601
S'k'
asg18
S'N'
sS'.thisRepN'
p3602
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3603
I5
sS'.thisN'
p3604
I445
sS'.thisIndex'
p3605
I3
sg15
(lp3606
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3607
S'space'
p3608
asg95
I3
sa(dp3609
g16
(lp3610
S'k'
asg18
S'N'
sS'.thisRepN'
p3611
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3612
I6
sS'.thisN'
p3613
I446
sS'.thisIndex'
p3614
I8
sg15
(lp3615
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3616
S'space'
p3617
asg95
I8
sa(dp3618
g16
(lp3619
S'k'
asg18
S'N'
sS'.thisRepN'
p3620
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3621
I7
sS'.thisN'
p3622
I447
sS'.thisIndex'
p3623
I3
sg15
(lp3624
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3625
g16
(lp3626
S'd'
asg18
S'N'
sS'.thisRepN'
p3627
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3628
I8
sS'.thisN'
p3629
I448
sS'.thisIndex'
p3630
I10
sg15
(lp3631
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3632
g16
(lp3633
S'k'
asg18
S'Y'
sg22
I39
sS'.thisN'
p3634
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3635
I9
sS'.thisRepN'
p3636
I40
sg21
I48
sS'.thisIndex'
p3637
I9
sg23
I24
sg15
(lp3638
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3639
S'space'
p3640
asg95
I9
sa(dp3641
g16
(lp3642
S'k'
asg95
I8
sS'.thisRepN'
p3643
I40
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3644
I10
sS'.thisN'
p3645
I450
sS'.thisIndex'
p3646
I8
sg15
(lp3647
S'k'
asg17
S'Y'
sg14
I10
sa(dp3648
g16
(lp3649
S'k'
asg95
I5
sS'.thisRepN'
p3650
I41
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3651
I0
sS'.thisN'
p3652
I451
sS'.thisIndex'
p3653
I5
sg15
(lp3654
S'd'
asg17
S'N'
sg14
I10
sa(dp3655
g16
(lp3656
S'd'
asg18
S'Y'
sS'.thisRepN'
p3657
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3658
I1
sS'.thisN'
p3659
I452
sS'.thisIndex'
p3660
I4
sg15
(lp3661
S'k'
asg30
Vf
sg17
S'N'
sg14
I10
sg19
(lp3662
S'space'
p3663
asg95
I4
sa(dp3664
g16
(lp3665
S'd'
asg18
S'N'
sS'.thisRepN'
p3666
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3667
I2
sS'.thisN'
p3668
I453
sS'.thisIndex'
p3669
I0
sg15
(lp3670
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3671
g16
(lp3672
S'k'
asg18
S'Y'
sS'.thisRepN'
p3673
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3674
I3
sS'.thisN'
p3675
I454
sS'.thisIndex'
p3676
I1
sg15
(lp3677
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3678
S'space'
p3679
asg95
I1
sa(dp3680
g16
(lp3681
S'k'
asg18
S'N'
sS'.thisRepN'
p3682
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3683
I4
sS'.thisN'
p3684
I455
sS'.thisIndex'
p3685
I3
sg15
(lp3686
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3687
g16
(lp3688
S'd'
asg18
S'N'
sS'.thisRepN'
p3689
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3690
I5
sS'.thisN'
p3691
I456
sS'.thisIndex'
p3692
I2
sg15
(lp3693
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3694
S'space'
p3695
asg95
I2
sa(dp3696
g16
(lp3697
S'k'
asg18
S'Y'
sS'.thisRepN'
p3698
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3699
I6
sS'.thisN'
p3700
I457
sS'.thisIndex'
p3701
I0
sg15
(lp3702
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3703
S'space'
p3704
asg95
I0
sa(dp3705
g16
(lp3706
S'd'
asg18
S'Y'
sS'.thisRepN'
p3707
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3708
I7
sS'.thisN'
p3709
I458
sS'.thisIndex'
p3710
I7
sg15
(lp3711
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3712
S'space'
p3713
asg95
I7
sa(dp3714
g16
(lp3715
S'k'
asg18
S'N'
sS'.thisRepN'
p3716
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3717
I8
sS'.thisN'
p3718
I459
sS'.thisIndex'
p3719
I0
sg15
(lp3720
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3721
g16
(lp3722
S'd'
asg18
S'N'
sS'.thisRepN'
p3723
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3724
I9
sS'.thisN'
p3725
I460
sS'.thisIndex'
p3726
I1
sg15
(lp3727
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3728
g16
(lp3729
S'd'
asg18
S'N'
sS'.thisRepN'
p3730
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3731
I10
sS'.thisN'
p3732
I461
sS'.thisIndex'
p3733
I6
sg15
(lp3734
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3735
g16
(lp3736
S'd'
asg18
S'N'
sS'.thisRepN'
p3737
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3738
I0
sS'.thisN'
p3739
I462
sS'.thisIndex'
p3740
I1
sg15
(lp3741
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3742
g16
(lp3743
S'k'
asg18
S'Y'
sS'.thisRepN'
p3744
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3745
I1
sS'.thisN'
p3746
I463
sS'.thisIndex'
p3747
I4
sg15
(lp3748
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3749
S'space'
p3750
asg95
I4
sa(dp3751
g16
(lp3752
S'k'
asg18
S'N'
sS'.thisRepN'
p3753
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3754
I2
sS'.thisN'
p3755
I464
sS'.thisIndex'
p3756
I9
sg15
(lp3757
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3758
g16
(lp3759
S'k'
asg18
S'N'
sS'.thisRepN'
p3760
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3761
I3
sS'.thisN'
p3762
I465
sS'.thisIndex'
p3763
I3
sg15
(lp3764
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3765
g16
(lp3766
S'd'
asg18
S'Y'
sS'.thisRepN'
p3767
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3768
I4
sS'.thisN'
p3769
I466
sS'.thisIndex'
p3770
I6
sg15
(lp3771
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3772
S'space'
p3773
asg95
I6
sa(dp3774
g16
(lp3775
S'd'
asg18
S'N'
sS'.thisRepN'
p3776
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3777
I5
sS'.thisN'
p3778
I467
sS'.thisIndex'
p3779
I3
sg15
(lp3780
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3781
g16
(lp3782
S'k'
asg18
S'Y'
sS'.thisRepN'
p3783
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3784
I6
sS'.thisN'
p3785
I468
sS'.thisIndex'
p3786
I7
sg15
(lp3787
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3788
S'space'
p3789
asg95
I7
sa(dp3790
g16
(lp3791
S'd'
asg18
S'N'
sS'.thisRepN'
p3792
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3793
I7
sS'.thisN'
p3794
I469
sS'.thisIndex'
p3795
I1
sg15
(lp3796
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3797
g16
(lp3798
S'k'
asg18
S'N'
sS'.thisRepN'
p3799
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3800
I8
sS'.thisN'
p3801
I470
sS'.thisIndex'
p3802
I1
sg15
(lp3803
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3804
S'space'
p3805
asg95
I1
sa(dp3806
g16
(lp3807
S'd'
asg18
S'Y'
sS'.thisRepN'
p3808
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3809
I9
sS'.thisN'
p3810
I471
sS'.thisIndex'
p3811
I9
sg15
(lp3812
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3813
S'space'
p3814
asg95
I9
sa(dp3815
g16
(lp3816
S'k'
asg18
S'Y'
sS'.thisRepN'
p3817
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3818
I10
sS'.thisN'
p3819
I472
sS'.thisIndex'
p3820
I3
sg15
(lp3821
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3822
S'space'
p3823
asg95
I3
sa(dp3824
g16
(lp3825
S'd'
asg18
S'N'
sS'.thisRepN'
p3826
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3827
I0
sS'.thisN'
p3828
I473
sS'.thisIndex'
p3829
I1
sg15
(lp3830
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3831
g16
(lp3832
S'd'
asg18
S'N'
sS'.thisRepN'
p3833
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3834
I1
sS'.thisN'
p3835
I474
sS'.thisIndex'
p3836
I5
sg15
(lp3837
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3838
g16
(lp3839
S'k'
asg18
S'N'
sS'.thisRepN'
p3840
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3841
I2
sS'.thisN'
p3842
I475
sS'.thisIndex'
p3843
I9
sg15
(lp3844
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3845
g16
(lp3846
S'k'
asg18
S'Y'
sS'.thisRepN'
p3847
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3848
I3
sS'.thisN'
p3849
I476
sS'.thisIndex'
p3850
I4
sg15
(lp3851
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3852
S'space'
p3853
asg95
I4
sa(dp3854
g16
(lp3855
S'k'
asg18
S'N'
sS'.thisRepN'
p3856
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3857
I4
sS'.thisN'
p3858
I477
sS'.thisIndex'
p3859
I9
sg15
(lp3860
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3861
g16
(lp3862
S'd'
asg18
S'N'
sS'.thisRepN'
p3863
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3864
I5
sS'.thisN'
p3865
I478
sS'.thisIndex'
p3866
I5
sg15
(lp3867
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3868
S'space'
p3869
asg95
I5
sa(dp3870
g16
(lp3871
S'k'
asg18
S'Y'
sS'.thisRepN'
p3872
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3873
I6
sS'.thisN'
p3874
I479
sS'.thisIndex'
p3875
I0
sg15
(lp3876
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3877
g16
(lp3878
S'd'
asg18
S'Y'
sS'.thisRepN'
p3879
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3880
I7
sS'.thisN'
p3881
I480
sS'.thisIndex'
p3882
I7
sg15
(lp3883
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3884
S'm'
asg95
I7
sa(dp3885
g16
(lp3886
S'd'
asg18
S'Y'
sS'.thisRepN'
p3887
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3888
I8
sS'.thisN'
p3889
I481
sS'.thisIndex'
p3890
I1
sg15
(lp3891
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3892
g16
(lp3893
S'd'
asg18
S'Y'
sS'.thisRepN'
p3894
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3895
I9
sS'.thisN'
p3896
I482
sS'.thisIndex'
p3897
I6
sg15
(lp3898
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3899
S'space'
p3900
asg95
I6
sa(dp3901
g16
(lp3902
S'd'
asg18
S'Y'
sS'.thisRepN'
p3903
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3904
I10
sS'.thisN'
p3905
I483
sS'.thisIndex'
p3906
I0
sg15
(lp3907
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3908
S'space'
p3909
asg95
I0
sa(dp3910
g16
(lp3911
S'd'
asg18
S'Y'
sS'.thisRepN'
p3912
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3913
I0
sS'.thisN'
p3914
I484
sS'.thisIndex'
p3915
I6
sg15
(lp3916
S'k'
asg30
Vf
sg17
S'N'
sg14
I10
sg19
(lp3917
S'space'
p3918
asg95
I6
sa(dp3919
g16
(lp3920
S'k'
asg18
S'N'
sS'.thisRepN'
p3921
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3922
I1
sS'.thisN'
p3923
I485
sS'.thisIndex'
p3924
I0
sg15
(lp3925
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3926
g16
(lp3927
S'd'
asg18
S'N'
sS'.thisRepN'
p3928
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3929
I2
sS'.thisN'
p3930
I486
sS'.thisIndex'
p3931
I1
sg15
(lp3932
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3933
g16
(lp3934
S'd'
asg18
S'N'
sS'.thisRepN'
p3935
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3936
I3
sS'.thisN'
p3937
I487
sS'.thisIndex'
p3938
I8
sg15
(lp3939
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3940
g16
(lp3941
S'd'
asg18
S'N'
sS'.thisRepN'
p3942
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3943
I4
sS'.thisN'
p3944
I488
sS'.thisIndex'
p3945
I0
sg15
(lp3946
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3947
g16
(lp3948
S'k'
asg18
S'N'
sS'.thisRepN'
p3949
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3950
I5
sS'.thisN'
p3951
I489
sS'.thisIndex'
p3952
I8
sg15
(lp3953
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3954
g16
(lp3955
S'k'
asg18
S'Y'
sS'.thisRepN'
p3956
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3957
I6
sS'.thisN'
p3958
I490
sS'.thisIndex'
p3959
I5
sg15
(lp3960
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3961
S'space'
p3962
asg95
I5
sa(dp3963
g16
(lp3964
S'd'
asg18
S'N'
sS'.thisRepN'
p3965
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3966
I7
sS'.thisN'
p3967
I491
sS'.thisIndex'
p3968
I6
sg15
(lp3969
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3970
g16
(lp3971
S'k'
asg18
S'Y'
sS'.thisRepN'
p3972
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3973
I8
sS'.thisN'
p3974
I492
sS'.thisIndex'
p3975
I2
sg15
(lp3976
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3977
g16
(lp3978
S'd'
asg18
S'N'
sS'.thisRepN'
p3979
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3980
I9
sS'.thisN'
p3981
I493
sS'.thisIndex'
p3982
I8
sg15
(lp3983
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3984
g16
(lp3985
S'k'
asg18
S'N'
sS'.thisRepN'
p3986
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3987
I10
sS'.thisN'
p3988
I494
sS'.thisIndex'
p3989
I7
sg15
(lp3990
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3991
g16
(lp3992
S'k'
asg18
S'N'
sS'.thisRepN'
p3993
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3994
I0
sS'.thisN'
p3995
I495
sS'.thisIndex'
p3996
I9
sg15
(lp3997
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3998
g16
(lp3999
S'd'
asg18
S'N'
sS'.thisRepN'
p4000
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4001
I1
sS'.thisN'
p4002
I496
sS'.thisIndex'
p4003
I8
sg15
(lp4004
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp4005
g16
(lp4006
S'k'
asg18
S'N'
sS'.thisRepN'
p4007
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4008
I2
sS'.thisN'
p4009
I497
sS'.thisIndex'
p4010
I6
sg15
(lp4011
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp4012
g16
(lp4013
S'k'
asg18
S'N'
sS'.thisRepN'
p4014
I45
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4015
I3
sS'.thisN'
p4016
I498
sS'.thisIndex'
p4017
I9
sg15
(lp4018
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp4019
S'space'
p4020
asg95
I9
sa(dp4021
g16
(lp4022
S'd'
asg18
S'N'
sg22
I39
sS'.thisN'
p4023
I499
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4024
I4
sS'.thisRepN'
p4025
I45
sg21
I47
sS'.thisIndex'
p4026
I7
sg23
I18
sg15
(lp4027
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp4028
S'space'
p4029
asg95
I7
sa(dp4030
g16
(lp4031
S'k'
asS'.thisIndex'
p4032
I2
sS'.thisRepN'
p4033
I45
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4034
I5
sS'.thisN'
p4035
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4036
S'd'
asg17
S'Y'
sg14
I11
sg95
I2
sa(dp4037
g16
(lp4038
S'k'
asS'.thisIndex'
p4039
I1
sS'.thisRepN'
p4040
I45
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4041
I6
sS'.thisN'
p4042
I501
sg25
S'Y'
sg15
(lp4043
S'd'
asg17
S'Y'
sg14
I11
sg95
I1
sa(dp4044
g16
(lp4045
S'k'
asg18
S'Y'
sS'.thisRepN'
p4046
I45
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4047
I7
sS'.thisN'
p4048
I502
sg25
S'Y'
sg15
(lp4049
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4050
I10
sa(dp4051
g16
(lp4052
S'k'
asg18
S'N'
sS'.thisRepN'
p4053
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4054
I8
sS'.thisN'
p4055
I503
sg25
S'Y'
sg15
(lp4056
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4057
I0
sa(dp4058
g16
(lp4059
S'k'
asg18
S'Y'
sS'.thisRepN'
p4060
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4061
I9
sS'.thisN'
p4062
I504
sg25
S'Y'
sg15
(lp4063
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4064
S'space'
p4065
asg95
I1
sS'.thisIndex'
p4066
I1
sa(dp4067
g16
(lp4068
S'd'
asg18
S'Y'
sS'.thisRepN'
p4069
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4070
I10
sS'.thisN'
p4071
I505
sg25
S'Y'
sg15
(lp4072
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4073
S'space'
p4074
asg95
I0
sS'.thisIndex'
p4075
I0
sa(dp4076
g16
(lp4077
S'k'
asg18
S'Y'
sS'.thisRepN'
p4078
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4079
I0
sS'.thisN'
p4080
I506
sg25
S'Y'
sg15
(lp4081
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4082
S'space'
p4083
asg95
I7
sS'.thisIndex'
p4084
I7
sa(dp4085
g16
(lp4086
S'd'
asg18
S'Y'
sS'.thisRepN'
p4087
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4088
I1
sS'.thisN'
p4089
I507
sg25
S'Y'
sg15
(lp4090
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4091
S'space'
p4092
asg95
I0
sS'.thisIndex'
p4093
I0
sa(dp4094
g16
(lp4095
S'd'
asg18
S'N'
sS'.thisRepN'
p4096
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4097
I2
sS'.thisN'
p4098
I508
sg25
S'Y'
sg15
(lp4099
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4100
I4
sa(dp4101
g16
(lp4102
S'k'
asg18
S'N'
sS'.thisRepN'
p4103
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4104
I3
sS'.thisN'
p4105
I509
sg25
S'Y'
sg15
(lp4106
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4107
I10
sa(dp4108
g16
(lp4109
S'k'
asg18
S'N'
sS'.thisRepN'
p4110
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4111
I4
sS'.thisN'
p4112
I510
sg25
S'Y'
sg15
(lp4113
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4114
I5
sa(dp4115
g16
(lp4116
S'k'
asg18
S'N'
sS'.thisRepN'
p4117
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4118
I5
sS'.thisN'
p4119
I511
sg25
S'Y'
sg15
(lp4120
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4121
S'space'
p4122
asg95
I0
sS'.thisIndex'
p4123
I0
sa(dp4124
g16
(lp4125
S'd'
asg18
S'N'
sS'.thisRepN'
p4126
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4127
I6
sS'.thisN'
p4128
I512
sg25
S'Y'
sg15
(lp4129
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4130
I4
sa(dp4131
g16
(lp4132
S'd'
asg18
S'Y'
sS'.thisRepN'
p4133
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4134
I7
sS'.thisN'
p4135
I513
sg25
S'Y'
sg15
(lp4136
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4137
S'space'
p4138
asg95
I8
sS'.thisIndex'
p4139
I8
sa(dp4140
g16
(lp4141
S'k'
asg18
S'Y'
sS'.thisRepN'
p4142
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4143
I8
sS'.thisN'
p4144
I514
sg25
S'Y'
sg15
(lp4145
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4146
S'space'
p4147
asg95
I0
sS'.thisIndex'
p4148
I0
sa(dp4149
g16
(lp4150
S'k'
asg18
S'N'
sS'.thisRepN'
p4151
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4152
I9
sS'.thisN'
p4153
I515
sg25
S'Y'
sg15
(lp4154
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4155
I0
sa(dp4156
g16
(lp4157
S'k'
asg18
S'Y'
sS'.thisRepN'
p4158
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4159
I10
sS'.thisN'
p4160
I516
sg25
S'Y'
sg15
(lp4161
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4162
I9
sa(dp4163
g16
(lp4164
S'k'
asg18
S'Y'
sS'.thisRepN'
p4165
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4166
I0
sS'.thisN'
p4167
I517
sg25
S'Y'
sg15
(lp4168
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4169
I9
sa(dp4170
g16
(lp4171
S'k'
asg18
S'Y'
sS'.thisRepN'
p4172
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4173
I1
sS'.thisN'
p4174
I518
sg25
S'Y'
sg15
(lp4175
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4176
S'space'
p4177
asg95
I4
sS'.thisIndex'
p4178
I4
sa(dp4179
g16
(lp4180
S'd'
asg18
S'Y'
sS'.thisRepN'
p4181
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4182
I2
sS'.thisN'
p4183
I519
sg25
S'Y'
sg15
(lp4184
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4185
S'space'
p4186
asg95
I10
sS'.thisIndex'
p4187
I10
sa(dp4188
g16
(lp4189
S'k'
asg18
S'N'
sS'.thisRepN'
p4190
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4191
I3
sS'.thisN'
p4192
I520
sg25
S'Y'
sg15
(lp4193
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4194
I5
sa(dp4195
g16
(lp4196
S'k'
asg18
S'N'
sS'.thisRepN'
p4197
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4198
I4
sS'.thisN'
p4199
I521
sg25
S'Y'
sg15
(lp4200
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4201
I5
sa(dp4202
g16
(lp4203
S'd'
asg18
S'Y'
sS'.thisRepN'
p4204
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4205
I5
sS'.thisN'
p4206
I522
sg25
S'Y'
sg15
(lp4207
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4208
S'space'
p4209
asg95
I3
sS'.thisIndex'
p4210
I3
sa(dp4211
g16
(lp4212
S'd'
asg18
S'N'
sS'.thisRepN'
p4213
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4214
I6
sS'.thisN'
p4215
I523
sg25
S'Y'
sg15
(lp4216
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4217
I5
sa(dp4218
g16
(lp4219
S'k'
asg18
S'N'
sS'.thisRepN'
p4220
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4221
I7
sS'.thisN'
p4222
I524
sg25
S'Y'
sg15
(lp4223
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4224
I1
sa(dp4225
g16
(lp4226
S'k'
asg18
S'N'
sS'.thisRepN'
p4227
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4228
I8
sS'.thisN'
p4229
I525
sg25
S'Y'
sg15
(lp4230
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4231
I3
sa(dp4232
g16
(lp4233
S'k'
asg18
S'Y'
sS'.thisRepN'
p4234
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4235
I9
sS'.thisN'
p4236
I526
sg25
S'Y'
sg15
(lp4237
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4238
S'space'
p4239
asg95
I9
sS'.thisIndex'
p4240
I9
sa(dp4241
g16
(lp4242
S'k'
asg18
S'N'
sS'.thisRepN'
p4243
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4244
I10
sS'.thisN'
p4245
I527
sg25
S'Y'
sg15
(lp4246
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4247
I4
sa(dp4248
g16
(lp4249
S'd'
asg18
S'Y'
sS'.thisRepN'
p4250
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4251
I0
sS'.thisN'
p4252
I528
sg25
S'Y'
sg15
(lp4253
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4254
S'space'
p4255
asg95
I5
sS'.thisIndex'
p4256
I5
sa(dp4257
g16
(lp4258
S'd'
asg18
S'Y'
sS'.thisRepN'
p4259
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4260
I1
sS'.thisN'
p4261
I529
sg25
S'Y'
sg15
(lp4262
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4263
I8
sa(dp4264
g16
(lp4265
S'k'
asg18
S'Y'
sS'.thisRepN'
p4266
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4267
I2
sS'.thisN'
p4268
I530
sg25
S'Y'
sg15
(lp4269
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4270
S'space'
p4271
asg95
I9
sS'.thisIndex'
p4272
I9
sa(dp4273
g16
(lp4274
S'k'
asg18
S'Y'
sS'.thisRepN'
p4275
I48
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4276
I3
sS'.thisN'
p4277
I531
sg25
S'Y'
sg15
(lp4278
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4279
I4
sa(dp4280
g16
(lp4281
S'd'
asg18
S'N'
sS'.thisRepN'
p4282
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4283
I4
sS'.thisN'
p4284
I532
sg25
S'Y'
sg15
(lp4285
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4286
I5
sa(dp4287
g16
(lp4288
S'k'
asg18
S'Y'
sS'.thisRepN'
p4289
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4290
I5
sS'.thisN'
p4291
I533
sg25
S'Y'
sg15
(lp4292
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4293
S'space'
p4294
asg95
I7
sS'.thisIndex'
p4295
I7
sa(dp4296
g16
(lp4297
S'k'
asg18
S'Y'
sS'.thisRepN'
p4298
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4299
I6
sS'.thisN'
p4300
I534
sg25
S'Y'
sg15
(lp4301
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4302
S'space'
p4303
asg95
I8
sS'.thisIndex'
p4304
I8
sa(dp4305
g16
(lp4306
S'd'
asg18
S'Y'
sS'.thisRepN'
p4307
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4308
I7
sS'.thisN'
p4309
I535
sg25
S'Y'
sg15
(lp4310
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4311
S'space'
p4312
asg95
I4
sS'.thisIndex'
p4313
I4
sa(dp4314
g16
(lp4315
S'd'
asg18
S'Y'
sS'.thisRepN'
p4316
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4317
I8
sS'.thisN'
p4318
I536
sg25
S'Y'
sg15
(lp4319
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4320
S'space'
p4321
asg95
I5
sS'.thisIndex'
p4322
I5
sa(dp4323
g16
(lp4324
S'k'
asg18
S'N'
sS'.thisRepN'
p4325
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4326
I9
sS'.thisN'
p4327
I537
sg25
S'Y'
sg15
(lp4328
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4329
I0
sa(dp4330
g16
(lp4331
S'k'
asg18
S'N'
sS'.thisRepN'
p4332
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4333
I10
sS'.thisN'
p4334
I538
sg25
S'Y'
sg15
(lp4335
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4336
I9
sa(dp4337
g16
(lp4338
S'd'
asg18
S'N'
sS'.thisRepN'
p4339
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4340
I0
sS'.thisN'
p4341
I539
sg25
S'Y'
sg15
(lp4342
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4343
I7
sa(dp4344
g16
(lp4345
S'd'
asg18
S'N'
sS'.thisRepN'
p4346
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4347
I1
sS'.thisN'
p4348
I540
sg25
S'Y'
sg15
(lp4349
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4350
I6
sa(dp4351
g16
(lp4352
S'k'
asg18
S'Y'
sS'.thisRepN'
p4353
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4354
I2
sS'.thisN'
p4355
I541
sg25
S'Y'
sg15
(lp4356
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4357
S'space'
p4358
asg95
I7
sS'.thisIndex'
p4359
I7
sa(dp4360
g16
(lp4361
S'k'
asg18
S'Y'
sS'.thisRepN'
p4362
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4363
I3
sS'.thisN'
p4364
I542
sg25
S'Y'
sg15
(lp4365
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4366
S'space'
p4367
asg95
I1
sS'.thisIndex'
p4368
I1
sa(dp4369
g16
(lp4370
S'k'
asg18
S'Y'
sS'.thisRepN'
p4371
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4372
I4
sS'.thisN'
p4373
I543
sg25
S'Y'
sg15
(lp4374
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4375
S'space'
p4376
asg95
I3
sS'.thisIndex'
p4377
I3
sa(dp4378
g16
(lp4379
S'd'
asg18
S'N'
sS'.thisRepN'
p4380
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4381
I5
sS'.thisN'
p4382
I544
sg25
S'Y'
sg15
(lp4383
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4384
I9
sa(dp4385
g16
(lp4386
S'd'
asg18
S'N'
sS'.thisRepN'
p4387
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4388
I6
sS'.thisN'
p4389
I545
sg25
S'Y'
sg15
(lp4390
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4391
I10
sa(dp4392
g16
(lp4393
S'k'
asg18
S'N'
sS'.thisRepN'
p4394
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4395
I7
sS'.thisN'
p4396
I546
sg25
S'Y'
sg15
(lp4397
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4398
I10
sa(dp4399
g16
(lp4400
S'k'
asg18
S'N'
sS'.thisRepN'
p4401
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4402
I8
sS'.thisN'
p4403
I547
sg25
S'Y'
sg15
(lp4404
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4405
I8
sa(dp4406
g16
(lp4407
S'k'
asg18
S'N'
sS'.thisRepN'
p4408
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4409
I9
sS'.thisN'
p4410
I548
sg25
S'Y'
sg15
(lp4411
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4412
I3
sa(dp4413
g16
(lp4414
S'k'
asg18
S'N'
sg22
I42
sg26
S'Y'
sS'.thisN'
p4415
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4416
I10
sS'.thisRepN'
p4417
I49
sg21
I49
sg25
S'Y'
sg23
I24
sg15
(lp4418
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4419
I7
sa(dp4420
g16
(lp4421
S'k'
asS'.thisIndex'
p4422
I9
sS'.thisRepN'
p4423
I50
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4424
I0
sS'.thisN'
p4425
I550
sg25
S'Y'
sg15
(lp4426
S'd'
asg17
S'Y'
sg14
I12
sg95
I9
sa(dp4427
g16
(lp4428
S'd'
asS'.thisIndex'
p4429
I5
sS'.thisRepN'
p4430
I50
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4431
I1
sS'.thisN'
p4432
I551
sg25
S'Y'
sg15
(lp4433
S'k'
asg17
S'Y'
sg14
I12
sg95
I5
sa(dp4434
g16
(lp4435
S'k'
asg18
S'Y'
sS'.thisRepN'
p4436
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4437
I2
sS'.thisN'
p4438
I552
sg25
S'Y'
sg15
(lp4439
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4440
S'space'
p4441
asg95
I0
sS'.thisIndex'
p4442
I0
sa(dp4443
g16
(lp4444
S'k'
asg18
S'Y'
sS'.thisRepN'
p4445
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4446
I3
sS'.thisN'
p4447
I553
sg25
S'Y'
sg15
(lp4448
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4449
S'space'
p4450
asg95
I3
sS'.thisIndex'
p4451
I3
sa(dp4452
g16
(lp4453
S'k'
asg18
S'Y'
sS'.thisRepN'
p4454
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4455
I4
sS'.thisN'
p4456
I554
sg25
S'Y'
sg15
(lp4457
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4458
S'space'
p4459
asg95
I8
sS'.thisIndex'
p4460
I8
sa(dp4461
g16
(lp4462
S'k'
asg18
S'N'
sS'.thisRepN'
p4463
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4464
I5
sS'.thisN'
p4465
I555
sg25
S'Y'
sg15
(lp4466
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4467
I2
sa(dp4468
g16
(lp4469
S'k'
asg18
S'Y'
sS'.thisRepN'
p4470
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4471
I6
sS'.thisN'
p4472
I556
sg25
S'Y'
sg15
(lp4473
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4474
S'space'
p4475
asg95
I1
sS'.thisIndex'
p4476
I1
sa(dp4477
g16
(lp4478
S'k'
asg18
S'Y'
sS'.thisRepN'
p4479
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4480
I7
sS'.thisN'
p4481
I557
sg25
S'Y'
sg15
(lp4482
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4483
S'space'
p4484
asg95
I8
sS'.thisIndex'
p4485
I8
sa(dp4486
g16
(lp4487
S'd'
asg18
S'Y'
sS'.thisRepN'
p4488
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4489
I8
sS'.thisN'
p4490
I558
sg25
S'Y'
sg15
(lp4491
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4492
S'space'
p4493
asg95
I0
sS'.thisIndex'
p4494
I0
sa(dp4495
g16
(lp4496
S'd'
asg18
S'Y'
sS'.thisRepN'
p4497
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4498
I9
sS'.thisN'
p4499
I559
sg25
S'Y'
sg15
(lp4500
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4501
I1
sa(dp4502
g16
(lp4503
S'd'
asg18
S'Y'
sS'.thisRepN'
p4504
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4505
I10
sS'.thisN'
p4506
I560
sg25
S'Y'
sg15
(lp4507
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4508
S'space'
p4509
asg95
I10
sS'.thisIndex'
p4510
I10
sa(dp4511
g16
(lp4512
S'd'
asg18
S'Y'
sS'.thisRepN'
p4513
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4514
I0
sS'.thisN'
p4515
I561
sg25
S'Y'
sg15
(lp4516
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4517
S'space'
p4518
asg95
I10
sS'.thisIndex'
p4519
I10
sa(dp4520
g16
(lp4521
S'd'
asg18
S'Y'
sS'.thisRepN'
p4522
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4523
I1
sS'.thisN'
p4524
I562
sg25
S'Y'
sg15
(lp4525
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4526
S'space'
p4527
asg95
I10
sS'.thisIndex'
p4528
I10
sa(dp4529
g16
(lp4530
S'k'
asg18
S'Y'
sS'.thisRepN'
p4531
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4532
I2
sS'.thisN'
p4533
I563
sg25
S'Y'
sg15
(lp4534
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4535
S'space'
p4536
asg95
I4
sS'.thisIndex'
p4537
I4
sa(dp4538
g16
(lp4539
S'k'
asg18
S'N'
sS'.thisRepN'
p4540
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4541
I3
sS'.thisN'
p4542
I564
sg25
S'Y'
sg15
(lp4543
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4544
I7
sa(dp4545
g16
(lp4546
S'k'
asg18
S'Y'
sS'.thisRepN'
p4547
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4548
I4
sS'.thisN'
p4549
I565
sg25
S'Y'
sg15
(lp4550
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4551
S'space'
p4552
asg95
I7
sS'.thisIndex'
p4553
I7
sa(dp4554
g16
(lp4555
S'd'
asg18
S'N'
sS'.thisRepN'
p4556
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4557
I5
sS'.thisN'
p4558
I566
sg25
S'Y'
sg15
(lp4559
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4560
I4
sa(dp4561
g16
(lp4562
S'd'
asg18
S'N'
sS'.thisRepN'
p4563
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4564
I6
sS'.thisN'
p4565
I567
sg25
S'Y'
sg15
(lp4566
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4567
I1
sa(dp4568
g16
(lp4569
S'd'
asg18
S'Y'
sS'.thisRepN'
p4570
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4571
I7
sS'.thisN'
p4572
I568
sg25
S'Y'
sg15
(lp4573
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4574
S'space'
p4575
asg95
I3
sS'.thisIndex'
p4576
I3
sa(dp4577
g16
(lp4578
S'k'
asg18
S'Y'
sS'.thisRepN'
p4579
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4580
I8
sS'.thisN'
p4581
I569
sg25
S'Y'
sg15
(lp4582
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4583
S'space'
p4584
asg95
I2
sS'.thisIndex'
p4585
I2
sa(dp4586
g16
(lp4587
S'k'
asg18
S'N'
sS'.thisRepN'
p4588
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4589
I9
sS'.thisN'
p4590
I570
sg25
S'Y'
sg15
(lp4591
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4592
I1
sa(dp4593
g16
(lp4594
S'd'
asg18
S'N'
sS'.thisRepN'
p4595
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4596
I10
sS'.thisN'
p4597
I571
sg25
S'Y'
sg15
(lp4598
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4599
I8
sa(dp4600
g16
(lp4601
S'k'
asg18
S'Y'
sS'.thisRepN'
p4602
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4603
I0
sS'.thisN'
p4604
I572
sg25
S'Y'
sg15
(lp4605
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4606
S'space'
p4607
asg95
I2
sS'.thisIndex'
p4608
I2
sa(dp4609
g16
(lp4610
S'k'
asg18
S'Y'
sS'.thisRepN'
p4611
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4612
I1
sS'.thisN'
p4613
I573
sg25
S'Y'
sg15
(lp4614
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4615
S'space'
p4616
asg95
I2
sS'.thisIndex'
p4617
I2
sa(dp4618
g16
(lp4619
S'k'
asg18
S'Y'
sS'.thisRepN'
p4620
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4621
I2
sS'.thisN'
p4622
I574
sg25
S'Y'
sg15
(lp4623
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4624
S'space'
p4625
asg95
I9
sS'.thisIndex'
p4626
I9
sa(dp4627
g16
(lp4628
S'k'
asg18
S'Y'
sS'.thisRepN'
p4629
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4630
I3
sS'.thisN'
p4631
I575
sg25
S'Y'
sg15
(lp4632
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4633
S'space'
p4634
asg95
I7
sS'.thisIndex'
p4635
I7
sa(dp4636
g16
(lp4637
S'd'
asg18
S'Y'
sS'.thisRepN'
p4638
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4639
I4
sS'.thisN'
p4640
I576
sg25
S'Y'
sg15
(lp4641
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4642
S'space'
p4643
asg95
I5
sS'.thisIndex'
p4644
I5
sa(dp4645
g16
(lp4646
S'd'
asg18
S'Y'
sS'.thisRepN'
p4647
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4648
I5
sS'.thisN'
p4649
I577
sg25
S'Y'
sg15
(lp4650
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4651
S'space'
p4652
asg95
I5
sS'.thisIndex'
p4653
I5
sa(dp4654
g16
(lp4655
S'k'
asg18
S'Y'
sS'.thisRepN'
p4656
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4657
I6
sS'.thisN'
p4658
I578
sg25
S'Y'
sg15
(lp4659
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4660
S'space'
p4661
asg95
I1
sS'.thisIndex'
p4662
I1
sa(dp4663
g16
(lp4664
S'k'
asg18
S'Y'
sS'.thisRepN'
p4665
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4666
I7
sS'.thisN'
p4667
I579
sg25
S'Y'
sg15
(lp4668
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4669
S'space'
p4670
asg95
I2
sS'.thisIndex'
p4671
I2
sa(dp4672
g16
(lp4673
S'k'
asg18
S'Y'
sS'.thisRepN'
p4674
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4675
I8
sS'.thisN'
p4676
I580
sg25
S'Y'
sg15
(lp4677
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4678
S'space'
p4679
asg95
I1
sS'.thisIndex'
p4680
I1
sa(dp4681
g16
(lp4682
S'd'
asg18
S'Y'
sS'.thisRepN'
p4683
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4684
I9
sS'.thisN'
p4685
I581
sg25
S'Y'
sg15
(lp4686
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4687
S'space'
p4688
asg95
I10
sS'.thisIndex'
p4689
I10
sa(dp4690
g16
(lp4691
S'k'
asg18
S'Y'
sS'.thisRepN'
p4692
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4693
I10
sS'.thisN'
p4694
I582
sg25
S'Y'
sg15
(lp4695
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4696
S'space'
p4697
asg95
I6
sS'.thisIndex'
p4698
I6
sa(dp4699
g18
S'N'
sS'.thisRepN'
p4700
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4701
I0
sS'.thisN'
p4702
I583
sg25
S'Y'
sg15
Nsg30
Vf
sg17
S'Timed out'
p4703
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4704
I0
sa(dp4705
g16
(lp4706
S'd'
asg18
S'N'
sS'.thisRepN'
p4707
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4708
I1
sS'.thisN'
p4709
I584
sg25
S'Y'
sg15
(lp4710
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4711
I3
sa(dp4712
g16
(lp4713
S'k'
asg18
S'N'
sS'.thisRepN'
p4714
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4715
I2
sS'.thisN'
p4716
I585
sg25
S'Y'
sg15
(lp4717
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4718
I0
sa(dp4719
g16
(lp4720
S'k'
asg18
S'N'
sS'.thisRepN'
p4721
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4722
I3
sS'.thisN'
p4723
I586
sg25
S'Y'
sg15
(lp4724
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4725
I8
sa(dp4726
g16
(lp4727
S'k'
asg18
S'N'
sS'.thisRepN'
p4728
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4729
I4
sS'.thisN'
p4730
I587
sg25
S'Y'
sg15
(lp4731
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4732
I7
sa(dp4733
g16
(lp4734
S'k'
asg18
S'N'
sS'.thisRepN'
p4735
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4736
I5
sS'.thisN'
p4737
I588
sg25
S'Y'
sg15
(lp4738
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4739
I7
sa(dp4740
g16
(lp4741
S'd'
asg18
S'N'
sS'.thisRepN'
p4742
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4743
I6
sS'.thisN'
p4744
I589
sg25
S'Y'
sg15
(lp4745
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4746
I2
sa(dp4747
g16
(lp4748
S'd'
asg18
S'N'
sS'.thisRepN'
p4749
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4750
I7
sS'.thisN'
p4751
I590
sg25
S'Y'
sg15
(lp4752
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4753
I6
sa(dp4754
g16
(lp4755
S'k'
asg18
S'N'
sS'.thisRepN'
p4756
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4757
I8
sS'.thisN'
p4758
I591
sg25
S'Y'
sg15
(lp4759
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4760
I9
sa(dp4761
g16
(lp4762
S'd'
asg18
S'N'
sS'.thisRepN'
p4763
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4764
I9
sS'.thisN'
p4765
I592
sg25
S'Y'
sg15
(lp4766
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4767
I4
sa(dp4768
g16
(lp4769
S'd'
asg18
S'N'
sS'.thisRepN'
p4770
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4771
I10
sS'.thisN'
p4772
I593
sg25
S'Y'
sg15
(lp4773
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4774
I0
sa(dp4775
g16
(lp4776
S'k'
asg18
S'N'
sS'.thisRepN'
p4777
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4778
I0
sS'.thisN'
p4779
I594
sg25
S'Y'
sg15
(lp4780
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4781
I0
sa(dp4782
g16
(lp4783
S'd'
asg18
S'N'
sS'.thisRepN'
p4784
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4785
I1
sS'.thisN'
p4786
I595
sg25
S'Y'
sg15
(lp4787
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4788
I5
sa(dp4789
g16
(lp4790
S'k'
asg18
S'N'
sS'.thisRepN'
p4791
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4792
I2
sS'.thisN'
p4793
I596
sg25
S'Y'
sg15
(lp4794
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4795
I8
sa(dp4796
g16
(lp4797
S'k'
asg18
S'N'
sS'.thisRepN'
p4798
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4799
I3
sS'.thisN'
p4800
I597
sg25
S'Y'
sg15
(lp4801
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4802
I10
sa(dp4803
g16
(lp4804
S'd'
asg18
S'N'
sS'.thisRepN'
p4805
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4806
I4
sS'.thisN'
p4807
I598
sg25
S'Y'
sg15
(lp4808
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4809
I3
sa(dp4810
g16
(lp4811
S'd'
asg18
S'N'
sg22
I47
sg26
S'Y'
sS'.thisN'
p4812
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4813
I5
sS'.thisRepN'
p4814
I54
sg21
I46
sg25
S'Y'
sg23
I25
sg15
(lp4815
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4816
I4
sasS'loops'
p4817
(lp4818
g1
(g35
g3
NtRp4819
(dp4820
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4821
sg40
(lp4822
sg41
I74656080
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4823
g48
g49
(g50
g51
g52
S'b'
tRp4824
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4825
(I1
(I600
I1
tg55
I00
S'\x00\x00\x10D\x00\x00\xfaB\x00\x00\x00C\x00\x00\xcaC\x00\x00 A\x00\xc0\x06D\x00\x00\x98A\x00\x80\xadC\x00\x00\x99C\x00\x00\xe2C\x00\x00\x1fC\x00\x00zC\x00\x00bC\x00\x00\x80A\x00\x00MC\x00\x80\xabC\x00\x80\x80C\x00\x00\rC\x00\x80\x8cC\x00\xc0\x02D\x00\x80\x97C\x00\x00+C\x00\x80\xc2C\x00\x80\x9bC\x00\x00\x07D\x00\x80\xf9C\x00\x00\x03C\x00\x00\xd4B\x00\x004B\x00\x00kC\x00\x00`A\x00\x00OC\x00\x00YC\x00\x80\xdbC\x00\x00KC\x00\xc0\x0eD\x00\x80\xf0C\x00\x00\xe7C\x00\x00\xafC\x00\x80\x85C\x00\x80\x9eC\x00\x80\xe9C\x00\x00\xaeC\x00\x00\x16C\x00\x00\x9eC\x00\x00\x06D\x00\x00\x8bC\x00@\x08D\x00\x80\x9cC\x00\xc0\x0bD\x00\x80\xafC\x00\x00TB\x00\x80\xa3C\x00\x00\xa2C\x00\x80\xd3C\x00\x00\xfeC\x00\x00\\B\x00\x00\tC\x00\x00\xf8B\x00\x00hB\x00\x00\xa5C\x00\x00\xbeC\x00\x00(C\x00\x00`C\x00\xc0\x11D\x00\x00\xc8B\x00\x00\x04D\x00\x00\xacC\x00\x00\x1eC\x00\x80\xf6C\x00\x00\xa8A\x00\x00FC\x00@\x11D\x00\x00\xedC\x00\x00\xe5C\x00\x00jC\x00@\x13D\x00\x00\xe0A\x00\xc0\x05D\x00\x00WC\x00\x80\x8fC\x00\x00\xf8A\x00\x00\xb0A\x00\x005C\x00\x00\xbeB\x00\x00\xf6B\x00\x80\x96C\x00\x00PC\x00\x00\xb5C\x00\x00/C\x00\x80\xc4C\x00\x00\xdaB\x00\x00\x8cB\x00\x00\x8fC\x00\x00\x9eB\x00\x00TC\x00@\x04D\x00\x00\xa8B\x00\xc0\rD\x00\x00.C\x00\x00\x19C\x00\x00\x82B\x00\x80\xa0C\x00\x00!C\x00\x80\xacC\x00\x00 C\x00\x00\x15C\x00\x00\xf1C\x00\x00\x00@\x00\x80\xb2C\x00\x00\xa6C\x00\x00,B\x00\x80\xc9C\x00\x00\x9cC\x00\x00\xe6C\x00\x00eC\x00\x80\xfdC\x00\x00\xa0B\x00\x80\x9fC\x00\x00\xcdC\x00\x80\x86C\x00\x00\xceC\x00\x00\xc8C\x00\x00\xf0C\x00\x00\xa0@\x00\x80\x91C\x00\x00IC\x00\x00PB\x00\x00\x9fC\x00\x80\xe2C\x00\x00$B\x00\x00\xbdC\x00\x00,C\x00\x00\xc4C\x00\x80\xb5C\x00\x00\xc8A\x00\x00\x83C\x00\x00\x14C\x00\xc0\x01D\x00\x00-C\x00\x80\xf5C\x00\x00\xe4C\x00\x001C\x00\x80\xecC\x00\x00\xd0B\x00\x80\xf3C\x00\x80\xc0C\x00\x80\xc7C\x00\x00\x88C\x00\x00XC\x00\x00\xabC\x00\x00gC\x00\x00\x84C\x00\x00\xbcB\x00\x00\x90C\x00@\x0cD\x00\x00\xe0C\x00\xc0\x14D\x00\x00\x0bC\x00\x00\xe9C\x00\x80\xcdC\x00\x00\x0cB\x00\x00\xdaC\x00\x00RC\x00\x00\xa3C\x00\x80\xeaC\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xdcB\x00\x00\xb0B\x00\x00\xf3C\x00\x80\x90C\x00\x00\x97C\x00\x00|B\x00\x00\xd6B\x00\x00\xc2C\x00\x80\x13D\x00\x00\x0cC\x00\x00<B\x00\x00=C\x00\x80\x02D\x00\x00]C\x00\x00\x10B\x00\x80\xd6C\x00\x00\x1cB\x00\x80\xceC\x00\x00\xd0C\x00\x80\x83C\x00\x00dB\x00\x80\xb3C\x00\x00\xa0C\x00\x00\xaeB\x00\x80\xfcC\x00\x00lB\x00\x00\xc0C\x00\x00\xc1C\x00\x00rC\x00\x80\x95C\x00\x00\x0cD\x00\x00\x14D\x00\x80\xd4C\x00@\x00D\x00\x00sC\x00\x00\xa9C\x00\x80\xb9C\x00\x80\xbeC\x00\x80\xe6C\x00\x007C\x00\x00\xc3C\x00\x00JC\x00\x00\xeeB\x00\x00qC\x00\x00\xf0A\x00\x00nC\x00\x00\x9cB\x00\x00\x9dC\x00\x00\xefC\x00\x00\xe4B\x00\x00\xc6B\x00\x00"C\x00\x00\x04B\x00\x80\x0bD\x00\x00\xb6B\x00\x00\xf8C\x00\x80\xaaC\x00\x00>C\x00\x00\x05D\x00\x80\xd2C\x00\x80\xf1C\x00\x00\x93C\x00\x00\nC\x00@\x10D\x00\x80\x89C\x00\x00\xe0@\x00\x80\xebC\x00\x00\xd2B\x00\x00LB\x00\x00\xcaB\x00\x00@B\x00\x80\x8dC\x00\x00[C\x00\x80\xdcC\x00\x008B\x00\x00\x13C\x00\x00\x12D\x00\x80\xa2C\x00\x80\xbbC\x00\x00NC\x00\x00\x80B\x00\x80\x0cD\x00\x80\xd5C\x00\x80\xa5C\x00\x00\x01C\x00\x00\xccB\x00\x00\xf4C\x00\x00\x10C\x00\x00xB\x00\x80\xa4C\x00\x00PA\x00\x80\rD\x00\x00DB\x00\xc0\tD\x00\xc0\x15D\x00\x00dC\x00\x00\x92B\x00@\x14D\x00\x00\x80C\x00\x00\xa8C\x00\x00QC\x00\x00\x96C\x00\x004C\x00\x00\x0eD\x00\x80\x15D\x00\x80\xa9C\x00\x00\x87C\x00\x80\xd8C\x00\x00\xadC\x00\x00\xf4B\x00\x00DC\x00\x00\x1dC\x00\x00LC\x00\x00\xd8B\x00\x00@@\x00\x80\x8aC\x00\x00\xbaB\x00\x00\x11C\x00\x00\xe6B\x00\x80\xd0C\x00\x00\xe8B\x00\x00\x80@\x00\x00\\C\x00\x00\x08D\x00\x80\xc8C\x00\x00\x12C\x00\x80\xc5C\x00\x00\xd4C\x00\x00\x00D\x00\x00\xacB\x00\x00\xbcC\x00\x00\xf2C\x00\x80\x98C\x00\x80\xeeC\x00\x80\xb8C\x00\x00\xb1C\x00\x00\x13D\x00\x00\xb8A\x00\x00\xecC\x00\x80\x87C\x00\x00 B\x00\x00aC\x00\x00\x8dC\x00\x00\xb4B\x00\x00\x1bC\x00\xc0\x04D\x00\x00\x90B\x00\x00\xc7C\x00\x00\xc0B\x00\x00\x0bD\x00\x80\x10D\x00\x80\xbaC\x00\x00\xc6C\x00\x00\x06C\x00\x00\xe1C\x00\x00\xa1C\x00@\x12D\x00@\rD\x00\x80\xe5C\x00\x00?C\x00\x00AC\x00\x80\tD\x00\xc0\x0cD\x00\x00\x82C\x00\x80\xf7C\x00\x80\xa8C\x00\x00\xf9C\x00\x80\xfaC\x00\x00\x88B\x00\x00\x92C\x00\x00\xe0B\x00\xc0\x08D\x00\x00\x95C\x00\x00\xdeC\x00\x00\xc5C\x00\x00SC\x00\x00)C\x00\x00\xffC\x00@\x02D\x00\x00\x98C\x00\x00\x08C\x00\x00\xa4B\x00\x80\x92C\x00\x80\xdaC\x00\x80\xc3C\x00\x00\xf6C\x00\x00\xb8C\x00\x00\xbfC\x00\x80\xf2C\x00\x00\x90A\x00\x00\x81C\x00\x00\xc2B\x00\x00\xdcC\x00\x00\xfdC\x00\x00ZC\x00\x00fC\x00\x00\x8cC\x00\x00\xfcB\x00\x00\xb9C\x00\x00cC\x00\x00\x18C\x00\x00\x8eB\x00\x80\xffC\x00\x008C\x00\x00\rD\x00@\nD\x00\x00tC\x00\x80\x8eC\x00\x00XB\x00\x00\xd2C\x00\x00\xe2B\x00\x00\tD\x00\x00\xc0@\x00\x80\xb4C\x00\x00*C\x00@\x15D\x00\xc0\x0fD\x00\x000B\x00\x00\x08B\x00\x80\xddC\x00\x80\xefC\x00\x00\x01D\x00\x80\x12D\x00\x80\xb6C\x00\x80\xc1C\x00\x00\xc4B\x00\x80\x01D\x00\x00xC\x00\x80\x03D\x00\x00\x00\x00\x00\x00uC\x00\x009C\x00\x80\x84C\x00\x00\xd9C\x00\x00\x80?\x00@\x05D\x00\x80\xfeC\x00\x00\xccC\x00\x00\x86C\x00\xc0\x10D\x00\x00\xb7C\x00\x80\x99C\x00\xc0\x07D\x00\x00\xbaC\x00\x00\x7fC\x00\x80\xcfC\x00\x002C\x00\x00~C\x00\x00\x91C\x00\x80\x9aC\x00\x00\x94B\x00\x00\xecB\x00\x00\xd1C\x00@\tD\x00\x00\x8aB\x00\x80\xe0C\x00\x80\xf8C\x00\x80\x88C\x00\x00@C\x00\x00\x8eC\x00\x80\x08D\x00\x00HC\x00\x00\x15D\x00\x80\x94C\x00\x00\xaaB\x00\x00\xa0A\x00\x00\xcfC\x00\x80\xccC\x00\x00pC\x00\x00\xceB\x00\x00\xf5C\x00\x80\xc6C\x00\x00\xa2B\x00\x00\x00B\x00\x00\xaaC\x00\x80\xe1C\x00\x00\xfcC\x00\x00\xcbC\x00\x00\x02C\x00\x00\xa4C\x00@\x0eD\x00\x00pB\x00\x00\xd7C\x00\x00\xe8A\x00\x00\x0eC\x00\x00\x00A\x00\x00{C\x00\x80\x06D\x00\x00\xa6B\x00\x80\xe8C\x00\x80\x8bC\x00\x80\x07D\x00\x00\xeaB\x00\x00CC\x00@\x03D\x00\x00\xbbC\x00\x00vC\x00\x00\x86B\x00\x80\xcaC\x00\x80\x9dC\x00\x00\xb4C\x00\x00\x11D\x00\x00yC\x00\x00GC\x00\x80\x05D\x00\x80\xe4C\x00\x00pA\x00\x00\x1cC\x00\x80\xd7C\x00\x00\nD\x00\x00\xebC\x00\x00\xe3C\x00\x00\xb2B\x00\x80\xb1C\x00\xc0\x12D\x00@\x0bD\x00\x00\xd6C\x00\x00\x88A\x00\xc0\nD\x00\x00%C\x00\x80\xe3C\x00\x000C\x00\x00\xf7C\x00\x00\xf2B\x00\x80\xa6C\x00\x80\xedC\x00\x80\xd9C\x00\x00\x1aC\x00\x80\x82C\x00\x00\xe8C\x00\x80\x11D\x00\x80\xd1C\x00\x00;C\x00\x003C\x00\x00\x02D\x00\xc0\x13D\x00\x80\xf4C\x00\x00\xb6C\x00\x00$C\x00\x00\x0fD\x00\x80\xbdC\x00\x00&C\x00\x00\x9aC\x00\x00\x17C\x00\x00\xa7C\x00\x00\xdeB\x00\x00<C\x00\x00@A\x00\x00\x89C\x00\x00\'C\x00\x00_C\x00\x00lC\x00\x00\xfaC\x00@\x0fD\x00\x00\xddC\x00\x00\xdfC\x00\x00\x03D\x00\x80\x14D\x00\x00\xb8B\x00\xc0\x03D\x00@\x06D\x00\x00\xb3C\x00\x00iC\x00\x80\xaeC\x00\x00\x84B\x00\x80\x81C\x00\x80\xe7C\x00\x80\xb7C\x00\x80\xa7C\x00\x80\x0fD\x00\x00`B\x00\x00\xb0C\x00\x00\xd3C\x00\x00\xd8C\x00\x80\xdfC\x00\x80\x04D\x00\x00\x07C\x00\x80\xfbC\x00\x00\x85C\x00\x00BC\x00\x00|C\x00\x00\x14B\x00\x00\xfbC\x00\x80\xbcC\x00\xc0\x00D\x00\x006C\x00\x00\x96B\x00\x00\x05C\x00\x00\xeaC\x00\x80\x0eD\x00\x00(B\x00\x80\x00D\x00\x00HB\x00\x00\x9aB\x00\x00\xfeB\x00\x00\x94C\x00\x00\xb2C\x00\x00EC\x00\x00\xc9C\x00\x00\x9bC\x00\x00\xc0A\x00\x80\xa1C\x00\x00\xdbC\x00\x00tB\x00\x00\x04C\x00\x00\xf0B\x00\x80\nD\x00@\x07D\x00\x00:C\x00\x00\x8aC\x00\x00wC\x00\x00\x98B\x00\x00\xeeC\x00\x00VC\x00\x00\x18B\x00\x00^C\x00\x00#C\x00\x00\xd5C\x00\x00\x10A\x00\x80\xdeC\x00\x80\xb0C\x00\x80\xbfC\x00\x00oC\x00\x00\x0fC\x00\x80\xcbC\x00\x000A\x00\x00mC\x00\x80\x93C\x00\x00hC\x00\x00UC\x00@\x01D\x00\x00}C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4826
(dp4827
g60
(dp4828
g48
I01
sg56
I01
ssg62
g4819
sg63
(lp4829
g48
ag56
asg65
(lp4830
I600
aI1
asbsg67
S'random'
p4831
sg69
g70
(g51
(I0
tS'b'
tRp4832
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4833
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\x8d\x01\x00\x00\x92\x01\x00\x00l\x00\x00\x00\x1a\x01\x00\x00!\x01\x00\x00|\x00\x00\x00|\x01\x00\x00\xe9\x00\x00\x00\xc5\x01\x00\x00J\x02\x00\x00\x04\x00\x00\x00Q\x02\x00\x00\x03\x02\x00\x00\x02\x01\x00\x00\x1e\x00\x00\x00\xda\x01\x00\x00\r\x00\x00\x00\xe5\x01\x00\x00e\x01\x00\x00\x06\x00\x00\x00\xb1\x01\x00\x00F\x00\x00\x00R\x00\x00\x001\x01\x00\x008\x02\x00\x00\x87\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00M\x00\x00\x00\xc3\x01\x00\x00\xd4\x00\x00\x00Q\x00\x00\x00\xb9\x01\x00\x00\xdc\x00\x00\x00\x82\x01\x00\x00\xa1\x00\x00\x00\xb6\x00\x00\x00%\x02\x00\x00F\x02\x00\x00\xb8\x00\x00\x004\x01\x00\x00\x82\x00\x00\x00.\x02\x00\x00o\x00\x00\x00\x81\x01\x00\x00\x1c\x00\x00\x00\xf2\x00\x00\x00\xb2\x00\x00\x00\xee\x00\x00\x00\x04\x01\x00\x000\x02\x00\x00\xec\x00\x00\x00\x7f\x00\x00\x003\x00\x00\x00x\x01\x00\x008\x00\x00\x00\x1a\x02\x00\x00\xbc\x00\x00\x00;\x00\x00\x00\xc1\x00\x00\x00\xc1\x01\x00\x00;\x02\x00\x00\x00\x01\x00\x00\xad\x00\x00\x00\xf8\x00\x00\x00e\x00\x00\x00\x14\x02\x00\x00\xd1\x01\x00\x00P\x01\x00\x00\xa6\x01\x00\x00\\\x00\x00\x00q\x01\x00\x00:\x01\x00\x00\x08\x01\x00\x00\xa2\x01\x00\x00*\x02\x00\x00C\x02\x00\x001\x02\x00\x00\xd6\x00\x00\x00^\x00\x00\x00u\x00\x00\x00\xb8\x01\x00\x00]\x01\x00\x00\xc8\x01\x00\x00a\x00\x00\x00\xb0\x01\x00\x00)\x01\x00\x00\xbf\x00\x00\x00\xa9\x00\x00\x00\xe0\x01\x00\x007\x01\x00\x00\xde\x00\x00\x00\x0e\x02\x00\x00\x1c\x01\x00\x00\x99\x00\x00\x00T\x00\x00\x00<\x01\x00\x00g\x01\x00\x00\x89\x01\x00\x00\xda\x00\x00\x00A\x00\x00\x00\xed\x00\x00\x00\xfd\x00\x00\x00\xb5\x01\x00\x00\x90\x00\x00\x00\xeb\x00\x00\x00\x1b\x00\x00\x00\xae\x00\x00\x00\x19\x01\x00\x00[\x00\x00\x00\xa8\x00\x00\x00\x01\x02\x00\x00R\x01\x00\x00z\x01\x00\x00\xd9\x00\x00\x00\x1e\x01\x00\x00 \x01\x00\x00\xcc\x01\x00\x00\xa3\x01\x00\x00\xd2\x00\x00\x00=\x02\x00\x00\xeb\x01\x00\x00\x15\x01\x00\x00U\x00\x00\x00:\x00\x00\x00\x01\x00\x00\x00m\x01\x00\x002\x02\x00\x00\x02\x00\x00\x00\xfc\x00\x00\x00\xbe\x01\x00\x00\x1a\x00\x00\x00<\x02\x00\x00+\x02\x00\x00A\x01\x00\x00 \x02\x00\x00\\\x01\x00\x009\x00\x00\x00\xe6\x00\x00\x00\x9e\x00\x00\x00\xb1\x00\x00\x00\x11\x00\x00\x00\xc4\x01\x00\x00O\x02\x00\x00\xff\x00\x00\x00\x1d\x01\x00\x00%\x01\x00\x00\xf3\x00\x00\x00\x89\x00\x00\x00j\x00\x00\x00+\x00\x00\x00\xff\x01\x00\x00p\x01\x00\x00d\x00\x00\x00\xef\x01\x00\x008\x01\x00\x00\xdb\x01\x00\x00\x17\x01\x00\x00D\x00\x00\x00\n\x00\x00\x00i\x00\x00\x00g\x00\x00\x00\xdb\x00\x00\x00H\x02\x00\x00\xfa\x01\x00\x00\xe7\x01\x00\x00\xfd\x01\x00\x00\x05\x02\x00\x00>\x00\x00\x00X\x01\x00\x00~\x01\x00\x00\x15\x00\x00\x00\x84\x00\x00\x00\x8b\x00\x00\x00c\x00\x00\x00Y\x00\x00\x00\xe9\x01\x00\x00\x8e\x00\x00\x00\x9e\x01\x00\x00\xf5\x01\x00\x00\x0e\x01\x00\x00S\x00\x00\x00)\x02\x00\x00\xcf\x00\x00\x00s\x01\x00\x00\x8f\x01\x00\x00@\x02\x00\x00\xf4\x01\x00\x00\x02\x02\x00\x00\xb3\x00\x00\x00\xe1\x00\x00\x00G\x01\x00\x00\xaa\x01\x00\x00H\x01\x00\x00#\x02\x00\x00\xcd\x01\x00\x00\x16\x01\x00\x005\x02\x00\x00G\x00\x00\x00\xd7\x01\x00\x00\xad\x01\x00\x00~\x00\x00\x00\xd1\x00\x00\x00"\x00\x00\x00\x18\x01\x00\x00\x0e\x00\x00\x00\xf7\x00\x00\x00\x1f\x00\x00\x00W\x00\x00\x00\x0c\x01\x00\x00\xa3\x00\x00\x00W\x01\x00\x00_\x00\x00\x00U\x02\x00\x00E\x02\x00\x00O\x00\x00\x00\x95\x00\x00\x00 \x00\x00\x00j\x01\x00\x00\xf0\x00\x00\x00"\x01\x00\x00\xb5\x00\x00\x00G\x02\x00\x00\x06\x02\x00\x00?\x00\x00\x005\x01\x00\x00\x0c\x00\x00\x00o\x01\x00\x00\x07\x01\x00\x00s\x00\x00\x00k\x01\x00\x00\x97\x00\x00\x00T\x02\x00\x00\x12\x02\x00\x00K\x00\x00\x00\x1d\x00\x00\x00\x07\x02\x00\x00R\x02\x00\x00\xd5\x00\x00\x00N\x02\x00\x00\xb4\x01\x00\x00\xd3\x00\x00\x00\xc4\x00\x00\x00\xca\x00\x00\x00v\x01\x00\x00\x8e\x01\x00\x00\xd0\x01\x00\x00B\x02\x00\x00\x8b\x01\x00\x00\xd6\x01\x00\x00\x0b\x00\x00\x00\xc6\x01\x00\x00$\x02\x00\x00W\x02\x00\x00\x9f\x01\x00\x00\x9c\x01\x00\x00\n\x01\x00\x00\x10\x00\x00\x00f\x01\x00\x00\x15\x02\x00\x00K\x01\x00\x00\xf0\x01\x00\x00\x88\x00\x00\x00\xbb\x00\x00\x00\x98\x00\x00\x00\x90\x01\x00\x00"\x02\x00\x00\'\x00\x00\x00\x96\x01\x00\x00x\x00\x00\x00\x12\x01\x00\x003\x01\x00\x00\x94\x00\x00\x00\xa9\x01\x00\x00\x04\x02\x00\x00\xe8\x00\x00\x00A\x02\x00\x00\x1b\x01\x00\x00.\x00\x00\x00\xca\x01\x00\x00l\x01\x00\x00\x12\x00\x00\x006\x01\x00\x00\xef\x00\x00\x00\xab\x01\x00\x00w\x01\x00\x00]\x00\x00\x00P\x00\x00\x00\x9a\x00\x00\x00\xab\x00\x00\x00\xa0\x01\x00\x00}\x00\x00\x00Q\x01\x00\x00^\x01\x00\x00\xe5\x00\x00\x00S\x02\x00\x003\x02\x00\x00\xaf\x01\x00\x00T\x01\x00\x00\xc5\x00\x00\x00\r\x01\x00\x00V\x00\x00\x00\xac\x00\x00\x00\x14\x00\x00\x00[\x01\x00\x00,\x01\x00\x00\x08\x00\x00\x00\x99\x01\x00\x00\xfe\x01\x00\x00\xa1\x01\x00\x007\x02\x00\x00\x17\x00\x00\x00q\x00\x00\x000\x00\x00\x00\xd7\x00\x00\x00\xd3\x01\x00\x00,\x00\x00\x00(\x00\x00\x00\x80\x00\x00\x00v\x00\x00\x00\xbe\x00\x00\x00f\x00\x00\x00C\x01\x00\x009\x02\x00\x005\x00\x00\x00\xf5\x00\x00\x00\xa4\x00\x00\x004\x00\x00\x00\xbf\x01\x00\x00\x01\x01\x00\x00<\x00\x00\x00\xfb\x00\x00\x00n\x00\x00\x00\xec\x01\x00\x00\x00\x02\x00\x00\x18\x02\x00\x00\x0b\x01\x00\x00M\x01\x00\x00\xcb\x00\x00\x00\x11\x01\x00\x00\xba\x01\x00\x00\xe0\x00\x00\x00\x96\x00\x00\x00\x0f\x00\x00\x00C\x00\x00\x00h\x00\x00\x00\x14\x01\x00\x00\x07\x00\x00\x00*\x00\x00\x00\x13\x02\x00\x00&\x00\x00\x002\x00\x00\x00\x1b\x02\x00\x00L\x02\x00\x00/\x01\x00\x00\xe1\x01\x00\x004\x02\x00\x00m\x00\x00\x00\x11\x02\x00\x00\xbd\x00\x00\x00\xd4\x01\x00\x00}\x01\x00\x00X\x00\x00\x00\x86\x00\x00\x00\xf9\x01\x00\x00\x87\x01\x00\x00\x98\x01\x00\x00\x17\x02\x00\x00b\x01\x00\x00.\x01\x00\x00n\x01\x00\x00\xcc\x00\x00\x00\x9b\x01\x00\x00?\x01\x00\x00\xcf\x01\x00\x00\xf6\x00\x00\x00*\x01\x00\x00\'\x02\x00\x00\x83\x00\x00\x00\xfc\x01\x00\x00=\x00\x00\x00\xcd\x00\x00\x00c\x01\x00\x00M\x02\x00\x00\xc2\x00\x00\x00\x92\x00\x00\x00\xc3\x00\x00\x00\x88\x01\x00\x00\xaf\x00\x00\x00\x16\x00\x00\x00\xd0\x00\x00\x00`\x01\x00\x00\x85\x00\x00\x00Z\x00\x00\x00V\x01\x00\x00&\x01\x00\x00@\x01\x00\x00\xb7\x01\x00\x00;\x01\x00\x00\x93\x00\x00\x00z\x00\x00\x00$\x01\x00\x006\x02\x00\x00p\x00\x00\x00\x03\x00\x00\x00\xd2\x01\x00\x00\xbd\x01\x00\x00P\x02\x00\x00\x95\x01\x00\x00\xb3\x01\x00\x00w\x00\x00\x00\xa0\x00\x00\x00y\x00\x00\x00\xb9\x00\x00\x00\xb2\x01\x00\x00\x9d\x01\x00\x00\xba\x00\x00\x00\x1f\x01\x00\x00\xa4\x01\x00\x00\xf3\x01\x00\x00y\x01\x00\x00\xe3\x00\x00\x00\x1c\x02\x00\x006\x00\x00\x00\'\x01\x00\x00\xc8\x00\x00\x00I\x02\x00\x00\xfa\x00\x00\x00\xe4\x01\x00\x00\xb7\x00\x00\x00\xc2\x01\x00\x00\xdc\x01\x00\x00\x1d\x02\x00\x00\x13\x01\x00\x00\x91\x01\x00\x00\xee\x01\x00\x00\xa2\x00\x00\x00_\x01\x00\x00:\x02\x00\x00!\x00\x00\x00h\x01\x00\x00\xf1\x00\x00\x00\n\x02\x00\x00\x83\x01\x00\x00U\x01\x00\x00K\x02\x00\x00\x0b\x02\x00\x00\x1e\x02\x00\x00\x9c\x00\x00\x00\xa7\x01\x00\x00B\x01\x00\x00\xbb\x01\x00\x00\t\x00\x00\x00\x81\x00\x00\x00\xdf\x01\x00\x00\xe8\x01\x00\x00\x8d\x00\x00\x00\xd9\x01\x00\x00J\x00\x00\x00F\x01\x00\x00r\x00\x00\x00\xce\x00\x00\x00%\x00\x00\x00\x16\x02\x00\x00\xf1\x01\x00\x00\xc9\x01\x00\x00\x9f\x00\x00\x00)\x00\x00\x00,\x02\x00\x00\xa5\x00\x00\x00\xde\x01\x00\x00\xea\x00\x00\x002\x01\x00\x00\x8f\x00\x00\x00I\x00\x00\x00\xed\x01\x00\x00D\x02\x00\x00-\x01\x00\x00\xd8\x00\x00\x00\x84\x01\x00\x00{\x00\x00\x00$\x00\x00\x00k\x00\x00\x00\xe4\x00\x00\x00+\x01\x00\x00d\x01\x00\x00\xaa\x00\x00\x00\x91\x00\x00\x00\xfe\x00\x00\x00\xf8\x01\x00\x00\xb6\x01\x00\x00\x8c\x00\x00\x00a\x01\x00\x00E\x00\x00\x00\xea\x01\x00\x00L\x01\x00\x00\xdf\x00\x00\x00\xa8\x01\x00\x00N\x01\x00\x00\x19\x00\x00\x00\x08\x02\x00\x00O\x01\x00\x00&\x02\x00\x00!\x02\x00\x00\xbc\x01\x00\x00\xc0\x00\x00\x00i\x01\x00\x00t\x00\x00\x007\x00\x00\x00\x94\x01\x00\x00Y\x01\x00\x00r\x01\x00\x00(\x01\x00\x00\xc9\x00\x00\x00/\x02\x00\x00(\x02\x00\x00\x85\x01\x00\x00V\x02\x00\x00\x8a\x01\x00\x00\x8a\x00\x00\x00\xf6\x01\x00\x00Z\x01\x00\x00\xb4\x00\x00\x00\x13\x00\x00\x00\x0c\x02\x00\x00\xce\x01\x00\x00\x8c\x01\x00\x00\x0f\x02\x00\x00B\x00\x00\x00`\x00\x00\x00\x1f\x02\x00\x009\x01\x00\x00\xe2\x00\x00\x00\x93\x01\x00\x00\xd8\x01\x00\x00N\x00\x00\x00-\x00\x00\x00\x10\x02\x00\x00\xc7\x01\x00\x00\x05\x00\x00\x00\x18\x00\x00\x00?\x02\x00\x00\xcb\x01\x00\x00\x9a\x01\x00\x00#\x01\x00\x00/\x00\x00\x00\xac\x01\x00\x00S\x01\x00\x00{\x01\x00\x00\xa5\x01\x00\x00I\x01\x00\x00\x05\x01\x00\x00\xdd\x01\x00\x00u\x01\x00\x00>\x02\x00\x00\xe6\x01\x00\x00=\x01\x00\x00\xe3\x01\x00\x00\xdd\x00\x00\x001\x00\x00\x00\xc6\x00\x00\x00\x9b\x00\x00\x00\xf9\x00\x00\x00J\x01\x00\x00t\x01\x00\x00E\x01\x00\x00\x03\x01\x00\x00b\x00\x00\x00\x0f\x01\x00\x00\xc0\x01\x00\x00-\x02\x00\x00#\x00\x00\x00\xfb\x01\x00\x00\t\x02\x00\x00\x19\x02\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\xe7\x00\x00\x00>\x01\x00\x00\x97\x01\x00\x00\xd5\x01\x00\x00H\x00\x00\x00\xf2\x01\x00\x00@\x00\x00\x00\xf4\x00\x00\x00D\x01\x00\x00\x86\x01\x00\x00\xe2\x01\x00\x000\x01\x00\x00L\x00\x00\x00\xb0\x00\x00\x00\xf7\x01\x00\x00\xc7\x00\x00\x00\t\x01\x00\x00\r\x02\x00\x00\x9d\x00\x00\x00\xae\x01\x00\x00\x7f\x01\x00\x00\x10\x01\x00\x00\x06\x01\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4834
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4835
(g4833
S'\x06\x01\x00\x00'
tRp4836
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4837
I01
sb.