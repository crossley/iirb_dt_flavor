ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject662
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 662
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vf
sS'age'
p31
V21
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I0
sS'_exp'
p41
I74103120
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I54
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I11
I55
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I11
I55
tg55
I00
S'\x00\x00\xc0A\x00\x00\xf8A\x00\x00\x08B\x00\x00\x14B\x00\x004B\x00\x00lB\x00\x00\x8eB\x00\x00\xb6B\x00\x00\xd4B\x00\x00\xe6B\x00\x00\xf2B\x00\x00\x00C\x00\x00\x02C\x00\x00\x03C\x00\x00\rC\x00\x00\x12C\x00\x00\x15C\x00\x00\x1eC\x00\x00\x1fC\x00\x00.C\x00\x00FC\x00\x00IC\x00\x00OC\x00\x00RC\x00\x00YC\x00\x00[C\x00\x00bC\x00\x00\x80C\x00\x80\x80C\x00\x00\x83C\x00\x00\x91C\x00\x80\x91C\x00\x00\x97C\x00\x80\x9dC\x00\x80\x9eC\x00\x80\xa3C\x00\x00\xa5C\x00\x00\xaaC\x00\x80\xafC\x00\x00\xbeC\x00\x00\xc0C\x00\x80\xd3C\x00\x00\xd4C\x00\x00\xd6C\x00\x00\xd7C\x00\x00\xe6C\x00\x80\xf0C\x00\x80\x01D\x00@\x05D\x00\xc0\tD\x00@\x0eD\x00\xc0\x0eD\x00\x00\x12D\x00\x80\x12D\x00\xc0\x15D\x00\x00@@\x00\x00 A\x00\x00\xe0A\x00\x00\x10B\x00\x00 B\x00\x00,B\x00\x008B\x00\x00DB\x00\x00HB\x00\x00\x82B\x00\x00\x9aB\x00\x00\xb2B\x00\x00\xc8B\x00\x00\x01C\x00\x00\tC\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00 C\x00\x00%C\x00\x001C\x00\x003C\x00\x009C\x00\x00:C\x00\x00fC\x00\x00hC\x00\x00uC\x00\x80\x86C\x00\x00\x88C\x00\x80\x8aC\x00\x00\x8cC\x00\x00\x8dC\x00\x80\xa0C\x00\x00\xacC\x00\x00\xc3C\x00\x80\xc3C\x00\x00\xc8C\x00\x80\xc9C\x00\x80\xcdC\x00\x80\xd7C\x00\x00\xdeC\x00\x00\xe5C\x00\x80\xe7C\x00\x00\xe9C\x00\x80\xecC\x00\x00\xf0C\x00\x80\xf2C\x00\x00\xf5C\x00\x00\xfeC\x00\x80\xfeC\x00\x80\xffC\x00\xc0\x01D\x00\xc0\x07D\x00\x00\x14D\x00\x00\x00\x00\x00\x00\x90A\x00\x00\xb0A\x00\x00pB\x00\x00\xa4B\x00\x00\xa8B\x00\x00\xacB\x00\x00\xf8B\x00\x00\x05C\x00\x00\x08C\x00\x00$C\x00\x00+C\x00\x00;C\x00\x00?C\x00\x00CC\x00\x00EC\x00\x00MC\x00\x00VC\x00\x00jC\x00\x00nC\x00\x00qC\x00\x00wC\x00\x00|C\x00\x00\x84C\x00\x00\x8aC\x00\x80\x8bC\x00\x00\x8fC\x00\x80\x97C\x00\x80\x99C\x00\x80\xa5C\x00\x00\xa9C\x00\x80\xaaC\x00\x80\xaeC\x00\x00\xb0C\x00\x80\xb5C\x00\x80\xbdC\x00\x00\xc1C\x00\x80\xc6C\x00\x80\xcaC\x00\x80\xccC\x00\x80\xcfC\x00\x80\xd9C\x00\x80\xe0C\x00\x00\xe2C\x00\x80\xe8C\x00\x80\xe9C\x00\x00\xeeC\x00\x00\xf9C\x00\x80\x04D\x00\xc0\x08D\x00\x80\nD\x00\xc0\nD\x00\x00\x0bD\x00@\x12D\x00\x80\x13D\x00\x00\x15D\x00\x00\x10A\x00\x00\x88A\x00\x00\xb8A\x00\x00\xe8A\x00\x00LB\x00\x00\x88B\x00\x00\xaaB\x00\x00\xc6B\x00\x00\xccB\x00\x00\xfaB\x00\x00\x06C\x00\x00\x0cC\x00\x00\x0eC\x00\x00\x19C\x00\x00\x1aC\x00\x00"C\x00\x00/C\x00\x005C\x00\x006C\x00\x00<C\x00\x00AC\x00\x00GC\x00\x00LC\x00\x00cC\x00\x00gC\x00\x00iC\x00\x00\x85C\x00\x00\x89C\x00\x00\x94C\x00\x80\x9cC\x00\x80\xa1C\x00\x80\xa2C\x00\x00\xabC\x00\x80\xacC\x00\x80\xbfC\x00\x00\xc2C\x00\x80\xcbC\x00\x00\xccC\x00\x00\xd2C\x00\x00\xdcC\x00\x80\xdcC\x00\x00\xf2C\x00\x80\xfbC\x00@\x00D\x00\x00\x04D\x00\x00\x05D\x00\x80\x05D\x00@\x08D\x00\x00\nD\x00@\x0bD\x00\x80\x0eD\x00\x80\x10D\x00\xc0\x10D\x00\xc0\x12D\x00\xc0\x13D\x00\x00\x00@\x00\x00\xa0A\x00\x00\x0cB\x00\x00`B\x00\x00xB\x00\x00\x9cB\x00\x00\xa6B\x00\x00\xb4B\x00\x00\xc2B\x00\x00\xceB\x00\x00\xeaB\x00\x00\nC\x00\x00\x0bC\x00\x00\x1dC\x00\x00(C\x00\x00,C\x00\x00-C\x00\x00>C\x00\x00SC\x00\x00ZC\x00\x00oC\x00\x00pC\x00\x00zC\x00\x00~C\x00\x00\x7fC\x00\x80\x85C\x00\x00\x87C\x00\x80\x89C\x00\x80\x8cC\x00\x80\x94C\x00\x00\x9aC\x00\x80\x9fC\x00\x00\xa4C\x00\x80\xa4C\x00\x00\xb4C\x00\x80\xb4C\x00\x00\xb6C\x00\x00\xbbC\x00\x00\xbdC\x00\x80\xc0C\x00\x00\xc4C\x00\x00\xd1C\x00\x00\xd3C\x00\x00\xd5C\x00\x00\xd9C\x00\x80\xf6C\x00\x00\xf8C\x00\x80\xfdC\x00\x80\x00D\x00\xc0\x03D\x00@\x04D\x00\xc0\x05D\x00\x80\x0fD\x00@\x10D\x00\x80\x15D\x00\x00\xc8A\x00\x00\x04B\x00\x00@B\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\x84B\x00\x00\x8aB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xb8B\x00\x00\xcaB\x00\x00\xd6B\x00\x00\'C\x00\x00=C\x00\x00HC\x00\x00JC\x00\x00UC\x00\x00\\C\x00\x00rC\x00\x80\x81C\x00\x00\x98C\x00\x80\x9bC\x00\x00\xa2C\x00\x00\xa6C\x00\x80\xa6C\x00\x00\xb2C\x00\x00\xb9C\x00\x00\xbaC\x00\x80\xbaC\x00\x80\xbbC\x00\x80\xbcC\x00\x80\xc2C\x00\x80\xc5C\x00\x00\xcfC\x00\x80\xd2C\x00\x80\xddC\x00\x00\xe0C\x00\x80\xe1C\x00\x00\xe8C\x00\x00\xedC\x00\x80\xedC\x00\x80\xefC\x00\x00\xf1C\x00\x80\xfaC\x00\x00\x01D\x00\x00\x02D\x00\x80\x02D\x00\x00\x07D\x00@\x07D\x00\x00\tD\x00\x00\x0cD\x00\xc0\rD\x00\x00\x11D\x00@\x15D\x00\x00\x00A\x00\x00\x1cB\x00\x00\x8cB\x00\x00\x94B\x00\x00\xc0B\x00\x00\xd2B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xf0B\x00\x00\xfcB\x00\x00\x04C\x00\x00)C\x00\x00@C\x00\x00`C\x00\x00dC\x00\x00lC\x00\x00\x92C\x00\x00\x9cC\x00\x00\xa3C\x00\x00\xa7C\x00\x80\xa8C\x00\x00\xb3C\x00\x80\xb3C\x00\x00\xb5C\x00\x00\xb7C\x00\x00\xb8C\x00\x00\xc9C\x00\x00\xcaC\x00\x80\xd1C\x00\x00\xddC\x00\x80\xe2C\x00\x80\xe5C\x00\x00\xeaC\x00\x00\xebC\x00\x80\xebC\x00\x00\xf3C\x00\x80\xf3C\x00\x00\xf4C\x00\x80\xf4C\x00\x80\xf8C\x00\x80\xf9C\x00\x00\xfaC\x00\x00\xfcC\x00\xc0\x00D\x00@\x01D\x00@\x02D\x00@\x06D\x00\xc0\x06D\x00\x80\tD\x00\xc0\x0bD\x00@\x0cD\x00\x00\x0fD\x00\x80\x11D\x00\x00\x13D\x00\x00\x00\x00\x00\x00\x80@\x00\x00\xe0@\x00\x00PA\x00\x00\xa8A\x00\x00\xf0A\x00\x00\x18B\x00\x00$B\x00\x00(B\x00\x00hB\x00\x00tB\x00\x00\xa2B\x00\x00\xaeB\x00\x00\xc4B\x00\x00\xfeB\x00\x00\x0fC\x00\x00!C\x00\x00&C\x00\x00TC\x00\x00XC\x00\x00aC\x00\x00tC\x00\x00vC\x00\x00xC\x00\x00yC\x00\x00{C\x00\x80\x87C\x00\x80\x8dC\x00\x00\x8eC\x00\x00\x93C\x00\x80\x93C\x00\x00\x96C\x00\x00\x9dC\x00\x80\xabC\x00\x80\xb2C\x00\x80\xb7C\x00\x80\xc4C\x00\x00\xc5C\x00\x80\xc7C\x00\x00\xcbC\x00\x80\xceC\x00\x80\xd4C\x00\x80\xd5C\x00\x00\xd8C\x00\x80\xd8C\x00\x80\xdaC\x00\x80\xe3C\x00\x80\xe6C\x00\x80\xeaC\x00\xc0\x04D\x00\x80\x0cD\x00\x00\x0eD\x00\x00\x10D\x00\xc0\x11D\x00\xc0\x14D\x00\x00\x00\x00\x00\x00\x80?\x00\x00\xa0@\x00\x00\x98A\x00\x00\x00B\x00\x00\x80B\x00\x00\x90B\x00\x00\xb0B\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xf4B\x00\x00\x13C\x00\x00#C\x00\x004C\x00\x00KC\x00\x00WC\x00\x00_C\x00\x00sC\x00\x00\x81C\x00\x80\x83C\x00\x80\x88C\x00\x00\x90C\x00\x80\x92C\x00\x80\x9aC\x00\x00\x9eC\x00\x00\xa1C\x00\x00\xa8C\x00\x00\xafC\x00\x00\xb1C\x00\x80\xb6C\x00\x80\xb8C\x00\x00\xc7C\x00\x80\xc8C\x00\x80\xd0C\x00\x00\xdaC\x00\x00\xdbC\x00\x80\xdeC\x00\x80\xdfC\x00\x00\xe1C\x00\x00\xe7C\x00\x80\xf1C\x00\x80\xf7C\x00\x00\xffC\x00\x00\x00D\x00\x80\x03D\x00\x00\x06D\x00\x00\rD\x00@\rD\x00\xc0\x0fD\x00@\x13D\x00\x80\x14D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0@\x00\x00@A\x00\x00\x80A\x00\x00\x92B\x00\x00\x98B\x00\x00\xbaB\x00\x00\xe8B\x00\x00\xeeB\x00\x00\x10C\x00\x00\x11C\x00\x00\x1bC\x00\x00\x1cC\x00\x00*C\x00\x002C\x00\x008C\x00\x00BC\x00\x00DC\x00\x00NC\x00\x00QC\x00\x00]C\x00\x00^C\x00\x00kC\x00\x00mC\x00\x00}C\x00\x00\x82C\x00\x80\x82C\x00\x80\x84C\x00\x80\x8eC\x00\x00\x95C\x00\x80\x95C\x00\x80\x96C\x00\x00\xadC\x00\x00\xaeC\x00\x80\xb1C\x00\x80\xb9C\x00\x00\xbcC\x00\x00\xcdC\x00\x00\xceC\x00\x00\xd0C\x00\x80\xd6C\x00\x00\xe3C\x00\x00\xecC\x00\x80\xeeC\x00\x00\xefC\x00\x80\xf5C\x00\x00\xf6C\x00\x00\xf7C\x00\x00\xfbC\x00\x00\xfdC\x00@\x03D\x00\x80\x07D\x00\x80\x0bD\x00@\x0fD\x00\x00\x00\x00\x00\x000A\x00\x00`A\x00\x00pA\x00\x00\xd0A\x00\x00\xd8A\x00\x000B\x00\x00<B\x00\x00\\B\x00\x00dB\x00\x00|B\x00\x00\x86B\x00\x00\x96B\x00\x00\xd0B\x00\x00\xdcB\x00\x00\xecB\x00\x00\xf6B\x00\x00\x07C\x00\x00\x14C\x00\x000C\x00\x007C\x00\x00PC\x00\x00eC\x00\x00\x86C\x00\x00\x8bC\x00\x80\x8fC\x00\x80\x90C\x00\x80\x98C\x00\x00\x99C\x00\x00\x9bC\x00\x00\x9fC\x00\x00\xa0C\x00\x80\xa7C\x00\x80\xa9C\x00\x80\xadC\x00\x80\xb0C\x00\x80\xbeC\x00\x00\xbfC\x00\x80\xc1C\x00\x00\xc6C\x00\x80\xdbC\x00\x00\xdfC\x00\x00\xe4C\x00\x80\xe4C\x00\x80\xfcC\x00\xc0\x02D\x00\x00\x03D\x00\x80\x06D\x00\x00\x08D\x00\x80\x08D\x00@\tD\x00@\nD\x00\xc0\x0cD\x00\x80\rD\x00@\x11D\x00@\x14D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I11
aI55
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I11
I55
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I9
aI10
aI2
aI5
aI10
aI10
aI5
aI1
aI8
aI3
aI10
aI0
aI6
aI7
aI3
aI1
aI10
aI2
aI0
aI9
aI5
aI3
aI5
aI9
aI2
aI4
aI2
aI4
aI4
aI4
aI0
aI2
aI2
aI2
aI4
aI4
aI10
aI3
aI4
aI9
aI3
aI5
aI8
aI1
aI3
aI8
aI9
aI6
aI3
aI6
aI6
aI6
aI6
aI7
aI8
aI8
aI9
aI3
aI0
aI0
aI4
aI10
aI4
aI1
aI1
aI8
aI8
aI2
aI9
aI9
aI7
aI1
aI3
aI3
aI0
aI9
aI1
aI8
aI4
aI9
aI2
aI10
aI9
aI8
aI10
aI2
aI3
aI10
aI4
aI5
aI2
aI2
aI3
aI6
aI0
aI3
aI2
aI1
aI5
aI1
aI4
aI4
aI0
aI4
aI5
aI0
aI7
aI9
aI0
aI7
aI4
aI7
aI0
aI4
aI1
aI10
aI3
aI5
aI4
aI5
aI8
aI10
aI3
aI9
aI9
aI5
aI9
aI5
aI5
aI4
aI9
aI3
aI7
aI4
aI3
aI1
aI8
aI9
aI10
aI1
aI5
aI7
aI8
aI8
aI9
aI10
aI8
aI2
aI3
aI1
aI6
aI6
aI5
aI5
aI6
aI6
aI1
aI1
aI2
aI5
aI3
aI10
aI4
aI2
aI2
aI1
aI10
aI5
aI1
aI10
aI7
aI5
aI5
aI0
aI3
aI6
aI2
aI10
aI0
aI4
aI4
aI1
aI4
aI0
aI7
aI8
aI2
aI1
aI0
aI4
aI10
aI10
aI7
aI5
aI8
aI5
aI1
aI9
aI6
aI5
aI3
aI7
aI9
aI5
aI7
aI5
aI9
aI2
aI2
aI6
aI2
aI1
aI5
aI7
aI9
aI10
aI8
aI8
aI0
aI5
aI7
aI10
aI10
aI0
aI5
aI0
aI6
aI7
aI5
aI4
aI6
aI3
aI2
aI8
aI0
aI6
aI8
aI2
aI5
aI5
aI6
aI9
aI7
aI0
aI10
aI2
aI0
aI9
aI6
aI3
aI6
aI3
aI5
aI7
aI4
aI5
aI1
aI1
aI4
aI7
aI1
aI7
aI1
aI9
aI6
aI6
aI8
aI6
aI3
aI1
aI2
aI8
aI7
aI3
aI4
aI8
aI9
aI10
aI7
aI1
aI2
aI0
aI2
aI9
aI10
aI0
aI6
aI1
aI10
aI0
aI9
aI3
aI6
aI8
aI2
aI7
aI6
aI2
aI8
aI1
aI1
aI0
aI0
aI3
aI5
aI10
aI9
aI7
aI6
aI2
aI1
aI8
aI9
aI0
aI4
aI8
aI10
aI2
aI9
aI6
aI6
aI1
aI5
aI0
aI10
aI2
aI10
aI4
aI6
aI0
aI9
aI3
aI1
aI6
aI1
aI7
aI8
aI4
aI8
aI6
aI9
aI7
aI4
aI0
aI1
aI2
aI3
aI3
aI3
aI8
aI0
aI9
aI7
aI5
aI4
aI4
aI6
aI2
aI7
aI3
aI8
aI10
aI6
aI8
aI0
aI1
aI6
aI7
aI0
aI2
aI10
aI10
aI6
aI5
aI1
aI5
aI8
aI10
aI3
aI3
aI2
aI5
aI3
aI8
aI8
aI7
aI2
aI3
aI1
aI3
aI4
aI9
aI2
aI8
aI0
aI4
aI0
aI4
aI1
aI7
aI4
aI10
aI9
aI2
aI7
aI3
aI2
aI7
aI9
aI7
aI1
aI8
aI5
aI0
aI6
aI6
aI9
aI6
aI5
aI10
aI4
aI1
aI5
aI7
aI8
aI8
aI1
aI7
aI1
aI9
aI9
aI3
aI10
aI4
aI10
aI3
aI7
aI3
aI2
aI7
aI6
aI8
aI7
aI7
aI5
aI10
aI6
aI3
aI6
aI5
aI10
aI1
aI3
aI1
aI3
aI4
aI9
aI2
aI9
aI0
aI6
aI4
aI4
aI9
aI1
aI7
aI7
aI10
aI8
aI0
aI2
aI2
aI4
aI9
aI10
aI7
aI6
aI2
aI4
aI7
aI5
aI6
aI6
aI0
aI9
aI3
aI4
aI9
aI8
aI2
aI9
aI0
aI5
aI3
aI9
aI3
aI4
aI0
aI7
aI5
aI8
aI10
aI2
aI4
aI8
aI9
aI0
aI0
aI1
aI8
aI0
aI1
aI9
aI0
aI4
aI10
aI4
aI7
aI0
aI8
aI7
aI7
aI10
aI0
aI4
aI10
aI8
aI4
aI5
aI3
aI7
aI2
aI9
aI7
aI8
aI2
aI0
aI6
aI5
aI4
aI6
aI6
aI8
aI6
aI5
aI6
aI3
aI10
aI1
aI1
aI1
aI7
aI8
aI1
aI5
aI1
aI9
aI7
aI7
aI8
aI6
aI0
aI3
aI3
aI2
aI3
aI1
aI2
aI10
aI0
aI1
aI2
aI2
aI8
aI3
aI9
aI3
aI2
aI10
aI4
aI0
aI0
aI6
aI5
aI0
aI5
aI7
aI8
aI0
aI10
aI8
aI7
aI9
aI8
aI9
aI10
aI5
aI4
aI10
aI10
aI5
aI0
aI6
aI10
aI6
atbsS'finished'
p74
I00
sS'nReps'
p75
I55
sS'nRemaining'
p76
I5
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p79
NsS'thisIndex'
p80
I0
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I5
sS'nTotal'
p83
I605
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'd'
asS'.thisTrial'
p95
I9
sS'.thisRepN'
p96
I0
sg30
Vf
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I9
sg15
(lp100
S'd'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'd'
asg95
I8
sS'.thisRepN'
p103
I0
sg30
Vf
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I8
sg15
(lp107
S'k'
asg17
S'N'
sg14
I1
sa(dp108
g16
(lp109
S'k'
asg18
S'N'
sS'.thisRepN'
p110
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I4
sg15
(lp114
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp115
g16
(lp116
S'd'
asg18
S'Y'
sS'.thisRepN'
p117
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I1
sg15
(lp121
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp122
g16
(lp123
S'k'
asg18
S'Y'
sS'.thisRepN'
p124
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p125
I4
sS'.thisN'
p126
I4
sS'.thisIndex'
p127
I7
sg15
(lp128
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp129
S'space'
p130
asg95
I7
sa(dp131
g16
(lp132
S'k'
asg18
S'N'
sS'.thisRepN'
p133
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p134
I5
sS'.thisN'
p135
I5
sS'.thisIndex'
p136
I8
sg15
(lp137
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp138
g16
(lp139
S'k'
asg18
S'N'
sS'.thisRepN'
p140
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p141
I6
sS'.thisN'
p142
I6
sS'.thisIndex'
p143
I9
sg15
(lp144
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp145
g16
(lp146
S'd'
asg18
S'Y'
sS'.thisRepN'
p147
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p148
I7
sS'.thisN'
p149
I7
sS'.thisIndex'
p150
I7
sg15
(lp151
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp152
S'space'
p153
asg95
I7
sa(dp154
g16
(lp155
S'd'
asg18
S'Y'
sS'.thisRepN'
p156
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p157
I8
sS'.thisN'
p158
I8
sS'.thisIndex'
p159
I6
sg15
(lp160
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp161
g16
(lp162
S'k'
asg18
S'Y'
sS'.thisRepN'
p163
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p164
I9
sS'.thisN'
p165
I9
sS'.thisIndex'
p166
I3
sg15
(lp167
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp168
S'space'
p169
asg95
I3
sa(dp170
g16
(lp171
S'k'
asg18
S'Y'
sS'.thisRepN'
p172
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p173
I10
sS'.thisN'
p174
I10
sS'.thisIndex'
p175
I1
sg15
(lp176
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp177
S'space'
p178
asg95
I1
sa(dp179
g16
(lp180
S'd'
asg18
S'N'
sS'.thisRepN'
p181
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p182
I0
sS'.thisN'
p183
I11
sS'.thisIndex'
p184
I10
sg15
(lp185
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp186
g16
(lp187
S'k'
asg18
S'N'
sS'.thisRepN'
p188
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p189
I1
sS'.thisN'
p190
I12
sS'.thisIndex'
p191
I9
sg15
(lp192
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp193
g16
(lp194
S'd'
asg18
S'N'
sS'.thisRepN'
p195
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p196
I2
sS'.thisN'
p197
I13
sS'.thisIndex'
p198
I7
sg15
(lp199
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp200
g16
(lp201
S'k'
asg18
S'Y'
sS'.thisRepN'
p202
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p203
I3
sS'.thisN'
p204
I14
sS'.thisIndex'
p205
I10
sg15
(lp206
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp207
S'space'
p208
asg95
I10
sa(dp209
g16
(lp210
S'k'
asg18
S'N'
sS'.thisRepN'
p211
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p212
I4
sS'.thisN'
p213
I15
sS'.thisIndex'
p214
I10
sg15
(lp215
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp216
S'space'
p217
asg95
I10
sa(dp218
g16
(lp219
S'd'
asg18
S'Y'
sS'.thisRepN'
p220
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p221
I5
sS'.thisN'
p222
I16
sS'.thisIndex'
p223
I9
sg15
(lp224
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp225
g16
(lp226
S'k'
asg18
S'N'
sS'.thisRepN'
p227
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p228
I6
sS'.thisN'
p229
I17
sS'.thisIndex'
p230
I3
sg15
(lp231
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp232
g16
(lp233
S'k'
asg18
S'N'
sS'.thisRepN'
p234
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p235
I7
sS'.thisN'
p236
I18
sS'.thisIndex'
p237
I2
sg15
(lp238
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp239
g16
(lp240
S'd'
asg18
S'Y'
sS'.thisRepN'
p241
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p242
I8
sS'.thisN'
p243
I19
sS'.thisIndex'
p244
I8
sg15
(lp245
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp246
S'space'
p247
asg95
I8
sa(dp248
g16
(lp249
S'd'
asg18
S'Y'
sS'.thisRepN'
p250
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p251
I9
sS'.thisN'
p252
I20
sS'.thisIndex'
p253
I4
sg15
(lp254
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp255
S'space'
p256
asg95
I4
sa(dp257
g16
(lp258
S'd'
asg18
S'N'
sS'.thisRepN'
p259
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p260
I10
sS'.thisN'
p261
I21
sS'.thisIndex'
p262
I7
sg15
(lp263
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp264
g16
(lp265
S'd'
asg18
S'Y'
sS'.thisRepN'
p266
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p267
I0
sS'.thisN'
p268
I22
sS'.thisIndex'
p269
I2
sg15
(lp270
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp271
g16
(lp272
S'k'
asg18
S'N'
sS'.thisRepN'
p273
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p274
I1
sS'.thisN'
p275
I23
sS'.thisIndex'
p276
I3
sg15
(lp277
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp278
g16
(lp279
S'k'
asg18
S'Y'
sS'.thisRepN'
p280
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p281
I2
sS'.thisN'
p282
I24
sS'.thisIndex'
p283
I0
sg15
(lp284
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp285
g16
(lp286
S'k'
asg18
S'N'
sS'.thisRepN'
p287
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p288
I3
sS'.thisN'
p289
I25
sS'.thisIndex'
p290
I5
sg15
(lp291
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp292
g16
(lp293
S'd'
asg18
S'N'
sS'.thisRepN'
p294
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p295
I4
sS'.thisN'
p296
I26
sS'.thisIndex'
p297
I10
sg15
(lp298
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp299
g16
(lp300
S'k'
asg18
S'N'
sS'.thisRepN'
p301
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p302
I5
sS'.thisN'
p303
I27
sS'.thisIndex'
p304
I10
sg15
(lp305
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp306
g16
(lp307
S'k'
asg18
S'N'
sS'.thisRepN'
p308
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p309
I6
sS'.thisN'
p310
I28
sS'.thisIndex'
p311
I1
sg15
(lp312
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp313
g16
(lp314
S'k'
asg18
S'Y'
sS'.thisRepN'
p315
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p316
I7
sS'.thisN'
p317
I29
sS'.thisIndex'
p318
I3
sg15
(lp319
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp320
S'space'
p321
asg95
I3
sa(dp322
g16
(lp323
S'd'
asg18
S'N'
sS'.thisRepN'
p324
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p325
I8
sS'.thisN'
p326
I30
sS'.thisIndex'
p327
I7
sg15
(lp328
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp329
g16
(lp330
S'k'
asg18
S'Y'
sS'.thisRepN'
p331
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p332
I9
sS'.thisN'
p333
I31
sS'.thisIndex'
p334
I0
sg15
(lp335
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp336
S'space'
p337
asg95
I0
sa(dp338
g16
(lp339
S'd'
asg18
S'Y'
sS'.thisRepN'
p340
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p341
I10
sS'.thisN'
p342
I32
sS'.thisIndex'
p343
I8
sg15
(lp344
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
(lp345
S'space'
p346
asg95
I8
sa(dp347
g16
(lp348
S'd'
asg18
S'N'
sS'.thisRepN'
p349
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p350
I0
sS'.thisN'
p351
I33
sS'.thisIndex'
p352
I5
sg15
(lp353
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp354
g16
(lp355
S'd'
asg18
S'N'
sS'.thisRepN'
p356
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p357
I1
sS'.thisN'
p358
I34
sS'.thisIndex'
p359
I0
sg15
(lp360
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp361
g16
(lp362
S'k'
asg18
S'Y'
sS'.thisRepN'
p363
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p364
I2
sS'.thisN'
p365
I35
sS'.thisIndex'
p366
I4
sg15
(lp367
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp368
g16
(lp369
S'd'
asg18
S'N'
sS'.thisRepN'
p370
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p371
I3
sS'.thisN'
p372
I36
sS'.thisIndex'
p373
I1
sg15
(lp374
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp375
g16
(lp376
S'k'
asg18
S'Y'
sS'.thisRepN'
p377
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p378
I4
sS'.thisN'
p379
I37
sS'.thisIndex'
p380
I0
sg15
(lp381
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp382
S'space'
p383
asg95
I0
sa(dp384
g16
(lp385
S'd'
asg18
S'N'
sS'.thisRepN'
p386
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p387
I5
sS'.thisN'
p388
I38
sS'.thisIndex'
p389
I7
sg15
(lp390
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp391
g16
(lp392
S'k'
asg18
S'N'
sS'.thisRepN'
p393
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p394
I6
sS'.thisN'
p395
I39
sS'.thisIndex'
p396
I6
sg15
(lp397
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp398
g16
(lp399
S'k'
asg18
S'Y'
sS'.thisRepN'
p400
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p401
I7
sS'.thisN'
p402
I40
sS'.thisIndex'
p403
I1
sg15
(lp404
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp405
g16
(lp406
S'd'
asg18
S'N'
sS'.thisRepN'
p407
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p408
I8
sS'.thisN'
p409
I41
sS'.thisIndex'
p410
I7
sg15
(lp411
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp412
g16
(lp413
S'k'
asg18
S'N'
sS'.thisRepN'
p414
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p415
I9
sS'.thisN'
p416
I42
sS'.thisIndex'
p417
I7
sg15
(lp418
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp419
g16
(lp420
S'd'
asg18
S'Y'
sS'.thisRepN'
p421
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p422
I10
sS'.thisN'
p423
I43
sS'.thisIndex'
p424
I1
sg15
(lp425
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp426
S'space'
p427
asg95
I1
sa(dp428
g16
(lp429
S'd'
asg18
S'N'
sS'.thisRepN'
p430
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p431
I0
sS'.thisN'
p432
I44
sS'.thisIndex'
p433
I10
sg15
(lp434
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp435
g16
(lp436
S'k'
asg18
S'Y'
sS'.thisRepN'
p437
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p438
I1
sS'.thisN'
p439
I45
sS'.thisIndex'
p440
I0
sg15
(lp441
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp442
g16
(lp443
S'd'
asg18
S'N'
sS'.thisRepN'
p444
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p445
I2
sS'.thisN'
p446
I46
sS'.thisIndex'
p447
I1
sg15
(lp448
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp449
g16
(lp450
S'k'
asg18
S'N'
sS'.thisRepN'
p451
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p452
I3
sS'.thisN'
p453
I47
sS'.thisIndex'
p454
I10
sg15
(lp455
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp456
g16
(lp457
S'k'
asg18
S'N'
sS'.thisRepN'
p458
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p459
I4
sS'.thisN'
p460
I48
sS'.thisIndex'
p461
I5
sg15
(lp462
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp463
g16
(lp464
S'd'
asg18
S'Y'
sg22
I39
sS'.thisN'
p465
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p466
I5
sS'.thisRepN'
p467
I4
sg21
I35
sS'.thisIndex'
p468
I1
sg23
I21
sg15
(lp469
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp470
S'space'
p471
asg95
I1
sa(dp472
g16
(lp473
S'd'
asg95
I1
sS'.thisRepN'
p474
I4
sg30
Vf
sg31
g32
sS'.thisTrialN'
p475
I6
sS'.thisN'
p476
I50
sS'.thisIndex'
p477
I1
sg15
(lp478
S'd'
asg17
S'Y'
sg14
I2
sa(dp479
g16
(lp480
S'k'
asg95
I3
sS'.thisRepN'
p481
I4
sg30
Vf
sg31
g32
sS'.thisTrialN'
p482
I7
sS'.thisN'
p483
I51
sS'.thisIndex'
p484
I3
sg15
(lp485
S'k'
asg17
S'Y'
sg14
I2
sa(dp486
g16
(lp487
S'k'
asg18
S'N'
sS'.thisRepN'
p488
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p489
I8
sS'.thisN'
p490
I52
sS'.thisIndex'
p491
I5
sg15
(lp492
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp493
g16
(lp494
S'k'
asg18
S'N'
sS'.thisRepN'
p495
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p496
I9
sS'.thisN'
p497
I53
sS'.thisIndex'
p498
I5
sg15
(lp499
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp500
g16
(lp501
S'd'
asg18
S'N'
sS'.thisRepN'
p502
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p503
I10
sS'.thisN'
p504
I54
sS'.thisIndex'
p505
I5
sg15
(lp506
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp507
g16
(lp508
S'd'
asg18
S'N'
sS'.thisRepN'
p509
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p510
I0
sS'.thisN'
p511
I55
sS'.thisIndex'
p512
I10
sg15
(lp513
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp514
g16
(lp515
S'k'
asg18
S'Y'
sS'.thisRepN'
p516
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p517
I1
sS'.thisN'
p518
I56
sS'.thisIndex'
p519
I4
sg15
(lp520
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp521
S'space'
p522
asg95
I4
sa(dp523
g16
(lp524
S'd'
asg18
S'Y'
sS'.thisRepN'
p525
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p526
I2
sS'.thisN'
p527
I57
sS'.thisIndex'
p528
I10
sg15
(lp529
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp530
S'space'
p531
asg95
I10
sa(dp532
g16
(lp533
S'k'
asg18
S'Y'
sS'.thisRepN'
p534
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p535
I3
sS'.thisN'
p536
I58
sS'.thisIndex'
p537
I7
sg15
(lp538
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp539
S'space'
p540
asg95
I7
sa(dp541
g16
(lp542
S'd'
asg18
S'Y'
sS'.thisRepN'
p543
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p544
I4
sS'.thisN'
p545
I59
sS'.thisIndex'
p546
I0
sg15
(lp547
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp548
S'space'
p549
asg95
I0
sa(dp550
g16
(lp551
S'k'
asg18
S'N'
sS'.thisRepN'
p552
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p553
I5
sS'.thisN'
p554
I60
sS'.thisIndex'
p555
I2
sg15
(lp556
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp557
g16
(lp558
S'd'
asg18
S'Y'
sS'.thisRepN'
p559
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p560
I6
sS'.thisN'
p561
I61
sS'.thisIndex'
p562
I7
sg15
(lp563
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp564
g16
(lp565
S'k'
asg18
S'Y'
sS'.thisRepN'
p566
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p567
I7
sS'.thisN'
p568
I62
sS'.thisIndex'
p569
I4
sg15
(lp570
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp571
S'space'
p572
asg95
I4
sa(dp573
g16
(lp574
S'k'
asg18
S'Y'
sS'.thisRepN'
p575
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p576
I8
sS'.thisN'
p577
I63
sS'.thisIndex'
p578
I10
sg15
(lp579
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp580
S'space'
p581
asg95
I10
sa(dp582
g16
(lp583
S'k'
asg18
S'Y'
sS'.thisRepN'
p584
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p585
I9
sS'.thisN'
p586
I64
sS'.thisIndex'
p587
I8
sg15
(lp588
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp589
g16
(lp590
S'k'
asg18
S'N'
sS'.thisRepN'
p591
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p592
I10
sS'.thisN'
p593
I65
sS'.thisIndex'
p594
I1
sg15
(lp595
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp596
g16
(lp597
S'k'
asg18
S'N'
sS'.thisRepN'
p598
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p599
I0
sS'.thisN'
p600
I66
sS'.thisIndex'
p601
I5
sg15
(lp602
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp603
g16
(lp604
S'd'
asg18
S'Y'
sS'.thisRepN'
p605
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p606
I1
sS'.thisN'
p607
I67
sS'.thisIndex'
p608
I10
sg15
(lp609
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp610
S'space'
p611
asg95
I10
sa(dp612
g16
(lp613
S'k'
asg18
S'Y'
sS'.thisRepN'
p614
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p615
I2
sS'.thisN'
p616
I68
sS'.thisIndex'
p617
I3
sg15
(lp618
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp619
S'space'
p620
asg95
I3
sa(dp621
g16
(lp622
S'd'
asg18
S'N'
sS'.thisRepN'
p623
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p624
I3
sS'.thisN'
p625
I69
sS'.thisIndex'
p626
I5
sg15
(lp627
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp628
g16
(lp629
S'k'
asg18
S'Y'
sS'.thisRepN'
p630
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p631
I4
sS'.thisN'
p632
I70
sS'.thisIndex'
p633
I6
sg15
(lp634
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp635
S'space'
p636
asg95
I6
sa(dp637
g16
(lp638
S'd'
asg18
S'Y'
sS'.thisRepN'
p639
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p640
I5
sS'.thisN'
p641
I71
sS'.thisIndex'
p642
I0
sg15
(lp643
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp644
S'space'
p645
asg95
I0
sa(dp646
g16
(lp647
S'k'
asg18
S'Y'
sS'.thisRepN'
p648
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p649
I6
sS'.thisN'
p650
I72
sS'.thisIndex'
p651
I8
sg15
(lp652
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp653
S'space'
p654
asg95
I8
sa(dp655
g16
(lp656
S'd'
asg18
S'N'
sS'.thisRepN'
p657
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p658
I7
sS'.thisN'
p659
I73
sS'.thisIndex'
p660
I9
sg15
(lp661
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp662
g16
(lp663
S'k'
asg18
S'Y'
sS'.thisRepN'
p664
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p665
I8
sS'.thisN'
p666
I74
sS'.thisIndex'
p667
I6
sg15
(lp668
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp669
S'space'
p670
asg95
I6
sa(dp671
g16
(lp672
S'k'
asg18
S'N'
sS'.thisRepN'
p673
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p674
I9
sS'.thisN'
p675
I75
sS'.thisIndex'
p676
I10
sg15
(lp677
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp678
g16
(lp679
S'k'
asg18
S'N'
sS'.thisRepN'
p680
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p681
I10
sS'.thisN'
p682
I76
sS'.thisIndex'
p683
I9
sg15
(lp684
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp685
g16
(lp686
S'd'
asg18
S'Y'
sS'.thisRepN'
p687
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p688
I0
sS'.thisN'
p689
I77
sS'.thisIndex'
p690
I1
sg15
(lp691
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp692
S'space'
p693
asg95
I1
sa(dp694
g16
(lp695
S'k'
asg18
S'N'
sS'.thisRepN'
p696
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p697
I1
sS'.thisN'
p698
I78
sS'.thisIndex'
p699
I4
sg15
(lp700
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp701
g16
(lp702
S'k'
asg18
S'N'
sS'.thisRepN'
p703
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p704
I2
sS'.thisN'
p705
I79
sS'.thisIndex'
p706
I5
sg15
(lp707
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp708
g16
(lp709
S'd'
asg18
S'Y'
sS'.thisRepN'
p710
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p711
I3
sS'.thisN'
p712
I80
sS'.thisIndex'
p713
I5
sg15
(lp714
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp715
S'space'
p716
asg95
I5
sa(dp717
g16
(lp718
S'k'
asg18
S'Y'
sS'.thisRepN'
p719
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p720
I4
sS'.thisN'
p721
I81
sS'.thisIndex'
p722
I7
sg15
(lp723
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp724
S'space'
p725
asg95
I7
sa(dp726
g16
(lp727
S'd'
asg18
S'Y'
sS'.thisRepN'
p728
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p729
I5
sS'.thisN'
p730
I82
sS'.thisIndex'
p731
I2
sg15
(lp732
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp733
S'space'
p734
asg95
I2
sa(dp735
g16
(lp736
S'd'
asg18
S'N'
sS'.thisRepN'
p737
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p738
I6
sS'.thisN'
p739
I83
sS'.thisIndex'
p740
I4
sg15
(lp741
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp742
g16
(lp743
S'k'
asg18
S'Y'
sS'.thisRepN'
p744
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p745
I7
sS'.thisN'
p746
I84
sS'.thisIndex'
p747
I2
sg15
(lp748
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp749
S'space'
p750
asg95
I2
sa(dp751
g16
(lp752
S'k'
asg18
S'N'
sS'.thisRepN'
p753
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p754
I8
sS'.thisN'
p755
I85
sS'.thisIndex'
p756
I3
sg15
(lp757
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp758
g16
(lp759
S'd'
asg18
S'N'
sS'.thisRepN'
p760
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p761
I9
sS'.thisN'
p762
I86
sS'.thisIndex'
p763
I2
sg15
(lp764
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp765
g16
(lp766
S'd'
asg18
S'N'
sS'.thisRepN'
p767
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p768
I10
sS'.thisN'
p769
I87
sS'.thisIndex'
p770
I7
sg15
(lp771
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp772
g16
(lp773
S'd'
asg18
S'Y'
sS'.thisRepN'
p774
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p775
I0
sS'.thisN'
p776
I88
sS'.thisIndex'
p777
I8
sg15
(lp778
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp779
S'space'
p780
asg95
I8
sa(dp781
g16
(lp782
S'd'
asg18
S'Y'
sS'.thisRepN'
p783
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p784
I1
sS'.thisN'
p785
I89
sS'.thisIndex'
p786
I1
sg15
(lp787
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp788
S'space'
p789
asg95
I1
sa(dp790
g16
(lp791
S'k'
asg18
S'Y'
sS'.thisRepN'
p792
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p793
I2
sS'.thisN'
p794
I90
sS'.thisIndex'
p795
I4
sg15
(lp796
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp797
S'space'
p798
asg95
I4
sa(dp799
g16
(lp800
S'd'
asg18
S'Y'
sS'.thisRepN'
p801
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p802
I3
sS'.thisN'
p803
I91
sS'.thisIndex'
p804
I0
sg15
(lp805
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp806
S'space'
p807
asg95
I0
sa(dp808
g16
(lp809
S'd'
asg18
S'Y'
sS'.thisRepN'
p810
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p811
I4
sS'.thisN'
p812
I92
sS'.thisIndex'
p813
I5
sg15
(lp814
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp815
S'space'
p816
asg95
I5
sa(dp817
g16
(lp818
S'k'
asg18
S'N'
sS'.thisRepN'
p819
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p820
I5
sS'.thisN'
p821
I93
sS'.thisIndex'
p822
I9
sg15
(lp823
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp824
g16
(lp825
S'k'
asg18
S'Y'
sS'.thisRepN'
p826
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p827
I6
sS'.thisN'
p828
I94
sS'.thisIndex'
p829
I8
sg15
(lp830
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp831
S'space'
p832
asg95
I8
sa(dp833
g16
(lp834
S'k'
asg18
S'N'
sS'.thisRepN'
p835
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p836
I7
sS'.thisN'
p837
I95
sS'.thisIndex'
p838
I8
sg15
(lp839
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp840
g16
(lp841
S'd'
asg18
S'N'
sS'.thisRepN'
p842
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p843
I8
sS'.thisN'
p844
I96
sS'.thisIndex'
p845
I6
sg15
(lp846
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp847
g16
(lp848
S'd'
asg18
S'N'
sS'.thisRepN'
p849
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p850
I9
sS'.thisN'
p851
I97
sS'.thisIndex'
p852
I4
sg15
(lp853
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp854
g16
(lp855
S'k'
asg18
S'N'
sS'.thisRepN'
p856
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p857
I10
sS'.thisN'
p858
I98
sS'.thisIndex'
p859
I7
sg15
(lp860
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp861
g16
(lp862
S'd'
asg18
S'N'
sg22
I46
sS'.thisN'
p863
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p864
I0
sS'.thisRepN'
p865
I9
sg21
I50
sS'.thisIndex'
p866
I3
sg23
I25
sg15
(lp867
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp868
g16
(lp869
S'd'
asg95
I1
sS'.thisRepN'
p870
I9
sg30
Vf
sg31
g32
sS'.thisTrialN'
p871
I1
sS'.thisN'
p872
I100
sS'.thisIndex'
p873
I1
sg15
(lp874
S'd'
asg17
S'Y'
sg14
I3
sa(dp875
g16
(lp876
S'k'
asg95
I5
sS'.thisRepN'
p877
I9
sg30
Vf
sg31
g32
sS'.thisTrialN'
p878
I2
sS'.thisN'
p879
I101
sS'.thisIndex'
p880
I5
sg15
(lp881
S'k'
asg17
S'Y'
sg14
I3
sa(dp882
g16
(lp883
S'd'
asg18
S'N'
sS'.thisRepN'
p884
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p885
I3
sS'.thisN'
p886
I102
sS'.thisIndex'
p887
I3
sg15
(lp888
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp889
g16
(lp890
S'd'
asg18
S'N'
sS'.thisRepN'
p891
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p892
I4
sS'.thisN'
p893
I103
sS'.thisIndex'
p894
I4
sg15
(lp895
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp896
g16
(lp897
S'd'
asg18
S'N'
sS'.thisRepN'
p898
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p899
I5
sS'.thisN'
p900
I104
sS'.thisIndex'
p901
I10
sg15
(lp902
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp903
g16
(lp904
S'k'
asg18
S'Y'
sS'.thisRepN'
p905
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p906
I6
sS'.thisN'
p907
I105
sS'.thisIndex'
p908
I6
sg15
(lp909
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp910
S'space'
p911
asg95
I6
sa(dp912
g16
(lp913
S'd'
asg18
S'N'
sS'.thisRepN'
p914
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p915
I7
sS'.thisN'
p916
I106
sS'.thisIndex'
p917
I0
sg15
(lp918
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp919
g16
(lp920
S'd'
asg18
S'N'
sS'.thisRepN'
p921
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p922
I8
sS'.thisN'
p923
I107
sS'.thisIndex'
p924
I5
sg15
(lp925
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp926
g16
(lp927
S'k'
asg18
S'N'
sS'.thisRepN'
p928
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p929
I9
sS'.thisN'
p930
I108
sS'.thisIndex'
p931
I8
sg15
(lp932
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp933
g16
(lp934
S'd'
asg18
S'Y'
sS'.thisRepN'
p935
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p936
I10
sS'.thisN'
p937
I109
sS'.thisIndex'
p938
I8
sg15
(lp939
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp940
S'space'
p941
asg95
I8
sa(dp942
g16
(lp943
S'k'
asg18
S'N'
sS'.thisRepN'
p944
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p945
I0
sS'.thisN'
p946
I110
sS'.thisIndex'
p947
I10
sg15
(lp948
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp949
g16
(lp950
S'k'
asg18
S'Y'
sS'.thisRepN'
p951
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p952
I1
sS'.thisN'
p953
I111
sS'.thisIndex'
p954
I8
sg15
(lp955
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp956
S'space'
p957
asg95
I8
sa(dp958
g16
(lp959
S'd'
asg18
S'Y'
sS'.thisRepN'
p960
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p961
I2
sS'.thisN'
p962
I112
sS'.thisIndex'
p963
I8
sg15
(lp964
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp965
S'space'
p966
asg95
I8
sa(dp967
g16
(lp968
S'k'
asg18
S'Y'
sS'.thisRepN'
p969
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p970
I3
sS'.thisN'
p971
I113
sS'.thisIndex'
p972
I6
sg15
(lp973
S'd'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
(lp974
S'space'
p975
asg95
I6
sa(dp976
g16
(lp977
S'k'
asg18
S'Y'
sS'.thisRepN'
p978
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p979
I4
sS'.thisN'
p980
I114
sS'.thisIndex'
p981
I6
sg15
(lp982
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp983
S'space'
p984
asg95
I6
sa(dp985
g16
(lp986
S'k'
asg18
S'Y'
sS'.thisRepN'
p987
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p988
I5
sS'.thisN'
p989
I115
sS'.thisIndex'
p990
I0
sg15
(lp991
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp992
S'space'
p993
asg95
I0
sa(dp994
g16
(lp995
S'k'
asg18
S'Y'
sS'.thisRepN'
p996
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p997
I6
sS'.thisN'
p998
I116
sS'.thisIndex'
p999
I9
sg15
(lp1000
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1001
S'space'
p1002
asg95
I9
sa(dp1003
g16
(lp1004
S'd'
asg18
S'Y'
sS'.thisRepN'
p1005
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1006
I7
sS'.thisN'
p1007
I117
sS'.thisIndex'
p1008
I4
sg15
(lp1009
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1010
S'space'
p1011
asg95
I4
sa(dp1012
g16
(lp1013
S'd'
asg18
S'Y'
sS'.thisRepN'
p1014
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1015
I8
sS'.thisN'
p1016
I118
sS'.thisIndex'
p1017
I10
sg15
(lp1018
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1019
S'space'
p1020
asg95
I10
sa(dp1021
g16
(lp1022
S'd'
asg18
S'Y'
sS'.thisRepN'
p1023
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1024
I9
sS'.thisN'
p1025
I119
sS'.thisIndex'
p1026
I9
sg15
(lp1027
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1028
S'space'
p1029
asg95
I9
sa(dp1030
g16
(lp1031
S'k'
asg18
S'N'
sS'.thisRepN'
p1032
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1033
I10
sS'.thisN'
p1034
I120
sS'.thisIndex'
p1035
I6
sg15
(lp1036
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1037
g16
(lp1038
S'k'
asg18
S'N'
sS'.thisRepN'
p1039
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1040
I0
sS'.thisN'
p1041
I121
sS'.thisIndex'
p1042
I0
sg15
(lp1043
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1044
g16
(lp1045
S'k'
asg18
S'Y'
sS'.thisRepN'
p1046
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1047
I1
sS'.thisN'
p1048
I122
sS'.thisIndex'
p1049
I8
sg15
(lp1050
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1051
S'space'
p1052
asg95
I8
sa(dp1053
g16
(lp1054
S'd'
asg18
S'Y'
sS'.thisRepN'
p1055
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1056
I2
sS'.thisN'
p1057
I123
sS'.thisIndex'
p1058
I10
sg15
(lp1059
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1060
S'space'
p1061
asg95
I10
sa(dp1062
g16
(lp1063
S'd'
asg18
S'N'
sS'.thisRepN'
p1064
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1065
I3
sS'.thisN'
p1066
I124
sS'.thisIndex'
p1067
I2
sg15
(lp1068
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1069
g16
(lp1070
S'k'
asg18
S'N'
sS'.thisRepN'
p1071
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1072
I4
sS'.thisN'
p1073
I125
sS'.thisIndex'
p1074
I3
sg15
(lp1075
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1076
g16
(lp1077
S'd'
asg18
S'Y'
sS'.thisRepN'
p1078
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1079
I5
sS'.thisN'
p1080
I126
sS'.thisIndex'
p1081
I6
sg15
(lp1082
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1083
S'space'
p1084
asg95
I6
sa(dp1085
g16
(lp1086
S'd'
asg18
S'Y'
sS'.thisRepN'
p1087
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1088
I6
sS'.thisN'
p1089
I127
sS'.thisIndex'
p1090
I7
sg15
(lp1091
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1092
S'space'
p1093
asg95
I7
sa(dp1094
g16
(lp1095
S'd'
asg18
S'Y'
sS'.thisRepN'
p1096
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1097
I7
sS'.thisN'
p1098
I128
sS'.thisIndex'
p1099
I0
sg15
(lp1100
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1101
S'space'
p1102
asg95
I0
sa(dp1103
g16
(lp1104
S'k'
asg18
S'N'
sS'.thisRepN'
p1105
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1106
I8
sS'.thisN'
p1107
I129
sS'.thisIndex'
p1108
I1
sg15
(lp1109
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1110
g16
(lp1111
S'k'
asg18
S'Y'
sS'.thisRepN'
p1112
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1113
I9
sS'.thisN'
p1114
I130
sS'.thisIndex'
p1115
I0
sg15
(lp1116
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1117
S'space'
p1118
asg95
I0
sa(dp1119
g16
(lp1120
S'd'
asg18
S'N'
sS'.thisRepN'
p1121
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1122
I10
sS'.thisN'
p1123
I131
sS'.thisIndex'
p1124
I0
sg15
(lp1125
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1126
g16
(lp1127
S'k'
asg18
S'N'
sS'.thisRepN'
p1128
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1129
I0
sS'.thisN'
p1130
I132
sS'.thisIndex'
p1131
I6
sg15
(lp1132
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1133
g16
(lp1134
S'd'
asg18
S'Y'
sS'.thisRepN'
p1135
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1136
I1
sS'.thisN'
p1137
I133
sS'.thisIndex'
p1138
I2
sg15
(lp1139
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1140
S'space'
p1141
asg95
I2
sa(dp1142
g16
(lp1143
S'k'
asg18
S'Y'
sS'.thisRepN'
p1144
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1145
I2
sS'.thisN'
p1146
I134
sS'.thisIndex'
p1147
I3
sg15
(lp1148
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1149
S'space'
p1150
asg95
I3
sa(dp1151
g16
(lp1152
S'k'
asg18
S'N'
sS'.thisRepN'
p1153
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1154
I3
sS'.thisN'
p1155
I135
sS'.thisIndex'
p1156
I10
sg15
(lp1157
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1158
g16
(lp1159
S'd'
asg18
S'N'
sS'.thisRepN'
p1160
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1161
I4
sS'.thisN'
p1162
I136
sS'.thisIndex'
p1163
I2
sg15
(lp1164
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1165
g16
(lp1166
S'd'
asg18
S'N'
sS'.thisRepN'
p1167
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1168
I5
sS'.thisN'
p1169
I137
sS'.thisIndex'
p1170
I1
sg15
(lp1171
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1172
g16
(lp1173
S'd'
asg18
S'Y'
sS'.thisRepN'
p1174
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1175
I6
sS'.thisN'
p1176
I138
sS'.thisIndex'
p1177
I4
sg15
(lp1178
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1179
S'space'
p1180
asg95
I4
sa(dp1181
g16
(lp1182
S'd'
asg18
S'Y'
sS'.thisRepN'
p1183
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1184
I7
sS'.thisN'
p1185
I139
sS'.thisIndex'
p1186
I4
sg15
(lp1187
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1188
S'space'
p1189
asg95
I4
sa(dp1190
g16
(lp1191
S'k'
asg18
S'N'
sS'.thisRepN'
p1192
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1193
I8
sS'.thisN'
p1194
I140
sS'.thisIndex'
p1195
I3
sg15
(lp1196
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1197
g16
(lp1198
S'd'
asg18
S'Y'
sS'.thisRepN'
p1199
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1200
I9
sS'.thisN'
p1201
I141
sS'.thisIndex'
p1202
I0
sg15
(lp1203
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1204
g16
(lp1205
S'd'
asg18
S'N'
sS'.thisRepN'
p1206
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1207
I10
sS'.thisN'
p1208
I142
sS'.thisIndex'
p1209
I3
sg15
(lp1210
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1211
g16
(lp1212
S'd'
asg18
S'N'
sS'.thisRepN'
p1213
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1214
I0
sS'.thisN'
p1215
I143
sS'.thisIndex'
p1216
I7
sg15
(lp1217
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1218
g16
(lp1219
S'd'
asg18
S'N'
sS'.thisRepN'
p1220
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1221
I1
sS'.thisN'
p1222
I144
sS'.thisIndex'
p1223
I9
sg15
(lp1224
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp1225
g16
(lp1226
S'd'
asg18
S'Y'
sS'.thisRepN'
p1227
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1228
I2
sS'.thisN'
p1229
I145
sS'.thisIndex'
p1230
I9
sg15
(lp1231
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1232
S'space'
p1233
asg95
I9
sa(dp1234
g16
(lp1235
S'd'
asg18
S'N'
sS'.thisRepN'
p1236
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1237
I3
sS'.thisN'
p1238
I146
sS'.thisIndex'
p1239
I0
sg15
(lp1240
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1241
g16
(lp1242
S'k'
asg18
S'Y'
sS'.thisRepN'
p1243
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1244
I4
sS'.thisN'
p1245
I147
sS'.thisIndex'
p1246
I8
sg15
(lp1247
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1248
S'space'
p1249
asg95
I8
sa(dp1250
g16
(lp1251
S'k'
asg18
S'N'
sS'.thisRepN'
p1252
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1253
I5
sS'.thisN'
p1254
I148
sS'.thisIndex'
p1255
I10
sg15
(lp1256
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1257
g16
(lp1258
S'k'
asg18
S'N'
sg22
I47
sS'.thisN'
p1259
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1260
I6
sS'.thisRepN'
p1261
I13
sg21
I48
sS'.thisIndex'
p1262
I0
sg23
I24
sg15
(lp1263
S'd'
asg30
Vf
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp1264
g16
(lp1265
S'k'
asg95
I1
sS'.thisRepN'
p1266
I13
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1267
I7
sS'.thisN'
p1268
I150
sS'.thisIndex'
p1269
I1
sg15
(lp1270
S'k'
asg17
S'Y'
sg14
I4
sa(dp1271
g16
(lp1272
S'k'
asg95
I1
sS'.thisRepN'
p1273
I13
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1274
I8
sS'.thisN'
p1275
I151
sS'.thisIndex'
p1276
I1
sg15
(lp1277
S'k'
asg17
S'Y'
sg14
I4
sa(dp1278
g16
(lp1279
S'k'
asg18
S'Y'
sS'.thisRepN'
p1280
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1281
I9
sS'.thisN'
p1282
I152
sS'.thisIndex'
p1283
I1
sg15
(lp1284
S'd'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
Nsg95
I1
sa(dp1285
g16
(lp1286
S'k'
asg18
S'Y'
sS'.thisRepN'
p1287
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1288
I10
sS'.thisN'
p1289
I153
sS'.thisIndex'
p1290
I3
sg15
(lp1291
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1292
S'space'
p1293
asg95
I3
sa(dp1294
g16
(lp1295
S'k'
asg18
S'Y'
sS'.thisRepN'
p1296
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1297
I0
sS'.thisN'
p1298
I154
sS'.thisIndex'
p1299
I3
sg15
(lp1300
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1301
S'space'
p1302
asg95
I3
sa(dp1303
g16
(lp1304
S'k'
asg18
S'N'
sS'.thisRepN'
p1305
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1306
I1
sS'.thisN'
p1307
I155
sS'.thisIndex'
p1308
I9
sg15
(lp1309
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1310
g16
(lp1311
S'k'
asg18
S'N'
sS'.thisRepN'
p1312
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1313
I2
sS'.thisN'
p1314
I156
sS'.thisIndex'
p1315
I9
sg15
(lp1316
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1317
g16
(lp1318
S'd'
asg18
S'N'
sS'.thisRepN'
p1319
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1320
I3
sS'.thisN'
p1321
I157
sS'.thisIndex'
p1322
I4
sg15
(lp1323
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1324
g16
(lp1325
S'd'
asg18
S'Y'
sS'.thisRepN'
p1326
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1327
I4
sS'.thisN'
p1328
I158
sS'.thisIndex'
p1329
I0
sg15
(lp1330
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1331
S'space'
p1332
asg95
I0
sa(dp1333
g16
(lp1334
S'k'
asg18
S'N'
sS'.thisRepN'
p1335
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1336
I5
sS'.thisN'
p1337
I159
sS'.thisIndex'
p1338
I0
sg15
(lp1339
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1340
g16
(lp1341
S'd'
asg18
S'Y'
sS'.thisRepN'
p1342
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1343
I6
sS'.thisN'
p1344
I160
sS'.thisIndex'
p1345
I1
sg15
(lp1346
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1347
S'space'
p1348
asg95
I1
sa(dp1349
g16
(lp1350
S'k'
asg18
S'Y'
sS'.thisRepN'
p1351
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1352
I7
sS'.thisN'
p1353
I161
sS'.thisIndex'
p1354
I7
sg15
(lp1355
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1356
S'space'
p1357
asg95
I7
sa(dp1358
g16
(lp1359
S'k'
asg18
S'N'
sS'.thisRepN'
p1360
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1361
I8
sS'.thisN'
p1362
I162
sS'.thisIndex'
p1363
I3
sg15
(lp1364
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1365
g16
(lp1366
S'd'
asg18
S'N'
sS'.thisRepN'
p1367
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1368
I9
sS'.thisN'
p1369
I163
sS'.thisIndex'
p1370
I8
sg15
(lp1371
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1372
g16
(lp1373
S'k'
asg18
S'Y'
sS'.thisRepN'
p1374
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1375
I10
sS'.thisN'
p1376
I164
sS'.thisIndex'
p1377
I2
sg15
(lp1378
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1379
S'space'
p1380
asg95
I2
sa(dp1381
g16
(lp1382
S'd'
asg18
S'Y'
sS'.thisRepN'
p1383
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1384
I0
sS'.thisN'
p1385
I165
sS'.thisIndex'
p1386
I1
sg15
(lp1387
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1388
S'space'
p1389
asg95
I1
sa(dp1390
g16
(lp1391
S'k'
asg18
S'Y'
sS'.thisRepN'
p1392
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1393
I1
sS'.thisN'
p1394
I166
sS'.thisIndex'
p1395
I7
sg15
(lp1396
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1397
S'space'
p1398
asg95
I7
sa(dp1399
g16
(lp1400
S'k'
asg18
S'N'
sS'.thisRepN'
p1401
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1402
I2
sS'.thisN'
p1403
I167
sS'.thisIndex'
p1404
I5
sg15
(lp1405
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1406
g16
(lp1407
S'd'
asg18
S'Y'
sS'.thisRepN'
p1408
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1409
I3
sS'.thisN'
p1410
I168
sS'.thisIndex'
p1411
I4
sg15
(lp1412
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1413
S'space'
p1414
asg95
I4
sa(dp1415
g16
(lp1416
S'd'
asg18
S'Y'
sS'.thisRepN'
p1417
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1418
I4
sS'.thisN'
p1419
I169
sS'.thisIndex'
p1420
I6
sg15
(lp1421
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1422
S'space'
p1423
asg95
I6
sa(dp1424
g16
(lp1425
S'd'
asg18
S'N'
sS'.thisRepN'
p1426
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1427
I5
sS'.thisN'
p1428
I170
sS'.thisIndex'
p1429
I9
sg15
(lp1430
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1431
g16
(lp1432
S'd'
asg18
S'N'
sS'.thisRepN'
p1433
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1434
I6
sS'.thisN'
p1435
I171
sS'.thisIndex'
p1436
I2
sg15
(lp1437
S'k'
asg30
Vf
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1438
g16
(lp1439
S'd'
asg18
S'Y'
sS'.thisRepN'
p1440
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1441
I7
sS'.thisN'
p1442
I172
sS'.thisIndex'
p1443
I4
sg15
(lp1444
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1445
S'space'
p1446
asg95
I4
sa(dp1447
g16
(lp1448
S'd'
asg18
S'N'
sS'.thisRepN'
p1449
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1450
I8
sS'.thisN'
p1451
I173
sS'.thisIndex'
p1452
I4
sg15
(lp1453
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1454
g16
(lp1455
S'k'
asg18
S'Y'
sS'.thisRepN'
p1456
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1457
I9
sS'.thisN'
p1458
I174
sS'.thisIndex'
p1459
I0
sg15
(lp1460
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1461
g16
(lp1462
S'k'
asg18
S'N'
sS'.thisRepN'
p1463
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1464
I10
sS'.thisN'
p1465
I175
sS'.thisIndex'
p1466
I3
sg15
(lp1467
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1468
g16
(lp1469
S'k'
asg18
S'N'
sS'.thisRepN'
p1470
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1471
I0
sS'.thisN'
p1472
I176
sS'.thisIndex'
p1473
I10
sg15
(lp1474
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1475
g16
(lp1476
S'k'
asg18
S'N'
sS'.thisRepN'
p1477
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1478
I1
sS'.thisN'
p1479
I177
sS'.thisIndex'
p1480
I1
sg15
(lp1481
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1482
g16
(lp1483
S'd'
asg18
S'N'
sS'.thisRepN'
p1484
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1485
I2
sS'.thisN'
p1486
I178
sS'.thisIndex'
p1487
I9
sg15
(lp1488
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1489
g16
(lp1490
S'd'
asg18
S'Y'
sS'.thisRepN'
p1491
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1492
I3
sS'.thisN'
p1493
I179
sS'.thisIndex'
p1494
I1
sg15
(lp1495
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1496
S'space'
p1497
asg95
I1
sa(dp1498
g16
(lp1499
S'k'
asg18
S'Y'
sS'.thisRepN'
p1500
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1501
I4
sS'.thisN'
p1502
I180
sS'.thisIndex'
p1503
I8
sg15
(lp1504
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1505
S'space'
p1506
asg95
I8
sa(dp1507
g16
(lp1508
S'd'
asg18
S'N'
sS'.thisRepN'
p1509
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1510
I5
sS'.thisN'
p1511
I181
sS'.thisIndex'
p1512
I3
sg15
(lp1513
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1514
g16
(lp1515
S'd'
asg18
S'N'
sS'.thisRepN'
p1516
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1517
I6
sS'.thisN'
p1518
I182
sS'.thisIndex'
p1519
I3
sg15
(lp1520
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1521
g16
(lp1522
S'd'
asg18
S'Y'
sS'.thisRepN'
p1523
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1524
I7
sS'.thisN'
p1525
I183
sS'.thisIndex'
p1526
I10
sg15
(lp1527
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1528
S'space'
p1529
asg95
I10
sa(dp1530
g16
(lp1531
S'd'
asg18
S'Y'
sS'.thisRepN'
p1532
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1533
I8
sS'.thisN'
p1534
I184
sS'.thisIndex'
p1535
I9
sg15
(lp1536
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1537
S'space'
p1538
asg95
I9
sa(dp1539
g16
(lp1540
S'k'
asg18
S'Y'
sS'.thisRepN'
p1541
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1542
I9
sS'.thisN'
p1543
I185
sS'.thisIndex'
p1544
I1
sg15
(lp1545
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1546
S'space'
p1547
asg95
I1
sa(dp1548
g16
(lp1549
S'd'
asg18
S'Y'
sS'.thisRepN'
p1550
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1551
I10
sS'.thisN'
p1552
I186
sS'.thisIndex'
p1553
I1
sg15
(lp1554
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1555
S'space'
p1556
asg95
I1
sa(dp1557
g16
(lp1558
S'k'
asg18
S'Y'
sS'.thisRepN'
p1559
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1560
I0
sS'.thisN'
p1561
I187
sS'.thisIndex'
p1562
I2
sg15
(lp1563
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1564
S'space'
p1565
asg95
I2
sa(dp1566
g16
(lp1567
S'k'
asg18
S'N'
sS'.thisRepN'
p1568
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1569
I1
sS'.thisN'
p1570
I188
sS'.thisIndex'
p1571
I3
sg15
(lp1572
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1573
g16
(lp1574
S'k'
asg18
S'Y'
sS'.thisRepN'
p1575
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1576
I2
sS'.thisN'
p1577
I189
sS'.thisIndex'
p1578
I5
sg15
(lp1579
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1580
S'space'
p1581
asg95
I5
sa(dp1582
g16
(lp1583
S'd'
asg18
S'Y'
sS'.thisRepN'
p1584
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1585
I3
sS'.thisN'
p1586
I190
sS'.thisIndex'
p1587
I4
sg15
(lp1588
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1589
S'space'
p1590
asg95
I4
sa(dp1591
g16
(lp1592
S'd'
asg18
S'Y'
sS'.thisRepN'
p1593
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1594
I4
sS'.thisN'
p1595
I191
sS'.thisIndex'
p1596
I2
sg15
(lp1597
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1598
S'space'
p1599
asg95
I2
sa(dp1600
g16
(lp1601
S'd'
asg18
S'Y'
sS'.thisRepN'
p1602
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1603
I5
sS'.thisN'
p1604
I192
sS'.thisIndex'
p1605
I6
sg15
(lp1606
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1607
S'space'
p1608
asg95
I6
sa(dp1609
g16
(lp1610
S'k'
asg18
S'Y'
sS'.thisRepN'
p1611
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1612
I6
sS'.thisN'
p1613
I193
sS'.thisIndex'
p1614
I3
sg15
(lp1615
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1616
S'space'
p1617
asg95
I3
sa(dp1618
g16
(lp1619
S'd'
asg18
S'N'
sS'.thisRepN'
p1620
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1621
I7
sS'.thisN'
p1622
I194
sS'.thisIndex'
p1623
I9
sg15
(lp1624
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1625
g16
(lp1626
S'k'
asg18
S'N'
sS'.thisRepN'
p1627
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1628
I8
sS'.thisN'
p1629
I195
sS'.thisIndex'
p1630
I2
sg15
(lp1631
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1632
g16
(lp1633
S'k'
asg18
S'N'
sS'.thisRepN'
p1634
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1635
I9
sS'.thisN'
p1636
I196
sS'.thisIndex'
p1637
I9
sg15
(lp1638
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1639
g16
(lp1640
S'd'
asg18
S'N'
sS'.thisRepN'
p1641
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1642
I10
sS'.thisN'
p1643
I197
sS'.thisIndex'
p1644
I2
sg15
(lp1645
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1646
g16
(lp1647
S'd'
asg18
S'N'
sS'.thisRepN'
p1648
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1649
I0
sS'.thisN'
p1650
I198
sS'.thisIndex'
p1651
I0
sg15
(lp1652
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1653
g16
(lp1654
S'd'
asg18
S'N'
sg22
I46
sS'.thisN'
p1655
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1656
I1
sS'.thisRepN'
p1657
I18
sg21
I48
sS'.thisIndex'
p1658
I3
sg23
I25
sg15
(lp1659
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1660
g16
(lp1661
S'd'
asg95
I5
sS'.thisRepN'
p1662
I18
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1663
I2
sS'.thisN'
p1664
I200
sS'.thisIndex'
p1665
I5
sg15
(lp1666
S'd'
asg17
S'Y'
sg14
I5
sa(dp1667
g16
(lp1668
S'k'
asg95
I0
sS'.thisRepN'
p1669
I18
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1670
I3
sS'.thisN'
p1671
I201
sS'.thisIndex'
p1672
I0
sg15
(lp1673
S'k'
asg17
S'Y'
sg14
I5
sa(dp1674
g16
(lp1675
S'd'
asg18
S'Y'
sS'.thisRepN'
p1676
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1677
I4
sS'.thisN'
p1678
I202
sS'.thisIndex'
p1679
I5
sg15
(lp1680
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1681
S'space'
p1682
asg95
I5
sa(dp1683
g16
(lp1684
S'k'
asg18
S'N'
sS'.thisRepN'
p1685
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1686
I5
sS'.thisN'
p1687
I203
sS'.thisIndex'
p1688
I8
sg15
(lp1689
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1690
g16
(lp1691
S'k'
asg18
S'N'
sS'.thisRepN'
p1692
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1693
I6
sS'.thisN'
p1694
I204
sS'.thisIndex'
p1695
I3
sg15
(lp1696
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1697
g16
(lp1698
S'd'
asg18
S'N'
sS'.thisRepN'
p1699
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1700
I7
sS'.thisN'
p1701
I205
sS'.thisIndex'
p1702
I2
sg15
(lp1703
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1704
g16
(lp1705
S'k'
asg18
S'Y'
sS'.thisRepN'
p1706
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1707
I8
sS'.thisN'
p1708
I206
sS'.thisIndex'
p1709
I9
sg15
(lp1710
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1711
S'space'
p1712
asg95
I9
sa(dp1713
g16
(lp1714
S'd'
asg18
S'Y'
sS'.thisRepN'
p1715
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1716
I9
sS'.thisN'
p1717
I207
sS'.thisIndex'
p1718
I0
sg15
(lp1719
S'k'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1720
g16
(lp1721
S'k'
asg18
S'N'
sS'.thisRepN'
p1722
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1723
I10
sS'.thisN'
p1724
I208
sS'.thisIndex'
p1725
I10
sg15
(lp1726
S'd'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I10
sa(dp1727
g16
(lp1728
S'd'
asg18
S'Y'
sS'.thisRepN'
p1729
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1730
I0
sS'.thisN'
p1731
I209
sS'.thisIndex'
p1732
I9
sg15
(lp1733
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1734
S'space'
p1735
asg95
I9
sa(dp1736
g16
(lp1737
S'k'
asg18
S'N'
sS'.thisRepN'
p1738
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1739
I1
sS'.thisN'
p1740
I210
sS'.thisIndex'
p1741
I0
sg15
(lp1742
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1743
g16
(lp1744
S'd'
asg18
S'N'
sS'.thisRepN'
p1745
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1746
I2
sS'.thisN'
p1747
I211
sS'.thisIndex'
p1748
I4
sg15
(lp1749
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1750
g16
(lp1751
S'd'
asg18
S'N'
sS'.thisRepN'
p1752
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1753
I3
sS'.thisN'
p1754
I212
sS'.thisIndex'
p1755
I7
sg15
(lp1756
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1757
g16
(lp1758
S'd'
asg18
S'N'
sS'.thisRepN'
p1759
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1760
I4
sS'.thisN'
p1761
I213
sS'.thisIndex'
p1762
I5
sg15
(lp1763
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1764
g16
(lp1765
S'd'
asg18
S'N'
sS'.thisRepN'
p1766
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1767
I5
sS'.thisN'
p1768
I214
sS'.thisIndex'
p1769
I2
sg15
(lp1770
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1771
g16
(lp1772
S'k'
asg18
S'N'
sS'.thisRepN'
p1773
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1774
I6
sS'.thisN'
p1775
I215
sS'.thisIndex'
p1776
I8
sg15
(lp1777
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1778
g16
(lp1779
S'd'
asg18
S'N'
sS'.thisRepN'
p1780
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1781
I7
sS'.thisN'
p1782
I216
sS'.thisIndex'
p1783
I7
sg15
(lp1784
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1785
g16
(lp1786
S'k'
asg18
S'Y'
sS'.thisRepN'
p1787
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1788
I8
sS'.thisN'
p1789
I217
sS'.thisIndex'
p1790
I0
sg15
(lp1791
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1792
S'space'
p1793
asg95
I0
sa(dp1794
g16
(lp1795
S'k'
asg18
S'Y'
sS'.thisRepN'
p1796
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1797
I9
sS'.thisN'
p1798
I218
sS'.thisIndex'
p1799
I4
sg15
(lp1800
S'd'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
(lp1801
S'space'
p1802
asg95
I4
sa(dp1803
g16
(lp1804
S'd'
asg18
S'N'
sS'.thisRepN'
p1805
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1806
I10
sS'.thisN'
p1807
I219
sS'.thisIndex'
p1808
I0
sg15
(lp1809
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1810
g16
(lp1811
S'k'
asg18
S'Y'
sS'.thisRepN'
p1812
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1813
I0
sS'.thisN'
p1814
I220
sS'.thisIndex'
p1815
I5
sg15
(lp1816
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1817
S'space'
p1818
asg95
I5
sa(dp1819
g16
(lp1820
S'k'
asg18
S'N'
sS'.thisRepN'
p1821
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1822
I1
sS'.thisN'
p1823
I221
sS'.thisIndex'
p1824
I9
sg15
(lp1825
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1826
g16
(lp1827
S'd'
asg18
S'N'
sS'.thisRepN'
p1828
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1829
I2
sS'.thisN'
p1830
I222
sS'.thisIndex'
p1831
I9
sg15
(lp1832
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1833
g16
(lp1834
S'd'
asg18
S'Y'
sS'.thisRepN'
p1835
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1836
I3
sS'.thisN'
p1837
I223
sS'.thisIndex'
p1838
I8
sg15
(lp1839
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1840
S'space'
p1841
asg95
I8
sa(dp1842
g16
(lp1843
S'k'
asg18
S'N'
sS'.thisRepN'
p1844
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1845
I4
sS'.thisN'
p1846
I224
sS'.thisIndex'
p1847
I6
sg15
(lp1848
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1849
g16
(lp1850
S'd'
asg18
S'N'
sS'.thisRepN'
p1851
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1852
I5
sS'.thisN'
p1853
I225
sS'.thisIndex'
p1854
I7
sg15
(lp1855
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1856
g16
(lp1857
S'd'
asg18
S'Y'
sS'.thisRepN'
p1858
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1859
I6
sS'.thisN'
p1860
I226
sS'.thisIndex'
p1861
I0
sg15
(lp1862
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1863
g16
(lp1864
S'd'
asg18
S'N'
sS'.thisRepN'
p1865
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1866
I7
sS'.thisN'
p1867
I227
sS'.thisIndex'
p1868
I3
sg15
(lp1869
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1870
g16
(lp1871
S'd'
asg18
S'Y'
sS'.thisRepN'
p1872
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1873
I8
sS'.thisN'
p1874
I228
sS'.thisIndex'
p1875
I6
sg15
(lp1876
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1877
S'space'
p1878
asg95
I6
sa(dp1879
g16
(lp1880
S'k'
asg18
S'N'
sS'.thisRepN'
p1881
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1882
I9
sS'.thisN'
p1883
I229
sS'.thisIndex'
p1884
I10
sg15
(lp1885
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1886
g16
(lp1887
S'k'
asg18
S'N'
sS'.thisRepN'
p1888
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1889
I10
sS'.thisN'
p1890
I230
sS'.thisIndex'
p1891
I1
sg15
(lp1892
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1893
g16
(lp1894
S'd'
asg18
S'Y'
sS'.thisRepN'
p1895
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1896
I0
sS'.thisN'
p1897
I231
sS'.thisIndex'
p1898
I3
sg15
(lp1899
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1900
S'space'
p1901
asg95
I3
sa(dp1902
g16
(lp1903
S'd'
asg18
S'Y'
sS'.thisRepN'
p1904
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1905
I1
sS'.thisN'
p1906
I232
sS'.thisIndex'
p1907
I1
sg15
(lp1908
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1909
S'space'
p1910
asg95
I1
sa(dp1911
g16
(lp1912
S'k'
asg18
S'N'
sS'.thisRepN'
p1913
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1914
I2
sS'.thisN'
p1915
I233
sS'.thisIndex'
p1916
I3
sg15
(lp1917
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1918
g16
(lp1919
S'k'
asg18
S'Y'
sS'.thisRepN'
p1920
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1921
I3
sS'.thisN'
p1922
I234
sS'.thisIndex'
p1923
I2
sg15
(lp1924
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1925
S'space'
p1926
asg95
I2
sa(dp1927
g16
(lp1928
S'k'
asg18
S'N'
sS'.thisRepN'
p1929
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1930
I4
sS'.thisN'
p1931
I235
sS'.thisIndex'
p1932
I9
sg15
(lp1933
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1934
g16
(lp1935
S'k'
asg18
S'N'
sS'.thisRepN'
p1936
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1937
I5
sS'.thisN'
p1938
I236
sS'.thisIndex'
p1939
I6
sg15
(lp1940
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1941
g16
(lp1942
S'k'
asg18
S'N'
sS'.thisRepN'
p1943
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1944
I6
sS'.thisN'
p1945
I237
sS'.thisIndex'
p1946
I9
sg15
(lp1947
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1948
g16
(lp1949
S'k'
asg18
S'N'
sS'.thisRepN'
p1950
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1951
I7
sS'.thisN'
p1952
I238
sS'.thisIndex'
p1953
I2
sg15
(lp1954
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1955
g16
(lp1956
S'd'
asg18
S'N'
sS'.thisRepN'
p1957
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1958
I8
sS'.thisN'
p1959
I239
sS'.thisIndex'
p1960
I4
sg15
(lp1961
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1962
g16
(lp1963
S'd'
asg18
S'Y'
sS'.thisRepN'
p1964
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1965
I9
sS'.thisN'
p1966
I240
sS'.thisIndex'
p1967
I4
sg15
(lp1968
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1969
S'space'
p1970
asg95
I4
sa(dp1971
g16
(lp1972
S'k'
asg18
S'Y'
sS'.thisRepN'
p1973
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1974
I10
sS'.thisN'
p1975
I241
sS'.thisIndex'
p1976
I2
sg15
(lp1977
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1978
S'space'
p1979
asg95
I2
sa(dp1980
g16
(lp1981
S'd'
asg18
S'N'
sS'.thisRepN'
p1982
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1983
I0
sS'.thisN'
p1984
I242
sS'.thisIndex'
p1985
I5
sg15
(lp1986
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1987
g16
(lp1988
S'k'
asg18
S'N'
sS'.thisRepN'
p1989
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1990
I1
sS'.thisN'
p1991
I243
sS'.thisIndex'
p1992
I8
sg15
(lp1993
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1994
g16
(lp1995
S'd'
asg18
S'Y'
sS'.thisRepN'
p1996
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1997
I2
sS'.thisN'
p1998
I244
sS'.thisIndex'
p1999
I7
sg15
(lp2000
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp2001
S'space'
p2002
asg95
I7
sa(dp2003
g16
(lp2004
S'd'
asg18
S'Y'
sS'.thisRepN'
p2005
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2006
I3
sS'.thisN'
p2007
I245
sS'.thisIndex'
p2008
I1
sg15
(lp2009
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp2010
g16
(lp2011
S'd'
asg18
S'Y'
sS'.thisRepN'
p2012
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2013
I4
sS'.thisN'
p2014
I246
sS'.thisIndex'
p2015
I7
sg15
(lp2016
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp2017
g16
(lp2018
S'k'
asg18
S'N'
sS'.thisRepN'
p2019
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2020
I5
sS'.thisN'
p2021
I247
sS'.thisIndex'
p2022
I2
sg15
(lp2023
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp2024
g16
(lp2025
S'k'
asg18
S'N'
sS'.thisRepN'
p2026
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2027
I6
sS'.thisN'
p2028
I248
sS'.thisIndex'
p2029
I7
sg15
(lp2030
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp2031
g16
(lp2032
S'd'
asg18
S'N'
sg22
I44
sS'.thisN'
p2033
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2034
I7
sS'.thisRepN'
p2035
I22
sg21
I47
sS'.thisIndex'
p2036
I7
sg23
I18
sg15
(lp2037
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp2038
g16
(lp2039
S'd'
asg95
I4
sS'.thisRepN'
p2040
I22
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2041
I8
sS'.thisN'
p2042
I250
sS'.thisIndex'
p2043
I4
sg15
(lp2044
S'd'
asg17
S'Y'
sg14
I6
sa(dp2045
g16
(lp2046
S'k'
asg95
I7
sS'.thisRepN'
p2047
I22
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2048
I9
sS'.thisN'
p2049
I251
sS'.thisIndex'
p2050
I7
sg15
(lp2051
S'k'
asg17
S'Y'
sg14
I6
sa(dp2052
g16
(lp2053
S'k'
asg18
S'Y'
sS'.thisRepN'
p2054
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2055
I10
sS'.thisN'
p2056
I252
sS'.thisIndex'
p2057
I2
sg15
(lp2058
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2059
S'space'
p2060
asg95
I2
sa(dp2061
g16
(lp2062
S'd'
asg18
S'N'
sS'.thisRepN'
p2063
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2064
I0
sS'.thisN'
p2065
I253
sS'.thisIndex'
p2066
I9
sg15
(lp2067
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2068
g16
(lp2069
S'k'
asg18
S'Y'
sS'.thisRepN'
p2070
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2071
I1
sS'.thisN'
p2072
I254
sS'.thisIndex'
p2073
I4
sg15
(lp2074
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2075
S'space'
p2076
asg95
I4
sa(dp2077
g16
(lp2078
S'k'
asg18
S'N'
sS'.thisRepN'
p2079
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2080
I2
sS'.thisN'
p2081
I255
sS'.thisIndex'
p2082
I4
sg15
(lp2083
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2084
g16
(lp2085
S'k'
asg18
S'N'
sS'.thisRepN'
p2086
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2087
I3
sS'.thisN'
p2088
I256
sS'.thisIndex'
p2089
I0
sg15
(lp2090
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2091
g16
(lp2092
S'k'
asg18
S'Y'
sS'.thisRepN'
p2093
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2094
I4
sS'.thisN'
p2095
I257
sS'.thisIndex'
p2096
I0
sg15
(lp2097
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2098
S'space'
p2099
asg95
I0
sa(dp2100
g16
(lp2101
S'k'
asg18
S'Y'
sS'.thisRepN'
p2102
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2103
I5
sS'.thisN'
p2104
I258
sS'.thisIndex'
p2105
I8
sg15
(lp2106
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2107
g16
(lp2108
S'd'
asg18
S'N'
sS'.thisRepN'
p2109
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2110
I6
sS'.thisN'
p2111
I259
sS'.thisIndex'
p2112
I5
sg15
(lp2113
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2114
g16
(lp2115
S'k'
asg18
S'Y'
sS'.thisRepN'
p2116
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2117
I7
sS'.thisN'
p2118
I260
sS'.thisIndex'
p2119
I9
sg15
(lp2120
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2121
S'space'
p2122
asg95
I9
sa(dp2123
g16
(lp2124
S'd'
asg18
S'N'
sS'.thisRepN'
p2125
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2126
I8
sS'.thisN'
p2127
I261
sS'.thisIndex'
p2128
I9
sg15
(lp2129
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2130
g16
(lp2131
S'd'
asg18
S'Y'
sS'.thisRepN'
p2132
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2133
I9
sS'.thisN'
p2134
I262
sS'.thisIndex'
p2135
I0
sg15
(lp2136
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2137
S'space'
p2138
asg95
I0
sa(dp2139
g16
(lp2140
S'd'
asg18
S'N'
sS'.thisRepN'
p2141
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2142
I10
sS'.thisN'
p2143
I263
sS'.thisIndex'
p2144
I8
sg15
(lp2145
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2146
g16
(lp2147
S'd'
asg18
S'N'
sS'.thisRepN'
p2148
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2149
I0
sS'.thisN'
p2150
I264
sS'.thisIndex'
p2151
I2
sg15
(lp2152
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2153
g16
(lp2154
S'k'
asg18
S'Y'
sS'.thisRepN'
p2155
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2156
I1
sS'.thisN'
p2157
I265
sS'.thisIndex'
p2158
I9
sg15
(lp2159
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2160
S'space'
p2161
asg95
I9
sa(dp2162
g16
(lp2163
S'd'
asg18
S'Y'
sS'.thisRepN'
p2164
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2165
I2
sS'.thisN'
p2166
I266
sS'.thisIndex'
p2167
I3
sg15
(lp2168
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2169
S'space'
p2170
asg95
I3
sa(dp2171
g16
(lp2172
S'd'
asg18
S'N'
sS'.thisRepN'
p2173
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2174
I3
sS'.thisN'
p2175
I267
sS'.thisIndex'
p2176
I4
sg15
(lp2177
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2178
g16
(lp2179
S'd'
asg18
S'Y'
sS'.thisRepN'
p2180
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2181
I4
sS'.thisN'
p2182
I268
sS'.thisIndex'
p2183
I10
sg15
(lp2184
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2185
g16
(lp2186
S'k'
asg18
S'Y'
sS'.thisRepN'
p2187
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2188
I5
sS'.thisN'
p2189
I269
sS'.thisIndex'
p2190
I1
sg15
(lp2191
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2192
S'space'
p2193
asg95
I1
sa(dp2194
g16
(lp2195
S'd'
asg18
S'N'
sS'.thisRepN'
p2196
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2197
I6
sS'.thisN'
p2198
I270
sS'.thisIndex'
p2199
I4
sg15
(lp2200
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2201
g16
(lp2202
S'k'
asg18
S'Y'
sS'.thisRepN'
p2203
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2204
I7
sS'.thisN'
p2205
I271
sS'.thisIndex'
p2206
I7
sg15
(lp2207
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2208
S'space'
p2209
asg95
I7
sa(dp2210
g16
(lp2211
S'd'
asg18
S'Y'
sS'.thisRepN'
p2212
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2213
I8
sS'.thisN'
p2214
I272
sS'.thisIndex'
p2215
I1
sg15
(lp2216
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2217
S'space'
p2218
asg95
I1
sa(dp2219
g16
(lp2220
S'd'
asg18
S'N'
sS'.thisRepN'
p2221
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2222
I9
sS'.thisN'
p2223
I273
sS'.thisIndex'
p2224
I8
sg15
(lp2225
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2226
g16
(lp2227
S'k'
asg18
S'N'
sS'.thisRepN'
p2228
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2229
I10
sS'.thisN'
p2230
I274
sS'.thisIndex'
p2231
I3
sg15
(lp2232
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2233
g16
(lp2234
S'd'
asg18
S'N'
sS'.thisRepN'
p2235
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2236
I0
sS'.thisN'
p2237
I275
sS'.thisIndex'
p2238
I4
sg15
(lp2239
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2240
g16
(lp2241
S'd'
asg18
S'Y'
sS'.thisRepN'
p2242
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2243
I1
sS'.thisN'
p2244
I276
sS'.thisIndex'
p2245
I2
sg15
(lp2246
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2247
S'space'
p2248
asg95
I2
sa(dp2249
g16
(lp2250
S'd'
asg18
S'Y'
sS'.thisRepN'
p2251
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2252
I2
sS'.thisN'
p2253
I277
sS'.thisIndex'
p2254
I1
sg15
(lp2255
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2256
S'space'
p2257
asg95
I1
sa(dp2258
g16
(lp2259
S'd'
asg18
S'N'
sS'.thisRepN'
p2260
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2261
I3
sS'.thisN'
p2262
I278
sS'.thisIndex'
p2263
I10
sg15
(lp2264
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2265
g16
(lp2266
S'k'
asg18
S'N'
sS'.thisRepN'
p2267
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2268
I4
sS'.thisN'
p2269
I279
sS'.thisIndex'
p2270
I2
sg15
(lp2271
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2272
g16
(lp2273
S'd'
asg18
S'Y'
sS'.thisRepN'
p2274
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2275
I5
sS'.thisN'
p2276
I280
sS'.thisIndex'
p2277
I1
sg15
(lp2278
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2279
S'space'
p2280
asg95
I1
sa(dp2281
g16
(lp2282
S'k'
asg18
S'N'
sS'.thisRepN'
p2283
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2284
I6
sS'.thisN'
p2285
I281
sS'.thisIndex'
p2286
I4
sg15
(lp2287
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2288
g16
(lp2289
S'd'
asg18
S'N'
sS'.thisRepN'
p2290
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2291
I7
sS'.thisN'
p2292
I282
sS'.thisIndex'
p2293
I1
sg15
(lp2294
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2295
g16
(lp2296
S'k'
asg18
S'N'
sS'.thisRepN'
p2297
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2298
I8
sS'.thisN'
p2299
I283
sS'.thisIndex'
p2300
I7
sg15
(lp2301
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2302
g16
(lp2303
S'k'
asg18
S'N'
sS'.thisRepN'
p2304
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2305
I9
sS'.thisN'
p2306
I284
sS'.thisIndex'
p2307
I7
sg15
(lp2308
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2309
g16
(lp2310
S'k'
asg18
S'Y'
sS'.thisRepN'
p2311
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2312
I10
sS'.thisN'
p2313
I285
sS'.thisIndex'
p2314
I9
sg15
(lp2315
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2316
S'space'
p2317
asg95
I9
sa(dp2318
g16
(lp2319
S'k'
asg18
S'Y'
sS'.thisRepN'
p2320
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2321
I0
sS'.thisN'
p2322
I286
sS'.thisIndex'
p2323
I2
sg15
(lp2324
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2325
S'space'
p2326
asg95
I2
sa(dp2327
g16
(lp2328
S'd'
asg18
S'Y'
sS'.thisRepN'
p2329
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2330
I1
sS'.thisN'
p2331
I287
sS'.thisIndex'
p2332
I10
sg15
(lp2333
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2334
S'space'
p2335
asg95
I10
sa(dp2336
g16
(lp2337
S'k'
asg18
S'Y'
sS'.thisRepN'
p2338
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2339
I2
sS'.thisN'
p2340
I288
sS'.thisIndex'
p2341
I8
sg15
(lp2342
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2343
S'space'
p2344
asg95
I8
sa(dp2345
g16
(lp2346
S'd'
asg18
S'N'
sS'.thisRepN'
p2347
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2348
I3
sS'.thisN'
p2349
I289
sS'.thisIndex'
p2350
I10
sg15
(lp2351
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2352
g16
(lp2353
S'd'
asg18
S'Y'
sS'.thisRepN'
p2354
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2355
I4
sS'.thisN'
p2356
I290
sS'.thisIndex'
p2357
I0
sg15
(lp2358
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2359
S'space'
p2360
asg95
I0
sa(dp2361
g16
(lp2362
S'd'
asg18
S'N'
sS'.thisRepN'
p2363
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2364
I5
sS'.thisN'
p2365
I291
sS'.thisIndex'
p2366
I0
sg15
(lp2367
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2368
g16
(lp2369
S'k'
asg18
S'Y'
sS'.thisRepN'
p2370
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2371
I6
sS'.thisN'
p2372
I292
sS'.thisIndex'
p2373
I6
sg15
(lp2374
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2375
S'space'
p2376
asg95
I6
sa(dp2377
g16
(lp2378
S'k'
asg18
S'N'
sS'.thisRepN'
p2379
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2380
I7
sS'.thisN'
p2381
I293
sS'.thisIndex'
p2382
I8
sg15
(lp2383
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2384
g16
(lp2385
S'k'
asg18
S'N'
sS'.thisRepN'
p2386
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2387
I8
sS'.thisN'
p2388
I294
sS'.thisIndex'
p2389
I7
sg15
(lp2390
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2391
g16
(lp2392
S'd'
asg18
S'N'
sS'.thisRepN'
p2393
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2394
I9
sS'.thisN'
p2395
I295
sS'.thisIndex'
p2396
I7
sg15
(lp2397
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2398
g16
(lp2399
S'k'
asg18
S'Y'
sS'.thisRepN'
p2400
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2401
I10
sS'.thisN'
p2402
I296
sS'.thisIndex'
p2403
I3
sg15
(lp2404
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2405
S'space'
p2406
asg95
I3
sa(dp2407
g16
(lp2408
S'k'
asg18
S'Y'
sS'.thisRepN'
p2409
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2410
I0
sS'.thisN'
p2411
I297
sS'.thisIndex'
p2412
I4
sg15
(lp2413
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2414
S'space'
p2415
asg95
I4
sa(dp2416
g16
(lp2417
S'd'
asg18
S'N'
sS'.thisRepN'
p2418
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2419
I1
sS'.thisN'
p2420
I298
sS'.thisIndex'
p2421
I9
sg15
(lp2422
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2423
g16
(lp2424
S'k'
asg18
S'N'
sg22
I46
sS'.thisN'
p2425
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2426
I2
sS'.thisRepN'
p2427
I27
sg21
I50
sS'.thisIndex'
p2428
I9
sg23
I23
sg15
(lp2429
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2430
g16
(lp2431
S'k'
asg95
I7
sS'.thisRepN'
p2432
I27
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2433
I3
sS'.thisN'
p2434
I300
sS'.thisIndex'
p2435
I7
sg15
(lp2436
S'k'
asg17
S'Y'
sg14
I7
sa(dp2437
g16
(lp2438
S'd'
asg95
I9
sS'.thisRepN'
p2439
I27
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2440
I4
sS'.thisN'
p2441
I301
sS'.thisIndex'
p2442
I9
sg15
(lp2443
S'd'
asg17
S'Y'
sg14
I7
sa(dp2444
g16
(lp2445
S'k'
asg18
S'Y'
sS'.thisRepN'
p2446
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2447
I5
sS'.thisN'
p2448
I302
sS'.thisIndex'
p2449
I0
sg15
(lp2450
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2451
S'space'
p2452
asg95
I0
sa(dp2453
g16
(lp2454
S'd'
asg18
S'Y'
sS'.thisRepN'
p2455
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2456
I6
sS'.thisN'
p2457
I303
sS'.thisIndex'
p2458
I2
sg15
(lp2459
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2460
S'space'
p2461
asg95
I2
sa(dp2462
g16
(lp2463
S'k'
asg18
S'N'
sS'.thisRepN'
p2464
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2465
I7
sS'.thisN'
p2466
I304
sS'.thisIndex'
p2467
I5
sg15
(lp2468
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2469
g16
(lp2470
S'k'
asg18
S'Y'
sS'.thisRepN'
p2471
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2472
I8
sS'.thisN'
p2473
I305
sS'.thisIndex'
p2474
I10
sg15
(lp2475
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2476
S'space'
p2477
asg95
I10
sa(dp2478
g16
(lp2479
S'd'
asg18
S'N'
sS'.thisRepN'
p2480
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2481
I9
sS'.thisN'
p2482
I306
sS'.thisIndex'
p2483
I10
sg15
(lp2484
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2485
g16
(lp2486
S'k'
asg18
S'N'
sS'.thisRepN'
p2487
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2488
I10
sS'.thisN'
p2489
I307
sS'.thisIndex'
p2490
I2
sg15
(lp2491
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2492
g16
(lp2493
S'k'
asg18
S'N'
sS'.thisRepN'
p2494
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2495
I0
sS'.thisN'
p2496
I308
sS'.thisIndex'
p2497
I4
sg15
(lp2498
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2499
g16
(lp2500
S'd'
asg18
S'N'
sS'.thisRepN'
p2501
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2502
I1
sS'.thisN'
p2503
I309
sS'.thisIndex'
p2504
I8
sg15
(lp2505
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2506
g16
(lp2507
S'd'
asg18
S'Y'
sS'.thisRepN'
p2508
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2509
I2
sS'.thisN'
p2510
I310
sS'.thisIndex'
p2511
I10
sg15
(lp2512
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2513
S'space'
p2514
asg95
I10
sa(dp2515
g16
(lp2516
S'd'
asg18
S'N'
sS'.thisRepN'
p2517
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2518
I3
sS'.thisN'
p2519
I311
sS'.thisIndex'
p2520
I5
sg15
(lp2521
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2522
g16
(lp2523
S'd'
asg18
S'Y'
sS'.thisRepN'
p2524
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2525
I4
sS'.thisN'
p2526
I312
sS'.thisIndex'
p2527
I6
sg15
(lp2528
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2529
S'space'
p2530
asg95
I6
sa(dp2531
g16
(lp2532
S'd'
asg18
S'Y'
sS'.thisRepN'
p2533
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2534
I5
sS'.thisN'
p2535
I313
sS'.thisIndex'
p2536
I3
sg15
(lp2537
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2538
S'space'
p2539
asg95
I3
sa(dp2540
g16
(lp2541
S'd'
asg18
S'Y'
sS'.thisRepN'
p2542
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2543
I6
sS'.thisN'
p2544
I314
sS'.thisIndex'
p2545
I7
sg15
(lp2546
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2547
S'space'
p2548
asg95
I7
sa(dp2549
g16
(lp2550
S'd'
asg18
S'N'
sS'.thisRepN'
p2551
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2552
I7
sS'.thisN'
p2553
I315
sS'.thisIndex'
p2554
I0
sg15
(lp2555
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2556
g16
(lp2557
S'k'
asg18
S'Y'
sS'.thisRepN'
p2558
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2559
I8
sS'.thisN'
p2560
I316
sS'.thisIndex'
p2561
I8
sg15
(lp2562
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2563
S'space'
p2564
asg95
I8
sa(dp2565
g16
(lp2566
S'k'
asg18
S'N'
sS'.thisRepN'
p2567
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2568
I9
sS'.thisN'
p2569
I317
sS'.thisIndex'
p2570
I0
sg15
(lp2571
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2572
g16
(lp2573
S'd'
asg18
S'N'
sS'.thisRepN'
p2574
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2575
I10
sS'.thisN'
p2576
I318
sS'.thisIndex'
p2577
I10
sg15
(lp2578
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2579
g16
(lp2580
S'k'
asg18
S'Y'
sS'.thisRepN'
p2581
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2582
I0
sS'.thisN'
p2583
I319
sS'.thisIndex'
p2584
I4
sg15
(lp2585
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2586
S'space'
p2587
asg95
I4
sa(dp2588
g16
(lp2589
S'd'
asg18
S'N'
sS'.thisRepN'
p2590
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2591
I1
sS'.thisN'
p2592
I320
sS'.thisIndex'
p2593
I10
sg15
(lp2594
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2595
g16
(lp2596
S'd'
asg18
S'N'
sS'.thisRepN'
p2597
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2598
I2
sS'.thisN'
p2599
I321
sS'.thisIndex'
p2600
I1
sg15
(lp2601
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2602
g16
(lp2603
S'd'
asg18
S'Y'
sS'.thisRepN'
p2604
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2605
I3
sS'.thisN'
p2606
I322
sS'.thisIndex'
p2607
I8
sg15
(lp2608
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2609
S'space'
p2610
asg95
I8
sa(dp2611
g16
(lp2612
S'k'
asg18
S'Y'
sS'.thisRepN'
p2613
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2614
I4
sS'.thisN'
p2615
I323
sS'.thisIndex'
p2616
I3
sg15
(lp2617
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2618
S'space'
p2619
asg95
I3
sa(dp2620
g16
(lp2621
S'k'
asg18
S'N'
sS'.thisRepN'
p2622
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2623
I5
sS'.thisN'
p2624
I324
sS'.thisIndex'
p2625
I5
sg15
(lp2626
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2627
g16
(lp2628
S'd'
asg18
S'Y'
sS'.thisRepN'
p2629
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2630
I6
sS'.thisN'
p2631
I325
sS'.thisIndex'
p2632
I3
sg15
(lp2633
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2634
S'space'
p2635
asg95
I3
sa(dp2636
g16
(lp2637
S'd'
asg18
S'N'
sS'.thisRepN'
p2638
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2639
I7
sS'.thisN'
p2640
I326
sS'.thisIndex'
p2641
I6
sg15
(lp2642
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2643
g16
(lp2644
S'k'
asg18
S'N'
sS'.thisRepN'
p2645
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2646
I8
sS'.thisN'
p2647
I327
sS'.thisIndex'
p2648
I0
sg15
(lp2649
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2650
g16
(lp2651
S'k'
asg18
S'N'
sS'.thisRepN'
p2652
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2653
I9
sS'.thisN'
p2654
I328
sS'.thisIndex'
p2655
I4
sg15
(lp2656
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2657
g16
(lp2658
S'd'
asg18
S'Y'
sS'.thisRepN'
p2659
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2660
I10
sS'.thisN'
p2661
I329
sS'.thisIndex'
p2662
I4
sg15
(lp2663
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2664
S'space'
p2665
asg95
I4
sa(dp2666
g16
(lp2667
S'k'
asg18
S'N'
sS'.thisRepN'
p2668
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2669
I0
sS'.thisN'
p2670
I330
sS'.thisIndex'
p2671
I0
sg15
(lp2672
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2673
g16
(lp2674
S'd'
asg18
S'Y'
sS'.thisRepN'
p2675
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2676
I1
sS'.thisN'
p2677
I331
sS'.thisIndex'
p2678
I2
sg15
(lp2679
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2680
S'space'
p2681
asg95
I2
sa(dp2682
g16
(lp2683
S'd'
asg18
S'N'
sS'.thisRepN'
p2684
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2685
I2
sS'.thisN'
p2686
I332
sS'.thisIndex'
p2687
I5
sg15
(lp2688
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2689
g16
(lp2690
S'd'
asg18
S'N'
sS'.thisRepN'
p2691
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2692
I3
sS'.thisN'
p2693
I333
sS'.thisIndex'
p2694
I5
sg15
(lp2695
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2696
g16
(lp2697
S'd'
asg18
S'N'
sS'.thisRepN'
p2698
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2699
I4
sS'.thisN'
p2700
I334
sS'.thisIndex'
p2701
I6
sg15
(lp2702
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2703
g16
(lp2704
S'd'
asg18
S'Y'
sS'.thisRepN'
p2705
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2706
I5
sS'.thisN'
p2707
I335
sS'.thisIndex'
p2708
I10
sg15
(lp2709
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2710
S'space'
p2711
asg95
I10
sa(dp2712
g16
(lp2713
S'd'
asg18
S'Y'
sS'.thisRepN'
p2714
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2715
I6
sS'.thisN'
p2716
I336
sS'.thisIndex'
p2717
I8
sg15
(lp2718
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2719
S'space'
p2720
asg95
I8
sa(dp2721
g16
(lp2722
S'd'
asg18
S'N'
sS'.thisRepN'
p2723
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2724
I7
sS'.thisN'
p2725
I337
sS'.thisIndex'
p2726
I6
sg15
(lp2727
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2728
g16
(lp2729
S'd'
asg18
S'N'
sS'.thisRepN'
p2730
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2731
I8
sS'.thisN'
p2732
I338
sS'.thisIndex'
p2733
I2
sg15
(lp2734
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2735
g16
(lp2736
S'k'
asg18
S'N'
sS'.thisRepN'
p2737
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2738
I9
sS'.thisN'
p2739
I339
sS'.thisIndex'
p2740
I10
sg15
(lp2741
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2742
g16
(lp2743
S'd'
asg18
S'N'
sS'.thisRepN'
p2744
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2745
I10
sS'.thisN'
p2746
I340
sS'.thisIndex'
p2747
I0
sg15
(lp2748
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2749
g16
(lp2750
S'k'
asg18
S'Y'
sS'.thisRepN'
p2751
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2752
I0
sS'.thisN'
p2753
I341
sS'.thisIndex'
p2754
I2
sg15
(lp2755
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2756
S'space'
p2757
asg95
I2
sa(dp2758
g16
(lp2759
S'd'
asg18
S'Y'
sS'.thisRepN'
p2760
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2761
I1
sS'.thisN'
p2762
I342
sS'.thisIndex'
p2763
I3
sg15
(lp2764
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2765
S'space'
p2766
asg95
I3
sa(dp2767
g16
(lp2768
S'k'
asg18
S'N'
sS'.thisRepN'
p2769
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2770
I2
sS'.thisN'
p2771
I343
sS'.thisIndex'
p2772
I7
sg15
(lp2773
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2774
g16
(lp2775
S'k'
asg18
S'N'
sS'.thisRepN'
p2776
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2777
I3
sS'.thisN'
p2778
I344
sS'.thisIndex'
p2779
I1
sg15
(lp2780
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2781
g16
(lp2782
S'd'
asg18
S'N'
sS'.thisRepN'
p2783
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2784
I4
sS'.thisN'
p2785
I345
sS'.thisIndex'
p2786
I3
sg15
(lp2787
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2788
g16
(lp2789
S'k'
asg18
S'Y'
sS'.thisRepN'
p2790
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2791
I5
sS'.thisN'
p2792
I346
sS'.thisIndex'
p2793
I9
sg15
(lp2794
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2795
S'space'
p2796
asg95
I9
sa(dp2797
g16
(lp2798
S'k'
asg18
S'Y'
sS'.thisRepN'
p2799
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2800
I6
sS'.thisN'
p2801
I347
sS'.thisIndex'
p2802
I10
sg15
(lp2803
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2804
S'space'
p2805
asg95
I10
sa(dp2806
g16
(lp2807
S'k'
asg18
S'Y'
sS'.thisRepN'
p2808
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2809
I7
sS'.thisN'
p2810
I348
sS'.thisIndex'
p2811
I9
sg15
(lp2812
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2813
S'space'
p2814
asg95
I9
sa(dp2815
g16
(lp2816
S'k'
asg18
S'Y'
sg22
I48
sS'.thisN'
p2817
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2818
I8
sS'.thisRepN'
p2819
I31
sg21
I50
sS'.thisIndex'
p2820
I2
sg23
I22
sg15
(lp2821
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2822
S'space'
p2823
asg95
I2
sa(dp2824
g16
(lp2825
S'k'
asg95
I8
sS'.thisRepN'
p2826
I31
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2827
I9
sS'.thisN'
p2828
I350
sS'.thisIndex'
p2829
I8
sg15
(lp2830
S'k'
asg17
S'Y'
sg14
I8
sa(dp2831
g16
(lp2832
S'k'
asg95
I0
sS'.thisRepN'
p2833
I31
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2834
I10
sS'.thisN'
p2835
I351
sS'.thisIndex'
p2836
I0
sg15
(lp2837
S'k'
asg17
S'Y'
sg14
I8
sa(dp2838
g16
(lp2839
S'd'
asg18
S'Y'
sS'.thisRepN'
p2840
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2841
I0
sS'.thisN'
p2842
I352
sS'.thisIndex'
p2843
I2
sg15
(lp2844
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2845
S'space'
p2846
asg95
I2
sa(dp2847
g16
(lp2848
S'd'
asg18
S'N'
sS'.thisRepN'
p2849
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2850
I1
sS'.thisN'
p2851
I353
sS'.thisIndex'
p2852
I10
sg15
(lp2853
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp2854
g16
(lp2855
S'k'
asg18
S'Y'
sS'.thisRepN'
p2856
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2857
I2
sS'.thisN'
p2858
I354
sS'.thisIndex'
p2859
I8
sg15
(lp2860
S'd'
asg30
Vf
sg17
S'N'
sg14
I8
sg19
(lp2861
S'space'
p2862
asg95
I8
sa(dp2863
g16
(lp2864
S'd'
asg18
S'N'
sS'.thisRepN'
p2865
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2866
I3
sS'.thisN'
p2867
I355
sS'.thisIndex'
p2868
I9
sg15
(lp2869
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2870
g16
(lp2871
S'd'
asg18
S'N'
sS'.thisRepN'
p2872
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2873
I4
sS'.thisN'
p2874
I356
sS'.thisIndex'
p2875
I5
sg15
(lp2876
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2877
g16
(lp2878
S'd'
asg18
S'Y'
sS'.thisRepN'
p2879
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2880
I5
sS'.thisN'
p2881
I357
sS'.thisIndex'
p2882
I7
sg15
(lp2883
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2884
S'space'
p2885
asg95
I7
sa(dp2886
g16
(lp2887
S'd'
asg18
S'Y'
sS'.thisRepN'
p2888
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2889
I6
sS'.thisN'
p2890
I358
sS'.thisIndex'
p2891
I6
sg15
(lp2892
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2893
S'space'
p2894
asg95
I6
sa(dp2895
g16
(lp2896
S'd'
asg18
S'Y'
sS'.thisRepN'
p2897
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2898
I7
sS'.thisN'
p2899
I359
sS'.thisIndex'
p2900
I6
sg15
(lp2901
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2902
S'space'
p2903
asg95
I6
sa(dp2904
g16
(lp2905
S'k'
asg18
S'Y'
sS'.thisRepN'
p2906
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2907
I8
sS'.thisN'
p2908
I360
sS'.thisIndex'
p2909
I4
sg15
(lp2910
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2911
S'space'
p2912
asg95
I4
sa(dp2913
g16
(lp2914
S'd'
asg18
S'N'
sS'.thisRepN'
p2915
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2916
I9
sS'.thisN'
p2917
I361
sS'.thisIndex'
p2918
I4
sg15
(lp2919
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2920
g16
(lp2921
S'd'
asg18
S'N'
sS'.thisRepN'
p2922
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2923
I10
sS'.thisN'
p2924
I362
sS'.thisIndex'
p2925
I6
sg15
(lp2926
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2927
g16
(lp2928
S'k'
asg18
S'Y'
sS'.thisRepN'
p2929
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2930
I0
sS'.thisN'
p2931
I363
sS'.thisIndex'
p2932
I2
sg15
(lp2933
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2934
S'space'
p2935
asg95
I2
sa(dp2936
g16
(lp2937
S'k'
asg18
S'Y'
sS'.thisRepN'
p2938
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2939
I1
sS'.thisN'
p2940
I364
sS'.thisIndex'
p2941
I4
sg15
(lp2942
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2943
S'space'
p2944
asg95
I4
sa(dp2945
g16
(lp2946
S'd'
asg18
S'Y'
sS'.thisRepN'
p2947
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2948
I2
sS'.thisN'
p2949
I365
sS'.thisIndex'
p2950
I8
sg15
(lp2951
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2952
S'space'
p2953
asg95
I8
sa(dp2954
g16
(lp2955
S'd'
asg18
S'Y'
sS'.thisRepN'
p2956
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2957
I3
sS'.thisN'
p2958
I366
sS'.thisIndex'
p2959
I6
sg15
(lp2960
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2961
S'space'
p2962
asg95
I6
sa(dp2963
g16
(lp2964
S'k'
asg18
S'Y'
sS'.thisRepN'
p2965
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2966
I4
sS'.thisN'
p2967
I367
sS'.thisIndex'
p2968
I7
sg15
(lp2969
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2970
S'space'
p2971
asg95
I7
sa(dp2972
g16
(lp2973
S'd'
asg18
S'N'
sS'.thisRepN'
p2974
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2975
I5
sS'.thisN'
p2976
I368
sS'.thisIndex'
p2977
I6
sg15
(lp2978
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2979
g16
(lp2980
S'k'
asg18
S'N'
sS'.thisRepN'
p2981
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2982
I6
sS'.thisN'
p2983
I369
sS'.thisIndex'
p2984
I8
sg15
(lp2985
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2986
g16
(lp2987
S'd'
asg18
S'Y'
sS'.thisRepN'
p2988
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2989
I7
sS'.thisN'
p2990
I370
sS'.thisIndex'
p2991
I5
sg15
(lp2992
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2993
S'space'
p2994
asg95
I5
sa(dp2995
g16
(lp2996
S'k'
asg18
S'Y'
sS'.thisRepN'
p2997
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2998
I8
sS'.thisN'
p2999
I371
sS'.thisIndex'
p3000
I9
sg15
(lp3001
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3002
S'space'
p3003
asg95
I9
sa(dp3004
g16
(lp3005
S'k'
asg18
S'Y'
sS'.thisRepN'
p3006
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3007
I9
sS'.thisN'
p3008
I372
sS'.thisIndex'
p3009
I5
sg15
(lp3010
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3011
S'space'
p3012
asg95
I5
sa(dp3013
g16
(lp3014
S'd'
asg18
S'N'
sS'.thisRepN'
p3015
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3016
I10
sS'.thisN'
p3017
I373
sS'.thisIndex'
p3018
I5
sg15
(lp3019
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3020
g16
(lp3021
S'k'
asg18
S'N'
sS'.thisRepN'
p3022
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3023
I0
sS'.thisN'
p3024
I374
sS'.thisIndex'
p3025
I4
sg15
(lp3026
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp3027
g16
(lp3028
S'k'
asg18
S'N'
sS'.thisRepN'
p3029
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3030
I1
sS'.thisN'
p3031
I375
sS'.thisIndex'
p3032
I5
sg15
(lp3033
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3034
g16
(lp3035
S'd'
asg18
S'N'
sS'.thisRepN'
p3036
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3037
I2
sS'.thisN'
p3038
I376
sS'.thisIndex'
p3039
I9
sg15
(lp3040
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3041
g16
(lp3042
S'd'
asg18
S'Y'
sS'.thisRepN'
p3043
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3044
I3
sS'.thisN'
p3045
I377
sS'.thisIndex'
p3046
I5
sg15
(lp3047
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3048
S'space'
p3049
asg95
I5
sa(dp3050
g16
(lp3051
S'd'
asg18
S'N'
sS'.thisRepN'
p3052
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3053
I4
sS'.thisN'
p3054
I378
sS'.thisIndex'
p3055
I4
sg15
(lp3056
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp3057
g16
(lp3058
S'k'
asg18
S'N'
sS'.thisRepN'
p3059
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3060
I5
sS'.thisN'
p3061
I379
sS'.thisIndex'
p3062
I2
sg15
(lp3063
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3064
g16
(lp3065
S'd'
asg18
S'Y'
sS'.thisRepN'
p3066
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3067
I6
sS'.thisN'
p3068
I380
sS'.thisIndex'
p3069
I0
sg15
(lp3070
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3071
S'space'
p3072
asg95
I0
sa(dp3073
g16
(lp3074
S'd'
asg18
S'N'
sS'.thisRepN'
p3075
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3076
I7
sS'.thisN'
p3077
I381
sS'.thisIndex'
p3078
I10
sg15
(lp3079
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3080
g16
(lp3081
S'd'
asg18
S'N'
sS'.thisRepN'
p3082
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3083
I8
sS'.thisN'
p3084
I382
sS'.thisIndex'
p3085
I10
sg15
(lp3086
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3087
g16
(lp3088
S'd'
asg18
S'Y'
sS'.thisRepN'
p3089
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3090
I9
sS'.thisN'
p3091
I383
sS'.thisIndex'
p3092
I3
sg15
(lp3093
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3094
S'd'
asg95
I3
sa(dp3095
g16
(lp3096
S'd'
asg18
S'Y'
sS'.thisRepN'
p3097
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3098
I10
sS'.thisN'
p3099
I384
sS'.thisIndex'
p3100
I0
sg15
(lp3101
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3102
S'space'
p3103
asg95
I0
sa(dp3104
g16
(lp3105
S'k'
asg18
S'N'
sS'.thisRepN'
p3106
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3107
I0
sS'.thisN'
p3108
I385
sS'.thisIndex'
p3109
I4
sg15
(lp3110
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp3111
g16
(lp3112
S'k'
asg18
S'N'
sS'.thisRepN'
p3113
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3114
I1
sS'.thisN'
p3115
I386
sS'.thisIndex'
p3116
I2
sg15
(lp3117
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3118
g16
(lp3119
S'd'
asg18
S'N'
sS'.thisRepN'
p3120
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3121
I2
sS'.thisN'
p3122
I387
sS'.thisIndex'
p3123
I10
sg15
(lp3124
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3125
g16
(lp3126
S'k'
asg18
S'N'
sS'.thisRepN'
p3127
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3128
I3
sS'.thisN'
p3129
I388
sS'.thisIndex'
p3130
I3
sg15
(lp3131
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3132
g16
(lp3133
S'd'
asg18
S'Y'
sS'.thisRepN'
p3134
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3135
I4
sS'.thisN'
p3136
I389
sS'.thisIndex'
p3137
I5
sg15
(lp3138
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3139
S'space'
p3140
asg95
I5
sa(dp3141
g16
(lp3142
S'k'
asg18
S'Y'
sS'.thisRepN'
p3143
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3144
I5
sS'.thisN'
p3145
I390
sS'.thisIndex'
p3146
I1
sg15
(lp3147
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3148
S'space'
p3149
asg95
I1
sa(dp3150
g16
(lp3151
S'k'
asg18
S'N'
sS'.thisRepN'
p3152
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3153
I6
sS'.thisN'
p3154
I391
sS'.thisIndex'
p3155
I1
sg15
(lp3156
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3157
g16
(lp3158
S'd'
asg18
S'Y'
sS'.thisRepN'
p3159
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3160
I7
sS'.thisN'
p3161
I392
sS'.thisIndex'
p3162
I4
sg15
(lp3163
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3164
S'space'
p3165
asg95
I4
sa(dp3166
g16
(lp3167
S'd'
asg18
S'N'
sS'.thisRepN'
p3168
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3169
I8
sS'.thisN'
p3170
I393
sS'.thisIndex'
p3171
I7
sg15
(lp3172
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3173
g16
(lp3174
S'k'
asg18
S'N'
sS'.thisRepN'
p3175
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3176
I9
sS'.thisN'
p3177
I394
sS'.thisIndex'
p3178
I7
sg15
(lp3179
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3180
g16
(lp3181
S'k'
asg18
S'Y'
sS'.thisRepN'
p3182
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3183
I10
sS'.thisN'
p3184
I395
sS'.thisIndex'
p3185
I5
sg15
(lp3186
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3187
S'space'
p3188
asg95
I5
sa(dp3189
g16
(lp3190
S'k'
asg18
S'N'
sS'.thisRepN'
p3191
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3192
I0
sS'.thisN'
p3193
I396
sS'.thisIndex'
p3194
I10
sg15
(lp3195
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3196
g16
(lp3197
S'k'
asg18
S'Y'
sS'.thisRepN'
p3198
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3199
I1
sS'.thisN'
p3200
I397
sS'.thisIndex'
p3201
I2
sg15
(lp3202
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3203
S'space'
p3204
asg95
I2
sa(dp3205
g16
(lp3206
S'k'
asg18
S'N'
sS'.thisRepN'
p3207
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3208
I2
sS'.thisN'
p3209
I398
sS'.thisIndex'
p3210
I8
sg15
(lp3211
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3212
g16
(lp3213
S'd'
asg18
S'N'
sg22
I47
sS'.thisN'
p3214
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3215
I3
sS'.thisRepN'
p3216
I36
sg21
I49
sS'.thisIndex'
p3217
I7
sg23
I23
sg15
(lp3218
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3219
g16
(lp3220
S'k'
asg95
I1
sS'.thisRepN'
p3221
I36
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3222
I4
sS'.thisN'
p3223
I400
sS'.thisIndex'
p3224
I1
sg15
(lp3225
S'k'
asg17
S'Y'
sg14
I9
sa(dp3226
g16
(lp3227
S'd'
asg95
I8
sS'.thisRepN'
p3228
I36
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3229
I5
sS'.thisN'
p3230
I401
sS'.thisIndex'
p3231
I8
sg15
(lp3232
S'd'
asg17
S'Y'
sg14
I9
sa(dp3233
g16
(lp3234
S'd'
asg18
S'Y'
sS'.thisRepN'
p3235
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3236
I6
sS'.thisN'
p3237
I402
sS'.thisIndex'
p3238
I6
sg15
(lp3239
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3240
S'space'
p3241
asg95
I6
sa(dp3242
g16
(lp3243
S'd'
asg18
S'N'
sS'.thisRepN'
p3244
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3245
I7
sS'.thisN'
p3246
I403
sS'.thisIndex'
p3247
I1
sg15
(lp3248
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3249
g16
(lp3250
S'd'
asg18
S'Y'
sS'.thisRepN'
p3251
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3252
I8
sS'.thisN'
p3253
I404
sS'.thisIndex'
p3254
I6
sg15
(lp3255
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3256
S'space'
p3257
asg95
I6
sa(dp3258
g16
(lp3259
S'd'
asg18
S'Y'
sS'.thisRepN'
p3260
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3261
I9
sS'.thisN'
p3262
I405
sS'.thisIndex'
p3263
I2
sg15
(lp3264
S'k'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
(lp3265
S'space'
p3266
asg95
I2
sa(dp3267
g16
(lp3268
S'd'
asg18
S'Y'
sS'.thisRepN'
p3269
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3270
I10
sS'.thisN'
p3271
I406
sS'.thisIndex'
p3272
I7
sg15
(lp3273
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3274
S'space'
p3275
asg95
I7
sa(dp3276
g16
(lp3277
S'd'
asg18
S'Y'
sS'.thisRepN'
p3278
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3279
I0
sS'.thisN'
p3280
I407
sS'.thisIndex'
p3281
I3
sg15
(lp3282
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3283
S'space'
p3284
asg95
I3
sa(dp3285
g16
(lp3286
S'd'
asg18
S'Y'
sS'.thisRepN'
p3287
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3288
I1
sS'.thisN'
p3289
I408
sS'.thisIndex'
p3290
I3
sg15
(lp3291
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3292
S'space'
p3293
asg95
I3
sa(dp3294
g16
(lp3295
S'k'
asg18
S'Y'
sS'.thisRepN'
p3296
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3297
I2
sS'.thisN'
p3298
I409
sS'.thisIndex'
p3299
I2
sg15
(lp3300
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3301
S'space'
p3302
asg95
I2
sa(dp3303
g16
(lp3304
S'k'
asg18
S'N'
sS'.thisRepN'
p3305
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3306
I3
sS'.thisN'
p3307
I410
sS'.thisIndex'
p3308
I9
sg15
(lp3309
S'd'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
Nsg95
I9
sa(dp3310
g16
(lp3311
S'k'
asg18
S'Y'
sS'.thisRepN'
p3312
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3313
I4
sS'.thisN'
p3314
I411
sS'.thisIndex'
p3315
I1
sg15
(lp3316
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3317
S'space'
p3318
asg95
I1
sa(dp3319
g16
(lp3320
S'd'
asg18
S'Y'
sS'.thisRepN'
p3321
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3322
I5
sS'.thisN'
p3323
I412
sS'.thisIndex'
p3324
I9
sg15
(lp3325
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3326
S'space'
p3327
asg95
I9
sa(dp3328
g16
(lp3329
S'k'
asg18
S'Y'
sS'.thisRepN'
p3330
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3331
I6
sS'.thisN'
p3332
I413
sS'.thisIndex'
p3333
I7
sg15
(lp3334
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3335
S'space'
p3336
asg95
I7
sa(dp3337
g16
(lp3338
S'k'
asg18
S'N'
sS'.thisRepN'
p3339
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3340
I7
sS'.thisN'
p3341
I414
sS'.thisIndex'
p3342
I5
sg15
(lp3343
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3344
g16
(lp3345
S'd'
asg18
S'N'
sS'.thisRepN'
p3346
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3347
I8
sS'.thisN'
p3348
I415
sS'.thisIndex'
p3349
I2
sg15
(lp3350
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3351
g16
(lp3352
S'k'
asg18
S'Y'
sS'.thisRepN'
p3353
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3354
I9
sS'.thisN'
p3355
I416
sS'.thisIndex'
p3356
I9
sg15
(lp3357
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3358
S'space'
p3359
asg95
I9
sa(dp3360
g16
(lp3361
S'k'
asg18
S'N'
sS'.thisRepN'
p3362
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3363
I10
sS'.thisN'
p3364
I417
sS'.thisIndex'
p3365
I8
sg15
(lp3366
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3367
g16
(lp3368
S'd'
asg18
S'N'
sS'.thisRepN'
p3369
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3370
I0
sS'.thisN'
p3371
I418
sS'.thisIndex'
p3372
I4
sg15
(lp3373
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3374
g16
(lp3375
S'd'
asg18
S'Y'
sS'.thisRepN'
p3376
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3377
I1
sS'.thisN'
p3378
I419
sS'.thisIndex'
p3379
I6
sg15
(lp3380
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3381
S'space'
p3382
asg95
I6
sa(dp3383
g16
(lp3384
S'k'
asg18
S'N'
sS'.thisRepN'
p3385
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3386
I2
sS'.thisN'
p3387
I420
sS'.thisIndex'
p3388
I3
sg15
(lp3389
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3390
g16
(lp3391
S'd'
asg18
S'N'
sS'.thisRepN'
p3392
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3393
I3
sS'.thisN'
p3394
I421
sS'.thisIndex'
p3395
I5
sg15
(lp3396
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3397
g16
(lp3398
S'd'
asg18
S'N'
sS'.thisRepN'
p3399
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3400
I4
sS'.thisN'
p3401
I422
sS'.thisIndex'
p3402
I4
sg15
(lp3403
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3404
g16
(lp3405
S'k'
asg18
S'N'
sS'.thisRepN'
p3406
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3407
I5
sS'.thisN'
p3408
I423
sS'.thisIndex'
p3409
I0
sg15
(lp3410
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3411
g16
(lp3412
S'k'
asg18
S'N'
sS'.thisRepN'
p3413
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3414
I6
sS'.thisN'
p3415
I424
sS'.thisIndex'
p3416
I0
sg15
(lp3417
S'd'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
Nsg95
I0
sa(dp3418
g16
(lp3419
S'k'
asg18
S'N'
sS'.thisRepN'
p3420
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3421
I7
sS'.thisN'
p3422
I425
sS'.thisIndex'
p3423
I7
sg15
(lp3424
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3425
g16
(lp3426
S'd'
asg18
S'N'
sS'.thisRepN'
p3427
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3428
I8
sS'.thisN'
p3429
I426
sS'.thisIndex'
p3430
I4
sg15
(lp3431
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3432
g16
(lp3433
S'd'
asg18
S'N'
sS'.thisRepN'
p3434
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3435
I9
sS'.thisN'
p3436
I427
sS'.thisIndex'
p3437
I7
sg15
(lp3438
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3439
g16
(lp3440
S'k'
asg18
S'N'
sS'.thisRepN'
p3441
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3442
I10
sS'.thisN'
p3443
I428
sS'.thisIndex'
p3444
I0
sg15
(lp3445
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3446
g16
(lp3447
S'd'
asg18
S'Y'
sS'.thisRepN'
p3448
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3449
I0
sS'.thisN'
p3450
I429
sS'.thisIndex'
p3451
I9
sg15
(lp3452
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3453
S'space'
p3454
asg95
I9
sa(dp3455
g16
(lp3456
S'k'
asg18
S'Y'
sS'.thisRepN'
p3457
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3458
I1
sS'.thisN'
p3459
I430
sS'.thisIndex'
p3460
I0
sg15
(lp3461
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3462
g16
(lp3463
S'd'
asg18
S'N'
sS'.thisRepN'
p3464
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3465
I2
sS'.thisN'
p3466
I431
sS'.thisIndex'
p3467
I1
sg15
(lp3468
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3469
g16
(lp3470
S'd'
asg18
S'Y'
sS'.thisRepN'
p3471
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3472
I3
sS'.thisN'
p3473
I432
sS'.thisIndex'
p3474
I7
sg15
(lp3475
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3476
S'space'
p3477
asg95
I7
sa(dp3478
g16
(lp3479
S'd'
asg18
S'N'
sS'.thisRepN'
p3480
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3481
I4
sS'.thisN'
p3482
I433
sS'.thisIndex'
p3483
I7
sg15
(lp3484
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3485
g16
(lp3486
S'd'
asg18
S'Y'
sS'.thisRepN'
p3487
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3488
I5
sS'.thisN'
p3489
I434
sS'.thisIndex'
p3490
I4
sg15
(lp3491
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3492
S'space'
p3493
asg95
I4
sa(dp3494
g16
(lp3495
S'd'
asg18
S'N'
sS'.thisRepN'
p3496
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3497
I6
sS'.thisN'
p3498
I435
sS'.thisIndex'
p3499
I2
sg15
(lp3500
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3501
g16
(lp3502
S'k'
asg18
S'Y'
sS'.thisRepN'
p3503
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3504
I7
sS'.thisN'
p3505
I436
sS'.thisIndex'
p3506
I8
sg15
(lp3507
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3508
S'space'
p3509
asg95
I8
sa(dp3510
g16
(lp3511
S'k'
asg18
S'N'
sS'.thisRepN'
p3512
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3513
I8
sS'.thisN'
p3514
I437
sS'.thisIndex'
p3515
I7
sg15
(lp3516
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3517
g16
(lp3518
S'd'
asg18
S'N'
sS'.thisRepN'
p3519
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3520
I9
sS'.thisN'
p3521
I438
sS'.thisIndex'
p3522
I8
sg15
(lp3523
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3524
g16
(lp3525
S'k'
asg18
S'Y'
sS'.thisRepN'
p3526
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3527
I10
sS'.thisN'
p3528
I439
sS'.thisIndex'
p3529
I10
sg15
(lp3530
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3531
g16
(lp3532
S'k'
asg18
S'N'
sS'.thisRepN'
p3533
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3534
I0
sS'.thisN'
p3535
I440
sS'.thisIndex'
p3536
I3
sg15
(lp3537
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3538
g16
(lp3539
S'k'
asg18
S'N'
sS'.thisRepN'
p3540
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3541
I1
sS'.thisN'
p3542
I441
sS'.thisIndex'
p3543
I3
sg15
(lp3544
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3545
g16
(lp3546
S'k'
asg18
S'Y'
sS'.thisRepN'
p3547
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3548
I2
sS'.thisN'
p3549
I442
sS'.thisIndex'
p3550
I6
sg15
(lp3551
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3552
S'space'
p3553
asg95
I6
sa(dp3554
g16
(lp3555
S'k'
asg18
S'Y'
sS'.thisRepN'
p3556
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3557
I3
sS'.thisN'
p3558
I443
sS'.thisIndex'
p3559
I5
sg15
(lp3560
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3561
S'space'
p3562
asg95
I5
sa(dp3563
g16
(lp3564
S'k'
asg18
S'N'
sS'.thisRepN'
p3565
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3566
I4
sS'.thisN'
p3567
I444
sS'.thisIndex'
p3568
I1
sg15
(lp3569
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3570
g16
(lp3571
S'k'
asg18
S'N'
sS'.thisRepN'
p3572
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3573
I5
sS'.thisN'
p3574
I445
sS'.thisIndex'
p3575
I8
sg15
(lp3576
S'd'
asg30
Vf
sg17
S'N'
sg14
I9
sg19
Nsg95
I8
sa(dp3577
g16
(lp3578
S'k'
asg18
S'N'
sS'.thisRepN'
p3579
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3580
I6
sS'.thisN'
p3581
I446
sS'.thisIndex'
p3582
I10
sg15
(lp3583
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3584
g16
(lp3585
S'k'
asg18
S'Y'
sS'.thisRepN'
p3586
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3587
I7
sS'.thisN'
p3588
I447
sS'.thisIndex'
p3589
I8
sg15
(lp3590
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3591
g16
(lp3592
S'k'
asg18
S'Y'
sS'.thisRepN'
p3593
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3594
I8
sS'.thisN'
p3595
I448
sS'.thisIndex'
p3596
I5
sg15
(lp3597
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3598
g16
(lp3599
S'k'
asg18
S'Y'
sg22
I43
sS'.thisN'
p3600
I449
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3601
I9
sS'.thisRepN'
p3602
I40
sg21
I46
sS'.thisIndex'
p3603
I2
sg23
I23
sg15
(lp3604
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3605
g16
(lp3606
S'd'
asg95
I8
sS'.thisRepN'
p3607
I40
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3608
I10
sS'.thisN'
p3609
I450
sS'.thisIndex'
p3610
I8
sg15
(lp3611
S'd'
asg17
S'Y'
sg14
I10
sa(dp3612
g16
(lp3613
S'd'
asg95
I5
sS'.thisRepN'
p3614
I41
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3615
I0
sS'.thisN'
p3616
I451
sS'.thisIndex'
p3617
I5
sg15
(lp3618
S'd'
asg17
S'Y'
sg14
I10
sa(dp3619
g16
(lp3620
S'd'
asg18
S'Y'
sS'.thisRepN'
p3621
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3622
I1
sS'.thisN'
p3623
I452
sS'.thisIndex'
p3624
I2
sg15
(lp3625
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3626
S'space'
p3627
asg95
I2
sa(dp3628
g16
(lp3629
S'k'
asg18
S'N'
sS'.thisRepN'
p3630
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3631
I2
sS'.thisN'
p3632
I453
sS'.thisIndex'
p3633
I6
sg15
(lp3634
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3635
g16
(lp3636
S'd'
asg18
S'N'
sS'.thisRepN'
p3637
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3638
I3
sS'.thisN'
p3639
I454
sS'.thisIndex'
p3640
I9
sg15
(lp3641
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3642
g16
(lp3643
S'k'
asg18
S'Y'
sS'.thisRepN'
p3644
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3645
I4
sS'.thisN'
p3646
I455
sS'.thisIndex'
p3647
I7
sg15
(lp3648
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3649
S'space'
p3650
asg95
I7
sa(dp3651
g16
(lp3652
S'd'
asg18
S'Y'
sS'.thisRepN'
p3653
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3654
I5
sS'.thisN'
p3655
I456
sS'.thisIndex'
p3656
I10
sg15
(lp3657
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3658
S'space'
p3659
asg95
I10
sa(dp3660
g16
(lp3661
S'd'
asg18
S'Y'
sS'.thisRepN'
p3662
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3663
I6
sS'.thisN'
p3664
I457
sS'.thisIndex'
p3665
I10
sg15
(lp3666
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3667
S'space'
p3668
asg95
I10
sa(dp3669
g16
(lp3670
S'k'
asg18
S'Y'
sS'.thisRepN'
p3671
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3672
I7
sS'.thisN'
p3673
I458
sS'.thisIndex'
p3674
I1
sg15
(lp3675
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3676
S'space'
p3677
asg95
I1
sa(dp3678
g16
(lp3679
S'k'
asg18
S'N'
sS'.thisRepN'
p3680
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3681
I8
sS'.thisN'
p3682
I459
sS'.thisIndex'
p3683
I6
sg15
(lp3684
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3685
g16
(lp3686
S'd'
asg18
S'N'
sS'.thisRepN'
p3687
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3688
I9
sS'.thisN'
p3689
I460
sS'.thisIndex'
p3690
I0
sg15
(lp3691
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3692
g16
(lp3693
S'k'
asg18
S'N'
sS'.thisRepN'
p3694
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3695
I10
sS'.thisN'
p3696
I461
sS'.thisIndex'
p3697
I7
sg15
(lp3698
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3699
g16
(lp3700
S'k'
asg18
S'Y'
sS'.thisRepN'
p3701
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3702
I0
sS'.thisN'
p3703
I462
sS'.thisIndex'
p3704
I8
sg15
(lp3705
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3706
S'space'
p3707
asg95
I8
sa(dp3708
g16
(lp3709
S'd'
asg18
S'Y'
sS'.thisRepN'
p3710
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3711
I1
sS'.thisN'
p3712
I463
sS'.thisIndex'
p3713
I1
sg15
(lp3714
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3715
S'space'
p3716
asg95
I1
sa(dp3717
g16
(lp3718
S'k'
asg18
S'Y'
sS'.thisRepN'
p3719
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3720
I2
sS'.thisN'
p3721
I464
sS'.thisIndex'
p3722
I5
sg15
(lp3723
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3724
S'space'
p3725
asg95
I5
sa(dp3726
g16
(lp3727
S'd'
asg18
S'Y'
sS'.thisRepN'
p3728
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3729
I3
sS'.thisN'
p3730
I465
sS'.thisIndex'
p3731
I2
sg15
(lp3732
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3733
S'space'
p3734
asg95
I2
sa(dp3735
g16
(lp3736
S'd'
asg18
S'Y'
sS'.thisRepN'
p3737
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3738
I4
sS'.thisN'
p3739
I466
sS'.thisIndex'
p3740
I1
sg15
(lp3741
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3742
S'space'
p3743
asg95
I1
sa(dp3744
g16
(lp3745
S'k'
asg18
S'N'
sS'.thisRepN'
p3746
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3747
I5
sS'.thisN'
p3748
I467
sS'.thisIndex'
p3749
I2
sg15
(lp3750
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3751
g16
(lp3752
S'd'
asg18
S'N'
sS'.thisRepN'
p3753
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3754
I6
sS'.thisN'
p3755
I468
sS'.thisIndex'
p3756
I6
sg15
(lp3757
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3758
g16
(lp3759
S'k'
asg18
S'Y'
sS'.thisRepN'
p3760
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3761
I7
sS'.thisN'
p3762
I469
sS'.thisIndex'
p3763
I7
sg15
(lp3764
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3765
S'space'
p3766
asg95
I7
sa(dp3767
g16
(lp3768
S'k'
asg18
S'Y'
sS'.thisRepN'
p3769
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3770
I8
sS'.thisN'
p3771
I470
sS'.thisIndex'
p3772
I6
sg15
(lp3773
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3774
S'space'
p3775
asg95
I6
sa(dp3776
g16
(lp3777
S'd'
asg18
S'N'
sS'.thisRepN'
p3778
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3779
I9
sS'.thisN'
p3780
I471
sS'.thisIndex'
p3781
I6
sg15
(lp3782
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3783
g16
(lp3784
S'd'
asg18
S'N'
sS'.thisRepN'
p3785
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3786
I10
sS'.thisN'
p3787
I472
sS'.thisIndex'
p3788
I9
sg15
(lp3789
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3790
g16
(lp3791
S'k'
asg18
S'Y'
sS'.thisRepN'
p3792
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3793
I0
sS'.thisN'
p3794
I473
sS'.thisIndex'
p3795
I1
sg15
(lp3796
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3797
S'space'
p3798
asg95
I1
sa(dp3799
g16
(lp3800
S'd'
asg18
S'N'
sS'.thisRepN'
p3801
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3802
I1
sS'.thisN'
p3803
I474
sS'.thisIndex'
p3804
I5
sg15
(lp3805
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3806
g16
(lp3807
S'd'
asg18
S'Y'
sS'.thisRepN'
p3808
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3809
I2
sS'.thisN'
p3810
I475
sS'.thisIndex'
p3811
I5
sg15
(lp3812
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3813
S'space'
p3814
asg95
I5
sa(dp3815
g16
(lp3816
S'd'
asg18
S'N'
sS'.thisRepN'
p3817
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3818
I3
sS'.thisN'
p3819
I476
sS'.thisIndex'
p3820
I2
sg15
(lp3821
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3822
g16
(lp3823
S'k'
asg18
S'Y'
sS'.thisRepN'
p3824
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3825
I4
sS'.thisN'
p3826
I477
sS'.thisIndex'
p3827
I9
sg15
(lp3828
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3829
S'space'
p3830
asg95
I9
sa(dp3831
g16
(lp3832
S'd'
asg18
S'N'
sS'.thisRepN'
p3833
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3834
I5
sS'.thisN'
p3835
I478
sS'.thisIndex'
p3836
I9
sg15
(lp3837
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3838
g16
(lp3839
S'k'
asg18
S'N'
sS'.thisRepN'
p3840
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3841
I6
sS'.thisN'
p3842
I479
sS'.thisIndex'
p3843
I5
sg15
(lp3844
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3845
g16
(lp3846
S'd'
asg18
S'Y'
sS'.thisRepN'
p3847
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3848
I7
sS'.thisN'
p3849
I480
sS'.thisIndex'
p3850
I1
sg15
(lp3851
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3852
S'space'
p3853
asg95
I1
sa(dp3854
g16
(lp3855
S'k'
asg18
S'Y'
sS'.thisRepN'
p3856
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3857
I8
sS'.thisN'
p3858
I481
sS'.thisIndex'
p3859
I0
sg15
(lp3860
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3861
g16
(lp3862
S'k'
asg18
S'Y'
sS'.thisRepN'
p3863
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3864
I9
sS'.thisN'
p3865
I482
sS'.thisIndex'
p3866
I5
sg15
(lp3867
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3868
g16
(lp3869
S'k'
asg18
S'Y'
sS'.thisRepN'
p3870
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3871
I10
sS'.thisN'
p3872
I483
sS'.thisIndex'
p3873
I8
sg15
(lp3874
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3875
S'space'
p3876
asg95
I8
sa(dp3877
g16
(lp3878
S'd'
asg18
S'Y'
sS'.thisRepN'
p3879
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3880
I0
sS'.thisN'
p3881
I484
sS'.thisIndex'
p3882
I3
sg15
(lp3883
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3884
S'space'
p3885
asg95
I3
sa(dp3886
g16
(lp3887
S'd'
asg18
S'N'
sS'.thisRepN'
p3888
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3889
I1
sS'.thisN'
p3890
I485
sS'.thisIndex'
p3891
I1
sg15
(lp3892
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3893
g16
(lp3894
S'd'
asg18
S'Y'
sS'.thisRepN'
p3895
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3896
I2
sS'.thisN'
p3897
I486
sS'.thisIndex'
p3898
I6
sg15
(lp3899
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3900
S'space'
p3901
asg95
I6
sa(dp3902
g16
(lp3903
S'k'
asg18
S'Y'
sS'.thisRepN'
p3904
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3905
I3
sS'.thisN'
p3906
I487
sS'.thisIndex'
p3907
I6
sg15
(lp3908
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3909
S'space'
p3910
asg95
I6
sa(dp3911
g16
(lp3912
S'k'
asg18
S'N'
sS'.thisRepN'
p3913
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3914
I4
sS'.thisN'
p3915
I488
sS'.thisIndex'
p3916
I6
sg15
(lp3917
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3918
g16
(lp3919
S'k'
asg18
S'N'
sS'.thisRepN'
p3920
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3921
I5
sS'.thisN'
p3922
I489
sS'.thisIndex'
p3923
I6
sg15
(lp3924
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3925
g16
(lp3926
S'd'
asg18
S'N'
sS'.thisRepN'
p3927
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3928
I6
sS'.thisN'
p3929
I490
sS'.thisIndex'
p3930
I1
sg15
(lp3931
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3932
g16
(lp3933
S'k'
asg18
S'N'
sS'.thisRepN'
p3934
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3935
I7
sS'.thisN'
p3936
I491
sS'.thisIndex'
p3937
I9
sg15
(lp3938
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3939
g16
(lp3940
S'k'
asg18
S'N'
sS'.thisRepN'
p3941
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3942
I8
sS'.thisN'
p3943
I492
sS'.thisIndex'
p3944
I9
sg15
(lp3945
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3946
g16
(lp3947
S'd'
asg18
S'Y'
sS'.thisRepN'
p3948
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3949
I9
sS'.thisN'
p3950
I493
sS'.thisIndex'
p3951
I4
sg15
(lp3952
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3953
S'space'
p3954
asg95
I4
sa(dp3955
g16
(lp3956
S'd'
asg18
S'N'
sS'.thisRepN'
p3957
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3958
I10
sS'.thisN'
p3959
I494
sS'.thisIndex'
p3960
I9
sg15
(lp3961
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3962
g16
(lp3963
S'd'
asg18
S'Y'
sS'.thisRepN'
p3964
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3965
I0
sS'.thisN'
p3966
I495
sS'.thisIndex'
p3967
I8
sg15
(lp3968
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3969
S'space'
p3970
asg95
I8
sa(dp3971
g16
(lp3972
S'd'
asg18
S'N'
sS'.thisRepN'
p3973
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3974
I1
sS'.thisN'
p3975
I496
sS'.thisIndex'
p3976
I4
sg15
(lp3977
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3978
g16
(lp3979
S'k'
asg18
S'Y'
sS'.thisRepN'
p3980
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3981
I2
sS'.thisN'
p3982
I497
sS'.thisIndex'
p3983
I6
sg15
(lp3984
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3985
S'space'
p3986
asg95
I6
sa(dp3987
g16
(lp3988
S'd'
asg18
S'N'
sS'.thisRepN'
p3989
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3990
I3
sS'.thisN'
p3991
I498
sS'.thisIndex'
p3992
I2
sg15
(lp3993
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3994
g16
(lp3995
S'k'
asg18
S'N'
sg22
I46
sS'.thisN'
p3996
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3997
I4
sS'.thisRepN'
p3998
I45
sg21
I50
sS'.thisIndex'
p3999
I6
sg23
I25
sg15
(lp4000
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp4001
g16
(lp4002
S'k'
asS'.thisIndex'
p4003
I6
sS'.thisRepN'
p4004
I45
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4005
I5
sS'.thisN'
p4006
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4007
S'k'
asg17
S'N'
sg14
I11
sg95
I6
sa(dp4008
g16
(lp4009
S'k'
asS'.thisIndex'
p4010
I5
sS'.thisRepN'
p4011
I45
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4012
I6
sS'.thisN'
p4013
I501
sg25
S'Y'
sg15
(lp4014
S'k'
asg17
S'N'
sg14
I11
sg95
I5
sa(dp4015
g16
(lp4016
S'k'
asg18
S'Y'
sS'.thisRepN'
p4017
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4018
I7
sS'.thisN'
p4019
I502
sg25
S'Y'
sg15
(lp4020
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
(lp4021
S'space'
p4022
asg95
I9
sS'.thisIndex'
p4023
I9
sa(dp4024
g16
(lp4025
S'd'
asg18
S'N'
sS'.thisRepN'
p4026
I45
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4027
I8
sS'.thisN'
p4028
I503
sg25
S'Y'
sg15
(lp4029
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4030
S'space'
p4031
asg95
I3
sS'.thisIndex'
p4032
I3
sa(dp4033
g16
(lp4034
S'd'
asg18
S'N'
sS'.thisRepN'
p4035
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4036
I9
sS'.thisN'
p4037
I504
sg25
S'Y'
sg15
(lp4038
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4039
I6
sa(dp4040
g16
(lp4041
S'd'
asg18
S'Y'
sS'.thisRepN'
p4042
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4043
I10
sS'.thisN'
p4044
I505
sg25
S'Y'
sg15
(lp4045
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4046
S'space'
p4047
asg95
I10
sS'.thisIndex'
p4048
I10
sa(dp4049
g16
(lp4050
S'd'
asg18
S'N'
sS'.thisRepN'
p4051
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4052
I0
sS'.thisN'
p4053
I506
sg25
S'Y'
sg15
(lp4054
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4055
I9
sa(dp4056
g16
(lp4057
S'k'
asg18
S'N'
sS'.thisRepN'
p4058
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4059
I1
sS'.thisN'
p4060
I507
sg25
S'Y'
sg15
(lp4061
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4062
I4
sa(dp4063
g16
(lp4064
S'k'
asg18
S'N'
sS'.thisRepN'
p4065
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4066
I2
sS'.thisN'
p4067
I508
sg25
S'Y'
sg15
(lp4068
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4069
I1
sa(dp4070
g16
(lp4071
S'd'
asg18
S'Y'
sS'.thisRepN'
p4072
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4073
I3
sS'.thisN'
p4074
I509
sg25
S'Y'
sg15
(lp4075
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4076
S'space'
p4077
asg95
I1
sS'.thisIndex'
p4078
I1
sa(dp4079
g18
S'N'
sS'.thisRepN'
p4080
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4081
I4
sS'.thisN'
p4082
I510
sg25
S'Y'
sg15
Nsg30
Vf
sg17
S'Timed out'
p4083
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4084
I8
sa(dp4085
g16
(lp4086
S'k'
asg18
S'Y'
sS'.thisRepN'
p4087
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4088
I5
sS'.thisN'
p4089
I511
sg25
S'Y'
sg15
(lp4090
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4091
I1
sa(dp4092
g16
(lp4093
S'k'
asg18
S'Y'
sS'.thisRepN'
p4094
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4095
I6
sS'.thisN'
p4096
I512
sg25
S'Y'
sg15
(lp4097
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4098
S'space'
p4099
asg95
I8
sS'.thisIndex'
p4100
I8
sa(dp4101
g16
(lp4102
S'd'
asg18
S'N'
sS'.thisRepN'
p4103
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4104
I7
sS'.thisN'
p4105
I513
sg25
S'Y'
sg15
(lp4106
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4107
I3
sa(dp4108
g16
(lp4109
S'k'
asg18
S'N'
sS'.thisRepN'
p4110
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4111
I8
sS'.thisN'
p4112
I514
sg25
S'Y'
sg15
(lp4113
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4114
I4
sa(dp4115
g16
(lp4116
S'd'
asg18
S'Y'
sS'.thisRepN'
p4117
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4118
I9
sS'.thisN'
p4119
I515
sg25
S'Y'
sg15
(lp4120
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4121
S'space'
p4122
asg95
I6
sS'.thisIndex'
p4123
I6
sa(dp4124
g16
(lp4125
S'k'
asg18
S'N'
sS'.thisRepN'
p4126
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4127
I10
sS'.thisN'
p4128
I516
sg25
S'Y'
sg15
(lp4129
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4130
I5
sa(dp4131
g16
(lp4132
S'k'
asg18
S'N'
sS'.thisRepN'
p4133
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4134
I0
sS'.thisN'
p4135
I517
sg25
S'Y'
sg15
(lp4136
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4137
I6
sa(dp4138
g16
(lp4139
S'd'
asg18
S'N'
sS'.thisRepN'
p4140
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4141
I1
sS'.thisN'
p4142
I518
sg25
S'Y'
sg15
(lp4143
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4144
I0
sa(dp4145
g16
(lp4146
S'k'
asg18
S'Y'
sS'.thisRepN'
p4147
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4148
I2
sS'.thisN'
p4149
I519
sg25
S'Y'
sg15
(lp4150
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4151
S'space'
p4152
asg95
I1
sS'.thisIndex'
p4153
I1
sa(dp4154
g16
(lp4155
S'd'
asg18
S'Y'
sS'.thisRepN'
p4156
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4157
I3
sS'.thisN'
p4158
I520
sg25
S'Y'
sg15
(lp4159
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4160
S'space'
p4161
asg95
I5
sS'.thisIndex'
p4162
I5
sa(dp4163
g16
(lp4164
S'k'
asg18
S'N'
sS'.thisRepN'
p4165
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4166
I4
sS'.thisN'
p4167
I521
sg25
S'Y'
sg15
(lp4168
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4169
I6
sa(dp4170
g16
(lp4171
S'd'
asg18
S'Y'
sS'.thisRepN'
p4172
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4173
I5
sS'.thisN'
p4174
I522
sg25
S'Y'
sg15
(lp4175
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4176
S'space'
p4177
asg95
I5
sS'.thisIndex'
p4178
I5
sa(dp4179
g16
(lp4180
S'd'
asg18
S'Y'
sS'.thisRepN'
p4181
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4182
I6
sS'.thisN'
p4183
I523
sg25
S'Y'
sg15
(lp4184
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4185
S'space'
p4186
asg95
I10
sS'.thisIndex'
p4187
I10
sa(dp4188
g16
(lp4189
S'k'
asg18
S'Y'
sS'.thisRepN'
p4190
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4191
I7
sS'.thisN'
p4192
I524
sg25
S'Y'
sg15
(lp4193
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4194
S'space'
p4195
asg95
I10
sS'.thisIndex'
p4196
I10
sa(dp4197
g16
(lp4198
S'k'
asg18
S'N'
sS'.thisRepN'
p4199
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4200
I8
sS'.thisN'
p4201
I525
sg25
S'Y'
sg15
(lp4202
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4203
I9
sa(dp4204
g16
(lp4205
S'k'
asg18
S'N'
sS'.thisRepN'
p4206
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4207
I9
sS'.thisN'
p4208
I526
sg25
S'Y'
sg15
(lp4209
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4210
I8
sa(dp4211
g16
(lp4212
S'k'
asg18
S'N'
sS'.thisRepN'
p4213
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4214
I10
sS'.thisN'
p4215
I527
sg25
S'Y'
sg15
(lp4216
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4217
I4
sa(dp4218
g16
(lp4219
S'k'
asg18
S'N'
sS'.thisRepN'
p4220
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4221
I0
sS'.thisN'
p4222
I528
sg25
S'Y'
sg15
(lp4223
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4224
I3
sa(dp4225
g16
(lp4226
S'k'
asg18
S'N'
sS'.thisRepN'
p4227
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4228
I1
sS'.thisN'
p4229
I529
sg25
S'Y'
sg15
(lp4230
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4231
I4
sa(dp4232
g16
(lp4233
S'k'
asg18
S'Y'
sS'.thisRepN'
p4234
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4235
I2
sS'.thisN'
p4236
I530
sg25
S'Y'
sg15
(lp4237
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4238
S'space'
p4239
asg95
I2
sS'.thisIndex'
p4240
I2
sa(dp4241
g16
(lp4242
S'd'
asg18
S'Y'
sS'.thisRepN'
p4243
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4244
I3
sS'.thisN'
p4245
I531
sg25
S'Y'
sg15
(lp4246
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4247
S'space'
p4248
asg95
I7
sS'.thisIndex'
p4249
I7
sa(dp4250
g16
(lp4251
S'd'
asg18
S'N'
sS'.thisRepN'
p4252
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4253
I4
sS'.thisN'
p4254
I532
sg25
S'Y'
sg15
(lp4255
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4256
I3
sa(dp4257
g16
(lp4258
S'k'
asg18
S'Y'
sS'.thisRepN'
p4259
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4260
I5
sS'.thisN'
p4261
I533
sg25
S'Y'
sg15
(lp4262
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4263
S'space'
p4264
asg95
I0
sS'.thisIndex'
p4265
I0
sa(dp4266
g16
(lp4267
S'k'
asg18
S'N'
sS'.thisRepN'
p4268
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4269
I6
sS'.thisN'
p4270
I534
sg25
S'Y'
sg15
(lp4271
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4272
I3
sa(dp4273
g16
(lp4274
S'd'
asg18
S'Y'
sS'.thisRepN'
p4275
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4276
I7
sS'.thisN'
p4277
I535
sg25
S'Y'
sg15
(lp4278
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4279
S'space'
p4280
asg95
I4
sS'.thisIndex'
p4281
I4
sa(dp4282
g16
(lp4283
S'k'
asg18
S'Y'
sS'.thisRepN'
p4284
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4285
I8
sS'.thisN'
p4286
I536
sg25
S'Y'
sg15
(lp4287
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4288
S'space'
p4289
asg95
I8
sS'.thisIndex'
p4290
I8
sa(dp4291
g16
(lp4292
S'd'
asg18
S'N'
sS'.thisRepN'
p4293
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4294
I9
sS'.thisN'
p4295
I537
sg25
S'Y'
sg15
(lp4296
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4297
I6
sa(dp4298
g16
(lp4299
S'k'
asg18
S'Y'
sS'.thisRepN'
p4300
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4301
I10
sS'.thisN'
p4302
I538
sg25
S'Y'
sg15
(lp4303
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4304
S'space'
p4305
asg95
I10
sS'.thisIndex'
p4306
I10
sa(dp4307
g16
(lp4308
S'k'
asg18
S'N'
sS'.thisRepN'
p4309
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4310
I0
sS'.thisN'
p4311
I539
sg25
S'Y'
sg15
(lp4312
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4313
I6
sa(dp4314
g16
(lp4315
S'k'
asg18
S'Y'
sS'.thisRepN'
p4316
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4317
I1
sS'.thisN'
p4318
I540
sg25
S'Y'
sg15
(lp4319
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4320
S'space'
p4321
asg95
I5
sS'.thisIndex'
p4322
I5
sa(dp4323
g16
(lp4324
S'd'
asg18
S'Y'
sS'.thisRepN'
p4325
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4326
I2
sS'.thisN'
p4327
I541
sg25
S'Y'
sg15
(lp4328
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4329
S'space'
p4330
asg95
I5
sS'.thisIndex'
p4331
I5
sa(dp4332
g16
(lp4333
S'd'
asg18
S'N'
sS'.thisRepN'
p4334
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4335
I3
sS'.thisN'
p4336
I542
sg25
S'Y'
sg15
(lp4337
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4338
I9
sa(dp4339
g16
(lp4340
S'd'
asg18
S'N'
sS'.thisRepN'
p4341
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4342
I4
sS'.thisN'
p4343
I543
sg25
S'Y'
sg15
(lp4344
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4345
I1
sa(dp4346
g16
(lp4347
S'k'
asg18
S'Y'
sS'.thisRepN'
p4348
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4349
I5
sS'.thisN'
p4350
I544
sg25
S'Y'
sg15
(lp4351
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4352
I10
sa(dp4353
g16
(lp4354
S'k'
asg18
S'Y'
sS'.thisRepN'
p4355
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4356
I6
sS'.thisN'
p4357
I545
sg25
S'Y'
sg15
(lp4358
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4359
S'space'
p4360
asg95
I3
sS'.thisIndex'
p4361
I3
sa(dp4362
g16
(lp4363
S'k'
asg18
S'N'
sS'.thisRepN'
p4364
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4365
I7
sS'.thisN'
p4366
I546
sg25
S'Y'
sg15
(lp4367
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4368
I10
sa(dp4369
g16
(lp4370
S'k'
asg18
S'Y'
sS'.thisRepN'
p4371
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4372
I8
sS'.thisN'
p4373
I547
sg25
S'Y'
sg15
(lp4374
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4375
S'space'
p4376
asg95
I2
sS'.thisIndex'
p4377
I2
sa(dp4378
g16
(lp4379
S'k'
asg18
S'Y'
sS'.thisRepN'
p4380
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4381
I9
sS'.thisN'
p4382
I548
sg25
S'Y'
sg15
(lp4383
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4384
S'space'
p4385
asg95
I5
sS'.thisIndex'
p4386
I5
sa(dp4387
g16
(lp4388
S'd'
asg18
S'Y'
sg22
I45
sg26
S'Y'
sS'.thisN'
p4389
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4390
I10
sS'.thisRepN'
p4391
I49
sg21
I45
sg25
S'Y'
sg23
I24
sg15
(lp4392
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4393
S'space'
p4394
asg95
I10
sS'.thisIndex'
p4395
I10
sa(dp4396
g16
(lp4397
S'k'
asS'.thisIndex'
p4398
I6
sS'.thisRepN'
p4399
I50
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4400
I0
sS'.thisN'
p4401
I550
sg25
S'Y'
sg15
(lp4402
S'd'
asg17
S'Y'
sg14
I12
sg95
I6
sa(dp4403
g16
(lp4404
S'k'
asS'.thisIndex'
p4405
I0
sS'.thisRepN'
p4406
I50
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4407
I1
sS'.thisN'
p4408
I551
sg25
S'Y'
sg15
(lp4409
S'd'
asg17
S'Y'
sg14
I12
sg95
I0
sa(dp4410
g16
(lp4411
S'd'
asg18
S'Y'
sS'.thisRepN'
p4412
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4413
I2
sS'.thisN'
p4414
I552
sg25
S'Y'
sg15
(lp4415
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4416
S'space'
p4417
asg95
I3
sS'.thisIndex'
p4418
I3
sa(dp4419
g16
(lp4420
S'd'
asg18
S'Y'
sS'.thisRepN'
p4421
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4422
I3
sS'.thisN'
p4423
I553
sg25
S'Y'
sg15
(lp4424
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4425
S'space'
p4426
asg95
I10
sS'.thisIndex'
p4427
I10
sa(dp4428
g16
(lp4429
S'k'
asg18
S'N'
sS'.thisRepN'
p4430
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4431
I4
sS'.thisN'
p4432
I554
sg25
S'Y'
sg15
(lp4433
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4434
I2
sa(dp4435
g16
(lp4436
S'd'
asg18
S'Y'
sS'.thisRepN'
p4437
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4438
I5
sS'.thisN'
p4439
I555
sg25
S'Y'
sg15
(lp4440
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4441
S'space'
p4442
asg95
I2
sS'.thisIndex'
p4443
I2
sa(dp4444
g16
(lp4445
S'k'
asg18
S'Y'
sS'.thisRepN'
p4446
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4447
I6
sS'.thisN'
p4448
I556
sg25
S'Y'
sg15
(lp4449
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4450
S'space'
p4451
asg95
I2
sS'.thisIndex'
p4452
I2
sa(dp4453
g16
(lp4454
S'k'
asg18
S'N'
sS'.thisRepN'
p4455
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4456
I7
sS'.thisN'
p4457
I557
sg25
S'Y'
sg15
(lp4458
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4459
I3
sa(dp4460
g16
(lp4461
S'k'
asg18
S'N'
sS'.thisRepN'
p4462
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4463
I8
sS'.thisN'
p4464
I558
sg25
S'Y'
sg15
(lp4465
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4466
I9
sa(dp4467
g16
(lp4468
S'd'
asg18
S'N'
sS'.thisRepN'
p4469
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4470
I9
sS'.thisN'
p4471
I559
sg25
S'Y'
sg15
(lp4472
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4473
I6
sa(dp4474
g16
(lp4475
S'd'
asg18
S'N'
sS'.thisRepN'
p4476
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4477
I10
sS'.thisN'
p4478
I560
sg25
S'Y'
sg15
(lp4479
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4480
I5
sa(dp4481
g16
(lp4482
S'd'
asg18
S'N'
sS'.thisRepN'
p4483
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4484
I0
sS'.thisN'
p4485
I561
sg25
S'Y'
sg15
(lp4486
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4487
I6
sa(dp4488
g16
(lp4489
S'd'
asg18
S'Y'
sS'.thisRepN'
p4490
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4491
I1
sS'.thisN'
p4492
I562
sg25
S'Y'
sg15
(lp4493
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4494
S'space'
p4495
asg95
I7
sS'.thisIndex'
p4496
I7
sa(dp4497
g16
(lp4498
S'k'
asg18
S'Y'
sS'.thisRepN'
p4499
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4500
I2
sS'.thisN'
p4501
I563
sg25
S'Y'
sg15
(lp4502
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4503
S'space'
p4504
asg95
I10
sS'.thisIndex'
p4505
I10
sa(dp4506
g16
(lp4507
S'd'
asg18
S'N'
sS'.thisRepN'
p4508
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4509
I3
sS'.thisN'
p4510
I564
sg25
S'Y'
sg15
(lp4511
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4512
I8
sa(dp4513
g16
(lp4514
S'k'
asg18
S'Y'
sS'.thisRepN'
p4515
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4516
I4
sS'.thisN'
p4517
I565
sg25
S'Y'
sg15
(lp4518
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4519
S'space'
p4520
asg95
I8
sS'.thisIndex'
p4521
I8
sa(dp4522
g16
(lp4523
S'k'
asg18
S'Y'
sS'.thisRepN'
p4524
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4525
I5
sS'.thisN'
p4526
I566
sg25
S'Y'
sg15
(lp4527
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4528
S'space'
p4529
asg95
I10
sS'.thisIndex'
p4530
I10
sa(dp4531
g16
(lp4532
S'k'
asg18
S'Y'
sS'.thisRepN'
p4533
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4534
I6
sS'.thisN'
p4535
I567
sg25
S'Y'
sg15
(lp4536
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4537
S'space'
p4538
asg95
I5
sS'.thisIndex'
p4539
I5
sa(dp4540
g16
(lp4541
S'k'
asg18
S'N'
sS'.thisRepN'
p4542
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4543
I7
sS'.thisN'
p4544
I568
sg25
S'Y'
sg15
(lp4545
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4546
S'space'
p4547
asg95
I7
sS'.thisIndex'
p4548
I7
sa(dp4549
g16
(lp4550
S'd'
asg18
S'Y'
sS'.thisRepN'
p4551
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4552
I8
sS'.thisN'
p4553
I569
sg25
S'Y'
sg15
(lp4554
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4555
S'space'
p4556
asg95
I0
sS'.thisIndex'
p4557
I0
sa(dp4558
g16
(lp4559
S'd'
asg18
S'Y'
sS'.thisRepN'
p4560
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4561
I9
sS'.thisN'
p4562
I570
sg25
S'Y'
sg15
(lp4563
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4564
S'space'
p4565
asg95
I3
sS'.thisIndex'
p4566
I3
sa(dp4567
g16
(lp4568
S'd'
asg18
S'Y'
sS'.thisRepN'
p4569
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4570
I10
sS'.thisN'
p4571
I571
sg25
S'Y'
sg15
(lp4572
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4573
S'space'
p4574
asg95
I0
sS'.thisIndex'
p4575
I0
sa(dp4576
g16
(lp4577
S'd'
asg18
S'N'
sS'.thisRepN'
p4578
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4579
I0
sS'.thisN'
p4580
I572
sg25
S'Y'
sg15
(lp4581
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4582
I6
sa(dp4583
g16
(lp4584
S'k'
asg18
S'Y'
sS'.thisRepN'
p4585
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4586
I1
sS'.thisN'
p4587
I573
sg25
S'Y'
sg15
(lp4588
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4589
S'space'
p4590
asg95
I9
sS'.thisIndex'
p4591
I9
sa(dp4592
g16
(lp4593
S'k'
asg18
S'N'
sS'.thisRepN'
p4594
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4595
I2
sS'.thisN'
p4596
I574
sg25
S'Y'
sg15
(lp4597
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4598
I4
sa(dp4599
g18
S'N'
sS'.thisRepN'
p4600
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4601
I3
sS'.thisN'
p4602
I575
sg25
S'Y'
sg15
Nsg30
Vf
sg17
g4083
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4603
I8
sa(dp4604
g16
(lp4605
S'k'
asg18
S'Y'
sS'.thisRepN'
p4606
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4607
I4
sS'.thisN'
p4608
I576
sg25
S'Y'
sg15
(lp4609
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4610
S'space'
p4611
asg95
I7
sS'.thisIndex'
p4612
I7
sa(dp4613
g16
(lp4614
S'k'
asg18
S'Y'
sS'.thisRepN'
p4615
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4616
I5
sS'.thisN'
p4617
I577
sg25
S'Y'
sg15
(lp4618
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4619
S'space'
p4620
asg95
I4
sS'.thisIndex'
p4621
I4
sa(dp4622
g16
(lp4623
S'd'
asg18
S'Y'
sS'.thisRepN'
p4624
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4625
I6
sS'.thisN'
p4626
I578
sg25
S'Y'
sg15
(lp4627
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4628
I3
sa(dp4629
g16
(lp4630
S'd'
asg18
S'Y'
sS'.thisRepN'
p4631
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4632
I7
sS'.thisN'
p4633
I579
sg25
S'Y'
sg15
(lp4634
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4635
S'space'
p4636
asg95
I3
sS'.thisIndex'
p4637
I3
sa(dp4638
g16
(lp4639
S'k'
asg18
S'Y'
sS'.thisRepN'
p4640
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4641
I8
sS'.thisN'
p4642
I580
sg25
S'Y'
sg15
(lp4643
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4644
S'space'
p4645
asg95
I5
sS'.thisIndex'
p4646
I5
sa(dp4647
g16
(lp4648
S'd'
asg18
S'Y'
sS'.thisRepN'
p4649
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4650
I9
sS'.thisN'
p4651
I581
sg25
S'Y'
sg15
(lp4652
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4653
S'space'
p4654
asg95
I10
sS'.thisIndex'
p4655
I10
sa(dp4656
g16
(lp4657
S'k'
asg18
S'N'
sS'.thisRepN'
p4658
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4659
I10
sS'.thisN'
p4660
I582
sg25
S'Y'
sg15
(lp4661
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4662
I6
sa(dp4663
g16
(lp4664
S'k'
asg18
S'Y'
sS'.thisRepN'
p4665
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4666
I0
sS'.thisN'
p4667
I583
sg25
S'Y'
sg15
(lp4668
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4669
S'space'
p4670
asg95
I7
sS'.thisIndex'
p4671
I7
sa(dp4672
g16
(lp4673
S'k'
asg18
S'Y'
sS'.thisRepN'
p4674
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4675
I1
sS'.thisN'
p4676
I584
sg25
S'Y'
sg15
(lp4677
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4678
S'space'
p4679
asg95
I0
sS'.thisIndex'
p4680
I0
sa(dp4681
g16
(lp4682
S'd'
asg18
S'Y'
sS'.thisRepN'
p4683
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4684
I2
sS'.thisN'
p4685
I585
sg25
S'Y'
sg15
(lp4686
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4687
S'space'
p4688
asg95
I2
sS'.thisIndex'
p4689
I2
sa(dp4690
g16
(lp4691
S'd'
asg18
S'N'
sS'.thisRepN'
p4692
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4693
I3
sS'.thisN'
p4694
I586
sg25
S'Y'
sg15
(lp4695
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4696
I0
sa(dp4697
g16
(lp4698
S'd'
asg18
S'N'
sS'.thisRepN'
p4699
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4700
I4
sS'.thisN'
p4701
I587
sg25
S'Y'
sg15
(lp4702
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4703
I3
sa(dp4704
g16
(lp4705
S'k'
asg18
S'N'
sS'.thisRepN'
p4706
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4707
I5
sS'.thisN'
p4708
I588
sg25
S'Y'
sg15
(lp4709
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4710
I6
sa(dp4711
g16
(lp4712
S'k'
asg18
S'Y'
sS'.thisRepN'
p4713
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4714
I6
sS'.thisN'
p4715
I589
sg25
S'Y'
sg15
(lp4716
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4717
S'space'
p4718
asg95
I8
sS'.thisIndex'
p4719
I8
sa(dp4720
g16
(lp4721
S'd'
asg18
S'Y'
sS'.thisRepN'
p4722
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4723
I7
sS'.thisN'
p4724
I590
sg25
S'Y'
sg15
(lp4725
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4726
S'space'
p4727
asg95
I2
sS'.thisIndex'
p4728
I2
sa(dp4729
g16
(lp4730
S'k'
asg18
S'Y'
sS'.thisRepN'
p4731
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4732
I8
sS'.thisN'
p4733
I591
sg25
S'Y'
sg15
(lp4734
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4735
S'space'
p4736
asg95
I3
sS'.thisIndex'
p4737
I3
sa(dp4738
g16
(lp4739
S'k'
asg18
S'N'
sS'.thisRepN'
p4740
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4741
I9
sS'.thisN'
p4742
I592
sg25
S'Y'
sg15
(lp4743
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4744
I1
sa(dp4745
g16
(lp4746
S'k'
asg18
S'N'
sS'.thisRepN'
p4747
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4748
I10
sS'.thisN'
p4749
I593
sg25
S'Y'
sg15
(lp4750
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4751
I10
sa(dp4752
g16
(lp4753
S'd'
asg18
S'N'
sS'.thisRepN'
p4754
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4755
I0
sS'.thisN'
p4756
I594
sg25
S'Y'
sg15
(lp4757
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4758
I8
sa(dp4759
g16
(lp4760
S'd'
asg18
S'N'
sS'.thisRepN'
p4761
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4762
I1
sS'.thisN'
p4763
I595
sg25
S'Y'
sg15
(lp4764
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4765
I7
sa(dp4766
g16
(lp4767
S'd'
asg18
S'N'
sS'.thisRepN'
p4768
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4769
I2
sS'.thisN'
p4770
I596
sg25
S'Y'
sg15
(lp4771
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4772
I2
sa(dp4773
g16
(lp4774
S'd'
asg18
S'N'
sS'.thisRepN'
p4775
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4776
I3
sS'.thisN'
p4777
I597
sg25
S'Y'
sg15
(lp4778
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4779
I5
sa(dp4780
g16
(lp4781
S'd'
asg18
S'N'
sS'.thisRepN'
p4782
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4783
I4
sS'.thisN'
p4784
I598
sg25
S'Y'
sg15
(lp4785
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4786
I4
sa(dp4787
g16
(lp4788
S'k'
asg18
S'N'
sg22
I46
sg26
S'Y'
sS'.thisN'
p4789
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4790
I5
sS'.thisRepN'
p4791
I54
sg21
I48
sg25
S'Y'
sg23
I25
sg15
(lp4792
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4793
I0
sasS'loops'
p4794
(lp4795
g1
(g35
g3
NtRp4796
(dp4797
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4798
sg40
(lp4799
sg41
I74103120
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4800
g48
g49
(g50
g51
g52
S'b'
tRp4801
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4802
(I1
(I600
I1
tg55
I00
S'\x00\x80\xd7C\x00\x00\xe9C\x00\x00DB\x00\x80\xd9C\x00\x00\x0bC\x00\x00\xb7C\x00\x00\tC\x00\x00gC\x00\x00vC\x00\x00\xf8B\x00\xc0\x02D\x00\x00\xb2C\x00\x00:C\x00\x00\xa4B\x00\x80\xb4C\x00\x00\xefC\x00\x00\\B\x00\x00\xa8C\x00\x80\x81C\x00\x00\xfcC\x00\x00\x0cD\x00\x00\x08C\x00\x008C\x00\x80\x85C\x00\x00\x8cC\x00\x00^C\x00\x00\xd8C\x00\x80\xc8C\x00\x00(C\x00\x80\xbaC\x00\x00\xbcC\x00\x00\x04B\x00\x00bC\x00\x00\x8dC\x00\x80\x14D\x00\x00 C\x00\x00\xe0B\x00\x00$B\x00\x00\xc8B\x00\x00\x86C\x00\x80\xbfC\x00\x00\xd4B\x00\x00pC\x00\x00HB\x00\x00TC\x00\x80\xa4C\x00\x00hC\x00\x00dC\x00\x00\xf8C\x00\x00\xa6C\x00\x00\x1eC\x00\x80\xe8C\x00\x00FC\x00\x00-C\x00\x00aC\x00\x00\xd9C\x00\x00\xbfC\x00\x00\x0eC\x00\x003C\x00\x00@C\x00\x00\xf5C\x00\x80\xa6C\x00\x008B\x00\x00JC\x00\x80\xfbC\x00\x80\xd8C\x00\x00\xcbC\x00\x00[C\x00\x00\xe4C\x00\x00dB\x00\x00\x99C\x00\x00\x83C\x00\x80\xc2C\x00\x80\xe4C\x00\x00\xe3C\x00\x80\xbcC\x00@\nD\x00\x00\x0fD\x00\x80\xfeC\x00\x00cC\x00\x80\x07D\x00\x80\xcaC\x00\x00\x92B\x00\x80\xa0C\x00\x00XB\x00\x00\xceC\x00\x80\xb2C\x00\xc0\x14D\x00\x00QC\x00\x00#C\x00\xc0\x10D\x00\x80\xd6C\x00\x80\xc9C\x00\x00\xe6C\x00\x80\x8fC\x00\x00_C\x00\x00\xd3C\x00\x00\x8bC\x00\x00\x12C\x00\x80\xcfC\x00\x80\xa5C\x00\x00\xfcB\x00\x80\x9bC\x00\x00?C\x00\x80\x91C\x00\xc0\x12D\x00\x00PA\x00\x00\xb3C\x00\x00\xf2C\x00\x00HC\x00\x00\xf3C\x00\x00\x03C\x00\x00\xccB\x00\x00\xa3C\x00\x00\x85C\x00\x80\x88C\x00\x00\xd1C\x00\x80\x02D\x00\x00\x11C\x00\x00\xccC\x00\x80\xe1C\x00\x80\xf2C\x00\x80\xb0C\x00\x80\xcbC\x00\x80\xc7C\x00\x00*C\x00@\x06D\x00\x00\xe2C\x00\x00MC\x00\x00UC\x00\x00GC\x00\x80\xb3C\x00\x00\xf7C\x00\x006C\x00@\x12D\x00\x00\x80A\x00\x00\xeeC\x00\x00\xd0B\x00\x00EC\x00\x00\xb6B\x00\xc0\x07D\x00\x00\nC\x00\x00\xb5C\x00\x00\x9bC\x00\x00\x1dC\x00\x00\x91C\x00\x00\x00B\x00\x00\xd6B\x00\x00>C\x00\x80\x9dC\x00\x00\xf0A\x00@\x07D\x00\x00\x08B\x00\xc0\x00D\x00\x005C\x00\x00\xc6B\x00\x80\xfcC\x00\x80\xd1C\x00\x00%C\x00\x00\xacB\x00\x80\x9cC\x00\x00\x00C\x00@\x15D\x00\x00\x95C\x00\x80\xa8C\x00\xc0\x04D\x00\x00\xa9C\x00\x00\xc0C\x00\x00\x8aB\x00\x80\x83C\x00\x00\xecB\x00\x00\x87C\x00\x00\xf9C\x00\x000A\x00\x00\xc9C\x00\xc0\nD\x00\x00\xaeB\x00\x00\x18B\x00\x00\xdaB\x00\x00,C\x00\x00\x8aC\x00\x00oC\x00\x00\xabC\x00\x00\xbeC\x00\xc0\x0bD\x00\x00+C\x00\x00\xeaB\x00\x80\x0eD\x00\x80\xd5C\x00\x00\xb0A\x00\x00\xa8A\x00\x00\x88C\x00\x00@@\x00\x00\x8eB\x00\x00\xa6B\x00\x00\xa7C\x00\xc0\x05D\x00\x00\xd5C\x00\x00\x0fC\x00\x00\x05D\x00\x00tB\x00\x00\x98A\x00\x80\xebC\x00\x00\xcaC\x00\x00\xb9C\x00@\x0eD\x00\x00\rD\x00\x00\xbdC\x00\x80\x82C\x00\x80\xbeC\x00\x00\xecC\x00\x00tC\x00\x00\x9fC\x00\x80\x12D\x00@\x11D\x00\x00,B\x00\x00\xb0B\x00\x80\x9aC\x00\x80\x15D\x00\x00SC\x00\x00\x10B\x00\x00\x84C\x00\x00\x9cC\x00\x00\xfdC\x00\x00\x10C\x00\x00\xffC\x00\x80\x8aC\x00\x00\xc4C\x00\x00zC\x00\x00\xf0C\x00\x00\x9dC\x00\x00BC\x00\x00VC\x00\x00yC\x00\x80\x89C\x00\x80\xacC\x00\x80\x10D\x00\x007C\x00\x80\x90C\x00\x00\xeeB\x00\xc0\x0eD\x00\x80\xe7C\x00\x00\xd0A\x00\x00\xe1C\x00\x80\x93C\x00\x80\xc4C\x00\x80\x13D\x00\x00\xb8B\x00\x80\xf7C\x00\x00\xeaC\x00\x00\rC\x00\x00\xc2B\x00\x00\xa0A\x00\x00}C\x00\x00\x05C\x00\x00\x15D\x00\x00XC\x00\x002C\x00\x00\x02D\x00\x00rC\x00\x80\xb1C\x00\x00\x00A\x00\x00\xb0C\x00\x00\xa0C\x00\x00\xf6B\x00\x000B\x00@\x00D\x00\x80\xa2C\x00\x80\x97C\x00\x00OC\x00\x00\xb8C\x00\x00\xe0@\x00\x80\xf6C\x00\x00\nD\x00\x00\xdbC\x00\x80\xd2C\x00\x00\x80?\x00\x00\xb2B\x00\x80\x01D\x00\x00\xc0B\x00\x00\xfeB\x00\x00uC\x00\x00\xa0B\x00\x00\x00\x00\x00\x80\xedC\x00\x80\xa7C\x00\x00)C\x00\x00\x86B\x00\x80\x0cD\x00@\x0cD\x00\x00\xa1C\x00@\tD\x00\x00\x9aB\x00\x80\xb6C\x00\x00\xceB\x00\x00\xaaC\x00\x00lB\x00\x80\x96C\x00\x00\xedC\x00\x80\xc1C\x00\x80\x87C\x00\x80\tD\x00\x00CC\x00\x00\xe6B\x00\x80\x92C\x00\x80\xdcC\x00\x00\xe5C\x00\x00\xf0B\x00\xc0\tD\x00\x00\x12D\x00\x00\x9eC\x00\x00\x13C\x00\x00`B\x00\x80\x8dC\x00\x80\xe3C\x00\x80\x99C\x00\x00\xbaB\x00\x80\xf5C\x00\x00;C\x00\x80\xc0C\x00\x00\xfeC\x00\x00\xd8B\x00\x80\xd4C\x00\x00\x14B\x00@\x03D\x00\x00`A\x00\x00\xb1C\x00\x00\xfbC\x00\x00fC\x00\x00\xb4C\x00\x00\xa2B\x00\x00iC\x00\x00RC\x00\x80\x0fD\x00\x00\xa0@\x00\x80\x98C\x00\x00\x80B\x00\x00\x97C\x00@\x02D\x00\x00\x07D\x00\x00\\C\x00\x80\xddC\x00\x00\x17C\x00\x00lC\x00@\x05D\x00\x00/C\x00\x00\xf1C\x00\x00\x03D\x00\x80\nD\x00\x00\x90B\x00\x00\xf2B\x00\x00\xadC\x00\x00\x13D\x00\x00\xdaC\x00\x00\x04C\x00\x00\xdcC\x00\xc0\x0cD\x00\x00\x06C\x00\x00\xfaB\x00\x80\xf0C\x00\x00mC\x00\x00@B\x00\x80\xe6C\x00\x00&C\x00\x00\x04D\x00\x00\x94B\x00\x80\xb8C\x00\x00\xf4B\x00\x00<C\x00\x00TB\x00\x80\x03D\x00\x00\xe0A\x00\x00\xcfC\x00\x00\x15C\x00\x80\xe2C\x00\x00\xa8B\x00\x80\x8eC\x00\x00\xe2B\x00\x80\xafC\x00@\x10D\x00\x00hB\x00\x00\x89C\x00\x00\x10A\x00\x80\x8cC\x00\x00\x0cC\x00\x00\x7fC\x00\x00\x80C\x00\x00\xa4C\x00\x00\xc3C\x00\x00\x98C\x00\x00\x81C\x00\x80\xeaC\x00\x00\xc2C\x00\x00kC\x00\x00PB\x00\x00\xfaC\x00\x00\x96B\x00\x80\xdfC\x00\x00\xe4B\x00\x00~C\x00\x00\x9aC\x00\x80\xcdC\x00\x00\x93C\x00\x00PC\x00\x00\xd4C\x00\x00`C\x00\x80\xa3C\x00\x00\x16C\x00\x00\xd2C\x00\x80\x04D\x00\x80\x8bC\x00\x80\xecC\x00\x00LB\x00\x00\x14C\x00\xc0\x06D\x00\x00\xdfC\x00\x00\x84B\x00\x80\x84C\x00\x80\xf4C\x00\x00\x14D\x00\x00KC\x00\x00\xbbC\x00\x00\xc8A\x00\x80\xb7C\x00\x00\xf6C\x00\x00|B\x00\x00\x02C\x00\x80\xc6C\x00\x00.C\x00\x00\x10D\x00\x00\x8fC\x00\x00\tD\x00\xc0\x08D\x00\x00\x1cB\x00\x00LC\x00\x00pB\x00\x80\x80C\x00\x00\xa5C\x00\x00\x07C\x00\x80\x05D\x00\x004B\x00\x00\x0eD\x00\x00jC\x00\x00 A\x00\x00\x92C\x00\x00\xd0C\x00\x00{C\x00\x00pA\x00\x00\x01C\x00\x00\xe7C\x00\x00\x80@\x00\x80\x95C\x00\x00\xe8A\x00\x00\x94C\x00\x00\x8cB\x00\x00\xebC\x00\x80\xf9C\x00\x80\x08D\x00\x00\x1cC\x00\x00\x1fC\x00\x80\xeeC\x00\x00\xd2B\x00\x80\xfdC\x00\x00\xaaB\x00\x00xB\x00\x004C\x00\xc0\rD\x00\xc0\x03D\x00\x00\x8eC\x00\x80\xb9C\x00@\x0fD\x00\x00 B\x00\x80\xb5C\x00\x00\x00@\x00\x80\x00D\x00\x00AC\x00\x00\xc1C\x00\x00\x82B\x00\x80\x9eC\x00\x80\xffC\x00\x80\xa1C\x00\xc0\x13D\x00\x80\xe9C\x00\x80\xaeC\x00\x001C\x00\x00"C\x00\x00\x88B\x00\x80\xa9C\x00\x00\xd7C\x00\x00\xafC\x00@\x14D\x00\x80\xefC\x00\x80\rD\x00\x00\xcaB\x00\x80\xabC\x00\x00\xc8C\x00\x00\xddC\x00\x80\xc3C\x00\x00DC\x00\x00(B\x00\x00\x00D\x00\x00\xb8A\x00\x00@A\x00\x00xC\x00\x80\xfaC\x00\xc0\x0fD\x00\x00\xacC\x00\x00\x06D\x00\x80\xd0C\x00\x00\xd6C\x00\x80\x86C\x00\x00\xf8A\x00\x00WC\x00\x80\xaaC\x00@\rD\x00\x00\xaeC\x00\x00\x96C\x00\x00\xe8B\x00\x80\x9fC\x00@\x0bD\x00\x00\xc0A\x00\x80\x11D\x00\x80\xdeC\x00\x00\x0cB\x00\x80\xf3C\x00\x80\xccC\x00@\x01D\x00\x00\xc6C\x00\x00\x98B\x00@\x13D\x00\x00\xbeB\x00\x00\x82C\x00\x00\xe0C\x00\x00\xdeB\x00@\x04D\x00\xc0\x15D\x00\x80\xf1C\x00\x00\x08D\x00\x80\xceC\x00\x80\xd3C\x00\x00\x11D\x00\x00\xb6C\x00\x80\x0bD\x00\x00\x88A\x00\x00YC\x00\x00IC\x00\x00\x19C\x00\x00$C\x00\x00\'C\x00\x00\x18C\x00\x00\xb4B\x00\x00qC\x00\x80\xbdC\x00\x00\x0bD\x00\x00\x90C\x00\x00\x01D\x00\x80\xf8C\x00\x00\x9cB\x00\x00|C\x00\x00\xd8A\x00\x00\xc4B\x00\x80\x06D\x00\x00!C\x00\x80\xdaC\x00@\x08D\x00\x80\xadC\x00\x00eC\x00\x00\xcdC\x00\x00\xdeC\x00\x000C\x00\x00\x90A\x00\x00]C\x00\x80\xbbC\x00\x00\xc5C\x00\x00=C\x00\x80\xdbC\x00\x00\x1bC\x00\x00<B\x00\x00sC\x00\x00NC\x00\xc0\x01D\x00\x00\xc7C\x00\x00\xf4C\x00\x80\xe0C\x00\x00nC\x00\x00\xbaC\x00\x00\xa2C\x00\x00\xbcB\x00\x00\x9eB\x00\x00ZC\x00\x80\xc5C\x00\x80\xe5C\x00\x00wC\x00\x009C\x00\x00\xe8C\x00\x00\xc0@\x00\x00\xdcB\x00\x80\x94C\x00\x00\x1aC\x00\xc0\x11D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4803
(dp4804
g60
(dp4805
g48
I01
sg56
I01
ssg62
g4796
sg63
(lp4806
g48
ag56
asg65
(lp4807
I600
aI1
asbsg67
S'random'
p4808
sg69
g70
(g51
(I0
tS'b'
tRp4809
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4810
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\x1b\x01\x00\x00\x14\x01\x00\x00\xd9\x01\x00\x00\xc0\x00\x00\x00\xc2\x01\x00\x00N\x01\x00\x00S\x02\x00\x00\x0f\x01\x00\x00\x05\x01\x00\x00~\x01\x00\x00\xbb\x01\x00\x00\xad\x00\x00\x00\xf6\x01\x00\x00j\x00\x00\x00E\x01\x00\x00\xbf\x01\x00\x00\x87\x00\x00\x00\x1f\x02\x00\x00:\x02\x00\x00\xc9\x00\x00\x00\xfc\x00\x00\x00\xbe\x00\x00\x00\xbd\x00\x00\x00\xf5\x01\x00\x00\x08\x02\x00\x00\xa6\x01\x00\x00\xf2\x00\x00\x00/\x02\x00\x00s\x01\x00\x00\xc4\x01\x00\x00\x96\x00\x00\x00\xff\x01\x00\x00\x92\x00\x00\x00\x1f\x00\x00\x00\x98\x00\x00\x00\x0b\x02\x00\x00\xdc\x00\x00\x00C\x01\x00\x00\xb1\x00\x00\x00\xb1\x01\x00\x00\xd7\x01\x00\x00%\x00\x00\x00\xf3\x01\x00\x00\xd7\x00\x00\x00\t\x01\x00\x00\xb8\x01\x00\x00>\x00\x00\x00A\x02\x00\x00i\x01\x00\x00\x02\x00\x00\x00+\x00\x00\x00\x9c\x01\x00\x00\x8a\x01\x00\x00q\x01\x00\x00T\x00\x00\x00\x10\x00\x00\x008\x01\x00\x00E\x00\x00\x00|\x01\x00\x00(\x01\x00\x00\xb3\x01\x00\x00\xc8\x00\x00\x00\xd0\x01\x00\x00\xa9\x01\x00\x00P\x01\x00\x00\xdd\x01\x00\x00\xa0\x01\x00\x00\x1f\x01\x00\x00\xe6\x01\x00\x00\xa8\x00\x00\x00\xc6\x01\x00\x00\xc1\x00\x00\x00]\x01\x00\x00R\x00\x00\x00m\x01\x00\x00\x8c\x01\x00\x00\x10\x02\x00\x00$\x01\x00\x00-\x02\x00\x00L\x02\x00\x00\x1a\x01\x00\x00J\x01\x00\x00\r\x00\x00\x00\xc2\x00\x00\x00w\x01\x00\x00\xcf\x01\x00\x00\x9f\x00\x00\x00\xb0\x00\x00\x00\xd8\x00\x00\x00\x15\x01\x00\x00&\x02\x00\x00\x8b\x00\x00\x00\xf7\x00\x00\x00<\x01\x00\x00K\x02\x00\x00\x12\x02\x00\x00\x17\x01\x00\x00\xfb\x00\x00\x000\x02\x00\x00\x9b\x00\x00\x00&\x00\x00\x00\xed\x01\x00\x00p\x00\x00\x00&\x01\x00\x00\x89\x00\x00\x00\xcd\x01\x00\x00)\x00\x00\x00\x93\x00\x00\x00A\x01\x00\x00\xb2\x00\x00\x00T\x02\x00\x00\x15\x02\x00\x00$\x00\x00\x00y\x01\x00\x00\x8e\x01\x00\x00/\x01\x00\x00\x05\x02\x00\x00\xba\x00\x00\x00\xaa\x00\x00\x00\xef\x00\x00\x003\x01\x00\x00^\x01\x00\x00o\x01\x00\x00\x08\x01\x00\x00\t\x00\x00\x00f\x01\x00\x00e\x00\x00\x00\x18\x01\x00\x00\xa1\x00\x00\x00\xc0\x01\x00\x00\xaa\x01\x00\x00o\x00\x00\x00b\x01\x00\x00\xfe\x00\x00\x00e\x01\x00\x00\xb6\x01\x00\x00\x15\x00\x00\x00\x06\x00\x00\x00\x8d\x00\x00\x00\x04\x00\x00\x00\x80\x01\x00\x00\xfa\x00\x00\x009\x00\x00\x00\xc6\x00\x00\x00\xe0\x00\x00\x00v\x00\x00\x00b\x00\x00\x007\x01\x00\x00\x9d\x01\x00\x00u\x01\x00\x00\x97\x01\x00\x00V\x01\x00\x00%\x02\x00\x00"\x02\x00\x00V\x02\x00\x00@\x02\x00\x00\xca\x01\x00\x00\x90\x00\x00\x002\x00\x00\x00\xcb\x01\x00\x00#\x00\x00\x002\x02\x00\x00\xe5\x01\x00\x00Y\x00\x00\x00#\x02\x00\x00\x9e\x00\x00\x00k\x01\x00\x00$\x02\x00\x00\x1c\x00\x00\x00\x1e\x01\x00\x00}\x00\x00\x00\xb9\x00\x00\x00\xb3\x00\x00\x005\x00\x00\x00\xac\x01\x00\x00Y\x01\x00\x009\x02\x00\x00\xe4\x01\x00\x00\x01\x01\x00\x00:\x00\x00\x00\xd1\x01\x00\x00\x9a\x00\x00\x00\x85\x00\x00\x00\xed\x00\x00\x00\x16\x00\x00\x00Q\x02\x00\x00\x0c\x00\x00\x00>\x01\x00\x00p\x01\x00\x00>\x02\x00\x00\x94\x00\x00\x00g\x00\x00\x00;\x00\x00\x00\xdb\x01\x00\x00\xe7\x00\x00\x00.\x01\x00\x00\xf2\x01\x00\x00\x8a\x00\x00\x004\x00\x00\x00\x82\x00\x00\x00m\x00\x00\x00!\x02\x00\x00?\x00\x00\x00\xa4\x01\x00\x00\xb2\x01\x00\x00\x80\x00\x00\x00C\x02\x00\x00\r\x01\x00\x00\x93\x01\x00\x00X\x00\x00\x00L\x01\x00\x00\xdb\x00\x00\x00,\x00\x00\x00\x81\x00\x00\x00\xe8\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00 \x02\x00\x00M\x02\x00\x00C\x00\x00\x00T\x01\x00\x00;\x02\x00\x00\x19\x00\x00\x00_\x00\x00\x00\x95\x01\x00\x006\x00\x00\x00 \x00\x00\x00O\x00\x00\x00/\x00\x00\x006\x02\x00\x00H\x01\x00\x00\x07\x00\x00\x00.\x00\x00\x00K\x01\x00\x00\xba\x01\x00\x00\x89\x01\x00\x00W\x01\x00\x00h\x01\x00\x00H\x02\x00\x00\xb5\x00\x00\x00*\x00\x00\x00\'\x02\x00\x00\x03\x01\x00\x00B\x02\x00\x00\xd3\x00\x00\x00\x19\x01\x00\x00\x08\x00\x00\x00P\x02\x00\x00\xf7\x01\x00\x00\xe9\x00\x00\x00\xe4\x00\x00\x00\xbe\x01\x00\x00.\x02\x00\x00\xfd\x00\x00\x00\x8f\x01\x00\x00\x81\x01\x00\x00\x82\x01\x00\x00\xb4\x01\x00\x00\x86\x01\x00\x00\x12\x00\x00\x00\x13\x02\x00\x00\xd0\x00\x00\x00G\x00\x00\x00\xa9\x00\x00\x00\xdd\x00\x00\x00\xa1\x01\x00\x00r\x00\x00\x00\x17\x00\x00\x00\'\x00\x00\x00\xfe\x01\x00\x00\xab\x00\x00\x00,\x01\x00\x00\xbf\x00\x00\x00s\x00\x00\x00}\x01\x00\x00\xea\x00\x00\x00\xb4\x00\x00\x00\xe2\x00\x00\x00a\x00\x00\x00\x9a\x01\x00\x00\x18\x00\x00\x00\x7f\x01\x00\x00!\x00\x00\x009\x01\x00\x00\xd4\x01\x00\x00x\x01\x00\x00\xae\x01\x00\x00^\x00\x00\x00*\x02\x00\x00\xee\x00\x00\x00\x91\x00\x00\x00h\x00\x00\x00\xbc\x01\x00\x000\x01\x00\x00\x92\x01\x00\x00\xf4\x00\x00\x00\xc5\x01\x00\x00U\x02\x00\x00\xa3\x00\x00\x00\xc3\x01\x00\x00\x04\x02\x00\x00)\x01\x00\x00Q\x01\x00\x00\x0c\x01\x00\x00\x85\x01\x00\x00O\x01\x00\x00F\x00\x00\x00;\x01\x00\x00\x90\x01\x00\x00\xd9\x00\x00\x00\x8f\x00\x00\x00f\x00\x00\x00\xde\x00\x00\x00\xa0\x00\x00\x00\xe6\x00\x00\x00\x95\x00\x00\x006\x01\x00\x00\xde\x01\x00\x00\xd4\x00\x00\x00\x06\x02\x00\x00\x07\x01\x00\x00S\x00\x00\x00"\x01\x00\x00\xe0\x01\x00\x00J\x02\x00\x00\x0b\x01\x00\x00q\x00\x00\x00\x96\x01\x00\x00\x83\x01\x00\x00-\x00\x00\x00\xb5\x01\x00\x00d\x00\x00\x001\x00\x00\x00=\x00\x00\x00\xc3\x00\x00\x00\x1d\x01\x00\x00\x11\x00\x00\x00\xa4\x00\x00\x00\xa6\x00\x00\x00\xe7\x01\x00\x00\'\x01\x00\x00\x01\x02\x00\x00\xb6\x00\x00\x00\xee\x01\x00\x00\xfa\x01\x00\x00\xeb\x00\x00\x00_\x01\x00\x005\x02\x00\x00\x03\x02\x00\x00\xe3\x01\x00\x00\xe9\x01\x00\x00z\x01\x00\x00\x06\x01\x00\x00z\x00\x00\x00F\x01\x00\x00\x04\x01\x00\x00\x0b\x00\x00\x00V\x00\x00\x00k\x00\x00\x00\x83\x00\x00\x00I\x01\x00\x00\x0e\x00\x00\x00\x8e\x00\x00\x00\xd8\x01\x00\x00\x1d\x02\x00\x00%\x01\x00\x00\x05\x00\x00\x00\xa7\x01\x00\x00\x0e\x01\x00\x00n\x01\x00\x00\xcc\x00\x00\x00\xd5\x01\x00\x00I\x02\x00\x00\x1d\x00\x00\x00\xa5\x01\x00\x00<\x02\x00\x00\x1e\x00\x00\x00K\x00\x00\x00\xcf\x00\x00\x00(\x02\x00\x00\xb7\x00\x00\x00\xd1\x00\x00\x008\x00\x00\x00(\x00\x00\x00\xa7\x00\x00\x00?\x01\x00\x00\xdc\x01\x00\x00+\x01\x00\x00\x88\x01\x00\x00H\x00\x00\x00\x84\x01\x00\x00\xf1\x01\x00\x00\xe3\x00\x00\x00\xf5\x00\x00\x00=\x02\x00\x00N\x02\x00\x00\x0f\x02\x00\x00\xab\x01\x00\x00E\x02\x00\x00|\x00\x00\x00\xef\x01\x00\x00\x1b\x00\x00\x00\xae\x00\x00\x00\\\x00\x00\x00\xcb\x00\x00\x00Q\x00\x00\x00B\x00\x00\x00{\x00\x00\x00w\x00\x00\x00\r\x02\x00\x007\x02\x00\x00\x91\x01\x00\x00U\x00\x00\x00\x1a\x02\x00\x00t\x01\x00\x00c\x00\x00\x00\xbd\x01\x00\x00\xfc\x01\x00\x00t\x00\x00\x00\x9d\x00\x00\x00\x98\x01\x00\x00\x13\x01\x00\x00`\x00\x00\x00\x1b\x02\x00\x00\x94\x01\x00\x00B\x01\x00\x00\xc5\x00\x00\x00\xbc\x00\x00\x00\xfd\x01\x00\x00[\x00\x00\x00\xe8\x01\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00A\x00\x00\x007\x00\x00\x00\x03\x00\x00\x00a\x01\x00\x003\x02\x00\x00\x12\x01\x00\x00?\x02\x00\x00c\x01\x00\x001\x01\x00\x00\xf0\x01\x00\x00U\x01\x00\x008\x02\x00\x00\n\x02\x00\x00\x9f\x01\x00\x00\x8d\x01\x00\x00\x14\x02\x00\x00G\x02\x00\x00\xf3\x00\x00\x00x\x00\x00\x00\x7f\x00\x00\x00v\x01\x00\x00J\x00\x00\x00:\x01\x00\x00D\x00\x00\x00I\x00\x00\x002\x01\x00\x00O\x02\x00\x00]\x00\x00\x00j\x01\x00\x00\xc1\x01\x00\x00\xf1\x00\x00\x00R\x02\x00\x003\x00\x00\x00\x01\x00\x00\x00\xe2\x01\x00\x00\xf9\x00\x00\x00\x87\x01\x00\x00\xc7\x01\x00\x00\xca\x00\x00\x00\xd2\x00\x00\x00\x9b\x01\x00\x00*\x01\x00\x00\x1c\x01\x00\x00\x88\x00\x00\x00\xcc\x01\x00\x00\x0f\x00\x00\x00\xeb\x01\x00\x00\xe5\x00\x00\x00g\x01\x00\x00Z\x01\x00\x00\x18\x02\x00\x00l\x00\x00\x00y\x00\x00\x00n\x00\x00\x00\x0c\x02\x00\x00F\x02\x00\x00\xa2\x01\x00\x00<\x00\x00\x00=\x01\x00\x00\xa8\x01\x00\x00\x10\x01\x00\x00\x84\x00\x00\x00\xf8\x00\x00\x000\x00\x00\x00,\x02\x00\x00\xac\x00\x00\x00\xc8\x01\x00\x00\x8b\x01\x00\x00\xf8\x01\x00\x00G\x01\x00\x00@\x00\x00\x00\x13\x00\x00\x00\x9c\x00\x00\x00\xdf\x00\x00\x00\xce\x01\x00\x00@\x01\x00\x00N\x00\x00\x00\xe1\x00\x00\x00\xdf\x01\x00\x00\xf4\x01\x00\x00\n\x01\x00\x00\xda\x01\x00\x00\x99\x00\x00\x00+\x02\x00\x00\x0e\x02\x00\x00\x16\x01\x00\x00D\x02\x00\x00\x02\x01\x00\x00R\x01\x00\x00u\x00\x00\x00\n\x00\x00\x00[\x01\x00\x00D\x01\x00\x00r\x01\x00\x00\xd3\x01\x00\x00l\x01\x00\x00\x16\x02\x00\x00\x99\x01\x00\x00\xa5\x00\x00\x00\xc7\x00\x00\x00X\x01\x00\x00\xb7\x01\x00\x00\xc4\x00\x00\x00\xfb\x01\x00\x00~\x00\x00\x001\x02\x00\x00\x9e\x01\x00\x00S\x01\x00\x00\x97\x00\x00\x00P\x00\x00\x00\x8c\x00\x00\x00\x19\x02\x00\x004\x02\x00\x00\xc9\x01\x00\x00\xb0\x01\x00\x00\xaf\x01\x00\x00#\x01\x00\x00-\x01\x00\x004\x01\x00\x00\x11\x01\x00\x00L\x00\x00\x00\\\x01\x00\x00\xaf\x00\x00\x00)\x02\x00\x00\x07\x02\x00\x00\x1e\x02\x00\x00\xb8\x00\x00\x00\x14\x00\x00\x00!\x01\x00\x00 \x01\x00\x00d\x01\x00\x00\xce\x00\x00\x00\x02\x02\x00\x00\xec\x01\x00\x00\xd2\x01\x00\x00\xb9\x01\x00\x00\xcd\x00\x00\x00\xbb\x00\x00\x00\xf0\x00\x00\x00M\x00\x00\x00\xd6\x01\x00\x00M\x01\x00\x00\xf9\x01\x00\x00\xad\x01\x00\x00{\x01\x00\x00\xec\x00\x00\x00Z\x00\x00\x00\x1c\x02\x00\x00\xd6\x00\x00\x00\t\x02\x00\x00W\x02\x00\x005\x01\x00\x00\x86\x00\x00\x00\xd5\x00\x00\x00i\x00\x00\x00`\x01\x00\x00\x11\x02\x00\x00\xf6\x00\x00\x00\xe1\x01\x00\x00\xa3\x01\x00\x00\xea\x01\x00\x00"\x00\x00\x00W\x00\x00\x00\xff\x00\x00\x00\xa2\x00\x00\x00\xda\x00\x00\x00\x17\x02\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4811
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4812
(g4810
S'\x17\x02\x00\x00'
tRp4813
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4814
I01
sb.