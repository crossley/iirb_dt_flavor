ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject612
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 612
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VFemale
p31
sS'age'
p32
V20
p33
ssS'loopsUnfinished'
p34
(lp35
g1
(cpsychopy.data
TrialHandler
p36
g3
NtRp37
(dp38
S'origin'
p39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p40
sS'thisTrial'
p41
I1
sS'_exp'
p42
I75888944
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p43
sS'thisRepN'
p44
I54
sg27
I01
sg28
NsS'data'
p45
g1
(cpsychopy.data
DataHandler
p46
c__builtin__
dict
p47
(dp48
S'ran'
p49
cnumpy.ma.core
_mareconstruct
p50
(cnumpy.ma.core
MaskedArray
p51
cnumpy
ndarray
p52
(I0
tp53
S'b'
tRp54
(I1
(I11
I55
tcnumpy
dtype
p55
(S'f4'
I0
I1
tRp56
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p57
g50
(g51
g52
g53
S'b'
tRp58
(I1
(I11
I55
tg56
I00
S'\x00\x00\xb8A\x00\x00\xc8A\x00\x00\xf8A\x00\x00\x10B\x00\x00\x14B\x00\x00$B\x00\x00,B\x00\x00dB\x00\x00tB\x00\x00\x94B\x00\x00\xaaB\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xe8B\x00\x00\xf2B\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x10C\x00\x00\x1cC\x00\x00 C\x00\x00IC\x00\x00OC\x00\x00TC\x00\x00`C\x00\x00dC\x00\x00tC\x00\x00uC\x00\x00zC\x00\x00{C\x00\x80\x80C\x00\x80\x8cC\x00\x00\x8fC\x00\x00\x91C\x00\x00\x93C\x00\x80\x97C\x00\x00\xa8C\x00\x80\xaeC\x00\x00\xbbC\x00\x80\xbdC\x00\x00\xbfC\x00\x80\xcbC\x00\x00\xccC\x00\x80\xd1C\x00\x80\xd2C\x00\x00\xe0C\x00\x80\xeeC\x00\x80\xf3C\x00\x80\xf4C\x00\x00\xf8C\x00\x00\x00D\x00\xc0\x05D\x00\xc0\nD\x00\x80\rD\x00\xc0\x0eD\x00\x00\x80@\x00\x00\x08B\x00\x00 B\x00\x00\xb6B\x00\x00\xc8B\x00\x00\xe0B\x00\x00\xeaB\x00\x00\xf0B\x00\x00\xfaB\x00\x00\x02C\x00\x00\x04C\x00\x00"C\x00\x00.C\x00\x00AC\x00\x00BC\x00\x00FC\x00\x00GC\x00\x00NC\x00\x00WC\x00\x00ZC\x00\x00]C\x00\x00\x7fC\x00\x00\x83C\x00\x00\x88C\x00\x80\x89C\x00\x00\x8cC\x00\x80\x8eC\x00\x80\x8fC\x00\x80\x91C\x00\x80\x96C\x00\x80\xa0C\x00\x00\xa2C\x00\x80\xa3C\x00\x80\xacC\x00\x80\xadC\x00\x80\xb1C\x00\x00\xb4C\x00\x80\xb4C\x00\x80\xb5C\x00\x00\xb6C\x00\x80\xb8C\x00\x00\xceC\x00\x00\xd0C\x00\x80\xd7C\x00\x80\xdaC\x00\x00\xdbC\x00\x80\xe8C\x00\x00\xeaC\x00\x00\xf3C\x00\x80\xfcC\x00\x80\xffC\x00\x80\x05D\x00@\rD\x00@\x12D\x00\xc0\x15D\x00\x00\x10A\x00\x00\xc0A\x00\x00(B\x00\x00DB\x00\x00\x8cB\x00\x00\x92B\x00\x00\x9eB\x00\x00\xb2B\x00\x00\x19C\x00\x00-C\x00\x006C\x00\x00EC\x00\x00PC\x00\x00oC\x00\x00|C\x00\x80\x86C\x00\x00\x8dC\x00\x00\x8eC\x00\x00\x97C\x00\x00\x98C\x00\x80\xa6C\x00\x00\xa7C\x00\x80\xabC\x00\x00\xb2C\x00\x00\xbcC\x00\x80\xbeC\x00\x80\xc4C\x00\x80\xc5C\x00\x00\xc7C\x00\x00\xc8C\x00\x00\xc9C\x00\x00\xcfC\x00\x80\xd6C\x00\x00\xd9C\x00\x80\xdcC\x00\x00\xe1C\x00\x00\xe4C\x00\x00\xebC\x00\x80\xebC\x00\x00\xedC\x00\x80\xf2C\x00\x00\xfbC\x00\xc0\x02D\x00@\x04D\x00\xc0\x04D\x00\x80\x07D\x00\x00\x08D\x00\x80\tD\x00\x00\x0bD\x00\xc0\x0fD\x00\x80\x13D\x00\xc0\x13D\x00@\x14D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88A\x00\x00\xd8A\x00\x000B\x00\x00\x80B\x00\x00\x8aB\x00\x00\xa6B\x00\x00\xaeB\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\x11C\x00\x00\x1dC\x00\x00!C\x00\x00,C\x00\x009C\x00\x00>C\x00\x00?C\x00\x00MC\x00\x00^C\x00\x00}C\x00\x00~C\x00\x80\x87C\x00\x00\x8aC\x00\x80\x92C\x00\x80\x93C\x00\x80\x95C\x00\x00\x9dC\x00\x00\x9eC\x00\x80\x9fC\x00\x80\xa9C\x00\x00\xadC\x00\x00\xc2C\x00\x80\xc3C\x00\x00\xc5C\x00\x80\xcfC\x00\x80\xddC\x00\x80\xe6C\x00\x80\xe7C\x00\x80\xf1C\x00\x80\xf5C\x00\x00\xf7C\x00\x80\xfbC\x00\x00\xffC\x00\x80\x06D\x00\x00\x07D\x00@\x07D\x00\x00\tD\x00\xc0\tD\x00\x00\nD\x00@\x0eD\x00\xc0\x10D\x00\x00\x13D\x00\xc0\x14D\x00\x00\x15D\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x90A\x00\x00\x98A\x00\x00\x0cB\x00\x008B\x00\x00LB\x00\x00\\B\x00\x00\x82B\x00\x00\x96B\x00\x00\xbeB\x00\x00\xceB\x00\x00\xdcB\x00\x00)C\x00\x00@C\x00\x00CC\x00\x00JC\x00\x00_C\x00\x00cC\x00\x00jC\x00\x80\x85C\x00\x00\x86C\x00\x80\x94C\x00\x80\x99C\x00\x80\x9eC\x00\x80\xa2C\x00\x80\xa5C\x00\x00\xa6C\x00\x80\xa7C\x00\x80\xaaC\x00\x00\xb8C\x00\x00\xc1C\x00\x80\xc1C\x00\x80\xcaC\x00\x80\xcdC\x00\x00\xd1C\x00\x80\xd3C\x00\x80\xdbC\x00\x00\xdfC\x00\x80\xe1C\x00\x80\xe5C\x00\x80\xe9C\x00\x80\xedC\x00\x00\xefC\x00\x80\xefC\x00\x80\xfaC\x00\x80\xfeC\x00\x00\x01D\x00\x80\x01D\x00\x80\x03D\x00\xc0\x06D\x00@\x08D\x00\x80\x0bD\x00\x00\x0fD\x00\xc0\x12D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb0A\x00\x00\xe0A\x00\x00\xf0A\x00\x00<B\x00\x00\xa0B\x00\x00\xb8B\x00\x00\xbcB\x00\x00\xd2B\x00\x00\xd6B\x00\x00\xe4B\x00\x00\xf8B\x00\x00\x03C\x00\x00\x08C\x00\x00\x13C\x00\x00\x17C\x00\x00\x1bC\x00\x00$C\x00\x002C\x00\x00VC\x00\x00nC\x00\x00rC\x00\x00\x81C\x00\x80\x81C\x00\x00\x82C\x00\x80\x8bC\x00\x00\x90C\x00\x00\x96C\x00\x80\x9bC\x00\x00\x9cC\x00\x00\xa9C\x00\x00\xaeC\x00\x00\xb5C\x00\x80\xb9C\x00\x80\xbbC\x00\x80\xc2C\x00\x00\xc6C\x00\x80\xc7C\x00\x00\xcaC\x00\x00\xcbC\x00\x00\xd8C\x00\x80\xe0C\x00\x00\xe5C\x00\x80\xeaC\x00\x00\xeeC\x00\x00\xf5C\x00\x80\xf6C\x00\x00\xfaC\x00\x00\xfeC\x00\xc0\x00D\x00\x00\x02D\x00\x80\x11D\x00\xc0\x11D\x00\x80\x12D\x00@\x13D\x00\x00\xc0@\x00\x000A\x00\x00@A\x00\x00PA\x00\x00\xe8A\x00\x00\x18B\x00\x004B\x00\x00lB\x00\x00xB\x00\x00\x8eB\x00\x00\xc6B\x00\x00\xe2B\x00\x00\x05C\x00\x00%C\x00\x00(C\x00\x00+C\x00\x000C\x00\x00RC\x00\x00[C\x00\x00gC\x00\x00hC\x00\x00vC\x00\x80\x90C\x00\x80\x98C\x00\x80\x9aC\x00\x00\x9bC\x00\x80\xb0C\x00\x80\xb3C\x00\x80\xb6C\x00\x00\xb7C\x00\x80\xbaC\x00\x00\xbeC\x00\x00\xc0C\x00\x80\xceC\x00\x00\xd3C\x00\x80\xd4C\x00\x80\xd5C\x00\x00\xdaC\x00\x00\xdcC\x00\x80\xdeC\x00\x80\xdfC\x00\x00\xe2C\x00\x00\xe9C\x00\x00\xf1C\x00\x00\xf4C\x00\x80\xf9C\x00\x80\x00D\x00\x80\x02D\x00\x00\x06D\x00@\x06D\x00\xc0\x07D\x00@\x0cD\x00\x80\x0cD\x00\xc0\rD\x00\x80\x0fD\x00\x00pA\x00\x00\xa0A\x00\x00\x00B\x00\x00\x04B\x00\x00@B\x00\x00HB\x00\x00TB\x00\x00pB\x00\x00\x86B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\xa4B\x00\x00\xc0B\x00\x00\xcaB\x00\x00\xd4B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdeB\x00\x00\xeeB\x00\x00\x01C\x00\x00\x18C\x00\x00#C\x00\x00\'C\x00\x001C\x00\x004C\x00\x00wC\x00\x00yC\x00\x00\x87C\x00\x80\x8aC\x00\x00\x9aC\x00\x00\xaaC\x00\x80\xb7C\x00\x80\xc9C\x00\x80\xccC\x00\x00\xcdC\x00\x00\xd6C\x00\x80\xd8C\x00\x00\xddC\x00\x00\xdeC\x00\x80\xe3C\x00\x00\xe6C\x00\x00\xe7C\x00\x80\xf7C\x00@\x02D\x00@\x03D\x00\x80\x04D\x00\x00\x05D\x00@\x05D\x00\x80\nD\x00@\x0bD\x00\x00\x0cD\x00\x00\x10D\x00\x00\x11D\x00@\x15D\x00\x00\x80?\x00\x00\x00A\x00\x00`A\x00\x00PB\x00\x00|B\x00\x00\x88B\x00\x00\x90B\x00\x00\xa8B\x00\x00\xacB\x00\x00\xbaB\x00\x00\xccB\x00\x00\xe6B\x00\x00\xecB\x00\x00\x06C\x00\x00\x15C\x00\x00\x1aC\x00\x00\x1fC\x00\x008C\x00\x00;C\x00\x00HC\x00\x00aC\x00\x00bC\x00\x00xC\x00\x80\x82C\x00\x80\x83C\x00\x80\x88C\x00\x00\x92C\x00\x00\x94C\x00\x00\x95C\x00\x80\xa1C\x00\x80\xafC\x00\x00\xb3C\x00\x80\xbcC\x00\x00\xbdC\x00\x00\xc3C\x00\x00\xd4C\x00\x00\xd5C\x00\x80\xd9C\x00\x00\xe8C\x00\x80\xecC\x00\x00\xf0C\x00\x00\xf6C\x00\x80\xf8C\x00\x00\xfdC\x00\x00\x03D\x00\x00\x04D\x00\x80\x08D\x00@\tD\x00@\nD\x00\xc0\x0bD\x00@\x0fD\x00@\x10D\x00\x80\x10D\x00@\x11D\x00\x00\x12D\x00\x00\x00@\x00\x00\xe0@\x00\x00\x80A\x00\x00`B\x00\x00\x84B\x00\x00\xb0B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\x07C\x00\x00\rC\x00\x00\x14C\x00\x00&C\x00\x00/C\x00\x003C\x00\x007C\x00\x00:C\x00\x00<C\x00\x00SC\x00\x00UC\x00\x00XC\x00\x00YC\x00\x00\\C\x00\x00eC\x00\x00mC\x00\x00qC\x00\x00sC\x00\x80\x84C\x00\x00\x89C\x00\x80\x8dC\x00\x80\x9cC\x00\x80\x9dC\x00\x00\xa0C\x00\x00\xa1C\x00\x00\xabC\x00\x00\xafC\x00\x00\xb1C\x00\x80\xb2C\x00\x00\xb9C\x00\x80\xbfC\x00\x80\xc0C\x00\x80\xd0C\x00\x00\xd2C\x00\x00\xd7C\x00\x80\xe2C\x00\x00\xecC\x00\x80\xf0C\x00\x00\xf2C\x00\x00\xf9C\x00@\x00D\x00\xc0\x01D\x00\xc0\x03D\x00\xc0\x08D\x00\xc0\x0cD\x00\x00\x14D\x00\x80\x14D\x00\x00@@\x00\x00 A\x00\x00\xa8A\x00\x00\xd0A\x00\x00\x1cB\x00\x00XB\x00\x00hB\x00\x00\xa2B\x00\x00\xb4B\x00\x00\xd0B\x00\x00\tC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x12C\x00\x00\x16C\x00\x00\x1eC\x00\x00*C\x00\x005C\x00\x00=C\x00\x00DC\x00\x00KC\x00\x00LC\x00\x00QC\x00\x00fC\x00\x00iC\x00\x00kC\x00\x00lC\x00\x00pC\x00\x00\x80C\x00\x00\x84C\x00\x00\x85C\x00\x00\x8bC\x00\x00\x99C\x00\x00\x9fC\x00\x00\xa3C\x00\x00\xa4C\x00\x80\xa4C\x00\x00\xa5C\x00\x80\xa8C\x00\x00\xacC\x00\x00\xb0C\x00\x00\xbaC\x00\x00\xc4C\x00\x80\xc6C\x00\x80\xc8C\x00\x00\xe3C\x00\x80\xe4C\x00\x00\xfcC\x00\x80\xfdC\x00@\x01D\x00\x00\rD\x00\x00\x0eD\x00\x80\x0eD\x00\x80\x15D\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
NtbstRp59
(dp60
S'isNumeric'
p61
(dp62
g49
I01
sg57
I01
ssS'trials'
p63
g37
sS'dataTypes'
p64
(lp65
g49
ag57
asS'dataShape'
p66
(lp67
I11
aI55
asbsS'method'
p68
S'fullRandom'
p69
sS'sequenceIndices'
p70
cnumpy.core.multiarray
_reconstruct
p71
(g52
(I0
tS'b'
tRp72
(I1
(I11
I55
tg55
(S'O4'
I0
I1
tRp73
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp74
I5
aI6
aI5
aI7
aI3
aI4
aI9
aI7
aI9
aI6
aI4
aI0
aI1
aI10
aI8
aI6
aI6
aI8
aI1
aI10
aI9
aI6
aI5
aI3
aI10
aI1
aI0
aI4
aI7
aI3
aI10
aI4
aI10
aI1
aI0
aI9
aI5
aI0
aI4
aI2
aI6
aI4
aI7
aI8
aI9
aI7
aI8
aI10
aI8
aI4
aI2
aI6
aI4
aI5
aI9
aI8
aI6
aI0
aI1
aI6
aI9
aI7
aI7
aI2
aI1
aI7
aI9
aI6
aI0
aI5
aI9
aI7
aI9
aI1
aI6
aI1
aI6
aI9
aI3
aI9
aI3
aI1
aI8
aI6
aI9
aI4
aI9
aI6
aI1
aI5
aI4
aI10
aI0
aI0
aI9
aI2
aI6
aI3
aI2
aI2
aI0
aI10
aI4
aI2
aI3
aI3
aI6
aI8
aI8
aI3
aI9
aI6
aI2
aI4
aI4
aI0
aI8
aI2
aI10
aI7
aI1
aI9
aI8
aI3
aI0
aI7
aI5
aI10
aI8
aI9
aI3
aI10
aI0
aI1
aI10
aI7
aI5
aI3
aI6
aI1
aI4
aI2
aI9
aI6
aI2
aI4
aI2
aI7
aI9
aI1
aI7
aI9
aI8
aI4
aI1
aI8
aI5
aI9
aI7
aI3
aI3
aI9
aI6
aI1
aI3
aI10
aI8
aI0
aI0
aI5
aI10
aI3
aI5
aI1
aI8
aI6
aI5
aI9
aI10
aI3
aI6
aI9
aI3
aI0
aI0
aI4
aI4
aI0
aI10
aI4
aI10
aI6
aI5
aI5
aI9
aI2
aI10
aI1
aI6
aI8
aI3
aI5
aI7
aI0
aI5
aI3
aI10
aI1
aI5
aI0
aI9
aI4
aI5
aI2
aI2
aI8
aI10
aI2
aI5
aI7
aI1
aI7
aI10
aI0
aI7
aI6
aI2
aI10
aI5
aI4
aI5
aI1
aI5
aI5
aI10
aI4
aI7
aI3
aI4
aI9
aI0
aI10
aI6
aI0
aI4
aI5
aI0
aI1
aI5
aI8
aI2
aI1
aI2
aI7
aI8
aI5
aI2
aI4
aI6
aI7
aI7
aI7
aI6
aI0
aI6
aI6
aI3
aI7
aI7
aI6
aI7
aI1
aI7
aI4
aI10
aI4
aI9
aI3
aI6
aI2
aI7
aI6
aI7
aI8
aI10
aI8
aI0
aI10
aI9
aI8
aI10
aI10
aI4
aI10
aI5
aI8
aI10
aI7
aI5
aI2
aI1
aI1
aI2
aI9
aI1
aI4
aI3
aI9
aI4
aI0
aI8
aI10
aI1
aI4
aI2
aI6
aI2
aI4
aI4
aI0
aI5
aI1
aI6
aI7
aI2
aI0
aI0
aI8
aI3
aI1
aI6
aI3
aI5
aI10
aI7
aI0
aI8
aI3
aI5
aI5
aI0
aI0
aI3
aI8
aI0
aI6
aI2
aI1
aI10
aI1
aI8
aI9
aI8
aI5
aI7
aI0
aI8
aI0
aI3
aI4
aI0
aI1
aI8
aI1
aI6
aI3
aI2
aI6
aI8
aI8
aI4
aI10
aI1
aI4
aI5
aI4
aI0
aI2
aI1
aI4
aI2
aI6
aI8
aI5
aI3
aI9
aI4
aI6
aI1
aI4
aI6
aI2
aI8
aI4
aI7
aI1
aI0
aI3
aI10
aI3
aI3
aI9
aI1
aI3
aI9
aI4
aI5
aI7
aI5
aI3
aI2
aI3
aI2
aI9
aI10
aI10
aI5
aI6
aI9
aI2
aI10
aI7
aI2
aI6
aI6
aI6
aI5
aI5
aI8
aI3
aI2
aI9
aI8
aI0
aI8
aI7
aI10
aI3
aI2
aI4
aI8
aI4
aI5
aI0
aI8
aI8
aI0
aI0
aI7
aI5
aI8
aI7
aI3
aI5
aI1
aI2
aI8
aI4
aI1
aI9
aI0
aI2
aI0
aI8
aI1
aI9
aI0
aI6
aI3
aI1
aI5
aI0
aI1
aI5
aI0
aI2
aI5
aI3
aI8
aI1
aI0
aI4
aI2
aI9
aI8
aI3
aI6
aI7
aI6
aI9
aI4
aI3
aI7
aI2
aI2
aI2
aI7
aI0
aI2
aI7
aI3
aI4
aI8
aI0
aI7
aI7
aI1
aI9
aI7
aI7
aI1
aI3
aI10
aI0
aI1
aI9
aI10
aI0
aI1
aI8
aI2
aI3
aI10
aI4
aI10
aI3
aI9
aI1
aI10
aI9
aI3
aI4
aI1
aI6
aI1
aI5
aI7
aI2
aI6
aI5
aI10
aI5
aI4
aI6
aI3
aI8
aI10
aI8
aI9
aI2
aI10
aI10
aI7
aI0
aI10
aI4
aI7
aI3
aI0
aI7
aI1
aI5
aI10
aI2
aI5
aI9
aI9
aI2
aI2
aI6
aI10
aI9
aI2
aI8
aI9
aI1
aI8
aI4
aI10
aI10
aI7
aI8
aI5
aI6
aI6
aI2
aI5
aI9
aI7
aI4
aI2
aI3
aI9
aI3
aI3
aI1
aI4
aI9
aI3
aI8
aI7
aI0
aI5
aI2
aI10
atbsS'finished'
p75
I00
sS'nReps'
p76
I55
sS'nRemaining'
p77
I5
sS'trialList'
p78
(lp79
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p80
NsS'thisIndex'
p81
I1
sS'thisN'
p82
I599
sS'thisTrialN'
p83
I5
sS'nTotal'
p84
I605
sS'_warnUseOfNext'
p85
I01
sbasS'saveWideText'
p86
I01
sS'thisEntry'
p87
(dp88
sS'version'
p89
S''
sS'_paramNamesSoFar'
p90
(lp91
sS'entries'
p92
(lp93
(dp94
g16
(lp95
S'd'
asS'.thisTrial'
p96
I5
sS'.thisRepN'
p97
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p98
I0
sS'.thisN'
p99
I0
sS'.thisIndex'
p100
I5
sg15
(lp101
S'd'
asg17
S'Y'
sg14
I1
sa(dp102
g16
(lp103
S'd'
asg96
I8
sS'.thisRepN'
p104
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p105
I1
sS'.thisN'
p106
I1
sS'.thisIndex'
p107
I8
sg15
(lp108
S'k'
asg17
S'N'
sg14
I1
sa(dp109
g16
(lp110
S'd'
asg18
S'Y'
sS'.thisRepN'
p111
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p112
I2
sS'.thisN'
p113
I2
sS'.thisIndex'
p114
I9
sg15
(lp115
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp116
S'space'
p117
asg96
I9
sa(dp118
g16
(lp119
S'k'
asg18
S'Y'
sS'.thisRepN'
p120
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p121
I3
sS'.thisN'
p122
I3
sS'.thisIndex'
p123
I10
sg15
(lp124
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp125
S'space'
p126
asg96
I10
sa(dp127
g16
(lp128
S'd'
asg18
S'N'
sS'.thisRepN'
p129
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p130
I4
sS'.thisN'
p131
I4
sS'.thisIndex'
p132
I1
sg15
(lp133
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I1
sa(dp134
g16
(lp135
S'k'
asg18
S'N'
sS'.thisRepN'
p136
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p137
I5
sS'.thisN'
p138
I5
sS'.thisIndex'
p139
I4
sg15
(lp140
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp141
S'k'
asg96
I4
sa(dp142
g16
(lp143
S'd'
asg18
S'N'
sS'.thisRepN'
p144
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p145
I6
sS'.thisN'
p146
I6
sS'.thisIndex'
p147
I6
sg15
(lp148
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I6
sa(dp149
g16
(lp150
S'k'
asg18
S'Y'
sS'.thisRepN'
p151
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p152
I7
sS'.thisN'
p153
I7
sS'.thisIndex'
p154
I9
sg15
(lp155
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp156
S'space'
p157
asg96
I9
sa(dp158
g16
(lp159
S'd'
asg18
S'N'
sS'.thisRepN'
p160
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p161
I8
sS'.thisN'
p162
I8
sS'.thisIndex'
p163
I8
sg15
(lp164
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I8
sa(dp165
g16
(lp166
S'd'
asg18
S'Y'
sS'.thisRepN'
p167
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p168
I9
sS'.thisN'
p169
I9
sS'.thisIndex'
p170
I2
sg15
(lp171
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp172
g16
(lp173
S'k'
asg18
S'Y'
sS'.thisRepN'
p174
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p175
I10
sS'.thisN'
p176
I10
sS'.thisIndex'
p177
I10
sg15
(lp178
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp179
S'space'
p180
asg96
I10
sa(dp181
g16
(lp182
S'k'
asg18
S'N'
sS'.thisRepN'
p183
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p184
I0
sS'.thisN'
p185
I11
sS'.thisIndex'
p186
I6
sg15
(lp187
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp188
g16
(lp189
S'k'
asg18
S'Y'
sS'.thisRepN'
p190
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p191
I1
sS'.thisN'
p192
I12
sS'.thisIndex'
p193
I6
sg15
(lp194
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp195
g16
(lp196
S'k'
asg18
S'N'
sS'.thisRepN'
p197
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p198
I2
sS'.thisN'
p199
I13
sS'.thisIndex'
p200
I6
sg15
(lp201
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp202
g16
(lp203
S'k'
asg18
S'Y'
sS'.thisRepN'
p204
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p205
I3
sS'.thisN'
p206
I14
sS'.thisIndex'
p207
I8
sg15
(lp208
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I8
sa(dp209
g16
(lp210
S'd'
asg18
S'Y'
sS'.thisRepN'
p211
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p212
I4
sS'.thisN'
p213
I15
sS'.thisIndex'
p214
I7
sg15
(lp215
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp216
S'space'
p217
asg96
I7
sa(dp218
g16
(lp219
S'k'
asg18
S'Y'
sS'.thisRepN'
p220
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p221
I5
sS'.thisN'
p222
I16
sS'.thisIndex'
p223
I9
sg15
(lp224
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp225
S'space'
p226
asg96
I9
sa(dp227
g16
(lp228
S'k'
asg18
S'N'
sS'.thisRepN'
p229
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p230
I6
sS'.thisN'
p231
I17
sS'.thisIndex'
p232
I3
sg15
(lp233
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I3
sa(dp234
g16
(lp235
S'k'
asg18
S'Y'
sS'.thisRepN'
p236
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p237
I7
sS'.thisN'
p238
I18
sS'.thisIndex'
p239
I4
sg15
(lp240
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp241
S'space'
p242
asg96
I4
sa(dp243
g16
(lp244
S'd'
asg18
S'Y'
sS'.thisRepN'
p245
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p246
I8
sS'.thisN'
p247
I19
sS'.thisIndex'
p248
I4
sg15
(lp249
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp250
S'space'
p251
asg96
I4
sa(dp252
g16
(lp253
S'k'
asg18
S'N'
sS'.thisRepN'
p254
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p255
I9
sS'.thisN'
p256
I20
sS'.thisIndex'
p257
I7
sg15
(lp258
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp259
S'space'
p260
asg96
I7
sa(dp261
g16
(lp262
S'd'
asg18
S'N'
sS'.thisRepN'
p263
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p264
I10
sS'.thisN'
p265
I21
sS'.thisIndex'
p266
I10
sg15
(lp267
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I10
sa(dp268
g16
(lp269
S'k'
asg18
S'Y'
sS'.thisRepN'
p270
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p271
I0
sS'.thisN'
p272
I22
sS'.thisIndex'
p273
I5
sg15
(lp274
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I5
sa(dp275
g16
(lp276
S'k'
asg18
S'N'
sS'.thisRepN'
p277
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p278
I1
sS'.thisN'
p279
I23
sS'.thisIndex'
p280
I0
sg15
(lp281
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I0
sa(dp282
g16
(lp283
S'k'
asg18
S'Y'
sS'.thisRepN'
p284
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p285
I2
sS'.thisN'
p286
I24
sS'.thisIndex'
p287
I2
sg15
(lp288
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp289
S'space'
p290
asg96
I2
sa(dp291
g16
(lp292
S'k'
asg18
S'N'
sS'.thisRepN'
p293
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p294
I3
sS'.thisN'
p295
I25
sS'.thisIndex'
p296
I0
sg15
(lp297
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I0
sa(dp298
g16
(lp299
S'k'
asg18
S'Y'
sS'.thisRepN'
p300
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p301
I4
sS'.thisN'
p302
I26
sS'.thisIndex'
p303
I10
sg15
(lp304
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp305
S'space'
p306
asg96
I10
sa(dp307
g16
(lp308
S'd'
asg18
S'N'
sS'.thisRepN'
p309
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p310
I5
sS'.thisN'
p311
I27
sS'.thisIndex'
p312
I3
sg15
(lp313
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I3
sa(dp314
g16
(lp315
S'k'
asg18
S'N'
sS'.thisRepN'
p316
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p317
I6
sS'.thisN'
p318
I28
sS'.thisIndex'
p319
I5
sg15
(lp320
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp321
g16
(lp322
S'd'
asg18
S'Y'
sS'.thisRepN'
p323
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p324
I7
sS'.thisN'
p325
I29
sS'.thisIndex'
p326
I6
sg15
(lp327
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp328
S'space'
p329
asg96
I6
sa(dp330
g16
(lp331
S'k'
asg18
S'N'
sS'.thisRepN'
p332
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p333
I8
sS'.thisN'
p334
I30
sS'.thisIndex'
p335
I5
sg15
(lp336
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp337
g16
(lp338
S'd'
asg18
S'N'
sS'.thisRepN'
p339
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p340
I9
sS'.thisN'
p341
I31
sS'.thisIndex'
p342
I0
sg15
(lp343
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I0
sa(dp344
g16
(lp345
S'k'
asg18
S'Y'
sS'.thisRepN'
p346
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p347
I10
sS'.thisN'
p348
I32
sS'.thisIndex'
p349
I7
sg15
(lp350
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp351
S'space'
p352
asg96
I7
sa(dp353
g16
(lp354
S'k'
asg18
S'Y'
sS'.thisRepN'
p355
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p356
I0
sS'.thisN'
p357
I33
sS'.thisIndex'
p358
I7
sg15
(lp359
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp360
S'space'
p361
asg96
I7
sa(dp362
g16
(lp363
S'k'
asg18
S'Y'
sS'.thisRepN'
p364
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p365
I1
sS'.thisN'
p366
I34
sS'.thisIndex'
p367
I1
sg15
(lp368
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I1
sa(dp369
g16
(lp370
S'k'
asg18
S'Y'
sS'.thisRepN'
p371
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p372
I2
sS'.thisN'
p373
I35
sS'.thisIndex'
p374
I4
sg15
(lp375
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp376
S'space'
p377
asg96
I4
sa(dp378
g16
(lp379
S'k'
asg18
S'Y'
sS'.thisRepN'
p380
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p381
I3
sS'.thisN'
p382
I36
sS'.thisIndex'
p383
I0
sg15
(lp384
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp385
S'space'
p386
asg96
I0
sa(dp387
g16
(lp388
S'd'
asg18
S'N'
sS'.thisRepN'
p389
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p390
I4
sS'.thisN'
p391
I37
sS'.thisIndex'
p392
I0
sg15
(lp393
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp394
S'space'
p395
asg96
I0
sa(dp396
g16
(lp397
S'd'
asg18
S'Y'
sS'.thisRepN'
p398
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p399
I5
sS'.thisN'
p400
I38
sS'.thisIndex'
p401
I6
sg15
(lp402
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp403
S'space'
p404
asg96
I6
sa(dp405
g16
(lp406
S'k'
asg18
S'Y'
sS'.thisRepN'
p407
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p408
I6
sS'.thisN'
p409
I39
sS'.thisIndex'
p410
I10
sg15
(lp411
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp412
S'space'
p413
asg96
I10
sa(dp414
g16
(lp415
S'd'
asg18
S'Y'
sS'.thisRepN'
p416
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p417
I7
sS'.thisN'
p418
I40
sS'.thisIndex'
p419
I1
sg15
(lp420
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp421
S'space'
p422
asg96
I1
sa(dp423
g16
(lp424
S'd'
asg18
S'N'
sS'.thisRepN'
p425
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p426
I8
sS'.thisN'
p427
I41
sS'.thisIndex'
p428
I0
sg15
(lp429
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I0
sa(dp430
g16
(lp431
S'k'
asg18
S'N'
sS'.thisRepN'
p432
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p433
I9
sS'.thisN'
p434
I42
sS'.thisIndex'
p435
I2
sg15
(lp436
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp437
g16
(lp438
S'd'
asg18
S'Y'
sS'.thisRepN'
p439
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p440
I10
sS'.thisN'
p441
I43
sS'.thisIndex'
p442
I0
sg15
(lp443
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp444
S'space'
p445
asg96
I0
sa(dp446
g16
(lp447
S'd'
asg18
S'Y'
sS'.thisRepN'
p448
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p449
I0
sS'.thisN'
p450
I44
sS'.thisIndex'
p451
I3
sg15
(lp452
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp453
S'space'
p454
asg96
I3
sa(dp455
g16
(lp456
S'k'
asg18
S'N'
sS'.thisRepN'
p457
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p458
I1
sS'.thisN'
p459
I45
sS'.thisIndex'
p460
I6
sg15
(lp461
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp462
g16
(lp463
S'k'
asg18
S'N'
sS'.thisRepN'
p464
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p465
I2
sS'.thisN'
p466
I46
sS'.thisIndex'
p467
I4
sg15
(lp468
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp469
S'space'
p470
asg96
I4
sa(dp471
g16
(lp472
S'k'
asg18
S'N'
sS'.thisRepN'
p473
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p474
I3
sS'.thisN'
p475
I47
sS'.thisIndex'
p476
I5
sg15
(lp477
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp478
g16
(lp479
S'd'
asg18
S'N'
sS'.thisRepN'
p480
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p481
I4
sS'.thisN'
p482
I48
sS'.thisIndex'
p483
I7
sg15
(lp484
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I7
sa(dp485
g16
(lp486
S'k'
asg18
S'N'
sg22
I39
sS'.thisN'
p487
I49
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p488
I5
sS'.thisRepN'
p489
I4
sg21
I33
sS'.thisIndex'
p490
I2
sg23
I25
sg15
(lp491
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp492
g16
(lp493
S'd'
asg96
I7
sS'.thisRepN'
p494
I4
sg30
g31
sg32
g33
sS'.thisTrialN'
p495
I6
sS'.thisN'
p496
I50
sS'.thisIndex'
p497
I7
sg15
(lp498
S'k'
asg17
S'N'
sg14
I2
sa(dp499
g16
(lp500
S'd'
asg96
I4
sS'.thisRepN'
p501
I4
sg30
g31
sg32
g33
sS'.thisTrialN'
p502
I7
sS'.thisN'
p503
I51
sS'.thisIndex'
p504
I4
sg15
(lp505
S'k'
asg17
S'N'
sg14
I2
sa(dp506
g16
(lp507
S'k'
asg18
S'N'
sS'.thisRepN'
p508
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p509
I8
sS'.thisN'
p510
I52
sS'.thisIndex'
p511
I8
sg15
(lp512
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I8
sa(dp513
g16
(lp514
S'k'
asg18
S'Y'
sS'.thisRepN'
p515
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p516
I9
sS'.thisN'
p517
I53
sS'.thisIndex'
p518
I7
sg15
(lp519
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I7
sa(dp520
g16
(lp521
S'k'
asg18
S'Y'
sS'.thisRepN'
p522
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p523
I10
sS'.thisN'
p524
I54
sS'.thisIndex'
p525
I10
sg15
(lp526
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp527
S'space'
p528
asg96
I10
sa(dp529
g16
(lp530
S'd'
asg18
S'Y'
sS'.thisRepN'
p531
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p532
I0
sS'.thisN'
p533
I55
sS'.thisIndex'
p534
I4
sg15
(lp535
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp536
S'space'
p537
asg96
I4
sa(dp538
g16
(lp539
S'k'
asg18
S'Y'
sS'.thisRepN'
p540
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p541
I1
sS'.thisN'
p542
I56
sS'.thisIndex'
p543
I9
sg15
(lp544
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I9
sa(dp545
g16
(lp546
S'k'
asg18
S'N'
sS'.thisRepN'
p547
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p548
I2
sS'.thisN'
p549
I57
sS'.thisIndex'
p550
I0
sg15
(lp551
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I0
sa(dp552
g16
(lp553
S'd'
asg18
S'N'
sS'.thisRepN'
p554
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p555
I3
sS'.thisN'
p556
I58
sS'.thisIndex'
p557
I10
sg15
(lp558
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I10
sa(dp559
g16
(lp560
S'd'
asg18
S'N'
sS'.thisRepN'
p561
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p562
I4
sS'.thisN'
p563
I59
sS'.thisIndex'
p564
I6
sg15
(lp565
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I6
sa(dp566
g16
(lp567
S'd'
asg18
S'Y'
sS'.thisRepN'
p568
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p569
I5
sS'.thisN'
p570
I60
sS'.thisIndex'
p571
I7
sg15
(lp572
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp573
S'space'
p574
asg96
I7
sa(dp575
g16
(lp576
S'k'
asg18
S'N'
sS'.thisRepN'
p577
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p578
I6
sS'.thisN'
p579
I61
sS'.thisIndex'
p580
I0
sg15
(lp581
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp582
g16
(lp583
S'k'
asg18
S'N'
sS'.thisRepN'
p584
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p585
I7
sS'.thisN'
p586
I62
sS'.thisIndex'
p587
I6
sg15
(lp588
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I6
sa(dp589
g16
(lp590
S'k'
asg18
S'Y'
sS'.thisRepN'
p591
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p592
I8
sS'.thisN'
p593
I63
sS'.thisIndex'
p594
I8
sg15
(lp595
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp596
S'space'
p597
asg96
I8
sa(dp598
g16
(lp599
S'd'
asg18
S'N'
sS'.thisRepN'
p600
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p601
I9
sS'.thisN'
p602
I64
sS'.thisIndex'
p603
I3
sg15
(lp604
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I3
sa(dp605
g16
(lp606
S'd'
asg18
S'Y'
sS'.thisRepN'
p607
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p608
I10
sS'.thisN'
p609
I65
sS'.thisIndex'
p610
I4
sg15
(lp611
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp612
S'space'
p613
asg96
I4
sa(dp614
g16
(lp615
S'k'
asg18
S'Y'
sS'.thisRepN'
p616
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p617
I0
sS'.thisN'
p618
I66
sS'.thisIndex'
p619
I9
sg15
(lp620
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp621
S'space'
p622
asg96
I9
sa(dp623
g16
(lp624
S'd'
asg18
S'N'
sS'.thisRepN'
p625
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p626
I1
sS'.thisN'
p627
I67
sS'.thisIndex'
p628
I7
sg15
(lp629
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I7
sa(dp630
g16
(lp631
S'k'
asg18
S'Y'
sS'.thisRepN'
p632
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p633
I2
sS'.thisN'
p634
I68
sS'.thisIndex'
p635
I8
sg15
(lp636
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp637
S'space'
p638
asg96
I8
sa(dp639
g16
(lp640
S'k'
asg18
S'Y'
sS'.thisRepN'
p641
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p642
I3
sS'.thisN'
p643
I69
sS'.thisIndex'
p644
I3
sg15
(lp645
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp646
S'space'
p647
asg96
I3
sa(dp648
g16
(lp649
S'd'
asg18
S'Y'
sS'.thisRepN'
p650
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p651
I4
sS'.thisN'
p652
I70
sS'.thisIndex'
p653
I2
sg15
(lp654
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp655
g16
(lp656
S'k'
asg18
S'N'
sS'.thisRepN'
p657
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p658
I5
sS'.thisN'
p659
I71
sS'.thisIndex'
p660
I6
sg15
(lp661
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I6
sa(dp662
g16
(lp663
S'k'
asg18
S'N'
sS'.thisRepN'
p664
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p665
I6
sS'.thisN'
p666
I72
sS'.thisIndex'
p667
I8
sg15
(lp668
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp669
S'space'
p670
asg96
I8
sa(dp671
g16
(lp672
S'k'
asg18
S'Y'
sS'.thisRepN'
p673
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p674
I7
sS'.thisN'
p675
I73
sS'.thisIndex'
p676
I2
sg15
(lp677
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp678
g16
(lp679
S'd'
asg18
S'Y'
sS'.thisRepN'
p680
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p681
I8
sS'.thisN'
p682
I74
sS'.thisIndex'
p683
I0
sg15
(lp684
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I0
sa(dp685
g16
(lp686
S'k'
asg18
S'N'
sS'.thisRepN'
p687
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p688
I9
sS'.thisN'
p689
I75
sS'.thisIndex'
p690
I4
sg15
(lp691
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I4
sa(dp692
g16
(lp693
S'k'
asg18
S'Y'
sS'.thisRepN'
p694
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p695
I10
sS'.thisN'
p696
I76
sS'.thisIndex'
p697
I7
sg15
(lp698
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp699
S'space'
p700
asg96
I7
sa(dp701
g16
(lp702
S'd'
asg18
S'Y'
sS'.thisRepN'
p703
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p704
I0
sS'.thisN'
p705
I77
sS'.thisIndex'
p706
I7
sg15
(lp707
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp708
S'space'
p709
asg96
I7
sa(dp710
g16
(lp711
S'k'
asg18
S'N'
sS'.thisRepN'
p712
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p713
I1
sS'.thisN'
p714
I78
sS'.thisIndex'
p715
I7
sg15
(lp716
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I7
sa(dp717
g16
(lp718
S'k'
asg18
S'N'
sS'.thisRepN'
p719
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p720
I2
sS'.thisN'
p721
I79
sS'.thisIndex'
p722
I2
sg15
(lp723
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp724
g16
(lp725
S'k'
asg18
S'N'
sS'.thisRepN'
p726
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p727
I3
sS'.thisN'
p728
I80
sS'.thisIndex'
p729
I5
sg15
(lp730
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp731
g16
(lp732
S'd'
asg18
S'Y'
sS'.thisRepN'
p733
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p734
I4
sS'.thisN'
p735
I81
sS'.thisIndex'
p736
I10
sg15
(lp737
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp738
S'space'
p739
asg96
I10
sa(dp740
g16
(lp741
S'k'
asg18
S'Y'
sS'.thisRepN'
p742
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p743
I5
sS'.thisN'
p744
I82
sS'.thisIndex'
p745
I7
sg15
(lp746
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp747
S'space'
p748
asg96
I7
sa(dp749
g16
(lp750
S'd'
asg18
S'N'
sS'.thisRepN'
p751
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p752
I6
sS'.thisN'
p753
I83
sS'.thisIndex'
p754
I3
sg15
(lp755
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp756
g16
(lp757
S'd'
asg18
S'N'
sS'.thisRepN'
p758
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p759
I7
sS'.thisN'
p760
I84
sS'.thisIndex'
p761
I8
sg15
(lp762
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I8
sa(dp763
g16
(lp764
S'd'
asg18
S'Y'
sS'.thisRepN'
p765
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p766
I8
sS'.thisN'
p767
I85
sS'.thisIndex'
p768
I0
sg15
(lp769
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp770
S'space'
p771
asg96
I0
sa(dp772
g16
(lp773
S'd'
asg18
S'Y'
sS'.thisRepN'
p774
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p775
I9
sS'.thisN'
p776
I86
sS'.thisIndex'
p777
I8
sg15
(lp778
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp779
S'space'
p780
asg96
I8
sa(dp781
g16
(lp782
S'k'
asg18
S'Y'
sS'.thisRepN'
p783
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p784
I10
sS'.thisN'
p785
I87
sS'.thisIndex'
p786
I3
sg15
(lp787
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp788
S'space'
p789
asg96
I3
sa(dp790
g16
(lp791
S'k'
asg18
S'Y'
sS'.thisRepN'
p792
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p793
I0
sS'.thisN'
p794
I88
sS'.thisIndex'
p795
I9
sg15
(lp796
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp797
S'space'
p798
asg96
I9
sa(dp799
g16
(lp800
S'k'
asg18
S'Y'
sS'.thisRepN'
p801
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p802
I1
sS'.thisN'
p803
I89
sS'.thisIndex'
p804
I2
sg15
(lp805
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp806
S'space'
p807
asg96
I2
sa(dp808
g16
(lp809
S'k'
asg18
S'N'
sS'.thisRepN'
p810
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p811
I2
sS'.thisN'
p812
I90
sS'.thisIndex'
p813
I10
sg15
(lp814
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp815
g16
(lp816
S'k'
asg18
S'N'
sS'.thisRepN'
p817
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p818
I3
sS'.thisN'
p819
I91
sS'.thisIndex'
p820
I1
sg15
(lp821
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp822
g16
(lp823
S'd'
asg18
S'Y'
sS'.thisRepN'
p824
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p825
I4
sS'.thisN'
p826
I92
sS'.thisIndex'
p827
I5
sg15
(lp828
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp829
S'space'
p830
asg96
I5
sa(dp831
g16
(lp832
S'd'
asg18
S'Y'
sS'.thisRepN'
p833
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p834
I5
sS'.thisN'
p835
I93
sS'.thisIndex'
p836
I8
sg15
(lp837
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp838
S'space'
p839
asg96
I8
sa(dp840
g16
(lp841
S'k'
asg18
S'Y'
sS'.thisRepN'
p842
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p843
I6
sS'.thisN'
p844
I94
sS'.thisIndex'
p845
I5
sg15
(lp846
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp847
S'space'
p848
asg96
I5
sa(dp849
g16
(lp850
S'k'
asg18
S'N'
sS'.thisRepN'
p851
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p852
I7
sS'.thisN'
p853
I95
sS'.thisIndex'
p854
I4
sg15
(lp855
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I4
sa(dp856
g16
(lp857
S'd'
asg18
S'N'
sS'.thisRepN'
p858
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p859
I8
sS'.thisN'
p860
I96
sS'.thisIndex'
p861
I7
sg15
(lp862
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I7
sa(dp863
g16
(lp864
S'd'
asg18
S'N'
sS'.thisRepN'
p865
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p866
I9
sS'.thisN'
p867
I97
sS'.thisIndex'
p868
I0
sg15
(lp869
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp870
g16
(lp871
S'd'
asg18
S'N'
sS'.thisRepN'
p872
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p873
I10
sS'.thisN'
p874
I98
sS'.thisIndex'
p875
I0
sg15
(lp876
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp877
g16
(lp878
S'd'
asg18
S'N'
sg22
I42
sS'.thisN'
p879
I99
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p880
I0
sS'.thisRepN'
p881
I9
sg21
I37
sS'.thisIndex'
p882
I6
sg23
I25
sg15
(lp883
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I6
sa(dp884
g16
(lp885
S'k'
asg96
I1
sS'.thisRepN'
p886
I9
sg30
g31
sg32
g33
sS'.thisTrialN'
p887
I1
sS'.thisN'
p888
I100
sS'.thisIndex'
p889
I1
sg15
(lp890
S'd'
asg17
S'N'
sg14
I3
sa(dp891
g16
(lp892
S'd'
asg96
I7
sS'.thisRepN'
p893
I9
sg30
g31
sg32
g33
sS'.thisTrialN'
p894
I2
sS'.thisN'
p895
I101
sS'.thisIndex'
p896
I7
sg15
(lp897
S'd'
asg17
S'Y'
sg14
I3
sa(dp898
g16
(lp899
S'd'
asg18
S'Y'
sS'.thisRepN'
p900
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p901
I3
sS'.thisN'
p902
I102
sS'.thisIndex'
p903
I8
sg15
(lp904
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp905
S'space'
p906
asg96
I8
sa(dp907
g16
(lp908
S'd'
asg18
S'Y'
sS'.thisRepN'
p909
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p910
I4
sS'.thisN'
p911
I103
sS'.thisIndex'
p912
I4
sg15
(lp913
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp914
S'space'
p915
asg96
I4
sa(dp916
g16
(lp917
S'k'
asg18
S'N'
sS'.thisRepN'
p918
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p919
I5
sS'.thisN'
p920
I104
sS'.thisIndex'
p921
I10
sg15
(lp922
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp923
g16
(lp924
S'k'
asg18
S'Y'
sS'.thisRepN'
p925
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p926
I6
sS'.thisN'
p927
I105
sS'.thisIndex'
p928
I5
sg15
(lp929
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp930
S'k'
asg96
I5
sa(dp931
g16
(lp932
S'k'
asg18
S'N'
sS'.thisRepN'
p933
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p934
I7
sS'.thisN'
p935
I106
sS'.thisIndex'
p936
I7
sg15
(lp937
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp938
S'space'
p939
asg96
I7
sa(dp940
g16
(lp941
S'k'
asg18
S'Y'
sS'.thisRepN'
p942
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p943
I8
sS'.thisN'
p944
I107
sS'.thisIndex'
p945
I5
sg15
(lp946
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp947
g16
(lp948
S'd'
asg18
S'Y'
sS'.thisRepN'
p949
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p950
I9
sS'.thisN'
p951
I108
sS'.thisIndex'
p952
I7
sg15
(lp953
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp954
S'space'
p955
asg96
I7
sa(dp956
g16
(lp957
S'd'
asg18
S'N'
sS'.thisRepN'
p958
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p959
I10
sS'.thisN'
p960
I109
sS'.thisIndex'
p961
I7
sg15
(lp962
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp963
g16
(lp964
S'k'
asg18
S'Y'
sS'.thisRepN'
p965
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p966
I0
sS'.thisN'
p967
I110
sS'.thisIndex'
p968
I4
sg15
(lp969
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp970
S'space'
p971
asg96
I4
sa(dp972
g16
(lp973
S'd'
asg18
S'Y'
sS'.thisRepN'
p974
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p975
I1
sS'.thisN'
p976
I111
sS'.thisIndex'
p977
I7
sg15
(lp978
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp979
S'space'
p980
asg96
I7
sa(dp981
g16
(lp982
S'k'
asg18
S'N'
sS'.thisRepN'
p983
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p984
I2
sS'.thisN'
p985
I112
sS'.thisIndex'
p986
I1
sg15
(lp987
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp988
g16
(lp989
S'k'
asg18
S'Y'
sS'.thisRepN'
p990
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p991
I3
sS'.thisN'
p992
I113
sS'.thisIndex'
p993
I6
sg15
(lp994
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp995
S'space'
p996
asg96
I6
sa(dp997
g16
(lp998
S'd'
asg18
S'N'
sS'.thisRepN'
p999
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1000
I4
sS'.thisN'
p1001
I114
sS'.thisIndex'
p1002
I5
sg15
(lp1003
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1004
g16
(lp1005
S'd'
asg18
S'Y'
sS'.thisRepN'
p1006
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1007
I5
sS'.thisN'
p1008
I115
sS'.thisIndex'
p1009
I8
sg15
(lp1010
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1011
S'space'
p1012
asg96
I8
sa(dp1013
g16
(lp1014
S'd'
asg18
S'Y'
sS'.thisRepN'
p1015
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1016
I6
sS'.thisN'
p1017
I116
sS'.thisIndex'
p1018
I0
sg15
(lp1019
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1020
S'space'
p1021
asg96
I0
sa(dp1022
g16
(lp1023
S'k'
asg18
S'Y'
sS'.thisRepN'
p1024
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1025
I7
sS'.thisN'
p1026
I117
sS'.thisIndex'
p1027
I1
sg15
(lp1028
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1029
S'space'
p1030
asg96
I1
sa(dp1031
g16
(lp1032
S'd'
asg18
S'Y'
sS'.thisRepN'
p1033
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1034
I8
sS'.thisN'
p1035
I118
sS'.thisIndex'
p1036
I8
sg15
(lp1037
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1038
S'space'
p1039
asg96
I8
sa(dp1040
g16
(lp1041
S'd'
asg18
S'Y'
sS'.thisRepN'
p1042
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1043
I9
sS'.thisN'
p1044
I119
sS'.thisIndex'
p1045
I7
sg15
(lp1046
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1047
S'space'
p1048
asg96
I7
sa(dp1049
g16
(lp1050
S'k'
asg18
S'N'
sS'.thisRepN'
p1051
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1052
I10
sS'.thisN'
p1053
I120
sS'.thisIndex'
p1054
I1
sg15
(lp1055
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1056
g16
(lp1057
S'd'
asg18
S'N'
sS'.thisRepN'
p1058
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1059
I0
sS'.thisN'
p1060
I121
sS'.thisIndex'
p1061
I0
sg15
(lp1062
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1063
g16
(lp1064
S'k'
asg18
S'Y'
sS'.thisRepN'
p1065
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1066
I1
sS'.thisN'
p1067
I122
sS'.thisIndex'
p1068
I9
sg15
(lp1069
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1070
S'space'
p1071
asg96
I9
sa(dp1072
g16
(lp1073
S'k'
asg18
S'Y'
sS'.thisRepN'
p1074
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1075
I2
sS'.thisN'
p1076
I123
sS'.thisIndex'
p1077
I9
sg15
(lp1078
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1079
S'space'
p1080
asg96
I9
sa(dp1081
g16
(lp1082
S'd'
asg18
S'N'
sS'.thisRepN'
p1083
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1084
I3
sS'.thisN'
p1085
I124
sS'.thisIndex'
p1086
I5
sg15
(lp1087
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1088
g16
(lp1089
S'd'
asg18
S'N'
sS'.thisRepN'
p1090
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1091
I4
sS'.thisN'
p1092
I125
sS'.thisIndex'
p1093
I1
sg15
(lp1094
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1095
g16
(lp1096
S'd'
asg18
S'Y'
sS'.thisRepN'
p1097
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1098
I5
sS'.thisN'
p1099
I126
sS'.thisIndex'
p1100
I0
sg15
(lp1101
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1102
S'space'
p1103
asg96
I0
sa(dp1104
g16
(lp1105
S'd'
asg18
S'N'
sS'.thisRepN'
p1106
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1107
I6
sS'.thisN'
p1108
I127
sS'.thisIndex'
p1109
I0
sg15
(lp1110
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1111
g16
(lp1112
S'k'
asg18
S'N'
sS'.thisRepN'
p1113
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1114
I7
sS'.thisN'
p1115
I128
sS'.thisIndex'
p1116
I0
sg15
(lp1117
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1118
g16
(lp1119
S'd'
asg18
S'N'
sS'.thisRepN'
p1120
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1121
I8
sS'.thisN'
p1122
I129
sS'.thisIndex'
p1123
I7
sg15
(lp1124
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp1125
g16
(lp1126
S'k'
asg18
S'Y'
sS'.thisRepN'
p1127
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1128
I9
sS'.thisN'
p1129
I130
sS'.thisIndex'
p1130
I1
sg15
(lp1131
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1132
S'space'
p1133
asg96
I1
sa(dp1134
g16
(lp1135
S'k'
asg18
S'Y'
sS'.thisRepN'
p1136
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1137
I10
sS'.thisN'
p1138
I131
sS'.thisIndex'
p1139
I5
sg15
(lp1140
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1141
S'space'
p1142
asg96
I5
sa(dp1143
g16
(lp1144
S'd'
asg18
S'N'
sS'.thisRepN'
p1145
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1146
I0
sS'.thisN'
p1147
I132
sS'.thisIndex'
p1148
I1
sg15
(lp1149
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1150
g16
(lp1151
S'k'
asg18
S'N'
sS'.thisRepN'
p1152
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1153
I1
sS'.thisN'
p1154
I133
sS'.thisIndex'
p1155
I6
sg15
(lp1156
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1157
g16
(lp1158
S'k'
asg18
S'Y'
sS'.thisRepN'
p1159
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1160
I2
sS'.thisN'
p1161
I134
sS'.thisIndex'
p1162
I8
sg15
(lp1163
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1164
S'space'
p1165
asg96
I8
sa(dp1166
g16
(lp1167
S'd'
asg18
S'Y'
sS'.thisRepN'
p1168
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1169
I3
sS'.thisN'
p1170
I135
sS'.thisIndex'
p1171
I9
sg15
(lp1172
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1173
S'space'
p1174
asg96
I9
sa(dp1175
g16
(lp1176
S'k'
asg18
S'N'
sS'.thisRepN'
p1177
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1178
I4
sS'.thisN'
p1179
I136
sS'.thisIndex'
p1180
I5
sg15
(lp1181
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1182
g16
(lp1183
S'k'
asg18
S'Y'
sS'.thisRepN'
p1184
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1185
I5
sS'.thisN'
p1186
I137
sS'.thisIndex'
p1187
I10
sg15
(lp1188
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1189
S'space'
p1190
asg96
I10
sa(dp1191
g16
(lp1192
S'k'
asg18
S'N'
sS'.thisRepN'
p1193
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1194
I6
sS'.thisN'
p1195
I138
sS'.thisIndex'
p1196
I3
sg15
(lp1197
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp1198
g16
(lp1199
S'd'
asg18
S'N'
sS'.thisRepN'
p1200
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1201
I7
sS'.thisN'
p1202
I139
sS'.thisIndex'
p1203
I3
sg15
(lp1204
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp1205
g16
(lp1206
S'd'
asg18
S'N'
sS'.thisRepN'
p1207
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1208
I8
sS'.thisN'
p1209
I140
sS'.thisIndex'
p1210
I3
sg15
(lp1211
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp1212
g16
(lp1213
S'k'
asg18
S'N'
sS'.thisRepN'
p1214
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1215
I9
sS'.thisN'
p1216
I141
sS'.thisIndex'
p1217
I9
sg15
(lp1218
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp1219
g16
(lp1220
S'd'
asg18
S'N'
sS'.thisRepN'
p1221
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1222
I10
sS'.thisN'
p1223
I142
sS'.thisIndex'
p1224
I10
sg15
(lp1225
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp1226
g16
(lp1227
S'd'
asg18
S'Y'
sS'.thisRepN'
p1228
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1229
I0
sS'.thisN'
p1230
I143
sS'.thisIndex'
p1231
I10
sg15
(lp1232
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1233
S'space'
p1234
asg96
I10
sa(dp1235
g16
(lp1236
S'k'
asg18
S'N'
sS'.thisRepN'
p1237
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1238
I1
sS'.thisN'
p1239
I144
sS'.thisIndex'
p1240
I0
sg15
(lp1241
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1242
g16
(lp1243
S'd'
asg18
S'N'
sS'.thisRepN'
p1244
I13
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1245
I2
sS'.thisN'
p1246
I145
sS'.thisIndex'
p1247
I3
sg15
(lp1248
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1249
S'space'
p1250
asg96
I3
sa(dp1251
g16
(lp1252
S'd'
asg18
S'Y'
sS'.thisRepN'
p1253
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1254
I3
sS'.thisN'
p1255
I146
sS'.thisIndex'
p1256
I10
sg15
(lp1257
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1258
S'space'
p1259
asg96
I10
sa(dp1260
g16
(lp1261
S'k'
asg18
S'Y'
sS'.thisRepN'
p1262
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1263
I4
sS'.thisN'
p1264
I147
sS'.thisIndex'
p1265
I5
sg15
(lp1266
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1267
S'space'
p1268
asg96
I5
sa(dp1269
g16
(lp1270
S'd'
asg18
S'N'
sS'.thisRepN'
p1271
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1272
I5
sS'.thisN'
p1273
I148
sS'.thisIndex'
p1274
I9
sg15
(lp1275
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp1276
g16
(lp1277
S'k'
asg18
S'Y'
sg22
I44
sS'.thisN'
p1278
I149
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1279
I6
sS'.thisRepN'
p1280
I13
sg21
I47
sS'.thisIndex'
p1281
I8
sg23
I25
sg15
(lp1282
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1283
S'space'
p1284
asg96
I8
sa(dp1285
g16
(lp1286
S'd'
asg96
I10
sS'.thisRepN'
p1287
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1288
I7
sS'.thisN'
p1289
I150
sS'.thisIndex'
p1290
I10
sg15
(lp1291
S'd'
asg17
S'Y'
sg14
I4
sa(dp1292
g16
(lp1293
S'k'
asg96
I5
sS'.thisRepN'
p1294
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1295
I8
sS'.thisN'
p1296
I151
sS'.thisIndex'
p1297
I5
sg15
(lp1298
S'k'
asg17
S'Y'
sg14
I4
sa(dp1299
g16
(lp1300
S'd'
asg18
S'N'
sS'.thisRepN'
p1301
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1302
I9
sS'.thisN'
p1303
I152
sS'.thisIndex'
p1304
I7
sg15
(lp1305
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1306
g16
(lp1307
S'd'
asg18
S'Y'
sS'.thisRepN'
p1308
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1309
I10
sS'.thisN'
p1310
I153
sS'.thisIndex'
p1311
I2
sg15
(lp1312
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1313
S'space'
p1314
asg96
I2
sa(dp1315
g16
(lp1316
S'd'
asg18
S'Y'
sS'.thisRepN'
p1317
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1318
I0
sS'.thisN'
p1319
I154
sS'.thisIndex'
p1320
I8
sg15
(lp1321
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1322
S'space'
p1323
asg96
I8
sa(dp1324
g16
(lp1325
S'k'
asg18
S'Y'
sS'.thisRepN'
p1326
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1327
I1
sS'.thisN'
p1328
I155
sS'.thisIndex'
p1329
I5
sg15
(lp1330
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1331
S'space'
p1332
asg96
I5
sa(dp1333
g16
(lp1334
S'd'
asg18
S'Y'
sS'.thisRepN'
p1335
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1336
I2
sS'.thisN'
p1337
I156
sS'.thisIndex'
p1338
I0
sg15
(lp1339
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1340
S'space'
p1341
asg96
I0
sa(dp1342
g16
(lp1343
S'k'
asg18
S'N'
sS'.thisRepN'
p1344
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1345
I3
sS'.thisN'
p1346
I157
sS'.thisIndex'
p1347
I3
sg15
(lp1348
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I3
sa(dp1349
g16
(lp1350
S'd'
asg18
S'N'
sS'.thisRepN'
p1351
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1352
I4
sS'.thisN'
p1353
I158
sS'.thisIndex'
p1354
I10
sg15
(lp1355
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I10
sa(dp1356
g16
(lp1357
S'd'
asg18
S'N'
sS'.thisRepN'
p1358
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1359
I5
sS'.thisN'
p1360
I159
sS'.thisIndex'
p1361
I8
sg15
(lp1362
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1363
g16
(lp1364
S'k'
asg18
S'Y'
sS'.thisRepN'
p1365
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1366
I6
sS'.thisN'
p1367
I160
sS'.thisIndex'
p1368
I0
sg15
(lp1369
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1370
S'space'
p1371
asg96
I0
sa(dp1372
g16
(lp1373
S'd'
asg18
S'Y'
sS'.thisRepN'
p1374
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1375
I7
sS'.thisN'
p1376
I161
sS'.thisIndex'
p1377
I3
sg15
(lp1378
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1379
S'space'
p1380
asg96
I3
sa(dp1381
g16
(lp1382
S'k'
asg18
S'N'
sS'.thisRepN'
p1383
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1384
I8
sS'.thisN'
p1385
I162
sS'.thisIndex'
p1386
I1
sg15
(lp1387
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1388
g16
(lp1389
S'k'
asg18
S'N'
sS'.thisRepN'
p1390
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1391
I9
sS'.thisN'
p1392
I163
sS'.thisIndex'
p1393
I7
sg15
(lp1394
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1395
g16
(lp1396
S'd'
asg18
S'Y'
sS'.thisRepN'
p1397
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1398
I10
sS'.thisN'
p1399
I164
sS'.thisIndex'
p1400
I5
sg15
(lp1401
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1402
S'space'
p1403
asg96
I5
sa(dp1404
g16
(lp1405
S'd'
asg18
S'Y'
sS'.thisRepN'
p1406
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1407
I0
sS'.thisN'
p1408
I165
sS'.thisIndex'
p1409
I6
sg15
(lp1410
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1411
S'space'
p1412
asg96
I6
sa(dp1413
g16
(lp1414
S'k'
asg18
S'Y'
sS'.thisRepN'
p1415
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1416
I1
sS'.thisN'
p1417
I166
sS'.thisIndex'
p1418
I9
sg15
(lp1419
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1420
S'space'
p1421
asg96
I9
sa(dp1422
g16
(lp1423
S'k'
asg18
S'Y'
sS'.thisRepN'
p1424
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1425
I2
sS'.thisN'
p1426
I167
sS'.thisIndex'
p1427
I7
sg15
(lp1428
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1429
S'space'
p1430
asg96
I7
sa(dp1431
g16
(lp1432
S'd'
asg18
S'N'
sS'.thisRepN'
p1433
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1434
I3
sS'.thisN'
p1435
I168
sS'.thisIndex'
p1436
I6
sg15
(lp1437
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1438
g16
(lp1439
S'd'
asg18
S'N'
sS'.thisRepN'
p1440
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1441
I4
sS'.thisN'
p1442
I169
sS'.thisIndex'
p1443
I4
sg15
(lp1444
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1445
g16
(lp1446
S'd'
asg18
S'Y'
sS'.thisRepN'
p1447
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1448
I5
sS'.thisN'
p1449
I170
sS'.thisIndex'
p1450
I10
sg15
(lp1451
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1452
S'space'
p1453
asg96
I10
sa(dp1454
g16
(lp1455
S'k'
asg18
S'Y'
sS'.thisRepN'
p1456
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1457
I6
sS'.thisN'
p1458
I171
sS'.thisIndex'
p1459
I6
sg15
(lp1460
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1461
S'space'
p1462
asg96
I6
sa(dp1463
g16
(lp1464
S'd'
asg18
S'N'
sS'.thisRepN'
p1465
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1466
I7
sS'.thisN'
p1467
I172
sS'.thisIndex'
p1468
I3
sg15
(lp1469
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1470
g16
(lp1471
S'd'
asg18
S'N'
sS'.thisRepN'
p1472
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1473
I8
sS'.thisN'
p1474
I173
sS'.thisIndex'
p1475
I2
sg15
(lp1476
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1477
g16
(lp1478
S'd'
asg18
S'Y'
sS'.thisRepN'
p1479
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1480
I9
sS'.thisN'
p1481
I174
sS'.thisIndex'
p1482
I1
sg15
(lp1483
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1484
S'space'
p1485
asg96
I1
sa(dp1486
g16
(lp1487
S'k'
asg18
S'N'
sS'.thisRepN'
p1488
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1489
I10
sS'.thisN'
p1490
I175
sS'.thisIndex'
p1491
I9
sg15
(lp1492
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1493
g16
(lp1494
S'd'
asg18
S'Y'
sS'.thisRepN'
p1495
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1496
I0
sS'.thisN'
p1497
I176
sS'.thisIndex'
p1498
I6
sg15
(lp1499
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1500
S'space'
p1501
asg96
I6
sa(dp1502
g16
(lp1503
S'k'
asg18
S'Y'
sS'.thisRepN'
p1504
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1505
I1
sS'.thisN'
p1506
I177
sS'.thisIndex'
p1507
I7
sg15
(lp1508
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1509
S'space'
p1510
asg96
I7
sa(dp1511
g16
(lp1512
S'd'
asg18
S'N'
sS'.thisRepN'
p1513
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1514
I2
sS'.thisN'
p1515
I178
sS'.thisIndex'
p1516
I5
sg15
(lp1517
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I5
sa(dp1518
g16
(lp1519
S'k'
asg18
S'N'
sS'.thisRepN'
p1520
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1521
I3
sS'.thisN'
p1522
I179
sS'.thisIndex'
p1523
I9
sg15
(lp1524
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1525
g16
(lp1526
S'k'
asg18
S'Y'
sS'.thisRepN'
p1527
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1528
I4
sS'.thisN'
p1529
I180
sS'.thisIndex'
p1530
I7
sg15
(lp1531
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1532
S'space'
p1533
asg96
I7
sa(dp1534
g16
(lp1535
S'd'
asg18
S'Y'
sS'.thisRepN'
p1536
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1537
I5
sS'.thisN'
p1538
I181
sS'.thisIndex'
p1539
I10
sg15
(lp1540
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1541
S'space'
p1542
asg96
I10
sa(dp1543
g16
(lp1544
S'k'
asg18
S'N'
sS'.thisRepN'
p1545
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1546
I6
sS'.thisN'
p1547
I182
sS'.thisIndex'
p1548
I2
sg15
(lp1549
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1550
g16
(lp1551
S'k'
asg18
S'N'
sS'.thisRepN'
p1552
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1553
I7
sS'.thisN'
p1554
I183
sS'.thisIndex'
p1555
I9
sg15
(lp1556
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1557
g16
(lp1558
S'k'
asg18
S'Y'
sS'.thisRepN'
p1559
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1560
I8
sS'.thisN'
p1561
I184
sS'.thisIndex'
p1562
I8
sg15
(lp1563
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1564
S'space'
p1565
asg96
I8
sa(dp1566
g16
(lp1567
S'd'
asg18
S'Y'
sS'.thisRepN'
p1568
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1569
I9
sS'.thisN'
p1570
I185
sS'.thisIndex'
p1571
I3
sg15
(lp1572
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1573
S'space'
p1574
asg96
I3
sa(dp1575
g16
(lp1576
S'd'
asg18
S'Y'
sS'.thisRepN'
p1577
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1578
I10
sS'.thisN'
p1579
I186
sS'.thisIndex'
p1580
I9
sg15
(lp1581
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1582
S'space'
p1583
asg96
I9
sa(dp1584
g16
(lp1585
S'd'
asg18
S'Y'
sS'.thisRepN'
p1586
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1587
I0
sS'.thisN'
p1588
I187
sS'.thisIndex'
p1589
I8
sg15
(lp1590
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1591
S'space'
p1592
asg96
I8
sa(dp1593
g16
(lp1594
S'd'
asg18
S'N'
sS'.thisRepN'
p1595
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1596
I1
sS'.thisN'
p1597
I188
sS'.thisIndex'
p1598
I9
sg15
(lp1599
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1600
g16
(lp1601
S'd'
asg18
S'Y'
sS'.thisRepN'
p1602
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1603
I2
sS'.thisN'
p1604
I189
sS'.thisIndex'
p1605
I10
sg15
(lp1606
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1607
S'space'
p1608
asg96
I10
sa(dp1609
g16
(lp1610
S'd'
asg18
S'Y'
sS'.thisRepN'
p1611
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1612
I3
sS'.thisN'
p1613
I190
sS'.thisIndex'
p1614
I3
sg15
(lp1615
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1616
S'space'
p1617
asg96
I3
sa(dp1618
g16
(lp1619
S'k'
asg18
S'N'
sS'.thisRepN'
p1620
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1621
I4
sS'.thisN'
p1622
I191
sS'.thisIndex'
p1623
I3
sg15
(lp1624
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1625
g16
(lp1626
S'd'
asg18
S'N'
sS'.thisRepN'
p1627
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1628
I5
sS'.thisN'
p1629
I192
sS'.thisIndex'
p1630
I4
sg15
(lp1631
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1632
g16
(lp1633
S'k'
asg18
S'N'
sS'.thisRepN'
p1634
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1635
I6
sS'.thisN'
p1636
I193
sS'.thisIndex'
p1637
I1
sg15
(lp1638
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1639
g16
(lp1640
S'k'
asg18
S'N'
sS'.thisRepN'
p1641
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1642
I7
sS'.thisN'
p1643
I194
sS'.thisIndex'
p1644
I1
sg15
(lp1645
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1646
g16
(lp1647
S'k'
asg18
S'Y'
sS'.thisRepN'
p1648
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1649
I8
sS'.thisN'
p1650
I195
sS'.thisIndex'
p1651
I4
sg15
(lp1652
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1653
S'space'
p1654
asg96
I4
sa(dp1655
g16
(lp1656
S'k'
asg18
S'Y'
sS'.thisRepN'
p1657
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1658
I9
sS'.thisN'
p1659
I196
sS'.thisIndex'
p1660
I10
sg15
(lp1661
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1662
S'space'
p1663
asg96
I10
sa(dp1664
g16
(lp1665
S'd'
asg18
S'N'
sS'.thisRepN'
p1666
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1667
I10
sS'.thisN'
p1668
I197
sS'.thisIndex'
p1669
I2
sg15
(lp1670
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1671
g16
(lp1672
S'k'
asg18
S'N'
sS'.thisRepN'
p1673
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1674
I0
sS'.thisN'
p1675
I198
sS'.thisIndex'
p1676
I1
sg15
(lp1677
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1678
g16
(lp1679
S'd'
asg18
S'N'
sg22
I48
sS'.thisN'
p1680
I199
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1681
I1
sS'.thisRepN'
p1682
I18
sg21
I46
sS'.thisIndex'
p1683
I1
sg23
I25
sg15
(lp1684
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1685
g16
(lp1686
S'd'
asg96
I8
sS'.thisRepN'
p1687
I18
sg30
g31
sg32
g33
sS'.thisTrialN'
p1688
I2
sS'.thisN'
p1689
I200
sS'.thisIndex'
p1690
I8
sg15
(lp1691
S'd'
asg17
S'Y'
sg14
I5
sa(dp1692
g16
(lp1693
S'd'
asg96
I0
sS'.thisRepN'
p1694
I18
sg30
g31
sg32
g33
sS'.thisTrialN'
p1695
I3
sS'.thisN'
p1696
I201
sS'.thisIndex'
p1697
I0
sg15
(lp1698
S'd'
asg17
S'Y'
sg14
I5
sa(dp1699
g16
(lp1700
S'd'
asg18
S'N'
sS'.thisRepN'
p1701
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1702
I4
sS'.thisN'
p1703
I202
sS'.thisIndex'
p1704
I4
sg15
(lp1705
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp1706
g16
(lp1707
S'k'
asg18
S'N'
sS'.thisRepN'
p1708
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1709
I5
sS'.thisN'
p1710
I203
sS'.thisIndex'
p1711
I10
sg15
(lp1712
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1713
g16
(lp1714
S'k'
asg18
S'N'
sS'.thisRepN'
p1715
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1716
I6
sS'.thisN'
p1717
I204
sS'.thisIndex'
p1718
I10
sg15
(lp1719
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1720
g16
(lp1721
S'k'
asg18
S'N'
sS'.thisRepN'
p1722
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1723
I7
sS'.thisN'
p1724
I205
sS'.thisIndex'
p1725
I3
sg15
(lp1726
S'd'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I3
sa(dp1727
g16
(lp1728
S'k'
asg18
S'Y'
sS'.thisRepN'
p1729
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1730
I8
sS'.thisN'
p1731
I206
sS'.thisIndex'
p1732
I1
sg15
(lp1733
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1734
S'space'
p1735
asg96
I1
sa(dp1736
g16
(lp1737
S'k'
asg18
S'Y'
sS'.thisRepN'
p1738
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1739
I9
sS'.thisN'
p1740
I207
sS'.thisIndex'
p1741
I0
sg15
(lp1742
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1743
S'space'
p1744
asg96
I0
sa(dp1745
g16
(lp1746
S'k'
asg18
S'Y'
sS'.thisRepN'
p1747
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1748
I10
sS'.thisN'
p1749
I208
sS'.thisIndex'
p1750
I2
sg15
(lp1751
S'd'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1752
S'space'
p1753
asg96
I2
sa(dp1754
g16
(lp1755
S'k'
asg18
S'Y'
sS'.thisRepN'
p1756
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1757
I0
sS'.thisN'
p1758
I209
sS'.thisIndex'
p1759
I10
sg15
(lp1760
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1761
S'space'
p1762
asg96
I10
sa(dp1763
g16
(lp1764
S'd'
asg18
S'Y'
sS'.thisRepN'
p1765
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1766
I1
sS'.thisN'
p1767
I210
sS'.thisIndex'
p1768
I6
sg15
(lp1769
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1770
S'space'
p1771
asg96
I6
sa(dp1772
g16
(lp1773
S'd'
asg18
S'N'
sS'.thisRepN'
p1774
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1775
I2
sS'.thisN'
p1776
I211
sS'.thisIndex'
p1777
I9
sg15
(lp1778
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1779
g16
(lp1780
S'd'
asg18
S'N'
sS'.thisRepN'
p1781
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1782
I3
sS'.thisN'
p1783
I212
sS'.thisIndex'
p1784
I0
sg15
(lp1785
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I0
sa(dp1786
g16
(lp1787
S'd'
asg18
S'Y'
sS'.thisRepN'
p1788
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1789
I4
sS'.thisN'
p1790
I213
sS'.thisIndex'
p1791
I9
sg15
(lp1792
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1793
S'space'
p1794
asg96
I9
sa(dp1795
g16
(lp1796
S'k'
asg18
S'N'
sS'.thisRepN'
p1797
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1798
I5
sS'.thisN'
p1799
I214
sS'.thisIndex'
p1800
I5
sg15
(lp1801
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I5
sa(dp1802
g16
(lp1803
S'd'
asg18
S'Y'
sS'.thisRepN'
p1804
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1805
I6
sS'.thisN'
p1806
I215
sS'.thisIndex'
p1807
I1
sg15
(lp1808
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1809
S'space'
p1810
asg96
I1
sa(dp1811
g16
(lp1812
S'k'
asg18
S'Y'
sS'.thisRepN'
p1813
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1814
I7
sS'.thisN'
p1815
I216
sS'.thisIndex'
p1816
I9
sg15
(lp1817
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1818
S'space'
p1819
asg96
I9
sa(dp1820
g16
(lp1821
S'k'
asg18
S'N'
sS'.thisRepN'
p1822
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1823
I8
sS'.thisN'
p1824
I217
sS'.thisIndex'
p1825
I9
sg15
(lp1826
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1827
g16
(lp1828
S'k'
asg18
S'Y'
sS'.thisRepN'
p1829
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1830
I9
sS'.thisN'
p1831
I218
sS'.thisIndex'
p1832
I1
sg15
(lp1833
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1834
S'space'
p1835
asg96
I1
sa(dp1836
g16
(lp1837
S'k'
asg18
S'Y'
sS'.thisRepN'
p1838
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1839
I10
sS'.thisN'
p1840
I219
sS'.thisIndex'
p1841
I6
sg15
(lp1842
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1843
S'space'
p1844
asg96
I6
sa(dp1845
g16
(lp1846
S'k'
asg18
S'N'
sS'.thisRepN'
p1847
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1848
I0
sS'.thisN'
p1849
I220
sS'.thisIndex'
p1850
I9
sg15
(lp1851
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1852
g16
(lp1853
S'k'
asg18
S'N'
sS'.thisRepN'
p1854
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1855
I1
sS'.thisN'
p1856
I221
sS'.thisIndex'
p1857
I1
sg15
(lp1858
S'd'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I1
sa(dp1859
g16
(lp1860
S'd'
asg18
S'Y'
sS'.thisRepN'
p1861
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1862
I2
sS'.thisN'
p1863
I222
sS'.thisIndex'
p1864
I3
sg15
(lp1865
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1866
S'space'
p1867
asg96
I3
sa(dp1868
g16
(lp1869
S'k'
asg18
S'N'
sS'.thisRepN'
p1870
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1871
I3
sS'.thisN'
p1872
I223
sS'.thisIndex'
p1873
I4
sg15
(lp1874
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp1875
g16
(lp1876
S'k'
asg18
S'Y'
sS'.thisRepN'
p1877
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1878
I4
sS'.thisN'
p1879
I224
sS'.thisIndex'
p1880
I0
sg15
(lp1881
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1882
S'space'
p1883
asg96
I0
sa(dp1884
g16
(lp1885
S'd'
asg18
S'Y'
sS'.thisRepN'
p1886
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1887
I5
sS'.thisN'
p1888
I225
sS'.thisIndex'
p1889
I8
sg15
(lp1890
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1891
S'space'
p1892
asg96
I8
sa(dp1893
g16
(lp1894
S'd'
asg18
S'N'
sS'.thisRepN'
p1895
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1896
I6
sS'.thisN'
p1897
I226
sS'.thisIndex'
p1898
I8
sg15
(lp1899
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1900
g16
(lp1901
S'd'
asg18
S'Y'
sS'.thisRepN'
p1902
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1903
I7
sS'.thisN'
p1904
I227
sS'.thisIndex'
p1905
I4
sg15
(lp1906
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1907
S'space'
p1908
asg96
I4
sa(dp1909
g16
(lp1910
S'd'
asg18
S'N'
sS'.thisRepN'
p1911
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1912
I8
sS'.thisN'
p1913
I228
sS'.thisIndex'
p1914
I0
sg15
(lp1915
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1916
g16
(lp1917
S'k'
asg18
S'Y'
sS'.thisRepN'
p1918
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1919
I9
sS'.thisN'
p1920
I229
sS'.thisIndex'
p1921
I9
sg15
(lp1922
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1923
S'space'
p1924
asg96
I9
sa(dp1925
g16
(lp1926
S'd'
asg18
S'Y'
sS'.thisRepN'
p1927
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1928
I10
sS'.thisN'
p1929
I230
sS'.thisIndex'
p1930
I10
sg15
(lp1931
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1932
S'space'
p1933
asg96
I10
sa(dp1934
g16
(lp1935
S'd'
asg18
S'N'
sS'.thisRepN'
p1936
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1937
I0
sS'.thisN'
p1938
I231
sS'.thisIndex'
p1939
I6
sg15
(lp1940
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I6
sa(dp1941
g16
(lp1942
S'd'
asg18
S'Y'
sS'.thisRepN'
p1943
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1944
I1
sS'.thisN'
p1945
I232
sS'.thisIndex'
p1946
I6
sg15
(lp1947
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1948
S'space'
p1949
asg96
I6
sa(dp1950
g16
(lp1951
S'k'
asg18
S'Y'
sS'.thisRepN'
p1952
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1953
I2
sS'.thisN'
p1954
I233
sS'.thisIndex'
p1955
I10
sg15
(lp1956
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1957
S'space'
p1958
asg96
I10
sa(dp1959
g16
(lp1960
S'd'
asg18
S'Y'
sS'.thisRepN'
p1961
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1962
I3
sS'.thisN'
p1963
I234
sS'.thisIndex'
p1964
I4
sg15
(lp1965
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1966
S'space'
p1967
asg96
I4
sa(dp1968
g16
(lp1969
S'd'
asg18
S'N'
sS'.thisRepN'
p1970
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1971
I4
sS'.thisN'
p1972
I235
sS'.thisIndex'
p1973
I10
sg15
(lp1974
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1975
g16
(lp1976
S'k'
asg18
S'Y'
sS'.thisRepN'
p1977
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1978
I5
sS'.thisN'
p1979
I236
sS'.thisIndex'
p1980
I10
sg15
(lp1981
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1982
S'space'
p1983
asg96
I10
sa(dp1984
g16
(lp1985
S'k'
asg18
S'Y'
sS'.thisRepN'
p1986
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1987
I6
sS'.thisN'
p1988
I237
sS'.thisIndex'
p1989
I9
sg15
(lp1990
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1991
S'space'
p1992
asg96
I9
sa(dp1993
g16
(lp1994
S'k'
asg18
S'Y'
sS'.thisRepN'
p1995
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1996
I7
sS'.thisN'
p1997
I238
sS'.thisIndex'
p1998
I5
sg15
(lp1999
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2000
S'space'
p2001
asg96
I5
sa(dp2002
g16
(lp2003
S'k'
asg18
S'N'
sS'.thisRepN'
p2004
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2005
I8
sS'.thisN'
p2006
I239
sS'.thisIndex'
p2007
I2
sg15
(lp2008
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp2009
g16
(lp2010
S'd'
asg18
S'N'
sS'.thisRepN'
p2011
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2012
I9
sS'.thisN'
p2013
I240
sS'.thisIndex'
p2014
I10
sg15
(lp2015
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp2016
g16
(lp2017
S'k'
asg18
S'N'
sS'.thisRepN'
p2018
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2019
I10
sS'.thisN'
p2020
I241
sS'.thisIndex'
p2021
I9
sg15
(lp2022
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp2023
g16
(lp2024
S'd'
asg18
S'N'
sS'.thisRepN'
p2025
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2026
I0
sS'.thisN'
p2027
I242
sS'.thisIndex'
p2028
I5
sg15
(lp2029
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I5
sa(dp2030
g16
(lp2031
S'd'
asg18
S'N'
sS'.thisRepN'
p2032
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2033
I1
sS'.thisN'
p2034
I243
sS'.thisIndex'
p2035
I9
sg15
(lp2036
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp2037
g16
(lp2038
S'k'
asg18
S'N'
sS'.thisRepN'
p2039
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2040
I2
sS'.thisN'
p2041
I244
sS'.thisIndex'
p2042
I0
sg15
(lp2043
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp2044
g16
(lp2045
S'd'
asg18
S'N'
sS'.thisRepN'
p2046
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2047
I3
sS'.thisN'
p2048
I245
sS'.thisIndex'
p2049
I0
sg15
(lp2050
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp2051
g16
(lp2052
S'k'
asg18
S'N'
sS'.thisRepN'
p2053
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2054
I4
sS'.thisN'
p2055
I246
sS'.thisIndex'
p2056
I6
sg15
(lp2057
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I6
sa(dp2058
g16
(lp2059
S'k'
asg18
S'Y'
sS'.thisRepN'
p2060
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2061
I5
sS'.thisN'
p2062
I247
sS'.thisIndex'
p2063
I7
sg15
(lp2064
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2065
S'space'
p2066
asg96
I7
sa(dp2067
g16
(lp2068
S'k'
asg18
S'N'
sS'.thisRepN'
p2069
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2070
I6
sS'.thisN'
p2071
I248
sS'.thisIndex'
p2072
I8
sg15
(lp2073
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp2074
g16
(lp2075
S'k'
asg18
S'Y'
sg22
I48
sS'.thisN'
p2076
I249
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2077
I7
sS'.thisRepN'
p2078
I22
sg21
I46
sS'.thisIndex'
p2079
I7
sg23
I24
sg15
(lp2080
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2081
S'space'
p2082
asg96
I7
sa(dp2083
g16
(lp2084
S'k'
asg96
I0
sS'.thisRepN'
p2085
I22
sg30
g31
sg32
g33
sS'.thisTrialN'
p2086
I8
sS'.thisN'
p2087
I250
sS'.thisIndex'
p2088
I0
sg15
(lp2089
S'k'
asg17
S'Y'
sg14
I6
sa(dp2090
g16
(lp2091
S'd'
asg96
I0
sS'.thisRepN'
p2092
I22
sg30
g31
sg32
g33
sS'.thisTrialN'
p2093
I9
sS'.thisN'
p2094
I251
sS'.thisIndex'
p2095
I0
sg15
(lp2096
S'd'
asg17
S'Y'
sg14
I6
sa(dp2097
g16
(lp2098
S'd'
asg18
S'N'
sS'.thisRepN'
p2099
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2100
I10
sS'.thisN'
p2101
I252
sS'.thisIndex'
p2102
I2
sg15
(lp2103
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I2
sa(dp2104
g16
(lp2105
S'k'
asg18
S'Y'
sS'.thisRepN'
p2106
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2107
I0
sS'.thisN'
p2108
I253
sS'.thisIndex'
p2109
I3
sg15
(lp2110
S'd'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2111
S'space'
p2112
asg96
I3
sa(dp2113
g16
(lp2114
S'd'
asg18
S'N'
sS'.thisRepN'
p2115
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2116
I1
sS'.thisN'
p2117
I254
sS'.thisIndex'
p2118
I3
sg15
(lp2119
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I3
sa(dp2120
g16
(lp2121
S'd'
asg18
S'Y'
sS'.thisRepN'
p2122
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2123
I2
sS'.thisN'
p2124
I255
sS'.thisIndex'
p2125
I1
sg15
(lp2126
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2127
S'space'
p2128
asg96
I1
sa(dp2129
g16
(lp2130
S'd'
asg18
S'Y'
sS'.thisRepN'
p2131
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2132
I3
sS'.thisN'
p2133
I256
sS'.thisIndex'
p2134
I10
sg15
(lp2135
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2136
S'space'
p2137
asg96
I10
sa(dp2138
g16
(lp2139
S'd'
asg18
S'N'
sS'.thisRepN'
p2140
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2141
I4
sS'.thisN'
p2142
I257
sS'.thisIndex'
p2143
I0
sg15
(lp2144
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2145
g16
(lp2146
S'd'
asg18
S'N'
sS'.thisRepN'
p2147
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2148
I5
sS'.thisN'
p2149
I258
sS'.thisIndex'
p2150
I5
sg15
(lp2151
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I5
sa(dp2152
g16
(lp2153
S'k'
asg18
S'N'
sS'.thisRepN'
p2154
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2155
I6
sS'.thisN'
p2156
I259
sS'.thisIndex'
p2157
I5
sg15
(lp2158
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2159
g16
(lp2160
S'k'
asg18
S'N'
sS'.thisRepN'
p2161
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2162
I7
sS'.thisN'
p2163
I260
sS'.thisIndex'
p2164
I5
sg15
(lp2165
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2166
g16
(lp2167
S'd'
asg18
S'Y'
sS'.thisRepN'
p2168
I23
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2169
I8
sS'.thisN'
p2170
I261
sS'.thisIndex'
p2171
I8
sg15
(lp2172
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2173
g16
(lp2174
S'd'
asg18
S'N'
sS'.thisRepN'
p2175
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2176
I9
sS'.thisN'
p2177
I262
sS'.thisIndex'
p2178
I1
sg15
(lp2179
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2180
g16
(lp2181
S'd'
asg18
S'N'
sS'.thisRepN'
p2182
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2183
I10
sS'.thisN'
p2184
I263
sS'.thisIndex'
p2185
I8
sg15
(lp2186
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2187
g16
(lp2188
S'd'
asg18
S'N'
sS'.thisRepN'
p2189
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2190
I0
sS'.thisN'
p2191
I264
sS'.thisIndex'
p2192
I10
sg15
(lp2193
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2194
g16
(lp2195
S'd'
asg18
S'Y'
sS'.thisRepN'
p2196
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2197
I1
sS'.thisN'
p2198
I265
sS'.thisIndex'
p2199
I9
sg15
(lp2200
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2201
S'space'
p2202
asg96
I9
sa(dp2203
g16
(lp2204
S'd'
asg18
S'N'
sS'.thisRepN'
p2205
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2206
I2
sS'.thisN'
p2207
I266
sS'.thisIndex'
p2208
I10
sg15
(lp2209
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2210
g16
(lp2211
S'k'
asg18
S'N'
sS'.thisRepN'
p2212
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2213
I3
sS'.thisN'
p2214
I267
sS'.thisIndex'
p2215
I4
sg15
(lp2216
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I4
sa(dp2217
g16
(lp2218
S'k'
asg18
S'Y'
sS'.thisRepN'
p2219
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2220
I4
sS'.thisN'
p2221
I268
sS'.thisIndex'
p2222
I4
sg15
(lp2223
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2224
S'space'
p2225
asg96
I4
sa(dp2226
g16
(lp2227
S'k'
asg18
S'Y'
sS'.thisRepN'
p2228
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2229
I5
sS'.thisN'
p2230
I269
sS'.thisIndex'
p2231
I2
sg15
(lp2232
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2233
S'space'
p2234
asg96
I2
sa(dp2235
g16
(lp2236
S'k'
asg18
S'N'
sS'.thisRepN'
p2237
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2238
I6
sS'.thisN'
p2239
I270
sS'.thisIndex'
p2240
I7
sg15
(lp2241
S'd'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I7
sa(dp2242
g16
(lp2243
S'k'
asg18
S'Y'
sS'.thisRepN'
p2244
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2245
I7
sS'.thisN'
p2246
I271
sS'.thisIndex'
p2247
I3
sg15
(lp2248
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2249
S'space'
p2250
asg96
I3
sa(dp2251
g16
(lp2252
S'd'
asg18
S'N'
sS'.thisRepN'
p2253
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2254
I8
sS'.thisN'
p2255
I272
sS'.thisIndex'
p2256
I1
sg15
(lp2257
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2258
g16
(lp2259
S'k'
asg18
S'Y'
sS'.thisRepN'
p2260
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2261
I9
sS'.thisN'
p2262
I273
sS'.thisIndex'
p2263
I8
sg15
(lp2264
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2265
S'space'
p2266
asg96
I8
sa(dp2267
g16
(lp2268
S'k'
asg18
S'N'
sS'.thisRepN'
p2269
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2270
I10
sS'.thisN'
p2271
I274
sS'.thisIndex'
p2272
I9
sg15
(lp2273
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2274
g16
(lp2275
S'd'
asg18
S'N'
sS'.thisRepN'
p2276
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2277
I0
sS'.thisN'
p2278
I275
sS'.thisIndex'
p2279
I1
sg15
(lp2280
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2281
g16
(lp2282
S'd'
asg18
S'Y'
sS'.thisRepN'
p2283
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2284
I1
sS'.thisN'
p2285
I276
sS'.thisIndex'
p2286
I3
sg15
(lp2287
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2288
S'space'
p2289
asg96
I3
sa(dp2290
g16
(lp2291
S'k'
asg18
S'Y'
sS'.thisRepN'
p2292
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2293
I2
sS'.thisN'
p2294
I277
sS'.thisIndex'
p2295
I7
sg15
(lp2296
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2297
S'space'
p2298
asg96
I7
sa(dp2299
g16
(lp2300
S'k'
asg18
S'N'
sS'.thisRepN'
p2301
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2302
I3
sS'.thisN'
p2303
I278
sS'.thisIndex'
p2304
I10
sg15
(lp2305
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2306
g16
(lp2307
S'd'
asg18
S'N'
sS'.thisRepN'
p2308
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2309
I4
sS'.thisN'
p2310
I279
sS'.thisIndex'
p2311
I5
sg15
(lp2312
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2313
g16
(lp2314
S'd'
asg18
S'N'
sS'.thisRepN'
p2315
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2316
I5
sS'.thisN'
p2317
I280
sS'.thisIndex'
p2318
I1
sg15
(lp2319
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2320
g16
(lp2321
S'k'
asg18
S'Y'
sS'.thisRepN'
p2322
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2323
I6
sS'.thisN'
p2324
I281
sS'.thisIndex'
p2325
I0
sg15
(lp2326
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2327
S'space'
p2328
asg96
I0
sa(dp2329
g16
(lp2330
S'k'
asg18
S'Y'
sS'.thisRepN'
p2331
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2332
I7
sS'.thisN'
p2333
I282
sS'.thisIndex'
p2334
I2
sg15
(lp2335
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2336
S'space'
p2337
asg96
I2
sa(dp2338
g16
(lp2339
S'd'
asg18
S'N'
sS'.thisRepN'
p2340
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2341
I8
sS'.thisN'
p2342
I283
sS'.thisIndex'
p2343
I9
sg15
(lp2344
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2345
g16
(lp2346
S'k'
asg18
S'N'
sS'.thisRepN'
p2347
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2348
I9
sS'.thisN'
p2349
I284
sS'.thisIndex'
p2350
I2
sg15
(lp2351
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2352
g16
(lp2353
S'd'
asg18
S'Y'
sS'.thisRepN'
p2354
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2355
I10
sS'.thisN'
p2356
I285
sS'.thisIndex'
p2357
I1
sg15
(lp2358
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2359
S'space'
p2360
asg96
I1
sa(dp2361
g16
(lp2362
S'd'
asg18
S'N'
sS'.thisRepN'
p2363
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2364
I0
sS'.thisN'
p2365
I286
sS'.thisIndex'
p2366
I0
sg15
(lp2367
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2368
g16
(lp2369
S'd'
asg18
S'N'
sS'.thisRepN'
p2370
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2371
I1
sS'.thisN'
p2372
I287
sS'.thisIndex'
p2373
I1
sg15
(lp2374
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2375
g16
(lp2376
S'd'
asg18
S'N'
sS'.thisRepN'
p2377
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2378
I2
sS'.thisN'
p2379
I288
sS'.thisIndex'
p2380
I5
sg15
(lp2381
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2382
g16
(lp2383
S'd'
asg18
S'Y'
sS'.thisRepN'
p2384
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2385
I3
sS'.thisN'
p2386
I289
sS'.thisIndex'
p2387
I6
sg15
(lp2388
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2389
S'space'
p2390
asg96
I6
sa(dp2391
g16
(lp2392
S'k'
asg18
S'Y'
sS'.thisRepN'
p2393
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2394
I4
sS'.thisN'
p2395
I290
sS'.thisIndex'
p2396
I0
sg15
(lp2397
S'd'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2398
S'space'
p2399
asg96
I0
sa(dp2400
g16
(lp2401
S'k'
asg18
S'N'
sS'.thisRepN'
p2402
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2403
I5
sS'.thisN'
p2404
I291
sS'.thisIndex'
p2405
I1
sg15
(lp2406
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2407
g16
(lp2408
S'k'
asg18
S'N'
sS'.thisRepN'
p2409
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2410
I6
sS'.thisN'
p2411
I292
sS'.thisIndex'
p2412
I8
sg15
(lp2413
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2414
g16
(lp2415
S'k'
asg18
S'Y'
sS'.thisRepN'
p2416
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2417
I7
sS'.thisN'
p2418
I293
sS'.thisIndex'
p2419
I3
sg15
(lp2420
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2421
S'space'
p2422
asg96
I3
sa(dp2423
g16
(lp2424
S'd'
asg18
S'Y'
sS'.thisRepN'
p2425
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2426
I8
sS'.thisN'
p2427
I294
sS'.thisIndex'
p2428
I0
sg15
(lp2429
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2430
S'space'
p2431
asg96
I0
sa(dp2432
g16
(lp2433
S'k'
asg18
S'Y'
sS'.thisRepN'
p2434
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2435
I9
sS'.thisN'
p2436
I295
sS'.thisIndex'
p2437
I3
sg15
(lp2438
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2439
S'space'
p2440
asg96
I3
sa(dp2441
g16
(lp2442
S'd'
asg18
S'Y'
sS'.thisRepN'
p2443
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2444
I10
sS'.thisN'
p2445
I296
sS'.thisIndex'
p2446
I8
sg15
(lp2447
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2448
S'space'
p2449
asg96
I8
sa(dp2450
g16
(lp2451
S'k'
asg18
S'Y'
sS'.thisRepN'
p2452
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2453
I0
sS'.thisN'
p2454
I297
sS'.thisIndex'
p2455
I4
sg15
(lp2456
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2457
S'space'
p2458
asg96
I4
sa(dp2459
g16
(lp2460
S'k'
asg18
S'N'
sS'.thisRepN'
p2461
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2462
I1
sS'.thisN'
p2463
I298
sS'.thisIndex'
p2464
I8
sg15
(lp2465
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2466
g16
(lp2467
S'd'
asg18
S'Y'
sg22
I47
sS'.thisN'
p2468
I299
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2469
I2
sS'.thisRepN'
p2470
I27
sg21
I44
sS'.thisIndex'
p2471
I3
sg23
I22
sg15
(lp2472
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2473
S'space'
p2474
asg96
I3
sa(dp2475
g16
(lp2476
S'd'
asg96
I5
sS'.thisRepN'
p2477
I27
sg30
g31
sg32
g33
sS'.thisTrialN'
p2478
I3
sS'.thisN'
p2479
I300
sS'.thisIndex'
p2480
I5
sg15
(lp2481
S'd'
asg17
S'Y'
sg14
I7
sa(dp2482
g16
(lp2483
S'k'
asg96
I1
sS'.thisRepN'
p2484
I27
sg30
g31
sg32
g33
sS'.thisTrialN'
p2485
I4
sS'.thisN'
p2486
I301
sS'.thisIndex'
p2487
I1
sg15
(lp2488
S'k'
asg17
S'Y'
sg14
I7
sa(dp2489
g16
(lp2490
S'k'
asg18
S'N'
sS'.thisRepN'
p2491
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2492
I5
sS'.thisN'
p2493
I302
sS'.thisIndex'
p2494
I2
sg15
(lp2495
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2496
g16
(lp2497
S'k'
asg18
S'Y'
sS'.thisRepN'
p2498
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2499
I6
sS'.thisN'
p2500
I303
sS'.thisIndex'
p2501
I0
sg15
(lp2502
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2503
S'space'
p2504
asg96
I0
sa(dp2505
g16
(lp2506
S'd'
asg18
S'N'
sS'.thisRepN'
p2507
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2508
I7
sS'.thisN'
p2509
I304
sS'.thisIndex'
p2510
I2
sg15
(lp2511
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2512
g16
(lp2513
S'd'
asg18
S'Y'
sS'.thisRepN'
p2514
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2515
I8
sS'.thisN'
p2516
I305
sS'.thisIndex'
p2517
I6
sg15
(lp2518
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2519
S'space'
p2520
asg96
I6
sa(dp2521
g16
(lp2522
S'd'
asg18
S'Y'
sS'.thisRepN'
p2523
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2524
I9
sS'.thisN'
p2525
I306
sS'.thisIndex'
p2526
I10
sg15
(lp2527
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2528
S'space'
p2529
asg96
I10
sa(dp2530
g16
(lp2531
S'k'
asg18
S'N'
sS'.thisRepN'
p2532
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2533
I10
sS'.thisN'
p2534
I307
sS'.thisIndex'
p2535
I4
sg15
(lp2536
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2537
g16
(lp2538
S'd'
asg18
S'Y'
sS'.thisRepN'
p2539
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2540
I0
sS'.thisN'
p2541
I308
sS'.thisIndex'
p2542
I7
sg15
(lp2543
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2544
S'space'
p2545
asg96
I7
sa(dp2546
g16
(lp2547
S'd'
asg18
S'Y'
sS'.thisRepN'
p2548
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2549
I1
sS'.thisN'
p2550
I309
sS'.thisIndex'
p2551
I6
sg15
(lp2552
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2553
S'space'
p2554
asg96
I6
sa(dp2555
g16
(lp2556
S'k'
asg18
S'Y'
sS'.thisRepN'
p2557
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2558
I2
sS'.thisN'
p2559
I310
sS'.thisIndex'
p2560
I6
sg15
(lp2561
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2562
S'space'
p2563
asg96
I6
sa(dp2564
g16
(lp2565
S'k'
asg18
S'N'
sS'.thisRepN'
p2566
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2567
I3
sS'.thisN'
p2568
I311
sS'.thisIndex'
p2569
I5
sg15
(lp2570
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2571
g16
(lp2572
S'd'
asg18
S'Y'
sS'.thisRepN'
p2573
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2574
I4
sS'.thisN'
p2575
I312
sS'.thisIndex'
p2576
I5
sg15
(lp2577
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2578
S'space'
p2579
asg96
I5
sa(dp2580
g16
(lp2581
S'k'
asg18
S'N'
sS'.thisRepN'
p2582
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2583
I5
sS'.thisN'
p2584
I313
sS'.thisIndex'
p2585
I9
sg15
(lp2586
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I9
sa(dp2587
g16
(lp2588
S'd'
asg18
S'N'
sS'.thisRepN'
p2589
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2590
I6
sS'.thisN'
p2591
I314
sS'.thisIndex'
p2592
I3
sg15
(lp2593
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2594
g16
(lp2595
S'd'
asg18
S'N'
sS'.thisRepN'
p2596
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2597
I7
sS'.thisN'
p2598
I315
sS'.thisIndex'
p2599
I9
sg15
(lp2600
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I9
sa(dp2601
g16
(lp2602
S'd'
asg18
S'N'
sS'.thisRepN'
p2603
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2604
I8
sS'.thisN'
p2605
I316
sS'.thisIndex'
p2606
I3
sg15
(lp2607
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I3
sa(dp2608
g16
(lp2609
S'k'
asg18
S'N'
sS'.thisRepN'
p2610
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2611
I9
sS'.thisN'
p2612
I317
sS'.thisIndex'
p2613
I4
sg15
(lp2614
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2615
g16
(lp2616
S'd'
asg18
S'N'
sS'.thisRepN'
p2617
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2618
I10
sS'.thisN'
p2619
I318
sS'.thisIndex'
p2620
I10
sg15
(lp2621
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2622
g16
(lp2623
S'd'
asg18
S'N'
sS'.thisRepN'
p2624
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2625
I0
sS'.thisN'
p2626
I319
sS'.thisIndex'
p2627
I3
sg15
(lp2628
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2629
g16
(lp2630
S'k'
asg18
S'Y'
sS'.thisRepN'
p2631
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2632
I1
sS'.thisN'
p2633
I320
sS'.thisIndex'
p2634
I9
sg15
(lp2635
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2636
S'space'
p2637
asg96
I9
sa(dp2638
g16
(lp2639
S'k'
asg18
S'Y'
sS'.thisRepN'
p2640
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2641
I2
sS'.thisN'
p2642
I321
sS'.thisIndex'
p2643
I1
sg15
(lp2644
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2645
S'space'
p2646
asg96
I1
sa(dp2647
g16
(lp2648
S'd'
asg18
S'N'
sS'.thisRepN'
p2649
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2650
I3
sS'.thisN'
p2651
I322
sS'.thisIndex'
p2652
I9
sg15
(lp2653
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I9
sa(dp2654
g16
(lp2655
S'd'
asg18
S'Y'
sS'.thisRepN'
p2656
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2657
I4
sS'.thisN'
p2658
I323
sS'.thisIndex'
p2659
I8
sg15
(lp2660
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2661
S'space'
p2662
asg96
I8
sa(dp2663
g16
(lp2664
S'd'
asg18
S'N'
sS'.thisRepN'
p2665
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2666
I5
sS'.thisN'
p2667
I324
sS'.thisIndex'
p2668
I1
sg15
(lp2669
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2670
g16
(lp2671
S'd'
asg18
S'Y'
sS'.thisRepN'
p2672
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2673
I6
sS'.thisN'
p2674
I325
sS'.thisIndex'
p2675
I4
sg15
(lp2676
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2677
S'space'
p2678
asg96
I4
sa(dp2679
g16
(lp2680
S'd'
asg18
S'Y'
sS'.thisRepN'
p2681
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2682
I7
sS'.thisN'
p2683
I326
sS'.thisIndex'
p2684
I10
sg15
(lp2685
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2686
S'space'
p2687
asg96
I10
sa(dp2688
g16
(lp2689
S'd'
asg18
S'Y'
sS'.thisRepN'
p2690
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2691
I8
sS'.thisN'
p2692
I327
sS'.thisIndex'
p2693
I1
sg15
(lp2694
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2695
S'space'
p2696
asg96
I1
sa(dp2697
g16
(lp2698
S'd'
asg18
S'Y'
sS'.thisRepN'
p2699
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2700
I9
sS'.thisN'
p2701
I328
sS'.thisIndex'
p2702
I10
sg15
(lp2703
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2704
S'space'
p2705
asg96
I10
sa(dp2706
g16
(lp2707
S'k'
asg18
S'N'
sS'.thisRepN'
p2708
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2709
I10
sS'.thisN'
p2710
I329
sS'.thisIndex'
p2711
I10
sg15
(lp2712
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2713
g16
(lp2714
S'k'
asg18
S'Y'
sS'.thisRepN'
p2715
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2716
I0
sS'.thisN'
p2717
I330
sS'.thisIndex'
p2718
I10
sg15
(lp2719
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2720
S'space'
p2721
asg96
I10
sa(dp2722
g16
(lp2723
S'd'
asg18
S'Y'
sS'.thisRepN'
p2724
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2725
I1
sS'.thisN'
p2726
I331
sS'.thisIndex'
p2727
I4
sg15
(lp2728
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2729
S'space'
p2730
asg96
I4
sa(dp2731
g16
(lp2732
S'd'
asg18
S'N'
sS'.thisRepN'
p2733
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2734
I2
sS'.thisN'
p2735
I332
sS'.thisIndex'
p2736
I4
sg15
(lp2737
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2738
g16
(lp2739
S'k'
asg18
S'Y'
sS'.thisRepN'
p2740
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2741
I3
sS'.thisN'
p2742
I333
sS'.thisIndex'
p2743
I2
sg15
(lp2744
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2745
S'space'
p2746
asg96
I2
sa(dp2747
g16
(lp2748
S'k'
asg18
S'Y'
sS'.thisRepN'
p2749
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2750
I4
sS'.thisN'
p2751
I334
sS'.thisIndex'
p2752
I2
sg15
(lp2753
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2754
S'space'
p2755
asg96
I2
sa(dp2756
g16
(lp2757
S'k'
asg18
S'Y'
sS'.thisRepN'
p2758
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2759
I5
sS'.thisN'
p2760
I335
sS'.thisIndex'
p2761
I4
sg15
(lp2762
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2763
S'space'
p2764
asg96
I4
sa(dp2765
g16
(lp2766
S'd'
asg18
S'N'
sS'.thisRepN'
p2767
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2768
I6
sS'.thisN'
p2769
I336
sS'.thisIndex'
p2770
I0
sg15
(lp2771
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I0
sa(dp2772
g16
(lp2773
S'k'
asg18
S'N'
sS'.thisRepN'
p2774
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2775
I7
sS'.thisN'
p2776
I337
sS'.thisIndex'
p2777
I10
sg15
(lp2778
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2779
g16
(lp2780
S'd'
asg18
S'N'
sS'.thisRepN'
p2781
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2782
I8
sS'.thisN'
p2783
I338
sS'.thisIndex'
p2784
I5
sg15
(lp2785
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2786
g16
(lp2787
S'k'
asg18
S'Y'
sS'.thisRepN'
p2788
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2789
I9
sS'.thisN'
p2790
I339
sS'.thisIndex'
p2791
I3
sg15
(lp2792
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2793
S'space'
p2794
asg96
I3
sa(dp2795
g16
(lp2796
S'k'
asg18
S'N'
sS'.thisRepN'
p2797
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2798
I10
sS'.thisN'
p2799
I340
sS'.thisIndex'
p2800
I7
sg15
(lp2801
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I7
sa(dp2802
g16
(lp2803
S'k'
asg18
S'Y'
sS'.thisRepN'
p2804
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2805
I0
sS'.thisN'
p2806
I341
sS'.thisIndex'
p2807
I4
sg15
(lp2808
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2809
S'space'
p2810
asg96
I4
sa(dp2811
g16
(lp2812
S'd'
asg18
S'Y'
sS'.thisRepN'
p2813
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2814
I1
sS'.thisN'
p2815
I342
sS'.thisIndex'
p2816
I9
sg15
(lp2817
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2818
S'space'
p2819
asg96
I9
sa(dp2820
g16
(lp2821
S'd'
asg18
S'N'
sS'.thisRepN'
p2822
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2823
I2
sS'.thisN'
p2824
I343
sS'.thisIndex'
p2825
I2
sg15
(lp2826
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2827
g16
(lp2828
S'd'
asg18
S'N'
sS'.thisRepN'
p2829
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2830
I3
sS'.thisN'
p2831
I344
sS'.thisIndex'
p2832
I10
sg15
(lp2833
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2834
g16
(lp2835
S'k'
asg18
S'N'
sS'.thisRepN'
p2836
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2837
I4
sS'.thisN'
p2838
I345
sS'.thisIndex'
p2839
I1
sg15
(lp2840
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2841
g16
(lp2842
S'k'
asg18
S'Y'
sS'.thisRepN'
p2843
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2844
I5
sS'.thisN'
p2845
I346
sS'.thisIndex'
p2846
I3
sg15
(lp2847
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2848
S'space'
p2849
asg96
I3
sa(dp2850
g16
(lp2851
S'k'
asg18
S'N'
sS'.thisRepN'
p2852
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2853
I6
sS'.thisN'
p2854
I347
sS'.thisIndex'
p2855
I1
sg15
(lp2856
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2857
g16
(lp2858
S'k'
asg18
S'N'
sS'.thisRepN'
p2859
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2860
I7
sS'.thisN'
p2861
I348
sS'.thisIndex'
p2862
I5
sg15
(lp2863
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2864
g16
(lp2865
S'k'
asg18
S'N'
sg22
I48
sS'.thisN'
p2866
I349
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2867
I8
sS'.thisRepN'
p2868
I31
sg21
I49
sS'.thisIndex'
p2869
I0
sg23
I23
sg15
(lp2870
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I0
sa(dp2871
g16
(lp2872
S'd'
asg96
I9
sS'.thisRepN'
p2873
I31
sg30
g31
sg32
g33
sS'.thisTrialN'
p2874
I9
sS'.thisN'
p2875
I350
sS'.thisIndex'
p2876
I9
sg15
(lp2877
S'd'
asg17
S'Y'
sg14
I8
sa(dp2878
g16
(lp2879
S'k'
asg96
I8
sS'.thisRepN'
p2880
I31
sg30
g31
sg32
g33
sS'.thisTrialN'
p2881
I10
sS'.thisN'
p2882
I351
sS'.thisIndex'
p2883
I8
sg15
(lp2884
S'k'
asg17
S'Y'
sg14
I8
sa(dp2885
g16
(lp2886
S'd'
asg18
S'Y'
sS'.thisRepN'
p2887
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2888
I0
sS'.thisN'
p2889
I352
sS'.thisIndex'
p2890
I10
sg15
(lp2891
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2892
S'space'
p2893
asg96
I10
sa(dp2894
g16
(lp2895
S'd'
asg18
S'N'
sS'.thisRepN'
p2896
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2897
I1
sS'.thisN'
p2898
I353
sS'.thisIndex'
p2899
I6
sg15
(lp2900
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp2901
g16
(lp2902
S'k'
asg18
S'Y'
sS'.thisRepN'
p2903
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2904
I2
sS'.thisN'
p2905
I354
sS'.thisIndex'
p2906
I9
sg15
(lp2907
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2908
S'space'
p2909
asg96
I9
sa(dp2910
g16
(lp2911
S'd'
asg18
S'N'
sS'.thisRepN'
p2912
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2913
I3
sS'.thisN'
p2914
I355
sS'.thisIndex'
p2915
I1
sg15
(lp2916
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp2917
g16
(lp2918
S'd'
asg18
S'Y'
sS'.thisRepN'
p2919
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2920
I4
sS'.thisN'
p2921
I356
sS'.thisIndex'
p2922
I2
sg15
(lp2923
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2924
S'space'
p2925
asg96
I2
sa(dp2926
g16
(lp2927
S'd'
asg18
S'Y'
sS'.thisRepN'
p2928
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2929
I5
sS'.thisN'
p2930
I357
sS'.thisIndex'
p2931
I9
sg15
(lp2932
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2933
S'space'
p2934
asg96
I9
sa(dp2935
g16
(lp2936
S'k'
asg18
S'N'
sS'.thisRepN'
p2937
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2938
I6
sS'.thisN'
p2939
I358
sS'.thisIndex'
p2940
I8
sg15
(lp2941
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I8
sa(dp2942
g16
(lp2943
S'k'
asg18
S'N'
sS'.thisRepN'
p2944
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2945
I7
sS'.thisN'
p2946
I359
sS'.thisIndex'
p2947
I6
sg15
(lp2948
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp2949
g16
(lp2950
S'd'
asg18
S'Y'
sS'.thisRepN'
p2951
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2952
I8
sS'.thisN'
p2953
I360
sS'.thisIndex'
p2954
I1
sg15
(lp2955
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2956
S'space'
p2957
asg96
I1
sa(dp2958
g16
(lp2959
S'k'
asg18
S'N'
sS'.thisRepN'
p2960
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2961
I9
sS'.thisN'
p2962
I361
sS'.thisIndex'
p2963
I1
sg15
(lp2964
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp2965
g16
(lp2966
S'k'
asg18
S'N'
sS'.thisRepN'
p2967
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2968
I10
sS'.thisN'
p2969
I362
sS'.thisIndex'
p2970
I5
sg15
(lp2971
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp2972
g16
(lp2973
S'k'
asg18
S'N'
sS'.thisRepN'
p2974
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2975
I0
sS'.thisN'
p2976
I363
sS'.thisIndex'
p2977
I1
sg15
(lp2978
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp2979
g16
(lp2980
S'd'
asg18
S'Y'
sS'.thisRepN'
p2981
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2982
I1
sS'.thisN'
p2983
I364
sS'.thisIndex'
p2984
I1
sg15
(lp2985
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2986
S'space'
p2987
asg96
I1
sa(dp2988
g16
(lp2989
S'd'
asg18
S'Y'
sS'.thisRepN'
p2990
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2991
I2
sS'.thisN'
p2992
I365
sS'.thisIndex'
p2993
I6
sg15
(lp2994
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2995
S'space'
p2996
asg96
I6
sa(dp2997
g16
(lp2998
S'd'
asg18
S'Y'
sS'.thisRepN'
p2999
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3000
I3
sS'.thisN'
p3001
I366
sS'.thisIndex'
p3002
I6
sg15
(lp3003
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3004
S'space'
p3005
asg96
I6
sa(dp3006
g16
(lp3007
S'd'
asg18
S'Y'
sS'.thisRepN'
p3008
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3009
I4
sS'.thisN'
p3010
I367
sS'.thisIndex'
p3011
I7
sg15
(lp3012
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3013
S'space'
p3014
asg96
I7
sa(dp3015
g16
(lp3016
S'k'
asg18
S'Y'
sS'.thisRepN'
p3017
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3018
I5
sS'.thisN'
p3019
I368
sS'.thisIndex'
p3020
I4
sg15
(lp3021
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3022
S'space'
p3023
asg96
I4
sa(dp3024
g16
(lp3025
S'd'
asg18
S'Y'
sS'.thisRepN'
p3026
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3027
I6
sS'.thisN'
p3028
I369
sS'.thisIndex'
p3029
I1
sg15
(lp3030
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3031
S'space'
p3032
asg96
I1
sa(dp3033
g16
(lp3034
S'k'
asg18
S'N'
sS'.thisRepN'
p3035
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3036
I7
sS'.thisN'
p3037
I370
sS'.thisIndex'
p3038
I9
sg15
(lp3039
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3040
g16
(lp3041
S'd'
asg18
S'Y'
sS'.thisRepN'
p3042
I33
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3043
I8
sS'.thisN'
p3044
I371
sS'.thisIndex'
p3045
I5
sg15
(lp3046
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3047
S'd'
asg96
I5
sa(dp3048
g16
(lp3049
S'k'
asg18
S'N'
sS'.thisRepN'
p3050
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3051
I9
sS'.thisN'
p3052
I372
sS'.thisIndex'
p3053
I10
sg15
(lp3054
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp3055
g16
(lp3056
S'd'
asg18
S'N'
sS'.thisRepN'
p3057
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3058
I10
sS'.thisN'
p3059
I373
sS'.thisIndex'
p3060
I6
sg15
(lp3061
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp3062
g16
(lp3063
S'd'
asg18
S'N'
sS'.thisRepN'
p3064
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3065
I0
sS'.thisN'
p3066
I374
sS'.thisIndex'
p3067
I0
sg15
(lp3068
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I0
sa(dp3069
g16
(lp3070
S'd'
asg18
S'Y'
sS'.thisRepN'
p3071
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3072
I1
sS'.thisN'
p3073
I375
sS'.thisIndex'
p3074
I5
sg15
(lp3075
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3076
S'space'
p3077
asg96
I5
sa(dp3078
g16
(lp3079
S'd'
asg18
S'Y'
sS'.thisRepN'
p3080
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3081
I2
sS'.thisN'
p3082
I376
sS'.thisIndex'
p3083
I2
sg15
(lp3084
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3085
S'space'
p3086
asg96
I2
sa(dp3087
g16
(lp3088
S'k'
asg18
S'Y'
sS'.thisRepN'
p3089
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3090
I3
sS'.thisN'
p3091
I377
sS'.thisIndex'
p3092
I8
sg15
(lp3093
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3094
S'space'
p3095
asg96
I8
sa(dp3096
g16
(lp3097
S'd'
asg18
S'Y'
sS'.thisRepN'
p3098
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3099
I4
sS'.thisN'
p3100
I378
sS'.thisIndex'
p3101
I8
sg15
(lp3102
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3103
S'space'
p3104
asg96
I8
sa(dp3105
g16
(lp3106
S'd'
asg18
S'Y'
sS'.thisRepN'
p3107
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3108
I5
sS'.thisN'
p3109
I379
sS'.thisIndex'
p3110
I0
sg15
(lp3111
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3112
S'space'
p3113
asg96
I0
sa(dp3114
g16
(lp3115
S'k'
asg18
S'Y'
sS'.thisRepN'
p3116
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3117
I6
sS'.thisN'
p3118
I380
sS'.thisIndex'
p3119
I6
sg15
(lp3120
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3121
S'space'
p3122
asg96
I6
sa(dp3123
g16
(lp3124
S'd'
asg18
S'N'
sS'.thisRepN'
p3125
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3126
I7
sS'.thisN'
p3127
I381
sS'.thisIndex'
p3128
I2
sg15
(lp3129
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3130
g16
(lp3131
S'd'
asg18
S'Y'
sS'.thisRepN'
p3132
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3133
I8
sS'.thisN'
p3134
I382
sS'.thisIndex'
p3135
I0
sg15
(lp3136
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3137
S'space'
p3138
asg96
I0
sa(dp3139
g16
(lp3140
S'k'
asg18
S'N'
sS'.thisRepN'
p3141
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3142
I9
sS'.thisN'
p3143
I383
sS'.thisIndex'
p3144
I9
sg15
(lp3145
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3146
g16
(lp3147
S'd'
asg18
S'N'
sS'.thisRepN'
p3148
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3149
I10
sS'.thisN'
p3150
I384
sS'.thisIndex'
p3151
I6
sg15
(lp3152
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp3153
g16
(lp3154
S'd'
asg18
S'N'
sS'.thisRepN'
p3155
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3156
I0
sS'.thisN'
p3157
I385
sS'.thisIndex'
p3158
I9
sg15
(lp3159
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3160
g16
(lp3161
S'd'
asg18
S'Y'
sS'.thisRepN'
p3162
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3163
I1
sS'.thisN'
p3164
I386
sS'.thisIndex'
p3165
I4
sg15
(lp3166
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3167
S'space'
p3168
asg96
I4
sa(dp3169
g16
(lp3170
S'd'
asg18
S'Y'
sS'.thisRepN'
p3171
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3172
I2
sS'.thisN'
p3173
I387
sS'.thisIndex'
p3174
I4
sg15
(lp3175
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3176
S'space'
p3177
asg96
I4
sa(dp3178
g16
(lp3179
S'k'
asg18
S'Y'
sS'.thisRepN'
p3180
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3181
I3
sS'.thisN'
p3182
I388
sS'.thisIndex'
p3183
I3
sg15
(lp3184
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3185
S'space'
p3186
asg96
I3
sa(dp3187
g16
(lp3188
S'd'
asg18
S'Y'
sS'.thisRepN'
p3189
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3190
I4
sS'.thisN'
p3191
I389
sS'.thisIndex'
p3192
I5
sg15
(lp3193
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3194
S'space'
p3195
asg96
I5
sa(dp3196
g16
(lp3197
S'k'
asg18
S'Y'
sS'.thisRepN'
p3198
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3199
I5
sS'.thisN'
p3200
I390
sS'.thisIndex'
p3201
I8
sg15
(lp3202
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3203
S'space'
p3204
asg96
I8
sa(dp3205
g16
(lp3206
S'd'
asg18
S'N'
sS'.thisRepN'
p3207
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3208
I6
sS'.thisN'
p3209
I391
sS'.thisIndex'
p3210
I3
sg15
(lp3211
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3212
g16
(lp3213
S'd'
asg18
S'N'
sS'.thisRepN'
p3214
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3215
I7
sS'.thisN'
p3216
I392
sS'.thisIndex'
p3217
I10
sg15
(lp3218
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp3219
g16
(lp3220
S'd'
asg18
S'Y'
sS'.thisRepN'
p3221
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3222
I8
sS'.thisN'
p3223
I393
sS'.thisIndex'
p3224
I2
sg15
(lp3225
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3226
S'space'
p3227
asg96
I2
sa(dp3228
g16
(lp3229
S'k'
asg18
S'N'
sS'.thisRepN'
p3230
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3231
I9
sS'.thisN'
p3232
I394
sS'.thisIndex'
p3233
I3
sg15
(lp3234
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3235
g16
(lp3236
S'd'
asg18
S'N'
sS'.thisRepN'
p3237
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3238
I10
sS'.thisN'
p3239
I395
sS'.thisIndex'
p3240
I2
sg15
(lp3241
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3242
g16
(lp3243
S'k'
asg18
S'N'
sS'.thisRepN'
p3244
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3245
I0
sS'.thisN'
p3246
I396
sS'.thisIndex'
p3247
I5
sg15
(lp3248
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp3249
g16
(lp3250
S'd'
asg18
S'N'
sS'.thisRepN'
p3251
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3252
I1
sS'.thisN'
p3253
I397
sS'.thisIndex'
p3254
I10
sg15
(lp3255
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp3256
g16
(lp3257
S'k'
asg18
S'N'
sS'.thisRepN'
p3258
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3259
I2
sS'.thisN'
p3260
I398
sS'.thisIndex'
p3261
I2
sg15
(lp3262
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3263
g16
(lp3264
S'k'
asg18
S'N'
sg22
I47
sS'.thisN'
p3265
I399
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3266
I3
sS'.thisRepN'
p3267
I36
sg21
I42
sS'.thisIndex'
p3268
I5
sg23
I25
sg15
(lp3269
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp3270
g16
(lp3271
S'k'
asg96
I2
sS'.thisRepN'
p3272
I36
sg30
g31
sg32
g33
sS'.thisTrialN'
p3273
I4
sS'.thisN'
p3274
I400
sS'.thisIndex'
p3275
I2
sg15
(lp3276
S'k'
asg17
S'Y'
sg14
I9
sa(dp3277
g16
(lp3278
S'k'
asg96
I10
sS'.thisRepN'
p3279
I36
sg30
g31
sg32
g33
sS'.thisTrialN'
p3280
I5
sS'.thisN'
p3281
I401
sS'.thisIndex'
p3282
I10
sg15
(lp3283
S'd'
asg17
S'N'
sg14
I9
sa(dp3284
g16
(lp3285
S'k'
asg18
S'Y'
sS'.thisRepN'
p3286
I36
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3287
I6
sS'.thisN'
p3288
I402
sS'.thisIndex'
p3289
I2
sg15
(lp3290
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3291
g16
(lp3292
S'k'
asg18
S'Y'
sS'.thisRepN'
p3293
I36
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3294
I7
sS'.thisN'
p3295
I403
sS'.thisIndex'
p3296
I7
sg15
(lp3297
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3298
g16
(lp3299
S'k'
asg18
S'N'
sS'.thisRepN'
p3300
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3301
I8
sS'.thisN'
p3302
I404
sS'.thisIndex'
p3303
I5
sg15
(lp3304
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3305
g16
(lp3306
S'k'
asg18
S'N'
sS'.thisRepN'
p3307
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3308
I9
sS'.thisN'
p3309
I405
sS'.thisIndex'
p3310
I4
sg15
(lp3311
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I4
sa(dp3312
g16
(lp3313
S'k'
asg18
S'N'
sS'.thisRepN'
p3314
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3315
I10
sS'.thisN'
p3316
I406
sS'.thisIndex'
p3317
I5
sg15
(lp3318
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3319
g16
(lp3320
S'k'
asg18
S'Y'
sS'.thisRepN'
p3321
I37
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3322
I0
sS'.thisN'
p3323
I407
sS'.thisIndex'
p3324
I0
sg15
(lp3325
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I0
sa(dp3326
g16
(lp3327
S'd'
asg18
S'N'
sS'.thisRepN'
p3328
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3329
I1
sS'.thisN'
p3330
I408
sS'.thisIndex'
p3331
I0
sg15
(lp3332
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I0
sa(dp3333
g16
(lp3334
S'd'
asg18
S'Y'
sS'.thisRepN'
p3335
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3336
I2
sS'.thisN'
p3337
I409
sS'.thisIndex'
p3338
I7
sg15
(lp3339
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3340
S'space'
p3341
asg96
I7
sa(dp3342
g16
(lp3343
S'k'
asg18
S'Y'
sS'.thisRepN'
p3344
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3345
I3
sS'.thisN'
p3346
I410
sS'.thisIndex'
p3347
I7
sg15
(lp3348
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3349
S'space'
p3350
asg96
I7
sa(dp3351
g16
(lp3352
S'k'
asg18
S'N'
sS'.thisRepN'
p3353
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3354
I4
sS'.thisN'
p3355
I411
sS'.thisIndex'
p3356
I4
sg15
(lp3357
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I4
sa(dp3358
g16
(lp3359
S'd'
asg18
S'Y'
sS'.thisRepN'
p3360
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3361
I5
sS'.thisN'
p3362
I412
sS'.thisIndex'
p3363
I1
sg15
(lp3364
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3365
S'space'
p3366
asg96
I1
sa(dp3367
g16
(lp3368
S'd'
asg18
S'N'
sS'.thisRepN'
p3369
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3370
I6
sS'.thisN'
p3371
I413
sS'.thisIndex'
p3372
I6
sg15
(lp3373
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3374
g16
(lp3375
S'd'
asg18
S'N'
sS'.thisRepN'
p3376
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3377
I7
sS'.thisN'
p3378
I414
sS'.thisIndex'
p3379
I2
sg15
(lp3380
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3381
g16
(lp3382
S'k'
asg18
S'N'
sS'.thisRepN'
p3383
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3384
I8
sS'.thisN'
p3385
I415
sS'.thisIndex'
p3386
I3
sg15
(lp3387
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3388
g16
(lp3389
S'k'
asg18
S'N'
sS'.thisRepN'
p3390
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3391
I9
sS'.thisN'
p3392
I416
sS'.thisIndex'
p3393
I1
sg15
(lp3394
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3395
g16
(lp3396
S'd'
asg18
S'N'
sS'.thisRepN'
p3397
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3398
I10
sS'.thisN'
p3399
I417
sS'.thisIndex'
p3400
I9
sg15
(lp3401
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3402
g16
(lp3403
S'k'
asg18
S'Y'
sS'.thisRepN'
p3404
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3405
I0
sS'.thisN'
p3406
I418
sS'.thisIndex'
p3407
I4
sg15
(lp3408
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3409
S'space'
p3410
asg96
I4
sa(dp3411
g16
(lp3412
S'd'
asg18
S'Y'
sS'.thisRepN'
p3413
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3414
I1
sS'.thisN'
p3415
I419
sS'.thisIndex'
p3416
I0
sg15
(lp3417
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3418
S'space'
p3419
asg96
I0
sa(dp3420
g16
(lp3421
S'd'
asg18
S'N'
sS'.thisRepN'
p3422
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3423
I2
sS'.thisN'
p3424
I420
sS'.thisIndex'
p3425
I9
sg15
(lp3426
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3427
g16
(lp3428
S'd'
asg18
S'N'
sS'.thisRepN'
p3429
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3430
I3
sS'.thisN'
p3431
I421
sS'.thisIndex'
p3432
I0
sg15
(lp3433
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I0
sa(dp3434
g16
(lp3435
S'k'
asg18
S'Y'
sS'.thisRepN'
p3436
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3437
I4
sS'.thisN'
p3438
I422
sS'.thisIndex'
p3439
I6
sg15
(lp3440
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3441
S'space'
p3442
asg96
I6
sa(dp3443
g16
(lp3444
S'd'
asg18
S'Y'
sS'.thisRepN'
p3445
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3446
I5
sS'.thisN'
p3447
I423
sS'.thisIndex'
p3448
I4
sg15
(lp3449
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3450
S'space'
p3451
asg96
I4
sa(dp3452
g16
(lp3453
S'd'
asg18
S'N'
sS'.thisRepN'
p3454
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3455
I6
sS'.thisN'
p3456
I424
sS'.thisIndex'
p3457
I8
sg15
(lp3458
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3459
g16
(lp3460
S'k'
asg18
S'N'
sS'.thisRepN'
p3461
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3462
I7
sS'.thisN'
p3463
I425
sS'.thisIndex'
p3464
I6
sg15
(lp3465
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3466
g16
(lp3467
S'k'
asg18
S'N'
sS'.thisRepN'
p3468
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3469
I8
sS'.thisN'
p3470
I426
sS'.thisIndex'
p3471
I8
sg15
(lp3472
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3473
g16
(lp3474
S'd'
asg18
S'N'
sS'.thisRepN'
p3475
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3476
I9
sS'.thisN'
p3477
I427
sS'.thisIndex'
p3478
I6
sg15
(lp3479
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3480
g16
(lp3481
S'd'
asg18
S'Y'
sS'.thisRepN'
p3482
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3483
I10
sS'.thisN'
p3484
I428
sS'.thisIndex'
p3485
I7
sg15
(lp3486
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3487
S'space'
p3488
asg96
I7
sa(dp3489
g16
(lp3490
S'k'
asg18
S'Y'
sS'.thisRepN'
p3491
I39
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3492
I0
sS'.thisN'
p3493
I429
sS'.thisIndex'
p3494
I2
sg15
(lp3495
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3496
g16
(lp3497
S'd'
asg18
S'N'
sS'.thisRepN'
p3498
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3499
I1
sS'.thisN'
p3500
I430
sS'.thisIndex'
p3501
I9
sg15
(lp3502
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I9
sa(dp3503
g16
(lp3504
S'k'
asg18
S'Y'
sS'.thisRepN'
p3505
I39
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3506
I2
sS'.thisN'
p3507
I431
sS'.thisIndex'
p3508
I1
sg15
(lp3509
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3510
g16
(lp3511
S'k'
asg18
S'N'
sS'.thisRepN'
p3512
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3513
I3
sS'.thisN'
p3514
I432
sS'.thisIndex'
p3515
I5
sg15
(lp3516
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3517
g16
(lp3518
S'd'
asg18
S'Y'
sS'.thisRepN'
p3519
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3520
I4
sS'.thisN'
p3521
I433
sS'.thisIndex'
p3522
I7
sg15
(lp3523
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3524
S'space'
p3525
asg96
I7
sa(dp3526
g16
(lp3527
S'd'
asg18
S'N'
sS'.thisRepN'
p3528
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3529
I5
sS'.thisN'
p3530
I434
sS'.thisIndex'
p3531
I2
sg15
(lp3532
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3533
g16
(lp3534
S'd'
asg18
S'Y'
sS'.thisRepN'
p3535
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3536
I6
sS'.thisN'
p3537
I435
sS'.thisIndex'
p3538
I8
sg15
(lp3539
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3540
S'space'
p3541
asg96
I8
sa(dp3542
g16
(lp3543
S'd'
asg18
S'Y'
sS'.thisRepN'
p3544
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3545
I7
sS'.thisN'
p3546
I436
sS'.thisIndex'
p3547
I6
sg15
(lp3548
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3549
S'space'
p3550
asg96
I6
sa(dp3551
g16
(lp3552
S'd'
asg18
S'Y'
sS'.thisRepN'
p3553
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3554
I8
sS'.thisN'
p3555
I437
sS'.thisIndex'
p3556
I1
sg15
(lp3557
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3558
S'space'
p3559
asg96
I1
sa(dp3560
g16
(lp3561
S'k'
asg18
S'N'
sS'.thisRepN'
p3562
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3563
I9
sS'.thisN'
p3564
I438
sS'.thisIndex'
p3565
I1
sg15
(lp3566
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3567
g16
(lp3568
S'k'
asg18
S'N'
sS'.thisRepN'
p3569
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3570
I10
sS'.thisN'
p3571
I439
sS'.thisIndex'
p3572
I4
sg15
(lp3573
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I4
sa(dp3574
g16
(lp3575
S'd'
asg18
S'Y'
sS'.thisRepN'
p3576
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3577
I0
sS'.thisN'
p3578
I440
sS'.thisIndex'
p3579
I6
sg15
(lp3580
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3581
S'space'
p3582
asg96
I6
sa(dp3583
g16
(lp3584
S'd'
asg18
S'N'
sS'.thisRepN'
p3585
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3586
I1
sS'.thisN'
p3587
I441
sS'.thisIndex'
p3588
I2
sg15
(lp3589
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3590
g16
(lp3591
S'k'
asg18
S'N'
sS'.thisRepN'
p3592
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3593
I2
sS'.thisN'
p3594
I442
sS'.thisIndex'
p3595
I7
sg15
(lp3596
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3597
g16
(lp3598
S'k'
asg18
S'N'
sS'.thisRepN'
p3599
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3600
I3
sS'.thisN'
p3601
I443
sS'.thisIndex'
p3602
I3
sg15
(lp3603
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3604
g16
(lp3605
S'd'
asg18
S'N'
sS'.thisRepN'
p3606
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3607
I4
sS'.thisN'
p3608
I444
sS'.thisIndex'
p3609
I7
sg15
(lp3610
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3611
g16
(lp3612
S'd'
asg18
S'Y'
sS'.thisRepN'
p3613
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3614
I5
sS'.thisN'
p3615
I445
sS'.thisIndex'
p3616
I6
sg15
(lp3617
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3618
S'space'
p3619
asg96
I6
sa(dp3620
g16
(lp3621
S'd'
asg18
S'Y'
sS'.thisRepN'
p3622
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3623
I6
sS'.thisN'
p3624
I446
sS'.thisIndex'
p3625
I4
sg15
(lp3626
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3627
S'space'
p3628
asg96
I4
sa(dp3629
g16
(lp3630
S'k'
asg18
S'N'
sS'.thisRepN'
p3631
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3632
I7
sS'.thisN'
p3633
I447
sS'.thisIndex'
p3634
I6
sg15
(lp3635
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3636
g16
(lp3637
S'k'
asg18
S'Y'
sS'.thisRepN'
p3638
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3639
I8
sS'.thisN'
p3640
I448
sS'.thisIndex'
p3641
I0
sg15
(lp3642
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3643
S'space'
p3644
asg96
I0
sa(dp3645
g16
(lp3646
S'k'
asg18
S'Y'
sg22
I43
sS'.thisN'
p3647
I449
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3648
I9
sS'.thisRepN'
p3649
I40
sg21
I46
sS'.thisIndex'
p3650
I5
sg23
I22
sg15
(lp3651
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3652
S'space'
p3653
asg96
I5
sa(dp3654
g16
(lp3655
S'd'
asg96
I2
sS'.thisRepN'
p3656
I40
sg30
g31
sg32
g33
sS'.thisTrialN'
p3657
I10
sS'.thisN'
p3658
I450
sS'.thisIndex'
p3659
I2
sg15
(lp3660
S'd'
asg17
S'Y'
sg14
I10
sa(dp3661
g16
(lp3662
S'd'
asg96
I4
sS'.thisRepN'
p3663
I41
sg30
g31
sg32
g33
sS'.thisTrialN'
p3664
I0
sS'.thisN'
p3665
I451
sS'.thisIndex'
p3666
I4
sg15
(lp3667
S'd'
asg17
S'Y'
sg14
I10
sa(dp3668
g16
(lp3669
S'k'
asg18
S'Y'
sS'.thisRepN'
p3670
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3671
I1
sS'.thisN'
p3672
I452
sS'.thisIndex'
p3673
I6
sg15
(lp3674
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3675
S'space'
p3676
asg96
I6
sa(dp3677
g16
(lp3678
S'k'
asg18
S'N'
sS'.thisRepN'
p3679
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3680
I2
sS'.thisN'
p3681
I453
sS'.thisIndex'
p3682
I9
sg15
(lp3683
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I9
sa(dp3684
g16
(lp3685
S'k'
asg18
S'Y'
sS'.thisRepN'
p3686
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3687
I3
sS'.thisN'
p3688
I454
sS'.thisIndex'
p3689
I10
sg15
(lp3690
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3691
S'space'
p3692
asg96
I10
sa(dp3693
g16
(lp3694
S'k'
asg18
S'Y'
sS'.thisRepN'
p3695
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3696
I4
sS'.thisN'
p3697
I455
sS'.thisIndex'
p3698
I7
sg15
(lp3699
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3700
S'space'
p3701
asg96
I7
sa(dp3702
g16
(lp3703
S'd'
asg18
S'Y'
sS'.thisRepN'
p3704
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3705
I5
sS'.thisN'
p3706
I456
sS'.thisIndex'
p3707
I2
sg15
(lp3708
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3709
S'space'
p3710
asg96
I2
sa(dp3711
g16
(lp3712
S'd'
asg18
S'N'
sS'.thisRepN'
p3713
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3714
I6
sS'.thisN'
p3715
I457
sS'.thisIndex'
p3716
I10
sg15
(lp3717
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I10
sa(dp3718
g16
(lp3719
S'd'
asg18
S'N'
sS'.thisRepN'
p3720
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3721
I7
sS'.thisN'
p3722
I458
sS'.thisIndex'
p3723
I5
sg15
(lp3724
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3725
g16
(lp3726
S'k'
asg18
S'Y'
sS'.thisRepN'
p3727
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3728
I8
sS'.thisN'
p3729
I459
sS'.thisIndex'
p3730
I4
sg15
(lp3731
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3732
S'space'
p3733
asg96
I4
sa(dp3734
g16
(lp3735
S'd'
asg18
S'N'
sS'.thisRepN'
p3736
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3737
I9
sS'.thisN'
p3738
I460
sS'.thisIndex'
p3739
I7
sg15
(lp3740
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I7
sa(dp3741
g16
(lp3742
S'd'
asg18
S'N'
sS'.thisRepN'
p3743
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3744
I10
sS'.thisN'
p3745
I461
sS'.thisIndex'
p3746
I3
sg15
(lp3747
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3748
g16
(lp3749
S'd'
asg18
S'Y'
sS'.thisRepN'
p3750
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3751
I0
sS'.thisN'
p3752
I462
sS'.thisIndex'
p3753
I7
sg15
(lp3754
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3755
S'space'
p3756
asg96
I7
sa(dp3757
g16
(lp3758
S'd'
asg18
S'N'
sS'.thisRepN'
p3759
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3760
I1
sS'.thisN'
p3761
I463
sS'.thisIndex'
p3762
I3
sg15
(lp3763
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3764
g16
(lp3765
S'd'
asg18
S'N'
sS'.thisRepN'
p3766
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3767
I2
sS'.thisN'
p3768
I464
sS'.thisIndex'
p3769
I8
sg15
(lp3770
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3771
g16
(lp3772
S'd'
asg18
S'N'
sS'.thisRepN'
p3773
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3774
I3
sS'.thisN'
p3775
I465
sS'.thisIndex'
p3776
I1
sg15
(lp3777
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3778
g16
(lp3779
S'd'
asg18
S'Y'
sS'.thisRepN'
p3780
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3781
I4
sS'.thisN'
p3782
I466
sS'.thisIndex'
p3783
I6
sg15
(lp3784
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3785
S'space'
p3786
asg96
I6
sa(dp3787
g16
(lp3788
S'd'
asg18
S'Y'
sS'.thisRepN'
p3789
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3790
I5
sS'.thisN'
p3791
I467
sS'.thisIndex'
p3792
I4
sg15
(lp3793
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3794
S'space'
p3795
asg96
I4
sa(dp3796
g16
(lp3797
S'd'
asg18
S'N'
sS'.thisRepN'
p3798
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3799
I6
sS'.thisN'
p3800
I468
sS'.thisIndex'
p3801
I1
sg15
(lp3802
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3803
g16
(lp3804
S'k'
asg18
S'Y'
sS'.thisRepN'
p3805
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3806
I7
sS'.thisN'
p3807
I469
sS'.thisIndex'
p3808
I5
sg15
(lp3809
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3810
S'space'
p3811
asg96
I5
sa(dp3812
g16
(lp3813
S'd'
asg18
S'N'
sS'.thisRepN'
p3814
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3815
I8
sS'.thisN'
p3816
I470
sS'.thisIndex'
p3817
I2
sg15
(lp3818
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3819
g16
(lp3820
S'k'
asg18
S'Y'
sS'.thisRepN'
p3821
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3822
I9
sS'.thisN'
p3823
I471
sS'.thisIndex'
p3824
I2
sg15
(lp3825
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3826
S'space'
p3827
asg96
I2
sa(dp3828
g16
(lp3829
S'k'
asg18
S'N'
sS'.thisRepN'
p3830
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3831
I10
sS'.thisN'
p3832
I472
sS'.thisIndex'
p3833
I9
sg15
(lp3834
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3835
g16
(lp3836
S'k'
asg18
S'Y'
sS'.thisRepN'
p3837
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3838
I0
sS'.thisN'
p3839
I473
sS'.thisIndex'
p3840
I8
sg15
(lp3841
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3842
S'space'
p3843
asg96
I8
sa(dp3844
g16
(lp3845
S'k'
asg18
S'N'
sS'.thisRepN'
p3846
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3847
I1
sS'.thisN'
p3848
I474
sS'.thisIndex'
p3849
I2
sg15
(lp3850
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3851
g16
(lp3852
S'k'
asg18
S'Y'
sS'.thisRepN'
p3853
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3854
I2
sS'.thisN'
p3855
I475
sS'.thisIndex'
p3856
I4
sg15
(lp3857
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3858
S'space'
p3859
asg96
I4
sa(dp3860
g16
(lp3861
S'd'
asg18
S'N'
sS'.thisRepN'
p3862
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3863
I3
sS'.thisN'
p3864
I476
sS'.thisIndex'
p3865
I5
sg15
(lp3866
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3867
g16
(lp3868
S'k'
asg18
S'Y'
sS'.thisRepN'
p3869
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3870
I4
sS'.thisN'
p3871
I477
sS'.thisIndex'
p3872
I0
sg15
(lp3873
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3874
S'space'
p3875
asg96
I0
sa(dp3876
g16
(lp3877
S'k'
asg18
S'N'
sS'.thisRepN'
p3878
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3879
I5
sS'.thisN'
p3880
I478
sS'.thisIndex'
p3881
I4
sg15
(lp3882
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3883
g16
(lp3884
S'd'
asg18
S'Y'
sS'.thisRepN'
p3885
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3886
I6
sS'.thisN'
p3887
I479
sS'.thisIndex'
p3888
I4
sg15
(lp3889
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3890
S'space'
p3891
asg96
I4
sa(dp3892
g16
(lp3893
S'd'
asg18
S'N'
sS'.thisRepN'
p3894
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3895
I7
sS'.thisN'
p3896
I480
sS'.thisIndex'
p3897
I8
sg15
(lp3898
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3899
g16
(lp3900
S'k'
asg18
S'N'
sS'.thisRepN'
p3901
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3902
I8
sS'.thisN'
p3903
I481
sS'.thisIndex'
p3904
I9
sg15
(lp3905
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3906
g16
(lp3907
S'd'
asg18
S'N'
sS'.thisRepN'
p3908
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3909
I9
sS'.thisN'
p3910
I482
sS'.thisIndex'
p3911
I6
sg15
(lp3912
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I6
sa(dp3913
g16
(lp3914
S'd'
asg18
S'N'
sS'.thisRepN'
p3915
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3916
I10
sS'.thisN'
p3917
I483
sS'.thisIndex'
p3918
I3
sg15
(lp3919
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3920
g16
(lp3921
S'd'
asg18
S'Y'
sS'.thisRepN'
p3922
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3923
I0
sS'.thisN'
p3924
I484
sS'.thisIndex'
p3925
I9
sg15
(lp3926
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3927
S'space'
p3928
asg96
I9
sa(dp3929
g16
(lp3930
S'd'
asg18
S'N'
sS'.thisRepN'
p3931
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3932
I1
sS'.thisN'
p3933
I485
sS'.thisIndex'
p3934
I2
sg15
(lp3935
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3936
g16
(lp3937
S'd'
asg18
S'N'
sS'.thisRepN'
p3938
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3939
I2
sS'.thisN'
p3940
I486
sS'.thisIndex'
p3941
I1
sg15
(lp3942
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3943
g16
(lp3944
S'd'
asg18
S'Y'
sS'.thisRepN'
p3945
I44
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3946
I3
sS'.thisN'
p3947
I487
sS'.thisIndex'
p3948
I0
sg15
(lp3949
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3950
S'd'
asg96
I0
sa(dp3951
g16
(lp3952
S'k'
asg18
S'N'
sS'.thisRepN'
p3953
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3954
I4
sS'.thisN'
p3955
I488
sS'.thisIndex'
p3956
I6
sg15
(lp3957
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I6
sa(dp3958
g16
(lp3959
S'd'
asg18
S'Y'
sS'.thisRepN'
p3960
I44
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3961
I5
sS'.thisN'
p3962
I489
sS'.thisIndex'
p3963
I0
sg15
(lp3964
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I0
sa(dp3965
g16
(lp3966
S'd'
asg18
S'N'
sS'.thisRepN'
p3967
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3968
I6
sS'.thisN'
p3969
I490
sS'.thisIndex'
p3970
I5
sg15
(lp3971
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3972
g16
(lp3973
S'k'
asg18
S'Y'
sS'.thisRepN'
p3974
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3975
I7
sS'.thisN'
p3976
I491
sS'.thisIndex'
p3977
I3
sg15
(lp3978
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3979
S'space'
p3980
asg96
I3
sa(dp3981
g16
(lp3982
S'k'
asg18
S'N'
sS'.thisRepN'
p3983
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3984
I8
sS'.thisN'
p3985
I492
sS'.thisIndex'
p3986
I8
sg15
(lp3987
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3988
g16
(lp3989
S'd'
asg18
S'Y'
sS'.thisRepN'
p3990
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3991
I9
sS'.thisN'
p3992
I493
sS'.thisIndex'
p3993
I5
sg15
(lp3994
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3995
S'space'
p3996
asg96
I5
sa(dp3997
g16
(lp3998
S'k'
asg18
S'Y'
sS'.thisRepN'
p3999
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4000
I10
sS'.thisN'
p4001
I494
sS'.thisIndex'
p4002
I3
sg15
(lp4003
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp4004
S'space'
p4005
asg96
I3
sa(dp4006
g16
(lp4007
S'd'
asg18
S'N'
sS'.thisRepN'
p4008
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4009
I0
sS'.thisN'
p4010
I495
sS'.thisIndex'
p4011
I7
sg15
(lp4012
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I7
sa(dp4013
g16
(lp4014
S'k'
asg18
S'Y'
sS'.thisRepN'
p4015
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4016
I1
sS'.thisN'
p4017
I496
sS'.thisIndex'
p4018
I0
sg15
(lp4019
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp4020
S'space'
p4021
asg96
I0
sa(dp4022
g16
(lp4023
S'd'
asg18
S'Y'
sS'.thisRepN'
p4024
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4025
I2
sS'.thisN'
p4026
I497
sS'.thisIndex'
p4027
I8
sg15
(lp4028
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp4029
S'space'
p4030
asg96
I8
sa(dp4031
g16
(lp4032
S'd'
asg18
S'Y'
sS'.thisRepN'
p4033
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4034
I3
sS'.thisN'
p4035
I498
sS'.thisIndex'
p4036
I9
sg15
(lp4037
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp4038
S'space'
p4039
asg96
I9
sa(dp4040
g16
(lp4041
S'd'
asg18
S'N'
sg22
I46
sS'.thisN'
p4042
I499
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4043
I4
sS'.thisRepN'
p4044
I45
sg21
I47
sS'.thisIndex'
p4045
I6
sg23
I23
sg15
(lp4046
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I6
sa(dp4047
g16
(lp4048
S'd'
asS'.thisIndex'
p4049
I5
sS'.thisRepN'
p4050
I45
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4051
I5
sS'.thisN'
p4052
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4053
S'k'
asg17
S'Y'
sg14
I11
sg96
I5
sa(dp4054
g16
(lp4055
S'd'
asS'.thisIndex'
p4056
I4
sS'.thisRepN'
p4057
I45
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4058
I6
sS'.thisN'
p4059
I501
sg25
S'Y'
sg15
(lp4060
S'd'
asg17
S'N'
sg14
I11
sg96
I4
sa(dp4061
g16
(lp4062
S'k'
asg18
S'Y'
sS'.thisRepN'
p4063
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4064
I7
sS'.thisN'
p4065
I502
sg25
S'Y'
sg15
(lp4066
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4067
S'space'
p4068
asg96
I2
sS'.thisIndex'
p4069
I2
sa(dp4070
g16
(lp4071
S'k'
asg18
S'Y'
sS'.thisRepN'
p4072
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4073
I8
sS'.thisN'
p4074
I503
sg25
S'Y'
sg15
(lp4075
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4076
S'space'
p4077
asg96
I3
sS'.thisIndex'
p4078
I3
sa(dp4079
g16
(lp4080
S'k'
asg18
S'Y'
sS'.thisRepN'
p4081
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4082
I9
sS'.thisN'
p4083
I504
sg25
S'Y'
sg15
(lp4084
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4085
S'space'
p4086
asg96
I10
sS'.thisIndex'
p4087
I10
sa(dp4088
g16
(lp4089
S'k'
asg18
S'Y'
sS'.thisRepN'
p4090
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4091
I10
sS'.thisN'
p4092
I505
sg25
S'Y'
sg15
(lp4093
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4094
S'space'
p4095
asg96
I1
sS'.thisIndex'
p4096
I1
sa(dp4097
g16
(lp4098
S'd'
asg18
S'Y'
sS'.thisRepN'
p4099
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4100
I0
sS'.thisN'
p4101
I506
sg25
S'Y'
sg15
(lp4102
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4103
S'space'
p4104
asg96
I8
sS'.thisIndex'
p4105
I8
sa(dp4106
g16
(lp4107
S'k'
asg18
S'Y'
sS'.thisRepN'
p4108
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4109
I1
sS'.thisN'
p4110
I507
sg25
S'Y'
sg15
(lp4111
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4112
S'space'
p4113
asg96
I10
sS'.thisIndex'
p4114
I10
sa(dp4115
g16
(lp4116
S'k'
asg18
S'Y'
sS'.thisRepN'
p4117
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4118
I2
sS'.thisN'
p4119
I508
sg25
S'Y'
sg15
(lp4120
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4121
S'space'
p4122
asg96
I5
sS'.thisIndex'
p4123
I5
sa(dp4124
g16
(lp4125
S'k'
asg18
S'N'
sS'.thisRepN'
p4126
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4127
I3
sS'.thisN'
p4128
I509
sg25
S'Y'
sg15
(lp4129
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4130
I4
sa(dp4131
g16
(lp4132
S'k'
asg18
S'Y'
sS'.thisRepN'
p4133
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4134
I4
sS'.thisN'
p4135
I510
sg25
S'Y'
sg15
(lp4136
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4137
S'space'
p4138
asg96
I3
sS'.thisIndex'
p4139
I3
sa(dp4140
g16
(lp4141
S'd'
asg18
S'N'
sS'.thisRepN'
p4142
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4143
I5
sS'.thisN'
p4144
I511
sg25
S'Y'
sg15
(lp4145
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4146
I1
sa(dp4147
g16
(lp4148
S'd'
asg18
S'Y'
sS'.thisRepN'
p4149
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4150
I6
sS'.thisN'
p4151
I512
sg25
S'Y'
sg15
(lp4152
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4153
S'space'
p4154
asg96
I0
sS'.thisIndex'
p4155
I0
sa(dp4156
g16
(lp4157
S'k'
asg18
S'N'
sS'.thisRepN'
p4158
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4159
I7
sS'.thisN'
p4160
I513
sg25
S'Y'
sg15
(lp4161
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I9
sS'.thisIndex'
p4162
I9
sa(dp4163
g16
(lp4164
S'd'
asg18
S'Y'
sS'.thisRepN'
p4165
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4166
I8
sS'.thisN'
p4167
I514
sg25
S'Y'
sg15
(lp4168
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4169
S'space'
p4170
asg96
I6
sS'.thisIndex'
p4171
I6
sa(dp4172
g16
(lp4173
S'd'
asg18
S'Y'
sS'.thisRepN'
p4174
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4175
I9
sS'.thisN'
p4176
I515
sg25
S'Y'
sg15
(lp4177
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4178
S'space'
p4179
asg96
I5
sS'.thisIndex'
p4180
I5
sa(dp4181
g16
(lp4182
S'd'
asg18
S'N'
sS'.thisRepN'
p4183
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4184
I10
sS'.thisN'
p4185
I516
sg25
S'Y'
sg15
(lp4186
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4187
I4
sa(dp4188
g16
(lp4189
S'k'
asg18
S'Y'
sS'.thisRepN'
p4190
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4191
I0
sS'.thisN'
p4192
I517
sg25
S'Y'
sg15
(lp4193
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4194
S'space'
p4195
asg96
I10
sS'.thisIndex'
p4196
I10
sa(dp4197
g16
(lp4198
S'd'
asg18
S'Y'
sS'.thisRepN'
p4199
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4200
I1
sS'.thisN'
p4201
I518
sg25
S'Y'
sg15
(lp4202
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4203
S'space'
p4204
asg96
I4
sS'.thisIndex'
p4205
I4
sa(dp4206
g16
(lp4207
S'd'
asg18
S'Y'
sS'.thisRepN'
p4208
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4209
I2
sS'.thisN'
p4210
I519
sg25
S'Y'
sg15
(lp4211
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4212
S'space'
p4213
asg96
I9
sS'.thisIndex'
p4214
I9
sa(dp4215
g16
(lp4216
S'd'
asg18
S'N'
sS'.thisRepN'
p4217
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4218
I3
sS'.thisN'
p4219
I520
sg25
S'Y'
sg15
(lp4220
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I5
sS'.thisIndex'
p4221
I5
sa(dp4222
g16
(lp4223
S'k'
asg18
S'N'
sS'.thisRepN'
p4224
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4225
I4
sS'.thisN'
p4226
I521
sg25
S'Y'
sg15
(lp4227
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4228
I7
sa(dp4229
g16
(lp4230
S'k'
asg18
S'Y'
sS'.thisRepN'
p4231
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4232
I5
sS'.thisN'
p4233
I522
sg25
S'Y'
sg15
(lp4234
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4235
S'space'
p4236
asg96
I6
sS'.thisIndex'
p4237
I6
sa(dp4238
g16
(lp4239
S'k'
asg18
S'Y'
sS'.thisRepN'
p4240
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4241
I6
sS'.thisN'
p4242
I523
sg25
S'Y'
sg15
(lp4243
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4244
S'space'
p4245
asg96
I2
sS'.thisIndex'
p4246
I2
sa(dp4247
g16
(lp4248
S'd'
asg18
S'N'
sS'.thisRepN'
p4249
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4250
I7
sS'.thisN'
p4251
I524
sg25
S'Y'
sg15
(lp4252
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4253
I8
sa(dp4254
g16
(lp4255
S'k'
asg18
S'Y'
sS'.thisRepN'
p4256
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4257
I8
sS'.thisN'
p4258
I525
sg25
S'Y'
sg15
(lp4259
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4260
S'space'
p4261
asg96
I7
sS'.thisIndex'
p4262
I7
sa(dp4263
g16
(lp4264
S'd'
asg18
S'Y'
sS'.thisRepN'
p4265
I47
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4266
I9
sS'.thisN'
p4267
I526
sg25
S'Y'
sg15
(lp4268
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4269
I4
sa(dp4270
g16
(lp4271
S'd'
asg18
S'N'
sS'.thisRepN'
p4272
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4273
I10
sS'.thisN'
p4274
I527
sg25
S'Y'
sg15
(lp4275
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I9
sS'.thisIndex'
p4276
I9
sa(dp4277
g16
(lp4278
S'k'
asg18
S'Y'
sS'.thisRepN'
p4279
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4280
I0
sS'.thisN'
p4281
I528
sg25
S'Y'
sg15
(lp4282
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4283
S'space'
p4284
asg96
I8
sS'.thisIndex'
p4285
I8
sa(dp4286
g16
(lp4287
S'k'
asg18
S'Y'
sS'.thisRepN'
p4288
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4289
I1
sS'.thisN'
p4290
I529
sg25
S'Y'
sg15
(lp4291
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4292
S'space'
p4293
asg96
I2
sS'.thisIndex'
p4294
I2
sa(dp4295
g16
(lp4296
S'k'
asg18
S'N'
sS'.thisRepN'
p4297
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4298
I2
sS'.thisN'
p4299
I530
sg25
S'Y'
sg15
(lp4300
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4301
I7
sa(dp4302
g16
(lp4303
S'k'
asg18
S'Y'
sS'.thisRepN'
p4304
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4305
I3
sS'.thisN'
p4306
I531
sg25
S'Y'
sg15
(lp4307
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4308
S'space'
p4309
asg96
I2
sS'.thisIndex'
p4310
I2
sa(dp4311
g16
(lp4312
S'k'
asg18
S'N'
sS'.thisRepN'
p4313
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4314
I4
sS'.thisN'
p4315
I532
sg25
S'Y'
sg15
(lp4316
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4317
I7
sa(dp4318
g16
(lp4319
S'k'
asg18
S'N'
sS'.thisRepN'
p4320
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4321
I5
sS'.thisN'
p4322
I533
sg25
S'Y'
sg15
(lp4323
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4324
I7
sa(dp4325
g16
(lp4326
S'k'
asg18
S'Y'
sS'.thisRepN'
p4327
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4328
I6
sS'.thisN'
p4329
I534
sg25
S'Y'
sg15
(lp4330
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4331
S'space'
p4332
asg96
I1
sS'.thisIndex'
p4333
I1
sa(dp4334
g16
(lp4335
S'k'
asg18
S'N'
sS'.thisRepN'
p4336
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4337
I7
sS'.thisN'
p4338
I535
sg25
S'Y'
sg15
(lp4339
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4340
I0
sa(dp4341
g16
(lp4342
S'k'
asg18
S'N'
sS'.thisRepN'
p4343
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4344
I8
sS'.thisN'
p4345
I536
sg25
S'Y'
sg15
(lp4346
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4347
I6
sa(dp4348
g16
(lp4349
S'd'
asg18
S'N'
sS'.thisRepN'
p4350
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4351
I9
sS'.thisN'
p4352
I537
sg25
S'Y'
sg15
(lp4353
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4354
I6
sa(dp4355
g16
(lp4356
S'd'
asg18
S'N'
sS'.thisRepN'
p4357
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4358
I10
sS'.thisN'
p4359
I538
sg25
S'Y'
sg15
(lp4360
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p4361
I3
sa(dp4362
g16
(lp4363
S'k'
asg18
S'Y'
sS'.thisRepN'
p4364
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4365
I0
sS'.thisN'
p4366
I539
sg25
S'Y'
sg15
(lp4367
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4368
S'space'
p4369
asg96
I4
sS'.thisIndex'
p4370
I4
sa(dp4371
g16
(lp4372
S'd'
asg18
S'Y'
sS'.thisRepN'
p4373
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4374
I1
sS'.thisN'
p4375
I540
sg25
S'Y'
sg15
(lp4376
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4377
S'space'
p4378
asg96
I3
sS'.thisIndex'
p4379
I3
sa(dp4380
g16
(lp4381
S'd'
asg18
S'Y'
sS'.thisRepN'
p4382
I49
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4383
I2
sS'.thisN'
p4384
I541
sg25
S'Y'
sg15
(lp4385
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4386
S'd'
asg96
I3
sS'.thisIndex'
p4387
I3
sa(dp4388
g16
(lp4389
S'k'
asg18
S'N'
sS'.thisRepN'
p4390
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4391
I3
sS'.thisN'
p4392
I542
sg25
S'Y'
sg15
(lp4393
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4394
I2
sa(dp4395
g16
(lp4396
S'd'
asg18
S'N'
sS'.thisRepN'
p4397
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4398
I4
sS'.thisN'
p4399
I543
sg25
S'Y'
sg15
(lp4400
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4401
I6
sa(dp4402
g16
(lp4403
S'k'
asg18
S'N'
sS'.thisRepN'
p4404
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4405
I5
sS'.thisN'
p4406
I544
sg25
S'Y'
sg15
(lp4407
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4408
I2
sa(dp4409
g16
(lp4410
S'k'
asg18
S'N'
sS'.thisRepN'
p4411
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4412
I6
sS'.thisN'
p4413
I545
sg25
S'Y'
sg15
(lp4414
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4415
I4
sa(dp4416
g16
(lp4417
S'k'
asg18
S'N'
sS'.thisRepN'
p4418
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4419
I7
sS'.thisN'
p4420
I546
sg25
S'Y'
sg15
(lp4421
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4422
I8
sa(dp4423
g16
(lp4424
S'd'
asg18
S'N'
sS'.thisRepN'
p4425
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4426
I8
sS'.thisN'
p4427
I547
sg25
S'Y'
sg15
(lp4428
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I9
sS'.thisIndex'
p4429
I9
sa(dp4430
g16
(lp4431
S'k'
asg18
S'N'
sS'.thisRepN'
p4432
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4433
I9
sS'.thisN'
p4434
I548
sg25
S'Y'
sg15
(lp4435
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p4436
I3
sa(dp4437
g16
(lp4438
S'd'
asg18
S'N'
sg22
I46
sg26
S'Y'
sS'.thisN'
p4439
I549
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4440
I10
sS'.thisRepN'
p4441
I49
sg21
I46
sg25
S'Y'
sg23
I25
sg15
(lp4442
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4443
I8
sa(dp4444
g16
(lp4445
S'k'
asS'.thisIndex'
p4446
I2
sS'.thisRepN'
p4447
I50
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4448
I0
sS'.thisN'
p4449
I550
sg25
S'Y'
sg15
(lp4450
S'd'
asg17
S'Y'
sg14
I12
sg96
I2
sa(dp4451
g16
(lp4452
S'k'
asS'.thisIndex'
p4453
I3
sS'.thisRepN'
p4454
I50
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4455
I1
sS'.thisN'
p4456
I551
sg25
S'Y'
sg15
(lp4457
S'd'
asg17
S'Y'
sg14
I12
sg96
I3
sa(dp4458
g16
(lp4459
S'k'
asg18
S'N'
sS'.thisRepN'
p4460
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4461
I2
sS'.thisN'
p4462
I552
sg25
S'Y'
sg15
(lp4463
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4464
I3
sa(dp4465
g16
(lp4466
S'k'
asg18
S'Y'
sS'.thisRepN'
p4467
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4468
I3
sS'.thisN'
p4469
I553
sg25
S'Y'
sg15
(lp4470
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4471
S'space'
p4472
asg96
I8
sS'.thisIndex'
p4473
I8
sa(dp4474
g16
(lp4475
S'k'
asg18
S'N'
sS'.thisRepN'
p4476
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4477
I4
sS'.thisN'
p4478
I554
sg25
S'Y'
sg15
(lp4479
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4480
I7
sa(dp4481
g16
(lp4482
S'd'
asg18
S'N'
sS'.thisRepN'
p4483
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4484
I5
sS'.thisN'
p4485
I555
sg25
S'Y'
sg15
(lp4486
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4487
I0
sa(dp4488
g16
(lp4489
S'k'
asg18
S'N'
sS'.thisRepN'
p4490
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4491
I6
sS'.thisN'
p4492
I556
sg25
S'Y'
sg15
(lp4493
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4494
I2
sa(dp4495
g16
(lp4496
S'd'
asg18
S'Y'
sS'.thisRepN'
p4497
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4498
I7
sS'.thisN'
p4499
I557
sg25
S'Y'
sg15
(lp4500
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4501
S'space'
p4502
asg96
I7
sS'.thisIndex'
p4503
I7
sa(dp4504
g16
(lp4505
S'd'
asg18
S'N'
sS'.thisRepN'
p4506
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4507
I8
sS'.thisN'
p4508
I558
sg25
S'Y'
sg15
(lp4509
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4510
I4
sa(dp4511
g16
(lp4512
S'k'
asg18
S'Y'
sS'.thisRepN'
p4513
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4514
I9
sS'.thisN'
p4515
I559
sg25
S'Y'
sg15
(lp4516
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4517
S'space'
p4518
asg96
I8
sS'.thisIndex'
p4519
I8
sa(dp4520
g16
(lp4521
S'd'
asg18
S'N'
sS'.thisRepN'
p4522
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4523
I10
sS'.thisN'
p4524
I560
sg25
S'Y'
sg15
(lp4525
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4526
I7
sa(dp4527
g16
(lp4528
S'k'
asg18
S'N'
sS'.thisRepN'
p4529
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4530
I0
sS'.thisN'
p4531
I561
sg25
S'Y'
sg15
(lp4532
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I6
sS'.thisIndex'
p4533
I6
sa(dp4534
g16
(lp4535
S'd'
asg18
S'N'
sS'.thisRepN'
p4536
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4537
I1
sS'.thisN'
p4538
I562
sg25
S'Y'
sg15
(lp4539
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I6
sS'.thisIndex'
p4540
I6
sa(dp4541
g16
(lp4542
S'k'
asg18
S'N'
sS'.thisRepN'
p4543
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4544
I2
sS'.thisN'
p4545
I563
sg25
S'Y'
sg15
(lp4546
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4547
I9
sa(dp4548
g16
(lp4549
S'd'
asg18
S'N'
sS'.thisRepN'
p4550
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4551
I3
sS'.thisN'
p4552
I564
sg25
S'Y'
sg15
(lp4553
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4554
I10
sa(dp4555
g16
(lp4556
S'd'
asg18
S'Y'
sS'.thisRepN'
p4557
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4558
I4
sS'.thisN'
p4559
I565
sg25
S'Y'
sg15
(lp4560
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4561
S'space'
p4562
asg96
I1
sS'.thisIndex'
p4563
I1
sa(dp4564
g16
(lp4565
S'k'
asg18
S'N'
sS'.thisRepN'
p4566
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4567
I5
sS'.thisN'
p4568
I566
sg25
S'Y'
sg15
(lp4569
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4570
I0
sa(dp4571
g16
(lp4572
S'k'
asg18
S'Y'
sS'.thisRepN'
p4573
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4574
I6
sS'.thisN'
p4575
I567
sg25
S'Y'
sg15
(lp4576
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4577
S'space'
p4578
asg96
I6
sS'.thisIndex'
p4579
I6
sa(dp4580
g16
(lp4581
S'k'
asg18
S'N'
sS'.thisRepN'
p4582
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4583
I7
sS'.thisN'
p4584
I568
sg25
S'Y'
sg15
(lp4585
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4586
I10
sa(dp4587
g16
(lp4588
S'd'
asg18
S'Y'
sS'.thisRepN'
p4589
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4590
I8
sS'.thisN'
p4591
I569
sg25
S'Y'
sg15
(lp4592
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4593
S'space'
p4594
asg96
I3
sS'.thisIndex'
p4595
I3
sa(dp4596
g16
(lp4597
S'k'
asg18
S'N'
sS'.thisRepN'
p4598
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4599
I9
sS'.thisN'
p4600
I570
sg25
S'Y'
sg15
(lp4601
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4602
I10
sa(dp4603
g16
(lp4604
S'k'
asg18
S'N'
sS'.thisRepN'
p4605
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4606
I10
sS'.thisN'
p4607
I571
sg25
S'Y'
sg15
(lp4608
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4609
I0
sa(dp4610
g16
(lp4611
S'd'
asg18
S'Y'
sS'.thisRepN'
p4612
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4613
I0
sS'.thisN'
p4614
I572
sg25
S'Y'
sg15
(lp4615
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4616
S'space'
p4617
asg96
I4
sS'.thisIndex'
p4618
I4
sa(dp4619
g16
(lp4620
S'd'
asg18
S'N'
sS'.thisRepN'
p4621
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4622
I1
sS'.thisN'
p4623
I573
sg25
S'Y'
sg15
(lp4624
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I8
sS'.thisIndex'
p4625
I8
sa(dp4626
g16
(lp4627
S'k'
asg18
S'Y'
sS'.thisRepN'
p4628
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4629
I2
sS'.thisN'
p4630
I574
sg25
S'Y'
sg15
(lp4631
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4632
S'space'
p4633
asg96
I6
sS'.thisIndex'
p4634
I6
sa(dp4635
g16
(lp4636
S'd'
asg18
S'Y'
sS'.thisRepN'
p4637
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4638
I3
sS'.thisN'
p4639
I575
sg25
S'Y'
sg15
(lp4640
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4641
S'space'
p4642
asg96
I2
sS'.thisIndex'
p4643
I2
sa(dp4644
g16
(lp4645
S'd'
asg18
S'N'
sS'.thisRepN'
p4646
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4647
I4
sS'.thisN'
p4648
I576
sg25
S'Y'
sg15
(lp4649
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4650
I7
sa(dp4651
g16
(lp4652
S'k'
asg18
S'N'
sS'.thisRepN'
p4653
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4654
I5
sS'.thisN'
p4655
I577
sg25
S'Y'
sg15
(lp4656
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I8
sS'.thisIndex'
p4657
I8
sa(dp4658
g16
(lp4659
S'k'
asg18
S'Y'
sS'.thisRepN'
p4660
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4661
I6
sS'.thisN'
p4662
I578
sg25
S'Y'
sg15
(lp4663
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4664
S'space'
p4665
asg96
I8
sS'.thisIndex'
p4666
I8
sa(dp4667
g16
(lp4668
S'k'
asg18
S'Y'
sS'.thisRepN'
p4669
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4670
I7
sS'.thisN'
p4671
I579
sg25
S'Y'
sg15
(lp4672
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4673
S'space'
p4674
asg96
I3
sS'.thisIndex'
p4675
I3
sa(dp4676
g16
(lp4677
S'd'
asg18
S'Y'
sS'.thisRepN'
p4678
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4679
I8
sS'.thisN'
p4680
I580
sg25
S'Y'
sg15
(lp4681
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4682
S'space'
p4683
asg96
I7
sS'.thisIndex'
p4684
I7
sa(dp4685
g16
(lp4686
S'k'
asg18
S'Y'
sS'.thisRepN'
p4687
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4688
I9
sS'.thisN'
p4689
I581
sg25
S'Y'
sg15
(lp4690
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4691
S'space'
p4692
asg96
I8
sS'.thisIndex'
p4693
I8
sa(dp4694
g16
(lp4695
S'd'
asg18
S'Y'
sS'.thisRepN'
p4696
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4697
I10
sS'.thisN'
p4698
I582
sg25
S'Y'
sg15
(lp4699
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4700
S'space'
p4701
asg96
I5
sS'.thisIndex'
p4702
I5
sa(dp4703
g16
(lp4704
S'k'
asg18
S'Y'
sS'.thisRepN'
p4705
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4706
I0
sS'.thisN'
p4707
I583
sg25
S'Y'
sg15
(lp4708
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4709
S'space'
p4710
asg96
I5
sS'.thisIndex'
p4711
I5
sa(dp4712
g16
(lp4713
S'k'
asg18
S'N'
sS'.thisRepN'
p4714
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4715
I1
sS'.thisN'
p4716
I584
sg25
S'Y'
sg15
(lp4717
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I8
sS'.thisIndex'
p4718
I8
sa(dp4719
g16
(lp4720
S'd'
asg18
S'N'
sS'.thisRepN'
p4721
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4722
I2
sS'.thisN'
p4723
I585
sg25
S'Y'
sg15
(lp4724
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I1
sS'.thisIndex'
p4725
I1
sa(dp4726
g16
(lp4727
S'd'
asg18
S'Y'
sS'.thisRepN'
p4728
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4729
I3
sS'.thisN'
p4730
I586
sg25
S'Y'
sg15
(lp4731
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4732
S'space'
p4733
asg96
I5
sS'.thisIndex'
p4734
I5
sa(dp4735
g16
(lp4736
S'd'
asg18
S'N'
sS'.thisRepN'
p4737
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4738
I4
sS'.thisN'
p4739
I587
sg25
S'Y'
sg15
(lp4740
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4741
I4
sa(dp4742
g16
(lp4743
S'k'
asg18
S'Y'
sS'.thisRepN'
p4744
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4745
I5
sS'.thisN'
p4746
I588
sg25
S'Y'
sg15
(lp4747
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4748
S'space'
p4749
asg96
I3
sS'.thisIndex'
p4750
I3
sa(dp4751
g16
(lp4752
S'd'
asg18
S'Y'
sS'.thisRepN'
p4753
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4754
I6
sS'.thisN'
p4755
I589
sg25
S'Y'
sg15
(lp4756
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4757
S'space'
p4758
asg96
I5
sS'.thisIndex'
p4759
I5
sa(dp4760
g16
(lp4761
S'd'
asg18
S'N'
sS'.thisRepN'
p4762
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4763
I7
sS'.thisN'
p4764
I590
sg25
S'Y'
sg15
(lp4765
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4766
I2
sa(dp4767
g16
(lp4768
S'k'
asg18
S'Y'
sS'.thisRepN'
p4769
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4770
I8
sS'.thisN'
p4771
I591
sg25
S'Y'
sg15
(lp4772
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4773
S'space'
p4774
asg96
I2
sS'.thisIndex'
p4775
I2
sa(dp4776
g16
(lp4777
S'd'
asg18
S'Y'
sS'.thisRepN'
p4778
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4779
I9
sS'.thisN'
p4780
I592
sg25
S'Y'
sg15
(lp4781
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4782
S'space'
p4783
asg96
I9
sS'.thisIndex'
p4784
I9
sa(dp4785
g16
(lp4786
S'k'
asg18
S'N'
sS'.thisRepN'
p4787
I53
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4788
I10
sS'.thisN'
p4789
I593
sg25
S'Y'
sg15
(lp4790
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4791
S'space'
p4792
asg96
I2
sS'.thisIndex'
p4793
I2
sa(dp4794
g16
(lp4795
S'k'
asg18
S'Y'
sS'.thisRepN'
p4796
I54
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4797
I0
sS'.thisN'
p4798
I594
sg25
S'Y'
sg15
(lp4799
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4800
I9
sa(dp4801
g16
(lp4802
S'k'
asg18
S'N'
sS'.thisRepN'
p4803
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4804
I1
sS'.thisN'
p4805
I595
sg25
S'Y'
sg15
(lp4806
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4807
I3
sa(dp4808
g16
(lp4809
S'k'
asg18
S'N'
sS'.thisRepN'
p4810
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4811
I2
sS'.thisN'
p4812
I596
sg25
S'Y'
sg15
(lp4813
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4814
I3
sa(dp4815
g16
(lp4816
S'd'
asg18
S'Y'
sS'.thisRepN'
p4817
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4818
I3
sS'.thisN'
p4819
I597
sg25
S'Y'
sg15
(lp4820
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4821
S'space'
p4822
asg96
I7
sS'.thisIndex'
p4823
I7
sa(dp4824
g16
(lp4825
S'k'
asg18
S'Y'
sS'.thisRepN'
p4826
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4827
I4
sS'.thisN'
p4828
I598
sg25
S'Y'
sg15
(lp4829
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4830
S'space'
p4831
asg96
I10
sS'.thisIndex'
p4832
I10
sa(dp4833
g16
(lp4834
S'k'
asg18
S'Y'
sg22
I46
sg26
S'Y'
sS'.thisN'
p4835
I599
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4836
I5
sS'.thisRepN'
p4837
I54
sg21
I44
sg25
S'Y'
sg23
I24
sg15
(lp4838
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4839
S'space'
p4840
asg96
I1
sS'.thisIndex'
p4841
I1
sasS'loops'
p4842
(lp4843
g1
(g36
g3
NtRp4844
(dp4845
g39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4846
sg41
(lp4847
sg42
I75888944
sg10
S''
sg6
g43
sg44
I1
sg27
I01
sg28
Nsg45
g1
(g46
g47
(dp4848
g49
g50
(g51
g52
g53
S'b'
tRp4849
(I1
(I600
I1
tg56
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg57
g50
(g51
g52
g53
S'b'
tRp4850
(I1
(I600
I1
tg56
I00
S'\x00\x80\xbeC\x00\x80\xa2C\x00\x00\xd2C\x00\x00\x94C\x00\x00\xccC\x00\x00^C\x00\x00\xd6C\x00\x00uC\x00\x00\xb7C\x00\x00jC\x00\x00HC\x00\x00\xdeB\x00\x000C\x00\x00\xe6B\x00\x80\xb1C\x00\x00\xa4C\x00\x00\x1eC\x00\x00\xbcC\x00\x00GC\x00\x00lB\x00\x00,C\x00\x00.C\x00\x80\xa3C\x00\x80\x84C\x00\x80\x98C\x00\x00*C\x00\x80\x9aC\x00\x80\xc1C\x00\x00\x18B\x00\x00rC\x00\x00\x1cC\x00\x00\xd7C\x00\x80\xefC\x00\x80\xbaC\x00\x00\x19C\x00\x00\xe5C\x00\x00\x8aC\x00\x80\xf2C\x00@\tD\x00\x00\xf2C\x00\x00\xf8B\x00\x80\xd9C\x00\x80\x80C\x00\x00\xa2B\x00\x00\x00\x00\x00\x00\x88C\x00\x80\x12D\x00\x00JC\x00\x00\x99C\x00\x80\x8eC\x00\x80\xd2C\x00@\x0bD\x00\x00@C\x00\x00!C\x00\x00\xf3C\x00@\x07D\x00\x00\x11C\x00\x00\x07D\x00\x80\x90C\x00\x00-C\x00\x00\xecB\x00\x00\x8cC\x00@\x0eD\x00\x00fC\x00\x00;C\x00\x80\xf7C\x00\x005C\x00\x00\xaaB\x00\x80\xe6C\x00\x00\x7fC\x00\x00\xacB\x00\x00\x9fC\x00\x00\x02D\x00\x00 B\x00\x00\xe8B\x00\x00\\B\x00\x80\x9dC\x00\x00\xb8B\x00\x00\xf5C\x00\x80\x95C\x00\x80\xc2C\x00\x00\xfcB\x00\x00UC\x00\x00\xbbC\x00\x00\xcaB\x00\x00\xc0C\x00\x00dC\x00\x80\xf9C\x00\x00\x16C\x00\xc0\x01D\x00\x80\x01D\x00@\rD\x00\x00\x82B\x00\x00\xb6C\x00\x00\xd8B\x00\x00\xf8A\x00\x00\x83C\x00\x80\xd5C\x00\x80\xdaC\x00\x00\x98C\x00\x00\x80?\x00\x00(C\x00\x80\x9fC\x00\x00\xfdC\x00\x00pB\x00\x80\x8bC\x00\x80\xe1C\x00\x80\xe8C\x00\x00\x80B\x00\x80\xf8C\x00\x00\xbfC\x00\x00\xebC\x00\x80\xb7C\x00\x80\x13D\x00\x00LB\x00\x009C\x00\x80\x8dC\x00\x00\x00D\x00\x00\xa8C\x00\x80\x82C\x00\x00\xc0@\x00\x00\x03D\x00\x00\xceC\x00\x00$C\x00\x00\xfaB\x00\x00\x0fD\x00\x00\xdeC\x00\x00\x0fC\x00\x00gC\x00\x80\xc4C\x00\x80\x8fC\x00\x80\x06D\x00\x00\xb0C\x00\x80\xa5C\x00\x80\xf4C\x00\x00\x00A\x00\x00\x86B\x00\x00\x9eC\x00\x00\xe7C\x00\x80\xc0C\x00\x00\xeeB\x00\x00\x84C\x00\x00\x90C\x00\x00\xccB\x00\x00>C\x00\x00hC\x00\x00\rD\x00\x00)C\x00@\x06D\x00\x00\xc4C\x00\x00\xd9C\x00\x00\x80C\x00\x00\xafC\x00\x80\xc3C\x00\x00\x0cD\x00\x00\xabC\x00\x80\x11D\x00\xc0\x07D\x00\x00\x07C\x00\x00|C\x00\x80\xf3C\x00@\x13D\x00\x00<C\x00\x80\xceC\x00\x00\xe8C\x00\xc0\x08D\x00\x00HB\x00\x00\xdfC\x00\x00\xa2C\x00\x80\xfaC\x00\x00\xf0C\x00\x80\x03D\x00\x00\x10D\x00\x00\xceB\x00\x00\xa9C\x00\xc0\x12D\x00\x00\xa1C\x00\x00\xdaC\x00\x002C\x00\x00RC\x00\xc0\nD\x00\x00\xd4C\x00\x80\xe7C\x00@\x0fD\x00\x00pA\x00\x00\x80@\x00\x00%C\x00\x00\xeaC\x00\x00\xc2B\x00\x00\xf9C\x00\x00$B\x00\x80\xb2C\x00\x80\xb6C\x00\x00@B\x00\x00\xb4C\x00\x00\x0bC\x00\x00\xa8B\x00\x00\xe9C\x00\x000B\x00\x00\x1aC\x00\x00\x9aC\x00\x00\xbaB\x00\x80\xdcC\x00\x00IC\x00\x00\xfaC\x00\x00\xa6C\x00\x00\xe8A\x00\x00SC\x00\x00\x14B\x00\x00\xc4B\x00\x00\xb2C\x00\x00\xdaB\x00\x80\x0cD\x00\x00\x96C\x00\x00\xe4C\x00\x00\x10A\x00\x00\xf1C\x00\x00WC\x00\x00\xc0B\x00\x00\xfeB\x00\x00,B\x00\x80\xf6C\x00\x80\xabC\x00\x00\xeeC\x00\x80\x0bD\x00\x00TC\x00\x00\x9aB\x00\x00hB\x00\x00~C\x00\x00\xacC\x00\x00\x85C\x00\x80\xe9C\x00\x00bC\x00\x00\xd8A\x00\x00\x12C\x00\x00\xa3C\x00\xc0\x00D\x00\x00\xdcC\x00\x00\xe6C\x00\x80\xd1C\x00\x80\xdeC\x00\x00\xe4B\x00\x00\xf2B\x00\x00\x8fC\x00\x80\xb0C\x00\x00\x93C\x00\x00\xa6B\x00\x00=C\x00\x80\xd0C\x00\x00\x81C\x00\x00\x98A\x00\x00\xe1C\x00\x00\xc1C\x00\x80\xbdC\x00\x80\xa1C\x00\x00\x0eC\x00\x00\x11D\x00\x80\xd8C\x00\x00{C\x00\x00kC\x00\x00\x04C\x00\x80\xe4C\x00\x00\xbdC\x00\x00EC\x00\xc0\x0fD\x00\x80\xccC\x00@\x12D\x00\x00\x0cC\x00\x00\x01C\x00\x00\xa8A\x00\x80\x89C\x00\x00\xcfC\x00\x00\x9cC\x00\x80\xb9C\x00@\x15D\x00\x00:C\x00\x00\x94B\x00\x80\xffC\x00\x00pC\x00\x80\xc5C\x00\x80\xc6C\x00\xc0\x03D\x00\x80\xbbC\x00\x00\xc6B\x00\x00\x14C\x00\x80\xf1C\x00\x80\x00D\x00\x80\xd3C\x00\x00\x18C\x00\x00aC\x00\x00cC\x00\x00\x8cB\x00\x00sC\x00\x00\x1fC\x00\x80\xb8C\x00\x00\x00@\x00\x00\x9dC\x00\x80\x83C\x00\x00\x01D\x00\x00\x14D\x00\x00\xa0@\x00\x004C\x00\x00\x90A\x00\x00\x96B\x00\x00\xb0B\x00\x00 C\x00\x00dB\x00\x00KC\x00\x00\x1dC\x00\x80\xe0C\x00\x80\x92C\x00\x006C\x00\x00&C\x00\x80\xfbC\x00\x00QC\x00\x00\x1cB\x00\x00\xa0C\x00\x80\x91C\x00\x80\xdbC\x00\x00LC\x00\x00\x9cB\x00\x80\xaeC\x00\x00wC\x00\x80\x87C\x00\x80\xc8C\x00\x00\x04D\x00\x00YC\x00\x00\xd1C\x00\x00}C\x00\xc0\x0bD\x00\x00\xc0A\x00\x80\xd4C\x00\x80\xb3C\x00\x00\xa4B\x00\x80\xb4C\x00\x00\xb0A\x00\x00xB\x00\x00\xfeC\x00\x00<B\x00\x00tB\x00\xc0\x11D\x00\x00\xc8C\x00\x00+C\x00\x80\xa8C\x00\x00\x86C\x00\x00|B\x00\x00\x8eC\x00\x00\xb1C\x00\x00\xc3C\x00\x007C\x00\x00(B\x00\x00\x00C\x00\x00\xbcB\x00\x00\xb6B\x00\x00AC\x00\x00\x88A\x00\x00PB\x00\x00\xb9C\x00\x80\xadC\x00\x000A\x00\x00\xe2C\x00\x00\xd6B\x00\x00\tD\x00\x00vC\x00\x00\x10C\x00\x80\xa6C\x00@\x10D\x00\x00\xbaC\x00\x00\xaeC\x00\x00\xb8A\x00\x00\x9bC\x00\x80\x86C\x00\x00VC\x00\x00\x87C\x00\x00`A\x00\x80\xb5C\x00\x80\xfdC\x00@\x01D\x00\x80\x9bC\x00\x80\xe5C\x00\x00]C\x00\x00ZC\x00\x00\x08B\x00\x00\x13D\x00\x00\xb8C\x00\x00\xb5C\x00@\x08D\x00\x00/C\x00\x00`B\x00\x00\xc9C\x00\x00\xf4B\x00\x80\rD\x00\x00\x97C\x00\x80\x08D\x00\x00FC\x00\x00\xb4B\x00\x80\xfcC\x00@\x0cD\x00\x00\xf6B\x00\x00\x17C\x00\x00\x03C\x00@\x11D\x00\x00\x12D\x00\x00\xa7C\x00\x80\x8cC\x00\x00"C\x00\x00\x05D\x00\x00\xaeB\x00\x00yC\x00\x00\xe0@\x00\x00\x88B\x00\x80\xafC\x00\x00\x91C\x00\x00\xd0B\x00\x00\xc6C\x00\x00PA\x00\x008C\x00\x00\xc8B\x00\x80\xf5C\x00\x80\xeeC\x00\x00\x1bC\x00\x00XB\x00\x00\\C\x00\x00\xa0B\x00\x80\xedC\x00@\x00D\x00\x00\x08D\x00\x00\xa0A\x00\x00\tC\x00\x00\xf6C\x00\x00MC\x00\x00\x98B\x00\x80\x14D\x00\x00\x0cB\x00\x80\xa0C\x00\x00\xc5C\x00\x80\xacC\x00\x80\x0fD\x00\x80\x0eD\x00\x00lC\x00\x00`C\x00\x00\x13C\x00\x80\x10D\x00\x80\x8aC\x00\xc0\x14D\x00\x00@A\x00\x80\x9eC\x00\x004B\x00\x80\x94C\x00\x80\x85C\x00@\x05D\x00\x00oC\x00\x00\xf8C\x00\x001C\x00\x00\x8bC\x00\x80\xdfC\x00\xc0\tD\x00\x80\xbfC\x00\x00\xbeB\x00\x00eC\x00\x00\x15C\x00\x00NC\x00\x00CC\x00\x00qC\x00\x80\xa7C\x00\x00\x0eD\x00\x00\x8aB\x00\x00\xd0A\x00\x80\x02D\x00\x00_C\x00\x00\xeaB\x00\x00\xaaC\x00\x00\x04B\x00\x00\xf7C\x00\x00\xe0B\x00\x00\x02C\x00\x80\xc7C\x00\x80\xd7C\x00\x80\x07D\x00@\nD\x00\x008B\x00\x00\xe0A\x00\x80\xcbC\x00\x00\xcdC\x00\x80\xecC\x00\x80\x93C\x00\x00\xc7C\x00\x00mC\x00\x80\xbcC\x00\x80\xf0C\x00\x00\x82C\x00@\x04D\x00\x00iC\x00\x00\x80A\x00\x00XC\x00\x00\x84B\x00\x00TB\x00\x00\x00B\x00\xc0\x0eD\x00\x00\'C\x00\x80\nD\x00\x80\xe3C\x00\x80\xddC\x00\x00\xa5C\x00\x00\xd4B\x00\x00\x89C\x00\x00\xd3C\x00@\x02D\x00\x00\xdcB\x00\x00\xecC\x00\x00BC\x00\x00\x06C\x00\x00\xf0A\x00\x80\xa9C\x00\x00\x06D\x00\x00@@\x00\x80\xe2C\x00\x00\nC\x00\x00zC\x00\x00tC\x00\x00\x8eB\x00\xc0\x0cD\x00\x80\xfeC\x00\x00\xf0B\x00\x80\tD\x00\x003C\x00\x80\x15D\x00\x00\x92B\x00\x00\x8dC\x00\x00OC\x00\x00DC\x00\x00\xe2B\x00\x00\x90B\x00\x80\xa4C\x00\x80\xcfC\x00\x00\xe3C\x00\xc0\rD\x00\xc0\x13D\x00\x00\xd2B\x00\x80\x9cC\x00\x00\xbeC\x00\x00\xd5C\x00\x80\xebC\x00\xc0\x06D\x00\x00\x95C\x00\x00\x9eB\x00\x00\xd8C\x00\x00 A\x00\xc0\x15D\x00\x00\x10B\x00\x00\xcbC\x00\x80\xcdC\x00\x80\xcaC\x00\x00\rC\x00\x00\x08C\x00\x00\x15D\x00\x00xC\x00\x00\xf4C\x00\x80\x97C\x00\x00PC\x00\x00\xfcC\x00\x00\nD\x00\x00\xcaC\x00\x00\xb2B\x00@\x14D\x00\x00\xfbC\x00\x00\xc2C\x00\x80\x81C\x00\x00DB\x00\x00#C\x00\x00\xffC\x00\xc0\x10D\x00\x00\xb3C\x00\x00?C\x00\xc0\x02D\x00\x80\x88C\x00\x80\xeaC\x00\x80\xaaC\x00\x00\xedC\x00\x00\xefC\x00\x80\x99C\x00\x00\x05C\x00\x80\xd6C\x00\x00\xadC\x00\x80\x04D\x00\x00\xddC\x00\x80\x96C\x00\x00nC\x00\xc0\x04D\x00\x00\x0bD\x00\x80\xc9C\x00\x00\xdbC\x00\x00\x92C\x00\x00\xc8A\x00\x80\x05D\x00@\x03D\x00\x00[C\x00\xc0\x05D\x00\x00\xe0C\x00\x00\xd0C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4851
(dp4852
g61
(dp4853
g49
I01
sg57
I01
ssg63
g4844
sg64
(lp4854
g49
ag57
asg66
(lp4855
I600
aI1
asbsg68
S'random'
p4856
sg70
g71
(g52
(I0
tS'b'
tRp4857
(I1
(I600
I1
tg55
(S'i4'
I0
I1
tRp4858
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S',\x00\x00\x00d\x00\x00\x00\'\x01\x00\x00\x03\x02\x00\x00\xb9\x00\x00\x00,\x01\x00\x00x\x00\x00\x00\x99\x01\x00\x00\x87\x00\x00\x00\xd7\x00\x00\x00#\x02\x00\x00g\x01\x00\x00\xbd\x01\x00\x00\x9f\x01\x00\x00v\x01\x00\x00\xb8\x00\x00\x00\xed\x01\x00\x00c\x01\x00\x00.\x01\x00\x00\xfa\x00\x00\x00\xab\x01\x00\x00\r\x01\x00\x00O\x01\x00\x00q\x01\x00\x00J\x01\x00\x00Q\x02\x00\x00\xd3\x01\x00\x00\xe9\x00\x00\x00\xe1\x01\x00\x00\xce\x00\x00\x00\x00\x02\x00\x00_\x00\x00\x00\xf1\x01\x00\x00\xd8\x01\x00\x00~\x01\x00\x00\xb1\x01\x00\x00%\x02\x00\x00\xd0\x00\x00\x00\x1c\x00\x00\x00;\x01\x00\x00I\x00\x00\x00\xbe\x00\x00\x00^\x01\x00\x00\xdc\x00\x00\x00\xc6\x00\x00\x00\xbf\x01\x00\x00\xe0\x01\x00\x00R\x01\x00\x00\xc1\x00\x00\x008\x02\x00\x00\xa6\x00\x00\x00r\x00\x00\x00d\x01\x00\x00\xf0\x01\x00\x00\xa5\x01\x00\x00K\x00\x00\x00\x84\x01\x00\x002\x01\x00\x00\xe3\x00\x00\x00\x13\x00\x00\x00h\x00\x00\x00S\x01\x00\x00P\x01\x00\x00Y\x01\x00\x00l\x00\x00\x00\\\x00\x00\x00\xef\x01\x00\x00\x88\x00\x00\x00\x9a\x01\x00\x00\xd2\x01\x00\x00#\x01\x00\x00\x08\x02\x00\x00\x14\x02\x00\x00\x0f\x02\x00\x00\x14\x01\x00\x00/\x01\x00\x00\xaf\x01\x00\x00\xe2\x00\x00\x00@\x01\x00\x00!\x02\x00\x00\xa7\x01\x00\x00+\x00\x00\x00M\x01\x00\x00\xf6\x00\x00\x00\xc4\x00\x00\x00C\x00\x00\x00F\x00\x00\x00\x97\x01\x00\x000\x01\x00\x003\x02\x00\x00\x8b\x01\x00\x00a\x01\x00\x00M\x00\x00\x00\xc9\x00\x00\x00`\x01\x00\x00\xca\x01\x00\x00\xda\x00\x00\x00\xbc\x00\x00\x00\xd1\x00\x00\x00\x1b\x01\x00\x00\xa1\x01\x00\x00T\x00\x00\x00\x8f\x00\x00\x00\xad\x00\x00\x00\x9d\x01\x00\x00\x1a\x02\x00\x00\xf8\x01\x00\x00i\x01\x00\x00^\x00\x00\x00\xd3\x00\x00\x00\xfc\x01\x00\x00\x0b\x00\x00\x00\xda\x01\x00\x00\x13\x02\x00\x00\xf1\x00\x00\x00\r\x00\x00\x00J\x00\x00\x00\xd6\x01\x00\x00<\x00\x00\x00\x8c\x00\x00\x00\x0b\x02\x00\x00\xf2\x00\x00\x00\x86\x01\x00\x00\x8e\x01\x00\x00(\x00\x00\x00|\x00\x00\x00Q\x00\x00\x00\xdb\x00\x00\x00_\x01\x00\x00\x0c\x01\x00\x00\xdb\x01\x00\x00\x90\x01\x00\x00\x04\x01\x00\x00E\x02\x00\x00\xff\x01\x00\x00\x9e\x00\x00\x00*\x02\x00\x00\xac\x01\x00\x00\x05\x02\x00\x00\xc3\x00\x00\x00\x0b\x01\x00\x00)\x02\x00\x00\xff\x00\x00\x00\x7f\x00\x00\x00l\x01\x00\x008\x00\x00\x00\xea\x00\x00\x00\xb9\x01\x00\x00\x1c\x01\x00\x00\xcc\x01\x00\x00X\x00\x00\x00\x8f\x01\x00\x00 \x01\x00\x00"\x00\x00\x00\xc7\x00\x00\x00\xa4\x01\x00\x00\x1e\x00\x00\x004\x01\x00\x00\x10\x00\x00\x00%\x01\x00\x001\x01\x00\x005\x00\x00\x00\x95\x01\x00\x009\x02\x00\x00{\x00\x00\x00\xba\x00\x00\x008\x01\x00\x00\xf3\x01\x00\x00e\x00\x00\x00\x93\x00\x00\x00\x19\x00\x00\x00V\x01\x00\x00\x14\x00\x00\x00;\x00\x00\x00\x15\x00\x00\x00\x83\x01\x00\x00\x0c\x00\x00\x00\xc5\x01\x00\x00\xb2\x00\x00\x00\r\x02\x00\x00-\x01\x00\x00B\x00\x00\x007\x01\x00\x00]\x01\x00\x00\xa0\x01\x00\x00s\x00\x00\x00\x13\x01\x00\x00@\x00\x00\x00\xa2\x00\x00\x00\xf7\x00\x00\x00\x90\x00\x00\x00=\x02\x00\x004\x00\x00\x00b\x01\x00\x00\xfe\x01\x00\x00\xce\x01\x00\x00\x12\x02\x00\x00\x07\x01\x00\x00\x8a\x01\x00\x00\x12\x00\x00\x00\n\x00\x00\x00\xcb\x00\x00\x00/\x00\x00\x003\x01\x00\x00?\x01\x00\x00\xae\x01\x00\x00\xcd\x01\x00\x00\x11\x02\x00\x00/\x02\x00\x00:\x01\x00\x00\xb3\x00\x00\x00\xcf\x00\x00\x00\xe1\x00\x00\x00R\x00\x00\x00t\x01\x00\x00\xd9\x00\x00\x00\xee\x01\x00\x00F\x01\x00\x00}\x01\x00\x00T\x02\x00\x00\xa6\x01\x00\x00|\x01\x00\x00\x05\x00\x00\x00\xd5\x01\x00\x00\xb8\x01\x00\x00!\x01\x00\x00\xe8\x00\x00\x00"\x01\x00\x00V\x00\x00\x00\xcb\x01\x00\x00?\x00\x00\x00\x80\x00\x00\x00\x91\x00\x00\x00\xec\x01\x00\x00\t\x00\x00\x00\x03\x01\x00\x00\xb7\x01\x00\x00\xe7\x01\x00\x00K\x02\x00\x00\xc3\x01\x00\x00\x16\x01\x00\x00\xcf\x01\x00\x00\x1d\x00\x00\x00$\x01\x00\x00\x07\x02\x00\x00\x07\x00\x00\x00k\x01\x00\x00B\x01\x00\x00,\x02\x00\x00\x98\x01\x00\x00\x06\x02\x00\x00\x02\x01\x00\x00\x9f\x00\x00\x00H\x01\x00\x00\xe4\x00\x00\x00E\x00\x00\x00\x97\x00\x00\x00*\x00\x00\x00\xf9\x00\x00\x007\x02\x00\x00\xea\x01\x00\x00w\x00\x00\x00`\x00\x00\x00)\x01\x00\x00\x8d\x00\x00\x00\x17\x00\x00\x00\xe6\x00\x00\x00\xc1\x01\x00\x00X\x01\x00\x00s\x01\x00\x00u\x01\x00\x00C\x01\x00\x00-\x00\x00\x00?\x02\x00\x00\xf9\x01\x00\x00\x0e\x01\x00\x00$\x00\x00\x00\xbb\x01\x00\x00\xc6\x01\x00\x00i\x00\x00\x00=\x00\x00\x00\x94\x01\x00\x00\x10\x02\x00\x00t\x00\x00\x00Z\x01\x00\x001\x00\x00\x00\xf3\x00\x00\x00\x82\x00\x00\x00\x8e\x00\x00\x00:\x00\x00\x00\x9c\x01\x00\x00=\x01\x00\x00P\x02\x00\x006\x01\x00\x00\xf5\x00\x00\x00\xe5\x01\x00\x00\x03\x00\x00\x00\xc0\x01\x00\x00 \x02\x00\x00O\x00\x00\x00\xd5\x00\x00\x00J\x02\x00\x00\x88\x01\x00\x00.\x02\x00\x00c\x00\x00\x00\x18\x00\x00\x000\x00\x00\x00D\x02\x00\x00\xc8\x00\x00\x00\x1a\x00\x00\x00r\x01\x00\x00z\x01\x00\x00\x10\x01\x00\x00\x1b\x02\x00\x00(\x01\x00\x00L\x00\x00\x00\x89\x00\x00\x00\xbe\x01\x00\x00G\x00\x00\x00f\x00\x00\x00<\x01\x00\x00\xb2\x01\x00\x00\xb0\x00\x00\x00\xfe\x00\x00\x00\xa8\x00\x00\x00\x01\x00\x00\x00\xeb\x00\x00\x00\x16\x00\x00\x00\x0f\x00\x00\x00\x15\x02\x00\x00\xf7\x01\x00\x00\x85\x00\x00\x00\xcd\x00\x00\x00m\x01\x00\x00\x93\x01\x00\x00\xd0\x01\x00\x00v\x00\x00\x00W\x01\x00\x00\xae\x00\x00\x00\x01\x02\x00\x00\xd7\x01\x00\x00A\x02\x00\x00\x9b\x00\x00\x00\xde\x00\x00\x00\xe5\x00\x00\x00\xb4\x01\x00\x00G\x02\x00\x00f\x01\x00\x00p\x01\x00\x00A\x01\x00\x00\x98\x00\x00\x00\x9b\x01\x00\x00\x84\x00\x00\x00\xf4\x00\x00\x00[\x01\x00\x00\x0e\x00\x00\x00\xd2\x00\x00\x00\xbf\x00\x00\x00<\x02\x00\x00L\x01\x00\x00\xc2\x00\x00\x00N\x01\x00\x00\x81\x01\x00\x00w\x01\x00\x00]\x00\x00\x00\xc0\x00\x00\x00\x08\x00\x00\x00p\x00\x00\x00\x80\x01\x00\x00&\x01\x00\x00e\x01\x00\x00\x11\x01\x00\x00o\x01\x00\x00!\x00\x00\x00S\x00\x00\x00\x1a\x01\x00\x00\x11\x00\x00\x00\xe8\x01\x00\x00\x06\x01\x00\x00\xfd\x00\x00\x00\x1c\x02\x00\x00\x00\x00\x00\x00n\x00\x00\x00\xc9\x01\x00\x00U\x00\x00\x00\x8b\x00\x00\x00\xfc\x00\x00\x00\x1b\x00\x00\x006\x02\x00\x00P\x00\x00\x00\\\x01\x00\x00\x99\x00\x00\x00\x95\x00\x00\x00\x81\x00\x00\x00\xb3\x01\x00\x00\x17\x01\x00\x00\x9e\x01\x00\x00\x18\x01\x00\x00\xe6\x01\x00\x00\xdc\x01\x00\x00U\x01\x00\x00D\x01\x00\x00\x85\x01\x00\x00N\x02\x00\x002\x02\x00\x00(\x02\x00\x00&\x02\x00\x00\xe2\x01\x00\x00\x04\x00\x00\x00\t\x01\x00\x00\xe3\x01\x00\x00\'\x02\x00\x00z\x00\x00\x00\xa3\x00\x00\x00\x0f\x01\x00\x00\x16\x02\x00\x00W\x02\x00\x00\xf8\x00\x00\x00G\x01\x00\x00\xef\x00\x00\x00\x02\x00\x00\x002\x00\x00\x00\xfa\x01\x00\x00\x1f\x01\x00\x00\xb5\x00\x00\x00K\x01\x00\x00\x1d\x02\x00\x00a\x00\x00\x00\x06\x00\x00\x00F\x02\x00\x00\x1f\x00\x00\x00\xdd\x01\x00\x00"\x02\x00\x00\x01\x01\x00\x00\x96\x00\x00\x00)\x00\x00\x00\xb1\x00\x00\x00b\x00\x00\x00O\x02\x00\x00>\x01\x00\x00\xed\x00\x00\x00\xca\x00\x00\x00I\x02\x00\x00\xf6\x01\x00\x00~\x00\x00\x00\xf0\x00\x00\x00\xa7\x00\x00\x00\xc7\x01\x00\x00V\x02\x00\x005\x01\x00\x00\xfb\x00\x00\x00j\x00\x00\x00h\x01\x00\x00\x04\x02\x00\x00\x17\x02\x00\x00\xf5\x01\x00\x00\xd6\x00\x00\x00\x05\x01\x00\x00#\x00\x00\x00{\x01\x00\x00\xee\x00\x00\x00D\x00\x00\x00\x8a\x00\x00\x00\xb6\x00\x00\x00\xa4\x00\x00\x00k\x00\x00\x00\xc5\x00\x00\x00\xe7\x00\x00\x00\xbb\x00\x00\x00@\x02\x00\x00o\x00\x00\x00\x1e\x02\x00\x00\xfd\x01\x00\x00\xe4\x01\x00\x00B\x02\x00\x00\xa8\x01\x00\x00\xdf\x00\x00\x00\xa3\x01\x00\x00C\x02\x00\x00 \x00\x00\x00\xaa\x00\x00\x00\xe9\x01\x00\x00\xd8\x00\x00\x00\x1d\x01\x00\x00\'\x00\x00\x00%\x00\x00\x006\x00\x00\x00\xa0\x00\x00\x00-\x02\x00\x00\x86\x00\x00\x00N\x00\x00\x00\xa2\x01\x00\x00\xad\x01\x00\x00\xdd\x00\x00\x00\xd9\x01\x00\x00A\x00\x00\x00\xc4\x01\x00\x00m\x00\x00\x00\xbd\x00\x00\x00W\x00\x00\x00\xcc\x00\x00\x00\xa9\x00\x00\x005\x02\x00\x009\x01\x00\x000\x02\x00\x00\x8c\x01\x00\x00g\x00\x00\x00x\x01\x00\x00Q\x01\x00\x00\n\x02\x00\x00:\x02\x00\x00\x15\x01\x00\x00u\x00\x00\x00\xa9\x01\x00\x00\x1e\x01\x00\x00\xec\x00\x00\x00*\x01\x00\x00y\x01\x00\x00Z\x00\x00\x00Y\x00\x00\x00H\x00\x00\x00\xfb\x01\x00\x00\xd4\x01\x00\x00>\x02\x00\x00y\x00\x00\x00S\x02\x00\x00\xab\x00\x00\x00\x19\x01\x00\x00E\x01\x00\x00\xeb\x01\x00\x00H\x02\x00\x00L\x02\x00\x00\x96\x01\x00\x00\xc2\x01\x00\x00R\x02\x00\x00U\x02\x00\x00\x02\x02\x00\x00\x94\x00\x00\x00\x83\x00\x00\x00\x1f\x02\x00\x009\x00\x00\x007\x00\x00\x00\xde\x01\x00\x00\x9d\x00\x00\x00\xaa\x01\x00\x00\x82\x01\x00\x00\x89\x01\x00\x00\xa5\x00\x00\x00j\x01\x00\x00&\x00\x00\x00\x0c\x02\x00\x00\xc8\x01\x00\x001\x02\x00\x00\xdf\x01\x00\x00\xf4\x01\x00\x00\xb4\x00\x00\x00M\x02\x00\x003\x00\x00\x00\xe0\x00\x00\x00I\x01\x00\x00\x9a\x00\x00\x00\x8d\x01\x00\x00\xd4\x00\x00\x00\t\x02\x00\x00\x92\x00\x00\x00[\x00\x00\x00\x87\x01\x00\x00\x18\x02\x00\x00\xd1\x01\x00\x00>\x00\x00\x00\xb6\x01\x00\x00\xf2\x01\x00\x00}\x00\x00\x00\xb7\x00\x00\x00\xb5\x01\x00\x00\x08\x01\x00\x00\xac\x00\x00\x00n\x01\x00\x00\xba\x01\x00\x00;\x02\x00\x00\x00\x01\x00\x00\x91\x01\x00\x00\x9c\x00\x00\x00T\x01\x00\x00\x92\x01\x00\x00\n\x01\x00\x00.\x00\x00\x00\xaf\x00\x00\x00\x7f\x01\x00\x00\xa1\x00\x00\x00q\x00\x00\x00\x19\x02\x00\x00+\x01\x00\x004\x02\x00\x00\xb0\x01\x00\x00\xbc\x01\x00\x00+\x02\x00\x00\x12\x01\x00\x00\x0e\x02\x00\x00$\x02\x00\x00'
tbsg75
I01
sg76
I1
sg77
I-1
sg78
(lp4859
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg80
Nsg81
cnumpy.core.multiarray
scalar
p4860
(g4858
S'$\x02\x00\x00'
tRp4861
sg82
I600
sg83
I0
sg84
I600
sg85
I01
sbag37
asS'savePickle'
p4862
I01
sb.