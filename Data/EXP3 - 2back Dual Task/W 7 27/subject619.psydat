ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject619
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 619
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Correct?'
p16
aS'Category'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VF
sS'age'
p31
V20
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I6
sS'_exp'
p41
I73201968
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I54
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I11
I55
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I11
I55
tg55
I00
S'\x00\x00\x00\x00\x00\x00\x80A\x00\x00\x14B\x00\x00\x86B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xdaB\x00\x00\xf0B\x00\x00\tC\x00\x00\x12C\x00\x00\x15C\x00\x00\x16C\x00\x00\x1dC\x00\x00#C\x00\x00;C\x00\x00=C\x00\x00ZC\x00\x00oC\x00\x80\x80C\x00\x00\x85C\x00\x80\x8bC\x00\x80\x8dC\x00\x00\x8eC\x00\x00\x93C\x00\x80\x95C\x00\x80\x9bC\x00\x80\xa1C\x00\x80\xa2C\x00\x00\xa5C\x00\x80\xa5C\x00\x00\xa6C\x00\x80\xa8C\x00\x80\xb3C\x00\x80\xbcC\x00\x80\xd1C\x00\x00\xd3C\x00\x00\xd6C\x00\x80\xd9C\x00\x80\xdeC\x00\x00\xe2C\x00\x80\xe7C\x00\x00\xebC\x00\x00\xeeC\x00\x80\xfbC\x00\x80\x00D\x00\x80\x03D\x00@\x05D\x00\x00\x07D\x00\x80\tD\x00@\nD\x00\x80\x0bD\x00\x00\x0eD\x00@\x0fD\x00\xc0\x11D\x00\x80\x13D\x00\x00\x80@\x00\x00PA\x00\x00\xb8A\x00\x00\xd0A\x00\x00\x10B\x00\x004B\x00\x00@B\x00\x00lB\x00\x00\x98B\x00\x00\xb4B\x00\x00\xbeB\x00\x00\xccB\x00\x00\xd6B\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x17C\x00\x00&C\x00\x00(C\x00\x00-C\x00\x006C\x00\x00>C\x00\x00EC\x00\x00MC\x00\x00_C\x00\x00qC\x00\x00\x83C\x00\x80\x83C\x00\x00\x87C\x00\x00\x8bC\x00\x00\x8dC\x00\x00\x91C\x00\x00\x92C\x00\x80\xaaC\x00\x00\xafC\x00\x80\xb8C\x00\x00\xbcC\x00\x80\xc1C\x00\x00\xc8C\x00\x80\xcfC\x00\x00\xd7C\x00\x80\xe1C\x00\x80\xe4C\x00\x80\xedC\x00\x80\xf0C\x00\x00\xf2C\x00\x00\xf3C\x00\x00\xf4C\x00\x00\xfcC\x00@\x02D\x00\xc0\x05D\x00\xc0\x08D\x00\xc0\x10D\x00\x00\x11D\x00\x80\x11D\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x10A\x00\x00\x88A\x00\x00\x98A\x00\x00\xe0A\x00\x00\x0cB\x00\x00TB\x00\x00\xa8B\x00\x00\xc2B\x00\x00\xe0B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xf6B\x00\x00\x0cC\x00\x00\rC\x00\x00\x14C\x00\x00\x1eC\x00\x00/C\x00\x000C\x00\x00fC\x00\x00gC\x00\x00lC\x00\x00|C\x00\x80\x84C\x00\x80\x8eC\x00\x80\x93C\x00\x00\x9dC\x00\x00\xa1C\x00\x00\xa3C\x00\x80\xa3C\x00\x80\xa6C\x00\x80\xa7C\x00\x00\xa8C\x00\x00\xabC\x00\x80\xaeC\x00\x80\xafC\x00\x80\xb0C\x00\x80\xb7C\x00\x80\xbeC\x00\x00\xc1C\x00\x80\xc4C\x00\x80\xcbC\x00\x80\xcdC\x00\x80\xdaC\x00\x00\xdcC\x00\x80\xe3C\x00\x80\xe9C\x00\x00\xeaC\x00\x80\xf1C\x00\x00\xf5C\x00\x80\xf8C\x00\x00\x00D\x00\x00\x04D\x00\xc0\x0fD\x00@\x15D\x00\x00\x00@\x00\x00<B\x00\x00\x84B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x94B\x00\x00\x9aB\x00\x00\xacB\x00\x00\xb0B\x00\x00\xc6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\x02C\x00\x00+C\x00\x008C\x00\x00IC\x00\x00OC\x00\x00QC\x00\x00RC\x00\x00`C\x00\x00aC\x00\x00\x84C\x00\x80\x87C\x00\x00\x8aC\x00\x00\x90C\x00\x00\xa4C\x00\x80\xb5C\x00\x00\xb6C\x00\x00\xb7C\x00\x80\xb9C\x00\x80\xbaC\x00\x80\xc0C\x00\x80\xc2C\x00\x80\xc7C\x00\x80\xd4C\x00\x80\xddC\x00\x80\xe8C\x00\x80\xecC\x00\x00\xefC\x00\x80\xf3C\x00\x00\xf6C\x00\x00\xf9C\x00\x00\xfaC\x00\x00\xfeC\x00\x80\x02D\x00\xc0\x04D\x00\x00\nD\x00\x80\nD\x00@\x0cD\x00\x80\x0cD\x00\xc0\x0eD\x00\x00\x12D\x00@\x12D\x00\xc0\x12D\x00@\x13D\x00\x00@@\x00\x00`A\x00\x00\xc0A\x00\x00\x04B\x00\x00 B\x00\x00$B\x00\x00LB\x00\x00pB\x00\x00\x92B\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa6B\x00\x00\xaeB\x00\x00\xcaB\x00\x00\xecB\x00\x00\x1cC\x00\x00*C\x00\x003C\x00\x00UC\x00\x00eC\x00\x00rC\x00\x00uC\x00\x00vC\x00\x00{C\x00\x00\x8cC\x00\x80\x91C\x00\x00\x9eC\x00\x00\x9fC\x00\x80\xa4C\x00\x00\xb5C\x00\x00\xb8C\x00\x00\xbbC\x00\x80\xbdC\x00\x80\xccC\x00\x00\xd0C\x00\x80\xd0C\x00\x00\xd2C\x00\x80\xd3C\x00\x00\xddC\x00\x00\xe3C\x00\x00\xe6C\x00\x80\xe6C\x00\x00\xedC\x00\x00\xf7C\x00\x80\xf7C\x00\x00\xfdC\x00\x80\xfdC\x00\xc0\x02D\x00\x80\x06D\x00\x80\x07D\x00\xc0\x0cD\x00\x00\x13D\x00\x00\x15D\x00\x80\x15D\x00\x00\x00A\x00\x00 A\x00\x00@A\x00\x00\x00B\x00\x008B\x00\x00tB\x00\x00xB\x00\x00\x80B\x00\x00\xdcB\x00\x00\x01C\x00\x00\nC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x18C\x00\x00\x1aC\x00\x00 C\x00\x00$C\x00\x00\'C\x00\x00AC\x00\x00BC\x00\x00DC\x00\x00GC\x00\x00KC\x00\x00dC\x00\x00~C\x00\x00\x7fC\x00\x80\x82C\x00\x00\x89C\x00\x80\x89C\x00\x00\x98C\x00\x00\x99C\x00\x00\x9bC\x00\x00\xacC\x00\x80\xb1C\x00\x00\xb2C\x00\x00\xb3C\x00\x00\xb4C\x00\x00\xb9C\x00\x00\xc0C\x00\x80\xc3C\x00\x80\xc6C\x00\x80\xdbC\x00\x80\xdfC\x00\x80\xebC\x00\x00\xf8C\x00\x80\xfcC\x00@\x03D\x00\xc0\x03D\x00\xc0\x06D\x00\x00\tD\x00\xc0\x0bD\x00\x00\rD\x00\x80\rD\x00\x80\x0fD\x00@\x14D\x00\x000A\x00\x00\x90A\x00\x00\xc8A\x00\x00\x18B\x00\x00PB\x00\x00`B\x00\x00hB\x00\x00\x82B\x00\x00\x90B\x00\x00\xd8B\x00\x00\xf2B\x00\x00\x03C\x00\x00\x05C\x00\x00\x06C\x00\x00\x0bC\x00\x00\x10C\x00\x00\x13C\x00\x00!C\x00\x00%C\x00\x002C\x00\x007C\x00\x00?C\x00\x00JC\x00\x00YC\x00\x00\\C\x00\x00cC\x00\x00hC\x00\x00xC\x00\x00\x81C\x00\x80\x85C\x00\x00\x8fC\x00\x80\x92C\x00\x00\x96C\x00\x80\x96C\x00\x80\x98C\x00\x80\xa0C\x00\x00\xaeC\x00\x80\xb4C\x00\x00\xcaC\x00\x00\xccC\x00\x00\xcdC\x00\x80\xd6C\x00\x00\xdfC\x00\x80\xe2C\x00\x00\xe4C\x00\x80\xeeC\x00@\x06D\x00@\x07D\x00@\rD\x00\xc0\rD\x00\x80\x0eD\x00\x80\x10D\x00\x00\x14D\x00\xc0\x15D\x00\x00\x00\x00\x00\x00(B\x00\x000B\x00\x00DB\x00\x00|B\x00\x00\x96B\x00\x00\xb6B\x00\x00\xc0B\x00\x00\xeaB\x00\x00\xf4B\x00\x00\x08C\x00\x00\x19C\x00\x00,C\x00\x001C\x00\x00@C\x00\x00FC\x00\x00SC\x00\x00VC\x00\x00[C\x00\x00pC\x00\x00tC\x00\x00wC\x00\x80\x8cC\x00\x80\x90C\x00\x00\x9cC\x00\x80\x9cC\x00\x80\x9fC\x00\x00\xa7C\x00\x80\xa9C\x00\x80\xabC\x00\x80\xadC\x00\x00\xbaC\x00\x00\xbeC\x00\x00\xbfC\x00\x00\xc6C\x00\x00\xc7C\x00\x00\xceC\x00\x80\xd2C\x00\x00\xd5C\x00\x00\xdbC\x00\x00\xe0C\x00\x80\xe0C\x00\x00\xe5C\x00\x80\xe5C\x00\x00\xe7C\x00\x80\xefC\x00\x00\xf1C\x00\x80\xf9C\x00\x00\xffC\x00\x80\xffC\x00\x00\x05D\x00\x80\x05D\x00\x00\x06D\x00\xc0\x07D\x00\xc0\nD\x00\x80\x12D\x00\x00\xa0A\x00\x00\xb0A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x08B\x00\x00\x8eB\x00\x00\xc4B\x00\x00\xceB\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\x1bC\x00\x00\x1fC\x00\x00"C\x00\x00)C\x00\x005C\x00\x00^C\x00\x00bC\x00\x00iC\x00\x00kC\x00\x00nC\x00\x00\x80C\x00\x80\x81C\x00\x00\x82C\x00\x80\x86C\x00\x80\x8fC\x00\x00\x95C\x00\x80\x99C\x00\x00\xb0C\x00\x00\xb1C\x00\x80\xb2C\x00\x00\xc5C\x00\x00\xc9C\x00\x00\xcbC\x00\x80\xceC\x00\x00\xd1C\x00\x80\xd7C\x00\x00\xdaC\x00\x00\xe9C\x00\x00\xecC\x00\x00\xf0C\x00\xc0\x00D\x00@\x01D\x00\x80\x01D\x00\x00\x03D\x00\x00\x08D\x00@\x08D\x00@\tD\x00\xc0\tD\x00\x00\x0bD\x00\x00\x0fD\x00@\x11D\x00\xc0\x14D\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\xe0@\x00\x00\xa8A\x00\x00\x1cB\x00\x00XB\x00\x00\\B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xaaB\x00\x00\xb8B\x00\x00\xd0B\x00\x00\x04C\x00\x00.C\x00\x004C\x00\x00:C\x00\x00CC\x00\x00NC\x00\x00TC\x00\x00WC\x00\x00XC\x00\x00]C\x00\x00jC\x00\x00sC\x00\x00yC\x00\x00\x88C\x00\x80\x8aC\x00\x00\x94C\x00\x00\x9aC\x00\x80\x9aC\x00\x80\x9eC\x00\x00\xa0C\x00\x80\xacC\x00\x00\xbdC\x00\x80\xbfC\x00\x00\xc2C\x00\x80\xc5C\x00\x80\xcaC\x00\x00\xcfC\x00\x00\xd4C\x00\x80\xd5C\x00\x00\xd8C\x00\x00\xd9C\x00\x00\xdeC\x00\x00\xe1C\x00\x80\xeaC\x00\x80\xf2C\x00\x80\xf4C\x00\x80\xf5C\x00\x80\xfeC\x00\xc0\x01D\x00\x00\x02D\x00\x80\x04D\x00@\x0bD\x00\x00\x10D\x00\x00\x00\x00\x00\x00\x80?\x00\x00pA\x00\x00\xd8A\x00\x00\xe8A\x00\x00,B\x00\x00HB\x00\x00dB\x00\x00\x88B\x00\x00\xb2B\x00\x00\xc8B\x00\x00\xdeB\x00\x00\xeeB\x00\x00\x00C\x00\x00\x07C\x00\x00\x11C\x00\x009C\x00\x00<C\x00\x00HC\x00\x00LC\x00\x00PC\x00\x00mC\x00\x00zC\x00\x00}C\x00\x00\x86C\x00\x80\x88C\x00\x80\x94C\x00\x00\x97C\x00\x80\x97C\x00\x80\x9dC\x00\x00\xa2C\x00\x00\xa9C\x00\x00\xaaC\x00\x00\xadC\x00\x80\xb6C\x00\x80\xbbC\x00\x00\xc3C\x00\x00\xc4C\x00\x80\xc8C\x00\x80\xc9C\x00\x80\xd8C\x00\x80\xdcC\x00\x00\xe8C\x00\x80\xf6C\x00\x80\xfaC\x00\x00\xfbC\x00@\x00D\x00\x00\x01D\x00@\x04D\x00\x80\x08D\x00\x00\x0cD\x00@\x0eD\x00@\x10D\x00\xc0\x13D\x00\x80\x14D\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I11
aI55
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I11
I55
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I0
aI6
aI8
aI4
aI7
aI9
aI3
aI3
aI3
aI3
aI5
aI6
aI9
aI5
aI5
aI6
aI2
aI0
aI7
aI3
aI6
aI2
aI4
aI10
aI3
aI5
aI6
aI10
aI9
aI7
aI0
aI1
aI8
aI3
aI4
aI3
aI7
aI2
aI8
aI6
aI2
aI1
aI7
aI3
aI1
aI4
aI4
aI8
aI2
aI5
aI0
aI3
aI8
aI0
aI10
aI10
aI5
aI1
aI8
aI1
aI6
aI0
aI4
aI10
aI10
aI10
aI7
aI6
aI6
aI8
aI1
aI7
aI10
aI5
aI3
aI9
aI6
aI9
aI5
aI2
aI3
aI8
aI8
aI9
aI9
aI0
aI2
aI2
aI3
aI10
aI2
aI5
aI6
aI0
aI1
aI10
aI0
aI0
aI4
aI9
aI5
aI4
aI8
aI10
aI0
aI8
aI3
aI0
aI3
aI8
aI3
aI1
aI4
aI2
aI5
aI10
aI10
aI4
aI1
aI4
aI2
aI2
aI6
aI10
aI4
aI5
aI6
aI0
aI10
aI7
aI8
aI8
aI7
aI5
aI0
aI9
aI3
aI0
aI5
aI6
aI0
aI7
aI8
aI10
aI1
aI1
aI7
aI4
aI4
aI8
aI4
aI6
aI10
aI1
aI1
aI2
aI3
aI9
aI9
aI6
aI3
aI4
aI5
aI3
aI4
aI4
aI4
aI6
aI1
aI3
aI6
aI3
aI4
aI7
aI1
aI8
aI3
aI10
aI0
aI0
aI1
aI4
aI1
aI3
aI9
aI1
aI9
aI4
aI8
aI6
aI1
aI7
aI6
aI0
aI2
aI2
aI5
aI5
aI3
aI0
aI9
aI3
aI6
aI7
aI9
aI3
aI4
aI3
aI0
aI3
aI3
aI9
aI9
aI3
aI4
aI0
aI5
aI2
aI7
aI2
aI1
aI10
aI1
aI0
aI1
aI1
aI3
aI9
aI9
aI8
aI8
aI3
aI7
aI6
aI2
aI8
aI9
aI6
aI6
aI4
aI3
aI8
aI4
aI0
aI10
aI0
aI1
aI6
aI7
aI0
aI7
aI9
aI5
aI2
aI9
aI3
aI1
aI2
aI0
aI10
aI9
aI2
aI8
aI6
aI1
aI7
aI7
aI1
aI7
aI7
aI3
aI6
aI9
aI3
aI4
aI2
aI0
aI10
aI6
aI7
aI4
aI8
aI9
aI0
aI9
aI2
aI1
aI0
aI2
aI8
aI4
aI8
aI7
aI5
aI7
aI3
aI2
aI7
aI6
aI8
aI4
aI4
aI10
aI7
aI10
aI2
aI10
aI8
aI4
aI4
aI10
aI10
aI7
aI4
aI9
aI0
aI6
aI2
aI3
aI9
aI3
aI7
aI3
aI0
aI8
aI7
aI5
aI10
aI4
aI6
aI9
aI2
aI2
aI9
aI10
aI5
aI6
aI4
aI0
aI8
aI2
aI1
aI5
aI0
aI5
aI3
aI1
aI5
aI10
aI9
aI8
aI10
aI6
aI8
aI1
aI7
aI1
aI10
aI2
aI0
aI2
aI7
aI5
aI1
aI7
aI5
aI8
aI8
aI9
aI0
aI6
aI1
aI2
aI7
aI2
aI10
aI2
aI4
aI7
aI8
aI8
aI6
aI6
aI3
aI8
aI9
aI6
aI10
aI4
aI4
aI5
aI4
aI2
aI1
aI8
aI7
aI10
aI6
aI0
aI6
aI7
aI6
aI5
aI1
aI9
aI6
aI8
aI9
aI8
aI3
aI1
aI6
aI5
aI10
aI2
aI0
aI6
aI0
aI5
aI2
aI10
aI10
aI9
aI3
aI8
aI5
aI7
aI9
aI8
aI9
aI10
aI10
aI8
aI1
aI10
aI9
aI0
aI1
aI0
aI9
aI5
aI2
aI8
aI4
aI6
aI7
aI3
aI9
aI7
aI1
aI4
aI5
aI2
aI1
aI8
aI1
aI3
aI9
aI9
aI6
aI5
aI0
aI10
aI5
aI9
aI0
aI0
aI6
aI4
aI2
aI10
aI2
aI5
aI3
aI7
aI2
aI6
aI1
aI7
aI2
aI7
aI7
aI0
aI1
aI3
aI0
aI0
aI5
aI7
aI1
aI0
aI10
aI1
aI10
aI1
aI2
aI8
aI8
aI7
aI2
aI5
aI7
aI3
aI2
aI6
aI10
aI3
aI2
aI5
aI0
aI9
aI10
aI5
aI3
aI0
aI4
aI7
aI4
aI1
aI10
aI0
aI2
aI5
aI9
aI3
aI7
aI1
aI6
aI7
aI9
aI8
aI9
aI4
aI9
aI7
aI7
aI4
aI5
aI7
aI10
aI1
aI8
aI0
aI6
aI5
aI5
aI6
aI8
aI6
aI6
aI5
aI9
aI5
aI10
aI9
aI6
aI1
aI4
aI8
aI0
aI0
aI6
aI5
aI7
aI5
aI2
aI9
aI1
aI10
aI7
aI2
aI1
aI2
aI1
aI5
aI2
aI9
aI8
aI4
aI4
aI10
aI2
aI4
aI3
aI5
aI9
aI8
aI4
aI0
aI5
aI9
aI4
aI8
aI2
aI4
aI5
aI10
aI5
aI4
aI8
aI10
aI3
aI1
aI5
aI10
atbsS'finished'
p74
I00
sS'nReps'
p75
I55
sS'nRemaining'
p76
I5
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p79
NsS'thisIndex'
p80
I6
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I5
sS'nTotal'
p83
I605
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
S'.thisTrial'
p94
I0
sS'.thisN'
p95
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p96
I0
sS'.thisRepN'
p97
I0
sS'.thisIndex'
p98
I0
sg15
Nsg16
S'Timed out'
p99
sg14
I1
sa(dp100
g17
(lp101
S'd'
asg94
I10
sS'.thisRepN'
p102
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p103
I1
sS'.thisN'
p104
I1
sS'.thisIndex'
p105
I10
sg15
(lp106
S'k'
asg16
S'N'
sg14
I1
sa(dp107
g17
(lp108
S'd'
asg18
S'Y'
sS'.thisRepN'
p109
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p110
I2
sS'.thisN'
p111
I2
sS'.thisIndex'
p112
I3
sg15
(lp113
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I3
sa(dp114
g17
(lp115
S'd'
asg18
S'Y'
sS'.thisRepN'
p116
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p117
I3
sS'.thisN'
p118
I3
sS'.thisIndex'
p119
I4
sg15
(lp120
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I4
sa(dp121
g17
(lp122
S'k'
asg18
S'Y'
sS'.thisRepN'
p123
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p124
I4
sS'.thisN'
p125
I4
sS'.thisIndex'
p126
I1
sg15
(lp127
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I1
sa(dp128
g17
(lp129
S'd'
asg18
S'Y'
sS'.thisRepN'
p130
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p131
I5
sS'.thisN'
p132
I5
sS'.thisIndex'
p133
I2
sg15
(lp134
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
(lp135
S'space'
p136
asg94
I2
sa(dp137
g17
(lp138
S'k'
asg18
S'N'
sS'.thisRepN'
p139
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p140
I6
sS'.thisN'
p141
I6
sS'.thisIndex'
p142
I9
sg15
(lp143
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I9
sa(dp144
g17
(lp145
S'd'
asg18
S'N'
sS'.thisRepN'
p146
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p147
I7
sS'.thisN'
p148
I7
sS'.thisIndex'
p149
I9
sg15
(lp150
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I9
sa(dp151
g17
(lp152
S'd'
asg18
S'Y'
sS'.thisRepN'
p153
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p154
I8
sS'.thisN'
p155
I8
sS'.thisIndex'
p156
I5
sg15
(lp157
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
(lp158
S'space'
p159
asg94
I5
sa(dp160
g17
(lp161
S'k'
asg18
S'N'
sS'.thisRepN'
p162
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p163
I9
sS'.thisN'
p164
I9
sS'.thisIndex'
p165
I2
sg15
(lp166
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I2
sa(dp167
g17
(lp168
S'k'
asg18
S'Y'
sS'.thisRepN'
p169
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p170
I10
sS'.thisN'
p171
I10
sS'.thisIndex'
p172
I5
sg15
(lp173
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
(lp174
S'space'
p175
asg94
I5
sa(dp176
g17
(lp177
S'k'
asg18
S'N'
sS'.thisRepN'
p178
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p179
I0
sS'.thisN'
p180
I11
sS'.thisIndex'
p181
I6
sg15
(lp182
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I6
sa(dp183
g17
(lp184
S'k'
asg18
S'N'
sS'.thisRepN'
p185
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p186
I1
sS'.thisN'
p187
I12
sS'.thisIndex'
p188
I5
sg15
(lp189
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I5
sa(dp190
g17
(lp191
S'd'
asg18
S'N'
sS'.thisRepN'
p192
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p193
I2
sS'.thisN'
p194
I13
sS'.thisIndex'
p195
I1
sg15
(lp196
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I1
sa(dp197
g17
(lp198
S'd'
asg18
S'N'
sS'.thisRepN'
p199
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p200
I3
sS'.thisN'
p201
I14
sS'.thisIndex'
p202
I4
sg15
(lp203
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I4
sa(dp204
g17
(lp205
S'd'
asg18
S'Y'
sS'.thisRepN'
p206
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p207
I4
sS'.thisN'
p208
I15
sS'.thisIndex'
p209
I10
sg15
(lp210
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I10
sa(dp211
g17
(lp212
S'k'
asg18
S'N'
sS'.thisRepN'
p213
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p214
I5
sS'.thisN'
p215
I16
sS'.thisIndex'
p216
I0
sg15
(lp217
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I0
sa(dp218
g17
(lp219
S'd'
asg18
S'N'
sS'.thisRepN'
p220
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p221
I6
sS'.thisN'
p222
I17
sS'.thisIndex'
p223
I2
sg15
(lp224
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I2
sa(dp225
g17
(lp226
S'd'
asg18
S'N'
sS'.thisRepN'
p227
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p228
I7
sS'.thisN'
p229
I18
sS'.thisIndex'
p230
I6
sg15
(lp231
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I6
sa(dp232
g17
(lp233
S'k'
asg18
S'Y'
sS'.thisRepN'
p234
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p235
I8
sS'.thisN'
p236
I19
sS'.thisIndex'
p237
I2
sg15
(lp238
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I2
sa(dp239
g17
(lp240
S'k'
asg18
S'N'
sS'.thisRepN'
p241
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p242
I9
sS'.thisN'
p243
I20
sS'.thisIndex'
p244
I8
sg15
(lp245
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I8
sa(dp246
g17
(lp247
S'k'
asg18
S'N'
sS'.thisRepN'
p248
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p249
I10
sS'.thisN'
p250
I21
sS'.thisIndex'
p251
I9
sg15
(lp252
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I9
sa(dp253
g17
(lp254
S'k'
asg18
S'Y'
sS'.thisRepN'
p255
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p256
I0
sS'.thisN'
p257
I22
sS'.thisIndex'
p258
I8
sg15
(lp259
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
(lp260
S'd'
asg94
I8
sa(dp261
g17
(lp262
S'k'
asg18
S'N'
sS'.thisRepN'
p263
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p264
I1
sS'.thisN'
p265
I23
sS'.thisIndex'
p266
I1
sg15
(lp267
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I1
sa(dp268
g17
(lp269
S'd'
asg18
S'N'
sS'.thisRepN'
p270
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p271
I2
sS'.thisN'
p272
I24
sS'.thisIndex'
p273
I4
sg15
(lp274
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I4
sa(dp275
g17
(lp276
S'k'
asg18
S'Y'
sS'.thisRepN'
p277
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p278
I3
sS'.thisN'
p279
I25
sS'.thisIndex'
p280
I6
sg15
(lp281
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
(lp282
S'space'
p283
asg94
I6
sa(dp284
g17
(lp285
S'd'
asg18
S'Y'
sS'.thisRepN'
p286
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p287
I4
sS'.thisN'
p288
I26
sS'.thisIndex'
p289
I1
sg15
(lp290
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I1
sa(dp291
g17
(lp292
S'd'
asg18
S'N'
sS'.thisRepN'
p293
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p294
I5
sS'.thisN'
p295
I27
sS'.thisIndex'
p296
I10
sg15
(lp297
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I10
sa(dp298
g17
(lp299
S'k'
asg18
S'N'
sS'.thisRepN'
p300
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p301
I6
sS'.thisN'
p302
I28
sS'.thisIndex'
p303
I2
sg15
(lp304
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I2
sa(dp305
g17
(lp306
S'k'
asg18
S'N'
sS'.thisRepN'
p307
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p308
I7
sS'.thisN'
p309
I29
sS'.thisIndex'
p310
I10
sg15
(lp311
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
(lp312
S'space'
p313
asg94
I10
sa(dp314
g17
(lp315
S'd'
asg18
S'N'
sS'.thisRepN'
p316
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p317
I8
sS'.thisN'
p318
I30
sS'.thisIndex'
p319
I8
sg15
(lp320
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I8
sa(dp321
g17
(lp322
S'k'
asg18
S'Y'
sS'.thisRepN'
p323
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p324
I9
sS'.thisN'
p325
I31
sS'.thisIndex'
p326
I8
sg15
(lp327
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I8
sa(dp328
g17
(lp329
S'd'
asg18
S'N'
sS'.thisRepN'
p330
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p331
I10
sS'.thisN'
p332
I32
sS'.thisIndex'
p333
I5
sg15
(lp334
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I5
sa(dp335
g17
(lp336
S'd'
asg18
S'N'
sS'.thisRepN'
p337
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p338
I0
sS'.thisN'
p339
I33
sS'.thisIndex'
p340
I4
sg15
(lp341
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I4
sa(dp342
g17
(lp343
S'k'
asg18
S'N'
sS'.thisRepN'
p344
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p345
I1
sS'.thisN'
p346
I34
sS'.thisIndex'
p347
I8
sg15
(lp348
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
(lp349
S'space'
p350
asg94
I8
sa(dp351
g17
(lp352
S'd'
asg18
S'N'
sS'.thisRepN'
p353
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p354
I2
sS'.thisN'
p355
I35
sS'.thisIndex'
p356
I2
sg15
(lp357
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I2
sa(dp358
g17
(lp359
S'k'
asg18
S'N'
sS'.thisRepN'
p360
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p361
I3
sS'.thisN'
p362
I36
sS'.thisIndex'
p363
I1
sg15
(lp364
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I1
sa(dp365
g17
(lp366
S'd'
asg18
S'N'
sS'.thisRepN'
p367
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p368
I4
sS'.thisN'
p369
I37
sS'.thisIndex'
p370
I0
sg15
(lp371
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I0
sa(dp372
g17
(lp373
S'd'
asg18
S'N'
sS'.thisRepN'
p374
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p375
I5
sS'.thisN'
p376
I38
sS'.thisIndex'
p377
I6
sg15
(lp378
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I6
sa(dp379
g17
(lp380
S'd'
asg18
S'Y'
sS'.thisRepN'
p381
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p382
I6
sS'.thisN'
p383
I39
sS'.thisIndex'
p384
I9
sg15
(lp385
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
(lp386
S'space'
p387
asg94
I9
sa(dp388
g17
(lp389
S'k'
asg18
S'Y'
sS'.thisRepN'
p390
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p391
I7
sS'.thisN'
p392
I40
sS'.thisIndex'
p393
I4
sg15
(lp394
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
(lp395
S'space'
p396
asg94
I4
sa(dp397
g17
(lp398
S'd'
asg18
S'Y'
sS'.thisRepN'
p399
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p400
I8
sS'.thisN'
p401
I41
sS'.thisIndex'
p402
I4
sg15
(lp403
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
(lp404
S'space'
p405
asg94
I4
sa(dp406
g17
(lp407
S'k'
asg18
S'Y'
sS'.thisRepN'
p408
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p409
I9
sS'.thisN'
p410
I42
sS'.thisIndex'
p411
I7
sg15
(lp412
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
(lp413
S'space'
p414
asg94
I7
sa(dp415
g17
(lp416
S'd'
asg18
S'N'
sS'.thisRepN'
p417
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p418
I10
sS'.thisN'
p419
I43
sS'.thisIndex'
p420
I10
sg15
(lp421
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I10
sa(dp422
g17
(lp423
S'k'
asg18
S'Y'
sS'.thisRepN'
p424
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p425
I0
sS'.thisN'
p426
I44
sS'.thisIndex'
p427
I7
sg15
(lp428
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
(lp429
S'space'
p430
asg94
I7
sa(dp431
g17
(lp432
S'k'
asg18
S'Y'
sS'.thisRepN'
p433
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p434
I1
sS'.thisN'
p435
I45
sS'.thisIndex'
p436
I1
sg15
(lp437
S'd'
asg30
VF
sg16
S'N'
sg14
I1
sg19
Nsg94
I1
sa(dp438
g17
(lp439
S'k'
asg18
S'N'
sS'.thisRepN'
p440
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p441
I2
sS'.thisN'
p442
I46
sS'.thisIndex'
p443
I5
sg15
(lp444
S'k'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I5
sa(dp445
g17
(lp446
S'd'
asg18
S'N'
sS'.thisRepN'
p447
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p448
I3
sS'.thisN'
p449
I47
sS'.thisIndex'
p450
I3
sg15
(lp451
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I3
sa(dp452
g17
(lp453
S'd'
asg18
S'Y'
sS'.thisRepN'
p454
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p455
I4
sS'.thisN'
p456
I48
sS'.thisIndex'
p457
I1
sg15
(lp458
S'k'
asg30
VF
sg16
S'N'
sg14
I1
sg19
(lp459
S'b'
asg94
I1
sa(dp460
g17
(lp461
S'd'
asg18
S'Y'
sg22
I35
sS'.thisN'
p462
I49
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p463
I5
sS'.thisRepN'
p464
I4
sg21
I21
sS'.thisIndex'
p465
I7
sg23
I20
sg15
(lp466
S'd'
asg30
VF
sg16
S'Y'
sg14
I1
sg19
Nsg94
I7
sa(dp467
g17
(lp468
S'd'
asg94
I10
sS'.thisRepN'
p469
I4
sg30
VF
sg31
g32
sS'.thisTrialN'
p470
I6
sS'.thisN'
p471
I50
sS'.thisIndex'
p472
I10
sg15
(lp473
S'k'
asg16
S'N'
sg14
I2
sa(dp474
g17
(lp475
S'd'
asg94
I4
sS'.thisRepN'
p476
I4
sg30
VF
sg31
g32
sS'.thisTrialN'
p477
I7
sS'.thisN'
p478
I51
sS'.thisIndex'
p479
I4
sg15
(lp480
S'd'
asg16
S'Y'
sg14
I2
sa(dp481
g17
(lp482
S'k'
asg18
S'Y'
sS'.thisRepN'
p483
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p484
I8
sS'.thisN'
p485
I52
sS'.thisIndex'
p486
I6
sg15
(lp487
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg19
(lp488
S'space'
p489
asg94
I6
sa(dp490
g17
(lp491
S'd'
asg18
S'Y'
sS'.thisRepN'
p492
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p493
I9
sS'.thisN'
p494
I53
sS'.thisIndex'
p495
I2
sg15
(lp496
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp497
S'space'
p498
asg94
I2
sa(dp499
g17
(lp500
S'k'
asg18
S'N'
sS'.thisRepN'
p501
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p502
I10
sS'.thisN'
p503
I54
sS'.thisIndex'
p504
I9
sg15
(lp505
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I9
sa(dp506
g17
(lp507
S'k'
asg18
S'N'
sS'.thisRepN'
p508
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p509
I0
sS'.thisN'
p510
I55
sS'.thisIndex'
p511
I9
sg15
(lp512
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg19
(lp513
S'space'
p514
asg94
I9
sa(dp515
g17
(lp516
S'k'
asg18
S'N'
sS'.thisRepN'
p517
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p518
I1
sS'.thisN'
p519
I56
sS'.thisIndex'
p520
I6
sg15
(lp521
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I6
sa(dp522
g17
(lp523
S'k'
asg18
S'N'
sS'.thisRepN'
p524
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p525
I2
sS'.thisN'
p526
I57
sS'.thisIndex'
p527
I10
sg15
(lp528
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp529
S'space'
p530
asg94
I10
sa(dp531
g17
(lp532
S'k'
asg18
S'N'
sS'.thisRepN'
p533
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p534
I3
sS'.thisN'
p535
I58
sS'.thisIndex'
p536
I6
sg15
(lp537
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I6
sa(dp538
g17
(lp539
S'd'
asg18
S'Y'
sS'.thisRepN'
p540
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p541
I4
sS'.thisN'
p542
I59
sS'.thisIndex'
p543
I1
sg15
(lp544
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I1
sa(dp545
g17
(lp546
S'd'
asg18
S'N'
sS'.thisRepN'
p547
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p548
I5
sS'.thisN'
p549
I60
sS'.thisIndex'
p550
I4
sg15
(lp551
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I4
sa(dp552
g17
(lp553
S'd'
asg18
S'N'
sS'.thisRepN'
p554
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p555
I6
sS'.thisN'
p556
I61
sS'.thisIndex'
p557
I5
sg15
(lp558
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I5
sa(dp559
g17
(lp560
S'k'
asg18
S'Y'
sS'.thisRepN'
p561
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p562
I7
sS'.thisN'
p563
I62
sS'.thisIndex'
p564
I5
sg15
(lp565
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp566
S'space'
p567
asg94
I5
sa(dp568
g17
(lp569
S'k'
asg18
S'N'
sS'.thisRepN'
p570
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p571
I8
sS'.thisN'
p572
I63
sS'.thisIndex'
p573
I7
sg15
(lp574
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I7
sa(dp575
g17
(lp576
S'd'
asg18
S'N'
sS'.thisRepN'
p577
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p578
I9
sS'.thisN'
p579
I64
sS'.thisIndex'
p580
I5
sg15
(lp581
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I5
sa(dp582
g17
(lp583
S'd'
asg18
S'N'
sS'.thisRepN'
p584
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p585
I10
sS'.thisN'
p586
I65
sS'.thisIndex'
p587
I6
sg15
(lp588
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I6
sa(dp589
g17
(lp590
S'd'
asg18
S'N'
sS'.thisRepN'
p591
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p592
I0
sS'.thisN'
p593
I66
sS'.thisIndex'
p594
I3
sg15
(lp595
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I3
sa(dp596
g17
(lp597
S'k'
asg18
S'Y'
sS'.thisRepN'
p598
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p599
I1
sS'.thisN'
p600
I67
sS'.thisIndex'
p601
I0
sg15
(lp602
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp603
S'space'
p604
asg94
I0
sa(dp605
g17
(lp606
S'd'
asg18
S'Y'
sS'.thisRepN'
p607
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p608
I2
sS'.thisN'
p609
I68
sS'.thisIndex'
p610
I10
sg15
(lp611
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I10
sa(dp612
g17
(lp613
S'k'
asg18
S'Y'
sS'.thisRepN'
p614
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p615
I3
sS'.thisN'
p616
I69
sS'.thisIndex'
p617
I3
sg15
(lp618
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg19
(lp619
S'space'
p620
asg94
I3
sa(dp621
g17
(lp622
S'k'
asg18
S'Y'
sS'.thisRepN'
p623
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p624
I4
sS'.thisN'
p625
I70
sS'.thisIndex'
p626
I3
sg15
(lp627
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg19
(lp628
S'space'
p629
asg94
I3
sa(dp630
g17
(lp631
S'd'
asg18
S'N'
sS'.thisRepN'
p632
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p633
I5
sS'.thisN'
p634
I71
sS'.thisIndex'
p635
I8
sg15
(lp636
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I8
sa(dp637
g17
(lp638
S'k'
asg18
S'Y'
sS'.thisRepN'
p639
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p640
I6
sS'.thisN'
p641
I72
sS'.thisIndex'
p642
I6
sg15
(lp643
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I6
sa(dp644
g17
(lp645
S'k'
asg18
S'N'
sS'.thisRepN'
p646
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p647
I7
sS'.thisN'
p648
I73
sS'.thisIndex'
p649
I4
sg15
(lp650
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp651
S'k'
asg94
I4
sa(dp652
g17
(lp653
S'd'
asg18
S'Y'
sS'.thisRepN'
p654
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p655
I8
sS'.thisN'
p656
I74
sS'.thisIndex'
p657
I3
sg15
(lp658
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I3
sa(dp659
g17
(lp660
S'k'
asg18
S'N'
sS'.thisRepN'
p661
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p662
I9
sS'.thisN'
p663
I75
sS'.thisIndex'
p664
I7
sg15
(lp665
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I7
sa(dp666
g17
(lp667
S'k'
asg18
S'Y'
sS'.thisRepN'
p668
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p669
I10
sS'.thisN'
p670
I76
sS'.thisIndex'
p671
I1
sg15
(lp672
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp673
S'k'
asg94
I1
sa(dp674
g17
(lp675
S'k'
asg18
S'N'
sS'.thisRepN'
p676
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p677
I0
sS'.thisN'
p678
I77
sS'.thisIndex'
p679
I3
sg15
(lp680
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I3
sa(dp681
g17
(lp682
S'd'
asg18
S'Y'
sS'.thisRepN'
p683
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p684
I1
sS'.thisN'
p685
I78
sS'.thisIndex'
p686
I4
sg15
(lp687
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp688
S'space'
p689
asg94
I4
sa(dp690
g17
(lp691
S'k'
asg18
S'Y'
sS'.thisRepN'
p692
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p693
I2
sS'.thisN'
p694
I79
sS'.thisIndex'
p695
I4
sg15
(lp696
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp697
S'space'
p698
asg94
I4
sa(dp699
g17
(lp700
S'k'
asg18
S'N'
sS'.thisRepN'
p701
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p702
I3
sS'.thisN'
p703
I80
sS'.thisIndex'
p704
I4
sg15
(lp705
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I4
sa(dp706
g17
(lp707
S'd'
asg18
S'N'
sS'.thisRepN'
p708
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p709
I4
sS'.thisN'
p710
I81
sS'.thisIndex'
p711
I9
sg15
(lp712
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I9
sa(dp713
g17
(lp714
S'k'
asg18
S'Y'
sS'.thisRepN'
p715
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p716
I5
sS'.thisN'
p717
I82
sS'.thisIndex'
p718
I9
sg15
(lp719
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp720
S'space'
p721
asg94
I9
sa(dp722
g17
(lp723
S'k'
asg18
S'N'
sS'.thisRepN'
p724
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p725
I6
sS'.thisN'
p726
I83
sS'.thisIndex'
p727
I4
sg15
(lp728
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I4
sa(dp729
g17
(lp730
S'd'
asg18
S'N'
sS'.thisRepN'
p731
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p732
I7
sS'.thisN'
p733
I84
sS'.thisIndex'
p734
I2
sg15
(lp735
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I2
sa(dp736
g17
(lp737
S'd'
asg18
S'Y'
sS'.thisRepN'
p738
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p739
I8
sS'.thisN'
p740
I85
sS'.thisIndex'
p741
I9
sg15
(lp742
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp743
S'space'
p744
asg94
I9
sa(dp745
g17
(lp746
S'k'
asg18
S'N'
sS'.thisRepN'
p747
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p748
I9
sS'.thisN'
p749
I86
sS'.thisIndex'
p750
I3
sg15
(lp751
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I3
sa(dp752
g17
(lp753
S'k'
asg18
S'N'
sS'.thisRepN'
p754
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p755
I10
sS'.thisN'
p756
I87
sS'.thisIndex'
p757
I4
sg15
(lp758
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I4
sa(dp759
g17
(lp760
S'd'
asg18
S'Y'
sS'.thisRepN'
p761
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p762
I0
sS'.thisN'
p763
I88
sS'.thisIndex'
p764
I3
sg15
(lp765
S'd'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp766
S'space'
p767
asg94
I3
sa(dp768
g17
(lp769
S'd'
asg18
S'N'
sS'.thisRepN'
p770
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p771
I1
sS'.thisN'
p772
I89
sS'.thisIndex'
p773
I10
sg15
(lp774
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I10
sa(dp775
g17
(lp776
S'k'
asg18
S'N'
sS'.thisRepN'
p777
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p778
I2
sS'.thisN'
p779
I90
sS'.thisIndex'
p780
I1
sg15
(lp781
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I1
sa(dp782
g17
(lp783
S'k'
asg18
S'Y'
sS'.thisRepN'
p784
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p785
I3
sS'.thisN'
p786
I91
sS'.thisIndex'
p787
I7
sg15
(lp788
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg19
(lp789
S'space'
p790
asg94
I7
sa(dp791
g17
(lp792
S'd'
asg18
S'Y'
sS'.thisRepN'
p793
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p794
I4
sS'.thisN'
p795
I92
sS'.thisIndex'
p796
I9
sg15
(lp797
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg19
(lp798
S'space'
p799
asg94
I9
sa(dp800
g17
(lp801
S'k'
asg18
S'N'
sS'.thisRepN'
p802
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p803
I5
sS'.thisN'
p804
I93
sS'.thisIndex'
p805
I0
sg15
(lp806
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
Nsg94
I0
sa(dp807
g17
(lp808
S'd'
asg18
S'Y'
sS'.thisRepN'
p809
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p810
I6
sS'.thisN'
p811
I94
sS'.thisIndex'
p812
I0
sg15
(lp813
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg19
(lp814
S'space'
p815
asg94
I0
sa(dp816
g17
(lp817
S'k'
asg18
S'N'
sS'.thisRepN'
p818
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p819
I7
sS'.thisN'
p820
I95
sS'.thisIndex'
p821
I1
sg15
(lp822
S'd'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I1
sa(dp823
g17
(lp824
S'd'
asg18
S'Y'
sS'.thisRepN'
p825
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p826
I8
sS'.thisN'
p827
I96
sS'.thisIndex'
p828
I7
sg15
(lp829
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg19
(lp830
S'space'
p831
asg94
I7
sa(dp832
g17
(lp833
S'k'
asg18
S'Y'
sS'.thisRepN'
p834
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p835
I9
sS'.thisN'
p836
I97
sS'.thisIndex'
p837
I2
sg15
(lp838
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp839
S'space'
p840
asg94
I2
sa(dp841
g17
(lp842
S'k'
asg18
S'Y'
sS'.thisRepN'
p843
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p844
I10
sS'.thisN'
p845
I98
sS'.thisIndex'
p846
I8
sg15
(lp847
S'k'
asg30
VF
sg16
S'Y'
sg14
I2
sg19
(lp848
S'space'
p849
asg94
I8
sa(dp850
g17
(lp851
S'd'
asg18
S'N'
sg22
I40
sS'.thisN'
p852
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p853
I0
sS'.thisRepN'
p854
I9
sg21
I29
sS'.thisIndex'
p855
I3
sg23
I22
sg15
(lp856
S'k'
asg30
VF
sg16
S'N'
sg14
I2
sg19
Nsg94
I3
sa(dp857
g17
(lp858
S'k'
asg94
I10
sS'.thisRepN'
p859
I9
sg30
VF
sg31
g32
sS'.thisTrialN'
p860
I1
sS'.thisN'
p861
I100
sS'.thisIndex'
p862
I10
sg15
(lp863
S'd'
asg16
S'N'
sg14
I3
sa(dp864
g17
(lp865
S'd'
asg94
I4
sS'.thisRepN'
p866
I9
sg30
VF
sg31
g32
sS'.thisTrialN'
p867
I2
sS'.thisN'
p868
I101
sS'.thisIndex'
p869
I4
sg15
(lp870
S'k'
asg16
S'N'
sg14
I3
sa(dp871
g17
(lp872
S'd'
asg18
S'Y'
sS'.thisRepN'
p873
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p874
I3
sS'.thisN'
p875
I102
sS'.thisIndex'
p876
I1
sg15
(lp877
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
(lp878
S'space'
p879
asg94
I1
sa(dp880
g17
(lp881
S'd'
asg18
S'Y'
sS'.thisRepN'
p882
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p883
I4
sS'.thisN'
p884
I103
sS'.thisIndex'
p885
I8
sg15
(lp886
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
(lp887
S'k'
asg94
I8
sa(dp888
g17
(lp889
S'k'
asg18
S'N'
sS'.thisRepN'
p890
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p891
I5
sS'.thisN'
p892
I104
sS'.thisIndex'
p893
I9
sg15
(lp894
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
Nsg94
I9
sa(dp895
g17
(lp896
S'k'
asg18
S'N'
sS'.thisRepN'
p897
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p898
I6
sS'.thisN'
p899
I105
sS'.thisIndex'
p900
I8
sg15
(lp901
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
Nsg94
I8
sa(dp902
g17
(lp903
S'd'
asg18
S'Y'
sS'.thisRepN'
p904
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p905
I7
sS'.thisN'
p906
I106
sS'.thisIndex'
p907
I8
sg15
(lp908
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp909
S'space'
p910
asg94
I8
sa(dp911
g17
(lp912
S'k'
asg18
S'N'
sS'.thisRepN'
p913
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p914
I8
sS'.thisN'
p915
I107
sS'.thisIndex'
p916
I1
sg15
(lp917
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
Nsg94
I1
sa(dp918
g17
(lp919
S'd'
asg18
S'Y'
sS'.thisRepN'
p920
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p921
I9
sS'.thisN'
p922
I108
sS'.thisIndex'
p923
I6
sg15
(lp924
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I6
sa(dp925
g17
(lp926
S'k'
asg18
S'Y'
sS'.thisRepN'
p927
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p928
I10
sS'.thisN'
p929
I109
sS'.thisIndex'
p930
I0
sg15
(lp931
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
(lp932
S'space'
p933
asg94
I0
sa(dp934
g17
(lp935
S'd'
asg18
S'Y'
sS'.thisRepN'
p936
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p937
I0
sS'.thisN'
p938
I110
sS'.thisIndex'
p939
I5
sg15
(lp940
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp941
S'space'
p942
asg94
I5
sa(dp943
g17
(lp944
S'd'
asg18
S'Y'
sS'.thisRepN'
p945
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p946
I1
sS'.thisN'
p947
I111
sS'.thisIndex'
p948
I10
sg15
(lp949
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp950
S'space'
p951
asg94
I10
sa(dp952
g17
(lp953
S'd'
asg18
S'N'
sS'.thisRepN'
p954
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p955
I2
sS'.thisN'
p956
I112
sS'.thisIndex'
p957
I2
sg15
(lp958
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I2
sa(dp959
g17
(lp960
S'k'
asg18
S'Y'
sS'.thisRepN'
p961
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p962
I3
sS'.thisN'
p963
I113
sS'.thisIndex'
p964
I8
sg15
(lp965
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp966
S'space'
p967
asg94
I8
sa(dp968
g17
(lp969
S'd'
asg18
S'N'
sS'.thisRepN'
p970
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p971
I4
sS'.thisN'
p972
I114
sS'.thisIndex'
p973
I8
sg15
(lp974
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I8
sa(dp975
g17
(lp976
S'd'
asg18
S'Y'
sS'.thisRepN'
p977
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p978
I5
sS'.thisN'
p979
I115
sS'.thisIndex'
p980
I2
sg15
(lp981
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp982
S'space'
p983
asg94
I2
sa(dp984
g17
(lp985
S'k'
asg18
S'N'
sS'.thisRepN'
p986
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p987
I6
sS'.thisN'
p988
I116
sS'.thisIndex'
p989
I2
sg15
(lp990
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I2
sa(dp991
g17
(lp992
S'k'
asg18
S'Y'
sS'.thisRepN'
p993
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p994
I7
sS'.thisN'
p995
I117
sS'.thisIndex'
p996
I7
sg15
(lp997
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp998
S'space'
p999
asg94
I7
sa(dp1000
g17
(lp1001
S'k'
asg18
S'Y'
sS'.thisRepN'
p1002
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1003
I8
sS'.thisN'
p1004
I118
sS'.thisIndex'
p1005
I4
sg15
(lp1006
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
(lp1007
S'space'
p1008
asg94
I4
sa(dp1009
g17
(lp1010
S'k'
asg18
S'Y'
sS'.thisRepN'
p1011
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1012
I9
sS'.thisN'
p1013
I119
sS'.thisIndex'
p1014
I10
sg15
(lp1015
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp1016
S'space'
p1017
asg94
I10
sa(dp1018
g17
(lp1019
S'k'
asg18
S'N'
sS'.thisRepN'
p1020
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1021
I10
sS'.thisN'
p1022
I120
sS'.thisIndex'
p1023
I0
sg15
(lp1024
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I0
sa(dp1025
g17
(lp1026
S'k'
asg18
S'Y'
sS'.thisRepN'
p1027
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1028
I0
sS'.thisN'
p1029
I121
sS'.thisIndex'
p1030
I6
sg15
(lp1031
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
(lp1032
S'space'
p1033
asg94
I6
sa(dp1034
g17
(lp1035
S'k'
asg18
S'N'
sS'.thisRepN'
p1036
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1037
I1
sS'.thisN'
p1038
I122
sS'.thisIndex'
p1039
I7
sg15
(lp1040
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I7
sa(dp1041
g17
(lp1042
S'k'
asg18
S'N'
sS'.thisRepN'
p1043
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1044
I2
sS'.thisN'
p1045
I123
sS'.thisIndex'
p1046
I2
sg15
(lp1047
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I2
sa(dp1048
g17
(lp1049
S'd'
asg18
S'N'
sS'.thisRepN'
p1050
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1051
I3
sS'.thisN'
p1052
I124
sS'.thisIndex'
p1053
I3
sg15
(lp1054
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg19
Nsg94
I3
sa(dp1055
g17
(lp1056
S'd'
asg18
S'Y'
sS'.thisRepN'
p1057
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1058
I4
sS'.thisN'
p1059
I125
sS'.thisIndex'
p1060
I3
sg15
(lp1061
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
(lp1062
S'space'
p1063
asg94
I3
sa(dp1064
g17
(lp1065
S'k'
asg18
S'N'
sS'.thisRepN'
p1066
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1067
I5
sS'.thisN'
p1068
I126
sS'.thisIndex'
p1069
I1
sg15
(lp1070
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I1
sa(dp1071
g17
(lp1072
S'k'
asg18
S'Y'
sS'.thisRepN'
p1073
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1074
I6
sS'.thisN'
p1075
I127
sS'.thisIndex'
p1076
I1
sg15
(lp1077
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
(lp1078
S'space'
p1079
asg94
I1
sa(dp1080
g17
(lp1081
S'd'
asg18
S'Y'
sS'.thisRepN'
p1082
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1083
I7
sS'.thisN'
p1084
I128
sS'.thisIndex'
p1085
I10
sg15
(lp1086
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
(lp1087
S'space'
p1088
asg94
I10
sa(dp1089
g17
(lp1090
S'd'
asg18
S'N'
sS'.thisRepN'
p1091
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1092
I8
sS'.thisN'
p1093
I129
sS'.thisIndex'
p1094
I5
sg15
(lp1095
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg19
Nsg94
I5
sa(dp1096
g17
(lp1097
S'd'
asg18
S'Y'
sS'.thisRepN'
p1098
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1099
I9
sS'.thisN'
p1100
I130
sS'.thisIndex'
p1101
I3
sg15
(lp1102
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp1103
S'space'
p1104
asg94
I3
sa(dp1105
g17
(lp1106
S'k'
asg18
S'Y'
sS'.thisRepN'
p1107
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1108
I10
sS'.thisN'
p1109
I131
sS'.thisIndex'
p1110
I6
sg15
(lp1111
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp1112
S'space'
p1113
asg94
I6
sa(dp1114
g17
(lp1115
S'k'
asg18
S'N'
sS'.thisRepN'
p1116
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1117
I0
sS'.thisN'
p1118
I132
sS'.thisIndex'
p1119
I9
sg15
(lp1120
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I9
sa(dp1121
g17
(lp1122
S'k'
asg18
S'N'
sS'.thisRepN'
p1123
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1124
I1
sS'.thisN'
p1125
I133
sS'.thisIndex'
p1126
I6
sg15
(lp1127
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I6
sa(dp1128
g17
(lp1129
S'k'
asg18
S'Y'
sS'.thisRepN'
p1130
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1131
I2
sS'.thisN'
p1132
I134
sS'.thisIndex'
p1133
I6
sg15
(lp1134
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp1135
S'space'
p1136
asg94
I6
sa(dp1137
g17
(lp1138
S'd'
asg18
S'Y'
sS'.thisRepN'
p1139
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1140
I3
sS'.thisN'
p1141
I135
sS'.thisIndex'
p1142
I10
sg15
(lp1143
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp1144
S'space'
p1145
asg94
I10
sa(dp1146
g17
(lp1147
S'd'
asg18
S'N'
sS'.thisRepN'
p1148
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1149
I4
sS'.thisN'
p1150
I136
sS'.thisIndex'
p1151
I7
sg15
(lp1152
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg19
Nsg94
I7
sa(dp1153
g17
(lp1154
S'k'
asg18
S'Y'
sS'.thisRepN'
p1155
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1156
I5
sS'.thisN'
p1157
I137
sS'.thisIndex'
p1158
I0
sg15
(lp1159
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp1160
S'space'
p1161
asg94
I0
sa(dp1162
g17
(lp1163
S'd'
asg18
S'N'
sS'.thisRepN'
p1164
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1165
I6
sS'.thisN'
p1166
I138
sS'.thisIndex'
p1167
I5
sg15
(lp1168
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg19
Nsg94
I5
sa(dp1169
g17
(lp1170
S'd'
asg18
S'N'
sS'.thisRepN'
p1171
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1172
I7
sS'.thisN'
p1173
I139
sS'.thisIndex'
p1174
I6
sg15
(lp1175
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I6
sa(dp1176
g17
(lp1177
S'd'
asg18
S'Y'
sS'.thisRepN'
p1178
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1179
I8
sS'.thisN'
p1180
I140
sS'.thisIndex'
p1181
I2
sg15
(lp1182
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
(lp1183
S'space'
p1184
asg94
I2
sa(dp1185
g17
(lp1186
S'k'
asg18
S'N'
sS'.thisRepN'
p1187
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1188
I9
sS'.thisN'
p1189
I141
sS'.thisIndex'
p1190
I2
sg15
(lp1191
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I2
sa(dp1192
g17
(lp1193
S'd'
asg18
S'N'
sS'.thisRepN'
p1194
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1195
I10
sS'.thisN'
p1196
I142
sS'.thisIndex'
p1197
I5
sg15
(lp1198
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I5
sa(dp1199
g17
(lp1200
S'k'
asg18
S'N'
sS'.thisRepN'
p1201
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1202
I0
sS'.thisN'
p1203
I143
sS'.thisIndex'
p1204
I5
sg15
(lp1205
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
Nsg94
I5
sa(dp1206
g17
(lp1207
S'd'
asg18
S'Y'
sS'.thisRepN'
p1208
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1209
I1
sS'.thisN'
p1210
I144
sS'.thisIndex'
p1211
I6
sg15
(lp1212
S'k'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp1213
S'space'
p1214
asg94
I6
sa(dp1215
g17
(lp1216
S'd'
asg18
S'Y'
sS'.thisRepN'
p1217
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1218
I2
sS'.thisN'
p1219
I145
sS'.thisIndex'
p1220
I10
sg15
(lp1221
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
(lp1222
S'space'
p1223
asg94
I10
sa(dp1224
g17
(lp1225
S'k'
asg18
S'N'
sS'.thisRepN'
p1226
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1227
I3
sS'.thisN'
p1228
I146
sS'.thisIndex'
p1229
I0
sg15
(lp1230
S'k'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
Nsg94
I0
sa(dp1231
g17
(lp1232
S'k'
asg18
S'N'
sS'.thisRepN'
p1233
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1234
I4
sS'.thisN'
p1235
I147
sS'.thisIndex'
p1236
I6
sg15
(lp1237
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
Nsg94
I6
sa(dp1238
g17
(lp1239
S'k'
asg18
S'Y'
sS'.thisRepN'
p1240
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1241
I5
sS'.thisN'
p1242
I148
sS'.thisIndex'
p1243
I2
sg15
(lp1244
S'd'
asg30
VF
sg16
S'N'
sg14
I3
sg19
(lp1245
S'space'
p1246
asg94
I2
sa(dp1247
g17
(lp1248
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p1249
I149
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1250
I6
sS'.thisRepN'
p1251
I13
sg21
I25
sS'.thisIndex'
p1252
I0
sg23
I25
sg15
(lp1253
S'd'
asg30
VF
sg16
S'Y'
sg14
I3
sg19
(lp1254
S'space'
p1255
asg94
I0
sa(dp1256
g17
(lp1257
S'k'
asg94
I0
sS'.thisRepN'
p1258
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1259
I7
sS'.thisN'
p1260
I150
sS'.thisIndex'
p1261
I0
sg15
(lp1262
S'k'
asg16
S'Y'
sg14
I4
sa(dp1263
g17
(lp1264
S'd'
asg94
I1
sS'.thisRepN'
p1265
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1266
I8
sS'.thisN'
p1267
I151
sS'.thisIndex'
p1268
I1
sg15
(lp1269
S'd'
asg16
S'Y'
sg14
I4
sa(dp1270
g17
(lp1271
S'd'
asg18
S'Y'
sS'.thisRepN'
p1272
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1273
I9
sS'.thisN'
p1274
I152
sS'.thisIndex'
p1275
I5
sg15
(lp1276
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1277
S'space'
p1278
asg94
I5
sa(dp1279
g17
(lp1280
S'k'
asg18
S'Y'
sS'.thisRepN'
p1281
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1282
I10
sS'.thisN'
p1283
I153
sS'.thisIndex'
p1284
I7
sg15
(lp1285
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I7
sa(dp1286
g17
(lp1287
S'k'
asg18
S'N'
sS'.thisRepN'
p1288
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1289
I0
sS'.thisN'
p1290
I154
sS'.thisIndex'
p1291
I5
sg15
(lp1292
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
Nsg94
I5
sa(dp1293
g17
(lp1294
S'd'
asg18
S'Y'
sS'.thisRepN'
p1295
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1296
I1
sS'.thisN'
p1297
I155
sS'.thisIndex'
p1298
I8
sg15
(lp1299
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
(lp1300
S'space'
p1301
asg94
I8
sa(dp1302
g17
(lp1303
S'd'
asg18
S'N'
sS'.thisRepN'
p1304
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1305
I2
sS'.thisN'
p1306
I156
sS'.thisIndex'
p1307
I4
sg15
(lp1308
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I4
sa(dp1309
g17
(lp1310
S'k'
asg18
S'Y'
sS'.thisRepN'
p1311
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1312
I3
sS'.thisN'
p1313
I157
sS'.thisIndex'
p1314
I0
sg15
(lp1315
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1316
S'space'
p1317
asg94
I0
sa(dp1318
g17
(lp1319
S'k'
asg18
S'Y'
sS'.thisRepN'
p1320
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1321
I4
sS'.thisN'
p1322
I158
sS'.thisIndex'
p1323
I2
sg15
(lp1324
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
(lp1325
S'space'
p1326
asg94
I2
sa(dp1327
g17
(lp1328
S'k'
asg18
S'N'
sS'.thisRepN'
p1329
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1330
I5
sS'.thisN'
p1331
I159
sS'.thisIndex'
p1332
I8
sg15
(lp1333
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I8
sa(dp1334
g17
(lp1335
S'k'
asg18
S'N'
sS'.thisRepN'
p1336
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1337
I6
sS'.thisN'
p1338
I160
sS'.thisIndex'
p1339
I5
sg15
(lp1340
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
Nsg94
I5
sa(dp1341
g17
(lp1342
S'd'
asg18
S'Y'
sS'.thisRepN'
p1343
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1344
I7
sS'.thisN'
p1345
I161
sS'.thisIndex'
p1346
I6
sg15
(lp1347
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1348
S'space'
p1349
asg94
I6
sa(dp1350
g17
(lp1351
S'k'
asg18
S'Y'
sS'.thisRepN'
p1352
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1353
I8
sS'.thisN'
p1354
I162
sS'.thisIndex'
p1355
I8
sg15
(lp1356
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1357
S'space'
p1358
asg94
I8
sa(dp1359
g17
(lp1360
S'd'
asg18
S'Y'
sS'.thisRepN'
p1361
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1362
I9
sS'.thisN'
p1363
I163
sS'.thisIndex'
p1364
I0
sg15
(lp1365
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1366
S'space'
p1367
asg94
I0
sa(dp1368
g17
(lp1369
S'k'
asg18
S'Y'
sS'.thisRepN'
p1370
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1371
I10
sS'.thisN'
p1372
I164
sS'.thisIndex'
p1373
I5
sg15
(lp1374
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1375
S'space'
p1376
asg94
I5
sa(dp1377
g17
(lp1378
S'k'
asg18
S'Y'
sS'.thisRepN'
p1379
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1380
I0
sS'.thisN'
p1381
I165
sS'.thisIndex'
p1382
I6
sg15
(lp1383
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1384
S'space'
p1385
asg94
I6
sa(dp1386
g17
(lp1387
S'k'
asg18
S'N'
sS'.thisRepN'
p1388
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1389
I1
sS'.thisN'
p1390
I166
sS'.thisIndex'
p1391
I1
sg15
(lp1392
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
Nsg94
I1
sa(dp1393
g17
(lp1394
S'd'
asg18
S'N'
sS'.thisRepN'
p1395
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1396
I2
sS'.thisN'
p1397
I167
sS'.thisIndex'
p1398
I5
sg15
(lp1399
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
Nsg94
I5
sa(dp1400
g17
(lp1401
S'd'
asg18
S'Y'
sS'.thisRepN'
p1402
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1403
I3
sS'.thisN'
p1404
I168
sS'.thisIndex'
p1405
I1
sg15
(lp1406
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1407
S'space'
p1408
asg94
I1
sa(dp1409
g17
(lp1410
S'k'
asg18
S'Y'
sS'.thisRepN'
p1411
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1412
I4
sS'.thisN'
p1413
I169
sS'.thisIndex'
p1414
I8
sg15
(lp1415
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1416
S'space'
p1417
asg94
I8
sa(dp1418
g17
(lp1419
S'd'
asg18
S'Y'
sS'.thisRepN'
p1420
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1421
I5
sS'.thisN'
p1422
I170
sS'.thisIndex'
p1423
I4
sg15
(lp1424
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I4
sa(dp1425
g17
(lp1426
S'k'
asg18
S'Y'
sS'.thisRepN'
p1427
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1428
I6
sS'.thisN'
p1429
I171
sS'.thisIndex'
p1430
I3
sg15
(lp1431
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I3
sa(dp1432
g17
(lp1433
S'd'
asg18
S'Y'
sS'.thisRepN'
p1434
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1435
I7
sS'.thisN'
p1436
I172
sS'.thisIndex'
p1437
I7
sg15
(lp1438
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1439
S'space'
p1440
asg94
I7
sa(dp1441
g17
(lp1442
S'k'
asg18
S'N'
sS'.thisRepN'
p1443
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1444
I8
sS'.thisN'
p1445
I173
sS'.thisIndex'
p1446
I1
sg15
(lp1447
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I1
sa(dp1448
g17
(lp1449
S'k'
asg18
S'Y'
sS'.thisRepN'
p1450
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1451
I9
sS'.thisN'
p1452
I174
sS'.thisIndex'
p1453
I9
sg15
(lp1454
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I9
sa(dp1455
g17
(lp1456
S'd'
asg18
S'Y'
sS'.thisRepN'
p1457
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1458
I10
sS'.thisN'
p1459
I175
sS'.thisIndex'
p1460
I2
sg15
(lp1461
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
(lp1462
S'space'
p1463
asg94
I2
sa(dp1464
g17
(lp1465
S'k'
asg18
S'Y'
sS'.thisRepN'
p1466
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1467
I0
sS'.thisN'
p1468
I176
sS'.thisIndex'
p1469
I2
sg15
(lp1470
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I2
sa(dp1471
g17
(lp1472
S'd'
asg18
S'Y'
sS'.thisRepN'
p1473
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1474
I1
sS'.thisN'
p1475
I177
sS'.thisIndex'
p1476
I7
sg15
(lp1477
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1478
S'space'
p1479
asg94
I7
sa(dp1480
g17
(lp1481
S'k'
asg18
S'N'
sS'.thisRepN'
p1482
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1483
I2
sS'.thisN'
p1484
I178
sS'.thisIndex'
p1485
I6
sg15
(lp1486
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I6
sa(dp1487
g17
(lp1488
S'd'
asg18
S'Y'
sS'.thisRepN'
p1489
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1490
I3
sS'.thisN'
p1491
I179
sS'.thisIndex'
p1492
I4
sg15
(lp1493
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
(lp1494
S'space'
p1495
asg94
I4
sa(dp1496
g17
(lp1497
S'd'
asg18
S'Y'
sS'.thisRepN'
p1498
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1499
I4
sS'.thisN'
p1500
I180
sS'.thisIndex'
p1501
I9
sg15
(lp1502
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I9
sa(dp1503
g17
(lp1504
S'd'
asg18
S'N'
sS'.thisRepN'
p1505
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1506
I5
sS'.thisN'
p1507
I181
sS'.thisIndex'
p1508
I8
sg15
(lp1509
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
Nsg94
I8
sa(dp1510
g17
(lp1511
S'k'
asg18
S'N'
sS'.thisRepN'
p1512
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1513
I6
sS'.thisN'
p1514
I182
sS'.thisIndex'
p1515
I1
sg15
(lp1516
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I1
sa(dp1517
g17
(lp1518
S'k'
asg18
S'Y'
sS'.thisRepN'
p1519
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1520
I7
sS'.thisN'
p1521
I183
sS'.thisIndex'
p1522
I6
sg15
(lp1523
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
(lp1524
S'space'
p1525
asg94
I6
sa(dp1526
g17
(lp1527
S'd'
asg18
S'N'
sS'.thisRepN'
p1528
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1529
I8
sS'.thisN'
p1530
I184
sS'.thisIndex'
p1531
I3
sg15
(lp1532
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
Nsg94
I3
sa(dp1533
g17
(lp1534
S'k'
asg18
S'N'
sS'.thisRepN'
p1535
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1536
I9
sS'.thisN'
p1537
I185
sS'.thisIndex'
p1538
I10
sg15
(lp1539
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
Nsg94
I10
sa(dp1540
g17
(lp1541
S'd'
asg18
S'N'
sS'.thisRepN'
p1542
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1543
I10
sS'.thisN'
p1544
I186
sS'.thisIndex'
p1545
I9
sg15
(lp1546
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
Nsg94
I9
sa(dp1547
g17
(lp1548
S'k'
asg18
S'Y'
sS'.thisRepN'
p1549
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1550
I0
sS'.thisN'
p1551
I187
sS'.thisIndex'
p1552
I0
sg15
(lp1553
S'k'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
(lp1554
S'space'
p1555
asg94
I0
sa(dp1556
g17
(lp1557
S'k'
asg18
S'Y'
sS'.thisRepN'
p1558
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1559
I1
sS'.thisN'
p1560
I188
sS'.thisIndex'
p1561
I10
sg15
(lp1562
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1563
S'space'
p1564
asg94
I10
sa(dp1565
g17
(lp1566
S'k'
asg18
S'Y'
sS'.thisRepN'
p1567
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1568
I2
sS'.thisN'
p1569
I189
sS'.thisIndex'
p1570
I0
sg15
(lp1571
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
(lp1572
S'space'
p1573
asg94
I0
sa(dp1574
g17
(lp1575
S'd'
asg18
S'N'
sS'.thisRepN'
p1576
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1577
I3
sS'.thisN'
p1578
I190
sS'.thisIndex'
p1579
I1
sg15
(lp1580
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I1
sa(dp1581
g17
(lp1582
S'k'
asg18
S'N'
sS'.thisRepN'
p1583
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1584
I4
sS'.thisN'
p1585
I191
sS'.thisIndex'
p1586
I6
sg15
(lp1587
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I6
sa(dp1588
g17
(lp1589
S'k'
asg18
S'N'
sS'.thisRepN'
p1590
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1591
I5
sS'.thisN'
p1592
I192
sS'.thisIndex'
p1593
I7
sg15
(lp1594
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I7
sa(dp1595
g17
(lp1596
S'd'
asg18
S'N'
sS'.thisRepN'
p1597
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1598
I6
sS'.thisN'
p1599
I193
sS'.thisIndex'
p1600
I5
sg15
(lp1601
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I5
sa(dp1602
g17
(lp1603
S'd'
asg18
S'N'
sS'.thisRepN'
p1604
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1605
I7
sS'.thisN'
p1606
I194
sS'.thisIndex'
p1607
I5
sg15
(lp1608
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
Nsg94
I5
sa(dp1609
g17
(lp1610
S'd'
asg18
S'N'
sS'.thisRepN'
p1611
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1612
I8
sS'.thisN'
p1613
I195
sS'.thisIndex'
p1614
I9
sg15
(lp1615
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I9
sa(dp1616
g17
(lp1617
S'd'
asg18
S'N'
sS'.thisRepN'
p1618
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1619
I9
sS'.thisN'
p1620
I196
sS'.thisIndex'
p1621
I5
sg15
(lp1622
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
Nsg94
I5
sa(dp1623
g17
(lp1624
S'd'
asg18
S'N'
sS'.thisRepN'
p1625
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1626
I10
sS'.thisN'
p1627
I197
sS'.thisIndex'
p1628
I1
sg15
(lp1629
S'd'
asg30
VF
sg16
S'Y'
sg14
I4
sg19
Nsg94
I1
sa(dp1630
g17
(lp1631
S'k'
asg18
S'N'
sS'.thisRepN'
p1632
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1633
I0
sS'.thisN'
p1634
I198
sS'.thisIndex'
p1635
I7
sg15
(lp1636
S'd'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I7
sa(dp1637
g17
(lp1638
S'd'
asg18
S'N'
sg22
I42
sS'.thisN'
p1639
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1640
I1
sS'.thisRepN'
p1641
I18
sg21
I19
sS'.thisIndex'
p1642
I5
sg23
I25
sg15
(lp1643
S'k'
asg30
VF
sg16
S'N'
sg14
I4
sg19
Nsg94
I5
sa(dp1644
g17
(lp1645
S'k'
asg94
I10
sS'.thisRepN'
p1646
I18
sg30
VF
sg31
g32
sS'.thisTrialN'
p1647
I2
sS'.thisN'
p1648
I200
sS'.thisIndex'
p1649
I10
sg15
(lp1650
S'k'
asg16
S'Y'
sg14
I5
sa(dp1651
g17
(lp1652
S'd'
asg94
I3
sS'.thisRepN'
p1653
I18
sg30
VF
sg31
g32
sS'.thisTrialN'
p1654
I3
sS'.thisN'
p1655
I201
sS'.thisIndex'
p1656
I3
sg15
(lp1657
S'd'
asg16
S'Y'
sg14
I5
sa(dp1658
g17
(lp1659
S'k'
asg18
S'Y'
sS'.thisRepN'
p1660
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1661
I4
sS'.thisN'
p1662
I202
sS'.thisIndex'
p1663
I6
sg15
(lp1664
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg19
(lp1665
S'space'
p1666
asg94
I6
sa(dp1667
g17
(lp1668
S'd'
asg18
S'Y'
sS'.thisRepN'
p1669
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1670
I5
sS'.thisN'
p1671
I203
sS'.thisIndex'
p1672
I5
sg15
(lp1673
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1674
S'space'
p1675
asg94
I5
sa(dp1676
g17
(lp1677
S'k'
asg18
S'Y'
sS'.thisRepN'
p1678
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1679
I6
sS'.thisN'
p1680
I204
sS'.thisIndex'
p1681
I10
sg15
(lp1682
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1683
S'space'
p1684
asg94
I10
sa(dp1685
g17
(lp1686
S'k'
asg18
S'Y'
sS'.thisRepN'
p1687
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1688
I7
sS'.thisN'
p1689
I205
sS'.thisIndex'
p1690
I1
sg15
(lp1691
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1692
S'space'
p1693
asg94
I1
sa(dp1694
g17
(lp1695
S'k'
asg18
S'N'
sS'.thisRepN'
p1696
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1697
I8
sS'.thisN'
p1698
I206
sS'.thisIndex'
p1699
I9
sg15
(lp1700
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg19
Nsg94
I9
sa(dp1701
g17
(lp1702
S'd'
asg18
S'Y'
sS'.thisRepN'
p1703
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1704
I9
sS'.thisN'
p1705
I207
sS'.thisIndex'
p1706
I3
sg15
(lp1707
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg19
(lp1708
S'space'
p1709
asg94
I3
sa(dp1710
g17
(lp1711
S'k'
asg18
S'Y'
sS'.thisRepN'
p1712
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1713
I10
sS'.thisN'
p1714
I208
sS'.thisIndex'
p1715
I10
sg15
(lp1716
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg19
(lp1717
S'space'
p1718
asg94
I10
sa(dp1719
g17
(lp1720
S'k'
asg18
S'Y'
sS'.thisRepN'
p1721
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1722
I0
sS'.thisN'
p1723
I209
sS'.thisIndex'
p1724
I3
sg15
(lp1725
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg19
Nsg94
I3
sa(dp1726
g17
(lp1727
S'd'
asg18
S'N'
sS'.thisRepN'
p1728
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1729
I1
sS'.thisN'
p1730
I210
sS'.thisIndex'
p1731
I3
sg15
(lp1732
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg19
(lp1733
S'space'
p1734
asg94
I3
sa(dp1735
g17
(lp1736
S'd'
asg18
S'N'
sS'.thisRepN'
p1737
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1738
I2
sS'.thisN'
p1739
I211
sS'.thisIndex'
p1740
I7
sg15
(lp1741
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg19
Nsg94
I7
sa(dp1742
g17
(lp1743
S'k'
asg18
S'N'
sS'.thisRepN'
p1744
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1745
I3
sS'.thisN'
p1746
I212
sS'.thisIndex'
p1747
I9
sg15
(lp1748
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg19
Nsg94
I9
sa(dp1749
g17
(lp1750
S'k'
asg18
S'Y'
sS'.thisRepN'
p1751
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1752
I4
sS'.thisN'
p1753
I213
sS'.thisIndex'
p1754
I4
sg15
(lp1755
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1756
S'space'
p1757
asg94
I4
sa(dp1758
g17
(lp1759
S'd'
asg18
S'Y'
sS'.thisRepN'
p1760
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1761
I5
sS'.thisN'
p1762
I214
sS'.thisIndex'
p1763
I7
sg15
(lp1764
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg19
(lp1765
S'space'
p1766
asg94
I7
sa(dp1767
g17
(lp1768
S'k'
asg18
S'N'
sS'.thisRepN'
p1769
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1770
I6
sS'.thisN'
p1771
I215
sS'.thisIndex'
p1772
I9
sg15
(lp1773
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1774
S'space'
p1775
asg94
I9
sa(dp1776
g17
(lp1777
S'k'
asg18
S'Y'
sS'.thisRepN'
p1778
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1779
I7
sS'.thisN'
p1780
I216
sS'.thisIndex'
p1781
I9
sg15
(lp1782
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1783
S'space'
p1784
asg94
I9
sa(dp1785
g17
(lp1786
S'd'
asg18
S'Y'
sS'.thisRepN'
p1787
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1788
I8
sS'.thisN'
p1789
I217
sS'.thisIndex'
p1790
I6
sg15
(lp1791
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1792
S'space'
p1793
asg94
I6
sa(dp1794
g17
(lp1795
S'k'
asg18
S'Y'
sS'.thisRepN'
p1796
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1797
I9
sS'.thisN'
p1798
I218
sS'.thisIndex'
p1799
I0
sg15
(lp1800
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1801
S'space'
p1802
asg94
I0
sa(dp1803
g17
(lp1804
S'k'
asg18
S'N'
sS'.thisRepN'
p1805
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1806
I10
sS'.thisN'
p1807
I219
sS'.thisIndex'
p1808
I7
sg15
(lp1809
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I7
sa(dp1810
g17
(lp1811
S'd'
asg18
S'N'
sS'.thisRepN'
p1812
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1813
I0
sS'.thisN'
p1814
I220
sS'.thisIndex'
p1815
I6
sg15
(lp1816
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I6
sa(dp1817
g17
(lp1818
S'd'
asg18
S'N'
sS'.thisRepN'
p1819
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1820
I1
sS'.thisN'
p1821
I221
sS'.thisIndex'
p1822
I9
sg15
(lp1823
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg19
Nsg94
I9
sa(dp1824
g17
(lp1825
S'd'
asg18
S'Y'
sS'.thisRepN'
p1826
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1827
I2
sS'.thisN'
p1828
I222
sS'.thisIndex'
p1829
I8
sg15
(lp1830
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg19
(lp1831
S'space'
p1832
asg94
I8
sa(dp1833
g17
(lp1834
S'd'
asg18
S'N'
sS'.thisRepN'
p1835
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1836
I3
sS'.thisN'
p1837
I223
sS'.thisIndex'
p1838
I1
sg15
(lp1839
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I1
sa(dp1840
g17
(lp1841
S'k'
asg18
S'Y'
sS'.thisRepN'
p1842
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1843
I4
sS'.thisN'
p1844
I224
sS'.thisIndex'
p1845
I3
sg15
(lp1846
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1847
S'space'
p1848
asg94
I3
sa(dp1849
g17
(lp1850
S'k'
asg18
S'N'
sS'.thisRepN'
p1851
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1852
I5
sS'.thisN'
p1853
I225
sS'.thisIndex'
p1854
I3
sg15
(lp1855
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I3
sa(dp1856
g17
(lp1857
S'k'
asg18
S'Y'
sS'.thisRepN'
p1858
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1859
I6
sS'.thisN'
p1860
I226
sS'.thisIndex'
p1861
I8
sg15
(lp1862
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1863
S'space'
p1864
asg94
I8
sa(dp1865
g17
(lp1866
S'd'
asg18
S'N'
sS'.thisRepN'
p1867
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1868
I7
sS'.thisN'
p1869
I227
sS'.thisIndex'
p1870
I6
sg15
(lp1871
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1872
S'space'
p1873
asg94
I6
sa(dp1874
g17
(lp1875
S'k'
asg18
S'N'
sS'.thisRepN'
p1876
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1877
I8
sS'.thisN'
p1878
I228
sS'.thisIndex'
p1879
I5
sg15
(lp1880
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I5
sa(dp1881
g17
(lp1882
S'd'
asg18
S'Y'
sS'.thisRepN'
p1883
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1884
I9
sS'.thisN'
p1885
I229
sS'.thisIndex'
p1886
I4
sg15
(lp1887
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1888
S'space'
p1889
asg94
I4
sa(dp1890
g17
(lp1891
S'k'
asg18
S'Y'
sS'.thisRepN'
p1892
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1893
I10
sS'.thisN'
p1894
I230
sS'.thisIndex'
p1895
I2
sg15
(lp1896
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1897
S'space'
p1898
asg94
I2
sa(dp1899
g17
(lp1900
S'k'
asg18
S'Y'
sS'.thisRepN'
p1901
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1902
I0
sS'.thisN'
p1903
I231
sS'.thisIndex'
p1904
I2
sg15
(lp1905
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg19
(lp1906
S'space'
p1907
asg94
I2
sa(dp1908
g17
(lp1909
S'd'
asg18
S'Y'
sS'.thisRepN'
p1910
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1911
I1
sS'.thisN'
p1912
I232
sS'.thisIndex'
p1913
I6
sg15
(lp1914
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1915
S'space'
p1916
asg94
I6
sa(dp1917
g17
(lp1918
S'd'
asg18
S'Y'
sS'.thisRepN'
p1919
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1920
I2
sS'.thisN'
p1921
I233
sS'.thisIndex'
p1922
I8
sg15
(lp1923
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1924
S'space'
p1925
asg94
I8
sa(dp1926
g17
(lp1927
S'd'
asg18
S'Y'
sS'.thisRepN'
p1928
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1929
I3
sS'.thisN'
p1930
I234
sS'.thisIndex'
p1931
I9
sg15
(lp1932
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1933
S'space'
p1934
asg94
I9
sa(dp1935
g17
(lp1936
S'd'
asg18
S'N'
sS'.thisRepN'
p1937
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1938
I4
sS'.thisN'
p1939
I235
sS'.thisIndex'
p1940
I8
sg15
(lp1941
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I8
sa(dp1942
g17
(lp1943
S'k'
asg18
S'N'
sS'.thisRepN'
p1944
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1945
I5
sS'.thisN'
p1946
I236
sS'.thisIndex'
p1947
I2
sg15
(lp1948
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg19
Nsg94
I2
sa(dp1949
g17
(lp1950
S'k'
asg18
S'N'
sS'.thisRepN'
p1951
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1952
I6
sS'.thisN'
p1953
I237
sS'.thisIndex'
p1954
I10
sg15
(lp1955
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I10
sa(dp1956
g17
(lp1957
S'd'
asg18
S'Y'
sS'.thisRepN'
p1958
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1959
I7
sS'.thisN'
p1960
I238
sS'.thisIndex'
p1961
I8
sg15
(lp1962
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg19
(lp1963
S'space'
p1964
asg94
I8
sa(dp1965
g17
(lp1966
S'k'
asg18
S'Y'
sS'.thisRepN'
p1967
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1968
I8
sS'.thisN'
p1969
I239
sS'.thisIndex'
p1970
I0
sg15
(lp1971
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I0
sa(dp1972
g17
(lp1973
S'k'
asg18
S'N'
sS'.thisRepN'
p1974
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1975
I9
sS'.thisN'
p1976
I240
sS'.thisIndex'
p1977
I7
sg15
(lp1978
S'd'
asg30
VF
sg16
S'N'
sg14
I5
sg19
Nsg94
I7
sa(dp1979
g17
(lp1980
S'k'
asg18
S'Y'
sS'.thisRepN'
p1981
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1982
I10
sS'.thisN'
p1983
I241
sS'.thisIndex'
p1984
I1
sg15
(lp1985
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1986
S'space'
p1987
asg94
I1
sa(dp1988
g17
(lp1989
S'd'
asg18
S'Y'
sS'.thisRepN'
p1990
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1991
I0
sS'.thisN'
p1992
I242
sS'.thisIndex'
p1993
I4
sg15
(lp1994
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
(lp1995
S'space'
p1996
asg94
I4
sa(dp1997
g17
(lp1998
S'd'
asg18
S'N'
sS'.thisRepN'
p1999
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2000
I1
sS'.thisN'
p2001
I243
sS'.thisIndex'
p2002
I9
sg15
(lp2003
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I9
sa(dp2004
g17
(lp2005
S'd'
asg18
S'N'
sS'.thisRepN'
p2006
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2007
I2
sS'.thisN'
p2008
I244
sS'.thisIndex'
p2009
I7
sg15
(lp2010
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg19
Nsg94
I7
sa(dp2011
g17
(lp2012
S'd'
asg18
S'N'
sS'.thisRepN'
p2013
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2014
I3
sS'.thisN'
p2015
I245
sS'.thisIndex'
p2016
I4
sg15
(lp2017
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I4
sa(dp2018
g17
(lp2019
S'd'
asg18
S'N'
sS'.thisRepN'
p2020
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2021
I4
sS'.thisN'
p2022
I246
sS'.thisIndex'
p2023
I4
sg15
(lp2024
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I4
sa(dp2025
g17
(lp2026
S'd'
asg18
S'N'
sS'.thisRepN'
p2027
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2028
I5
sS'.thisN'
p2029
I247
sS'.thisIndex'
p2030
I7
sg15
(lp2031
S'k'
asg30
VF
sg16
S'N'
sg14
I5
sg19
Nsg94
I7
sa(dp2032
g17
(lp2033
S'd'
asg18
S'N'
sS'.thisRepN'
p2034
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2035
I6
sS'.thisN'
p2036
I248
sS'.thisIndex'
p2037
I6
sg15
(lp2038
S'd'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I6
sa(dp2039
g17
(lp2040
S'k'
asg18
S'N'
sg22
I43
sS'.thisN'
p2041
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2042
I7
sS'.thisRepN'
p2043
I22
sg21
I33
sS'.thisIndex'
p2044
I9
sg23
I25
sg15
(lp2045
S'k'
asg30
VF
sg16
S'Y'
sg14
I5
sg19
Nsg94
I9
sa(dp2046
g17
(lp2047
S'k'
asg94
I10
sS'.thisRepN'
p2048
I22
sg30
VF
sg31
g32
sS'.thisTrialN'
p2049
I8
sS'.thisN'
p2050
I250
sS'.thisIndex'
p2051
I10
sg15
(lp2052
S'k'
asg16
S'Y'
sg14
I6
sa(dp2053
g17
(lp2054
S'd'
asg94
I4
sS'.thisRepN'
p2055
I22
sg30
VF
sg31
g32
sS'.thisTrialN'
p2056
I9
sS'.thisN'
p2057
I251
sS'.thisIndex'
p2058
I4
sg15
(lp2059
S'd'
asg16
S'Y'
sg14
I6
sa(dp2060
g17
(lp2061
S'k'
asg18
S'N'
sS'.thisRepN'
p2062
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2063
I10
sS'.thisN'
p2064
I252
sS'.thisIndex'
p2065
I2
sg15
(lp2066
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2067
g17
(lp2068
S'k'
asg18
S'N'
sS'.thisRepN'
p2069
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2070
I0
sS'.thisN'
p2071
I253
sS'.thisIndex'
p2072
I10
sg15
(lp2073
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg19
Nsg94
I10
sa(dp2074
g17
(lp2075
S'k'
asg18
S'Y'
sS'.thisRepN'
p2076
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2077
I1
sS'.thisN'
p2078
I254
sS'.thisIndex'
p2079
I5
sg15
(lp2080
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2081
S'k'
asg94
I5
sa(dp2082
g17
(lp2083
S'd'
asg18
S'Y'
sS'.thisRepN'
p2084
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2085
I2
sS'.thisN'
p2086
I255
sS'.thisIndex'
p2087
I5
sg15
(lp2088
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I5
sa(dp2089
g17
(lp2090
S'k'
asg18
S'N'
sS'.thisRepN'
p2091
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2092
I3
sS'.thisN'
p2093
I256
sS'.thisIndex'
p2094
I8
sg15
(lp2095
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I8
sa(dp2096
g17
(lp2097
S'd'
asg18
S'N'
sS'.thisRepN'
p2098
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2099
I4
sS'.thisN'
p2100
I257
sS'.thisIndex'
p2101
I0
sg15
(lp2102
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I0
sa(dp2103
g17
(lp2104
S'd'
asg18
S'N'
sS'.thisRepN'
p2105
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2106
I5
sS'.thisN'
p2107
I258
sS'.thisIndex'
p2108
I6
sg15
(lp2109
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg19
Nsg94
I6
sa(dp2110
g17
(lp2111
S'k'
asg18
S'Y'
sS'.thisRepN'
p2112
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2113
I6
sS'.thisN'
p2114
I259
sS'.thisIndex'
p2115
I8
sg15
(lp2116
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg19
(lp2117
S'space'
p2118
asg94
I8
sa(dp2119
g17
(lp2120
S'k'
asg18
S'Y'
sS'.thisRepN'
p2121
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2122
I7
sS'.thisN'
p2123
I260
sS'.thisIndex'
p2124
I8
sg15
(lp2125
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2126
S'space'
p2127
asg94
I8
sa(dp2128
g17
(lp2129
S'd'
asg18
S'N'
sS'.thisRepN'
p2130
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2131
I8
sS'.thisN'
p2132
I261
sS'.thisIndex'
p2133
I5
sg15
(lp2134
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I5
sa(dp2135
g17
(lp2136
S'd'
asg18
S'N'
sS'.thisRepN'
p2137
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2138
I9
sS'.thisN'
p2139
I262
sS'.thisIndex'
p2140
I1
sg15
(lp2141
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I1
sa(dp2142
g17
(lp2143
S'k'
asg18
S'Y'
sS'.thisRepN'
p2144
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2145
I10
sS'.thisN'
p2146
I263
sS'.thisIndex'
p2147
I1
sg15
(lp2148
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2149
S'space'
p2150
asg94
I1
sa(dp2151
g17
(lp2152
S'd'
asg18
S'Y'
sS'.thisRepN'
p2153
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2154
I0
sS'.thisN'
p2155
I264
sS'.thisIndex'
p2156
I3
sg15
(lp2157
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2158
S'space'
p2159
asg94
I3
sa(dp2160
g17
(lp2161
S'd'
asg18
S'N'
sS'.thisRepN'
p2162
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2163
I1
sS'.thisN'
p2164
I265
sS'.thisIndex'
p2165
I2
sg15
(lp2166
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg19
Nsg94
I2
sa(dp2167
g17
(lp2168
S'd'
asg18
S'N'
sS'.thisRepN'
p2169
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2170
I2
sS'.thisN'
p2171
I266
sS'.thisIndex'
p2172
I0
sg15
(lp2173
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I0
sa(dp2174
g17
(lp2175
S'k'
asg18
S'Y'
sS'.thisRepN'
p2176
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2177
I3
sS'.thisN'
p2178
I267
sS'.thisIndex'
p2179
I6
sg15
(lp2180
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2181
S'space'
p2182
asg94
I6
sa(dp2183
g17
(lp2184
S'd'
asg18
S'N'
sS'.thisRepN'
p2185
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2186
I4
sS'.thisN'
p2187
I268
sS'.thisIndex'
p2188
I10
sg15
(lp2189
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I10
sa(dp2190
g17
(lp2191
S'k'
asg18
S'N'
sS'.thisRepN'
p2192
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2193
I5
sS'.thisN'
p2194
I269
sS'.thisIndex'
p2195
I8
sg15
(lp2196
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I8
sa(dp2197
g17
(lp2198
S'd'
asg18
S'N'
sS'.thisRepN'
p2199
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2200
I6
sS'.thisN'
p2201
I270
sS'.thisIndex'
p2202
I1
sg15
(lp2203
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I1
sa(dp2204
g17
(lp2205
S'k'
asg18
S'Y'
sS'.thisRepN'
p2206
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2207
I7
sS'.thisN'
p2208
I271
sS'.thisIndex'
p2209
I3
sg15
(lp2210
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg19
(lp2211
S'space'
p2212
asg94
I3
sa(dp2213
g17
(lp2214
S'k'
asg18
S'N'
sS'.thisRepN'
p2215
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2216
I8
sS'.thisN'
p2217
I272
sS'.thisIndex'
p2218
I9
sg15
(lp2219
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg19
Nsg94
I9
sa(dp2220
g17
(lp2221
S'k'
asg18
S'N'
sS'.thisRepN'
p2222
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2223
I9
sS'.thisN'
p2224
I273
sS'.thisIndex'
p2225
I10
sg15
(lp2226
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I10
sa(dp2227
g17
(lp2228
S'k'
asg18
S'N'
sS'.thisRepN'
p2229
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2230
I10
sS'.thisN'
p2231
I274
sS'.thisIndex'
p2232
I5
sg15
(lp2233
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I5
sa(dp2234
g17
(lp2235
S'd'
asg18
S'N'
sS'.thisRepN'
p2236
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2237
I0
sS'.thisN'
p2238
I275
sS'.thisIndex'
p2239
I5
sg15
(lp2240
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I5
sa(dp2241
g17
(lp2242
S'd'
asg18
S'N'
sS'.thisRepN'
p2243
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2244
I1
sS'.thisN'
p2245
I276
sS'.thisIndex'
p2246
I3
sg15
(lp2247
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I3
sa(dp2248
g17
(lp2249
S'k'
asg18
S'N'
sS'.thisRepN'
p2250
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2251
I2
sS'.thisN'
p2252
I277
sS'.thisIndex'
p2253
I9
sg15
(lp2254
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I9
sa(dp2255
g17
(lp2256
S'k'
asg18
S'N'
sS'.thisRepN'
p2257
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2258
I3
sS'.thisN'
p2259
I278
sS'.thisIndex'
p2260
I1
sg15
(lp2261
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg19
Nsg94
I1
sa(dp2262
g17
(lp2263
S'k'
asg18
S'N'
sS'.thisRepN'
p2264
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2265
I4
sS'.thisN'
p2266
I279
sS'.thisIndex'
p2267
I0
sg15
(lp2268
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I0
sa(dp2269
g17
(lp2270
S'd'
asg18
S'N'
sS'.thisRepN'
p2271
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2272
I5
sS'.thisN'
p2273
I280
sS'.thisIndex'
p2274
I4
sg15
(lp2275
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg19
Nsg94
I4
sa(dp2276
g17
(lp2277
S'k'
asg18
S'N'
sS'.thisRepN'
p2278
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2279
I6
sS'.thisN'
p2280
I281
sS'.thisIndex'
p2281
I7
sg15
(lp2282
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I7
sa(dp2283
g17
(lp2284
S'd'
asg18
S'Y'
sS'.thisRepN'
p2285
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2286
I7
sS'.thisN'
p2287
I282
sS'.thisIndex'
p2288
I1
sg15
(lp2289
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2290
S'space'
p2291
asg94
I1
sa(dp2292
g17
(lp2293
S'k'
asg18
S'N'
sS'.thisRepN'
p2294
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2295
I8
sS'.thisN'
p2296
I283
sS'.thisIndex'
p2297
I0
sg15
(lp2298
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I0
sa(dp2299
g17
(lp2300
S'k'
asg18
S'Y'
sS'.thisRepN'
p2301
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2302
I9
sS'.thisN'
p2303
I284
sS'.thisIndex'
p2304
I0
sg15
(lp2305
S'd'
asg30
VF
sg16
S'N'
sg14
I6
sg19
(lp2306
S'space'
p2307
asg94
I0
sa(dp2308
g17
(lp2309
S'k'
asg18
S'N'
sS'.thisRepN'
p2310
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2311
I10
sS'.thisN'
p2312
I285
sS'.thisIndex'
p2313
I2
sg15
(lp2314
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2315
g17
(lp2316
S'd'
asg18
S'Y'
sS'.thisRepN'
p2317
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2318
I0
sS'.thisN'
p2319
I286
sS'.thisIndex'
p2320
I6
sg15
(lp2321
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2322
S'space'
p2323
asg94
I6
sa(dp2324
g17
(lp2325
S'd'
asg18
S'Y'
sS'.thisRepN'
p2326
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2327
I1
sS'.thisN'
p2328
I287
sS'.thisIndex'
p2329
I8
sg15
(lp2330
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2331
S'space'
p2332
asg94
I8
sa(dp2333
g17
(lp2334
S'd'
asg18
S'Y'
sS'.thisRepN'
p2335
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2336
I2
sS'.thisN'
p2337
I288
sS'.thisIndex'
p2338
I3
sg15
(lp2339
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2340
S'space'
p2341
asg94
I3
sa(dp2342
g17
(lp2343
S'k'
asg18
S'Y'
sS'.thisRepN'
p2344
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2345
I3
sS'.thisN'
p2346
I289
sS'.thisIndex'
p2347
I7
sg15
(lp2348
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2349
S'space'
p2350
asg94
I7
sa(dp2351
g17
(lp2352
S'k'
asg18
S'N'
sS'.thisRepN'
p2353
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2354
I4
sS'.thisN'
p2355
I290
sS'.thisIndex'
p2356
I1
sg15
(lp2357
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I1
sa(dp2358
g17
(lp2359
S'k'
asg18
S'Y'
sS'.thisRepN'
p2360
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2361
I5
sS'.thisN'
p2362
I291
sS'.thisIndex'
p2363
I4
sg15
(lp2364
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I4
sa(dp2365
g17
(lp2366
S'k'
asg18
S'Y'
sS'.thisRepN'
p2367
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2368
I6
sS'.thisN'
p2369
I292
sS'.thisIndex'
p2370
I1
sg15
(lp2371
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2372
S'space'
p2373
asg94
I1
sa(dp2374
g17
(lp2375
S'k'
asg18
S'Y'
sS'.thisRepN'
p2376
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2377
I7
sS'.thisN'
p2378
I293
sS'.thisIndex'
p2379
I6
sg15
(lp2380
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2381
S'space'
p2382
asg94
I6
sa(dp2383
g17
(lp2384
S'd'
asg18
S'N'
sS'.thisRepN'
p2385
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2386
I8
sS'.thisN'
p2387
I294
sS'.thisIndex'
p2388
I0
sg15
(lp2389
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I0
sa(dp2390
g17
(lp2391
S'd'
asg18
S'N'
sS'.thisRepN'
p2392
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2393
I9
sS'.thisN'
p2394
I295
sS'.thisIndex'
p2395
I2
sg15
(lp2396
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2397
g17
(lp2398
S'k'
asg18
S'Y'
sS'.thisRepN'
p2399
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2400
I10
sS'.thisN'
p2401
I296
sS'.thisIndex'
p2402
I9
sg15
(lp2403
S'k'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2404
S'space'
p2405
asg94
I9
sa(dp2406
g17
(lp2407
S'd'
asg18
S'N'
sS'.thisRepN'
p2408
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2409
I0
sS'.thisN'
p2410
I297
sS'.thisIndex'
p2411
I10
sg15
(lp2412
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
Nsg94
I10
sa(dp2413
g17
(lp2414
S'd'
asg18
S'Y'
sS'.thisRepN'
p2415
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2416
I1
sS'.thisN'
p2417
I298
sS'.thisIndex'
p2418
I8
sg15
(lp2419
S'd'
asg30
VF
sg16
S'Y'
sg14
I6
sg19
(lp2420
S'space'
p2421
asg94
I8
sa(dp2422
g17
(lp2423
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p2424
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2425
I2
sS'.thisRepN'
p2426
I27
sg21
I40
sS'.thisIndex'
p2427
I0
sg23
I19
sg15
(lp2428
S'k'
asg30
VF
sg16
S'N'
sg14
I6
sg19
Nsg94
I0
sa(dp2429
g17
(lp2430
S'k'
asg94
I6
sS'.thisRepN'
p2431
I27
sg30
VF
sg31
g32
sS'.thisTrialN'
p2432
I3
sS'.thisN'
p2433
I300
sS'.thisIndex'
p2434
I6
sg15
(lp2435
S'k'
asg16
S'Y'
sg14
I7
sa(dp2436
g17
(lp2437
S'k'
asg94
I6
sS'.thisRepN'
p2438
I27
sg30
VF
sg31
g32
sS'.thisTrialN'
p2439
I4
sS'.thisN'
p2440
I301
sS'.thisIndex'
p2441
I6
sg15
(lp2442
S'k'
asg16
S'Y'
sg14
I7
sa(dp2443
g17
(lp2444
S'd'
asg18
S'Y'
sS'.thisRepN'
p2445
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2446
I5
sS'.thisN'
p2447
I302
sS'.thisIndex'
p2448
I10
sg15
(lp2449
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2450
S'space'
p2451
asg94
I10
sa(dp2452
g17
(lp2453
S'k'
asg18
S'Y'
sS'.thisRepN'
p2454
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2455
I6
sS'.thisN'
p2456
I303
sS'.thisIndex'
p2457
I10
sg15
(lp2458
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2459
S'space'
p2460
asg94
I10
sa(dp2461
g17
(lp2462
S'd'
asg18
S'N'
sS'.thisRepN'
p2463
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2464
I7
sS'.thisN'
p2465
I304
sS'.thisIndex'
p2466
I5
sg15
(lp2467
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I5
sa(dp2468
g17
(lp2469
S'd'
asg18
S'Y'
sS'.thisRepN'
p2470
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2471
I8
sS'.thisN'
p2472
I305
sS'.thisIndex'
p2473
I6
sg15
(lp2474
S'k'
asg30
VF
sg16
S'N'
sg14
I7
sg19
(lp2475
S'space'
p2476
asg94
I6
sa(dp2477
g17
(lp2478
S'd'
asg18
S'Y'
sS'.thisRepN'
p2479
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2480
I9
sS'.thisN'
p2481
I306
sS'.thisIndex'
p2482
I5
sg15
(lp2483
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2484
S'space'
p2485
asg94
I5
sa(dp2486
g17
(lp2487
S'k'
asg18
S'N'
sS'.thisRepN'
p2488
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2489
I10
sS'.thisN'
p2490
I307
sS'.thisIndex'
p2491
I8
sg15
(lp2492
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I8
sa(dp2493
g17
(lp2494
S'd'
asg18
S'N'
sS'.thisRepN'
p2495
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2496
I0
sS'.thisN'
p2497
I308
sS'.thisIndex'
p2498
I9
sg15
(lp2499
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I9
sa(dp2500
g17
(lp2501
S'd'
asg18
S'Y'
sS'.thisRepN'
p2502
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2503
I1
sS'.thisN'
p2504
I309
sS'.thisIndex'
p2505
I9
sg15
(lp2506
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2507
S'space'
p2508
asg94
I9
sa(dp2509
g17
(lp2510
S'd'
asg18
S'Y'
sS'.thisRepN'
p2511
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2512
I2
sS'.thisN'
p2513
I310
sS'.thisIndex'
p2514
I5
sg15
(lp2515
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2516
S'space'
p2517
asg94
I5
sa(dp2518
g17
(lp2519
S'd'
asg18
S'N'
sS'.thisRepN'
p2520
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2521
I3
sS'.thisN'
p2522
I311
sS'.thisIndex'
p2523
I0
sg15
(lp2524
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I0
sa(dp2525
g17
(lp2526
S'k'
asg18
S'Y'
sS'.thisRepN'
p2527
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2528
I4
sS'.thisN'
p2529
I312
sS'.thisIndex'
p2530
I7
sg15
(lp2531
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2532
S'space'
p2533
asg94
I7
sa(dp2534
g17
(lp2535
S'k'
asg18
S'Y'
sS'.thisRepN'
p2536
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2537
I5
sS'.thisN'
p2538
I313
sS'.thisIndex'
p2539
I7
sg15
(lp2540
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2541
S'space'
p2542
asg94
I7
sa(dp2543
g17
(lp2544
S'k'
asg18
S'N'
sS'.thisRepN'
p2545
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2546
I6
sS'.thisN'
p2547
I314
sS'.thisIndex'
p2548
I2
sg15
(lp2549
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I2
sa(dp2550
g17
(lp2551
S'd'
asg18
S'N'
sS'.thisRepN'
p2552
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2553
I7
sS'.thisN'
p2554
I315
sS'.thisIndex'
p2555
I10
sg15
(lp2556
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I10
sa(dp2557
g17
(lp2558
S'd'
asg18
S'Y'
sS'.thisRepN'
p2559
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2560
I8
sS'.thisN'
p2561
I316
sS'.thisIndex'
p2562
I4
sg15
(lp2563
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2564
S'space'
p2565
asg94
I4
sa(dp2566
g17
(lp2567
S'k'
asg18
S'N'
sS'.thisRepN'
p2568
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2569
I9
sS'.thisN'
p2570
I317
sS'.thisIndex'
p2571
I9
sg15
(lp2572
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg19
Nsg94
I9
sa(dp2573
g17
(lp2574
S'k'
asg18
S'N'
sS'.thisRepN'
p2575
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2576
I10
sS'.thisN'
p2577
I318
sS'.thisIndex'
p2578
I4
sg15
(lp2579
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I4
sa(dp2580
g17
(lp2581
S'd'
asg18
S'Y'
sS'.thisRepN'
p2582
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2583
I0
sS'.thisN'
p2584
I319
sS'.thisIndex'
p2585
I7
sg15
(lp2586
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2587
S'space'
p2588
asg94
I7
sa(dp2589
g17
(lp2590
S'k'
asg18
S'N'
sS'.thisRepN'
p2591
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2592
I1
sS'.thisN'
p2593
I320
sS'.thisIndex'
p2594
I9
sg15
(lp2595
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I9
sa(dp2596
g17
(lp2597
S'd'
asg18
S'Y'
sS'.thisRepN'
p2598
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2599
I2
sS'.thisN'
p2600
I321
sS'.thisIndex'
p2601
I6
sg15
(lp2602
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2603
S'space'
p2604
asg94
I6
sa(dp2605
g17
(lp2606
S'k'
asg18
S'N'
sS'.thisRepN'
p2607
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2608
I3
sS'.thisN'
p2609
I322
sS'.thisIndex'
p2610
I2
sg15
(lp2611
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg19
Nsg94
I2
sa(dp2612
g17
(lp2613
S'd'
asg18
S'Y'
sS'.thisRepN'
p2614
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2615
I4
sS'.thisN'
p2616
I323
sS'.thisIndex'
p2617
I0
sg15
(lp2618
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2619
S'space'
p2620
asg94
I0
sa(dp2621
g17
(lp2622
S'd'
asg18
S'Y'
sS'.thisRepN'
p2623
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2624
I5
sS'.thisN'
p2625
I324
sS'.thisIndex'
p2626
I10
sg15
(lp2627
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2628
S'space'
p2629
asg94
I10
sa(dp2630
g17
(lp2631
S'd'
asg18
S'Y'
sS'.thisRepN'
p2632
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2633
I6
sS'.thisN'
p2634
I325
sS'.thisIndex'
p2635
I0
sg15
(lp2636
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2637
S'space'
p2638
asg94
I0
sa(dp2639
g17
(lp2640
S'd'
asg18
S'N'
sS'.thisRepN'
p2641
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2642
I7
sS'.thisN'
p2643
I326
sS'.thisIndex'
p2644
I2
sg15
(lp2645
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I2
sa(dp2646
g17
(lp2647
S'd'
asg18
S'N'
sS'.thisRepN'
p2648
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2649
I8
sS'.thisN'
p2650
I327
sS'.thisIndex'
p2651
I2
sg15
(lp2652
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I2
sa(dp2653
g17
(lp2654
S'k'
asg18
S'Y'
sS'.thisRepN'
p2655
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2656
I9
sS'.thisN'
p2657
I328
sS'.thisIndex'
p2658
I3
sg15
(lp2659
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2660
S'space'
p2661
asg94
I3
sa(dp2662
g17
(lp2663
S'd'
asg18
S'N'
sS'.thisRepN'
p2664
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2665
I10
sS'.thisN'
p2666
I329
sS'.thisIndex'
p2667
I4
sg15
(lp2668
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I4
sa(dp2669
g17
(lp2670
S'd'
asg18
S'Y'
sS'.thisRepN'
p2671
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2672
I0
sS'.thisN'
p2673
I330
sS'.thisIndex'
p2674
I0
sg15
(lp2675
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2676
S'space'
p2677
asg94
I0
sa(dp2678
g17
(lp2679
S'd'
asg18
S'N'
sS'.thisRepN'
p2680
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2681
I1
sS'.thisN'
p2682
I331
sS'.thisIndex'
p2683
I0
sg15
(lp2684
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I0
sa(dp2685
g17
(lp2686
S'k'
asg18
S'Y'
sS'.thisRepN'
p2687
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2688
I2
sS'.thisN'
p2689
I332
sS'.thisIndex'
p2690
I0
sg15
(lp2691
S'd'
asg30
VF
sg16
S'N'
sg14
I7
sg19
(lp2692
S'space'
p2693
asg94
I0
sa(dp2694
g17
(lp2695
S'd'
asg18
S'N'
sS'.thisRepN'
p2696
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2697
I3
sS'.thisN'
p2698
I333
sS'.thisIndex'
p2699
I2
sg15
(lp2700
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I2
sa(dp2701
g17
(lp2702
S'd'
asg18
S'Y'
sS'.thisRepN'
p2703
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2704
I4
sS'.thisN'
p2705
I334
sS'.thisIndex'
p2706
I7
sg15
(lp2707
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2708
S'space'
p2709
asg94
I7
sa(dp2710
g17
(lp2711
S'd'
asg18
S'Y'
sS'.thisRepN'
p2712
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2713
I5
sS'.thisN'
p2714
I335
sS'.thisIndex'
p2715
I2
sg15
(lp2716
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2717
S'space'
p2718
asg94
I2
sa(dp2719
g17
(lp2720
S'd'
asg18
S'Y'
sS'.thisRepN'
p2721
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2722
I6
sS'.thisN'
p2723
I336
sS'.thisIndex'
p2724
I2
sg15
(lp2725
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2726
S'space'
p2727
asg94
I2
sa(dp2728
g17
(lp2729
S'd'
asg18
S'N'
sS'.thisRepN'
p2730
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2731
I7
sS'.thisN'
p2732
I337
sS'.thisIndex'
p2733
I0
sg15
(lp2734
S'k'
asg30
VF
sg16
S'N'
sg14
I7
sg19
Nsg94
I0
sa(dp2735
g17
(lp2736
S'k'
asg18
S'Y'
sS'.thisRepN'
p2737
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2738
I8
sS'.thisN'
p2739
I338
sS'.thisIndex'
p2740
I10
sg15
(lp2741
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2742
S'space'
p2743
asg94
I10
sa(dp2744
g17
(lp2745
S'd'
asg18
S'N'
sS'.thisRepN'
p2746
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2747
I9
sS'.thisN'
p2748
I339
sS'.thisIndex'
p2749
I7
sg15
(lp2750
S'k'
asg30
VF
sg16
S'N'
sg14
I7
sg19
Nsg94
I7
sa(dp2751
g17
(lp2752
S'd'
asg18
S'Y'
sS'.thisRepN'
p2753
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2754
I10
sS'.thisN'
p2755
I340
sS'.thisIndex'
p2756
I10
sg15
(lp2757
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2758
S'space'
p2759
asg94
I10
sa(dp2760
g17
(lp2761
S'd'
asg18
S'Y'
sS'.thisRepN'
p2762
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2763
I0
sS'.thisN'
p2764
I341
sS'.thisIndex'
p2765
I1
sg15
(lp2766
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2767
S'space'
p2768
asg94
I1
sa(dp2769
g17
(lp2770
S'd'
asg18
S'Y'
sS'.thisRepN'
p2771
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2772
I1
sS'.thisN'
p2773
I342
sS'.thisIndex'
p2774
I2
sg15
(lp2775
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2776
S'space'
p2777
asg94
I2
sa(dp2778
g17
(lp2779
S'd'
asg18
S'Y'
sS'.thisRepN'
p2780
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2781
I2
sS'.thisN'
p2782
I343
sS'.thisIndex'
p2783
I7
sg15
(lp2784
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
(lp2785
S'space'
p2786
asg94
I7
sa(dp2787
g17
(lp2788
S'k'
asg18
S'N'
sS'.thisRepN'
p2789
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2790
I3
sS'.thisN'
p2791
I344
sS'.thisIndex'
p2792
I5
sg15
(lp2793
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I5
sa(dp2794
g17
(lp2795
S'k'
asg18
S'N'
sS'.thisRepN'
p2796
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2797
I4
sS'.thisN'
p2798
I345
sS'.thisIndex'
p2799
I9
sg15
(lp2800
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I9
sa(dp2801
g17
(lp2802
S'd'
asg18
S'N'
sS'.thisRepN'
p2803
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2804
I5
sS'.thisN'
p2805
I346
sS'.thisIndex'
p2806
I10
sg15
(lp2807
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I10
sa(dp2808
g17
(lp2809
S'd'
asg18
S'N'
sS'.thisRepN'
p2810
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2811
I6
sS'.thisN'
p2812
I347
sS'.thisIndex'
p2813
I7
sg15
(lp2814
S'k'
asg30
VF
sg16
S'N'
sg14
I7
sg19
Nsg94
I7
sa(dp2815
g17
(lp2816
S'k'
asg18
S'N'
sS'.thisRepN'
p2817
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2818
I7
sS'.thisN'
p2819
I348
sS'.thisIndex'
p2820
I6
sg15
(lp2821
S'k'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I6
sa(dp2822
g17
(lp2823
S'd'
asg18
S'N'
sg22
I48
sS'.thisN'
p2824
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2825
I8
sS'.thisRepN'
p2826
I31
sg21
I43
sS'.thisIndex'
p2827
I2
sg23
I25
sg15
(lp2828
S'd'
asg30
VF
sg16
S'Y'
sg14
I7
sg19
Nsg94
I2
sa(dp2829
g17
(lp2830
S'k'
asg94
I1
sS'.thisRepN'
p2831
I31
sg30
VF
sg31
g32
sS'.thisTrialN'
p2832
I9
sS'.thisN'
p2833
I350
sS'.thisIndex'
p2834
I1
sg15
(lp2835
S'k'
asg16
S'Y'
sg14
I8
sa(dp2836
g17
(lp2837
S'k'
asg94
I2
sS'.thisRepN'
p2838
I31
sg30
VF
sg31
g32
sS'.thisTrialN'
p2839
I10
sS'.thisN'
p2840
I351
sS'.thisIndex'
p2841
I2
sg15
(lp2842
S'k'
asg16
S'Y'
sg14
I8
sa(dp2843
g17
(lp2844
S'k'
asg18
S'Y'
sS'.thisRepN'
p2845
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2846
I0
sS'.thisN'
p2847
I352
sS'.thisIndex'
p2848
I8
sg15
(lp2849
S'd'
asg30
VF
sg16
S'N'
sg14
I8
sg19
(lp2850
S'space'
p2851
asg94
I8
sa(dp2852
g17
(lp2853
S'k'
asg18
S'Y'
sS'.thisRepN'
p2854
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2855
I1
sS'.thisN'
p2856
I353
sS'.thisIndex'
p2857
I2
sg15
(lp2858
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I2
sa(dp2859
g17
(lp2860
S'k'
asg18
S'N'
sS'.thisRepN'
p2861
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2862
I2
sS'.thisN'
p2863
I354
sS'.thisIndex'
p2864
I8
sg15
(lp2865
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I8
sa(dp2866
g17
(lp2867
S'd'
asg18
S'N'
sS'.thisRepN'
p2868
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2869
I3
sS'.thisN'
p2870
I355
sS'.thisIndex'
p2871
I5
sg15
(lp2872
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp2873
g17
(lp2874
S'k'
asg18
S'N'
sS'.thisRepN'
p2875
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2876
I4
sS'.thisN'
p2877
I356
sS'.thisIndex'
p2878
I5
sg15
(lp2879
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp2880
g17
(lp2881
S'd'
asg18
S'Y'
sS'.thisRepN'
p2882
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2883
I5
sS'.thisN'
p2884
I357
sS'.thisIndex'
p2885
I8
sg15
(lp2886
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp2887
S'space'
p2888
asg94
I8
sa(dp2889
g17
(lp2890
S'd'
asg18
S'N'
sS'.thisRepN'
p2891
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2892
I6
sS'.thisN'
p2893
I358
sS'.thisIndex'
p2894
I5
sg15
(lp2895
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp2896
g17
(lp2897
S'k'
asg18
S'N'
sS'.thisRepN'
p2898
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2899
I7
sS'.thisN'
p2900
I359
sS'.thisIndex'
p2901
I0
sg15
(lp2902
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I0
sa(dp2903
g17
(lp2904
S'd'
asg18
S'N'
sS'.thisRepN'
p2905
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2906
I8
sS'.thisN'
p2907
I360
sS'.thisIndex'
p2908
I5
sg15
(lp2909
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg19
Nsg94
I5
sa(dp2910
g17
(lp2911
S'k'
asg18
S'Y'
sS'.thisRepN'
p2912
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2913
I9
sS'.thisN'
p2914
I361
sS'.thisIndex'
p2915
I6
sg15
(lp2916
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp2917
S'space'
p2918
asg94
I6
sa(dp2919
g17
(lp2920
S'd'
asg18
S'Y'
sS'.thisRepN'
p2921
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2922
I10
sS'.thisN'
p2923
I362
sS'.thisIndex'
p2924
I4
sg15
(lp2925
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp2926
S'space'
p2927
asg94
I4
sa(dp2928
g17
(lp2929
S'k'
asg18
S'Y'
sS'.thisRepN'
p2930
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2931
I0
sS'.thisN'
p2932
I363
sS'.thisIndex'
p2933
I3
sg15
(lp2934
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I3
sa(dp2935
g17
(lp2936
S'k'
asg18
S'Y'
sS'.thisRepN'
p2937
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2938
I1
sS'.thisN'
p2939
I364
sS'.thisIndex'
p2940
I3
sg15
(lp2941
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I3
sa(dp2942
g17
(lp2943
S'k'
asg18
S'Y'
sS'.thisRepN'
p2944
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2945
I2
sS'.thisN'
p2946
I365
sS'.thisIndex'
p2947
I10
sg15
(lp2948
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp2949
S'space'
p2950
asg94
I10
sa(dp2951
g17
(lp2952
S'd'
asg18
S'Y'
sS'.thisRepN'
p2953
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2954
I3
sS'.thisN'
p2955
I366
sS'.thisIndex'
p2956
I3
sg15
(lp2957
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg19
Nsg94
I3
sa(dp2958
g17
(lp2959
S'd'
asg18
S'Y'
sS'.thisRepN'
p2960
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2961
I4
sS'.thisN'
p2962
I367
sS'.thisIndex'
p2963
I2
sg15
(lp2964
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I2
sa(dp2965
g17
(lp2966
S'k'
asg18
S'Y'
sS'.thisRepN'
p2967
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2968
I5
sS'.thisN'
p2969
I368
sS'.thisIndex'
p2970
I4
sg15
(lp2971
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp2972
S'space'
p2973
asg94
I4
sa(dp2974
g17
(lp2975
S'k'
asg18
S'Y'
sS'.thisRepN'
p2976
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2977
I6
sS'.thisN'
p2978
I369
sS'.thisIndex'
p2979
I1
sg15
(lp2980
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp2981
S'space'
p2982
asg94
I1
sa(dp2983
g17
(lp2984
S'k'
asg18
S'N'
sS'.thisRepN'
p2985
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2986
I7
sS'.thisN'
p2987
I370
sS'.thisIndex'
p2988
I5
sg15
(lp2989
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp2990
g17
(lp2991
S'd'
asg18
S'Y'
sS'.thisRepN'
p2992
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2993
I8
sS'.thisN'
p2994
I371
sS'.thisIndex'
p2995
I3
sg15
(lp2996
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg19
(lp2997
S'space'
p2998
asg94
I3
sa(dp2999
g17
(lp3000
S'd'
asg18
S'Y'
sS'.thisRepN'
p3001
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3002
I9
sS'.thisN'
p3003
I372
sS'.thisIndex'
p3004
I7
sg15
(lp3005
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3006
S'space'
p3007
asg94
I7
sa(dp3008
g17
(lp3009
S'k'
asg18
S'N'
sS'.thisRepN'
p3010
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3011
I10
sS'.thisN'
p3012
I373
sS'.thisIndex'
p3013
I3
sg15
(lp3014
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I3
sa(dp3015
g17
(lp3016
S'k'
asg18
S'Y'
sS'.thisRepN'
p3017
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3018
I0
sS'.thisN'
p3019
I374
sS'.thisIndex'
p3020
I4
sg15
(lp3021
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3022
S'space'
p3023
asg94
I4
sa(dp3024
g17
(lp3025
S'k'
asg18
S'Y'
sS'.thisRepN'
p3026
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3027
I1
sS'.thisN'
p3028
I375
sS'.thisIndex'
p3029
I10
sg15
(lp3030
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3031
S'space'
p3032
asg94
I10
sa(dp3033
g17
(lp3034
S'd'
asg18
S'N'
sS'.thisRepN'
p3035
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3036
I2
sS'.thisN'
p3037
I376
sS'.thisIndex'
p3038
I1
sg15
(lp3039
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I1
sa(dp3040
g17
(lp3041
S'd'
asg18
S'Y'
sS'.thisRepN'
p3042
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3043
I3
sS'.thisN'
p3044
I377
sS'.thisIndex'
p3045
I0
sg15
(lp3046
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3047
S'space'
p3048
asg94
I0
sa(dp3049
g17
(lp3050
S'k'
asg18
S'Y'
sS'.thisRepN'
p3051
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3052
I4
sS'.thisN'
p3053
I378
sS'.thisIndex'
p3054
I9
sg15
(lp3055
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3056
S'space'
p3057
asg94
I9
sa(dp3058
g17
(lp3059
S'k'
asg18
S'Y'
sS'.thisRepN'
p3060
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3061
I5
sS'.thisN'
p3062
I379
sS'.thisIndex'
p3063
I4
sg15
(lp3064
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3065
S'space'
p3066
asg94
I4
sa(dp3067
g17
(lp3068
S'd'
asg18
S'N'
sS'.thisRepN'
p3069
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3070
I6
sS'.thisN'
p3071
I380
sS'.thisIndex'
p3072
I7
sg15
(lp3073
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I7
sa(dp3074
g17
(lp3075
S'k'
asg18
S'N'
sS'.thisRepN'
p3076
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3077
I7
sS'.thisN'
p3078
I381
sS'.thisIndex'
p3079
I2
sg15
(lp3080
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I2
sa(dp3081
g17
(lp3082
S'd'
asg18
S'N'
sS'.thisRepN'
p3083
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3084
I8
sS'.thisN'
p3085
I382
sS'.thisIndex'
p3086
I7
sg15
(lp3087
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg19
Nsg94
I7
sa(dp3088
g17
(lp3089
S'k'
asg18
S'N'
sS'.thisRepN'
p3090
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3091
I9
sS'.thisN'
p3092
I383
sS'.thisIndex'
p3093
I9
sg15
(lp3094
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I9
sa(dp3095
g17
(lp3096
S'k'
asg18
S'Y'
sS'.thisRepN'
p3097
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3098
I10
sS'.thisN'
p3099
I384
sS'.thisIndex'
p3100
I5
sg15
(lp3101
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3102
S'd'
asg94
I5
sa(dp3103
g17
(lp3104
S'k'
asg18
S'Y'
sS'.thisRepN'
p3105
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3106
I0
sS'.thisN'
p3107
I385
sS'.thisIndex'
p3108
I3
sg15
(lp3109
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3110
S'space'
p3111
asg94
I3
sa(dp3112
g17
(lp3113
S'd'
asg18
S'Y'
sS'.thisRepN'
p3114
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3115
I1
sS'.thisN'
p3116
I386
sS'.thisIndex'
p3117
I2
sg15
(lp3118
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3119
S'space'
p3120
asg94
I2
sa(dp3121
g17
(lp3122
S'k'
asg18
S'Y'
sS'.thisRepN'
p3123
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3124
I2
sS'.thisN'
p3125
I387
sS'.thisIndex'
p3126
I1
sg15
(lp3127
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3128
S'space'
p3129
asg94
I1
sa(dp3130
g17
(lp3131
S'd'
asg18
S'N'
sS'.thisRepN'
p3132
I35
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3133
I3
sS'.thisN'
p3134
I388
sS'.thisIndex'
p3135
I9
sg15
(lp3136
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3137
S'space'
p3138
asg94
I9
sa(dp3139
g17
(lp3140
S'k'
asg18
S'N'
sS'.thisRepN'
p3141
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3142
I4
sS'.thisN'
p3143
I389
sS'.thisIndex'
p3144
I3
sg15
(lp3145
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I3
sa(dp3146
g17
(lp3147
S'd'
asg18
S'N'
sS'.thisRepN'
p3148
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3149
I5
sS'.thisN'
p3150
I390
sS'.thisIndex'
p3151
I10
sg15
(lp3152
S'k'
asg30
VF
sg16
S'N'
sg14
I8
sg19
Nsg94
I10
sa(dp3153
g17
(lp3154
S'd'
asg18
S'N'
sS'.thisRepN'
p3155
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3156
I6
sS'.thisN'
p3157
I391
sS'.thisIndex'
p3158
I5
sg15
(lp3159
S'd'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp3160
g17
(lp3161
S'k'
asg18
S'Y'
sS'.thisRepN'
p3162
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3163
I7
sS'.thisN'
p3164
I392
sS'.thisIndex'
p3165
I10
sg15
(lp3166
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3167
S'space'
p3168
asg94
I10
sa(dp3169
g17
(lp3170
S'k'
asg18
S'N'
sS'.thisRepN'
p3171
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3172
I8
sS'.thisN'
p3173
I393
sS'.thisIndex'
p3174
I2
sg15
(lp3175
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I2
sa(dp3176
g17
(lp3177
S'k'
asg18
S'Y'
sS'.thisRepN'
p3178
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3179
I9
sS'.thisN'
p3180
I394
sS'.thisIndex'
p3181
I8
sg15
(lp3182
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
(lp3183
S'space'
p3184
asg94
I8
sa(dp3185
g17
(lp3186
S'k'
asg18
S'N'
sS'.thisRepN'
p3187
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3188
I10
sS'.thisN'
p3189
I395
sS'.thisIndex'
p3190
I9
sg15
(lp3191
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I9
sa(dp3192
g17
(lp3193
S'k'
asg18
S'N'
sS'.thisRepN'
p3194
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3195
I0
sS'.thisN'
p3196
I396
sS'.thisIndex'
p3197
I7
sg15
(lp3198
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I7
sa(dp3199
g17
(lp3200
S'k'
asg18
S'N'
sS'.thisRepN'
p3201
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3202
I1
sS'.thisN'
p3203
I397
sS'.thisIndex'
p3204
I5
sg15
(lp3205
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp3206
g17
(lp3207
S'k'
asg18
S'N'
sS'.thisRepN'
p3208
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3209
I2
sS'.thisN'
p3210
I398
sS'.thisIndex'
p3211
I7
sg15
(lp3212
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I7
sa(dp3213
g17
(lp3214
S'k'
asg18
S'N'
sg22
I41
sS'.thisN'
p3215
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3216
I3
sS'.thisRepN'
p3217
I36
sg21
I44
sS'.thisIndex'
p3218
I3
sg23
I25
sg15
(lp3219
S'k'
asg30
VF
sg16
S'Y'
sg14
I8
sg19
Nsg94
I3
sa(dp3220
g17
(lp3221
S'd'
asg94
I1
sS'.thisRepN'
p3222
I36
sg30
VF
sg31
g32
sS'.thisTrialN'
p3223
I4
sS'.thisN'
p3224
I400
sS'.thisIndex'
p3225
I1
sg15
(lp3226
S'k'
asg16
S'N'
sg14
I9
sa(dp3227
g17
(lp3228
S'k'
asg94
I10
sS'.thisRepN'
p3229
I36
sg30
VF
sg31
g32
sS'.thisTrialN'
p3230
I5
sS'.thisN'
p3231
I401
sS'.thisIndex'
p3232
I10
sg15
(lp3233
S'k'
asg16
S'Y'
sg14
I9
sa(dp3234
g17
(lp3235
S'd'
asg18
S'Y'
sS'.thisRepN'
p3236
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3237
I6
sS'.thisN'
p3238
I402
sS'.thisIndex'
p3239
I8
sg15
(lp3240
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3241
S'space'
p3242
asg94
I8
sa(dp3243
g17
(lp3244
S'd'
asg18
S'Y'
sS'.thisRepN'
p3245
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3246
I7
sS'.thisN'
p3247
I403
sS'.thisIndex'
p3248
I10
sg15
(lp3249
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3250
S'space'
p3251
asg94
I10
sa(dp3252
g17
(lp3253
S'k'
asg18
S'Y'
sS'.thisRepN'
p3254
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3255
I8
sS'.thisN'
p3256
I404
sS'.thisIndex'
p3257
I6
sg15
(lp3258
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3259
S'space'
p3260
asg94
I6
sa(dp3261
g17
(lp3262
S'k'
asg18
S'N'
sS'.thisRepN'
p3263
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3264
I9
sS'.thisN'
p3265
I405
sS'.thisIndex'
p3266
I9
sg15
(lp3267
S'd'
asg30
VF
sg16
S'N'
sg14
I9
sg19
Nsg94
I9
sa(dp3268
g17
(lp3269
S'k'
asg18
S'N'
sS'.thisRepN'
p3270
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3271
I10
sS'.thisN'
p3272
I406
sS'.thisIndex'
p3273
I8
sg15
(lp3274
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I8
sa(dp3275
g17
(lp3276
S'd'
asg18
S'Y'
sS'.thisRepN'
p3277
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3278
I0
sS'.thisN'
p3279
I407
sS'.thisIndex'
p3280
I2
sg15
(lp3281
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3282
S'space'
p3283
asg94
I2
sa(dp3284
g17
(lp3285
S'k'
asg18
S'Y'
sS'.thisRepN'
p3286
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3287
I1
sS'.thisN'
p3288
I408
sS'.thisIndex'
p3289
I6
sg15
(lp3290
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3291
S'space'
p3292
asg94
I6
sa(dp3293
g17
(lp3294
S'k'
asg18
S'Y'
sS'.thisRepN'
p3295
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3296
I2
sS'.thisN'
p3297
I409
sS'.thisIndex'
p3298
I4
sg15
(lp3299
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3300
S'space'
p3301
asg94
I4
sa(dp3302
g17
(lp3303
S'd'
asg18
S'Y'
sS'.thisRepN'
p3304
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3305
I3
sS'.thisN'
p3306
I410
sS'.thisIndex'
p3307
I6
sg15
(lp3308
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3309
S'space'
p3310
asg94
I6
sa(dp3311
g17
(lp3312
S'd'
asg18
S'N'
sS'.thisRepN'
p3313
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3314
I4
sS'.thisN'
p3315
I411
sS'.thisIndex'
p3316
I2
sg15
(lp3317
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I2
sa(dp3318
g17
(lp3319
S'k'
asg18
S'Y'
sS'.thisRepN'
p3320
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3321
I5
sS'.thisN'
p3322
I412
sS'.thisIndex'
p3323
I7
sg15
(lp3324
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3325
S'space'
p3326
asg94
I7
sa(dp3327
g17
(lp3328
S'k'
asg18
S'N'
sS'.thisRepN'
p3329
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3330
I6
sS'.thisN'
p3331
I413
sS'.thisIndex'
p3332
I8
sg15
(lp3333
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I8
sa(dp3334
g17
(lp3335
S'k'
asg18
S'N'
sS'.thisRepN'
p3336
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3337
I7
sS'.thisN'
p3338
I414
sS'.thisIndex'
p3339
I9
sg15
(lp3340
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I9
sa(dp3341
g17
(lp3342
S'k'
asg18
S'N'
sS'.thisRepN'
p3343
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3344
I8
sS'.thisN'
p3345
I415
sS'.thisIndex'
p3346
I1
sg15
(lp3347
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I1
sa(dp3348
g17
(lp3349
S'd'
asg18
S'N'
sS'.thisRepN'
p3350
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3351
I9
sS'.thisN'
p3352
I416
sS'.thisIndex'
p3353
I4
sg15
(lp3354
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I4
sa(dp3355
g17
(lp3356
S'k'
asg18
S'N'
sS'.thisRepN'
p3357
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3358
I10
sS'.thisN'
p3359
I417
sS'.thisIndex'
p3360
I4
sg15
(lp3361
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I4
sa(dp3362
g17
(lp3363
S'd'
asg18
S'Y'
sS'.thisRepN'
p3364
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3365
I0
sS'.thisN'
p3366
I418
sS'.thisIndex'
p3367
I8
sg15
(lp3368
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg19
(lp3369
S'k'
asg94
I8
sa(dp3370
g17
(lp3371
S'd'
asg18
S'Y'
sS'.thisRepN'
p3372
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3373
I1
sS'.thisN'
p3374
I419
sS'.thisIndex'
p3375
I0
sg15
(lp3376
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3377
S'space'
p3378
asg94
I0
sa(dp3379
g17
(lp3380
S'k'
asg18
S'Y'
sS'.thisRepN'
p3381
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3382
I2
sS'.thisN'
p3383
I420
sS'.thisIndex'
p3384
I4
sg15
(lp3385
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3386
S'space'
p3387
asg94
I4
sa(dp3388
g17
(lp3389
S'k'
asg18
S'N'
sS'.thisRepN'
p3390
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3391
I3
sS'.thisN'
p3392
I421
sS'.thisIndex'
p3393
I7
sg15
(lp3394
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I7
sa(dp3395
g17
(lp3396
S'd'
asg18
S'Y'
sS'.thisRepN'
p3397
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3398
I4
sS'.thisN'
p3399
I422
sS'.thisIndex'
p3400
I0
sg15
(lp3401
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3402
S'space'
p3403
asg94
I0
sa(dp3404
g17
(lp3405
S'k'
asg18
S'Y'
sS'.thisRepN'
p3406
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3407
I5
sS'.thisN'
p3408
I423
sS'.thisIndex'
p3409
I4
sg15
(lp3410
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3411
S'space'
p3412
asg94
I4
sa(dp3413
g17
(lp3414
S'k'
asg18
S'Y'
sS'.thisRepN'
p3415
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3416
I6
sS'.thisN'
p3417
I424
sS'.thisIndex'
p3418
I9
sg15
(lp3419
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3420
S'space'
p3421
asg94
I9
sa(dp3422
g17
(lp3423
S'd'
asg18
S'N'
sS'.thisRepN'
p3424
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3425
I7
sS'.thisN'
p3426
I425
sS'.thisIndex'
p3427
I3
sg15
(lp3428
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I3
sa(dp3429
g17
(lp3430
S'k'
asg18
S'N'
sS'.thisRepN'
p3431
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3432
I8
sS'.thisN'
p3433
I426
sS'.thisIndex'
p3434
I7
sg15
(lp3435
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I7
sa(dp3436
g17
(lp3437
S'd'
asg18
S'Y'
sS'.thisRepN'
p3438
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3439
I9
sS'.thisN'
p3440
I427
sS'.thisIndex'
p3441
I9
sg15
(lp3442
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3443
S'space'
p3444
asg94
I9
sa(dp3445
g17
(lp3446
S'k'
asg18
S'Y'
sS'.thisRepN'
p3447
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3448
I10
sS'.thisN'
p3449
I428
sS'.thisIndex'
p3450
I0
sg15
(lp3451
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3452
S'space'
p3453
asg94
I0
sa(dp3454
g17
(lp3455
S'k'
asg18
S'N'
sS'.thisRepN'
p3456
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3457
I0
sS'.thisN'
p3458
I429
sS'.thisIndex'
p3459
I6
sg15
(lp3460
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I6
sa(dp3461
g17
(lp3462
S'd'
asg18
S'N'
sS'.thisRepN'
p3463
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3464
I1
sS'.thisN'
p3465
I430
sS'.thisIndex'
p3466
I1
sg15
(lp3467
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I1
sa(dp3468
g17
(lp3469
S'd'
asg18
S'Y'
sS'.thisRepN'
p3470
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3471
I2
sS'.thisN'
p3472
I431
sS'.thisIndex'
p3473
I8
sg15
(lp3474
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3475
S'space'
p3476
asg94
I8
sa(dp3477
g17
(lp3478
S'd'
asg18
S'Y'
sS'.thisRepN'
p3479
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3480
I3
sS'.thisN'
p3481
I432
sS'.thisIndex'
p3482
I9
sg15
(lp3483
S'k'
asg30
VF
sg16
S'N'
sg14
I9
sg19
(lp3484
S'space'
p3485
asg94
I9
sa(dp3486
g17
(lp3487
S'k'
asg18
S'Y'
sS'.thisRepN'
p3488
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3489
I4
sS'.thisN'
p3490
I433
sS'.thisIndex'
p3491
I10
sg15
(lp3492
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3493
S'space'
p3494
asg94
I10
sa(dp3495
g17
(lp3496
S'd'
asg18
S'N'
sS'.thisRepN'
p3497
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3498
I5
sS'.thisN'
p3499
I434
sS'.thisIndex'
p3500
I9
sg15
(lp3501
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I9
sa(dp3502
g17
(lp3503
S'd'
asg18
S'Y'
sS'.thisRepN'
p3504
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3505
I6
sS'.thisN'
p3506
I435
sS'.thisIndex'
p3507
I0
sg15
(lp3508
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3509
S'space'
p3510
asg94
I0
sa(dp3511
g17
(lp3512
S'k'
asg18
S'N'
sS'.thisRepN'
p3513
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3514
I7
sS'.thisN'
p3515
I436
sS'.thisIndex'
p3516
I8
sg15
(lp3517
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I8
sa(dp3518
g17
(lp3519
S'd'
asg18
S'Y'
sS'.thisRepN'
p3520
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3521
I8
sS'.thisN'
p3522
I437
sS'.thisIndex'
p3523
I2
sg15
(lp3524
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3525
S'space'
p3526
asg94
I2
sa(dp3527
g17
(lp3528
S'd'
asg18
S'N'
sS'.thisRepN'
p3529
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3530
I9
sS'.thisN'
p3531
I438
sS'.thisIndex'
p3532
I7
sg15
(lp3533
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I7
sa(dp3534
g17
(lp3535
S'd'
asg18
S'Y'
sS'.thisRepN'
p3536
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3537
I10
sS'.thisN'
p3538
I439
sS'.thisIndex'
p3539
I5
sg15
(lp3540
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3541
S'space'
p3542
asg94
I5
sa(dp3543
g17
(lp3544
S'k'
asg18
S'Y'
sS'.thisRepN'
p3545
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3546
I0
sS'.thisN'
p3547
I440
sS'.thisIndex'
p3548
I2
sg15
(lp3549
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3550
S'space'
p3551
asg94
I2
sa(dp3552
g17
(lp3553
S'd'
asg18
S'Y'
sS'.thisRepN'
p3554
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3555
I1
sS'.thisN'
p3556
I441
sS'.thisIndex'
p3557
I10
sg15
(lp3558
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3559
S'space'
p3560
asg94
I10
sa(dp3561
g17
(lp3562
S'k'
asg18
S'N'
sS'.thisRepN'
p3563
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3564
I2
sS'.thisN'
p3565
I442
sS'.thisIndex'
p3566
I4
sg15
(lp3567
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I4
sa(dp3568
g17
(lp3569
S'd'
asg18
S'Y'
sS'.thisRepN'
p3570
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3571
I3
sS'.thisN'
p3572
I443
sS'.thisIndex'
p3573
I3
sg15
(lp3574
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
(lp3575
S'space'
p3576
asg94
I3
sa(dp3577
g17
(lp3578
S'd'
asg18
S'N'
sS'.thisRepN'
p3579
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3580
I4
sS'.thisN'
p3581
I444
sS'.thisIndex'
p3582
I9
sg15
(lp3583
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I9
sa(dp3584
g17
(lp3585
S'd'
asg18
S'N'
sS'.thisRepN'
p3586
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3587
I5
sS'.thisN'
p3588
I445
sS'.thisIndex'
p3589
I0
sg15
(lp3590
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I0
sa(dp3591
g17
(lp3592
S'd'
asg18
S'N'
sS'.thisRepN'
p3593
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3594
I6
sS'.thisN'
p3595
I446
sS'.thisIndex'
p3596
I6
sg15
(lp3597
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I6
sa(dp3598
g17
(lp3599
S'k'
asg18
S'N'
sS'.thisRepN'
p3600
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3601
I7
sS'.thisN'
p3602
I447
sS'.thisIndex'
p3603
I5
sg15
(lp3604
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I5
sa(dp3605
g17
(lp3606
S'k'
asg18
S'N'
sS'.thisRepN'
p3607
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3608
I8
sS'.thisN'
p3609
I448
sS'.thisIndex'
p3610
I7
sg15
(lp3611
S'k'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I7
sa(dp3612
g17
(lp3613
S'd'
asg18
S'N'
sg22
I47
sS'.thisN'
p3614
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3615
I9
sS'.thisRepN'
p3616
I40
sg21
I46
sS'.thisIndex'
p3617
I7
sg23
I25
sg15
(lp3618
S'd'
asg30
VF
sg16
S'Y'
sg14
I9
sg19
Nsg94
I7
sa(dp3619
g17
(lp3620
S'k'
asg94
I9
sS'.thisRepN'
p3621
I40
sg30
VF
sg31
g32
sS'.thisTrialN'
p3622
I10
sS'.thisN'
p3623
I450
sS'.thisIndex'
p3624
I9
sg15
(lp3625
S'k'
asg16
S'Y'
sg14
I10
sa(dp3626
g17
(lp3627
S'd'
asg94
I1
sS'.thisRepN'
p3628
I41
sg30
VF
sg31
g32
sS'.thisTrialN'
p3629
I0
sS'.thisN'
p3630
I451
sS'.thisIndex'
p3631
I1
sg15
(lp3632
S'k'
asg16
S'N'
sg14
I10
sa(dp3633
g17
(lp3634
S'd'
asg18
S'N'
sS'.thisRepN'
p3635
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3636
I1
sS'.thisN'
p3637
I452
sS'.thisIndex'
p3638
I0
sg15
(lp3639
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I0
sa(dp3640
g17
(lp3641
S'k'
asg18
S'N'
sS'.thisRepN'
p3642
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3643
I2
sS'.thisN'
p3644
I453
sS'.thisIndex'
p3645
I6
sg15
(lp3646
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I6
sa(dp3647
g17
(lp3648
S'd'
asg18
S'N'
sS'.thisRepN'
p3649
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3650
I3
sS'.thisN'
p3651
I454
sS'.thisIndex'
p3652
I4
sg15
(lp3653
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I4
sa(dp3654
g17
(lp3655
S'd'
asg18
S'N'
sS'.thisRepN'
p3656
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3657
I4
sS'.thisN'
p3658
I455
sS'.thisIndex'
p3659
I2
sg15
(lp3660
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I2
sa(dp3661
g17
(lp3662
S'k'
asg18
S'N'
sS'.thisRepN'
p3663
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3664
I5
sS'.thisN'
p3665
I456
sS'.thisIndex'
p3666
I6
sg15
(lp3667
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I6
sa(dp3668
g17
(lp3669
S'k'
asg18
S'N'
sS'.thisRepN'
p3670
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3671
I6
sS'.thisN'
p3672
I457
sS'.thisIndex'
p3673
I1
sg15
(lp3674
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I1
sa(dp3675
g17
(lp3676
S'k'
asg18
S'N'
sS'.thisRepN'
p3677
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3678
I7
sS'.thisN'
p3679
I458
sS'.thisIndex'
p3680
I7
sg15
(lp3681
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I7
sa(dp3682
g17
(lp3683
S'd'
asg18
S'N'
sS'.thisRepN'
p3684
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3685
I8
sS'.thisN'
p3686
I459
sS'.thisIndex'
p3687
I7
sg15
(lp3688
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I7
sa(dp3689
g17
(lp3690
S'k'
asg18
S'Y'
sS'.thisRepN'
p3691
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3692
I9
sS'.thisN'
p3693
I460
sS'.thisIndex'
p3694
I4
sg15
(lp3695
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3696
S'space'
p3697
asg94
I4
sa(dp3698
g17
(lp3699
S'd'
asg18
S'Y'
sS'.thisRepN'
p3700
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3701
I10
sS'.thisN'
p3702
I461
sS'.thisIndex'
p3703
I4
sg15
(lp3704
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg19
(lp3705
S'space'
p3706
asg94
I4
sa(dp3707
g17
(lp3708
S'd'
asg18
S'Y'
sS'.thisRepN'
p3709
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3710
I0
sS'.thisN'
p3711
I462
sS'.thisIndex'
p3712
I7
sg15
(lp3713
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3714
S'space'
p3715
asg94
I7
sa(dp3716
g17
(lp3717
S'd'
asg18
S'Y'
sS'.thisRepN'
p3718
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3719
I1
sS'.thisN'
p3720
I463
sS'.thisIndex'
p3721
I0
sg15
(lp3722
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3723
S'space'
p3724
asg94
I0
sa(dp3725
g17
(lp3726
S'k'
asg18
S'N'
sS'.thisRepN'
p3727
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3728
I2
sS'.thisN'
p3729
I464
sS'.thisIndex'
p3730
I10
sg15
(lp3731
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I10
sa(dp3732
g17
(lp3733
S'd'
asg18
S'N'
sS'.thisRepN'
p3734
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3735
I3
sS'.thisN'
p3736
I465
sS'.thisIndex'
p3737
I3
sg15
(lp3738
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I3
sa(dp3739
g17
(lp3740
S'd'
asg18
S'Y'
sS'.thisRepN'
p3741
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3742
I4
sS'.thisN'
p3743
I466
sS'.thisIndex'
p3744
I8
sg15
(lp3745
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3746
S'space'
p3747
asg94
I8
sa(dp3748
g17
(lp3749
S'k'
asg18
S'Y'
sS'.thisRepN'
p3750
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3751
I5
sS'.thisN'
p3752
I467
sS'.thisIndex'
p3753
I2
sg15
(lp3754
S'd'
asg30
VF
sg16
S'N'
sg14
I10
sg19
(lp3755
S'space'
p3756
asg94
I2
sa(dp3757
g17
(lp3758
S'k'
asg18
S'N'
sS'.thisRepN'
p3759
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3760
I6
sS'.thisN'
p3761
I468
sS'.thisIndex'
p3762
I2
sg15
(lp3763
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I2
sa(dp3764
g17
(lp3765
S'd'
asg18
S'Y'
sS'.thisRepN'
p3766
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3767
I7
sS'.thisN'
p3768
I469
sS'.thisIndex'
p3769
I9
sg15
(lp3770
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3771
S'space'
p3772
asg94
I9
sa(dp3773
g17
(lp3774
S'k'
asg18
S'N'
sS'.thisRepN'
p3775
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3776
I8
sS'.thisN'
p3777
I470
sS'.thisIndex'
p3778
I0
sg15
(lp3779
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I0
sa(dp3780
g17
(lp3781
S'd'
asg18
S'Y'
sS'.thisRepN'
p3782
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3783
I9
sS'.thisN'
p3784
I471
sS'.thisIndex'
p3785
I5
sg15
(lp3786
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3787
S'space'
p3788
asg94
I5
sa(dp3789
g17
(lp3790
S'k'
asg18
S'N'
sS'.thisRepN'
p3791
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3792
I10
sS'.thisN'
p3793
I472
sS'.thisIndex'
p3794
I8
sg15
(lp3795
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I8
sa(dp3796
g17
(lp3797
S'd'
asg18
S'N'
sS'.thisRepN'
p3798
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3799
I0
sS'.thisN'
p3800
I473
sS'.thisIndex'
p3801
I3
sg15
(lp3802
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I3
sa(dp3803
g17
(lp3804
S'k'
asg18
S'N'
sS'.thisRepN'
p3805
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3806
I1
sS'.thisN'
p3807
I474
sS'.thisIndex'
p3808
I4
sg15
(lp3809
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I4
sa(dp3810
g17
(lp3811
S'd'
asg18
S'N'
sS'.thisRepN'
p3812
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3813
I2
sS'.thisN'
p3814
I475
sS'.thisIndex'
p3815
I1
sg15
(lp3816
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I1
sa(dp3817
g17
(lp3818
S'k'
asg18
S'Y'
sS'.thisRepN'
p3819
I43
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3820
I3
sS'.thisN'
p3821
I476
sS'.thisIndex'
p3822
I0
sg15
(lp3823
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I0
sa(dp3824
g17
(lp3825
S'k'
asg18
S'N'
sS'.thisRepN'
p3826
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3827
I4
sS'.thisN'
p3828
I477
sS'.thisIndex'
p3829
I6
sg15
(lp3830
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I6
sa(dp3831
g17
(lp3832
S'k'
asg18
S'Y'
sS'.thisRepN'
p3833
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3834
I5
sS'.thisN'
p3835
I478
sS'.thisIndex'
p3836
I3
sg15
(lp3837
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3838
S'space'
p3839
asg94
I3
sa(dp3840
g17
(lp3841
S'd'
asg18
S'Y'
sS'.thisRepN'
p3842
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3843
I6
sS'.thisN'
p3844
I479
sS'.thisIndex'
p3845
I7
sg15
(lp3846
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3847
S'space'
p3848
asg94
I7
sa(dp3849
g17
(lp3850
S'd'
asg18
S'N'
sS'.thisRepN'
p3851
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3852
I7
sS'.thisN'
p3853
I480
sS'.thisIndex'
p3854
I8
sg15
(lp3855
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg19
Nsg94
I8
sa(dp3856
g17
(lp3857
S'k'
asg18
S'N'
sS'.thisRepN'
p3858
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3859
I8
sS'.thisN'
p3860
I481
sS'.thisIndex'
p3861
I1
sg15
(lp3862
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I1
sa(dp3863
g17
(lp3864
S'k'
asg18
S'N'
sS'.thisRepN'
p3865
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3866
I9
sS'.thisN'
p3867
I482
sS'.thisIndex'
p3868
I7
sg15
(lp3869
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I7
sa(dp3870
g17
(lp3871
S'd'
asg18
S'Y'
sS'.thisRepN'
p3872
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3873
I10
sS'.thisN'
p3874
I483
sS'.thisIndex'
p3875
I2
sg15
(lp3876
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3877
S'space'
p3878
asg94
I2
sa(dp3879
g17
(lp3880
S'd'
asg18
S'N'
sS'.thisRepN'
p3881
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3882
I0
sS'.thisN'
p3883
I484
sS'.thisIndex'
p3884
I1
sg15
(lp3885
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I1
sa(dp3886
g17
(lp3887
S'k'
asg18
S'N'
sS'.thisRepN'
p3888
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3889
I1
sS'.thisN'
p3890
I485
sS'.thisIndex'
p3891
I9
sg15
(lp3892
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I9
sa(dp3893
g17
(lp3894
S'd'
asg18
S'Y'
sS'.thisRepN'
p3895
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3896
I2
sS'.thisN'
p3897
I486
sS'.thisIndex'
p3898
I1
sg15
(lp3899
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3900
S'k'
asg94
I1
sa(dp3901
g17
(lp3902
S'k'
asg18
S'Y'
sS'.thisRepN'
p3903
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3904
I3
sS'.thisN'
p3905
I487
sS'.thisIndex'
p3906
I3
sg15
(lp3907
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3908
S'space'
p3909
asg94
I3
sa(dp3910
g17
(lp3911
S'k'
asg18
S'N'
sS'.thisRepN'
p3912
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3913
I4
sS'.thisN'
p3914
I488
sS'.thisIndex'
p3915
I1
sg15
(lp3916
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I1
sa(dp3917
g17
(lp3918
S'd'
asg18
S'Y'
sS'.thisRepN'
p3919
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3920
I5
sS'.thisN'
p3921
I489
sS'.thisIndex'
p3922
I9
sg15
(lp3923
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3924
S'space'
p3925
asg94
I9
sa(dp3926
g17
(lp3927
S'k'
asg18
S'Y'
sS'.thisRepN'
p3928
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3929
I6
sS'.thisN'
p3930
I490
sS'.thisIndex'
p3931
I2
sg15
(lp3932
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3933
S'space'
p3934
asg94
I2
sa(dp3935
g17
(lp3936
S'd'
asg18
S'N'
sS'.thisRepN'
p3937
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3938
I7
sS'.thisN'
p3939
I491
sS'.thisIndex'
p3940
I9
sg15
(lp3941
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I9
sa(dp3942
g17
(lp3943
S'd'
asg18
S'Y'
sS'.thisRepN'
p3944
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3945
I8
sS'.thisN'
p3946
I492
sS'.thisIndex'
p3947
I3
sg15
(lp3948
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3949
S'space'
p3950
asg94
I3
sa(dp3951
g17
(lp3952
S'd'
asg18
S'Y'
sS'.thisRepN'
p3953
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3954
I9
sS'.thisN'
p3955
I493
sS'.thisIndex'
p3956
I10
sg15
(lp3957
S'k'
asg30
VF
sg16
S'N'
sg14
I10
sg19
(lp3958
S'space'
p3959
asg94
I10
sa(dp3960
g17
(lp3961
S'd'
asg18
S'N'
sS'.thisRepN'
p3962
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3963
I10
sS'.thisN'
p3964
I494
sS'.thisIndex'
p3965
I4
sg15
(lp3966
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I4
sa(dp3967
g17
(lp3968
S'k'
asg18
S'N'
sS'.thisRepN'
p3969
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3970
I0
sS'.thisN'
p3971
I495
sS'.thisIndex'
p3972
I4
sg15
(lp3973
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I4
sa(dp3974
g17
(lp3975
S'k'
asg18
S'Y'
sS'.thisRepN'
p3976
I45
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3977
I1
sS'.thisN'
p3978
I496
sS'.thisIndex'
p3979
I5
sg15
(lp3980
S'k'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3981
S'k'
asg94
I5
sa(dp3982
g17
(lp3983
S'd'
asg18
S'Y'
sS'.thisRepN'
p3984
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3985
I2
sS'.thisN'
p3986
I497
sS'.thisIndex'
p3987
I2
sg15
(lp3988
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3989
S'space'
p3990
asg94
I2
sa(dp3991
g17
(lp3992
S'd'
asg18
S'Y'
sS'.thisRepN'
p3993
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3994
I3
sS'.thisN'
p3995
I498
sS'.thisIndex'
p3996
I3
sg15
(lp3997
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
(lp3998
S'space'
p3999
asg94
I3
sa(dp4000
g17
(lp4001
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p4002
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4003
I4
sS'.thisRepN'
p4004
I45
sg21
I45
sS'.thisIndex'
p4005
I7
sg23
I21
sg15
(lp4006
S'd'
asg30
VF
sg16
S'Y'
sg14
I10
sg19
Nsg94
I7
sa(dp4007
g17
(lp4008
S'k'
asS'.thisIndex'
p4009
I3
sS'.thisRepN'
p4010
I45
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4011
I5
sS'.thisN'
p4012
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4013
S'd'
asg16
S'Y'
sg14
I11
sg94
I3
sa(dp4014
g17
(lp4015
S'k'
asS'.thisIndex'
p4016
I10
sS'.thisRepN'
p4017
I45
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4018
I6
sS'.thisN'
p4019
I501
sg25
S'Y'
sg15
(lp4020
S'd'
asg16
S'Y'
sg14
I11
sg94
I10
sa(dp4021
g17
(lp4022
S'd'
asg18
S'Y'
sS'.thisRepN'
p4023
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4024
I7
sS'.thisN'
p4025
I502
sg25
S'Y'
sg15
(lp4026
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4027
S'space'
p4028
asg94
I10
sS'.thisIndex'
p4029
I10
sa(dp4030
g17
(lp4031
S'k'
asg18
S'N'
sS'.thisRepN'
p4032
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4033
I8
sS'.thisN'
p4034
I503
sg25
S'Y'
sg15
(lp4035
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I0
sS'.thisIndex'
p4036
I0
sa(dp4037
g17
(lp4038
S'k'
asg18
S'N'
sS'.thisRepN'
p4039
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4040
I9
sS'.thisN'
p4041
I504
sg25
S'Y'
sg15
(lp4042
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p4043
I1
sa(dp4044
g17
(lp4045
S'd'
asg18
S'Y'
sS'.thisRepN'
p4046
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4047
I10
sS'.thisN'
p4048
I505
sg25
S'Y'
sg15
(lp4049
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4050
S'space'
p4051
asg94
I5
sS'.thisIndex'
p4052
I5
sa(dp4053
g17
(lp4054
S'k'
asg18
S'N'
sS'.thisRepN'
p4055
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4056
I0
sS'.thisN'
p4057
I506
sg25
S'Y'
sg15
(lp4058
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I4
sS'.thisIndex'
p4059
I4
sa(dp4060
g17
(lp4061
S'd'
asg18
S'Y'
sS'.thisRepN'
p4062
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4063
I1
sS'.thisN'
p4064
I507
sg25
S'Y'
sg15
(lp4065
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4066
S'space'
p4067
asg94
I4
sS'.thisIndex'
p4068
I4
sa(dp4069
g17
(lp4070
S'd'
asg18
S'Y'
sS'.thisRepN'
p4071
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4072
I2
sS'.thisN'
p4073
I508
sg25
S'Y'
sg15
(lp4074
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg19
(lp4075
S'space'
p4076
asg94
I3
sS'.thisIndex'
p4077
I3
sa(dp4078
g17
(lp4079
S'k'
asg18
S'N'
sS'.thisRepN'
p4080
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4081
I3
sS'.thisN'
p4082
I509
sg25
S'Y'
sg15
(lp4083
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I9
sS'.thisIndex'
p4084
I9
sa(dp4085
g17
(lp4086
S'd'
asg18
S'Y'
sS'.thisRepN'
p4087
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4088
I4
sS'.thisN'
p4089
I510
sg25
S'Y'
sg15
(lp4090
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4091
S'space'
p4092
asg94
I7
sS'.thisIndex'
p4093
I7
sa(dp4094
g17
(lp4095
S'd'
asg18
S'N'
sS'.thisRepN'
p4096
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4097
I5
sS'.thisN'
p4098
I511
sg25
S'Y'
sg15
(lp4099
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I7
sS'.thisIndex'
p4100
I7
sa(dp4101
g17
(lp4102
S'k'
asg18
S'N'
sS'.thisRepN'
p4103
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4104
I6
sS'.thisN'
p4105
I512
sg25
S'Y'
sg15
(lp4106
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I2
sS'.thisIndex'
p4107
I2
sa(dp4108
g17
(lp4109
S'k'
asg18
S'N'
sS'.thisRepN'
p4110
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4111
I7
sS'.thisN'
p4112
I513
sg25
S'Y'
sg15
(lp4113
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I10
sS'.thisIndex'
p4114
I10
sa(dp4115
g17
(lp4116
S'd'
asg18
S'Y'
sS'.thisRepN'
p4117
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4118
I8
sS'.thisN'
p4119
I514
sg25
S'Y'
sg15
(lp4120
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4121
S'space'
p4122
asg94
I0
sS'.thisIndex'
p4123
I0
sa(dp4124
g17
(lp4125
S'd'
asg18
S'Y'
sS'.thisRepN'
p4126
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4127
I9
sS'.thisN'
p4128
I515
sg25
S'Y'
sg15
(lp4129
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4130
S'space'
p4131
asg94
I8
sS'.thisIndex'
p4132
I8
sa(dp4133
g17
(lp4134
S'd'
asg18
S'N'
sS'.thisRepN'
p4135
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4136
I10
sS'.thisN'
p4137
I516
sg25
S'Y'
sg15
(lp4138
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I10
sS'.thisIndex'
p4139
I10
sa(dp4140
g17
(lp4141
S'k'
asg18
S'N'
sS'.thisRepN'
p4142
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4143
I0
sS'.thisN'
p4144
I517
sg25
S'Y'
sg15
(lp4145
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I8
sS'.thisIndex'
p4146
I8
sa(dp4147
g17
(lp4148
S'k'
asg18
S'Y'
sS'.thisRepN'
p4149
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4150
I1
sS'.thisN'
p4151
I518
sg25
S'Y'
sg15
(lp4152
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4153
S'space'
p4154
asg94
I8
sS'.thisIndex'
p4155
I8
sa(dp4156
g17
(lp4157
S'd'
asg18
S'N'
sS'.thisRepN'
p4158
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4159
I2
sS'.thisN'
p4160
I519
sg25
S'Y'
sg15
(lp4161
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg19
Nsg94
I9
sS'.thisIndex'
p4162
I9
sa(dp4163
g17
(lp4164
S'd'
asg18
S'N'
sS'.thisRepN'
p4165
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4166
I3
sS'.thisN'
p4167
I520
sg25
S'Y'
sg15
(lp4168
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I9
sS'.thisIndex'
p4169
I9
sa(dp4170
g17
(lp4171
S'k'
asg18
S'N'
sS'.thisRepN'
p4172
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4173
I4
sS'.thisN'
p4174
I521
sg25
S'Y'
sg15
(lp4175
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p4176
I1
sa(dp4177
g17
(lp4178
S'd'
asg18
S'N'
sS'.thisRepN'
p4179
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4180
I5
sS'.thisN'
p4181
I522
sg25
S'Y'
sg15
(lp4182
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I3
sS'.thisIndex'
p4183
I3
sa(dp4184
g17
(lp4185
S'd'
asg18
S'N'
sS'.thisRepN'
p4186
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4187
I6
sS'.thisN'
p4188
I523
sg25
S'Y'
sg15
(lp4189
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I4
sS'.thisIndex'
p4190
I4
sa(dp4191
g17
(lp4192
S'k'
asg18
S'Y'
sS'.thisRepN'
p4193
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4194
I7
sS'.thisN'
p4195
I524
sg25
S'Y'
sg15
(lp4196
S'k'
asg30
VF
sg16
S'N'
sg14
I11
sg19
(lp4197
S'space'
p4198
asg94
I8
sS'.thisIndex'
p4199
I8
sa(dp4200
g17
(lp4201
S'd'
asg18
S'N'
sS'.thisRepN'
p4202
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4203
I8
sS'.thisN'
p4204
I525
sg25
S'Y'
sg15
(lp4205
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I5
sS'.thisIndex'
p4206
I5
sa(dp4207
g17
(lp4208
S'd'
asg18
S'Y'
sS'.thisRepN'
p4209
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4210
I9
sS'.thisN'
p4211
I526
sg25
S'Y'
sg15
(lp4212
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4213
S'space'
p4214
asg94
I0
sS'.thisIndex'
p4215
I0
sa(dp4216
g17
(lp4217
S'k'
asg18
S'Y'
sS'.thisRepN'
p4218
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4219
I10
sS'.thisN'
p4220
I527
sg25
S'Y'
sg15
(lp4221
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4222
S'space'
p4223
asg94
I5
sS'.thisIndex'
p4224
I5
sa(dp4225
g17
(lp4226
S'k'
asg18
S'N'
sS'.thisRepN'
p4227
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4228
I0
sS'.thisN'
p4229
I528
sg25
S'Y'
sg15
(lp4230
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I2
sS'.thisIndex'
p4231
I2
sa(dp4232
g17
(lp4233
S'd'
asg18
S'N'
sS'.thisRepN'
p4234
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4235
I1
sS'.thisN'
p4236
I529
sg25
S'Y'
sg15
(lp4237
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I10
sS'.thisIndex'
p4238
I10
sa(dp4239
g17
(lp4240
S'k'
asg18
S'N'
sS'.thisRepN'
p4241
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4242
I2
sS'.thisN'
p4243
I530
sg25
S'Y'
sg15
(lp4244
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I9
sS'.thisIndex'
p4245
I9
sa(dp4246
g17
(lp4247
S'd'
asg18
S'Y'
sS'.thisRepN'
p4248
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4249
I3
sS'.thisN'
p4250
I531
sg25
S'Y'
sg15
(lp4251
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4252
S'space'
p4253
asg94
I3
sS'.thisIndex'
p4254
I3
sa(dp4255
g17
(lp4256
S'k'
asg18
S'Y'
sS'.thisRepN'
p4257
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4258
I4
sS'.thisN'
p4259
I532
sg25
S'Y'
sg15
(lp4260
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4261
S'space'
p4262
asg94
I7
sS'.thisIndex'
p4263
I7
sa(dp4264
g17
(lp4265
S'k'
asg18
S'N'
sS'.thisRepN'
p4266
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4267
I5
sS'.thisN'
p4268
I533
sg25
S'Y'
sg15
(lp4269
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I0
sS'.thisIndex'
p4270
I0
sa(dp4271
g17
(lp4272
S'd'
asg18
S'N'
sS'.thisRepN'
p4273
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4274
I6
sS'.thisN'
p4275
I534
sg25
S'Y'
sg15
(lp4276
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I7
sS'.thisIndex'
p4277
I7
sa(dp4278
g17
(lp4279
S'k'
asg18
S'N'
sS'.thisRepN'
p4280
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4281
I7
sS'.thisN'
p4282
I535
sg25
S'Y'
sg15
(lp4283
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p4284
I1
sa(dp4285
g17
(lp4286
S'd'
asg18
S'Y'
sS'.thisRepN'
p4287
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4288
I8
sS'.thisN'
p4289
I536
sg25
S'Y'
sg15
(lp4290
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg19
(lp4291
S'space'
p4292
asg94
I7
sS'.thisIndex'
p4293
I7
sa(dp4294
g17
(lp4295
S'd'
asg18
S'Y'
sS'.thisRepN'
p4296
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4297
I9
sS'.thisN'
p4298
I537
sg25
S'Y'
sg15
(lp4299
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4300
S'space'
p4301
asg94
I6
sS'.thisIndex'
p4302
I6
sa(dp4303
g17
(lp4304
S'd'
asg18
S'Y'
sS'.thisRepN'
p4305
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4306
I10
sS'.thisN'
p4307
I538
sg25
S'Y'
sg15
(lp4308
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4309
S'space'
p4310
asg94
I4
sS'.thisIndex'
p4311
I4
sa(dp4312
g17
(lp4313
S'k'
asg18
S'Y'
sS'.thisRepN'
p4314
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4315
I0
sS'.thisN'
p4316
I539
sg25
S'Y'
sg15
(lp4317
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4318
S'space'
p4319
asg94
I5
sS'.thisIndex'
p4320
I5
sa(dp4321
g17
(lp4322
S'd'
asg18
S'Y'
sS'.thisRepN'
p4323
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4324
I1
sS'.thisN'
p4325
I540
sg25
S'Y'
sg15
(lp4326
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg19
Nsg94
I0
sS'.thisIndex'
p4327
I0
sa(dp4328
g17
(lp4329
S'k'
asg18
S'Y'
sS'.thisRepN'
p4330
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4331
I2
sS'.thisN'
p4332
I541
sg25
S'Y'
sg15
(lp4333
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I6
sS'.thisIndex'
p4334
I6
sa(dp4335
g17
(lp4336
S'd'
asg18
S'N'
sS'.thisRepN'
p4337
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4338
I3
sS'.thisN'
p4339
I542
sg25
S'Y'
sg15
(lp4340
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I4
sS'.thisIndex'
p4341
I4
sa(dp4342
g17
(lp4343
S'd'
asg18
S'Y'
sS'.thisRepN'
p4344
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4345
I4
sS'.thisN'
p4346
I543
sg25
S'Y'
sg15
(lp4347
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4348
S'space'
p4349
asg94
I7
sS'.thisIndex'
p4350
I7
sa(dp4351
g17
(lp4352
S'k'
asg18
S'Y'
sS'.thisRepN'
p4353
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4354
I5
sS'.thisN'
p4355
I544
sg25
S'Y'
sg15
(lp4356
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4357
S'space'
p4358
asg94
I8
sS'.thisIndex'
p4359
I8
sa(dp4360
g17
(lp4361
S'd'
asg18
S'Y'
sS'.thisRepN'
p4362
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4363
I6
sS'.thisN'
p4364
I545
sg25
S'Y'
sg15
(lp4365
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4366
S'space'
p4367
asg94
I8
sS'.thisIndex'
p4368
I8
sa(dp4369
g17
(lp4370
S'd'
asg18
S'N'
sS'.thisRepN'
p4371
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4372
I7
sS'.thisN'
p4373
I546
sg25
S'Y'
sg15
(lp4374
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I10
sS'.thisIndex'
p4375
I10
sa(dp4376
g17
(lp4377
S'd'
asg18
S'N'
sS'.thisRepN'
p4378
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4379
I8
sS'.thisN'
p4380
I547
sg25
S'Y'
sg15
(lp4381
S'd'
asg30
VF
sg16
S'N'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p4382
I1
sa(dp4383
g17
(lp4384
S'k'
asg18
S'Y'
sS'.thisRepN'
p4385
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4386
I9
sS'.thisN'
p4387
I548
sg25
S'Y'
sg15
(lp4388
S'd'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
(lp4389
S'space'
p4390
asg94
I5
sS'.thisIndex'
p4391
I5
sa(dp4392
g17
(lp4393
S'd'
asg18
S'N'
sg22
I46
sg26
S'Y'
sS'.thisN'
p4394
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4395
I10
sS'.thisRepN'
p4396
I49
sg21
I43
sg25
S'Y'
sg23
I23
sg15
(lp4397
S'k'
asg30
VF
sg16
S'Y'
sg14
I11
sg19
Nsg94
I8
sS'.thisIndex'
p4398
I8
sa(dp4399
S'.thisIndex'
p4400
I0
sS'.thisRepN'
p4401
I50
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4402
I0
sS'.thisN'
p4403
I550
sg25
S'Y'
sg15
Nsg16
g99
sg14
I12
sg94
I0
sa(dp4404
g17
(lp4405
S'd'
asS'.thisIndex'
p4406
I8
sS'.thisRepN'
p4407
I50
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4408
I1
sS'.thisN'
p4409
I551
sg25
S'Y'
sg15
(lp4410
S'k'
asg16
S'Y'
sg14
I12
sg94
I8
sa(dp4411
g17
(lp4412
S'k'
asg18
S'Y'
sS'.thisRepN'
p4413
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4414
I2
sS'.thisN'
p4415
I552
sg25
S'Y'
sg15
(lp4416
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4417
I3
sa(dp4418
g17
(lp4419
S'k'
asg18
S'N'
sS'.thisRepN'
p4420
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4421
I3
sS'.thisN'
p4422
I553
sg25
S'Y'
sg15
(lp4423
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I0
sS'.thisIndex'
p4424
I0
sa(dp4425
g17
(lp4426
S'k'
asg18
S'N'
sS'.thisRepN'
p4427
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4428
I4
sS'.thisN'
p4429
I554
sg25
S'Y'
sg15
(lp4430
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4431
I3
sa(dp4432
g17
(lp4433
S'd'
asg18
S'N'
sS'.thisRepN'
p4434
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4435
I5
sS'.thisN'
p4436
I555
sg25
S'Y'
sg15
(lp4437
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I7
sS'.thisIndex'
p4438
I7
sa(dp4439
g17
(lp4440
S'k'
asg18
S'N'
sS'.thisRepN'
p4441
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4442
I6
sS'.thisN'
p4443
I556
sg25
S'Y'
sg15
(lp4444
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I8
sS'.thisIndex'
p4445
I8
sa(dp4446
g17
(lp4447
S'd'
asg18
S'Y'
sS'.thisRepN'
p4448
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4449
I7
sS'.thisN'
p4450
I557
sg25
S'Y'
sg15
(lp4451
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4452
S'space'
p4453
asg94
I9
sS'.thisIndex'
p4454
I9
sa(dp4455
g17
(lp4456
S'd'
asg18
S'N'
sS'.thisRepN'
p4457
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4458
I8
sS'.thisN'
p4459
I558
sg25
S'Y'
sg15
(lp4460
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I0
sS'.thisIndex'
p4461
I0
sa(dp4462
g17
(lp4463
S'k'
asg18
S'N'
sS'.thisRepN'
p4464
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4465
I9
sS'.thisN'
p4466
I559
sg25
S'Y'
sg15
(lp4467
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I5
sS'.thisIndex'
p4468
I5
sa(dp4469
g17
(lp4470
S'k'
asg18
S'Y'
sS'.thisRepN'
p4471
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4472
I10
sS'.thisN'
p4473
I560
sg25
S'Y'
sg15
(lp4474
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4475
S'space'
p4476
asg94
I10
sS'.thisIndex'
p4477
I10
sa(dp4478
g17
(lp4479
S'd'
asg18
S'Y'
sS'.thisRepN'
p4480
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4481
I0
sS'.thisN'
p4482
I561
sg25
S'Y'
sg15
(lp4483
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4484
S'space'
p4485
asg94
I3
sS'.thisIndex'
p4486
I3
sa(dp4487
g17
(lp4488
S'k'
asg18
S'Y'
sS'.thisRepN'
p4489
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4490
I1
sS'.thisN'
p4491
I562
sg25
S'Y'
sg15
(lp4492
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4493
S'space'
p4494
asg94
I3
sS'.thisIndex'
p4495
I3
sa(dp4496
g17
(lp4497
S'd'
asg18
S'Y'
sS'.thisRepN'
p4498
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4499
I2
sS'.thisN'
p4500
I563
sg25
S'Y'
sg15
(lp4501
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4502
S'space'
p4503
asg94
I4
sS'.thisIndex'
p4504
I4
sa(dp4505
g17
(lp4506
S'd'
asg18
S'N'
sS'.thisRepN'
p4507
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4508
I3
sS'.thisN'
p4509
I564
sg25
S'Y'
sg15
(lp4510
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg19
Nsg94
I5
sS'.thisIndex'
p4511
I5
sa(dp4512
g17
(lp4513
S'k'
asg18
S'N'
sS'.thisRepN'
p4514
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4515
I4
sS'.thisN'
p4516
I565
sg25
S'Y'
sg15
(lp4517
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I6
sS'.thisIndex'
p4518
I6
sa(dp4519
g17
(lp4520
S'd'
asg18
S'N'
sS'.thisRepN'
p4521
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4522
I5
sS'.thisN'
p4523
I566
sg25
S'Y'
sg15
(lp4524
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I5
sS'.thisIndex'
p4525
I5
sa(dp4526
g17
(lp4527
S'k'
asg18
S'N'
sS'.thisRepN'
p4528
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4529
I6
sS'.thisN'
p4530
I567
sg25
S'Y'
sg15
(lp4531
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I6
sS'.thisIndex'
p4532
I6
sa(dp4533
g17
(lp4534
S'd'
asg18
S'Y'
sS'.thisRepN'
p4535
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4536
I7
sS'.thisN'
p4537
I568
sg25
S'Y'
sg15
(lp4538
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4539
S'space'
p4540
asg94
I0
sS'.thisIndex'
p4541
I0
sa(dp4542
g17
(lp4543
S'k'
asg18
S'Y'
sS'.thisRepN'
p4544
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4545
I8
sS'.thisN'
p4546
I569
sg25
S'Y'
sg15
(lp4547
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg19
(lp4548
S'space'
p4549
asg94
I10
sS'.thisIndex'
p4550
I10
sa(dp4551
g17
(lp4552
S'd'
asg18
S'N'
sS'.thisRepN'
p4553
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4554
I9
sS'.thisN'
p4555
I570
sg25
S'Y'
sg15
(lp4556
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I6
sS'.thisIndex'
p4557
I6
sa(dp4558
g17
(lp4559
S'k'
asg18
S'Y'
sS'.thisRepN'
p4560
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4561
I10
sS'.thisN'
p4562
I571
sg25
S'Y'
sg15
(lp4563
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4564
S'space'
p4565
asg94
I3
sS'.thisIndex'
p4566
I3
sa(dp4567
g17
(lp4568
S'k'
asg18
S'Y'
sS'.thisRepN'
p4569
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4570
I0
sS'.thisN'
p4571
I572
sg25
S'Y'
sg15
(lp4572
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4573
S'space'
p4574
asg94
I8
sS'.thisIndex'
p4575
I8
sa(dp4576
g17
(lp4577
S'k'
asg18
S'N'
sS'.thisRepN'
p4578
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4579
I1
sS'.thisN'
p4580
I573
sg25
S'Y'
sg15
(lp4581
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I0
sS'.thisIndex'
p4582
I0
sa(dp4583
g17
(lp4584
S'd'
asg18
S'Y'
sS'.thisRepN'
p4585
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4586
I2
sS'.thisN'
p4587
I574
sg25
S'Y'
sg15
(lp4588
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4589
S'space'
p4590
asg94
I5
sS'.thisIndex'
p4591
I5
sa(dp4592
g17
(lp4593
S'k'
asg18
S'Y'
sS'.thisRepN'
p4594
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4595
I3
sS'.thisN'
p4596
I575
sg25
S'Y'
sg15
(lp4597
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4598
S'space'
p4599
asg94
I2
sS'.thisIndex'
p4600
I2
sa(dp4601
g17
(lp4602
S'd'
asg18
S'Y'
sS'.thisRepN'
p4603
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4604
I4
sS'.thisN'
p4605
I576
sg25
S'Y'
sg15
(lp4606
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4607
S'space'
p4608
asg94
I9
sS'.thisIndex'
p4609
I9
sa(dp4610
g17
(lp4611
S'd'
asg18
S'N'
sS'.thisRepN'
p4612
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4613
I5
sS'.thisN'
p4614
I577
sg25
S'Y'
sg15
(lp4615
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I10
sS'.thisIndex'
p4616
I10
sa(dp4617
g17
(lp4618
S'd'
asg18
S'N'
sS'.thisRepN'
p4619
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4620
I6
sS'.thisN'
p4621
I578
sg25
S'Y'
sg15
(lp4622
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I6
sS'.thisIndex'
p4623
I6
sa(dp4624
g17
(lp4625
S'k'
asg18
S'N'
sS'.thisRepN'
p4626
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4627
I7
sS'.thisN'
p4628
I579
sg25
S'Y'
sg15
(lp4629
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I1
sS'.thisIndex'
p4630
I1
sa(dp4631
g17
(lp4632
S'd'
asg18
S'N'
sS'.thisRepN'
p4633
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4634
I8
sS'.thisN'
p4635
I580
sg25
S'Y'
sg15
(lp4636
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I1
sS'.thisIndex'
p4637
I1
sa(dp4638
g17
(lp4639
S'd'
asg18
S'N'
sS'.thisRepN'
p4640
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4641
I9
sS'.thisN'
p4642
I581
sg25
S'Y'
sg15
(lp4643
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I8
sS'.thisIndex'
p4644
I8
sa(dp4645
g17
(lp4646
S'k'
asg18
S'N'
sS'.thisRepN'
p4647
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4648
I10
sS'.thisN'
p4649
I582
sg25
S'Y'
sg15
(lp4650
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I1
sS'.thisIndex'
p4651
I1
sa(dp4652
g17
(lp4653
S'k'
asg18
S'N'
sS'.thisRepN'
p4654
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4655
I0
sS'.thisN'
p4656
I583
sg25
S'Y'
sg15
(lp4657
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I0
sS'.thisIndex'
p4658
I0
sa(dp4659
g17
(lp4660
S'd'
asg18
S'N'
sS'.thisRepN'
p4661
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4662
I1
sS'.thisN'
p4663
I584
sg25
S'Y'
sg15
(lp4664
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4665
I3
sa(dp4666
g17
(lp4667
S'k'
asg18
S'Y'
sS'.thisRepN'
p4668
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4669
I2
sS'.thisN'
p4670
I585
sg25
S'Y'
sg15
(lp4671
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4672
S'space'
p4673
asg94
I3
sS'.thisIndex'
p4674
I3
sa(dp4675
g17
(lp4676
S'k'
asg18
S'N'
sS'.thisRepN'
p4677
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4678
I3
sS'.thisN'
p4679
I586
sg25
S'Y'
sg15
(lp4680
S'k'
asg30
VF
sg16
S'N'
sg14
I12
sg19
Nsg94
I7
sS'.thisIndex'
p4681
I7
sa(dp4682
g17
(lp4683
S'd'
asg18
S'N'
sS'.thisRepN'
p4684
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4685
I4
sS'.thisN'
p4686
I587
sg25
S'Y'
sg15
(lp4687
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4688
I3
sa(dp4689
g17
(lp4690
S'k'
asg18
S'N'
sS'.thisRepN'
p4691
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4692
I5
sS'.thisN'
p4693
I588
sg25
S'Y'
sg15
(lp4694
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I4
sS'.thisIndex'
p4695
I4
sa(dp4696
g17
(lp4697
S'd'
asg18
S'Y'
sS'.thisRepN'
p4698
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4699
I6
sS'.thisN'
p4700
I589
sg25
S'Y'
sg15
(lp4701
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4702
S'space'
p4703
asg94
I3
sS'.thisIndex'
p4704
I3
sa(dp4705
g17
(lp4706
S'd'
asg18
S'Y'
sS'.thisRepN'
p4707
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4708
I7
sS'.thisN'
p4709
I590
sg25
S'Y'
sg15
(lp4710
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4711
S'space'
p4712
asg94
I0
sS'.thisIndex'
p4713
I0
sa(dp4714
g17
(lp4715
S'd'
asg18
S'N'
sS'.thisRepN'
p4716
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4717
I8
sS'.thisN'
p4718
I591
sg25
S'Y'
sg15
(lp4719
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg19
Nsg94
I10
sS'.thisIndex'
p4720
I10
sa(dp4721
g17
(lp4722
S'k'
asg18
S'Y'
sS'.thisRepN'
p4723
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4724
I9
sS'.thisN'
p4725
I592
sg25
S'Y'
sg15
(lp4726
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4727
S'space'
p4728
asg94
I6
sS'.thisIndex'
p4729
I6
sa(dp4730
g17
(lp4731
S'd'
asg18
S'Y'
sS'.thisRepN'
p4732
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4733
I10
sS'.thisN'
p4734
I593
sg25
S'Y'
sg15
(lp4735
S'd'
asg30
VF
sg16
S'N'
sg14
I12
sg19
(lp4736
S'space'
p4737
asg94
I5
sS'.thisIndex'
p4738
I5
sa(dp4739
g17
(lp4740
S'k'
asg18
S'Y'
sS'.thisRepN'
p4741
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4742
I0
sS'.thisN'
p4743
I594
sg25
S'Y'
sg15
(lp4744
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4745
S'space'
p4746
asg94
I10
sS'.thisIndex'
p4747
I10
sa(dp4748
g17
(lp4749
S'd'
asg18
S'Y'
sS'.thisRepN'
p4750
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4751
I1
sS'.thisN'
p4752
I595
sg25
S'Y'
sg15
(lp4753
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4754
S'space'
p4755
asg94
I8
sS'.thisIndex'
p4756
I8
sa(dp4757
g17
(lp4758
S'k'
asg18
S'N'
sS'.thisRepN'
p4759
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4760
I2
sS'.thisN'
p4761
I596
sg25
S'Y'
sg15
(lp4762
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I4
sS'.thisIndex'
p4763
I4
sa(dp4764
g17
(lp4765
S'k'
asg18
S'Y'
sS'.thisRepN'
p4766
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4767
I3
sS'.thisN'
p4768
I597
sg25
S'Y'
sg15
(lp4769
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4770
S'space'
p4771
asg94
I2
sS'.thisIndex'
p4772
I2
sa(dp4773
g17
(lp4774
S'd'
asg18
S'N'
sS'.thisRepN'
p4775
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4776
I4
sS'.thisN'
p4777
I598
sg25
S'Y'
sg15
(lp4778
S'k'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
Nsg94
I4
sS'.thisIndex'
p4779
I4
sa(dp4780
g17
(lp4781
S'k'
asg18
S'Y'
sg22
I47
sg26
S'Y'
sS'.thisN'
p4782
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4783
I5
sS'.thisRepN'
p4784
I54
sg21
I44
sg25
S'Y'
sg23
I22
sg15
(lp4785
S'd'
asg30
VF
sg16
S'Y'
sg14
I12
sg19
(lp4786
S'space'
p4787
asg94
I6
sS'.thisIndex'
p4788
I6
sasS'loops'
p4789
(lp4790
g1
(g35
g3
NtRp4791
(dp4792
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4793
sg40
(lp4794
sg41
I73201968
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4795
g48
g49
(g50
g51
g52
S'b'
tRp4796
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4797
(I1
(I600
I1
tg55
I00
S'\x00\x00\x8fC\x00\x00>C\x00\x80\xc9C\x00\x80\xa9C\x00\x00\xdeC\x00\x00`A\x00\x00\nC\x00\x80\x89C\x00\x80\xa1C\x00\x00KC\x00\x00\x93C\x00\x00\x1cC\x00\x00sC\x00\x00]C\x00\x80\xb1C\x00\x00\x07C\x00\x00\x00C\x00\x80\xd5C\x00\x00\xe4B\x00\xc0\x0cD\x00\x00\x15C\x00\x00\xbfC\x00\x00IC\x00\x00SC\x00\x80\xefC\x00\x00\x0bC\x00\x00\x86C\x00\x00\x81C\x00\x00\xd3C\x00\x80\xcdC\x00\x00\xbcC\x00\x005C\x00\x00EC\x00\x00\xdfC\x00\x00\x94B\x00\x80\xebC\x00\x00!C\x00\x80\xaaC\x00\x00lB\x00\x80\xffC\x00\x80\x05D\x00\x00\xc2C\x00\x00\'C\x00\x80\xedC\x00@\x14D\x00\x00iC\x00\x001C\x00\x00wC\x00\x00\xfaB\x00\x00\x11C\x00\x00(C\x00\x80\x9bC\x00\x00AC\x00\x00,B\x00\x00\x95C\x00\x00VC\x00\x00\xd8B\x00\x00BC\x00\x00\xadC\x00\x00rC\x00\x00\xf3C\x00\x80\x84C\x00\x00\x10C\x00\x00\x01C\x00\x80\xddC\x00\x00\xe0@\x00\x80\xbcC\x00\x00*C\x00\x00uC\x00\x00\xffC\x00\x00DB\x00\x80\rD\x00\x00\xcdC\x00\x80\xa4C\x00\x00\xa8B\x00\x00\xaaC\x00\x80\x03D\x00\x00\x12D\x00\x00\x14B\x00\x00\xf8B\x00\x80\x13D\x00\x00LB\x00\x00YC\x00\x00\xc1C\x00\x00\x0eC\x00\x008C\x00@\x08D\x00\x00\xf7C\x00\x00\xe9C\x00\x80\xa2C\x00\x80\xa5C\x00\x00\x9aC\x00\x00,C\x00\x80\xdbC\x00\x80\xd9C\x00\x00\x82B\x00\x00\x02C\x00\xc0\x12D\x00\x00{C\x00\x00@@\x00\x00\xa7C\x00\x00\xbeC\x00\x00\xe7C\x00\x00\xb4C\x00\x00\xb7C\x00\x80\xf1C\x00\x00\xc0A\x00\x00\x97C\x00\x00\xa2C\x00\x00\x11D\x00\x00\xf0A\x00\x003C\x00\x00\xf0C\x00\xc0\x08D\x00\x00\x87C\x00\x80\x10D\x00\x80\xdcC\x00\x00\xd4B\x00\x80\xa0C\x00\x80\xc3C\x00\x80\x9aC\x00\x00\xaaB\x00\x00\x1bC\x00\x00\xc0B\x00@\x03D\x00\x80\xecC\x00\x00\x0cB\x00\x80\xe5C\x00\x00\x83C\x00\x80\xb7C\x00\x00\x0cC\x00\x00xC\x00\x00\xe0B\x00\x80\xd4C\x00\x80\xa3C\x00\xc0\x04D\x00@\x13D\x00\x00\xe2C\x00\x00\x9cB\x00\x00\x85C\x00\x00\x8aC\x00@\x0bD\x00\x00\xdeB\x00\x00eC\x00\x80\xf8C\x00\x00\x18C\x00\xc0\tD\x00\x00\xe6B\x00\x80\xd7C\x00\x80\xdeC\x00\x80\x0bD\x00\x00tB\x00\x00\x06D\x00\x00\x01D\x00\x00GC\x00\x00\xc3C\x00\x80\x06D\x00\x80\x08D\x00\x00\xd8A\x00\x00\xa3C\x00\x00\xbaC\x00\x80\xb2C\x00\x00\xa5C\x00\x80\xe7C\x00\x00\x98C\x00@\x04D\x00\x00\xdbC\x00\x80\x8fC\x00\xc0\x13D\x00\x80\xb9C\x00\x00\x04B\x00\x00\xc6B\x00\x80\xe6C\x00\x00\xa8C\x00\x80\tD\x00\x00\x80B\x00\x00\xd7C\x00@\tD\x00\x80\xeaC\x00\x00\x88A\x00\x00\x88B\x00\x80\xa6C\x00\x00\xd0A\x00@\x06D\x00\x00\xd0C\x00\x80\xabC\x00\x00\x99C\x00\x00\xc9C\x00\x00\xcaB\x00\x00\x00A\x00\x00\x17C\x00\x80\xf9C\x00\x00\xabC\x00\x00^C\x00\x00\x18B\x00\x80\x80C\x00\xc0\x02D\x00\x80\x9fC\x00\x00<B\x00\x00_C\x00\x00OC\x00\x00\rD\x00\x80\x0eD\x00\xc0\x01D\x00\x80\xf5C\x00\x80\xcbC\x00\x00TB\x00\x00\xf6C\x00\x80\xd1C\x00\x80\x82C\x00\x00\xa0@\x00\xc0\nD\x00\x00RC\x00\x80\x98C\x00\x00@B\x00\x00\xfeC\x00\x00\x90C\x00\x00\xb0B\x00\x00\x07D\x00\x00vC\x00\x00\\C\x00@\x10D\x00\x80\x93C\x00\x80\xdaC\x00\x00jC\x00\x00pA\x00\x00\xf9C\x00\x80\xe0C\x00@\x0cD\x00\x80\x02D\x00\x00tC\x00\x80\x95C\x00\xc0\x07D\x00\x00\x1cB\x00\x00\x08C\x00\x00HB\x00\x004C\x00\x00cC\x00\xc0\x00D\x00\x00$B\x00\x80\x15D\x00\x00/C\x00\x00\xfbC\x00\x00\x84C\x00\x00PA\x00\x80\x0fD\x00\x00\x80?\x00\x00\xd9C\x00\x00CC\x00\x00\xf2C\x00\x00pB\x00\x80\xa7C\x00\x80\xa8C\x00\x00nC\x00\x00\x7fC\x00\x80\xf4C\x00\x80\xaeC\x00\x80\x00D\x00\x00\x00B\x00\x00\xccB\x00\x80\xf6C\x00\x80\xe1C\x00\x00#C\x00\x00\x10D\x00\x00DC\x00\x00\x00@\x00\x00\x8dC\x00\x00hC\x00\x00\xb2B\x00\x00\x9eC\x00\x00:C\x00\x00\x8eB\x00\xc0\x14D\x00\x80\xadC\x00\x00\xd8C\x00\x00\x9bC\x00\x00\xdcB\x00\x00\xc8C\x00\x00kC\x00\x80\xe3C\x00\x00\x8cC\x00\x00\xb5C\x00\x00\xd1C\x00\x00\xb3C\x00\x80\xfcC\x00\x00\xe3C\x00@\x11D\x00\x00\x0eD\x00\x00\xa2B\x00\x80\xfdC\x00\x00\xceB\x00\x00\xb8B\x00\x00\xbcB\x00\x80\x07D\x00\x80\x9dC\x00\x00\x90A\x00\x00\x02D\x00\x00\x84B\x00\x80\x94C\x00\x80\xe8C\x00\x00\xb4B\x00\x80\x11D\x00\x80\x14D\x00\x80\x87C\x00\x80\xc0C\x00\xc0\x0bD\x00\x00\xcbC\x00\x00\xbaB\x00\x80\x90C\x00\x00\xa6C\x00\x80\x0cD\x00\x00[C\x00\x00\xbeB\x00\x00hB\x00\x00\xb2C\x00\x00?C\x00\x80\xeeC\x00\x00TC\x00\x00dC\x00\x00\xb8A\x00\x00\xb9C\x00\x00\xccC\x00\xc0\x0eD\x00\x80\x81C\x00\x00\xf1C\x00\x00+C\x00@\nD\x00\x00\x06C\x00\x00\xfcB\x00\x00PC\x00\x00\x03C\x00\x80\xf0C\x00\x00\x12C\x00\x00aC\x00\x00\xeeB\x00\x00\x1eC\x00\x80\xcfC\x00\x00"C\x00\x80\xe2C\x00\x80\xbdC\x00\x80\xc6C\x00\x80\xceC\x00\x00xB\x00\x80\xd6C\x00\x00\xe2B\x00\x00\x0fC\x00\x80\xfbC\x00\x00\x0bD\x00\x80\x12D\x00\x00\xcfC\x00\x00<C\x00\x80\xb6C\x00\x00\x98B\x00\x00\xa0C\x00\x002C\x00\x80\xbeC\x00\x80\x85C\x00\x00\x8bC\x00\x00\xf8A\x00\x00\xc6C\x00\x00`C\x00\x00\xafC\x00\x00`B\x00\x80\xc5C\x00\x80\xdfC\x00\x00 A\x00\x00\xa4B\x00\x80\xc1C\x00\x00\xe8A\x00\x80\x99C\x00\x00yC\x00\x00\tC\x00\x00\xebC\x00\x00PB\x00\x00\x88C\x00\x00\xfcC\x00\x00\x08D\x00\x00\xeaB\x00\x80\x8eC\x00@\x05D\x00\x009C\x00\x00\xb0C\x00\x008B\x00\x00JC\x00\x00\xacC\x00\x00\xe0C\x00\x00;C\x00\x00\xcaC\x00\x000A\x00\x00\xb1C\x00\xc0\x11D\x00\x80\xfaC\x00\x00&C\x00\x00\xd6B\x00\x00\xe8C\x00\xc0\x03D\x00\x00\xceC\x00\x00\x8eC\x00\x80\xd0C\x00\x00\x0fD\x00\x00\xecC\x00@\x02D\x00\x00=C\x00\x00\x9eB\x00\x00\xecB\x00\x80\xd3C\x00\x00\x8aB\x00\x00\x00\x00\x00\x80\xbfC\x00\x00\x96C\x00\x80\xd2C\x00\x00\xc4C\x00\x00\xc0C\x00\x80\x92C\x00\x00QC\x00\x00\x92C\x00\x00\xb6C\x00\x00\xdcC\x00\x000B\x00\x00\xf5C\x00\x80\xc7C\x00\x00WC\x00\x00-C\x00\x80\x97C\x00\x00mC\x00\x00\xa6B\x00\x80\xf2C\x00\x00@C\x00\x80\xccC\x00\x00\xd2B\x00\x80\xb0C\x00\x00\xeeC\x00\x000C\x00\x80\xc2C\x00\x80\x8dC\x00\x80\x88C\x00\x00\xd2C\x00\x80\x8bC\x00\x80\xcaC\x00\x00\x9aB\x00\x00bC\x00\x00qC\x00\x00XB\x00\x00\xfaC\x00\x00\xe0A\x00\x80\xd8C\x00\x00MC\x00\x00\x92B\x00\x00\xfdC\x00\x00\x89C\x00\x00oC\x00@\x07D\x00\x00XC\x00\x00\xb8C\x00\xc0\x10D\x00\x80\x83C\x00\x00\xc2B\x00\x00\xa0B\x00\x00%C\x00\x80\xe9C\x00\x00\x94C\x00\x00\xddC\x00\x00UC\x00\x00\xf0B\x00\x00\x04D\x00\x00\xc5C\x00\x00.C\x00\x00\xf4B\x00\x00\xbdC\x00\x00\x1fC\x00\x00\x98A\x00\x00\x80C\x00\x80\xe4C\x00\x00\x00D\x00@\x15D\x00\x80\xb8C\x00\x00\x9dC\x00\x00\x14C\x00\x80\xf3C\x00\x80\xacC\x00\x00\xaeB\x00\x00\xd5C\x00\x80\x91C\x00\x80\xfeC\x00\x00(B\x00\x00|C\x00\x00\xd4C\x00\x00\x86B\x00\x00\xb0A\x00\x004B\x00\x00\x96B\x00\x80\x01D\x00\x00NC\x00\x00\xa8A\x00\x00)C\x00\x00\xa9C\x00\x00\x82C\x00\x00\xc4B\x00\x80\xb3C\x00\x00@A\x00@\x0fD\x00\x00\xe1C\x00\xc0\x06D\x00\x00zC\x00\x00HC\x00\x00\x08B\x00\x00\x13C\x00\x80\xbbC\x00\x80\xb4C\x00\x00\xefC\x00\x00\xc8A\x00\x00 C\x00\x80\x9cC\x00\x00\x80A\x00\x00\x16C\x00\x00pC\x00\xc0\rD\x00\x00\tD\x00\x00lC\x00\x00\xe4C\x00\x00\x04C\x00\x00\x9fC\x00\x00\xa0A\x00\x00\xdaC\x00\x00\xfeB\x00\x00\xb6B\x00\x006C\x00\x00FC\x00\x00\x03D\x00\x00\xacB\x00\x80\xafC\x00@\x0eD\x00\x00\xf6B\x00\x00\\B\x00\x80\xc8C\x00\x00\xe5C\x00@\x00D\x00\x00dB\x00\x00|B\x00\x80\x9eC\x00\x00\x14D\x00\x80\x8aC\x00\xc0\x05D\x00@\x12D\x00\x00\xc7C\x00\x80\xc4C\x00\x00\xa1C\x00\x00\x9cC\x00\xc0\x15D\x00\x00\xf4C\x00\x80\x04D\x00\x00\xaeC\x00\x80\xb5C\x00\x00\xd6C\x00\x00\xc8B\x00\x00\xa4C\x00\x80\x86C\x00\x00$C\x00\x00\x1dC\x00\x00gC\x00\x00\x91C\x00\x00\xeaC\x00\x80\nD\x00\x00~C\x00\x00fC\x00\x00 B\x00\x00\xe6C\x00\x00LC\x00\xc0\x0fD\x00\x00\xf2B\x00\x00}C\x00\x00ZC\x00\x00\x15D\x00\x00\xc0@\x00\x80\xbaC\x00\x00\x8cB\x00\x00\x05C\x00\x00\nD\x00\x00\x1aC\x00\x00\rC\x00@\rD\x00\x00\xe8B\x00\x00\xedC\x00\x00\xd0B\x00\x00\x10A\x00\x00\xf8C\x00\x00\xdaB\x00\x00\x19C\x00\x00\x90B\x00\x80\x96C\x00\x80\x8cC\x00\x00\x13D\x00\x00\x0cD\x00\x00\xbbC\x00\x00\x10B\x00\x00\x80@\x00\x00\x05D\x00@\x01D\x00\x80\xf7C\x00\x007C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4798
(dp4799
g60
(dp4800
g48
I01
sg56
I01
ssg62
g4791
sg63
(lp4801
g48
ag56
asg65
(lp4802
I600
aI1
asbsg67
S'random'
p4803
sg69
g70
(g51
(I0
tS'b'
tRp4804
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4805
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\x97\x01\x00\x00\xf6\x00\x00\x00\t\x01\x00\x00c\x00\x00\x00S\x02\x00\x00\xd2\x00\x00\x00=\x02\x00\x00A\x00\x00\x00\xbd\x00\x00\x00H\x02\x00\x00m\x01\x00\x00\x84\x01\x00\x00\xf3\x01\x00\x00\xf4\x00\x00\x00\x05\x00\x00\x00\xe1\x00\x00\x00\x01\x02\x00\x00\xb3\x00\x00\x00\'\x01\x00\x00\xd6\x01\x00\x00\n\x02\x00\x00\xed\x01\x00\x00\xe8\x01\x00\x00?\x01\x00\x00j\x00\x00\x00\xfe\x01\x00\x00\xb6\x00\x00\x00\x9e\x00\x00\x00\xbc\x01\x00\x00p\x01\x00\x00n\x00\x00\x00f\x01\x00\x00\x02\x01\x00\x00\xaa\x00\x00\x00\xf9\x01\x00\x00~\x00\x00\x00R\x02\x00\x00N\x00\x00\x00\xc2\x00\x00\x00\xe9\x00\x00\x005\x02\x00\x00\xef\x00\x00\x00\xe4\x01\x00\x005\x00\x00\x00\xa2\x01\x00\x00\xe9\x01\x00\x00~\x01\x00\x00\xc6\x00\x00\x00\xd6\x00\x00\x00F\x00\x00\x00\xeb\x00\x00\x00Q\x00\x00\x00u\x01\x00\x00\xce\x00\x00\x00\xba\x01\x00\x00\x15\x02\x00\x00j\x01\x00\x00\x19\x02\x00\x009\x01\x00\x00&\x00\x00\x00\xfa\x00\x00\x00\x97\x00\x00\x00V\x01\x00\x00\x1a\x02\x00\x00\xaf\x00\x00\x00_\x00\x00\x00)\x01\x00\x00\xe7\x01\x00\x00\xb4\x00\x00\x00\x96\x01\x00\x00?\x02\x00\x00\x0f\x01\x00\x00L\x02\x00\x00\xbf\x01\x00\x00"\x00\x00\x00\xea\x01\x00\x00`\x01\x00\x00\xb7\x01\x00\x00\x8a\x00\x00\x00\x93\x01\x00\x00\xc9\x01\x00\x00 \x01\x00\x00n\x01\x00\x00\xa9\x01\x00\x00J\x00\x00\x00y\x00\x00\x00\x11\x02\x00\x00\xe0\x01\x00\x00\xd9\x00\x00\x00\x0c\x01\x00\x00,\x01\x00\x00\r\x02\x00\x00#\x01\x00\x003\x01\x00\x00$\x01\x00\x008\x01\x00\x00{\x00\x00\x00\xc8\x01\x00\x00\xf1\x01\x00\x00\xab\x00\x00\x00*\x02\x00\x00\xbc\x00\x00\x00\x03\x01\x00\x00"\x01\x00\x00G\x02\x00\x00\xad\x01\x00\x00u\x00\x00\x00\x89\x01\x00\x008\x00\x00\x00J\x02\x00\x00\x14\x01\x00\x00\x8e\x00\x00\x00\x84\x00\x00\x00X\x01\x00\x00\x12\x00\x00\x00\x93\x00\x00\x00E\x02\x00\x00y\x01\x00\x00\x94\x01\x00\x00N\x01\x00\x00\xcf\x01\x00\x009\x02\x00\x00\xd3\x01\x00\x00\x14\x02\x00\x00O\x00\x00\x000\x00\x00\x00H\x01\x00\x00\x0c\x02\x00\x00\x10\x00\x00\x00?\x00\x00\x00`\x00\x00\x00J\x01\x00\x00\x08\x02\x00\x00@\x02\x00\x00G\x01\x00\x00\x0f\x00\x00\x00\xea\x00\x00\x00s\x01\x00\x00\x06\x00\x00\x00\x19\x00\x00\x00\x82\x00\x00\x00C\x02\x00\x00T\x00\x00\x00Y\x01\x00\x00>\x00\x00\x001\x00\x00\x00L\x01\x00\x00\xfa\x01\x00\x00\xdd\x01\x00\x00\x14\x00\x00\x00\x02\x02\x00\x00\xbe\x00\x00\x00\x91\x00\x00\x00K\x02\x00\x00B\x02\x00\x00z\x00\x00\x00\x0b\x00\x00\x00.\x02\x00\x00O\x01\x00\x00\xd5\x01\x00\x00\xff\x01\x00\x00$\x00\x00\x00Q\x01\x00\x00\x06\x01\x00\x00-\x02\x00\x00\xca\x01\x00\x00\x88\x01\x00\x00*\x00\x00\x002\x00\x00\x00\xee\x01\x00\x00C\x00\x00\x00E\x01\x00\x00\\\x00\x00\x00\xa6\x01\x00\x00\xd2\x01\x00\x00\xf1\x00\x00\x00\xb0\x01\x00\x00.\x00\x00\x00b\x01\x00\x00o\x00\x00\x00\xec\x00\x00\x00\x1f\x00\x00\x00\x0e\x02\x00\x00W\x02\x00\x00U\x00\x00\x00|\x01\x00\x00\x0e\x01\x00\x00\x82\x01\x00\x00^\x01\x00\x00\x92\x01\x00\x00\x01\x00\x00\x00;\x01\x00\x00\xab\x01\x00\x004\x00\x00\x009\x00\x00\x00\xf8\x00\x00\x00\x08\x01\x00\x00 \x00\x00\x00\x0f\x02\x00\x00\x9a\x00\x00\x00\xf8\x01\x00\x00\x16\x00\x00\x00\x7f\x01\x00\x00\t\x00\x00\x007\x02\x00\x00\xbe\x01\x00\x00\xec\x01\x00\x00\xc8\x00\x00\x00I\x01\x00\x00\x9e\x01\x00\x00\xd4\x00\x00\x00\x17\x00\x00\x00=\x01\x00\x00\xce\x01\x00\x007\x00\x00\x00\xa5\x01\x00\x00\xc4\x01\x00\x00R\x00\x00\x00;\x02\x00\x007\x01\x00\x00\xdc\x00\x00\x00\r\x00\x00\x00\xc1\x00\x00\x00\xc7\x00\x00\x00h\x01\x00\x00M\x01\x00\x00\xb8\x01\x00\x00\xed\x00\x00\x00>\x01\x00\x00\x8f\x00\x00\x004\x02\x00\x00/\x02\x00\x00\x0b\x01\x00\x00-\x00\x00\x00\xe0\x00\x00\x00\x16\x01\x00\x00\x06\x02\x00\x00\xa8\x01\x00\x00\xfd\x00\x00\x00\xc2\x01\x00\x00\x03\x02\x00\x00\xb9\x01\x00\x00;\x00\x00\x00\x0c\x00\x00\x00\xe6\x00\x00\x00D\x00\x00\x00\xdb\x00\x00\x00/\x00\x00\x00\x83\x00\x00\x00r\x01\x00\x00\xf7\x01\x00\x00b\x00\x00\x00\xe5\x01\x00\x00:\x02\x00\x003\x02\x00\x00\xfe\x00\x00\x00\xd7\x01\x00\x00\xc3\x00\x00\x00\x1b\x00\x00\x00C\x01\x00\x00\xf0\x01\x00\x00\xd1\x00\x00\x00\x80\x00\x00\x00\xc7\x01\x00\x00\xf3\x00\x00\x00=\x00\x00\x00\x8b\x00\x00\x00d\x01\x00\x00\x1a\x00\x00\x00,\x02\x00\x00r\x00\x00\x00/\x01\x00\x00v\x01\x00\x00\xb3\x01\x00\x00\xc1\x01\x00\x00\x07\x00\x00\x00\x8c\x00\x00\x00\x1d\x02\x00\x00e\x01\x00\x00\xb5\x01\x00\x00\x18\x01\x00\x00N\x02\x00\x00\n\x01\x00\x00\xb2\x01\x00\x00\x8d\x01\x00\x00z\x01\x00\x00\x00\x00\x00\x00\xa7\x00\x00\x00\xd8\x00\x00\x004\x01\x00\x000\x02\x00\x00\xe2\x01\x00\x00\x9f\x01\x00\x00\x9d\x01\x00\x00\n\x00\x00\x00\xde\x00\x00\x00\xcc\x01\x00\x00*\x01\x00\x006\x00\x00\x00\xe7\x00\x00\x00\x99\x01\x00\x00M\x02\x00\x00k\x00\x00\x00\xa7\x01\x00\x00\xa4\x00\x00\x00\xd5\x00\x00\x00\xba\x00\x00\x00q\x01\x00\x00[\x00\x00\x00x\x00\x00\x00\x13\x01\x00\x003\x00\x00\x00#\x02\x00\x00\x00\x02\x00\x00\xdc\x01\x00\x00&\x01\x00\x00\r\x01\x00\x00\x1b\x02\x00\x00\t\x02\x00\x00\xc5\x00\x00\x00a\x01\x00\x00v\x00\x00\x00"\x02\x00\x00\x08\x00\x00\x00l\x00\x00\x00Y\x00\x00\x00\x9f\x00\x00\x00\x86\x00\x00\x00+\x02\x00\x00I\x00\x00\x00\xa2\x00\x00\x00Z\x00\x00\x005\x01\x00\x00\xb5\x00\x00\x00d\x00\x00\x00\xfb\x00\x00\x00\xad\x00\x00\x00\xfc\x00\x00\x00\xef\x01\x00\x00\x03\x00\x00\x00K\x00\x00\x00%\x00\x00\x00\xc0\x00\x00\x00\xb9\x00\x00\x00\x80\x01\x00\x00\xdf\x01\x00\x00:\x00\x00\x00\x11\x01\x00\x00\'\x02\x00\x00\x00\x01\x00\x00i\x01\x00\x00\x12\x02\x00\x00}\x01\x00\x00\xae\x01\x00\x00\x85\x01\x00\x00\x0e\x00\x00\x00:\x01\x00\x00\xa1\x00\x00\x00\x1b\x01\x00\x00\xf2\x01\x00\x00g\x00\x00\x00\xfc\x01\x00\x00\x19\x01\x00\x00(\x02\x00\x00\xa0\x01\x00\x00_\x01\x00\x00h\x00\x00\x00\x81\x00\x00\x00\xc5\x01\x00\x00\xdb\x01\x00\x00@\x01\x00\x00\xa9\x00\x00\x00\xa0\x00\x00\x00>\x02\x00\x00Q\x02\x00\x00\xfb\x01\x00\x00\x1e\x00\x00\x00B\x00\x00\x00\xd4\x01\x00\x00S\x01\x00\x00e\x00\x00\x00c\x01\x00\x00\x15\x00\x00\x00\x98\x01\x00\x00\x9c\x01\x00\x000\x01\x00\x00S\x00\x00\x00o\x01\x00\x00)\x00\x00\x00\xb1\x01\x00\x00\x9b\x00\x00\x00w\x00\x00\x00\x9b\x01\x00\x00!\x02\x00\x00\xd1\x01\x00\x00k\x01\x00\x00g\x01\x00\x00T\x01\x00\x00 \x02\x00\x00\xa4\x01\x00\x00\x15\x01\x00\x00\x16\x02\x00\x00\xbb\x00\x00\x00\x02\x00\x00\x00\x83\x01\x00\x00\xb6\x01\x00\x002\x01\x00\x00\xcd\x00\x00\x00A\x01\x00\x00\xac\x01\x00\x00H\x00\x00\x00\x1d\x00\x00\x00\x8c\x01\x00\x00U\x01\x00\x00]\x01\x00\x00P\x01\x00\x00\xb8\x00\x00\x00\x8e\x01\x00\x00\x1a\x01\x00\x00\xd0\x00\x00\x00\xb4\x01\x00\x00\x9a\x01\x00\x00\x1c\x00\x00\x00\x95\x01\x00\x00\xe6\x01\x00\x00\x85\x00\x00\x00\xe1\x01\x00\x00\x11\x00\x00\x00)\x02\x00\x00W\x01\x00\x00\xb0\x00\x00\x00\x94\x00\x00\x00\x12\x01\x00\x00\xbd\x01\x00\x00\xf7\x00\x00\x00^\x00\x00\x00\x0b\x02\x00\x00\xdf\x00\x00\x00\xa6\x00\x00\x00]\x00\x00\x00\xa1\x01\x00\x00t\x00\x00\x00\xcd\x01\x00\x00@\x00\x00\x00\x04\x00\x00\x00\x95\x00\x00\x00!\x00\x00\x00l\x01\x00\x00\x81\x01\x00\x00\xe3\x00\x00\x00\xf5\x01\x00\x00\x05\x01\x00\x00\x89\x00\x00\x00R\x01\x00\x00\x1d\x01\x00\x00\x17\x01\x00\x00\x07\x02\x00\x00\xd8\x01\x00\x00\x17\x02\x00\x00\x7f\x00\x00\x006\x02\x00\x00\xac\x00\x00\x00f\x00\x00\x00\xa3\x00\x00\x00\x8a\x01\x00\x00+\x01\x00\x00X\x00\x00\x00\xcb\x01\x00\x001\x02\x00\x00\xb2\x00\x00\x00t\x01\x00\x00#\x00\x00\x00\x90\x01\x00\x00}\x00\x00\x00F\x02\x00\x00+\x00\x00\x00\xaf\x01\x00\x00<\x01\x00\x00\xfd\x01\x00\x00\x18\x00\x00\x00p\x00\x00\x00K\x01\x00\x00D\x01\x00\x00i\x00\x00\x00\xf9\x00\x00\x00\xaa\x01\x00\x00<\x00\x00\x00\xde\x01\x00\x00%\x02\x00\x00\xff\x00\x00\x00\xa3\x01\x00\x00\xcc\x00\x00\x00\xcf\x00\x00\x00\x04\x01\x00\x00W\x00\x00\x00V\x02\x00\x00I\x02\x00\x00\x90\x00\x00\x00\xe2\x00\x00\x00\xbf\x00\x00\x00\xbb\x01\x00\x00\x87\x01\x00\x00\xf2\x00\x00\x00Z\x01\x00\x00w\x01\x00\x00\x1c\x01\x00\x00\xc0\x01\x00\x00!\x01\x00\x00\xd7\x00\x00\x00\xe3\x01\x00\x00E\x00\x00\x00\'\x00\x00\x00\xd9\x01\x00\x00\x18\x02\x00\x00\x01\x01\x00\x00\xee\x00\x00\x00\x99\x00\x00\x00U\x02\x00\x00\xeb\x01\x00\x00\xcb\x00\x00\x00(\x01\x00\x00\x91\x01\x00\x00\xe5\x00\x00\x00\xc4\x00\x00\x00\x10\x02\x00\x00|\x00\x00\x00L\x00\x00\x00\x8b\x01\x00\x00\xd0\x01\x00\x00\xa5\x00\x00\x00&\x02\x00\x00\x87\x00\x00\x00T\x02\x00\x00{\x01\x00\x00(\x00\x00\x00\x1e\x02\x00\x00\x98\x00\x00\x00\xb7\x00\x00\x00\x9c\x00\x00\x00\xf6\x01\x00\x00\xda\x00\x00\x00\xc3\x01\x00\x00%\x01\x00\x00\xe8\x00\x00\x00x\x01\x00\x00V\x00\x00\x00\x9d\x00\x00\x00q\x00\x00\x00\x05\x02\x00\x00\xb1\x00\x00\x00\xae\x00\x00\x00\x92\x00\x00\x00A\x02\x00\x00F\x01\x00\x002\x02\x00\x00\xd3\x00\x00\x00[\x01\x00\x00\x8d\x00\x00\x00\x96\x00\x00\x001\x01\x00\x00P\x02\x00\x00\xe4\x00\x00\x006\x01\x00\x00\x13\x00\x00\x00\xc9\x00\x00\x00D\x02\x00\x00G\x00\x00\x00\x04\x02\x00\x00\x1f\x01\x00\x00\x13\x02\x00\x00\xca\x00\x00\x00B\x01\x00\x00\x8f\x01\x00\x00\xf4\x01\x00\x00\xf5\x00\x00\x008\x02\x00\x00\x07\x01\x00\x00\xdd\x00\x00\x00s\x00\x00\x00\xc6\x01\x00\x00m\x00\x00\x00\x1e\x01\x00\x00-\x01\x00\x00\x86\x01\x00\x00M\x00\x00\x00\x1f\x02\x00\x00\\\x01\x00\x00a\x00\x00\x00O\x02\x00\x00\x88\x00\x00\x00P\x00\x00\x00\xa8\x00\x00\x00\x1c\x02\x00\x00,\x00\x00\x00.\x01\x00\x00\x10\x01\x00\x00<\x02\x00\x00\xda\x01\x00\x00\xf0\x00\x00\x00$\x02\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4806
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4807
(g4805
S'$\x02\x00\x00'
tRp4808
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4809
I01
sb.