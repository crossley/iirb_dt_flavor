ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject642
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 642
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vfemale
p31
sS'age'
p32
V21
p33
ssS'loopsUnfinished'
p34
(lp35
g1
(cpsychopy.data
TrialHandler
p36
g3
NtRp37
(dp38
S'origin'
p39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p40
sS'thisTrial'
p41
I8
sS'_exp'
p42
I74824240
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p43
sS'thisRepN'
p44
I39
sg27
I01
sg28
NsS'data'
p45
g1
(cpsychopy.data
DataHandler
p46
c__builtin__
dict
p47
(dp48
S'ran'
p49
cnumpy.ma.core
_mareconstruct
p50
(cnumpy.ma.core
MaskedArray
p51
cnumpy
ndarray
p52
(I0
tp53
S'b'
tRp54
(I1
(I15
I40
tcnumpy
dtype
p55
(S'f4'
I0
I1
tRp56
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p57
g50
(g51
g52
g53
S'b'
tRp58
(I1
(I15
I40
tg56
I00
S'\x00\x00\xc0@\x00\x004B\x00\x00HB\x00\x00\\B\x00\x00\x82B\x00\x00\x9cB\x00\x00\x14C\x00\x00!C\x00\x00#C\x00\x002C\x00\x005C\x00\x00CC\x00\x00LC\x00\x00MC\x00\x00QC\x00\x00VC\x00\x00[C\x00\x00\\C\x00\x00kC\x00\x00rC\x00\x80\x89C\x00\x00\x8aC\x00\x80\x95C\x00\x00\x98C\x00\x00\x9eC\x00\x80\xafC\x00\x00\xbcC\x00\x80\xcbC\x00\x00\xd5C\x00\x00\xd6C\x00\x00\xe1C\x00\x00\xe5C\x00\x00\xf5C\x00\x80\xf7C\x00\x80\xf8C\x00\x00\xf9C\x00\x80\xfaC\x00\xc0\x06D\x00\x00\tD\x00@\x0fD\x00\x00\x18B\x00\x00\x98B\x00\x00\xa0B\x00\x00\xb0B\x00\x00\xf2B\x00\x00\x01C\x00\x00\x08C\x00\x00&C\x00\x008C\x00\x00KC\x00\x00eC\x00\x00jC\x00\x00uC\x00\x00{C\x00\x80\x87C\x00\x00\x93C\x00\x00\x9dC\x00\x00\xabC\x00\x80\xacC\x00\x80\xaeC\x00\x80\xb5C\x00\x00\xb6C\x00\x00\xbaC\x00\x80\xc1C\x00\x00\xcdC\x00\x80\xd7C\x00\x80\xe4C\x00\x80\xe8C\x00\x00\xefC\x00\x80\xf3C\x00\x80\xf9C\x00\x00\xfcC\x00\x80\x00D\x00\x00\x08D\x00@\x08D\x00\x80\x08D\x00\x00\nD\x00\xc0\x0bD\x00\x00\x0cD\x00\xc0\x0fD\x00\x00\xe0A\x00\x00\xa4B\x00\x00\xb6B\x00\x00\xbeB\x00\x00\xc6B\x00\x00\xd8B\x00\x001C\x00\x00BC\x00\x00GC\x00\x00PC\x00\x00TC\x00\x00UC\x00\x80\x8dC\x00\x00\x95C\x00\x00\x9fC\x00\x80\xa7C\x00\x00\xa8C\x00\x80\xa8C\x00\x80\xb0C\x00\x80\xb4C\x00\x80\xb7C\x00\x00\xc1C\x00\x80\xc2C\x00\x80\xcaC\x00\x00\xd4C\x00\x00\xddC\x00\x80\xdfC\x00\x00\xe2C\x00\x00\xeaC\x00\x00\xeeC\x00\x80\xf4C\x00\x80\xfeC\x00@\x02D\x00@\x04D\x00\x80\x06D\x00\xc0\tD\x00\xc0\nD\x00@\x0eD\x00\x00\x12D\x00\x80\x14D\x00\x00\x88A\x00\x00\x08B\x00\x00\xaeB\x00\x00\xc0B\x00\x00\xe2B\x00\x00\xf6B\x00\x00\xfeB\x00\x00\x02C\x00\x00\x0bC\x00\x00\x1aC\x00\x00\x1bC\x00\x00"C\x00\x00>C\x00\x00?C\x00\x00_C\x00\x00cC\x00\x00|C\x00\x80\x83C\x00\x00\x89C\x00\x80\x8aC\x00\x00\x91C\x00\x00\xa3C\x00\x80\xa5C\x00\x80\xb2C\x00\x00\xb3C\x00\x00\xc4C\x00\x00\xc9C\x00\x00\xcaC\x00\x80\xe5C\x00\x00\xe7C\x00\x00\xecC\x00\x00\xf0C\x00\x00\xf4C\x00\x00\xf6C\x00\x00\xf7C\x00\x00\xffC\x00@\x00D\x00\xc0\x07D\x00\x80\x10D\x00\x00\x13D\x00\x00\x10A\x00\x00PB\x00\x00TB\x00\x00\x8aB\x00\x00\xaaB\x00\x00\xc8B\x00\x00\xceB\x00\x00\xfcB\x00\x00+C\x00\x00,C\x00\x006C\x00\x007C\x00\x00=C\x00\x00@C\x00\x00EC\x00\x00FC\x00\x00bC\x00\x00}C\x00\x80\x8bC\x00\x00\x97C\x00\x80\xa0C\x00\x00\xa1C\x00\x80\xa1C\x00\x00\xa9C\x00\x00\xbbC\x00\x80\xbbC\x00\x00\xc0C\x00\x00\xc2C\x00\x00\xc8C\x00\x80\xc8C\x00\x80\xcfC\x00\x80\xdbC\x00\x80\xe3C\x00\x00\xe8C\x00\x00\xf3C\x00\x00\x01D\x00\x00\x03D\x00\xc0\x0cD\x00@\rD\x00\x80\x11D\x00\x00\x00@\x00\x00\x98A\x00\x00\x04B\x00\x00\x14B\x00\x00xB\x00\x00\xb2B\x00\x00\xdeB\x00\x00\xfaB\x00\x00\x0eC\x00\x004C\x00\x00<C\x00\x00hC\x00\x00pC\x00\x00zC\x00\x00\x7fC\x00\x80\x86C\x00\x00\x8dC\x00\x00\x94C\x00\x80\x98C\x00\x80\xa3C\x00\x80\xaaC\x00\x00\xadC\x00\x80\xbaC\x00\x00\xbeC\x00\x00\xc7C\x00\x80\xccC\x00\x00\xd3C\x00\x80\xd6C\x00\x80\xdcC\x00\x00\xe4C\x00\x80\xecC\x00\x80\xf1C\x00\x80\xfcC\x00\xc0\x00D\x00\xc0\x03D\x00\xc0\x08D\x00@\nD\x00@\x0bD\x00\xc0\x11D\x00\xc0\x13D\x00\x00@A\x00\x00pA\x00\x00\xb0A\x00\x00\x1cB\x00\x00,B\x00\x00lB\x00\x00pB\x00\x00\x9eB\x00\x00\xd6B\x00\x00\xdcB\x00\x00\xe4B\x00\x00\nC\x00\x00\x10C\x00\x00\x11C\x00\x00\x1cC\x00\x00*C\x00\x009C\x00\x00;C\x00\x00gC\x00\x00sC\x00\x80\x82C\x00\x00\x84C\x00\x00\x8fC\x00\x80\x94C\x00\x80\x9eC\x00\x00\xb2C\x00\x80\xc9C\x00\x00\xccC\x00\x80\xceC\x00\x80\xd3C\x00\x80\xdeC\x00\x00\xe3C\x00\x00\xe9C\x00\x00\xebC\x00\x80\xfdC\x00@\x01D\x00@\x05D\x00\x00\x06D\x00\x80\x0bD\x00\x00\x15D\x00\x00\xa0A\x00\x00\x10B\x00\x00\xa2B\x00\x00\xbcB\x00\x00\xd2B\x00\x00\xdaB\x00\x00\xe6B\x00\x00\x07C\x00\x00\x15C\x00\x00\x1dC\x00\x00\x1fC\x00\x00.C\x00\x00HC\x00\x00SC\x00\x00XC\x00\x00qC\x00\x80\x84C\x00\x80\x85C\x00\x00\x87C\x00\x00\x99C\x00\x80\x9cC\x00\x80\xabC\x00\x00\xb7C\x00\x80\xbcC\x00\x00\xbfC\x00\x80\xc4C\x00\x80\xc5C\x00\x00\xcbC\x00\x00\xceC\x00\x80\xe6C\x00\x80\xe7C\x00\x00\xf2C\x00\x80\xf2C\x00\x80\x04D\x00\x80\x05D\x00\xc0\x05D\x00\x80\x07D\x00@\x0cD\x00\x00\x0fD\x00@\x11D\x00\x00\xe0@\x00\x00 A\x00\x000A\x00\x00`A\x00\x00\xe8A\x00\x00\x00B\x00\x00\x0cB\x00\x00$B\x00\x00\xacB\x00\x00\xb4B\x00\x00\xe0B\x00\x00\x0cC\x00\x00\x12C\x00\x00\x1eC\x00\x00)C\x00\x003C\x00\x00YC\x00\x80\x81C\x00\x80\x88C\x00\x00\x8bC\x00\x80\x8fC\x00\x80\x97C\x00\x00\xa0C\x00\x00\xa4C\x00\x00\xa6C\x00\x80\xa6C\x00\x00\xaeC\x00\x80\xbeC\x00\x80\xc3C\x00\x80\xcdC\x00\x00\xcfC\x00\x00\xd2C\x00\x00\xd7C\x00\x00\xdfC\x00\x80\xeeC\x00\x80\x03D\x00@\x06D\x00\x80\rD\x00\x00\x10D\x00\xc0\x15D\x00\x00\x80@\x00\x00\xa0@\x00\x00\x90A\x00\x00\xc0A\x00\x000B\x00\x00DB\x00\x00XB\x00\x00\x8eB\x00\x00\xd4B\x00\x00\xe8B\x00\x00\x00C\x00\x00-C\x00\x00AC\x00\x00WC\x00\x00^C\x00\x00tC\x00\x00xC\x00\x00\x83C\x00\x80\x8eC\x00\x00\x96C\x00\x80\x96C\x00\x80\x99C\x00\x80\x9bC\x00\x80\xa2C\x00\x00\xafC\x00\x80\xb3C\x00\x80\xb9C\x00\x80\xd0C\x00\x00\xd1C\x00\x80\xd1C\x00\x80\xd5C\x00\x00\xd8C\x00\x80\xd9C\x00\x00\xfaC\x00\x00\x04D\x00\x80\nD\x00\x00\rD\x00\x00\x0eD\x00\xc0\x12D\x00\x00\x14D\x00\x00\x80?\x00\x00\xa8A\x00\x00\xb8A\x00\x00\xf0A\x00\x008B\x00\x00tB\x00\x00\xa6B\x00\x00\xb8B\x00\x00\xecB\x00\x00\xf0B\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00$C\x00\x00NC\x00\x00OC\x00\x00]C\x00\x00`C\x00\x00mC\x00\x00~C\x00\x80\x80C\x00\x00\x82C\x00\x80\x90C\x00\x80\xa9C\x00\x80\xb1C\x00\x00\xb4C\x00\x80\xbdC\x00\x80\xc0C\x00\x00\xc3C\x00\x80\xc6C\x00\x80\xc7C\x00\x00\xd0C\x00\x80\xd8C\x00\x00\xdbC\x00\x80\xe1C\x00\x80\xf0C\x00\x00\x02D\x00\x00\x05D\x00@\tD\x00\x00@@\x00\x00\x00A\x00\x00\xc8A\x00\x00\xd0A\x00\x00|B\x00\x00\x88B\x00\x00\xbaB\x00\x00\xc4B\x00\x00\xd0B\x00\x00\xeaB\x00\x00\tC\x00\x00\x18C\x00\x00\x19C\x00\x00%C\x00\x00:C\x00\x00iC\x00\x00oC\x00\x00\x81C\x00\x00\x8cC\x00\x80\x91C\x00\x80\x92C\x00\x80\x93C\x00\x00\x9aC\x00\x00\x9cC\x00\x00\xa2C\x00\x00\xb1C\x00\x00\xb5C\x00\x80\xd4C\x00\x00\xdeC\x00\x80\xe2C\x00\x00\xe6C\x00\x00\xf8C\x00\xc0\x01D\x00@\x03D\x00\x80\tD\x00\x80\x0cD\x00\xc0\x0eD\x00\x80\x0fD\x00@\x12D\x00\x80\x15D\x00\x00PA\x00\x00\xd8A\x00\x00 B\x00\x00<B\x00\x00hB\x00\x00\x86B\x00\x00\xf8B\x00\x00\rC\x00\x00\'C\x00\x000C\x00\x00DC\x00\x00JC\x00\x00dC\x00\x00fC\x00\x00\x85C\x00\x00\x86C\x00\x00\x88C\x00\x00\x8eC\x00\x00\x90C\x00\x80\x9dC\x00\x00\xa5C\x00\x80\xb6C\x00\x00\xc5C\x00\x00\xc6C\x00\x00\xd9C\x00\x80\xdaC\x00\x00\xdcC\x00\x80\xddC\x00\x80\xeaC\x00\x80\xedC\x00\x80\xf5C\x00\x80\xfbC\x00\x00\xfeC\x00\x80\x01D\x00\xc0\x02D\x00@\x07D\x00\xc0\rD\x00@\x10D\x00\x00\x11D\x00\x80\x13D\x00\x00\x00\x00\x00\x00\xf8A\x00\x00(B\x00\x00@B\x00\x00LB\x00\x00dB\x00\x00\x80B\x00\x00\x8cB\x00\x00\x94B\x00\x00\xa8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\x0fC\x00\x00\x13C\x00\x00\x17C\x00\x00(C\x00\x00/C\x00\x00RC\x00\x00aC\x00\x00nC\x00\x00yC\x00\x00\x80C\x00\x00\xaaC\x00\x00\xb0C\x00\x00\xb8C\x00\x80\xb8C\x00\x00\xbdC\x00\x80\xe0C\x00\x80\xe9C\x00\x80\xebC\x00\x00\xedC\x00\x80\xefC\x00\x00\xf1C\x00\x00\xfbC\x00\x80\xffC\x00\x80\x0eD\x00\xc0\x10D\x00\x80\x12D\x00@\x13D\x00\xc0\x14D\x00\x00\x80A\x00\x00`B\x00\x00\x84B\x00\x00\x90B\x00\x00\x92B\x00\x00\x96B\x00\x00\x9aB\x00\x00\xc2B\x00\x00\xeeB\x00\x00\xf4B\x00\x00\x16C\x00\x00 C\x00\x00IC\x00\x00ZC\x00\x00lC\x00\x00vC\x00\x00wC\x00\x80\x8cC\x00\x00\x92C\x00\x80\x9aC\x00\x00\x9bC\x00\x80\x9fC\x00\x80\xa4C\x00\x00\xa7C\x00\x00\xacC\x00\x80\xadC\x00\x00\xb9C\x00\x80\xbfC\x00\x80\xd2C\x00\x00\xdaC\x00\x00\xe0C\x00\x80\xf6C\x00\x00\xfdC\x00\x00\x00D\x00\x80\x02D\x00\xc0\x04D\x00\x00\x07D\x00\x00\x0bD\x00@\x14D\x00@\x15D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp59
(dp60
S'isNumeric'
p61
(dp62
g49
I01
sg57
I01
ssS'trials'
p63
g37
sS'dataTypes'
p64
(lp65
g49
ag57
asS'dataShape'
p66
(lp67
I15
aI40
asbsS'method'
p68
S'fullRandom'
p69
sS'sequenceIndices'
p70
cnumpy.core.multiarray
_reconstruct
p71
(g52
(I0
tS'b'
tRp72
(I1
(I15
I40
tg55
(S'O4'
I0
I1
tRp73
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp74
I13
aI6
aI10
aI0
aI6
aI14
aI8
aI7
aI10
aI7
aI14
aI11
aI5
aI0
aI13
aI13
aI5
aI5
aI7
aI9
aI9
aI12
aI12
aI1
aI10
aI4
aI10
aI2
aI8
aI9
aI0
aI1
aI3
aI0
aI3
aI11
aI14
aI2
aI13
aI11
aI10
aI14
aI13
aI10
aI10
aI1
aI2
aI9
aI1
aI1
aI13
aI1
aI0
aI12
aI7
aI4
aI7
aI13
aI1
aI6
aI9
aI0
aI3
aI5
aI2
aI0
aI8
aI7
aI14
aI14
aI10
aI6
aI10
aI11
aI13
aI8
aI12
aI14
aI11
aI13
aI5
aI3
aI8
aI12
aI5
aI14
aI10
aI6
aI14
aI11
aI11
aI12
aI4
aI4
aI2
aI3
aI0
aI10
aI12
aI8
aI4
aI6
aI8
aI14
aI11
aI7
aI3
aI0
aI5
aI12
aI2
aI13
aI13
aI0
aI14
aI5
aI7
aI5
aI7
aI9
aI11
aI9
aI5
aI13
aI11
aI0
aI11
aI2
aI3
aI6
aI11
aI13
aI4
aI4
aI2
aI12
aI6
aI11
aI8
aI12
aI8
aI2
aI8
aI8
aI1
aI13
aI7
aI6
aI6
aI10
aI11
aI2
aI5
aI0
aI3
aI9
aI3
aI6
aI0
aI3
aI9
aI5
aI3
aI9
aI13
aI6
aI7
aI7
aI12
aI3
aI3
aI8
aI1
aI2
aI0
aI1
aI9
aI8
aI3
aI10
aI0
aI14
aI14
aI1
aI1
aI10
aI12
aI5
aI2
aI4
aI6
aI12
aI7
aI1
aI1
aI2
aI1
aI1
aI11
aI13
aI9
aI7
aI8
aI0
aI0
aI1
aI2
aI6
aI5
aI8
aI3
aI6
aI6
aI7
aI9
aI12
aI1
aI10
aI0
aI3
aI5
aI8
aI2
aI9
aI12
aI5
aI7
aI1
aI11
aI12
aI4
aI6
aI7
aI9
aI5
aI7
aI1
aI1
aI1
aI12
aI0
aI10
aI7
aI13
aI14
aI7
aI3
aI5
aI4
aI12
aI6
aI4
aI11
aI14
aI7
aI6
aI14
aI6
aI0
aI11
aI7
aI4
aI2
aI0
aI7
aI8
aI12
aI8
aI0
aI5
aI5
aI13
aI4
aI0
aI4
aI14
aI1
aI7
aI8
aI5
aI8
aI6
aI5
aI4
aI12
aI2
aI14
aI8
aI3
aI5
aI7
aI4
aI6
aI12
aI8
aI5
aI14
aI9
aI3
aI14
aI9
aI4
aI2
aI13
aI2
aI7
aI10
aI7
aI9
aI2
aI1
aI3
aI1
aI13
aI6
aI10
aI5
aI11
aI12
aI9
aI11
aI10
aI1
aI4
aI11
aI10
aI11
aI3
aI9
aI13
aI8
aI9
aI5
aI1
aI14
aI11
aI9
aI3
aI8
aI11
aI11
aI4
aI4
aI2
aI13
aI14
aI5
aI6
aI0
aI12
aI0
aI5
aI3
aI12
aI12
aI6
aI0
aI4
aI3
aI14
aI4
aI9
aI6
aI9
aI4
aI13
aI2
aI6
aI1
aI6
aI7
aI7
aI4
aI0
aI0
aI1
aI13
aI6
aI4
aI1
aI14
aI11
aI10
aI11
aI13
aI4
aI10
aI8
aI5
aI11
aI3
aI13
aI2
aI1
aI11
aI7
aI10
aI9
aI13
aI2
aI8
aI11
aI12
aI0
aI13
aI4
aI4
aI7
aI3
aI6
aI14
aI13
aI3
aI0
aI0
aI0
aI5
aI7
aI11
aI11
aI14
aI9
aI13
aI10
aI14
aI10
aI4
aI4
aI8
aI6
aI11
aI12
aI0
aI5
aI10
aI7
aI11
aI4
aI12
aI13
aI8
aI11
aI8
aI14
aI9
aI8
aI13
aI9
aI10
aI8
aI0
aI12
aI3
aI10
aI10
aI14
aI1
aI12
aI14
aI5
aI9
aI3
aI5
aI6
aI9
aI2
aI4
aI10
aI1
aI8
aI7
aI2
aI12
aI14
aI2
aI6
aI2
aI8
aI7
aI6
aI6
aI12
aI13
aI13
aI14
aI3
aI13
aI11
aI10
aI13
aI3
aI2
aI4
aI10
aI9
aI10
aI3
aI7
aI5
aI6
aI11
aI5
aI1
aI3
aI1
aI1
aI3
aI9
aI9
aI2
aI3
aI8
aI3
aI6
aI14
aI8
aI1
aI12
aI4
aI14
aI12
aI2
aI6
aI12
aI14
aI1
aI4
aI10
aI10
aI0
aI0
aI0
aI9
aI2
aI3
aI13
aI4
aI12
aI2
aI2
aI7
aI8
aI7
aI3
aI5
aI4
aI6
aI9
aI10
aI14
aI7
aI1
aI14
aI12
aI12
aI2
aI5
aI9
aI5
aI11
aI8
aI8
aI9
aI6
aI13
aI5
aI11
aI14
aI10
aI7
aI10
aI8
aI2
aI0
aI10
aI11
aI10
aI5
aI12
aI0
aI1
aI14
aI14
aI9
aI4
aI2
aI3
aI9
aI12
aI13
aI4
aI13
aI3
aI2
aI4
aI0
aI9
aI2
aI2
aI8
atbsS'finished'
p75
I00
sS'nReps'
p76
I40
sS'nRemaining'
p77
I0
sS'trialList'
p78
(lp79
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p80
NsS'thisIndex'
p81
I8
sS'thisN'
p82
I599
sS'thisTrialN'
p83
I14
sS'nTotal'
p84
I600
sS'_warnUseOfNext'
p85
I01
sbasS'saveWideText'
p86
I01
sS'thisEntry'
p87
(dp88
sS'version'
p89
S''
sS'_paramNamesSoFar'
p90
(lp91
sS'entries'
p92
(lp93
(dp94
g16
(lp95
S'd'
asS'.thisTrial'
p96
I13
sS'.thisRepN'
p97
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p98
I0
sS'.thisN'
p99
I0
sS'.thisIndex'
p100
I13
sg15
(lp101
S'd'
asg17
S'Y'
sg14
I1
sa(dp102
g16
(lp103
S'k'
asg96
I10
sS'.thisRepN'
p104
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p105
I1
sS'.thisN'
p106
I1
sS'.thisIndex'
p107
I10
sg15
(lp108
S'k'
asg17
S'Y'
sg14
I1
sa(dp109
g16
(lp110
S'k'
asg18
S'N'
sS'.thisRepN'
p111
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p112
I2
sS'.thisN'
p113
I2
sS'.thisIndex'
p114
I5
sg15
(lp115
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I5
sa(dp116
g16
(lp117
S'k'
asg18
S'N'
sS'.thisRepN'
p118
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p119
I3
sS'.thisN'
p120
I3
sS'.thisIndex'
p121
I11
sg15
(lp122
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I11
sa(dp123
g16
(lp124
S'k'
asg18
S'N'
sS'.thisRepN'
p125
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p126
I4
sS'.thisN'
p127
I4
sS'.thisIndex'
p128
I9
sg15
(lp129
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp130
S'space'
p131
asg96
I9
sa(dp132
g16
(lp133
S'd'
asg18
S'N'
sS'.thisRepN'
p134
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p135
I5
sS'.thisN'
p136
I5
sS'.thisIndex'
p137
I9
sg15
(lp138
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp139
S'space'
p140
asg96
I9
sa(dp141
g16
(lp142
S'd'
asg18
S'Y'
sS'.thisRepN'
p143
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p144
I6
sS'.thisN'
p145
I6
sS'.thisIndex'
p146
I0
sg15
(lp147
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp148
S'space'
p149
asg96
I0
sa(dp150
g16
(lp151
S'k'
asg18
S'N'
sS'.thisRepN'
p152
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p153
I7
sS'.thisN'
p154
I7
sS'.thisIndex'
p155
I8
sg15
(lp156
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I8
sa(dp157
g16
(lp158
S'd'
asg18
S'Y'
sS'.thisRepN'
p159
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p160
I8
sS'.thisN'
p161
I8
sS'.thisIndex'
p162
I11
sg15
(lp163
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I11
sa(dp164
g16
(lp165
S'd'
asg18
S'Y'
sS'.thisRepN'
p166
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p167
I9
sS'.thisN'
p168
I9
sS'.thisIndex'
p169
I4
sg15
(lp170
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I4
sa(dp171
g16
(lp172
S'd'
asg18
S'N'
sS'.thisRepN'
p173
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p174
I10
sS'.thisN'
p175
I10
sS'.thisIndex'
p176
I8
sg15
(lp177
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp178
S'space'
p179
asg96
I8
sa(dp180
g16
(lp181
S'd'
asg18
S'Y'
sS'.thisRepN'
p182
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p183
I11
sS'.thisN'
p184
I11
sS'.thisIndex'
p185
I8
sg15
(lp186
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp187
S'space'
p188
asg96
I8
sa(dp189
g16
(lp190
S'k'
asg18
S'N'
sS'.thisRepN'
p191
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p192
I12
sS'.thisN'
p193
I12
sS'.thisIndex'
p194
I6
sg15
(lp195
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp196
g16
(lp197
S'd'
asg18
S'N'
sS'.thisRepN'
p198
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p199
I13
sS'.thisN'
p200
I13
sS'.thisIndex'
p201
I12
sg15
(lp202
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I12
sa(dp203
g16
(lp204
S'd'
asg18
S'N'
sS'.thisRepN'
p205
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p206
I14
sS'.thisN'
p207
I14
sS'.thisIndex'
p208
I8
sg15
(lp209
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I8
sa(dp210
g16
(lp211
S'k'
asg18
S'N'
sS'.thisRepN'
p212
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p213
I0
sS'.thisN'
p214
I15
sS'.thisIndex'
p215
I6
sg15
(lp216
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp217
S'space'
p218
asg96
I6
sa(dp219
g16
(lp220
S'd'
asg18
S'Y'
sS'.thisRepN'
p221
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p222
I1
sS'.thisN'
p223
I16
sS'.thisIndex'
p224
I14
sg15
(lp225
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I14
sa(dp226
g16
(lp227
S'd'
asg18
S'Y'
sS'.thisRepN'
p228
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p229
I2
sS'.thisN'
p230
I17
sS'.thisIndex'
p231
I3
sg15
(lp232
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp233
S'space'
p234
asg96
I3
sa(dp235
g16
(lp236
S'd'
asg18
S'N'
sS'.thisRepN'
p237
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p238
I3
sS'.thisN'
p239
I18
sS'.thisIndex'
p240
I9
sg15
(lp241
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I9
sa(dp242
g16
(lp243
S'd'
asg18
S'N'
sS'.thisRepN'
p244
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p245
I4
sS'.thisN'
p246
I19
sS'.thisIndex'
p247
I5
sg15
(lp248
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp249
S'space'
p250
asg96
I5
sa(dp251
g16
(lp252
S'k'
asg18
S'N'
sS'.thisRepN'
p253
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p254
I5
sS'.thisN'
p255
I20
sS'.thisIndex'
p256
I7
sg15
(lp257
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp258
S'space'
p259
asg96
I7
sa(dp260
g16
(lp261
S'k'
asg18
S'N'
sS'.thisRepN'
p262
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p263
I6
sS'.thisN'
p264
I21
sS'.thisIndex'
p265
I10
sg15
(lp266
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp267
S'space'
p268
asg96
I10
sa(dp269
g16
(lp270
S'd'
asg18
S'Y'
sS'.thisRepN'
p271
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p272
I7
sS'.thisN'
p273
I22
sS'.thisIndex'
p274
I6
sg15
(lp275
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I6
sa(dp276
g16
(lp277
S'd'
asg18
S'Y'
sS'.thisRepN'
p278
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p279
I8
sS'.thisN'
p280
I23
sS'.thisIndex'
p281
I10
sg15
(lp282
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp283
S'space'
p284
asg96
I10
sa(dp285
g16
(lp286
S'k'
asg18
S'Y'
sS'.thisRepN'
p287
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p288
I9
sS'.thisN'
p289
I24
sS'.thisIndex'
p290
I9
sg15
(lp291
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I9
sa(dp292
g16
(lp293
S'k'
asg18
S'Y'
sS'.thisRepN'
p294
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p295
I10
sS'.thisN'
p296
I25
sS'.thisIndex'
p297
I11
sg15
(lp298
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I11
sa(dp299
g16
(lp300
S'k'
asg18
S'N'
sS'.thisRepN'
p301
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p302
I11
sS'.thisN'
p303
I26
sS'.thisIndex'
p304
I11
sg15
(lp305
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I11
sa(dp306
g16
(lp307
S'd'
asg18
S'N'
sS'.thisRepN'
p308
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p309
I12
sS'.thisN'
p310
I27
sS'.thisIndex'
p311
I12
sg15
(lp312
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I12
sa(dp313
g16
(lp314
S'k'
asg18
S'N'
sS'.thisRepN'
p315
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p316
I13
sS'.thisN'
p317
I28
sS'.thisIndex'
p318
I2
sg15
(lp319
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp320
g16
(lp321
S'k'
asg18
S'N'
sS'.thisRepN'
p322
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p323
I14
sS'.thisN'
p324
I29
sS'.thisIndex'
p325
I8
sg15
(lp326
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp327
S'space'
p328
asg96
I8
sa(dp329
g16
(lp330
S'd'
asg18
S'N'
sS'.thisRepN'
p331
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p332
I0
sS'.thisN'
p333
I30
sS'.thisIndex'
p334
I10
sg15
(lp335
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp336
S'space'
p337
asg96
I10
sa(dp338
g16
(lp339
S'd'
asg18
S'N'
sS'.thisRepN'
p340
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p341
I1
sS'.thisN'
p342
I31
sS'.thisIndex'
p343
I13
sg15
(lp344
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp345
S'space'
p346
asg96
I13
sa(dp347
g16
(lp348
S'd'
asg18
S'Y'
sS'.thisRepN'
p349
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p350
I2
sS'.thisN'
p351
I32
sS'.thisIndex'
p352
I8
sg15
(lp353
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I8
sa(dp354
g16
(lp355
S'd'
asg18
S'N'
sS'.thisRepN'
p356
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p357
I3
sS'.thisN'
p358
I33
sS'.thisIndex'
p359
I5
sg15
(lp360
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp361
g16
(lp362
S'd'
asg18
S'N'
sS'.thisRepN'
p363
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p364
I4
sS'.thisN'
p365
I34
sS'.thisIndex'
p366
I3
sg15
(lp367
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I3
sa(dp368
g16
(lp369
S'd'
asg18
S'N'
sS'.thisRepN'
p370
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p371
I5
sS'.thisN'
p372
I35
sS'.thisIndex'
p373
I8
sg15
(lp374
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp375
S'space'
p376
asg96
I8
sa(dp377
g16
(lp378
S'd'
asg18
S'N'
sS'.thisRepN'
p379
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p380
I6
sS'.thisN'
p381
I36
sS'.thisIndex'
p382
I7
sg15
(lp383
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp384
S'space'
p385
asg96
I7
sa(dp386
g16
(lp387
S'd'
asg18
S'Y'
sS'.thisRepN'
p388
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p389
I7
sS'.thisN'
p390
I37
sS'.thisIndex'
p391
I5
sg15
(lp392
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp393
S'space'
p394
asg96
I5
sa(dp395
g16
(lp396
S'k'
asg18
S'N'
sS'.thisRepN'
p397
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p398
I8
sS'.thisN'
p399
I38
sS'.thisIndex'
p400
I1
sg15
(lp401
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I1
sa(dp402
g16
(lp403
S'd'
asg18
S'Y'
sS'.thisRepN'
p404
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p405
I9
sS'.thisN'
p406
I39
sS'.thisIndex'
p407
I6
sg15
(lp408
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp409
g16
(lp410
S'd'
asg18
S'Y'
sS'.thisRepN'
p411
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p412
I10
sS'.thisN'
p413
I40
sS'.thisIndex'
p414
I12
sg15
(lp415
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I12
sa(dp416
g16
(lp417
S'k'
asg18
S'Y'
sS'.thisRepN'
p418
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p419
I11
sS'.thisN'
p420
I41
sS'.thisIndex'
p421
I8
sg15
(lp422
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp423
S'space'
p424
asg96
I8
sa(dp425
g16
(lp426
S'd'
asg18
S'Y'
sS'.thisRepN'
p427
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p428
I12
sS'.thisN'
p429
I42
sS'.thisIndex'
p430
I13
sg15
(lp431
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp432
S'space'
p433
asg96
I13
sa(dp434
g16
(lp435
S'd'
asg18
S'N'
sS'.thisRepN'
p436
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p437
I13
sS'.thisN'
p438
I43
sS'.thisIndex'
p439
I6
sg15
(lp440
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp441
g16
(lp442
S'k'
asg18
S'Y'
sS'.thisRepN'
p443
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p444
I14
sS'.thisN'
p445
I44
sS'.thisIndex'
p446
I9
sg15
(lp447
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp448
S'space'
p449
asg96
I9
sa(dp450
g16
(lp451
S'd'
asg18
S'Y'
sS'.thisRepN'
p452
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p453
I0
sS'.thisN'
p454
I45
sS'.thisIndex'
p455
I0
sg15
(lp456
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I0
sa(dp457
g16
(lp458
S'k'
asg18
S'N'
sS'.thisRepN'
p459
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p460
I1
sS'.thisN'
p461
I46
sS'.thisIndex'
p462
I10
sg15
(lp463
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I10
sa(dp464
g16
(lp465
S'd'
asg18
S'N'
sS'.thisRepN'
p466
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p467
I2
sS'.thisN'
p468
I47
sS'.thisIndex'
p469
I12
sg15
(lp470
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I12
sa(dp471
g16
(lp472
S'd'
asg18
S'N'
sS'.thisRepN'
p473
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p474
I3
sS'.thisN'
p475
I48
sS'.thisIndex'
p476
I13
sg15
(lp477
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp478
S'space'
p479
asg96
I13
sa(dp480
g16
(lp481
S'k'
asg18
S'N'
sg22
I25
sS'.thisN'
p482
I49
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p483
I4
sS'.thisRepN'
p484
I3
sg21
I45
sS'.thisIndex'
p485
I9
sg23
I18
sg15
(lp486
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I9
sa(dp487
g16
(lp488
S'k'
asg96
I0
sS'.thisRepN'
p489
I3
sg30
g31
sg32
g33
sS'.thisTrialN'
p490
I5
sS'.thisN'
p491
I50
sS'.thisIndex'
p492
I0
sg15
(lp493
S'k'
asg17
S'Y'
sg14
I2
sa(dp494
g16
(lp495
S'k'
asg96
I13
sS'.thisRepN'
p496
I3
sg30
g31
sg32
g33
sS'.thisTrialN'
p497
I6
sS'.thisN'
p498
I51
sS'.thisIndex'
p499
I13
sg15
(lp500
S'k'
asg17
S'Y'
sg14
I2
sa(dp501
g16
(lp502
S'd'
asg18
S'Y'
sS'.thisRepN'
p503
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p504
I7
sS'.thisN'
p505
I52
sS'.thisIndex'
p506
I4
sg15
(lp507
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp508
S'space'
p509
asg96
I4
sa(dp510
g16
(lp511
S'k'
asg18
S'Y'
sS'.thisRepN'
p512
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p513
I8
sS'.thisN'
p514
I53
sS'.thisIndex'
p515
I4
sg15
(lp516
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp517
S'space'
p518
asg96
I4
sa(dp519
g16
(lp520
S'k'
asg18
S'Y'
sS'.thisRepN'
p521
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p522
I9
sS'.thisN'
p523
I54
sS'.thisIndex'
p524
I9
sg15
(lp525
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp526
S'space'
p527
asg96
I9
sa(dp528
g16
(lp529
S'k'
asg18
S'N'
sS'.thisRepN'
p530
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p531
I10
sS'.thisN'
p532
I55
sS'.thisIndex'
p533
I0
sg15
(lp534
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp535
g16
(lp536
S'k'
asg18
S'N'
sS'.thisRepN'
p537
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p538
I11
sS'.thisN'
p539
I56
sS'.thisIndex'
p540
I14
sg15
(lp541
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I14
sa(dp542
g16
(lp543
S'd'
asg18
S'Y'
sS'.thisRepN'
p544
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p545
I12
sS'.thisN'
p546
I57
sS'.thisIndex'
p547
I13
sg15
(lp548
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp549
S'space'
p550
asg96
I13
sa(dp551
g16
(lp552
S'd'
asg18
S'N'
sS'.thisRepN'
p553
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p554
I13
sS'.thisN'
p555
I58
sS'.thisIndex'
p556
I12
sg15
(lp557
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I12
sa(dp558
g16
(lp559
S'd'
asg18
S'N'
sS'.thisRepN'
p560
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p561
I14
sS'.thisN'
p562
I59
sS'.thisIndex'
p563
I6
sg15
(lp564
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp565
S'space'
p566
asg96
I6
sa(dp567
g16
(lp568
S'k'
asg18
S'N'
sS'.thisRepN'
p569
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p570
I0
sS'.thisN'
p571
I60
sS'.thisIndex'
p572
I6
sg15
(lp573
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp574
S'space'
p575
asg96
I6
sa(dp576
g16
(lp577
S'd'
asg18
S'N'
sS'.thisRepN'
p578
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p579
I1
sS'.thisN'
p580
I61
sS'.thisIndex'
p581
I10
sg15
(lp582
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp583
g16
(lp584
S'k'
asg18
S'N'
sS'.thisRepN'
p585
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p586
I2
sS'.thisN'
p587
I62
sS'.thisIndex'
p588
I5
sg15
(lp589
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp590
g16
(lp591
S'k'
asg18
S'Y'
sS'.thisRepN'
p592
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p593
I3
sS'.thisN'
p594
I63
sS'.thisIndex'
p595
I11
sg15
(lp596
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I11
sa(dp597
g16
(lp598
S'd'
asg18
S'N'
sS'.thisRepN'
p599
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p600
I4
sS'.thisN'
p601
I64
sS'.thisIndex'
p602
I13
sg15
(lp603
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I13
sa(dp604
g16
(lp605
S'd'
asg18
S'N'
sS'.thisRepN'
p606
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p607
I5
sS'.thisN'
p608
I65
sS'.thisIndex'
p609
I0
sg15
(lp610
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp611
S'space'
p612
asg96
I0
sa(dp613
g16
(lp614
S'k'
asg18
S'Y'
sS'.thisRepN'
p615
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p616
I6
sS'.thisN'
p617
I66
sS'.thisIndex'
p618
I14
sg15
(lp619
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I14
sa(dp620
g16
(lp621
S'k'
asg18
S'Y'
sS'.thisRepN'
p622
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p623
I7
sS'.thisN'
p624
I67
sS'.thisIndex'
p625
I12
sg15
(lp626
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp627
S'space'
p628
asg96
I12
sa(dp629
g16
(lp630
S'd'
asg18
S'Y'
sS'.thisRepN'
p631
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p632
I8
sS'.thisN'
p633
I68
sS'.thisIndex'
p634
I11
sg15
(lp635
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp636
S'space'
p637
asg96
I11
sa(dp638
g16
(lp639
S'k'
asg18
S'N'
sS'.thisRepN'
p640
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p641
I9
sS'.thisN'
p642
I69
sS'.thisIndex'
p643
I4
sg15
(lp644
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I4
sa(dp645
g16
(lp646
S'd'
asg18
S'N'
sS'.thisRepN'
p647
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p648
I10
sS'.thisN'
p649
I70
sS'.thisIndex'
p650
I13
sg15
(lp651
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp652
S'space'
p653
asg96
I13
sa(dp654
g16
(lp655
S'd'
asg18
S'N'
sS'.thisRepN'
p656
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p657
I11
sS'.thisN'
p658
I71
sS'.thisIndex'
p659
I9
sg15
(lp660
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I9
sa(dp661
g16
(lp662
S'k'
asg18
S'Y'
sS'.thisRepN'
p663
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p664
I12
sS'.thisN'
p665
I72
sS'.thisIndex'
p666
I14
sg15
(lp667
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I14
sa(dp668
g16
(lp669
S'd'
asg18
S'N'
sS'.thisRepN'
p670
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p671
I13
sS'.thisN'
p672
I73
sS'.thisIndex'
p673
I14
sg15
(lp674
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp675
S'space'
p676
asg96
I14
sa(dp677
g16
(lp678
S'k'
asg18
S'N'
sS'.thisRepN'
p679
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p680
I14
sS'.thisN'
p681
I74
sS'.thisIndex'
p682
I13
sg15
(lp683
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp684
S'space'
p685
asg96
I13
sa(dp686
g16
(lp687
S'k'
asg18
S'Y'
sS'.thisRepN'
p688
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p689
I0
sS'.thisN'
p690
I75
sS'.thisIndex'
p691
I14
sg15
(lp692
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I14
sa(dp693
g16
(lp694
S'k'
asg18
S'N'
sS'.thisRepN'
p695
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p696
I1
sS'.thisN'
p697
I76
sS'.thisIndex'
p698
I1
sg15
(lp699
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp700
g16
(lp701
S'k'
asg18
S'Y'
sS'.thisRepN'
p702
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p703
I2
sS'.thisN'
p704
I77
sS'.thisIndex'
p705
I14
sg15
(lp706
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp707
S'space'
p708
asg96
I14
sa(dp709
g16
(lp710
S'k'
asg18
S'Y'
sS'.thisRepN'
p711
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p712
I3
sS'.thisN'
p713
I78
sS'.thisIndex'
p714
I0
sg15
(lp715
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp716
S'space'
p717
asg96
I0
sa(dp718
g16
(lp719
S'k'
asg18
S'N'
sS'.thisRepN'
p720
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p721
I4
sS'.thisN'
p722
I79
sS'.thisIndex'
p723
I6
sg15
(lp724
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I6
sa(dp725
g16
(lp726
S'k'
asg18
S'N'
sS'.thisRepN'
p727
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p728
I5
sS'.thisN'
p729
I80
sS'.thisIndex'
p730
I1
sg15
(lp731
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp732
g16
(lp733
S'k'
asg18
S'N'
sS'.thisRepN'
p734
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p735
I6
sS'.thisN'
p736
I81
sS'.thisIndex'
p737
I7
sg15
(lp738
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I7
sa(dp739
g16
(lp740
S'k'
asg18
S'Y'
sS'.thisRepN'
p741
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p742
I7
sS'.thisN'
p743
I82
sS'.thisIndex'
p744
I2
sg15
(lp745
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp746
S'space'
p747
asg96
I2
sa(dp748
g16
(lp749
S'k'
asg18
S'N'
sS'.thisRepN'
p750
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p751
I8
sS'.thisN'
p752
I83
sS'.thisIndex'
p753
I10
sg15
(lp754
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp755
g16
(lp756
S'd'
asg18
S'N'
sS'.thisRepN'
p757
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p758
I9
sS'.thisN'
p759
I84
sS'.thisIndex'
p760
I13
sg15
(lp761
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I13
sa(dp762
g16
(lp763
S'k'
asg18
S'Y'
sS'.thisRepN'
p764
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p765
I10
sS'.thisN'
p766
I85
sS'.thisIndex'
p767
I4
sg15
(lp768
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp769
S'space'
p770
asg96
I4
sa(dp771
g16
(lp772
S'k'
asg18
S'N'
sS'.thisRepN'
p773
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p774
I11
sS'.thisN'
p775
I86
sS'.thisIndex'
p776
I8
sg15
(lp777
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I8
sa(dp778
g16
(lp779
S'k'
asg18
S'Y'
sS'.thisRepN'
p780
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p781
I12
sS'.thisN'
p782
I87
sS'.thisIndex'
p783
I3
sg15
(lp784
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp785
g16
(lp786
S'k'
asg18
S'N'
sS'.thisRepN'
p787
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p788
I13
sS'.thisN'
p789
I88
sS'.thisIndex'
p790
I1
sg15
(lp791
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp792
g16
(lp793
S'k'
asg18
S'Y'
sS'.thisRepN'
p794
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p795
I14
sS'.thisN'
p796
I89
sS'.thisIndex'
p797
I5
sg15
(lp798
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp799
S'space'
p800
asg96
I5
sa(dp801
g16
(lp802
S'd'
asg18
S'N'
sS'.thisRepN'
p803
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p804
I0
sS'.thisN'
p805
I90
sS'.thisIndex'
p806
I8
sg15
(lp807
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I8
sa(dp808
g16
(lp809
S'd'
asg18
S'N'
sS'.thisRepN'
p810
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p811
I1
sS'.thisN'
p812
I91
sS'.thisIndex'
p813
I2
sg15
(lp814
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp815
g16
(lp816
S'd'
asg18
S'Y'
sS'.thisRepN'
p817
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p818
I2
sS'.thisN'
p819
I92
sS'.thisIndex'
p820
I10
sg15
(lp821
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp822
S'space'
p823
asg96
I10
sa(dp824
g16
(lp825
S'd'
asg18
S'Y'
sS'.thisRepN'
p826
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p827
I3
sS'.thisN'
p828
I93
sS'.thisIndex'
p829
I11
sg15
(lp830
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp831
S'space'
p832
asg96
I11
sa(dp833
g16
(lp834
S'k'
asg18
S'N'
sS'.thisRepN'
p835
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p836
I4
sS'.thisN'
p837
I94
sS'.thisIndex'
p838
I7
sg15
(lp839
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I7
sa(dp840
g16
(lp841
S'd'
asg18
S'N'
sS'.thisRepN'
p842
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p843
I5
sS'.thisN'
p844
I95
sS'.thisIndex'
p845
I2
sg15
(lp846
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp847
g16
(lp848
S'k'
asg18
S'N'
sS'.thisRepN'
p849
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p850
I6
sS'.thisN'
p851
I96
sS'.thisIndex'
p852
I3
sg15
(lp853
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp854
g16
(lp855
S'k'
asg18
S'N'
sS'.thisRepN'
p856
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p857
I7
sS'.thisN'
p858
I97
sS'.thisIndex'
p859
I14
sg15
(lp860
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I14
sa(dp861
g16
(lp862
S'k'
asg18
S'Y'
sS'.thisRepN'
p863
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p864
I8
sS'.thisN'
p865
I98
sS'.thisIndex'
p866
I11
sg15
(lp867
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp868
S'space'
p869
asg96
I11
sa(dp870
g16
(lp871
S'd'
asg18
S'Y'
sg22
I37
sS'.thisN'
p872
I99
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p873
I9
sS'.thisRepN'
p874
I6
sg21
I47
sS'.thisIndex'
p875
I2
sg23
I20
sg15
(lp876
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp877
S'space'
p878
asg96
I2
sa(dp879
g16
(lp880
S'd'
asg96
I4
sS'.thisRepN'
p881
I6
sg30
g31
sg32
g33
sS'.thisTrialN'
p882
I10
sS'.thisN'
p883
I100
sS'.thisIndex'
p884
I4
sg15
(lp885
S'd'
asg17
S'Y'
sg14
I3
sa(dp886
g16
(lp887
S'k'
asg96
I13
sS'.thisRepN'
p888
I6
sg30
g31
sg32
g33
sS'.thisTrialN'
p889
I11
sS'.thisN'
p890
I101
sS'.thisIndex'
p891
I13
sg15
(lp892
S'k'
asg17
S'Y'
sg14
I3
sa(dp893
g16
(lp894
S'd'
asg18
S'Y'
sS'.thisRepN'
p895
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p896
I12
sS'.thisN'
p897
I102
sS'.thisIndex'
p898
I13
sg15
(lp899
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp900
S'space'
p901
asg96
I13
sa(dp902
g16
(lp903
S'k'
asg18
S'Y'
sS'.thisRepN'
p904
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p905
I13
sS'.thisN'
p906
I103
sS'.thisIndex'
p907
I4
sg15
(lp908
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp909
S'space'
p910
asg96
I4
sa(dp911
g16
(lp912
S'd'
asg18
S'Y'
sS'.thisRepN'
p913
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p914
I14
sS'.thisN'
p915
I104
sS'.thisIndex'
p916
I11
sg15
(lp917
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp918
S'space'
p919
asg96
I11
sa(dp920
g16
(lp921
S'k'
asg18
S'N'
sS'.thisRepN'
p922
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p923
I0
sS'.thisN'
p924
I105
sS'.thisIndex'
p925
I7
sg15
(lp926
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp927
g16
(lp928
S'd'
asg18
S'Y'
sS'.thisRepN'
p929
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p930
I1
sS'.thisN'
p931
I106
sS'.thisIndex'
p932
I9
sg15
(lp933
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp934
S'space'
p935
asg96
I9
sa(dp936
g16
(lp937
S'k'
asg18
S'Y'
sS'.thisRepN'
p938
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p939
I2
sS'.thisN'
p940
I107
sS'.thisIndex'
p941
I6
sg15
(lp942
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp943
S'space'
p944
asg96
I6
sa(dp945
g16
(lp946
S'd'
asg18
S'Y'
sS'.thisRepN'
p947
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p948
I3
sS'.thisN'
p949
I108
sS'.thisIndex'
p950
I2
sg15
(lp951
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp952
S'space'
p953
asg96
I2
sa(dp954
g16
(lp955
S'd'
asg18
S'Y'
sS'.thisRepN'
p956
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p957
I4
sS'.thisN'
p958
I109
sS'.thisIndex'
p959
I7
sg15
(lp960
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp961
S'space'
p962
asg96
I7
sa(dp963
g16
(lp964
S'd'
asg18
S'Y'
sS'.thisRepN'
p965
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p966
I5
sS'.thisN'
p967
I110
sS'.thisIndex'
p968
I6
sg15
(lp969
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp970
S'space'
p971
asg96
I6
sa(dp972
g16
(lp973
S'd'
asg18
S'N'
sS'.thisRepN'
p974
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p975
I6
sS'.thisN'
p976
I111
sS'.thisIndex'
p977
I5
sg15
(lp978
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp979
g16
(lp980
S'k'
asg18
S'Y'
sS'.thisRepN'
p981
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p982
I7
sS'.thisN'
p983
I112
sS'.thisIndex'
p984
I8
sg15
(lp985
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp986
S'space'
p987
asg96
I8
sa(dp988
g16
(lp989
S'k'
asg18
S'Y'
sS'.thisRepN'
p990
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p991
I8
sS'.thisN'
p992
I113
sS'.thisIndex'
p993
I3
sg15
(lp994
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp995
S'space'
p996
asg96
I3
sa(dp997
g16
(lp998
S'd'
asg18
S'N'
sS'.thisRepN'
p999
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1000
I9
sS'.thisN'
p1001
I114
sS'.thisIndex'
p1002
I6
sg15
(lp1003
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1004
g16
(lp1005
S'd'
asg18
S'N'
sS'.thisRepN'
p1006
I7
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1007
I10
sS'.thisN'
p1008
I115
sS'.thisIndex'
p1009
I7
sg15
(lp1010
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1011
S'space'
p1012
asg96
I7
sa(dp1013
g16
(lp1014
S'd'
asg18
S'Y'
sS'.thisRepN'
p1015
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1016
I11
sS'.thisN'
p1017
I116
sS'.thisIndex'
p1018
I9
sg15
(lp1019
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1020
S'space'
p1021
asg96
I9
sa(dp1022
g16
(lp1023
S'd'
asg18
S'Y'
sS'.thisRepN'
p1024
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1025
I12
sS'.thisN'
p1026
I117
sS'.thisIndex'
p1027
I11
sg15
(lp1028
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1029
S'space'
p1030
asg96
I11
sa(dp1031
g16
(lp1032
S'k'
asg18
S'N'
sS'.thisRepN'
p1033
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1034
I13
sS'.thisN'
p1035
I118
sS'.thisIndex'
p1036
I10
sg15
(lp1037
S'd'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I10
sa(dp1038
g16
(lp1039
S'k'
asg18
S'Y'
sS'.thisRepN'
p1040
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1041
I14
sS'.thisN'
p1042
I119
sS'.thisIndex'
p1043
I14
sg15
(lp1044
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1045
S'space'
p1046
asg96
I14
sa(dp1047
g16
(lp1048
S'k'
asg18
S'N'
sS'.thisRepN'
p1049
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1050
I0
sS'.thisN'
p1051
I120
sS'.thisIndex'
p1052
I10
sg15
(lp1053
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp1054
g16
(lp1055
S'k'
asg18
S'N'
sS'.thisRepN'
p1056
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1057
I1
sS'.thisN'
p1058
I121
sS'.thisIndex'
p1059
I1
sg15
(lp1060
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1061
g16
(lp1062
S'd'
asg18
S'Y'
sS'.thisRepN'
p1063
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1064
I2
sS'.thisN'
p1065
I122
sS'.thisIndex'
p1066
I14
sg15
(lp1067
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I14
sa(dp1068
g16
(lp1069
S'k'
asg18
S'Y'
sS'.thisRepN'
p1070
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1071
I3
sS'.thisN'
p1072
I123
sS'.thisIndex'
p1073
I3
sg15
(lp1074
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp1075
g16
(lp1076
S'k'
asg18
S'N'
sS'.thisRepN'
p1077
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1078
I4
sS'.thisN'
p1079
I124
sS'.thisIndex'
p1080
I12
sg15
(lp1081
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I12
sa(dp1082
g16
(lp1083
S'd'
asg18
S'Y'
sS'.thisRepN'
p1084
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1085
I5
sS'.thisN'
p1086
I125
sS'.thisIndex'
p1087
I5
sg15
(lp1088
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1089
S'space'
p1090
asg96
I5
sa(dp1091
g16
(lp1092
S'd'
asg18
S'N'
sS'.thisRepN'
p1093
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1094
I6
sS'.thisN'
p1095
I126
sS'.thisIndex'
p1096
I4
sg15
(lp1097
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I4
sa(dp1098
g16
(lp1099
S'k'
asg18
S'Y'
sS'.thisRepN'
p1100
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1101
I7
sS'.thisN'
p1102
I127
sS'.thisIndex'
p1103
I3
sg15
(lp1104
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1105
S'space'
p1106
asg96
I3
sa(dp1107
g16
(lp1108
S'd'
asg18
S'Y'
sS'.thisRepN'
p1109
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1110
I8
sS'.thisN'
p1111
I128
sS'.thisIndex'
p1112
I9
sg15
(lp1113
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1114
S'space'
p1115
asg96
I9
sa(dp1116
g16
(lp1117
S'k'
asg18
S'N'
sS'.thisRepN'
p1118
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1119
I9
sS'.thisN'
p1120
I129
sS'.thisIndex'
p1121
I1
sg15
(lp1122
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1123
g16
(lp1124
S'k'
asg18
S'Y'
sS'.thisRepN'
p1125
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1126
I10
sS'.thisN'
p1127
I130
sS'.thisIndex'
p1128
I3
sg15
(lp1129
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1130
S'space'
p1131
asg96
I3
sa(dp1132
g16
(lp1133
S'd'
asg18
S'Y'
sS'.thisRepN'
p1134
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1135
I11
sS'.thisN'
p1136
I131
sS'.thisIndex'
p1137
I10
sg15
(lp1138
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1139
S'space'
p1140
asg96
I10
sa(dp1141
g16
(lp1142
S'k'
asg18
S'Y'
sS'.thisRepN'
p1143
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1144
I12
sS'.thisN'
p1145
I132
sS'.thisIndex'
p1146
I10
sg15
(lp1147
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1148
S'space'
p1149
asg96
I10
sa(dp1150
g16
(lp1151
S'd'
asg18
S'N'
sS'.thisRepN'
p1152
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1153
I13
sS'.thisN'
p1154
I133
sS'.thisIndex'
p1155
I10
sg15
(lp1156
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp1157
g16
(lp1158
S'd'
asg18
S'N'
sS'.thisRepN'
p1159
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1160
I14
sS'.thisN'
p1161
I134
sS'.thisIndex'
p1162
I10
sg15
(lp1163
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp1164
g16
(lp1165
S'k'
asg18
S'N'
sS'.thisRepN'
p1166
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1167
I0
sS'.thisN'
p1168
I135
sS'.thisIndex'
p1169
I7
sg15
(lp1170
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp1171
g16
(lp1172
S'd'
asg18
S'Y'
sS'.thisRepN'
p1173
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1174
I1
sS'.thisN'
p1175
I136
sS'.thisIndex'
p1176
I1
sg15
(lp1177
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1178
S'space'
p1179
asg96
I1
sa(dp1180
g16
(lp1181
S'k'
asg18
S'Y'
sS'.thisRepN'
p1182
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1183
I2
sS'.thisN'
p1184
I137
sS'.thisIndex'
p1185
I11
sg15
(lp1186
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1187
S'space'
p1188
asg96
I11
sa(dp1189
g16
(lp1190
S'd'
asg18
S'Y'
sS'.thisRepN'
p1191
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1192
I3
sS'.thisN'
p1193
I138
sS'.thisIndex'
p1194
I6
sg15
(lp1195
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1196
g16
(lp1197
S'd'
asg18
S'Y'
sS'.thisRepN'
p1198
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1199
I4
sS'.thisN'
p1200
I139
sS'.thisIndex'
p1201
I3
sg15
(lp1202
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp1203
g16
(lp1204
S'k'
asg18
S'N'
sS'.thisRepN'
p1205
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1206
I5
sS'.thisN'
p1207
I140
sS'.thisIndex'
p1208
I8
sg15
(lp1209
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I8
sa(dp1210
g16
(lp1211
S'd'
asg18
S'N'
sS'.thisRepN'
p1212
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1213
I6
sS'.thisN'
p1214
I141
sS'.thisIndex'
p1215
I12
sg15
(lp1216
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I12
sa(dp1217
g16
(lp1218
S'd'
asg18
S'N'
sS'.thisRepN'
p1219
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1220
I7
sS'.thisN'
p1221
I142
sS'.thisIndex'
p1222
I5
sg15
(lp1223
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1224
g16
(lp1225
S'd'
asg18
S'N'
sS'.thisRepN'
p1226
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1227
I8
sS'.thisN'
p1228
I143
sS'.thisIndex'
p1229
I13
sg15
(lp1230
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I13
sa(dp1231
g16
(lp1232
S'k'
asg18
S'N'
sS'.thisRepN'
p1233
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1234
I9
sS'.thisN'
p1235
I144
sS'.thisIndex'
p1236
I6
sg15
(lp1237
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1238
g16
(lp1239
S'k'
asg18
S'N'
sS'.thisRepN'
p1240
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1241
I10
sS'.thisN'
p1242
I145
sS'.thisIndex'
p1243
I6
sg15
(lp1244
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1245
g16
(lp1246
S'd'
asg18
S'N'
sS'.thisRepN'
p1247
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1248
I11
sS'.thisN'
p1249
I146
sS'.thisIndex'
p1250
I8
sg15
(lp1251
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I8
sa(dp1252
g16
(lp1253
S'd'
asg18
S'N'
sS'.thisRepN'
p1254
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1255
I12
sS'.thisN'
p1256
I147
sS'.thisIndex'
p1257
I13
sg15
(lp1258
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1259
S'space'
p1260
asg96
I13
sa(dp1261
g16
(lp1262
S'd'
asg18
S'N'
sS'.thisRepN'
p1263
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1264
I13
sS'.thisN'
p1265
I148
sS'.thisIndex'
p1266
I0
sg15
(lp1267
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1268
g16
(lp1269
S'd'
asg18
S'N'
sg22
I42
sS'.thisN'
p1270
I149
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1271
I14
sS'.thisRepN'
p1272
I9
sg21
I48
sS'.thisIndex'
p1273
I7
sg23
I25
sg15
(lp1274
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp1275
g16
(lp1276
S'k'
asg96
I14
sS'.thisRepN'
p1277
I10
sg30
g31
sg32
g33
sS'.thisTrialN'
p1278
I0
sS'.thisN'
p1279
I150
sS'.thisIndex'
p1280
I14
sg15
(lp1281
S'k'
asg17
S'Y'
sg14
I4
sa(dp1282
g16
(lp1283
S'k'
asg96
I13
sS'.thisRepN'
p1284
I10
sg30
g31
sg32
g33
sS'.thisTrialN'
p1285
I1
sS'.thisN'
p1286
I151
sS'.thisIndex'
p1287
I13
sg15
(lp1288
S'k'
asg17
S'Y'
sg14
I4
sa(dp1289
g16
(lp1290
S'k'
asg18
S'N'
sS'.thisRepN'
p1291
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1292
I2
sS'.thisN'
p1293
I152
sS'.thisIndex'
p1294
I11
sg15
(lp1295
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I11
sa(dp1296
g16
(lp1297
S'd'
asg18
S'Y'
sS'.thisRepN'
p1298
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1299
I3
sS'.thisN'
p1300
I153
sS'.thisIndex'
p1301
I11
sg15
(lp1302
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1303
S'space'
p1304
asg96
I11
sa(dp1305
g16
(lp1306
S'k'
asg18
S'N'
sS'.thisRepN'
p1307
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1308
I4
sS'.thisN'
p1309
I154
sS'.thisIndex'
p1310
I3
sg15
(lp1311
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1312
g16
(lp1313
S'k'
asg18
S'N'
sS'.thisRepN'
p1314
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1315
I5
sS'.thisN'
p1316
I155
sS'.thisIndex'
p1317
I3
sg15
(lp1318
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1319
g16
(lp1320
S'k'
asg18
S'N'
sS'.thisRepN'
p1321
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1322
I6
sS'.thisN'
p1323
I156
sS'.thisIndex'
p1324
I6
sg15
(lp1325
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1326
g16
(lp1327
S'k'
asg18
S'N'
sS'.thisRepN'
p1328
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1329
I7
sS'.thisN'
p1330
I157
sS'.thisIndex'
p1331
I7
sg15
(lp1332
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1333
g16
(lp1334
S'k'
asg18
S'Y'
sS'.thisRepN'
p1335
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1336
I8
sS'.thisN'
p1337
I158
sS'.thisIndex'
p1338
I8
sg15
(lp1339
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1340
S'space'
p1341
asg96
I8
sa(dp1342
g16
(lp1343
S'd'
asg18
S'N'
sS'.thisRepN'
p1344
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1345
I9
sS'.thisN'
p1346
I159
sS'.thisIndex'
p1347
I7
sg15
(lp1348
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1349
g16
(lp1350
S'k'
asg18
S'Y'
sS'.thisRepN'
p1351
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1352
I10
sS'.thisN'
p1353
I160
sS'.thisIndex'
p1354
I14
sg15
(lp1355
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1356
S'space'
p1357
asg96
I14
sa(dp1358
g16
(lp1359
S'k'
asg18
S'N'
sS'.thisRepN'
p1360
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1361
I11
sS'.thisN'
p1362
I161
sS'.thisIndex'
p1363
I0
sg15
(lp1364
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I0
sa(dp1365
g16
(lp1366
S'd'
asg18
S'Y'
sS'.thisRepN'
p1367
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1368
I12
sS'.thisN'
p1369
I162
sS'.thisIndex'
p1370
I3
sg15
(lp1371
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1372
S'space'
p1373
asg96
I3
sa(dp1374
g16
(lp1375
S'k'
asg18
S'N'
sS'.thisRepN'
p1376
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1377
I13
sS'.thisN'
p1378
I163
sS'.thisIndex'
p1379
I0
sg15
(lp1380
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1381
g16
(lp1382
S'd'
asg18
S'Y'
sS'.thisRepN'
p1383
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1384
I14
sS'.thisN'
p1385
I164
sS'.thisIndex'
p1386
I10
sg15
(lp1387
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1388
S'space'
p1389
asg96
I10
sa(dp1390
g16
(lp1391
S'k'
asg18
S'N'
sS'.thisRepN'
p1392
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1393
I0
sS'.thisN'
p1394
I165
sS'.thisIndex'
p1395
I11
sg15
(lp1396
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I11
sa(dp1397
g16
(lp1398
S'd'
asg18
S'N'
sS'.thisRepN'
p1399
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1400
I1
sS'.thisN'
p1401
I166
sS'.thisIndex'
p1402
I1
sg15
(lp1403
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1404
g16
(lp1405
S'd'
asg18
S'N'
sS'.thisRepN'
p1406
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1407
I2
sS'.thisN'
p1408
I167
sS'.thisIndex'
p1409
I12
sg15
(lp1410
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I12
sa(dp1411
g16
(lp1412
S'd'
asg18
S'N'
sS'.thisRepN'
p1413
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1414
I3
sS'.thisN'
p1415
I168
sS'.thisIndex'
p1416
I13
sg15
(lp1417
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I13
sa(dp1418
g16
(lp1419
S'k'
asg18
S'N'
sS'.thisRepN'
p1420
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1421
I4
sS'.thisN'
p1422
I169
sS'.thisIndex'
p1423
I8
sg15
(lp1424
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1425
g16
(lp1426
S'k'
asg18
S'Y'
sS'.thisRepN'
p1427
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1428
I5
sS'.thisN'
p1429
I170
sS'.thisIndex'
p1430
I6
sg15
(lp1431
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1432
g16
(lp1433
S'k'
asg18
S'Y'
sS'.thisRepN'
p1434
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1435
I6
sS'.thisN'
p1436
I171
sS'.thisIndex'
p1437
I4
sg15
(lp1438
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1439
S'space'
p1440
asg96
I4
sa(dp1441
g16
(lp1442
S'k'
asg18
S'Y'
sS'.thisRepN'
p1443
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1444
I7
sS'.thisN'
p1445
I172
sS'.thisIndex'
p1446
I4
sg15
(lp1447
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1448
S'space'
p1449
asg96
I4
sa(dp1450
g16
(lp1451
S'k'
asg18
S'Y'
sS'.thisRepN'
p1452
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1453
I8
sS'.thisN'
p1454
I173
sS'.thisIndex'
p1455
I9
sg15
(lp1456
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1457
S'space'
p1458
asg96
I9
sa(dp1459
g16
(lp1460
S'k'
asg18
S'N'
sS'.thisRepN'
p1461
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1462
I9
sS'.thisN'
p1463
I174
sS'.thisIndex'
p1464
I7
sg15
(lp1465
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1466
g16
(lp1467
S'd'
asg18
S'N'
sS'.thisRepN'
p1468
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1469
I10
sS'.thisN'
p1470
I175
sS'.thisIndex'
p1471
I13
sg15
(lp1472
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1473
S'space'
p1474
asg96
I13
sa(dp1475
g16
(lp1476
S'k'
asg18
S'N'
sS'.thisRepN'
p1477
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1478
I11
sS'.thisN'
p1479
I176
sS'.thisIndex'
p1480
I12
sg15
(lp1481
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I12
sa(dp1482
g16
(lp1483
S'k'
asg18
S'N'
sS'.thisRepN'
p1484
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1485
I12
sS'.thisN'
p1486
I177
sS'.thisIndex'
p1487
I2
sg15
(lp1488
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1489
g16
(lp1490
S'd'
asg18
S'Y'
sS'.thisRepN'
p1491
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1492
I13
sS'.thisN'
p1493
I178
sS'.thisIndex'
p1494
I0
sg15
(lp1495
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1496
S'space'
p1497
asg96
I0
sa(dp1498
g16
(lp1499
S'd'
asg18
S'N'
sS'.thisRepN'
p1500
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1501
I14
sS'.thisN'
p1502
I179
sS'.thisIndex'
p1503
I8
sg15
(lp1504
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1505
g16
(lp1506
S'd'
asg18
S'N'
sS'.thisRepN'
p1507
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1508
I0
sS'.thisN'
p1509
I180
sS'.thisIndex'
p1510
I5
sg15
(lp1511
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I5
sa(dp1512
g16
(lp1513
S'k'
asg18
S'N'
sS'.thisRepN'
p1514
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1515
I1
sS'.thisN'
p1516
I181
sS'.thisIndex'
p1517
I0
sg15
(lp1518
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1519
g16
(lp1520
S'k'
asg18
S'N'
sS'.thisRepN'
p1521
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1522
I2
sS'.thisN'
p1523
I182
sS'.thisIndex'
p1524
I4
sg15
(lp1525
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1526
g16
(lp1527
S'd'
asg18
S'N'
sS'.thisRepN'
p1528
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1529
I3
sS'.thisN'
p1530
I183
sS'.thisIndex'
p1531
I4
sg15
(lp1532
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1533
g16
(lp1534
S'k'
asg18
S'N'
sS'.thisRepN'
p1535
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1536
I4
sS'.thisN'
p1537
I184
sS'.thisIndex'
p1538
I1
sg15
(lp1539
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1540
g16
(lp1541
S'k'
asg18
S'N'
sS'.thisRepN'
p1542
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1543
I5
sS'.thisN'
p1544
I185
sS'.thisIndex'
p1545
I6
sg15
(lp1546
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1547
g16
(lp1548
S'd'
asg18
S'Y'
sS'.thisRepN'
p1549
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1550
I6
sS'.thisN'
p1551
I186
sS'.thisIndex'
p1552
I11
sg15
(lp1553
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I11
sa(dp1554
g16
(lp1555
S'd'
asg18
S'Y'
sS'.thisRepN'
p1556
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1557
I7
sS'.thisN'
p1558
I187
sS'.thisIndex'
p1559
I6
sg15
(lp1560
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1561
S'space'
p1562
asg96
I6
sa(dp1563
g16
(lp1564
S'k'
asg18
S'Y'
sS'.thisRepN'
p1565
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1566
I8
sS'.thisN'
p1567
I188
sS'.thisIndex'
p1568
I5
sg15
(lp1569
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1570
S'space'
p1571
asg96
I5
sa(dp1572
g16
(lp1573
S'd'
asg18
S'Y'
sS'.thisRepN'
p1574
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1575
I9
sS'.thisN'
p1576
I189
sS'.thisIndex'
p1577
I4
sg15
(lp1578
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1579
S'space'
p1580
asg96
I4
sa(dp1581
g16
(lp1582
S'd'
asg18
S'N'
sS'.thisRepN'
p1583
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1584
I10
sS'.thisN'
p1585
I190
sS'.thisIndex'
p1586
I3
sg15
(lp1587
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I3
sa(dp1588
g16
(lp1589
S'd'
asg18
S'N'
sS'.thisRepN'
p1590
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1591
I11
sS'.thisN'
p1592
I191
sS'.thisIndex'
p1593
I3
sg15
(lp1594
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1595
g16
(lp1596
S'd'
asg18
S'N'
sS'.thisRepN'
p1597
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1598
I12
sS'.thisN'
p1599
I192
sS'.thisIndex'
p1600
I4
sg15
(lp1601
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1602
S'space'
p1603
asg96
I4
sa(dp1604
g16
(lp1605
S'd'
asg18
S'Y'
sS'.thisRepN'
p1606
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1607
I13
sS'.thisN'
p1608
I193
sS'.thisIndex'
p1609
I9
sg15
(lp1610
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1611
S'space'
p1612
asg96
I9
sa(dp1613
g16
(lp1614
S'd'
asg18
S'N'
sS'.thisRepN'
p1615
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1616
I14
sS'.thisN'
p1617
I194
sS'.thisIndex'
p1618
I2
sg15
(lp1619
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1620
g16
(lp1621
S'k'
asg18
S'Y'
sS'.thisRepN'
p1622
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1623
I0
sS'.thisN'
p1624
I195
sS'.thisIndex'
p1625
I0
sg15
(lp1626
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1627
S'space'
p1628
asg96
I0
sa(dp1629
g16
(lp1630
S'd'
asg18
S'N'
sS'.thisRepN'
p1631
I13
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1632
I1
sS'.thisN'
p1633
I196
sS'.thisIndex'
p1634
I12
sg15
(lp1635
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1636
S'space'
p1637
asg96
I12
sa(dp1638
g16
(lp1639
S'k'
asg18
S'Y'
sS'.thisRepN'
p1640
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1641
I2
sS'.thisN'
p1642
I197
sS'.thisIndex'
p1643
I4
sg15
(lp1644
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1645
S'space'
p1646
asg96
I4
sa(dp1647
g16
(lp1648
S'd'
asg18
S'N'
sS'.thisRepN'
p1649
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1650
I3
sS'.thisN'
p1651
I198
sS'.thisIndex'
p1652
I4
sg15
(lp1653
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1654
g16
(lp1655
S'd'
asg18
S'Y'
sg22
I43
sS'.thisN'
p1656
I199
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1657
I4
sS'.thisRepN'
p1658
I13
sg21
I47
sS'.thisIndex'
p1659
I2
sg23
I18
sg15
(lp1660
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1661
S'space'
p1662
asg96
I2
sa(dp1663
g16
(lp1664
S'd'
asg96
I7
sS'.thisRepN'
p1665
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1666
I5
sS'.thisN'
p1667
I200
sS'.thisIndex'
p1668
I7
sg15
(lp1669
S'd'
asg17
S'Y'
sg14
I5
sa(dp1670
g16
(lp1671
S'd'
asg96
I14
sS'.thisRepN'
p1672
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1673
I6
sS'.thisN'
p1674
I201
sS'.thisIndex'
p1675
I14
sg15
(lp1676
S'd'
asg17
S'Y'
sg14
I5
sa(dp1677
g16
(lp1678
S'k'
asg18
S'Y'
sS'.thisRepN'
p1679
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1680
I7
sS'.thisN'
p1681
I202
sS'.thisIndex'
p1682
I12
sg15
(lp1683
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1684
S'space'
p1685
asg96
I12
sa(dp1686
g16
(lp1687
S'd'
asg18
S'Y'
sS'.thisRepN'
p1688
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1689
I8
sS'.thisN'
p1690
I203
sS'.thisIndex'
p1691
I1
sg15
(lp1692
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1693
S'space'
p1694
asg96
I1
sa(dp1695
g16
(lp1696
S'k'
asg18
S'Y'
sS'.thisRepN'
p1697
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1698
I9
sS'.thisN'
p1699
I204
sS'.thisIndex'
p1700
I0
sg15
(lp1701
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1702
S'space'
p1703
asg96
I0
sa(dp1704
g16
(lp1705
S'k'
asg18
S'N'
sS'.thisRepN'
p1706
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1707
I10
sS'.thisN'
p1708
I205
sS'.thisIndex'
p1709
I0
sg15
(lp1710
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1711
g16
(lp1712
S'd'
asg18
S'Y'
sS'.thisRepN'
p1713
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1714
I11
sS'.thisN'
p1715
I206
sS'.thisIndex'
p1716
I10
sg15
(lp1717
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1718
S'space'
p1719
asg96
I10
sa(dp1720
g16
(lp1721
S'd'
asg18
S'Y'
sS'.thisRepN'
p1722
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1723
I12
sS'.thisN'
p1724
I207
sS'.thisIndex'
p1725
I10
sg15
(lp1726
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1727
S'space'
p1728
asg96
I10
sa(dp1729
g16
(lp1730
S'd'
asg18
S'N'
sS'.thisRepN'
p1731
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1732
I13
sS'.thisN'
p1733
I208
sS'.thisIndex'
p1734
I2
sg15
(lp1735
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp1736
g16
(lp1737
S'd'
asg18
S'Y'
sS'.thisRepN'
p1738
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1739
I14
sS'.thisN'
p1740
I209
sS'.thisIndex'
p1741
I0
sg15
(lp1742
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1743
S'space'
p1744
asg96
I0
sa(dp1745
g16
(lp1746
S'd'
asg18
S'Y'
sS'.thisRepN'
p1747
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1748
I0
sS'.thisN'
p1749
I210
sS'.thisIndex'
p1750
I13
sg15
(lp1751
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1752
S'space'
p1753
asg96
I13
sa(dp1754
g16
(lp1755
S'k'
asg18
S'N'
sS'.thisRepN'
p1756
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1757
I1
sS'.thisN'
p1758
I211
sS'.thisIndex'
p1759
I7
sg15
(lp1760
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1761
g16
(lp1762
S'd'
asg18
S'N'
sS'.thisRepN'
p1763
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1764
I2
sS'.thisN'
p1765
I212
sS'.thisIndex'
p1766
I2
sg15
(lp1767
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp1768
g16
(lp1769
S'd'
asg18
S'Y'
sS'.thisRepN'
p1770
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1771
I3
sS'.thisN'
p1772
I213
sS'.thisIndex'
p1773
I2
sg15
(lp1774
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1775
S'space'
p1776
asg96
I2
sa(dp1777
g16
(lp1778
S'k'
asg18
S'Y'
sS'.thisRepN'
p1779
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1780
I4
sS'.thisN'
p1781
I214
sS'.thisIndex'
p1782
I0
sg15
(lp1783
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1784
S'space'
p1785
asg96
I0
sa(dp1786
g16
(lp1787
S'k'
asg18
S'N'
sS'.thisRepN'
p1788
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1789
I5
sS'.thisN'
p1790
I215
sS'.thisIndex'
p1791
I9
sg15
(lp1792
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1793
g16
(lp1794
S'd'
asg18
S'N'
sS'.thisRepN'
p1795
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1796
I6
sS'.thisN'
p1797
I216
sS'.thisIndex'
p1798
I7
sg15
(lp1799
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1800
g16
(lp1801
S'd'
asg18
S'N'
sS'.thisRepN'
p1802
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1803
I7
sS'.thisN'
p1804
I217
sS'.thisIndex'
p1805
I8
sg15
(lp1806
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1807
g16
(lp1808
S'k'
asg18
S'Y'
sS'.thisRepN'
p1809
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1810
I8
sS'.thisN'
p1811
I218
sS'.thisIndex'
p1812
I14
sg15
(lp1813
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1814
S'space'
p1815
asg96
I14
sa(dp1816
g16
(lp1817
S'd'
asg18
S'Y'
sS'.thisRepN'
p1818
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1819
I9
sS'.thisN'
p1820
I219
sS'.thisIndex'
p1821
I0
sg15
(lp1822
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1823
S'space'
p1824
asg96
I0
sa(dp1825
g16
(lp1826
S'd'
asg18
S'N'
sS'.thisRepN'
p1827
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1828
I10
sS'.thisN'
p1829
I220
sS'.thisIndex'
p1830
I0
sg15
(lp1831
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1832
g16
(lp1833
S'd'
asg18
S'Y'
sS'.thisRepN'
p1834
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1835
I11
sS'.thisN'
p1836
I221
sS'.thisIndex'
p1837
I10
sg15
(lp1838
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1839
S'space'
p1840
asg96
I10
sa(dp1841
g16
(lp1842
S'd'
asg18
S'Y'
sS'.thisRepN'
p1843
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1844
I12
sS'.thisN'
p1845
I222
sS'.thisIndex'
p1846
I9
sg15
(lp1847
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1848
S'space'
p1849
asg96
I9
sa(dp1850
g16
(lp1851
S'k'
asg18
S'N'
sS'.thisRepN'
p1852
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1853
I13
sS'.thisN'
p1854
I223
sS'.thisIndex'
p1855
I3
sg15
(lp1856
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1857
g16
(lp1858
S'd'
asg18
S'N'
sS'.thisRepN'
p1859
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1860
I14
sS'.thisN'
p1861
I224
sS'.thisIndex'
p1862
I10
sg15
(lp1863
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1864
g16
(lp1865
S'k'
asg18
S'Y'
sS'.thisRepN'
p1866
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1867
I0
sS'.thisN'
p1868
I225
sS'.thisIndex'
p1869
I13
sg15
(lp1870
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1871
S'space'
p1872
asg96
I13
sa(dp1873
g16
(lp1874
S'k'
asg18
S'Y'
sS'.thisRepN'
p1875
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1876
I1
sS'.thisN'
p1877
I226
sS'.thisIndex'
p1878
I4
sg15
(lp1879
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1880
S'space'
p1881
asg96
I4
sa(dp1882
g16
(lp1883
S'k'
asg18
S'N'
sS'.thisRepN'
p1884
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1885
I2
sS'.thisN'
p1886
I227
sS'.thisIndex'
p1887
I3
sg15
(lp1888
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1889
g16
(lp1890
S'd'
asg18
S'N'
sS'.thisRepN'
p1891
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1892
I3
sS'.thisN'
p1893
I228
sS'.thisIndex'
p1894
I12
sg15
(lp1895
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I12
sa(dp1896
g16
(lp1897
S'd'
asg18
S'N'
sS'.thisRepN'
p1898
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1899
I4
sS'.thisN'
p1900
I229
sS'.thisIndex'
p1901
I1
sg15
(lp1902
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I1
sa(dp1903
g16
(lp1904
S'd'
asg18
S'Y'
sS'.thisRepN'
p1905
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1906
I5
sS'.thisN'
p1907
I230
sS'.thisIndex'
p1908
I12
sg15
(lp1909
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1910
S'space'
p1911
asg96
I12
sa(dp1912
g16
(lp1913
S'd'
asg18
S'N'
sS'.thisRepN'
p1914
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1915
I6
sS'.thisN'
p1916
I231
sS'.thisIndex'
p1917
I6
sg15
(lp1918
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I6
sa(dp1919
g16
(lp1920
S'k'
asg18
S'N'
sS'.thisRepN'
p1921
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1922
I7
sS'.thisN'
p1923
I232
sS'.thisIndex'
p1924
I5
sg15
(lp1925
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1926
S'space'
p1927
asg96
I5
sa(dp1928
g16
(lp1929
S'k'
asg18
S'Y'
sS'.thisRepN'
p1930
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1931
I8
sS'.thisN'
p1932
I233
sS'.thisIndex'
p1933
I11
sg15
(lp1934
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1935
S'space'
p1936
asg96
I11
sa(dp1937
g16
(lp1938
S'k'
asg18
S'N'
sS'.thisRepN'
p1939
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1940
I9
sS'.thisN'
p1941
I234
sS'.thisIndex'
p1942
I1
sg15
(lp1943
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1944
S'space'
p1945
asg96
I1
sa(dp1946
g16
(lp1947
S'k'
asg18
S'Y'
sS'.thisRepN'
p1948
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1949
I10
sS'.thisN'
p1950
I235
sS'.thisIndex'
p1951
I0
sg15
(lp1952
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1953
S'space'
p1954
asg96
I0
sa(dp1955
g16
(lp1956
S'k'
asg18
S'Y'
sS'.thisRepN'
p1957
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1958
I11
sS'.thisN'
p1959
I236
sS'.thisIndex'
p1960
I14
sg15
(lp1961
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1962
S'space'
p1963
asg96
I14
sa(dp1964
g16
(lp1965
S'k'
asg18
S'Y'
sS'.thisRepN'
p1966
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1967
I12
sS'.thisN'
p1968
I237
sS'.thisIndex'
p1969
I10
sg15
(lp1970
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1971
S'space'
p1972
asg96
I10
sa(dp1973
g16
(lp1974
S'k'
asg18
S'Y'
sS'.thisRepN'
p1975
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1976
I13
sS'.thisN'
p1977
I238
sS'.thisIndex'
p1978
I13
sg15
(lp1979
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1980
S'space'
p1981
asg96
I13
sa(dp1982
g16
(lp1983
S'k'
asg18
S'Y'
sS'.thisRepN'
p1984
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1985
I14
sS'.thisN'
p1986
I239
sS'.thisIndex'
p1987
I11
sg15
(lp1988
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1989
S'space'
p1990
asg96
I11
sa(dp1991
g16
(lp1992
S'd'
asg18
S'N'
sS'.thisRepN'
p1993
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1994
I0
sS'.thisN'
p1995
I240
sS'.thisIndex'
p1996
I5
sg15
(lp1997
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1998
S'space'
p1999
asg96
I5
sa(dp2000
g16
(lp2001
S'k'
asg18
S'Y'
sS'.thisRepN'
p2002
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2003
I1
sS'.thisN'
p2004
I241
sS'.thisIndex'
p2005
I7
sg15
(lp2006
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2007
S'space'
p2008
asg96
I7
sa(dp2009
g16
(lp2010
S'k'
asg18
S'Y'
sS'.thisRepN'
p2011
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2012
I2
sS'.thisN'
p2013
I242
sS'.thisIndex'
p2014
I0
sg15
(lp2015
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2016
S'space'
p2017
asg96
I0
sa(dp2018
g16
(lp2019
S'k'
asg18
S'Y'
sS'.thisRepN'
p2020
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2021
I3
sS'.thisN'
p2022
I243
sS'.thisIndex'
p2023
I6
sg15
(lp2024
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2025
S'space'
p2026
asg96
I6
sa(dp2027
g16
(lp2028
S'd'
asg18
S'N'
sS'.thisRepN'
p2029
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2030
I4
sS'.thisN'
p2031
I244
sS'.thisIndex'
p2032
I9
sg15
(lp2033
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp2034
g16
(lp2035
S'd'
asg18
S'N'
sS'.thisRepN'
p2036
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2037
I5
sS'.thisN'
p2038
I245
sS'.thisIndex'
p2039
I1
sg15
(lp2040
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2041
S'space'
p2042
asg96
I1
sa(dp2043
g16
(lp2044
S'k'
asg18
S'N'
sS'.thisRepN'
p2045
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2046
I6
sS'.thisN'
p2047
I246
sS'.thisIndex'
p2048
I14
sg15
(lp2049
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2050
S'space'
p2051
asg96
I14
sa(dp2052
g16
(lp2053
S'k'
asg18
S'N'
sS'.thisRepN'
p2054
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2055
I7
sS'.thisN'
p2056
I247
sS'.thisIndex'
p2057
I14
sg15
(lp2058
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I14
sa(dp2059
g16
(lp2060
S'd'
asg18
S'N'
sS'.thisRepN'
p2061
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2062
I8
sS'.thisN'
p2063
I248
sS'.thisIndex'
p2064
I9
sg15
(lp2065
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp2066
g16
(lp2067
S'd'
asg18
S'N'
sg22
I43
sS'.thisN'
p2068
I249
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2069
I9
sS'.thisRepN'
p2070
I16
sg21
I50
sS'.thisIndex'
p2071
I13
sg23
I25
sg15
(lp2072
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I13
sa(dp2073
g16
(lp2074
S'd'
asg96
I5
sS'.thisRepN'
p2075
I16
sg30
g31
sg32
g33
sS'.thisTrialN'
p2076
I10
sS'.thisN'
p2077
I250
sS'.thisIndex'
p2078
I5
sg15
(lp2079
S'd'
asg17
S'Y'
sg14
I6
sa(dp2080
g16
(lp2081
S'k'
asg96
I1
sS'.thisRepN'
p2082
I16
sg30
g31
sg32
g33
sS'.thisTrialN'
p2083
I11
sS'.thisN'
p2084
I251
sS'.thisIndex'
p2085
I1
sg15
(lp2086
S'k'
asg17
S'Y'
sg14
I6
sa(dp2087
g16
(lp2088
S'd'
asg18
S'Y'
sS'.thisRepN'
p2089
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2090
I12
sS'.thisN'
p2091
I252
sS'.thisIndex'
p2092
I3
sg15
(lp2093
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2094
S'space'
p2095
asg96
I3
sa(dp2096
g16
(lp2097
S'k'
asg18
S'N'
sS'.thisRepN'
p2098
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2099
I13
sS'.thisN'
p2100
I253
sS'.thisIndex'
p2101
I4
sg15
(lp2102
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I4
sa(dp2103
g16
(lp2104
S'k'
asg18
S'Y'
sS'.thisRepN'
p2105
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2106
I14
sS'.thisN'
p2107
I254
sS'.thisIndex'
p2108
I10
sg15
(lp2109
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2110
S'space'
p2111
asg96
I10
sa(dp2112
g16
(lp2113
S'k'
asg18
S'N'
sS'.thisRepN'
p2114
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2115
I0
sS'.thisN'
p2116
I255
sS'.thisIndex'
p2117
I5
sg15
(lp2118
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2119
g16
(lp2120
S'k'
asg18
S'N'
sS'.thisRepN'
p2121
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2122
I1
sS'.thisN'
p2123
I256
sS'.thisIndex'
p2124
I13
sg15
(lp2125
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I13
sa(dp2126
g16
(lp2127
S'd'
asg18
S'Y'
sS'.thisRepN'
p2128
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2129
I2
sS'.thisN'
p2130
I257
sS'.thisIndex'
p2131
I10
sg15
(lp2132
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2133
S'space'
p2134
asg96
I10
sa(dp2135
g16
(lp2136
S'k'
asg18
S'Y'
sS'.thisRepN'
p2137
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2138
I3
sS'.thisN'
p2139
I258
sS'.thisIndex'
p2140
I11
sg15
(lp2141
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2142
S'space'
p2143
asg96
I11
sa(dp2144
g16
(lp2145
S'd'
asg18
S'N'
sS'.thisRepN'
p2146
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2147
I4
sS'.thisN'
p2148
I259
sS'.thisIndex'
p2149
I8
sg15
(lp2150
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2151
g16
(lp2152
S'k'
asg18
S'N'
sS'.thisRepN'
p2153
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2154
I5
sS'.thisN'
p2155
I260
sS'.thisIndex'
p2156
I10
sg15
(lp2157
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2158
g16
(lp2159
S'k'
asg18
S'Y'
sS'.thisRepN'
p2160
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2161
I6
sS'.thisN'
p2162
I261
sS'.thisIndex'
p2163
I6
sg15
(lp2164
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2165
S'space'
p2166
asg96
I6
sa(dp2167
g16
(lp2168
S'd'
asg18
S'Y'
sS'.thisRepN'
p2169
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2170
I7
sS'.thisN'
p2171
I262
sS'.thisIndex'
p2172
I9
sg15
(lp2173
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2174
S'space'
p2175
asg96
I9
sa(dp2176
g16
(lp2177
S'k'
asg18
S'Y'
sS'.thisRepN'
p2178
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2179
I8
sS'.thisN'
p2180
I263
sS'.thisIndex'
p2181
I3
sg15
(lp2182
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2183
S'space'
p2184
asg96
I3
sa(dp2185
g16
(lp2186
S'k'
asg18
S'Y'
sS'.thisRepN'
p2187
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2188
I9
sS'.thisN'
p2189
I264
sS'.thisIndex'
p2190
I6
sg15
(lp2191
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2192
S'space'
p2193
asg96
I6
sa(dp2194
g16
(lp2195
S'k'
asg18
S'N'
sS'.thisRepN'
p2196
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2197
I10
sS'.thisN'
p2198
I265
sS'.thisIndex'
p2199
I7
sg15
(lp2200
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I7
sa(dp2201
g16
(lp2202
S'k'
asg18
S'N'
sS'.thisRepN'
p2203
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2204
I11
sS'.thisN'
p2205
I266
sS'.thisIndex'
p2206
I12
sg15
(lp2207
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp2208
g16
(lp2209
S'k'
asg18
S'N'
sS'.thisRepN'
p2210
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2211
I12
sS'.thisN'
p2212
I267
sS'.thisIndex'
p2213
I7
sg15
(lp2214
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I7
sa(dp2215
g16
(lp2216
S'd'
asg18
S'N'
sS'.thisRepN'
p2217
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2218
I13
sS'.thisN'
p2219
I268
sS'.thisIndex'
p2220
I12
sg15
(lp2221
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp2222
g16
(lp2223
S'k'
asg18
S'Y'
sS'.thisRepN'
p2224
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2225
I14
sS'.thisN'
p2226
I269
sS'.thisIndex'
p2227
I5
sg15
(lp2228
S'd'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2229
S'space'
p2230
asg96
I5
sa(dp2231
g16
(lp2232
S'd'
asg18
S'N'
sS'.thisRepN'
p2233
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2234
I0
sS'.thisN'
p2235
I270
sS'.thisIndex'
p2236
I7
sg15
(lp2237
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I7
sa(dp2238
g16
(lp2239
S'k'
asg18
S'Y'
sS'.thisRepN'
p2240
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2241
I1
sS'.thisN'
p2242
I271
sS'.thisIndex'
p2243
I1
sg15
(lp2244
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2245
S'space'
p2246
asg96
I1
sa(dp2247
g16
(lp2248
S'k'
asg18
S'Y'
sS'.thisRepN'
p2249
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2250
I2
sS'.thisN'
p2251
I272
sS'.thisIndex'
p2252
I12
sg15
(lp2253
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2254
S'space'
p2255
asg96
I12
sa(dp2256
g16
(lp2257
S'd'
asg18
S'N'
sS'.thisRepN'
p2258
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2259
I3
sS'.thisN'
p2260
I273
sS'.thisIndex'
p2261
I8
sg15
(lp2262
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2263
g16
(lp2264
S'k'
asg18
S'N'
sS'.thisRepN'
p2265
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2266
I4
sS'.thisN'
p2267
I274
sS'.thisIndex'
p2268
I3
sg15
(lp2269
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I3
sa(dp2270
g16
(lp2271
S'd'
asg18
S'N'
sS'.thisRepN'
p2272
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2273
I5
sS'.thisN'
p2274
I275
sS'.thisIndex'
p2275
I0
sg15
(lp2276
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2277
g16
(lp2278
S'd'
asg18
S'Y'
sS'.thisRepN'
p2279
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2280
I6
sS'.thisN'
p2281
I276
sS'.thisIndex'
p2282
I0
sg15
(lp2283
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2284
g16
(lp2285
S'k'
asg18
S'Y'
sS'.thisRepN'
p2286
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2287
I7
sS'.thisN'
p2288
I277
sS'.thisIndex'
p2289
I3
sg15
(lp2290
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2291
S'space'
p2292
asg96
I3
sa(dp2293
g16
(lp2294
S'd'
asg18
S'Y'
sS'.thisRepN'
p2295
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2296
I8
sS'.thisN'
p2297
I278
sS'.thisIndex'
p2298
I8
sg15
(lp2299
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2300
S'space'
p2301
asg96
I8
sa(dp2302
g16
(lp2303
S'k'
asg18
S'Y'
sS'.thisRepN'
p2304
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2305
I9
sS'.thisN'
p2306
I279
sS'.thisIndex'
p2307
I4
sg15
(lp2308
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2309
S'space'
p2310
asg96
I4
sa(dp2311
g16
(lp2312
S'k'
asg18
S'Y'
sS'.thisRepN'
p2313
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2314
I10
sS'.thisN'
p2315
I280
sS'.thisIndex'
p2316
I11
sg15
(lp2317
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2318
S'space'
p2319
asg96
I11
sa(dp2320
g16
(lp2321
S'd'
asg18
S'Y'
sS'.thisRepN'
p2322
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2323
I11
sS'.thisN'
p2324
I281
sS'.thisIndex'
p2325
I14
sg15
(lp2326
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2327
S'space'
p2328
asg96
I14
sa(dp2329
g16
(lp2330
S'k'
asg18
S'Y'
sS'.thisRepN'
p2331
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2332
I12
sS'.thisN'
p2333
I282
sS'.thisIndex'
p2334
I5
sg15
(lp2335
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2336
S'space'
p2337
asg96
I5
sa(dp2338
g16
(lp2339
S'd'
asg18
S'N'
sS'.thisRepN'
p2340
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2341
I13
sS'.thisN'
p2342
I283
sS'.thisIndex'
p2343
I2
sg15
(lp2344
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2345
g16
(lp2346
S'k'
asg18
S'Y'
sS'.thisRepN'
p2347
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2348
I14
sS'.thisN'
p2349
I284
sS'.thisIndex'
p2350
I12
sg15
(lp2351
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2352
S'space'
p2353
asg96
I12
sa(dp2354
g16
(lp2355
S'd'
asg18
S'Y'
sS'.thisRepN'
p2356
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2357
I0
sS'.thisN'
p2358
I285
sS'.thisIndex'
p2359
I9
sg15
(lp2360
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2361
S'space'
p2362
asg96
I9
sa(dp2363
g16
(lp2364
S'd'
asg18
S'Y'
sS'.thisRepN'
p2365
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2366
I1
sS'.thisN'
p2367
I286
sS'.thisIndex'
p2368
I6
sg15
(lp2369
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2370
S'space'
p2371
asg96
I6
sa(dp2372
g16
(lp2373
S'k'
asg18
S'Y'
sS'.thisRepN'
p2374
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2375
I2
sS'.thisN'
p2376
I287
sS'.thisIndex'
p2377
I8
sg15
(lp2378
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2379
S'space'
p2380
asg96
I8
sa(dp2381
g16
(lp2382
S'k'
asg18
S'Y'
sS'.thisRepN'
p2383
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2384
I3
sS'.thisN'
p2385
I288
sS'.thisIndex'
p2386
I12
sg15
(lp2387
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2388
S'space'
p2389
asg96
I12
sa(dp2390
g16
(lp2391
S'd'
asg18
S'N'
sS'.thisRepN'
p2392
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2393
I4
sS'.thisN'
p2394
I289
sS'.thisIndex'
p2395
I10
sg15
(lp2396
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2397
g16
(lp2398
S'd'
asg18
S'Y'
sS'.thisRepN'
p2399
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2400
I5
sS'.thisN'
p2401
I290
sS'.thisIndex'
p2402
I3
sg15
(lp2403
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2404
S'space'
p2405
asg96
I3
sa(dp2406
g16
(lp2407
S'k'
asg18
S'Y'
sS'.thisRepN'
p2408
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2409
I6
sS'.thisN'
p2410
I291
sS'.thisIndex'
p2411
I11
sg15
(lp2412
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2413
S'space'
p2414
asg96
I11
sa(dp2415
g16
(lp2416
S'k'
asg18
S'N'
sS'.thisRepN'
p2417
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2418
I7
sS'.thisN'
p2419
I292
sS'.thisIndex'
p2420
I14
sg15
(lp2421
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I14
sa(dp2422
g16
(lp2423
S'k'
asg18
S'N'
sS'.thisRepN'
p2424
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2425
I8
sS'.thisN'
p2426
I293
sS'.thisIndex'
p2427
I11
sg15
(lp2428
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I11
sa(dp2429
g16
(lp2430
S'd'
asg18
S'N'
sS'.thisRepN'
p2431
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2432
I9
sS'.thisN'
p2433
I294
sS'.thisIndex'
p2434
I1
sg15
(lp2435
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2436
g16
(lp2437
S'k'
asg18
S'N'
sS'.thisRepN'
p2438
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2439
I10
sS'.thisN'
p2440
I295
sS'.thisIndex'
p2441
I11
sg15
(lp2442
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I11
sa(dp2443
g16
(lp2444
S'd'
asg18
S'N'
sS'.thisRepN'
p2445
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2446
I11
sS'.thisN'
p2447
I296
sS'.thisIndex'
p2448
I5
sg15
(lp2449
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2450
g16
(lp2451
S'k'
asg18
S'N'
sS'.thisRepN'
p2452
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2453
I12
sS'.thisN'
p2454
I297
sS'.thisIndex'
p2455
I6
sg15
(lp2456
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2457
g16
(lp2458
S'd'
asg18
S'N'
sS'.thisRepN'
p2459
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2460
I13
sS'.thisN'
p2461
I298
sS'.thisIndex'
p2462
I2
sg15
(lp2463
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2464
g16
(lp2465
S'k'
asg18
S'N'
sg22
I47
sS'.thisN'
p2466
I299
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2467
I14
sS'.thisRepN'
p2468
I19
sg21
I49
sS'.thisIndex'
p2469
I0
sg23
I25
sg15
(lp2470
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2471
g16
(lp2472
S'k'
asg96
I9
sS'.thisRepN'
p2473
I20
sg30
g31
sg32
g33
sS'.thisTrialN'
p2474
I0
sS'.thisN'
p2475
I300
sS'.thisIndex'
p2476
I9
sg15
(lp2477
S'k'
asg17
S'Y'
sg14
I7
sa(dp2478
g16
(lp2479
S'd'
asg96
I9
sS'.thisRepN'
p2480
I20
sg30
g31
sg32
g33
sS'.thisTrialN'
p2481
I1
sS'.thisN'
p2482
I301
sS'.thisIndex'
p2483
I9
sg15
(lp2484
S'd'
asg17
S'Y'
sg14
I7
sa(dp2485
g16
(lp2486
S'd'
asg18
S'Y'
sS'.thisRepN'
p2487
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2488
I2
sS'.thisN'
p2489
I302
sS'.thisIndex'
p2490
I4
sg15
(lp2491
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2492
S'space'
p2493
asg96
I4
sa(dp2494
g16
(lp2495
S'd'
asg18
S'N'
sS'.thisRepN'
p2496
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2497
I3
sS'.thisN'
p2498
I303
sS'.thisIndex'
p2499
I8
sg15
(lp2500
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I8
sa(dp2501
g16
(lp2502
S'k'
asg18
S'N'
sS'.thisRepN'
p2503
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2504
I4
sS'.thisN'
p2505
I304
sS'.thisIndex'
p2506
I0
sg15
(lp2507
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I0
sa(dp2508
g16
(lp2509
S'd'
asg18
S'Y'
sS'.thisRepN'
p2510
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2511
I5
sS'.thisN'
p2512
I305
sS'.thisIndex'
p2513
I5
sg15
(lp2514
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2515
S'space'
p2516
asg96
I5
sa(dp2517
g16
(lp2518
S'd'
asg18
S'N'
sS'.thisRepN'
p2519
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2520
I6
sS'.thisN'
p2521
I306
sS'.thisIndex'
p2522
I7
sg15
(lp2523
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I7
sa(dp2524
g16
(lp2525
S'd'
asg18
S'N'
sS'.thisRepN'
p2526
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2527
I7
sS'.thisN'
p2528
I307
sS'.thisIndex'
p2529
I9
sg15
(lp2530
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I9
sa(dp2531
g16
(lp2532
S'k'
asg18
S'N'
sS'.thisRepN'
p2533
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2534
I8
sS'.thisN'
p2535
I308
sS'.thisIndex'
p2536
I11
sg15
(lp2537
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I11
sa(dp2538
g16
(lp2539
S'd'
asg18
S'Y'
sS'.thisRepN'
p2540
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2541
I9
sS'.thisN'
p2542
I309
sS'.thisIndex'
p2543
I14
sg15
(lp2544
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2545
S'space'
p2546
asg96
I14
sa(dp2547
g16
(lp2548
S'k'
asg18
S'Y'
sS'.thisRepN'
p2549
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2550
I10
sS'.thisN'
p2551
I310
sS'.thisIndex'
p2552
I14
sg15
(lp2553
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2554
S'space'
p2555
asg96
I14
sa(dp2556
g16
(lp2557
S'k'
asg18
S'N'
sS'.thisRepN'
p2558
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2559
I11
sS'.thisN'
p2560
I311
sS'.thisIndex'
p2561
I9
sg15
(lp2562
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I9
sa(dp2563
g16
(lp2564
S'd'
asg18
S'N'
sS'.thisRepN'
p2565
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2566
I12
sS'.thisN'
p2567
I312
sS'.thisIndex'
p2568
I11
sg15
(lp2569
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I11
sa(dp2570
g16
(lp2571
S'd'
asg18
S'N'
sS'.thisRepN'
p2572
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2573
I13
sS'.thisN'
p2574
I313
sS'.thisIndex'
p2575
I7
sg15
(lp2576
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I7
sa(dp2577
g16
(lp2578
S'd'
asg18
S'N'
sS'.thisRepN'
p2579
I20
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2580
I14
sS'.thisN'
p2581
I314
sS'.thisIndex'
p2582
I1
sg15
(lp2583
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2584
S'space'
p2585
asg96
I1
sa(dp2586
g16
(lp2587
S'k'
asg18
S'Y'
sS'.thisRepN'
p2588
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2589
I0
sS'.thisN'
p2590
I315
sS'.thisIndex'
p2591
I12
sg15
(lp2592
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2593
S'space'
p2594
asg96
I12
sa(dp2595
g16
(lp2596
S'd'
asg18
S'N'
sS'.thisRepN'
p2597
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2598
I1
sS'.thisN'
p2599
I316
sS'.thisIndex'
p2600
I0
sg15
(lp2601
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2602
S'space'
p2603
asg96
I0
sa(dp2604
g16
(lp2605
S'k'
asg18
S'Y'
sS'.thisRepN'
p2606
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2607
I2
sS'.thisN'
p2608
I317
sS'.thisIndex'
p2609
I6
sg15
(lp2610
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2611
S'space'
p2612
asg96
I6
sa(dp2613
g16
(lp2614
S'k'
asg18
S'N'
sS'.thisRepN'
p2615
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2616
I3
sS'.thisN'
p2617
I318
sS'.thisIndex'
p2618
I2
sg15
(lp2619
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2620
g16
(lp2621
S'd'
asg18
S'N'
sS'.thisRepN'
p2622
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2623
I4
sS'.thisN'
p2624
I319
sS'.thisIndex'
p2625
I14
sg15
(lp2626
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I14
sa(dp2627
g16
(lp2628
S'd'
asg18
S'Y'
sS'.thisRepN'
p2629
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2630
I5
sS'.thisN'
p2631
I320
sS'.thisIndex'
p2632
I8
sg15
(lp2633
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2634
S'space'
p2635
asg96
I8
sa(dp2636
g16
(lp2637
S'k'
asg18
S'N'
sS'.thisRepN'
p2638
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2639
I6
sS'.thisN'
p2640
I321
sS'.thisIndex'
p2641
I4
sg15
(lp2642
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2643
g16
(lp2644
S'd'
asg18
S'Y'
sS'.thisRepN'
p2645
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2646
I7
sS'.thisN'
p2647
I322
sS'.thisIndex'
p2648
I4
sg15
(lp2649
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2650
S'space'
p2651
asg96
I4
sa(dp2652
g16
(lp2653
S'd'
asg18
S'N'
sS'.thisRepN'
p2654
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2655
I8
sS'.thisN'
p2656
I323
sS'.thisIndex'
p2657
I4
sg15
(lp2658
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2659
g16
(lp2660
S'k'
asg18
S'N'
sS'.thisRepN'
p2661
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2662
I9
sS'.thisN'
p2663
I324
sS'.thisIndex'
p2664
I11
sg15
(lp2665
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I11
sa(dp2666
g16
(lp2667
S'd'
asg18
S'N'
sS'.thisRepN'
p2668
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2669
I10
sS'.thisN'
p2670
I325
sS'.thisIndex'
p2671
I9
sg15
(lp2672
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I9
sa(dp2673
g16
(lp2674
S'd'
asg18
S'Y'
sS'.thisRepN'
p2675
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2676
I11
sS'.thisN'
p2677
I326
sS'.thisIndex'
p2678
I3
sg15
(lp2679
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2680
S'space'
p2681
asg96
I3
sa(dp2682
g16
(lp2683
S'k'
asg18
S'N'
sS'.thisRepN'
p2684
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2685
I12
sS'.thisN'
p2686
I327
sS'.thisIndex'
p2687
I5
sg15
(lp2688
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2689
g16
(lp2690
S'k'
asg18
S'N'
sS'.thisRepN'
p2691
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2692
I13
sS'.thisN'
p2693
I328
sS'.thisIndex'
p2694
I8
sg15
(lp2695
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I8
sa(dp2696
g16
(lp2697
S'd'
asg18
S'N'
sS'.thisRepN'
p2698
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2699
I14
sS'.thisN'
p2700
I329
sS'.thisIndex'
p2701
I14
sg15
(lp2702
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I14
sa(dp2703
g16
(lp2704
S'd'
asg18
S'Y'
sS'.thisRepN'
p2705
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2706
I0
sS'.thisN'
p2707
I330
sS'.thisIndex'
p2708
I12
sg15
(lp2709
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2710
S'space'
p2711
asg96
I12
sa(dp2712
g16
(lp2713
S'k'
asg18
S'N'
sS'.thisRepN'
p2714
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2715
I1
sS'.thisN'
p2716
I331
sS'.thisIndex'
p2717
I3
sg15
(lp2718
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2719
g16
(lp2720
S'd'
asg18
S'Y'
sS'.thisRepN'
p2721
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2722
I2
sS'.thisN'
p2723
I332
sS'.thisIndex'
p2724
I8
sg15
(lp2725
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2726
S'space'
p2727
asg96
I8
sa(dp2728
g16
(lp2729
S'k'
asg18
S'Y'
sS'.thisRepN'
p2730
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2731
I3
sS'.thisN'
p2732
I333
sS'.thisIndex'
p2733
I8
sg15
(lp2734
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2735
S'space'
p2736
asg96
I8
sa(dp2737
g16
(lp2738
S'k'
asg18
S'N'
sS'.thisRepN'
p2739
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2740
I4
sS'.thisN'
p2741
I334
sS'.thisIndex'
p2742
I14
sg15
(lp2743
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I14
sa(dp2744
g16
(lp2745
S'k'
asg18
S'N'
sS'.thisRepN'
p2746
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2747
I5
sS'.thisN'
p2748
I335
sS'.thisIndex'
p2749
I2
sg15
(lp2750
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I2
sa(dp2751
g16
(lp2752
S'd'
asg18
S'Y'
sS'.thisRepN'
p2753
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2754
I6
sS'.thisN'
p2755
I336
sS'.thisIndex'
p2756
I2
sg15
(lp2757
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2758
S'space'
p2759
asg96
I2
sa(dp2760
g16
(lp2761
S'k'
asg18
S'Y'
sS'.thisRepN'
p2762
I22
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2763
I7
sS'.thisN'
p2764
I337
sS'.thisIndex'
p2765
I2
sg15
(lp2766
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2767
g16
(lp2768
S'k'
asg18
S'Y'
sS'.thisRepN'
p2769
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2770
I8
sS'.thisN'
p2771
I338
sS'.thisIndex'
p2772
I4
sg15
(lp2773
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2774
S'space'
p2775
asg96
I4
sa(dp2776
g16
(lp2777
S'k'
asg18
S'N'
sS'.thisRepN'
p2778
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2779
I9
sS'.thisN'
p2780
I339
sS'.thisIndex'
p2781
I10
sg15
(lp2782
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2783
g16
(lp2784
S'd'
asg18
S'N'
sS'.thisRepN'
p2785
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2786
I10
sS'.thisN'
p2787
I340
sS'.thisIndex'
p2788
I13
sg15
(lp2789
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I13
sa(dp2790
g16
(lp2791
S'd'
asg18
S'Y'
sS'.thisRepN'
p2792
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2793
I11
sS'.thisN'
p2794
I341
sS'.thisIndex'
p2795
I5
sg15
(lp2796
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2797
S'space'
p2798
asg96
I5
sa(dp2799
g16
(lp2800
S'd'
asg18
S'N'
sS'.thisRepN'
p2801
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2802
I12
sS'.thisN'
p2803
I342
sS'.thisIndex'
p2804
I1
sg15
(lp2805
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2806
g16
(lp2807
S'd'
asg18
S'N'
sS'.thisRepN'
p2808
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2809
I13
sS'.thisN'
p2810
I343
sS'.thisIndex'
p2811
I7
sg15
(lp2812
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I7
sa(dp2813
g16
(lp2814
S'k'
asg18
S'Y'
sS'.thisRepN'
p2815
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2816
I14
sS'.thisN'
p2817
I344
sS'.thisIndex'
p2818
I14
sg15
(lp2819
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2820
S'space'
p2821
asg96
I14
sa(dp2822
g16
(lp2823
S'k'
asg18
S'N'
sS'.thisRepN'
p2824
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2825
I0
sS'.thisN'
p2826
I345
sS'.thisIndex'
p2827
I1
sg15
(lp2828
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2829
g16
(lp2830
S'd'
asg18
S'Y'
sS'.thisRepN'
p2831
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2832
I1
sS'.thisN'
p2833
I346
sS'.thisIndex'
p2834
I5
sg15
(lp2835
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2836
S'space'
p2837
asg96
I5
sa(dp2838
g16
(lp2839
S'd'
asg18
S'Y'
sS'.thisRepN'
p2840
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2841
I2
sS'.thisN'
p2842
I347
sS'.thisIndex'
p2843
I14
sg15
(lp2844
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2845
S'space'
p2846
asg96
I14
sa(dp2847
g16
(lp2848
S'd'
asg18
S'N'
sS'.thisRepN'
p2849
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2850
I3
sS'.thisN'
p2851
I348
sS'.thisIndex'
p2852
I8
sg15
(lp2853
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I8
sa(dp2854
g16
(lp2855
S'k'
asg18
S'Y'
sg22
I45
sS'.thisN'
p2856
I349
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2857
I4
sS'.thisRepN'
p2858
I23
sg21
I49
sS'.thisIndex'
p2859
I1
sg23
I20
sg15
(lp2860
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2861
S'space'
p2862
asg96
I1
sa(dp2863
g16
(lp2864
S'd'
asg96
I9
sS'.thisRepN'
p2865
I23
sg30
g31
sg32
g33
sS'.thisTrialN'
p2866
I5
sS'.thisN'
p2867
I350
sS'.thisIndex'
p2868
I9
sg15
(lp2869
S'd'
asg17
S'Y'
sg14
I8
sa(dp2870
g16
(lp2871
S'd'
asg96
I0
sS'.thisRepN'
p2872
I23
sg30
g31
sg32
g33
sS'.thisTrialN'
p2873
I6
sS'.thisN'
p2874
I351
sS'.thisIndex'
p2875
I0
sg15
(lp2876
S'd'
asg17
S'Y'
sg14
I8
sa(dp2877
g16
(lp2878
S'k'
asg18
S'Y'
sS'.thisRepN'
p2879
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2880
I7
sS'.thisN'
p2881
I352
sS'.thisIndex'
p2882
I13
sg15
(lp2883
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2884
S'space'
p2885
asg96
I13
sa(dp2886
g16
(lp2887
S'd'
asg18
S'N'
sS'.thisRepN'
p2888
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2889
I8
sS'.thisN'
p2890
I353
sS'.thisIndex'
p2891
I2
sg15
(lp2892
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp2893
g16
(lp2894
S'd'
asg18
S'Y'
sS'.thisRepN'
p2895
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2896
I9
sS'.thisN'
p2897
I354
sS'.thisIndex'
p2898
I11
sg15
(lp2899
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2900
S'space'
p2901
asg96
I11
sa(dp2902
g16
(lp2903
S'k'
asg18
S'Y'
sS'.thisRepN'
p2904
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2905
I10
sS'.thisN'
p2906
I355
sS'.thisIndex'
p2907
I10
sg15
(lp2908
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2909
S'space'
p2910
asg96
I10
sa(dp2911
g16
(lp2912
S'k'
asg18
S'N'
sS'.thisRepN'
p2913
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2914
I11
sS'.thisN'
p2915
I356
sS'.thisIndex'
p2916
I6
sg15
(lp2917
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp2918
g16
(lp2919
S'k'
asg18
S'Y'
sS'.thisRepN'
p2920
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2921
I12
sS'.thisN'
p2922
I357
sS'.thisIndex'
p2923
I3
sg15
(lp2924
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2925
S'space'
p2926
asg96
I3
sa(dp2927
g16
(lp2928
S'k'
asg18
S'Y'
sS'.thisRepN'
p2929
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2930
I13
sS'.thisN'
p2931
I358
sS'.thisIndex'
p2932
I3
sg15
(lp2933
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2934
S'space'
p2935
asg96
I3
sa(dp2936
g16
(lp2937
S'k'
asg18
S'Y'
sS'.thisRepN'
p2938
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2939
I14
sS'.thisN'
p2940
I359
sS'.thisIndex'
p2941
I9
sg15
(lp2942
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2943
S'space'
p2944
asg96
I9
sa(dp2945
g16
(lp2946
S'k'
asg18
S'N'
sS'.thisRepN'
p2947
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2948
I0
sS'.thisN'
p2949
I360
sS'.thisIndex'
p2950
I10
sg15
(lp2951
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp2952
g16
(lp2953
S'k'
asg18
S'Y'
sS'.thisRepN'
p2954
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2955
I1
sS'.thisN'
p2956
I361
sS'.thisIndex'
p2957
I2
sg15
(lp2958
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2959
S'space'
p2960
asg96
I2
sa(dp2961
g16
(lp2962
S'd'
asg18
S'N'
sS'.thisRepN'
p2963
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2964
I2
sS'.thisN'
p2965
I362
sS'.thisIndex'
p2966
I11
sg15
(lp2967
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I11
sa(dp2968
g16
(lp2969
S'd'
asg18
S'N'
sS'.thisRepN'
p2970
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2971
I3
sS'.thisN'
p2972
I363
sS'.thisIndex'
p2973
I1
sg15
(lp2974
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp2975
g16
(lp2976
S'd'
asg18
S'Y'
sS'.thisRepN'
p2977
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2978
I4
sS'.thisN'
p2979
I364
sS'.thisIndex'
p2980
I1
sg15
(lp2981
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2982
S'space'
p2983
asg96
I1
sa(dp2984
g16
(lp2985
S'k'
asg18
S'Y'
sS'.thisRepN'
p2986
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2987
I5
sS'.thisN'
p2988
I365
sS'.thisIndex'
p2989
I12
sg15
(lp2990
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2991
S'space'
p2992
asg96
I12
sa(dp2993
g16
(lp2994
S'k'
asg18
S'Y'
sS'.thisRepN'
p2995
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2996
I6
sS'.thisN'
p2997
I366
sS'.thisIndex'
p2998
I7
sg15
(lp2999
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3000
S'space'
p3001
asg96
I7
sa(dp3002
g16
(lp3003
S'd'
asg18
S'N'
sS'.thisRepN'
p3004
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3005
I7
sS'.thisN'
p3006
I367
sS'.thisIndex'
p3007
I2
sg15
(lp3008
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3009
g16
(lp3010
S'k'
asg18
S'N'
sS'.thisRepN'
p3011
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3012
I8
sS'.thisN'
p3013
I368
sS'.thisIndex'
p3014
I13
sg15
(lp3015
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I13
sa(dp3016
g16
(lp3017
S'd'
asg18
S'N'
sS'.thisRepN'
p3018
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3019
I9
sS'.thisN'
p3020
I369
sS'.thisIndex'
p3021
I13
sg15
(lp3022
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I13
sa(dp3023
g16
(lp3024
S'k'
asg18
S'Y'
sS'.thisRepN'
p3025
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3026
I10
sS'.thisN'
p3027
I370
sS'.thisIndex'
p3028
I14
sg15
(lp3029
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3030
S'space'
p3031
asg96
I14
sa(dp3032
g16
(lp3033
S'k'
asg18
S'N'
sS'.thisRepN'
p3034
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3035
I11
sS'.thisN'
p3036
I371
sS'.thisIndex'
p3037
I9
sg15
(lp3038
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3039
g16
(lp3040
S'd'
asg18
S'N'
sS'.thisRepN'
p3041
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3042
I12
sS'.thisN'
p3043
I372
sS'.thisIndex'
p3044
I1
sg15
(lp3045
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp3046
g16
(lp3047
S'd'
asg18
S'Y'
sS'.thisRepN'
p3048
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3049
I13
sS'.thisN'
p3050
I373
sS'.thisIndex'
p3051
I5
sg15
(lp3052
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3053
S'space'
p3054
asg96
I5
sa(dp3055
g16
(lp3056
S'k'
asg18
S'Y'
sS'.thisRepN'
p3057
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3058
I14
sS'.thisN'
p3059
I374
sS'.thisIndex'
p3060
I4
sg15
(lp3061
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I4
sa(dp3062
g16
(lp3063
S'k'
asg18
S'Y'
sS'.thisRepN'
p3064
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3065
I0
sS'.thisN'
p3066
I375
sS'.thisIndex'
p3067
I4
sg15
(lp3068
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3069
S'space'
p3070
asg96
I4
sa(dp3071
g16
(lp3072
S'd'
asg18
S'N'
sS'.thisRepN'
p3073
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3074
I1
sS'.thisN'
p3075
I376
sS'.thisIndex'
p3076
I0
sg15
(lp3077
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp3078
g16
(lp3079
S'k'
asg18
S'Y'
sS'.thisRepN'
p3080
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3081
I2
sS'.thisN'
p3082
I377
sS'.thisIndex'
p3083
I7
sg15
(lp3084
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3085
S'space'
p3086
asg96
I7
sa(dp3087
g16
(lp3088
S'k'
asg18
S'N'
sS'.thisRepN'
p3089
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3090
I3
sS'.thisN'
p3091
I378
sS'.thisIndex'
p3092
I13
sg15
(lp3093
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I13
sa(dp3094
g16
(lp3095
S'd'
asg18
S'N'
sS'.thisRepN'
p3096
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3097
I4
sS'.thisN'
p3098
I379
sS'.thisIndex'
p3099
I10
sg15
(lp3100
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp3101
g16
(lp3102
S'k'
asg18
S'N'
sS'.thisRepN'
p3103
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3104
I5
sS'.thisN'
p3105
I380
sS'.thisIndex'
p3106
I5
sg15
(lp3107
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp3108
g16
(lp3109
S'd'
asg18
S'Y'
sS'.thisRepN'
p3110
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3111
I6
sS'.thisN'
p3112
I381
sS'.thisIndex'
p3113
I8
sg15
(lp3114
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I8
sa(dp3115
g16
(lp3116
S'k'
asg18
S'N'
sS'.thisRepN'
p3117
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3118
I7
sS'.thisN'
p3119
I382
sS'.thisIndex'
p3120
I7
sg15
(lp3121
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I7
sa(dp3122
g16
(lp3123
S'k'
asg18
S'Y'
sS'.thisRepN'
p3124
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3125
I8
sS'.thisN'
p3126
I383
sS'.thisIndex'
p3127
I14
sg15
(lp3128
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3129
S'space'
p3130
asg96
I14
sa(dp3131
g16
(lp3132
S'k'
asg18
S'N'
sS'.thisRepN'
p3133
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3134
I9
sS'.thisN'
p3135
I384
sS'.thisIndex'
p3136
I4
sg15
(lp3137
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I4
sa(dp3138
g16
(lp3139
S'd'
asg18
S'Y'
sS'.thisRepN'
p3140
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3141
I10
sS'.thisN'
p3142
I385
sS'.thisIndex'
p3143
I10
sg15
(lp3144
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3145
S'space'
p3146
asg96
I10
sa(dp3147
g16
(lp3148
S'k'
asg18
S'N'
sS'.thisRepN'
p3149
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3150
I11
sS'.thisN'
p3151
I386
sS'.thisIndex'
p3152
I2
sg15
(lp3153
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3154
g16
(lp3155
S'k'
asg18
S'Y'
sS'.thisRepN'
p3156
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3157
I12
sS'.thisN'
p3158
I387
sS'.thisIndex'
p3159
I1
sg15
(lp3160
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3161
S'space'
p3162
asg96
I1
sa(dp3163
g16
(lp3164
S'k'
asg18
S'N'
sS'.thisRepN'
p3165
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3166
I13
sS'.thisN'
p3167
I388
sS'.thisIndex'
p3168
I4
sg15
(lp3169
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I4
sa(dp3170
g16
(lp3171
S'k'
asg18
S'N'
sS'.thisRepN'
p3172
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3173
I14
sS'.thisN'
p3174
I389
sS'.thisIndex'
p3175
I2
sg15
(lp3176
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I2
sa(dp3177
g16
(lp3178
S'k'
asg18
S'Y'
sS'.thisRepN'
p3179
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3180
I0
sS'.thisN'
p3181
I390
sS'.thisIndex'
p3182
I10
sg15
(lp3183
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp3184
g16
(lp3185
S'd'
asg18
S'Y'
sS'.thisRepN'
p3186
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3187
I1
sS'.thisN'
p3188
I391
sS'.thisIndex'
p3189
I8
sg15
(lp3190
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3191
S'space'
p3192
asg96
I8
sa(dp3193
g16
(lp3194
S'd'
asg18
S'N'
sS'.thisRepN'
p3195
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3196
I2
sS'.thisN'
p3197
I392
sS'.thisIndex'
p3198
I3
sg15
(lp3199
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3200
g16
(lp3201
S'k'
asg18
S'Y'
sS'.thisRepN'
p3202
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3203
I3
sS'.thisN'
p3204
I393
sS'.thisIndex'
p3205
I7
sg15
(lp3206
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3207
S'space'
p3208
asg96
I7
sa(dp3209
g16
(lp3210
S'k'
asg18
S'Y'
sS'.thisRepN'
p3211
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3212
I4
sS'.thisN'
p3213
I394
sS'.thisIndex'
p3214
I12
sg15
(lp3215
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3216
S'space'
p3217
asg96
I12
sa(dp3218
g16
(lp3219
S'k'
asg18
S'N'
sS'.thisRepN'
p3220
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3221
I5
sS'.thisN'
p3222
I395
sS'.thisIndex'
p3223
I7
sg15
(lp3224
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I7
sa(dp3225
g16
(lp3226
S'd'
asg18
S'N'
sS'.thisRepN'
p3227
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3228
I6
sS'.thisN'
p3229
I396
sS'.thisIndex'
p3230
I12
sg15
(lp3231
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I12
sa(dp3232
g16
(lp3233
S'k'
asg18
S'N'
sS'.thisRepN'
p3234
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3235
I7
sS'.thisN'
p3236
I397
sS'.thisIndex'
p3237
I10
sg15
(lp3238
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp3239
g16
(lp3240
S'k'
asg18
S'N'
sS'.thisRepN'
p3241
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3242
I8
sS'.thisN'
p3243
I398
sS'.thisIndex'
p3244
I5
sg15
(lp3245
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp3246
g16
(lp3247
S'k'
asg18
S'N'
sg22
I45
sS'.thisN'
p3248
I399
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3249
I9
sS'.thisRepN'
p3250
I26
sg21
I46
sS'.thisIndex'
p3251
I10
sg23
I23
sg15
(lp3252
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp3253
g16
(lp3254
S'k'
asg96
I4
sS'.thisRepN'
p3255
I26
sg30
g31
sg32
g33
sS'.thisTrialN'
p3256
I10
sS'.thisN'
p3257
I400
sS'.thisIndex'
p3258
I4
sg15
(lp3259
S'k'
asg17
S'Y'
sg14
I9
sa(dp3260
g16
(lp3261
S'd'
asg96
I4
sS'.thisRepN'
p3262
I26
sg30
g31
sg32
g33
sS'.thisTrialN'
p3263
I11
sS'.thisN'
p3264
I401
sS'.thisIndex'
p3265
I4
sg15
(lp3266
S'd'
asg17
S'Y'
sg14
I9
sa(dp3267
g16
(lp3268
S'd'
asg18
S'Y'
sS'.thisRepN'
p3269
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3270
I12
sS'.thisN'
p3271
I402
sS'.thisIndex'
p3272
I3
sg15
(lp3273
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3274
S'space'
p3275
asg96
I3
sa(dp3276
g16
(lp3277
S'd'
asg18
S'Y'
sS'.thisRepN'
p3278
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3279
I13
sS'.thisN'
p3280
I403
sS'.thisIndex'
p3281
I6
sg15
(lp3282
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3283
S'space'
p3284
asg96
I6
sa(dp3285
g16
(lp3286
S'd'
asg18
S'N'
sS'.thisRepN'
p3287
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3288
I14
sS'.thisN'
p3289
I404
sS'.thisIndex'
p3290
I3
sg15
(lp3291
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3292
g16
(lp3293
S'k'
asg18
S'N'
sS'.thisRepN'
p3294
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3295
I0
sS'.thisN'
p3296
I405
sS'.thisIndex'
p3297
I2
sg15
(lp3298
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3299
g16
(lp3300
S'd'
asg18
S'Y'
sS'.thisRepN'
p3301
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3302
I1
sS'.thisN'
p3303
I406
sS'.thisIndex'
p3304
I7
sg15
(lp3305
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3306
S'space'
p3307
asg96
I7
sa(dp3308
g16
(lp3309
S'k'
asg18
S'N'
sS'.thisRepN'
p3310
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3311
I2
sS'.thisN'
p3312
I407
sS'.thisIndex'
p3313
I0
sg15
(lp3314
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I0
sa(dp3315
g16
(lp3316
S'd'
asg18
S'Y'
sS'.thisRepN'
p3317
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3318
I3
sS'.thisN'
p3319
I408
sS'.thisIndex'
p3320
I6
sg15
(lp3321
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3322
S'space'
p3323
asg96
I6
sa(dp3324
g16
(lp3325
S'k'
asg18
S'Y'
sS'.thisRepN'
p3326
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3327
I4
sS'.thisN'
p3328
I409
sS'.thisIndex'
p3329
I5
sg15
(lp3330
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3331
S'space'
p3332
asg96
I5
sa(dp3333
g16
(lp3334
S'd'
asg18
S'Y'
sS'.thisRepN'
p3335
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3336
I5
sS'.thisN'
p3337
I410
sS'.thisIndex'
p3338
I1
sg15
(lp3339
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3340
S'space'
p3341
asg96
I1
sa(dp3342
g16
(lp3343
S'k'
asg18
S'Y'
sS'.thisRepN'
p3344
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3345
I6
sS'.thisN'
p3346
I411
sS'.thisIndex'
p3347
I8
sg15
(lp3348
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3349
S'space'
p3350
asg96
I8
sa(dp3351
g16
(lp3352
S'd'
asg18
S'N'
sS'.thisRepN'
p3353
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3354
I7
sS'.thisN'
p3355
I412
sS'.thisIndex'
p3356
I7
sg15
(lp3357
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3358
g16
(lp3359
S'k'
asg18
S'Y'
sS'.thisRepN'
p3360
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3361
I8
sS'.thisN'
p3362
I413
sS'.thisIndex'
p3363
I6
sg15
(lp3364
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3365
S'space'
p3366
asg96
I6
sa(dp3367
g16
(lp3368
S'k'
asg18
S'Y'
sS'.thisRepN'
p3369
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3370
I9
sS'.thisN'
p3371
I414
sS'.thisIndex'
p3372
I8
sg15
(lp3373
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3374
S'space'
p3375
asg96
I8
sa(dp3376
g16
(lp3377
S'd'
asg18
S'Y'
sS'.thisRepN'
p3378
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3379
I10
sS'.thisN'
p3380
I415
sS'.thisIndex'
p3381
I4
sg15
(lp3382
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3383
S'space'
p3384
asg96
I4
sa(dp3385
g16
(lp3386
S'd'
asg18
S'N'
sS'.thisRepN'
p3387
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3388
I11
sS'.thisN'
p3389
I416
sS'.thisIndex'
p3390
I10
sg15
(lp3391
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3392
g16
(lp3393
S'k'
asg18
S'N'
sS'.thisRepN'
p3394
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3395
I12
sS'.thisN'
p3396
I417
sS'.thisIndex'
p3397
I9
sg15
(lp3398
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3399
g16
(lp3400
S'd'
asg18
S'Y'
sS'.thisRepN'
p3401
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3402
I13
sS'.thisN'
p3403
I418
sS'.thisIndex'
p3404
I9
sg15
(lp3405
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3406
S'space'
p3407
asg96
I9
sa(dp3408
g16
(lp3409
S'd'
asg18
S'N'
sS'.thisRepN'
p3410
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3411
I14
sS'.thisN'
p3412
I419
sS'.thisIndex'
p3413
I9
sg15
(lp3414
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3415
g16
(lp3416
S'd'
asg18
S'Y'
sS'.thisRepN'
p3417
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3418
I0
sS'.thisN'
p3419
I420
sS'.thisIndex'
p3420
I8
sg15
(lp3421
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3422
S'space'
p3423
asg96
I8
sa(dp3424
g16
(lp3425
S'd'
asg18
S'Y'
sS'.thisRepN'
p3426
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3427
I1
sS'.thisN'
p3428
I421
sS'.thisIndex'
p3429
I14
sg15
(lp3430
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3431
S'space'
p3432
asg96
I14
sa(dp3433
g16
(lp3434
S'd'
asg18
S'N'
sS'.thisRepN'
p3435
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3436
I2
sS'.thisN'
p3437
I422
sS'.thisIndex'
p3438
I5
sg15
(lp3439
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3440
g16
(lp3441
S'k'
asg18
S'Y'
sS'.thisRepN'
p3442
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3443
I3
sS'.thisN'
p3444
I423
sS'.thisIndex'
p3445
I6
sg15
(lp3446
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3447
S'space'
p3448
asg96
I6
sa(dp3449
g16
(lp3450
S'd'
asg18
S'Y'
sS'.thisRepN'
p3451
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3452
I4
sS'.thisN'
p3453
I424
sS'.thisIndex'
p3454
I2
sg15
(lp3455
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3456
S'space'
p3457
asg96
I2
sa(dp3458
g16
(lp3459
S'k'
asg18
S'Y'
sS'.thisRepN'
p3460
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3461
I5
sS'.thisN'
p3462
I425
sS'.thisIndex'
p3463
I11
sg15
(lp3464
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3465
S'space'
p3466
asg96
I11
sa(dp3467
g16
(lp3468
S'd'
asg18
S'Y'
sS'.thisRepN'
p3469
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3470
I6
sS'.thisN'
p3471
I426
sS'.thisIndex'
p3472
I0
sg15
(lp3473
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3474
S'space'
p3475
asg96
I0
sa(dp3476
g16
(lp3477
S'k'
asg18
S'N'
sS'.thisRepN'
p3478
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3479
I7
sS'.thisN'
p3480
I427
sS'.thisIndex'
p3481
I9
sg15
(lp3482
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3483
g16
(lp3484
S'd'
asg18
S'Y'
sS'.thisRepN'
p3485
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3486
I8
sS'.thisN'
p3487
I428
sS'.thisIndex'
p3488
I0
sg15
(lp3489
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3490
S'space'
p3491
asg96
I0
sa(dp3492
g16
(lp3493
S'd'
asg18
S'Y'
sS'.thisRepN'
p3494
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3495
I9
sS'.thisN'
p3496
I429
sS'.thisIndex'
p3497
I5
sg15
(lp3498
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3499
S'space'
p3500
asg96
I5
sa(dp3501
g16
(lp3502
S'd'
asg18
S'Y'
sS'.thisRepN'
p3503
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3504
I10
sS'.thisN'
p3505
I430
sS'.thisIndex'
p3506
I8
sg15
(lp3507
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3508
S'space'
p3509
asg96
I8
sa(dp3510
g16
(lp3511
S'd'
asg18
S'Y'
sS'.thisRepN'
p3512
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3513
I11
sS'.thisN'
p3514
I431
sS'.thisIndex'
p3515
I1
sg15
(lp3516
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3517
S'space'
p3518
asg96
I1
sa(dp3519
g16
(lp3520
S'k'
asg18
S'Y'
sS'.thisRepN'
p3521
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3522
I12
sS'.thisN'
p3523
I432
sS'.thisIndex'
p3524
I9
sg15
(lp3525
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3526
S'space'
p3527
asg96
I9
sa(dp3528
g16
(lp3529
S'k'
asg18
S'N'
sS'.thisRepN'
p3530
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3531
I13
sS'.thisN'
p3532
I433
sS'.thisIndex'
p3533
I10
sg15
(lp3534
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3535
g16
(lp3536
S'd'
asg18
S'N'
sS'.thisRepN'
p3537
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3538
I14
sS'.thisN'
p3539
I434
sS'.thisIndex'
p3540
I12
sg15
(lp3541
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I12
sa(dp3542
g16
(lp3543
S'd'
asg18
S'Y'
sS'.thisRepN'
p3544
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3545
I0
sS'.thisN'
p3546
I435
sS'.thisIndex'
p3547
I9
sg15
(lp3548
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3549
S'space'
p3550
asg96
I9
sa(dp3551
g16
(lp3552
S'k'
asg18
S'Y'
sS'.thisRepN'
p3553
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3554
I1
sS'.thisN'
p3555
I436
sS'.thisIndex'
p3556
I14
sg15
(lp3557
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3558
S'space'
p3559
asg96
I14
sa(dp3560
g16
(lp3561
S'k'
asg18
S'Y'
sS'.thisRepN'
p3562
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3563
I2
sS'.thisN'
p3564
I437
sS'.thisIndex'
p3565
I12
sg15
(lp3566
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3567
S'space'
p3568
asg96
I12
sa(dp3569
g16
(lp3570
S'k'
asg18
S'N'
sS'.thisRepN'
p3571
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3572
I3
sS'.thisN'
p3573
I438
sS'.thisIndex'
p3574
I10
sg15
(lp3575
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3576
g16
(lp3577
S'd'
asg18
S'N'
sS'.thisRepN'
p3578
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3579
I4
sS'.thisN'
p3580
I439
sS'.thisIndex'
p3581
I4
sg15
(lp3582
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I4
sa(dp3583
g16
(lp3584
S'd'
asg18
S'N'
sS'.thisRepN'
p3585
I29
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3586
I5
sS'.thisN'
p3587
I440
sS'.thisIndex'
p3588
I12
sg15
(lp3589
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3590
S'space'
p3591
asg96
I12
sa(dp3592
g16
(lp3593
S'd'
asg18
S'N'
sS'.thisRepN'
p3594
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3595
I6
sS'.thisN'
p3596
I441
sS'.thisIndex'
p3597
I5
sg15
(lp3598
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3599
g16
(lp3600
S'k'
asg18
S'N'
sS'.thisRepN'
p3601
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3602
I7
sS'.thisN'
p3603
I442
sS'.thisIndex'
p3604
I2
sg15
(lp3605
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3606
g16
(lp3607
S'd'
asg18
S'N'
sS'.thisRepN'
p3608
I29
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3609
I8
sS'.thisN'
p3610
I443
sS'.thisIndex'
p3611
I12
sg15
(lp3612
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3613
S'space'
p3614
asg96
I12
sa(dp3615
g16
(lp3616
S'k'
asg18
S'N'
sS'.thisRepN'
p3617
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3618
I9
sS'.thisN'
p3619
I444
sS'.thisIndex'
p3620
I11
sg15
(lp3621
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I11
sa(dp3622
g16
(lp3623
S'd'
asg18
S'N'
sS'.thisRepN'
p3624
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3625
I10
sS'.thisN'
p3626
I445
sS'.thisIndex'
p3627
I6
sg15
(lp3628
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3629
g16
(lp3630
S'd'
asg18
S'N'
sS'.thisRepN'
p3631
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3632
I11
sS'.thisN'
p3633
I446
sS'.thisIndex'
p3634
I8
sg15
(lp3635
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3636
g16
(lp3637
S'd'
asg18
S'N'
sS'.thisRepN'
p3638
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3639
I12
sS'.thisN'
p3640
I447
sS'.thisIndex'
p3641
I2
sg15
(lp3642
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3643
g16
(lp3644
S'd'
asg18
S'N'
sS'.thisRepN'
p3645
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3646
I13
sS'.thisN'
p3647
I448
sS'.thisIndex'
p3648
I14
sg15
(lp3649
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I14
sa(dp3650
g16
(lp3651
S'k'
asg18
S'N'
sg22
I46
sS'.thisN'
p3652
I449
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3653
I14
sS'.thisRepN'
p3654
I29
sg21
I50
sS'.thisIndex'
p3655
I13
sg23
I25
sg15
(lp3656
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I13
sa(dp3657
g16
(lp3658
S'k'
asg96
I0
sS'.thisRepN'
p3659
I30
sg30
g31
sg32
g33
sS'.thisTrialN'
p3660
I0
sS'.thisN'
p3661
I450
sS'.thisIndex'
p3662
I0
sg15
(lp3663
S'k'
asg17
S'Y'
sg14
I10
sa(dp3664
g16
(lp3665
S'd'
asg96
I10
sS'.thisRepN'
p3666
I30
sg30
g31
sg32
g33
sS'.thisTrialN'
p3667
I1
sS'.thisN'
p3668
I451
sS'.thisIndex'
p3669
I10
sg15
(lp3670
S'd'
asg17
S'Y'
sg14
I10
sa(dp3671
g16
(lp3672
S'k'
asg18
S'N'
sS'.thisRepN'
p3673
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3674
I2
sS'.thisN'
p3675
I452
sS'.thisIndex'
p3676
I2
sg15
(lp3677
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3678
g16
(lp3679
S'k'
asg18
S'N'
sS'.thisRepN'
p3680
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3681
I3
sS'.thisN'
p3682
I453
sS'.thisIndex'
p3683
I11
sg15
(lp3684
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I11
sa(dp3685
g16
(lp3686
S'd'
asg18
S'N'
sS'.thisRepN'
p3687
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3688
I4
sS'.thisN'
p3689
I454
sS'.thisIndex'
p3690
I6
sg15
(lp3691
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I6
sa(dp3692
g16
(lp3693
S'k'
asg18
S'Y'
sS'.thisRepN'
p3694
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3695
I5
sS'.thisN'
p3696
I455
sS'.thisIndex'
p3697
I4
sg15
(lp3698
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3699
g16
(lp3700
S'd'
asg18
S'Y'
sS'.thisRepN'
p3701
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3702
I6
sS'.thisN'
p3703
I456
sS'.thisIndex'
p3704
I5
sg15
(lp3705
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3706
S'space'
p3707
asg96
I5
sa(dp3708
g16
(lp3709
S'd'
asg18
S'Y'
sS'.thisRepN'
p3710
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3711
I7
sS'.thisN'
p3712
I457
sS'.thisIndex'
p3713
I1
sg15
(lp3714
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3715
S'space'
p3716
asg96
I1
sa(dp3717
g16
(lp3718
S'd'
asg18
S'Y'
sS'.thisRepN'
p3719
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3720
I8
sS'.thisN'
p3721
I458
sS'.thisIndex'
p3722
I0
sg15
(lp3723
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3724
S'space'
p3725
asg96
I0
sa(dp3726
g16
(lp3727
S'k'
asg18
S'Y'
sS'.thisRepN'
p3728
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3729
I9
sS'.thisN'
p3730
I459
sS'.thisIndex'
p3731
I3
sg15
(lp3732
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3733
S'space'
p3734
asg96
I3
sa(dp3735
g16
(lp3736
S'k'
asg18
S'N'
sS'.thisRepN'
p3737
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3738
I10
sS'.thisN'
p3739
I460
sS'.thisIndex'
p3740
I11
sg15
(lp3741
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I11
sa(dp3742
g16
(lp3743
S'k'
asg18
S'Y'
sS'.thisRepN'
p3744
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3745
I11
sS'.thisN'
p3746
I461
sS'.thisIndex'
p3747
I7
sg15
(lp3748
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3749
S'space'
p3750
asg96
I7
sa(dp3751
g16
(lp3752
S'k'
asg18
S'Y'
sS'.thisRepN'
p3753
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3754
I12
sS'.thisN'
p3755
I462
sS'.thisIndex'
p3756
I3
sg15
(lp3757
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3758
S'space'
p3759
asg96
I3
sa(dp3760
g16
(lp3761
S'd'
asg18
S'Y'
sS'.thisRepN'
p3762
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3763
I13
sS'.thisN'
p3764
I463
sS'.thisIndex'
p3765
I7
sg15
(lp3766
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3767
S'space'
p3768
asg96
I7
sa(dp3769
g16
(lp3770
S'd'
asg18
S'Y'
sS'.thisRepN'
p3771
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3772
I14
sS'.thisN'
p3773
I464
sS'.thisIndex'
p3774
I4
sg15
(lp3775
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3776
S'space'
p3777
asg96
I4
sa(dp3778
g16
(lp3779
S'd'
asg18
S'N'
sS'.thisRepN'
p3780
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3781
I0
sS'.thisN'
p3782
I465
sS'.thisIndex'
p3783
I1
sg15
(lp3784
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3785
g16
(lp3786
S'd'
asg18
S'N'
sS'.thisRepN'
p3787
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3788
I1
sS'.thisN'
p3789
I466
sS'.thisIndex'
p3790
I6
sg15
(lp3791
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I6
sa(dp3792
g16
(lp3793
S'd'
asg18
S'N'
sS'.thisRepN'
p3794
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3795
I2
sS'.thisN'
p3796
I467
sS'.thisIndex'
p3797
I13
sg15
(lp3798
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I13
sa(dp3799
g16
(lp3800
S'd'
asg18
S'Y'
sS'.thisRepN'
p3801
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3802
I3
sS'.thisN'
p3803
I468
sS'.thisIndex'
p3804
I2
sg15
(lp3805
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3806
S'space'
p3807
asg96
I2
sa(dp3808
g16
(lp3809
S'k'
asg18
S'Y'
sS'.thisRepN'
p3810
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3811
I4
sS'.thisN'
p3812
I469
sS'.thisIndex'
p3813
I12
sg15
(lp3814
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3815
S'space'
p3816
asg96
I12
sa(dp3817
g16
(lp3818
S'd'
asg18
S'N'
sS'.thisRepN'
p3819
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3820
I5
sS'.thisN'
p3821
I470
sS'.thisIndex'
p3822
I6
sg15
(lp3823
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I6
sa(dp3824
g16
(lp3825
S'd'
asg18
S'N'
sS'.thisRepN'
p3826
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3827
I6
sS'.thisN'
p3828
I471
sS'.thisIndex'
p3829
I13
sg15
(lp3830
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I13
sa(dp3831
g16
(lp3832
S'k'
asg18
S'Y'
sS'.thisRepN'
p3833
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3834
I7
sS'.thisN'
p3835
I472
sS'.thisIndex'
p3836
I3
sg15
(lp3837
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3838
S'space'
p3839
asg96
I3
sa(dp3840
g16
(lp3841
S'k'
asg18
S'N'
sS'.thisRepN'
p3842
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3843
I8
sS'.thisN'
p3844
I473
sS'.thisIndex'
p3845
I5
sg15
(lp3846
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3847
g16
(lp3848
S'd'
asg18
S'N'
sS'.thisRepN'
p3849
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3850
I9
sS'.thisN'
p3851
I474
sS'.thisIndex'
p3852
I13
sg15
(lp3853
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I13
sa(dp3854
g16
(lp3855
S'k'
asg18
S'N'
sS'.thisRepN'
p3856
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3857
I10
sS'.thisN'
p3858
I475
sS'.thisIndex'
p3859
I12
sg15
(lp3860
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I12
sa(dp3861
g16
(lp3862
S'k'
asg18
S'N'
sS'.thisRepN'
p3863
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3864
I11
sS'.thisN'
p3865
I476
sS'.thisIndex'
p3866
I2
sg15
(lp3867
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3868
g16
(lp3869
S'k'
asg18
S'N'
sS'.thisRepN'
p3870
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3871
I12
sS'.thisN'
p3872
I477
sS'.thisIndex'
p3873
I8
sg15
(lp3874
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3875
g16
(lp3876
S'k'
asg18
S'N'
sS'.thisRepN'
p3877
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3878
I13
sS'.thisN'
p3879
I478
sS'.thisIndex'
p3880
I1
sg15
(lp3881
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3882
g16
(lp3883
S'd'
asg18
S'N'
sS'.thisRepN'
p3884
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3885
I14
sS'.thisN'
p3886
I479
sS'.thisIndex'
p3887
I13
sg15
(lp3888
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I13
sa(dp3889
g16
(lp3890
S'k'
asg18
S'N'
sS'.thisRepN'
p3891
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3892
I0
sS'.thisN'
p3893
I480
sS'.thisIndex'
p3894
I3
sg15
(lp3895
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3896
g16
(lp3897
S'd'
asg18
S'Y'
sS'.thisRepN'
p3898
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3899
I1
sS'.thisN'
p3900
I481
sS'.thisIndex'
p3901
I10
sg15
(lp3902
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3903
S'space'
p3904
asg96
I10
sa(dp3905
g16
(lp3906
S'k'
asg18
S'Y'
sS'.thisRepN'
p3907
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3908
I2
sS'.thisN'
p3909
I482
sS'.thisIndex'
p3910
I13
sg15
(lp3911
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3912
S'space'
p3913
asg96
I13
sa(dp3914
g16
(lp3915
S'k'
asg18
S'N'
sS'.thisRepN'
p3916
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3917
I3
sS'.thisN'
p3918
I483
sS'.thisIndex'
p3919
I5
sg15
(lp3920
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3921
g16
(lp3922
S'k'
asg18
S'Y'
sS'.thisRepN'
p3923
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3924
I4
sS'.thisN'
p3925
I484
sS'.thisIndex'
p3926
I7
sg15
(lp3927
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3928
S'space'
p3929
asg96
I7
sa(dp3930
g16
(lp3931
S'd'
asg18
S'Y'
sS'.thisRepN'
p3932
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3933
I5
sS'.thisN'
p3934
I485
sS'.thisIndex'
p3935
I7
sg15
(lp3936
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3937
S'space'
p3938
asg96
I7
sa(dp3939
g16
(lp3940
S'd'
asg18
S'Y'
sS'.thisRepN'
p3941
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3942
I6
sS'.thisN'
p3943
I486
sS'.thisIndex'
p3944
I4
sg15
(lp3945
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3946
S'space'
p3947
asg96
I4
sa(dp3948
g16
(lp3949
S'd'
asg18
S'N'
sS'.thisRepN'
p3950
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3951
I7
sS'.thisN'
p3952
I487
sS'.thisIndex'
p3953
I1
sg15
(lp3954
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3955
g16
(lp3956
S'k'
asg18
S'N'
sS'.thisRepN'
p3957
I32
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3958
I8
sS'.thisN'
p3959
I488
sS'.thisIndex'
p3960
I3
sg15
(lp3961
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3962
S'space'
p3963
asg96
I3
sa(dp3964
g16
(lp3965
S'd'
asg18
S'Y'
sS'.thisRepN'
p3966
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3967
I9
sS'.thisN'
p3968
I489
sS'.thisIndex'
p3969
I2
sg15
(lp3970
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3971
S'space'
p3972
asg96
I2
sa(dp3973
g16
(lp3974
S'k'
asg18
S'Y'
sS'.thisRepN'
p3975
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3976
I10
sS'.thisN'
p3977
I490
sS'.thisIndex'
p3978
I0
sg15
(lp3979
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3980
S'space'
p3981
asg96
I0
sa(dp3982
g16
(lp3983
S'd'
asg18
S'Y'
sS'.thisRepN'
p3984
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3985
I11
sS'.thisN'
p3986
I491
sS'.thisIndex'
p3987
I12
sg15
(lp3988
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3989
S'space'
p3990
asg96
I12
sa(dp3991
g16
(lp3992
S'd'
asg18
S'N'
sS'.thisRepN'
p3993
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3994
I12
sS'.thisN'
p3995
I492
sS'.thisIndex'
p3996
I3
sg15
(lp3997
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3998
g16
(lp3999
S'd'
asg18
S'Y'
sS'.thisRepN'
p4000
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4001
I13
sS'.thisN'
p4002
I493
sS'.thisIndex'
p4003
I14
sg15
(lp4004
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp4005
S'space'
p4006
asg96
I14
sa(dp4007
g16
(lp4008
S'k'
asg18
S'Y'
sS'.thisRepN'
p4009
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4010
I14
sS'.thisN'
p4011
I494
sS'.thisIndex'
p4012
I3
sg15
(lp4013
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp4014
S'space'
p4015
asg96
I3
sa(dp4016
g16
(lp4017
S'd'
asg18
S'Y'
sS'.thisRepN'
p4018
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4019
I0
sS'.thisN'
p4020
I495
sS'.thisIndex'
p4021
I0
sg15
(lp4022
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp4023
S'space'
p4024
asg96
I0
sa(dp4025
g16
(lp4026
S'd'
asg18
S'N'
sS'.thisRepN'
p4027
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4028
I1
sS'.thisN'
p4029
I496
sS'.thisIndex'
p4030
I11
sg15
(lp4031
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I11
sa(dp4032
g16
(lp4033
S'k'
asg18
S'Y'
sS'.thisRepN'
p4034
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4035
I2
sS'.thisN'
p4036
I497
sS'.thisIndex'
p4037
I0
sg15
(lp4038
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp4039
S'space'
p4040
asg96
I0
sa(dp4041
g16
(lp4042
S'd'
asg18
S'N'
sS'.thisRepN'
p4043
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4044
I3
sS'.thisN'
p4045
I498
sS'.thisIndex'
p4046
I0
sg15
(lp4047
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I0
sa(dp4048
g16
(lp4049
S'k'
asg18
S'Y'
sg22
I45
sS'.thisN'
p4050
I499
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4051
I4
sS'.thisRepN'
p4052
I33
sg21
I49
sS'.thisIndex'
p4053
I1
sg23
I25
sg15
(lp4054
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp4055
g16
(lp4056
S'd'
asS'.thisIndex'
p4057
I9
sS'.thisRepN'
p4058
I33
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4059
I5
sS'.thisN'
p4060
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4061
S'k'
asg17
S'Y'
sg14
I11
sg96
I9
sa(dp4062
g16
(lp4063
S'd'
asS'.thisIndex'
p4064
I0
sS'.thisRepN'
p4065
I33
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4066
I6
sS'.thisN'
p4067
I501
sg25
S'Y'
sg15
(lp4068
S'k'
asg17
S'Y'
sg14
I11
sg96
I0
sa(dp4069
g16
(lp4070
S'k'
asg18
S'Y'
sS'.thisRepN'
p4071
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4072
I7
sS'.thisN'
p4073
I502
sg25
S'Y'
sg15
(lp4074
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4075
S'space'
p4076
asg96
I13
sS'.thisIndex'
p4077
I13
sa(dp4078
g16
(lp4079
S'k'
asg18
S'Y'
sS'.thisRepN'
p4080
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4081
I8
sS'.thisN'
p4082
I503
sg25
S'Y'
sg15
(lp4083
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4084
S'space'
p4085
asg96
I12
sS'.thisIndex'
p4086
I12
sa(dp4087
g16
(lp4088
S'd'
asg18
S'N'
sS'.thisRepN'
p4089
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4090
I9
sS'.thisN'
p4091
I504
sg25
S'Y'
sg15
(lp4092
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4093
I1
sa(dp4094
g18
S'Y'
sS'.thisRepN'
p4095
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4096
I10
sS'.thisN'
p4097
I505
sg25
S'Y'
sg15
Nsg30
g31
sg17
S'Timed out'
p4098
sg14
I11
sg19
(lp4099
S'space'
p4100
asg96
I5
sS'.thisIndex'
p4101
I5
sa(dp4102
g16
(lp4103
S'k'
asg18
S'Y'
sS'.thisRepN'
p4104
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4105
I11
sS'.thisN'
p4106
I506
sg25
S'Y'
sg15
(lp4107
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4108
S'space'
p4109
asg96
I14
sS'.thisIndex'
p4110
I14
sa(dp4111
g16
(lp4112
S'k'
asg18
S'Y'
sS'.thisRepN'
p4113
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4114
I12
sS'.thisN'
p4115
I507
sg25
S'Y'
sg15
(lp4116
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4117
S'space'
p4118
asg96
I6
sS'.thisIndex'
p4119
I6
sa(dp4120
g16
(lp4121
S'k'
asg18
S'N'
sS'.thisRepN'
p4122
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4123
I13
sS'.thisN'
p4124
I508
sg25
S'Y'
sg15
(lp4125
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I12
sS'.thisIndex'
p4126
I12
sa(dp4127
g16
(lp4128
S'd'
asg18
S'N'
sS'.thisRepN'
p4129
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4130
I14
sS'.thisN'
p4131
I509
sg25
S'Y'
sg15
(lp4132
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4133
I2
sa(dp4134
g16
(lp4135
S'd'
asg18
S'Y'
sS'.thisRepN'
p4136
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4137
I0
sS'.thisN'
p4138
I510
sg25
S'Y'
sg15
(lp4139
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4140
S'space'
p4141
asg96
I3
sS'.thisIndex'
p4142
I3
sa(dp4143
g16
(lp4144
S'k'
asg18
S'N'
sS'.thisRepN'
p4145
I34
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4146
I1
sS'.thisN'
p4147
I511
sg25
S'Y'
sg15
(lp4148
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4149
S'space'
p4150
asg96
I13
sS'.thisIndex'
p4151
I13
sa(dp4152
g16
(lp4153
S'k'
asg18
S'Y'
sS'.thisRepN'
p4154
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4155
I2
sS'.thisN'
p4156
I512
sg25
S'Y'
sg15
(lp4157
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4158
S'space'
p4159
asg96
I14
sS'.thisIndex'
p4160
I14
sa(dp4161
g16
(lp4162
S'd'
asg18
S'Y'
sS'.thisRepN'
p4163
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4164
I3
sS'.thisN'
p4165
I513
sg25
S'Y'
sg15
(lp4166
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4167
S'space'
p4168
asg96
I3
sS'.thisIndex'
p4169
I3
sa(dp4170
g16
(lp4171
S'k'
asg18
S'N'
sS'.thisRepN'
p4172
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4173
I4
sS'.thisN'
p4174
I514
sg25
S'Y'
sg15
(lp4175
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4176
I1
sa(dp4177
g16
(lp4178
S'd'
asg18
S'N'
sS'.thisRepN'
p4179
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4180
I5
sS'.thisN'
p4181
I515
sg25
S'Y'
sg15
(lp4182
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I5
sS'.thisIndex'
p4183
I5
sa(dp4184
g16
(lp4185
S'k'
asg18
S'Y'
sS'.thisRepN'
p4186
I34
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4187
I6
sS'.thisN'
p4188
I516
sg25
S'Y'
sg15
(lp4189
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4190
I4
sa(dp4191
g16
(lp4192
S'd'
asg18
S'N'
sS'.thisRepN'
p4193
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4194
I7
sS'.thisN'
p4195
I517
sg25
S'Y'
sg15
(lp4196
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4197
I6
sa(dp4198
g16
(lp4199
S'd'
asg18
S'N'
sS'.thisRepN'
p4200
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4201
I8
sS'.thisN'
p4202
I518
sg25
S'Y'
sg15
(lp4203
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I12
sS'.thisIndex'
p4204
I12
sa(dp4205
g16
(lp4206
S'd'
asg18
S'Y'
sS'.thisRepN'
p4207
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4208
I9
sS'.thisN'
p4209
I519
sg25
S'Y'
sg15
(lp4210
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4211
S'space'
p4212
asg96
I11
sS'.thisIndex'
p4213
I11
sa(dp4214
g16
(lp4215
S'd'
asg18
S'N'
sS'.thisRepN'
p4216
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4217
I10
sS'.thisN'
p4218
I520
sg25
S'Y'
sg15
(lp4219
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4220
I10
sa(dp4221
g16
(lp4222
S'd'
asg18
S'N'
sS'.thisRepN'
p4223
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4224
I11
sS'.thisN'
p4225
I521
sg25
S'Y'
sg15
(lp4226
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4227
I2
sa(dp4228
g16
(lp4229
S'd'
asg18
S'Y'
sS'.thisRepN'
p4230
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4231
I12
sS'.thisN'
p4232
I522
sg25
S'Y'
sg15
(lp4233
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4234
S'space'
p4235
asg96
I14
sS'.thisIndex'
p4236
I14
sa(dp4237
g16
(lp4238
S'k'
asg18
S'Y'
sS'.thisRepN'
p4239
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4240
I13
sS'.thisN'
p4241
I523
sg25
S'Y'
sg15
(lp4242
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4243
S'space'
p4244
asg96
I12
sS'.thisIndex'
p4245
I12
sa(dp4246
g16
(lp4247
S'd'
asg18
S'N'
sS'.thisRepN'
p4248
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4249
I14
sS'.thisN'
p4250
I524
sg25
S'Y'
sg15
(lp4251
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4252
I4
sa(dp4253
g16
(lp4254
S'k'
asg18
S'Y'
sS'.thisRepN'
p4255
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4256
I0
sS'.thisN'
p4257
I525
sg25
S'Y'
sg15
(lp4258
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4259
S'space'
p4260
asg96
I11
sS'.thisIndex'
p4261
I11
sa(dp4262
g16
(lp4263
S'd'
asg18
S'N'
sS'.thisRepN'
p4264
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4265
I1
sS'.thisN'
p4266
I526
sg25
S'Y'
sg15
(lp4267
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4268
I8
sa(dp4269
g16
(lp4270
S'k'
asg18
S'Y'
sS'.thisRepN'
p4271
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4272
I2
sS'.thisN'
p4273
I527
sg25
S'Y'
sg15
(lp4274
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4275
S'space'
p4276
asg96
I5
sS'.thisIndex'
p4277
I5
sa(dp4278
g16
(lp4279
S'k'
asg18
S'N'
sS'.thisRepN'
p4280
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4281
I3
sS'.thisN'
p4282
I528
sg25
S'Y'
sg15
(lp4283
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I9
sS'.thisIndex'
p4284
I9
sa(dp4285
g16
(lp4286
S'd'
asg18
S'Y'
sS'.thisRepN'
p4287
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4288
I4
sS'.thisN'
p4289
I529
sg25
S'Y'
sg15
(lp4290
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4291
S'space'
p4292
asg96
I2
sS'.thisIndex'
p4293
I2
sa(dp4294
g16
(lp4295
S'd'
asg18
S'Y'
sS'.thisRepN'
p4296
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4297
I5
sS'.thisN'
p4298
I530
sg25
S'Y'
sg15
(lp4299
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4300
S'space'
p4301
asg96
I7
sS'.thisIndex'
p4302
I7
sa(dp4303
g16
(lp4304
S'd'
asg18
S'N'
sS'.thisRepN'
p4305
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4306
I6
sS'.thisN'
p4307
I531
sg25
S'Y'
sg15
(lp4308
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I14
sS'.thisIndex'
p4309
I14
sa(dp4310
g16
(lp4311
S'd'
asg18
S'N'
sS'.thisRepN'
p4312
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4313
I7
sS'.thisN'
p4314
I532
sg25
S'Y'
sg15
(lp4315
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4316
I10
sa(dp4317
g16
(lp4318
S'd'
asg18
S'N'
sS'.thisRepN'
p4319
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4320
I8
sS'.thisN'
p4321
I533
sg25
S'Y'
sg15
(lp4322
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4323
I6
sa(dp4324
g16
(lp4325
S'k'
asg18
S'Y'
sS'.thisRepN'
p4326
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4327
I9
sS'.thisN'
p4328
I534
sg25
S'Y'
sg15
(lp4329
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4330
S'space'
p4331
asg96
I7
sS'.thisIndex'
p4332
I7
sa(dp4333
g16
(lp4334
S'k'
asg18
S'Y'
sS'.thisRepN'
p4335
I35
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4336
I10
sS'.thisN'
p4337
I535
sg25
S'Y'
sg15
(lp4338
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4339
I7
sa(dp4340
g16
(lp4341
S'k'
asg18
S'Y'
sS'.thisRepN'
p4342
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4343
I11
sS'.thisN'
p4344
I536
sg25
S'Y'
sg15
(lp4345
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4346
S'space'
p4347
asg96
I6
sS'.thisIndex'
p4348
I6
sa(dp4349
g16
(lp4350
S'k'
asg18
S'Y'
sS'.thisRepN'
p4351
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4352
I12
sS'.thisN'
p4353
I537
sg25
S'Y'
sg15
(lp4354
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4355
S'space'
p4356
asg96
I8
sS'.thisIndex'
p4357
I8
sa(dp4358
g16
(lp4359
S'k'
asg18
S'N'
sS'.thisRepN'
p4360
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4361
I13
sS'.thisN'
p4362
I538
sg25
S'Y'
sg15
(lp4363
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4364
I2
sa(dp4365
g16
(lp4366
S'k'
asg18
S'N'
sS'.thisRepN'
p4367
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4368
I14
sS'.thisN'
p4369
I539
sg25
S'Y'
sg15
(lp4370
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4371
I0
sa(dp4372
g16
(lp4373
S'd'
asg18
S'Y'
sS'.thisRepN'
p4374
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4375
I0
sS'.thisN'
p4376
I540
sg25
S'Y'
sg15
(lp4377
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4378
S'space'
p4379
asg96
I14
sS'.thisIndex'
p4380
I14
sa(dp4381
g16
(lp4382
S'k'
asg18
S'N'
sS'.thisRepN'
p4383
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4384
I1
sS'.thisN'
p4385
I541
sg25
S'Y'
sg15
(lp4386
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I12
sS'.thisIndex'
p4387
I12
sa(dp4388
g16
(lp4389
S'k'
asg18
S'N'
sS'.thisRepN'
p4390
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4391
I2
sS'.thisN'
p4392
I542
sg25
S'Y'
sg15
(lp4393
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4394
I7
sa(dp4395
g16
(lp4396
S'k'
asg18
S'Y'
sS'.thisRepN'
p4397
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4398
I3
sS'.thisN'
p4399
I543
sg25
S'Y'
sg15
(lp4400
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4401
S'space'
p4402
asg96
I3
sS'.thisIndex'
p4403
I3
sa(dp4404
g16
(lp4405
S'd'
asg18
S'Y'
sS'.thisRepN'
p4406
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4407
I4
sS'.thisN'
p4408
I544
sg25
S'Y'
sg15
(lp4409
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4410
S'space'
p4411
asg96
I1
sS'.thisIndex'
p4412
I1
sa(dp4413
g16
(lp4414
S'd'
asg18
S'N'
sS'.thisRepN'
p4415
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4416
I5
sS'.thisN'
p4417
I545
sg25
S'Y'
sg15
(lp4418
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4419
I1
sa(dp4420
g16
(lp4421
S'd'
asg18
S'N'
sS'.thisRepN'
p4422
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4423
I6
sS'.thisN'
p4424
I546
sg25
S'Y'
sg15
(lp4425
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4426
I1
sa(dp4427
g16
(lp4428
S'k'
asg18
S'N'
sS'.thisRepN'
p4429
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4430
I7
sS'.thisN'
p4431
I547
sg25
S'Y'
sg15
(lp4432
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I5
sS'.thisIndex'
p4433
I5
sa(dp4434
g16
(lp4435
S'k'
asg18
S'N'
sS'.thisRepN'
p4436
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4437
I8
sS'.thisN'
p4438
I548
sg25
S'Y'
sg15
(lp4439
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4440
I0
sa(dp4441
g16
(lp4442
S'k'
asg18
S'N'
sg22
I45
sg26
S'Y'
sS'.thisN'
p4443
I549
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4444
I9
sS'.thisRepN'
p4445
I36
sg21
I45
sg25
S'Y'
sg23
I23
sg15
(lp4446
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4447
I10
sa(dp4448
g16
(lp4449
S'd'
asS'.thisIndex'
p4450
I11
sS'.thisRepN'
p4451
I36
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4452
I10
sS'.thisN'
p4453
I550
sg25
S'Y'
sg15
(lp4454
S'k'
asg17
S'Y'
sg14
I12
sg96
I11
sa(dp4455
g16
(lp4456
S'k'
asS'.thisIndex'
p4457
I2
sS'.thisRepN'
p4458
I36
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4459
I11
sS'.thisN'
p4460
I551
sg25
S'Y'
sg15
(lp4461
S'd'
asg17
S'Y'
sg14
I12
sg96
I2
sa(dp4462
g16
(lp4463
S'd'
asg18
S'Y'
sS'.thisRepN'
p4464
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4465
I12
sS'.thisN'
p4466
I552
sg25
S'Y'
sg15
(lp4467
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4468
S'space'
p4469
asg96
I1
sS'.thisIndex'
p4470
I1
sa(dp4471
g16
(lp4472
S'k'
asg18
S'N'
sS'.thisRepN'
p4473
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4474
I13
sS'.thisN'
p4475
I553
sg25
S'Y'
sg15
(lp4476
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I5
sS'.thisIndex'
p4477
I5
sa(dp4478
g16
(lp4479
S'k'
asg18
S'Y'
sS'.thisRepN'
p4480
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4481
I14
sS'.thisN'
p4482
I554
sg25
S'Y'
sg15
(lp4483
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4484
S'space'
p4485
asg96
I9
sS'.thisIndex'
p4486
I9
sa(dp4487
g16
(lp4488
S'k'
asg18
S'N'
sS'.thisRepN'
p4489
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4490
I0
sS'.thisN'
p4491
I555
sg25
S'Y'
sg15
(lp4492
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4493
I2
sa(dp4494
g16
(lp4495
S'd'
asg18
S'Y'
sS'.thisRepN'
p4496
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4497
I1
sS'.thisN'
p4498
I556
sg25
S'Y'
sg15
(lp4499
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4500
S'space'
p4501
asg96
I14
sS'.thisIndex'
p4502
I14
sa(dp4503
g16
(lp4504
S'k'
asg18
S'Y'
sS'.thisRepN'
p4505
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4506
I2
sS'.thisN'
p4507
I557
sg25
S'Y'
sg15
(lp4508
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4509
S'space'
p4510
asg96
I5
sS'.thisIndex'
p4511
I5
sa(dp4512
g16
(lp4513
S'k'
asg18
S'Y'
sS'.thisRepN'
p4514
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4515
I3
sS'.thisN'
p4516
I558
sg25
S'Y'
sg15
(lp4517
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4518
S'space'
p4519
asg96
I6
sS'.thisIndex'
p4520
I6
sa(dp4521
g16
(lp4522
S'k'
asg18
S'N'
sS'.thisRepN'
p4523
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4524
I4
sS'.thisN'
p4525
I559
sg25
S'Y'
sg15
(lp4526
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I1
sS'.thisIndex'
p4527
I1
sa(dp4528
g16
(lp4529
S'd'
asg18
S'N'
sS'.thisRepN'
p4530
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4531
I5
sS'.thisN'
p4532
I560
sg25
S'Y'
sg15
(lp4533
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I1
sS'.thisIndex'
p4534
I1
sa(dp4535
g16
(lp4536
S'k'
asg18
S'N'
sS'.thisRepN'
p4537
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4538
I6
sS'.thisN'
p4539
I561
sg25
S'Y'
sg15
(lp4540
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4541
I7
sa(dp4542
g16
(lp4543
S'd'
asg18
S'Y'
sS'.thisRepN'
p4544
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4545
I7
sS'.thisN'
p4546
I562
sg25
S'Y'
sg15
(lp4547
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4548
S'space'
p4549
asg96
I11
sS'.thisIndex'
p4550
I11
sa(dp4551
g16
(lp4552
S'k'
asg18
S'N'
sS'.thisRepN'
p4553
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4554
I8
sS'.thisN'
p4555
I563
sg25
S'Y'
sg15
(lp4556
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4557
I4
sa(dp4558
g16
(lp4559
S'd'
asg18
S'N'
sS'.thisRepN'
p4560
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4561
I9
sS'.thisN'
p4562
I564
sg25
S'Y'
sg15
(lp4563
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4564
I9
sa(dp4565
g16
(lp4566
S'd'
asg18
S'N'
sS'.thisRepN'
p4567
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4568
I10
sS'.thisN'
p4569
I565
sg25
S'Y'
sg15
(lp4570
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4571
I4
sa(dp4572
g16
(lp4573
S'k'
asg18
S'N'
sS'.thisRepN'
p4574
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4575
I11
sS'.thisN'
p4576
I566
sg25
S'Y'
sg15
(lp4577
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I8
sS'.thisIndex'
p4578
I8
sa(dp4579
g16
(lp4580
S'k'
asg18
S'N'
sS'.thisRepN'
p4581
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4582
I12
sS'.thisN'
p4583
I567
sg25
S'Y'
sg15
(lp4584
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I12
sS'.thisIndex'
p4585
I12
sa(dp4586
g16
(lp4587
S'd'
asg18
S'N'
sS'.thisRepN'
p4588
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4589
I13
sS'.thisN'
p4590
I568
sg25
S'Y'
sg15
(lp4591
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4592
I9
sa(dp4593
g16
(lp4594
S'd'
asg18
S'N'
sS'.thisRepN'
p4595
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4596
I14
sS'.thisN'
p4597
I569
sg25
S'Y'
sg15
(lp4598
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4599
I2
sa(dp4600
g16
(lp4601
S'd'
asg18
S'N'
sS'.thisRepN'
p4602
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4603
I0
sS'.thisN'
p4604
I570
sg25
S'Y'
sg15
(lp4605
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I13
sS'.thisIndex'
p4606
I13
sa(dp4607
g16
(lp4608
S'k'
asg18
S'Y'
sS'.thisRepN'
p4609
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4610
I1
sS'.thisN'
p4611
I571
sg25
S'Y'
sg15
(lp4612
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4613
S'space'
p4614
asg96
I11
sS'.thisIndex'
p4615
I11
sa(dp4616
g16
(lp4617
S'k'
asg18
S'N'
sS'.thisRepN'
p4618
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4619
I2
sS'.thisN'
p4620
I572
sg25
S'Y'
sg15
(lp4621
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4622
I7
sa(dp4623
g16
(lp4624
S'k'
asg18
S'N'
sS'.thisRepN'
p4625
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4626
I3
sS'.thisN'
p4627
I573
sg25
S'Y'
sg15
(lp4628
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4629
I0
sa(dp4630
g16
(lp4631
S'd'
asg18
S'N'
sS'.thisRepN'
p4632
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4633
I4
sS'.thisN'
p4634
I574
sg25
S'Y'
sg15
(lp4635
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I11
sS'.thisIndex'
p4636
I11
sa(dp4637
g16
(lp4638
S'd'
asg18
S'Y'
sS'.thisRepN'
p4639
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4640
I5
sS'.thisN'
p4641
I575
sg25
S'Y'
sg15
(lp4642
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4643
S'space'
p4644
asg96
I1
sS'.thisIndex'
p4645
I1
sa(dp4646
g16
(lp4647
S'k'
asg18
S'Y'
sS'.thisRepN'
p4648
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4649
I6
sS'.thisN'
p4650
I576
sg25
S'Y'
sg15
(lp4651
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4652
S'space'
p4653
asg96
I8
sS'.thisIndex'
p4654
I8
sa(dp4655
g16
(lp4656
S'k'
asg18
S'Y'
sS'.thisRepN'
p4657
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4658
I7
sS'.thisN'
p4659
I577
sg25
S'Y'
sg15
(lp4660
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4661
S'space'
p4662
asg96
I12
sS'.thisIndex'
p4663
I12
sa(dp4664
g16
(lp4665
S'd'
asg18
S'N'
sS'.thisRepN'
p4666
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4667
I8
sS'.thisN'
p4668
I578
sg25
S'Y'
sg15
(lp4669
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4670
I3
sa(dp4671
g16
(lp4672
S'd'
asg18
S'N'
sS'.thisRepN'
p4673
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4674
I9
sS'.thisN'
p4675
I579
sg25
S'Y'
sg15
(lp4676
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I13
sS'.thisIndex'
p4677
I13
sa(dp4678
g16
(lp4679
S'd'
asg18
S'N'
sS'.thisRepN'
p4680
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4681
I10
sS'.thisN'
p4682
I580
sg25
S'Y'
sg15
(lp4683
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I12
sS'.thisIndex'
p4684
I12
sa(dp4685
g16
(lp4686
S'k'
asg18
S'Y'
sS'.thisRepN'
p4687
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4688
I11
sS'.thisN'
p4689
I581
sg25
S'Y'
sg15
(lp4690
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4691
S'space'
p4692
asg96
I7
sS'.thisIndex'
p4693
I7
sa(dp4694
g16
(lp4695
S'd'
asg18
S'Y'
sS'.thisRepN'
p4696
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4697
I12
sS'.thisN'
p4698
I582
sg25
S'Y'
sg15
(lp4699
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4700
S'space'
p4701
asg96
I4
sS'.thisIndex'
p4702
I4
sa(dp4703
g16
(lp4704
S'd'
asg18
S'Y'
sS'.thisRepN'
p4705
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4706
I13
sS'.thisN'
p4707
I583
sg25
S'Y'
sg15
(lp4708
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4709
S'space'
p4710
asg96
I5
sS'.thisIndex'
p4711
I5
sa(dp4712
g16
(lp4713
S'k'
asg18
S'Y'
sS'.thisRepN'
p4714
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4715
I14
sS'.thisN'
p4716
I584
sg25
S'Y'
sg15
(lp4717
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4718
S'space'
p4719
asg96
I2
sS'.thisIndex'
p4720
I2
sa(dp4721
g16
(lp4722
S'k'
asg18
S'N'
sS'.thisRepN'
p4723
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4724
I0
sS'.thisN'
p4725
I585
sg25
S'Y'
sg15
(lp4726
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I11
sS'.thisIndex'
p4727
I11
sa(dp4728
g16
(lp4729
S'k'
asg18
S'N'
sS'.thisRepN'
p4730
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4731
I1
sS'.thisN'
p4732
I586
sg25
S'Y'
sg15
(lp4733
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I13
sS'.thisIndex'
p4734
I13
sa(dp4735
g16
(lp4736
S'd'
asg18
S'N'
sS'.thisRepN'
p4737
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4738
I2
sS'.thisN'
p4739
I587
sg25
S'Y'
sg15
(lp4740
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4741
I9
sa(dp4742
g16
(lp4743
S'k'
asg18
S'Y'
sS'.thisRepN'
p4744
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4745
I3
sS'.thisN'
p4746
I588
sg25
S'Y'
sg15
(lp4747
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4748
S'space'
p4749
asg96
I3
sS'.thisIndex'
p4750
I3
sa(dp4751
g16
(lp4752
S'd'
asg18
S'Y'
sS'.thisRepN'
p4753
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4754
I4
sS'.thisN'
p4755
I589
sg25
S'Y'
sg15
(lp4756
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4757
S'space'
p4758
asg96
I13
sS'.thisIndex'
p4759
I13
sa(dp4760
g16
(lp4761
S'd'
asg18
S'Y'
sS'.thisRepN'
p4762
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4763
I5
sS'.thisN'
p4764
I590
sg25
S'Y'
sg15
(lp4765
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4766
S'space'
p4767
asg96
I12
sS'.thisIndex'
p4768
I12
sa(dp4769
g16
(lp4770
S'd'
asg18
S'Y'
sS'.thisRepN'
p4771
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4772
I6
sS'.thisN'
p4773
I591
sg25
S'Y'
sg15
(lp4774
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4775
S'space'
p4776
asg96
I5
sS'.thisIndex'
p4777
I5
sa(dp4778
g16
(lp4779
S'd'
asg18
S'Y'
sS'.thisRepN'
p4780
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4781
I7
sS'.thisN'
p4782
I592
sg25
S'Y'
sg15
(lp4783
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4784
S'space'
p4785
asg96
I9
sS'.thisIndex'
p4786
I9
sa(dp4787
g16
(lp4788
S'd'
asg18
S'N'
sS'.thisRepN'
p4789
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4790
I8
sS'.thisN'
p4791
I593
sg25
S'Y'
sg15
(lp4792
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I14
sS'.thisIndex'
p4793
I14
sa(dp4794
g16
(lp4795
S'd'
asg18
S'Y'
sS'.thisRepN'
p4796
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4797
I9
sS'.thisN'
p4798
I594
sg25
S'Y'
sg15
(lp4799
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4800
S'space'
p4801
asg96
I2
sS'.thisIndex'
p4802
I2
sa(dp4803
g16
(lp4804
S'd'
asg18
S'N'
sS'.thisRepN'
p4805
I39
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4806
I10
sS'.thisN'
p4807
I595
sg25
S'Y'
sg15
(lp4808
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4809
S'space'
p4810
asg96
I13
sS'.thisIndex'
p4811
I13
sa(dp4812
g16
(lp4813
S'd'
asg18
S'Y'
sS'.thisRepN'
p4814
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4815
I11
sS'.thisN'
p4816
I596
sg25
S'Y'
sg15
(lp4817
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4818
S'space'
p4819
asg96
I6
sS'.thisIndex'
p4820
I6
sa(dp4821
g16
(lp4822
S'k'
asg18
S'Y'
sS'.thisRepN'
p4823
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4824
I12
sS'.thisN'
p4825
I597
sg25
S'Y'
sg15
(lp4826
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4827
S'space'
p4828
asg96
I14
sS'.thisIndex'
p4829
I14
sa(dp4830
g16
(lp4831
S'k'
asg18
S'N'
sS'.thisRepN'
p4832
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4833
I13
sS'.thisN'
p4834
I598
sg25
S'Y'
sg15
(lp4835
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I11
sS'.thisIndex'
p4836
I11
sa(dp4837
g16
(lp4838
S'k'
asg18
S'N'
sg22
I47
sg26
S'Y'
sS'.thisN'
p4839
I599
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4840
I14
sS'.thisRepN'
p4841
I39
sg21
I50
sg25
S'Y'
sg23
I22
sg15
(lp4842
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I8
sS'.thisIndex'
p4843
I8
sasS'loops'
p4844
(lp4845
g1
(g36
g3
NtRp4846
(dp4847
g39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4848
sg41
(lp4849
sg42
I74824240
sg10
S''
sg6
g43
sg44
I1
sg27
I01
sg28
Nsg45
g1
(g46
g47
(dp4850
g49
g50
(g51
g52
g53
S'b'
tRp4851
(I1
(I600
I1
tg56
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg57
g50
(g51
g52
g53
S'b'
tRp4852
(I1
(I600
I1
tg56
I00
S'\x00\x80\tD\x00\x00\xd8B\x00\x80\xb8C\x00\x80\x04D\x00\x80\xe1C\x00\x00\x8aC\x00\x00\x97C\x00\x80\xb0C\x00\x00PA\x00\x00\xb0A\x00\x00\xe8B\x00\x00\x90A\x00\x00\xe3C\x00\x00\x98A\x00\x00OC\x00\x00\xdcB\x00\x00\xc6C\x00\x00dB\x00\x00@C\x00\x00<B\x00\x00\x05C\x00\x00\x03D\x00\x80\x9fC\x00@\x08D\x00\x80\x10D\x00\x00\xa8B\x00\x00\x15D\x00\xc0\x04D\x00\x00\\C\x00\x80\x8dC\x00\x00\x0cD\x00\x00PB\x00\x80\xebC\x00\x80\xdfC\x00\xc0\x11D\x00\x00(C\x00\x00tB\x00@\x05D\x00\x80\xadC\x00\x004C\x00\x00\x83C\x00\x00DC\x00\x00\xe0C\x00\x80\x8eC\x00\x00dC\x00\x00\x91C\x00\x00\xedC\x00\x00\xdfC\x00\x00\xaaC\x00\x80\x14D\x00\x80\x03D\x00\x00[C\x00\x80\xa4C\x00\x00\x14D\x00\x00\xcaC\x00\x00\x08C\x00\x00"C\x00\x00\xe4B\x00\x00`A\x00\x80\x08D\x00\x00\xd1C\x00\x80\x0cD\x00\x00\x88B\x00\x00\xa8C\x00\x00\xeaC\x00\x00\x0eD\x00\x00fC\x00@\x04D\x00\x00\xe4C\x00\x00\'C\x00\x80\x89C\x00\x00eC\x00\x00TC\x00\x00\xc6B\x00\x00\xb8B\x00\x80\xd7C\x00\x00KC\x00\x00\xffC\x00\x00\x06C\x00\x000A\x00\x80\xbaC\x00\x80\xa1C\x00@\x0eD\x00\x80\xe9C\x00\x80\xfaC\x00\x00\xf0A\x00\xc0\x01D\x00\x80\x81C\x00\x00\xf8C\x00\x00\x02D\x00\x00\x10B\x00\x00AC\x00\x80\xd2C\x00\x00\xe6B\x00\x00\x80A\x00\x00\xbeB\x00\x80\x8cC\x00\x00\xaeC\x00\x00\xe8C\x00\x00\x87C\x00\x00\xdaB\x00\x00\xd4C\x00\x00\x93C\x00\x00|C\x00\x80\x99C\x00\x00\x9eC\x00\x00\xbcC\x00\x00\xa0C\x00\x00\xcbC\x00\x007C\x00\x00\xeaB\x00\x80\xbdC\x00\x00\x05D\x00\x00\xb8A\x00\x00\xf9C\x00\x00^C\x00\x80\xbeC\x00\x00yC\x00\x00\xd0C\x00\x00\x00A\x00\x80\xb7C\x00\x00\xfcB\x00\x00\xf4B\x00\x00\xcdC\x00\x00\xb5C\x00\x00\nC\x00\x00PC\x00\x80\xf5C\x00\x00lB\x00\x00\x00C\x00\x80\xe4C\x00\x00\x0eC\x00\x80\xf6C\x00\x00UC\x00\x00\xfaB\x00\x00\xd2C\x00\x80\xf0C\x00\x00BC\x00\x80\x0fD\x00\x00\x15C\x00\x80\x0eD\x00\x00\x0cB\x00\x00\xa6C\x00\x00\xafC\x00\x00\x03C\x00\x00uC\x00\x00\x9dC\x00\x00$C\x00\x80\xc9C\x00\x80\xd6C\x00@\x14D\x00@\x02D\x00\x80\xa2C\x00\x00\xc0@\x00\x80\xd1C\x00\x00\xf3C\x00\x00\xe9C\x00\x80\xf7C\x00\x00&C\x00\x00\rD\x00\x00@B\x00\x00\xd6C\x00\x00\x1fC\x00\xc0\x14D\x00\x00\x04B\x00\x00\xadC\x00@\rD\x00\x00\x9cC\x00\x80\xd9C\x00\x00\xa5C\x00\x00\x08D\x00\x80\xf4C\x00\x00/C\x00\x00\x8fC\x00\x00\xc4C\x00\x00\x8bC\x00\x00\nD\x00\x00\xf6C\x00\x00=C\x00\x00GC\x00\x00\x82B\x00\x00\xccB\x00\x00\x99C\x00\x00\xf8A\x00\x80\xabC\x00\x00>C\x00\xc0\x10D\x00\x00\x19C\x00\x80\x97C\x00\x00;C\x00\x00YC\x00\x80\xaaC\x00\x00RC\x00\x80\xddC\x00\x00\xb4B\x00\x00\x8cB\x00\x00\xd0B\x00\x80\xdbC\x00\x00\x92B\x00\x00 A\x00\x00]C\x00\x00\x0bD\x00\x00\rC\x00\x003C\x00\x00\xd9C\x00\x00?C\x00\x00\x0fC\x00\x00\xd4B\x00\x00\xd5C\x00\x80\x13D\x00\x80\x01D\x00\x00\xccC\x00\x00\xbaB\x00\xc0\x00D\x00\x00\xfcC\x00@\x00D\x00\x00QC\x00\x00FC\x00\x00\x88A\x00\x00\x00\x00\x00\x80\xf3C\x00\x80\xf2C\x00\x00\xceC\x00\x80\x11D\x00@\x13D\x00\x00pC\x00\x00\xb6C\x00\x80\x90C\x00\x00\x1cB\x00\x00,B\x00\x00`C\x00\x80\xc8C\x00\x00\x10A\x00\x00zC\x00\x004B\x00\x80\xc3C\x00\x00\xa0@\x00\xc0\x13D\x00\x00\x11D\x00\x00\xdcC\x00\xc0\x0fD\x00\x80\x02D\x00\x00\xdeB\x00\x00\x14B\x00\x00\xd8A\x00\x80\x88C\x00\x80\xafC\x00\x80\xe8C\x00\x80\xb5C\x00\x00\xb6B\x00\x00\x8eB\x00\x80\xcfC\x00\x00\x14C\x00\x80\xfeC\x00\x00\x12C\x00\x80\xe7C\x00\x00\xa1C\x00\x00\xd7C\x00\x00\xebC\x00\x80\x98C\x00\x00\x80B\x00\x00\xc9C\x00\x00IC\x00\x00\x00B\x00\x00(B\x00\x00\x08B\x00\x00xC\x00\x00\xd3C\x00\x80\xefC\x00\x80\x80C\x00\x80\xdcC\x00\x00tC\x00\x00gC\x00\x00\x95C\x00\x00XC\x00\x00\xc8B\x00\x00hB\x00\x00\xbaC\x00\x80\x96C\x00\x80\x9aC\x00\x00\xfaC\x00\x00NC\x00\x00\x07D\x00\x00\x0bC\x00\x00 B\x00\x80\xc0C\x00\x00\xb1C\x00\xc0\x12D\x00\x00:C\x00\x80\x9cC\x00@\x01D\x00\x00\x94C\x00\x00\xabC\x00\x00HC\x00\x00\xa3C\x00\x00\xe5C\x00\x002C\x00\x00\x86C\x00\x00\x13C\x00\x80\xdeC\x00\x00wC\x00@\x12D\x00\x00JC\x00\x00\x82C\x00\x00\xc2C\x00\x00\x94B\x00\x00\x86B\x00\x00\x8aB\x00\x000B\x00\x80\xa0C\x00\x80\xf9C\x00\x80\xd4C\x00\x00%C\x00\x00\xc0A\x00\x80\x84C\x00\x80\xfbC\x00\x00}C\x00\x00\xe2B\x00\x00pB\x00\x00\xc1C\x00\x00\x16C\x00\x00vC\x00\x80\xc5C\x00\x80\rD\x00\x00LC\x00\x00\xbfC\x00\x00\xc8A\x00\x00\\B\x00\x80\xcbC\x00@\x15D\x00\x00\xa2B\x00\x005C\x00\x00\xa7C\x00\x80\xc4C\x00\x00\xb3C\x00@\x10D\x00\x00\xb0C\x00\x00\x1bC\x00\x00\xf7C\x00\x80\xa3C\x00\x80\x85C\x00\x80\xc2C\x00\x00hC\x00\x00\xb0B\x00@\x11D\x00\x00DB\x00\x80\xceC\x00\x00\xc5C\x00\xc0\x05D\x00\x000C\x00\x00\xd6B\x00\x00\xf6B\x00\x00\xf1C\x00\x00\x92C\x00\x00\x1aC\x00\x80\x07D\x00\x80\x8aC\x00\x00\x01D\x00\x00~C\x00\x00\xbcB\x00\x00\x11C\x00\x00\x9aB\x00\x00WC\x00\x00<C\x00\x80\x92C\x00\x00\xcaB\x00\x00SC\x00\x00\x7fC\x00\x80\xa8C\x00\x00@A\x00@\tD\x00\x00\x13D\x00\x00\xe6C\x00\x80\xb6C\x00\x80\x83C\x00\x00)C\x00\x00\x01C\x00\xc0\x03D\x00\x80\xa6C\x00\x00\xb8C\x00\x00\x02C\x00\x00@@\x00\x00\xbdC\x00\x00\xf2C\x00\x80\xeaC\x00\x00\xbeC\x00\x80\x91C\x00\x80\x15D\x00\x00\xceB\x00\x00\xe2C\x00\x00\x80C\x00\x00HB\x00\x001C\x00\x80\xa5C\x00\x80\xaeC\x00\x80\xeeC\x00\x00\x9eB\x00\x00\xecC\x00\x00\x12D\x00\x00\xa0B\x00\x00\xeeB\x00\x00CC\x00\x80\x9bC\x00\x00\xb7C\x00@\x06D\x00\x80\xccC\x00\x00\xfeC\x00\x00\x8eC\x00\x80\xf1C\x00\x00\xa4C\x00\xc0\rD\x00\x00\xe8A\x00\x00$B\x00\x00\xa6B\x00@\x0bD\x00\x00\x06D\x00\x00nC\x00\xc0\x0bD\x00\x00\xaeB\x00\x00\x9cB\x00\x00\xe0B\x00\x00\x8cC\x00\x00\x80@\x00\x00\xc0C\x00\x00\xfbC\x00\x80\xc1C\x00\x00cC\x00\x00\xeeC\x00\x00sC\x00\x00\x10C\x00\x80\xd5C\x00\x00\xc3C\x00\x80\xd8C\x00\x00\xacB\x00\x00\xfdC\x00\x80\xc7C\x00\x00\xd0A\x00\x00\x96B\x00\x80\x8fC\x00\x80\x00D\x00\x00\xacC\x00\x80\xb1C\x00\x80\xcaC\x00\xc0\x02D\x00\x80\xb4C\x00\x00!C\x00\x00-C\x00\x80\xb3C\x00@\x0cD\x00\x00\x98C\x00\x80\nD\x00\x00bC\x00\x80\x87C\x00\x00\xcfC\x00\x008B\x00\x80\x06D\x00\x80\x0bD\x00\x00\xb2B\x00\x00\xa9C\x00\x00kC\x00\x00\x00@\x00\x00+C\x00\x00\x90C\x00\x00\xefC\x00\x80\x05D\x00\x80\x95C\x00\x00mC\x00\x80\xfdC\x00\x00\xaaB\x00\x00VC\x00\x00TB\x00\x00\x89C\x00\x00\xdaC\x00\x80\xe5C\x00\x00\x04D\x00\x80\xb2C\x00\x00LB\x00\x00\xf5C\x00\x00\x1eC\x00\x00\xf0C\x00\x00\xc2B\x00\x80\xfcC\x00\x00qC\x00\xc0\x15D\x00\x00jC\x00\x00\xdbC\x00\x80\x94C\x00\x00\xc7C\x00\x80\xcdC\x00\x00xB\x00\x00{C\x00\x00\xb9C\x00@\x03D\x00\x00\x10D\x00\x00\xf0B\x00\x00MC\x00\x80\xacC\x00\x80\xbcC\x00\x00\xc0B\x00\x00\x0cC\x00\x00rC\x00\x00 C\x00\x80\x12D\x00\x00\x18B\x00\x80\x93C\x00\x00XB\x00\x80\x86C\x00\x00\xa0A\x00\x80\xd3C\x00\x009C\x00\x00\xa8A\x00\x00\xa4B\x00\xc0\x07D\x00\x00\xf4C\x00\x00\xf8B\x00\x80\xc6C\x00\xc0\tD\x00\x00*C\x00\x00EC\x00\x00\xbbC\x00\x00aC\x00\x00\xddC\x00\x00\x81C\x00\x00\xc8C\x00\x00\x9aC\x00\x00|B\x00\x00_C\x00\x00\x9bC\x00\x00\x17C\x00\x80\x8bC\x00\x80\xd0C\x00\x00\tD\x00\x80\xf8C\x00\x00#C\x00\x00,C\x00\x00\xe0A\x00\x00ZC\x00\x80\xe6C\x00\x00\x96C\x00@\x07D\x00\x00\x04C\x00\x00\x9fC\x00\xc0\x0eD\x00\x00\xb2C\x00\x80\xffC\x00\x00pA\x00\x00\x18C\x00\x00\xe1C\x00@\x0fD\x00\x00\x88C\x00\x008C\x00\x80\xecC\x00\x00\x84C\x00@\nD\x00\x80\xa9C\x00\x80\x9dC\x00\x80\xb9C\x00\x006C\x00\x00.C\x00\x00\x1dC\x00\x00\xe0@\x00\x80\x9eC\x00\x80\x82C\x00\x00\x07C\x00\x00\xdeC\x00\x80\xe3C\x00\x00\x90B\x00\xc0\nD\x00\x00\xd8C\x00\x00\x0fD\x00\x80\xa7C\x00\x80\xe0C\x00\x00\x1cC\x00\x00\xf2B\x00\x00\xe7C\x00\x00\x00D\x00\x00\x84B\x00\x00lC\x00\x80\xbbC\x00\x00\xa2C\x00\xc0\x08D\x00\x00\x98B\x00\x00\tC\x00\x80\xdaC\x00\x80\xe2C\x00\x00\xd2B\x00\x00`B\x00\x00\x80?\x00\x00\xc4B\x00\x80\xedC\x00\x00iC\x00\x00oC\x00\xc0\x0cD\x00\x00\xb4C\x00\x00\x8dC\x00\x00\x85C\x00\xc0\x06D\x00\x00\xecB\x00\x80\xbfC\x00\x00\xfeB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4853
(dp4854
g61
(dp4855
g49
I01
sg57
I01
ssg63
g4846
sg64
(lp4856
g49
ag57
asg66
(lp4857
I600
aI1
asbsg68
S'random'
p4858
sg70
g71
(g52
(I0
tS'b'
tRp4859
(I1
(I600
I1
tg55
(S'i4'
I0
I1
tRp4860
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\xdb\x00\x00\x00K\x02\x00\x00\xcc\x01\x00\x00}\x01\x00\x00\xa6\x01\x00\x00\xec\x00\x00\x00\x99\x00\x00\x000\x02\x00\x00w\x00\x00\x00\xe8\x00\x00\x00\xc7\x00\x00\x00O\x00\x00\x00q\x01\x00\x00\x08\x00\x00\x00:\x00\x00\x00!\x02\x00\x00^\x00\x00\x00\xda\x00\x00\x00\x0b\x00\x00\x00\r\x00\x00\x00\xfb\x01\x00\x00\xfe\x01\x00\x00\t\x00\x00\x00q\x00\x00\x009\x01\x00\x00F\x01\x00\x00\xb4\x01\x00\x00\xf4\x00\x00\x00\x17\x02\x00\x00\x9b\x01\x00\x00U\x00\x00\x00\xb7\x00\x00\x00\x07\x01\x00\x00\xa4\x00\x00\x00\t\x01\x00\x00\x8d\x00\x00\x00Z\x00\x00\x00\xf3\x00\x00\x00\xf7\x01\x00\x00\xe4\x00\x00\x00\x1c\x01\x00\x00\x9c\x01\x00\x00\x08\x01\x00\x00\xe5\x00\x00\x004\x01\x00\x00\xea\x00\x00\x00\xc6\x01\x00\x00\x13\x00\x00\x00\xa0\x00\x00\x00Y\x01\x00\x00\x87\x01\x00\x00\xdc\x01\x00\x00\x1f\x00\x00\x00\xd6\x01\x00\x00\xf9\x01\x00\x00G\x01\x00\x00J\x02\x00\x00\x11\x00\x00\x00\x14\x01\x00\x00\x80\x00\x00\x00>\x01\x00\x00$\x00\x00\x00\xe9\x01\x00\x00\r\x02\x00\x00\x04\x01\x00\x00\xb4\x00\x00\x00@\x02\x00\x002\x01\x00\x00>\x00\x00\x003\x01\x00\x00\xc3\x00\x00\x00\xfa\x00\x00\x006\x02\x00\x00\xc6\x00\x00\x001\x01\x00\x00\xb5\x01\x00\x00E\x02\x00\x00i\x01\x00\x00\xa3\x01\x00\x00\x8c\x01\x00\x00\x8f\x01\x00\x00J\x01\x00\x00\xff\x01\x00\x00\x9d\x01\x00\x00\x19\x00\x00\x00\xd4\x01\x00\x00\xb1\x01\x00\x00\xa2\x01\x00\x00W\x01\x00\x00\xc9\x01\x00\x00\xc2\x00\x00\x00\xf9\x00\x00\x00J\x00\x00\x00\xd4\x00\x00\x00g\x01\x00\x00_\x00\x00\x00\xf2\x01\x00\x00\xe0\x01\x00\x00L\x02\x00\x00I\x00\x00\x00\x13\x01\x00\x00m\x01\x00\x00\xb5\x00\x00\x00\x84\x01\x00\x00\xc4\x00\x00\x00I\x02\x00\x00\xcf\x00\x00\x00^\x01\x00\x00\x01\x00\x00\x00d\x00\x00\x00\x0f\x00\x00\x00\xf2\x00\x00\x00\xa4\x01\x00\x00=\x01\x00\x009\x00\x00\x00]\x00\x00\x00\n\x00\x00\x00n\x00\x00\x00U\x02\x00\x00\x90\x01\x00\x00\xee\x01\x00\x00=\x02\x00\x00z\x00\x00\x00_\x01\x00\x00\x02\x02\x00\x00\x86\x00\x00\x00y\x00\x00\x00W\x02\x00\x00\x81\x00\x00\x00x\x01\x00\x00|\x01\x00\x00\x90\x00\x00\x00\x1c\x02\x00\x00\x14\x00\x00\x00N\x00\x00\x003\x02\x00\x007\x00\x00\x00F\x02\x00\x00}\x00\x00\x00\x1b\x01\x00\x00\xf3\x01\x00\x00\xca\x00\x00\x00\x83\x00\x00\x00\xce\x00\x00\x00\xad\x01\x00\x00h\x01\x00\x00\xfe\x00\x00\x00*\x01\x00\x00\xfc\x00\x00\x00\x8b\x00\x00\x00@\x01\x00\x00\x10\x02\x00\x00"\x02\x00\x00\xbb\x00\x00\x00b\x01\x00\x00Q\x01\x00\x00<\x02\x00\x00/\x02\x00\x00\xde\x01\x00\x00\xa2\x00\x00\x00\xf5\x01\x00\x00\xbd\x01\x00\x008\x00\x00\x00\x15\x02\x00\x00\x93\x00\x00\x008\x01\x00\x00\x9e\x00\x00\x00E\x00\x00\x00#\x00\x00\x00w\x01\x00\x00\x05\x02\x00\x00\xcd\x01\x00\x00\x16\x02\x00\x00\xbe\x01\x00\x00.\x02\x00\x00\xac\x00\x00\x00]\x01\x00\x00\x88\x01\x00\x00(\x01\x00\x00\xcb\x00\x00\x00\'\x00\x00\x00K\x01\x00\x00-\x02\x00\x00m\x00\x00\x00&\x02\x00\x00\xfd\x01\x00\x00 \x01\x00\x00\xbd\x00\x00\x00k\x01\x00\x00\xb2\x00\x00\x00\xb9\x00\x00\x00\xcd\x00\x00\x00\x12\x00\x00\x00[\x00\x00\x00\x89\x00\x00\x00\x91\x01\x00\x00)\x00\x00\x00\x06\x02\x00\x00\xd9\x00\x00\x00\xb3\x00\x00\x00%\x01\x00\x00\x06\x01\x00\x00.\x01\x00\x00L\x00\x00\x00D\x01\x00\x00\xef\x01\x00\x00\x19\x01\x00\x00\x0e\x00\x00\x00~\x00\x00\x00\xd8\x00\x00\x00\xc0\x00\x00\x00n\x01\x00\x00H\x00\x00\x00\x85\x00\x00\x00\xd5\x01\x00\x00j\x01\x00\x00\x12\x01\x00\x00\xbe\x00\x00\x00\x18\x02\x00\x003\x00\x00\x00\x1c\x00\x00\x00\xc8\x00\x00\x00s\x00\x00\x00\x0e\x02\x00\x00\xe6\x00\x00\x00\x08\x02\x00\x00\xc3\x01\x00\x00\xaa\x01\x00\x00,\x00\x00\x00G\x00\x00\x00B\x00\x00\x00\x10\x01\x00\x00V\x01\x00\x00N\x02\x00\x00\xe4\x01\x00\x00\xcb\x01\x00\x00A\x02\x00\x00\xd2\x01\x00\x00\xa0\x01\x00\x00O\x02\x00\x00\xe1\x00\x00\x00\xe2\x01\x00\x00\xf4\x01\x00\x00\xac\x01\x00\x00\x0f\x01\x00\x00\x91\x00\x00\x00A\x01\x00\x00,\x01\x00\x00\n\x01\x00\x00u\x00\x00\x00\xe9\x00\x00\x00\xea\x01\x00\x00g\x00\x00\x00<\x01\x00\x00f\x01\x00\x00o\x01\x00\x00\x86\x01\x00\x00\r\x01\x00\x00\n\x02\x00\x00W\x00\x00\x00/\x01\x00\x002\x02\x00\x00(\x00\x00\x00v\x01\x00\x00(\x02\x00\x00:\x01\x00\x00S\x02\x00\x00T\x01\x00\x00)\x01\x00\x00\xfa\x01\x00\x00c\x00\x00\x00\xc4\x01\x00\x00%\x02\x00\x00\xf5\x00\x00\x00\xd7\x01\x00\x00F\x00\x00\x00\x05\x00\x00\x00d\x01\x00\x00\xaf\x00\x00\x00\x11\x02\x00\x00\xa5\x01\x00\x00`\x00\x00\x00R\x02\x00\x00\x1d\x00\x00\x00\x97\x01\x00\x00+\x00\x00\x00\xad\x00\x00\x00\xb6\x01\x00\x00\xce\x01\x00\x00\xe3\x00\x00\x00-\x00\x00\x00\x82\x01\x00\x00a\x01\x00\x00l\x01\x00\x00f\x00\x00\x00\xf8\x01\x00\x00#\x01\x00\x00\xe6\x01\x00\x00\x11\x01\x00\x00\xd1\x01\x00\x00\x1a\x02\x00\x00\x16\x01\x00\x00\x06\x00\x00\x00\xbc\x00\x00\x00\xc1\x01\x00\x00\x03\x01\x00\x00\xb6\x00\x00\x00h\x00\x00\x00\x0c\x02\x00\x00\x17\x01\x00\x00\x0f\x02\x00\x00\x92\x01\x00\x00\xa7\x00\x00\x00!\x01\x00\x00\x92\x00\x00\x00+\x02\x00\x00i\x00\x00\x001\x02\x00\x00\x1d\x02\x00\x00\x16\x00\x00\x00k\x00\x00\x005\x01\x00\x00\x00\x01\x00\x00Q\x00\x00\x00C\x02\x00\x00\x98\x00\x00\x00&\x01\x00\x00S\x01\x00\x00\x99\x01\x00\x004\x00\x00\x00\xa9\x00\x00\x00\x89\x01\x00\x00\x8e\x00\x00\x00z\x01\x00\x00L\x01\x00\x00:\x02\x00\x00?\x00\x00\x00p\x01\x00\x00\xca\x01\x00\x00*\x02\x00\x000\x00\x00\x00\xbf\x00\x00\x00$\x01\x00\x00\xb8\x00\x00\x00\xb8\x01\x00\x00\xf0\x01\x00\x00\xa5\x00\x00\x00&\x00\x00\x00a\x00\x00\x00\x8a\x01\x00\x00\x8f\x00\x00\x00\xf6\x00\x00\x00P\x01\x00\x00\x07\x00\x00\x00\x1e\x01\x00\x00\xb9\x01\x00\x00\x1f\x02\x00\x00\xdb\x01\x00\x00N\x01\x00\x00\xbf\x01\x00\x00Q\x02\x00\x00\xbc\x01\x00\x00|\x00\x00\x00\xf8\x00\x00\x00\xe2\x00\x00\x00u\x01\x00\x00\x93\x01\x00\x00x\x00\x00\x00{\x01\x00\x00\x02\x00\x00\x00\xeb\x01\x00\x00,\x02\x00\x00\x15\x01\x00\x00P\x00\x00\x00\x07\x02\x00\x00B\x02\x00\x00j\x00\x00\x00\xf1\x01\x00\x00~\x01\x00\x00o\x00\x00\x00\x81\x01\x00\x00t\x00\x00\x00E\x01\x00\x00V\x02\x00\x00\xa7\x01\x00\x00\x1d\x01\x00\x00?\x01\x00\x00\xa9\x01\x00\x000\x01\x00\x00U\x01\x00\x00\xaf\x01\x00\x00\xeb\x00\x00\x00\xae\x00\x00\x00M\x01\x00\x00[\x01\x00\x00B\x01\x00\x00\x10\x00\x00\x00\x03\x02\x00\x00\xe7\x01\x00\x00\xb3\x01\x00\x00\x0b\x02\x00\x00\xe7\x00\x00\x00\x05\x01\x00\x00\x94\x00\x00\x006\x00\x00\x00\xba\x01\x00\x00l\x00\x00\x00H\x01\x00\x00\xd3\x00\x00\x00\x95\x01\x00\x00{\x00\x00\x00\xe8\x01\x00\x00\xde\x00\x00\x00Z\x01\x00\x00\xc5\x01\x00\x00\xfb\x00\x00\x00v\x00\x00\x00\x12\x02\x00\x00<\x00\x00\x00\x9a\x00\x00\x00\x87\x00\x00\x00\\\x00\x00\x00\x0b\x01\x00\x00\xfc\x01\x00\x00e\x00\x00\x007\x01\x00\x00\xd0\x00\x00\x00\xae\x01\x00\x00\xa1\x00\x00\x00\x95\x00\x00\x00\x01\x01\x00\x00K\x00\x00\x008\x02\x00\x00\xb0\x01\x00\x00\xcc\x00\x00\x00\xa8\x00\x00\x00\xd8\x01\x00\x00G\x02\x00\x00\xe5\x01\x00\x00\xc5\x00\x00\x00\xef\x00\x00\x00\x0e\x01\x00\x00\t\x02\x00\x00\xc1\x00\x00\x004\x02\x00\x00+\x01\x00\x00/\x00\x00\x00!\x00\x00\x00*\x00\x00\x00;\x02\x00\x00#\x02\x00\x00\x04\x00\x00\x00\x85\x01\x00\x00H\x02\x00\x00\x0c\x00\x00\x005\x02\x00\x00D\x00\x00\x00\x82\x00\x00\x00\'\x01\x00\x00\xd9\x01\x00\x00t\x01\x00\x00\x19\x02\x00\x00>\x02\x00\x00\xff\x00\x00\x00b\x00\x00\x00\xf7\x00\x00\x00\x9c\x00\x00\x00S\x00\x00\x00@\x00\x00\x00\x80\x01\x00\x00\x02\x01\x00\x00 \x00\x00\x00\x8d\x01\x00\x00\'\x02\x00\x00.\x00\x00\x00M\x02\x00\x00\xab\x01\x00\x00\x8b\x01\x00\x00\xcf\x01\x00\x00\x0c\x01\x00\x00\xdf\x01\x00\x00\x88\x00\x00\x00`\x01\x00\x00\x98\x01\x00\x00\x7f\x01\x00\x00\xdd\x00\x00\x00\x9b\x00\x00\x00\xdc\x00\x00\x00\x01\x02\x00\x00\xab\x00\x00\x00\xdd\x01\x00\x00\x7f\x00\x00\x00\xb1\x00\x00\x00\x84\x00\x00\x00R\x01\x00\x00\x9d\x00\x00\x00X\x00\x00\x00\x14\x02\x00\x00r\x00\x00\x006\x01\x00\x00\x18\x01\x00\x00T\x00\x00\x00\xa8\x01\x00\x00;\x01\x00\x00\xd6\x00\x00\x00\xe1\x01\x00\x00\xb2\x01\x00\x00\xd3\x01\x00\x00\x96\x01\x00\x00\xfd\x00\x00\x00M\x00\x00\x00 \x02\x00\x00?\x02\x00\x00\xd7\x00\x00\x00\xb7\x01\x00\x00\xd5\x00\x00\x00e\x01\x00\x00"\x01\x00\x00\xd2\x00\x00\x00V\x00\x00\x00Y\x00\x00\x00\x97\x00\x00\x00\xf1\x00\x00\x00\xbb\x01\x00\x00\x15\x00\x00\x00\xec\x01\x00\x002\x00\x00\x00y\x01\x00\x00\xda\x01\x00\x00C\x00\x00\x00\x03\x00\x00\x00\x1b\x00\x00\x00p\x00\x00\x00%\x00\x00\x00\xd0\x01\x00\x00\\\x01\x00\x00\x9f\x01\x00\x00\x94\x01\x00\x00\xc7\x01\x00\x00T\x02\x00\x00\x1a\x01\x00\x00\x1b\x02\x00\x00c\x01\x00\x00\x00\x02\x00\x00\xaa\x00\x00\x00\x17\x00\x00\x00;\x00\x00\x00D\x02\x00\x00\x13\x02\x00\x00r\x01\x00\x00\x00\x00\x00\x00\x04\x02\x00\x00\xb0\x00\x00\x00)\x02\x00\x00\xc2\x01\x00\x007\x02\x00\x00\xc9\x00\x00\x00\x9e\x01\x00\x00\xc8\x01\x00\x00\xa1\x01\x00\x00\x1e\x00\x00\x00\xc0\x01\x00\x00=\x00\x00\x00P\x02\x00\x00\x9f\x00\x00\x00\xa6\x00\x00\x00C\x01\x00\x00\x9a\x01\x00\x00A\x00\x00\x00R\x00\x00\x00\x8c\x00\x00\x00\x1e\x02\x00\x009\x02\x00\x00$\x02\x00\x00\x8a\x00\x00\x00\xf0\x00\x00\x00\xed\x01\x00\x00O\x01\x00\x00\x18\x00\x00\x00\xba\x00\x00\x00\xee\x00\x00\x00X\x01\x00\x00\xdf\x00\x00\x00"\x00\x00\x00\x8e\x01\x00\x00-\x01\x00\x00\xf6\x01\x00\x00\x1f\x01\x00\x00s\x01\x00\x00\xe0\x00\x00\x00\xd1\x00\x00\x00\xed\x00\x00\x005\x00\x00\x00\x96\x00\x00\x001\x00\x00\x00\xa3\x00\x00\x00\x1a\x00\x00\x00I\x01\x00\x00\x83\x01\x00\x00\xe3\x01\x00\x00'
tbsg75
I01
sg76
I1
sg77
I-1
sg78
(lp4861
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg80
Nsg81
cnumpy.core.multiarray
scalar
p4862
(g4860
S'\xe3\x01\x00\x00'
tRp4863
sg82
I600
sg83
I0
sg84
I600
sg85
I01
sbag37
asS'savePickle'
p4864
I01
sb.