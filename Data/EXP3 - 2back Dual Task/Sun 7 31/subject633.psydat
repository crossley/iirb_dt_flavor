ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject633
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 633
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vm
sS'age'
p31
V20
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I4
sS'_exp'
p41
I74398256
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I39
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I15
I40
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I15
I40
tg55
I00
S'\x00\x00pA\x00\x00\x88A\x00\x00\x98A\x00\x00\xb8A\x00\x00\\B\x00\x00`B\x00\x00\x86B\x00\x00\xb2B\x00\x00\xb6B\x00\x00\xc4B\x00\x00\xdaB\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xf0B\x00\x00\xf2B\x00\x00\tC\x00\x00!C\x00\x00*C\x00\x00-C\x00\x00IC\x00\x00SC\x00\x00dC\x00\x00gC\x00\x00}C\x00\x00\x90C\x00\x80\xa9C\x00\x00\xaaC\x00\x00\xbfC\x00\x00\xd3C\x00\x80\xd3C\x00\x80\xd9C\x00\x80\xe9C\x00\x80\xebC\x00\x80\xfbC\x00\xc0\x04D\x00\xc0\x06D\x00\x00\x07D\x00\x80\x08D\x00\x80\x0fD\x00\x80\x12D\x00\x00\x00\x00\x00\x00TB\x00\x00\x92B\x00\x00\xaeB\x00\x00\xc2B\x00\x00\xd2B\x00\x00\xe8B\x00\x00\x0eC\x00\x00\x0fC\x00\x00AC\x00\x00BC\x00\x00XC\x00\x00iC\x00\x00\x83C\x00\x00\x97C\x00\x00\xa4C\x00\x80\xa4C\x00\x00\xb6C\x00\x00\xceC\x00\x80\xd5C\x00\x80\xddC\x00\x80\xe0C\x00\x00\xe1C\x00\x00\xe4C\x00\x00\xf0C\x00\x00\xf5C\x00@\x01D\x00\xc0\x03D\x00\xc0\x05D\x00\xc0\x07D\x00\x00\tD\x00\xc0\tD\x00\x00\x0bD\x00\x80\x0eD\x00\xc0\x0fD\x00\x00\x10D\x00\x00\x13D\x00@\x13D\x00\xc0\x14D\x00\x80\x15D\x00\x00\x80@\x00\x00\x90A\x00\x00\xa0A\x00\x00\xd8A\x00\x00\x9eB\x00\x00\xa8B\x00\x00\xb0B\x00\x00\xdcB\x00\x00\x13C\x00\x00\x16C\x00\x00\x18C\x00\x00\x1eC\x00\x004C\x00\x006C\x00\x00aC\x00\x00jC\x00\x00oC\x00\x00rC\x00\x00\x81C\x00\x00\x8eC\x00\x00\x9aC\x00\x00\x9dC\x00\x80\xb0C\x00\x00\xb7C\x00\x80\xb7C\x00\x80\xc5C\x00\x00\xc9C\x00\x00\xcbC\x00\x80\xcbC\x00\x80\xd2C\x00\x00\xd4C\x00\x00\xdbC\x00\x00\xddC\x00\x80\xedC\x00\x00\xf2C\x00\x00\xfaC\x00\x80\x02D\x00\x80\x03D\x00\x00\x05D\x00\x00\x15D\x00\x00\x80?\x00\x00\x10A\x00\x000A\x00\x00\x80A\x00\x00\x18B\x00\x00 B\x00\x00PB\x00\x00pB\x00\x00\x84B\x00\x00\x02C\x00\x00\x05C\x00\x00\x15C\x00\x002C\x00\x00HC\x00\x00[C\x00\x00mC\x00\x80\x89C\x00\x80\x99C\x00\x80\x9cC\x00\x00\x9fC\x00\x80\xabC\x00\x00\xadC\x00\x80\xb3C\x00\x80\xb5C\x00\x00\xbcC\x00\x00\xc0C\x00\x00\xc6C\x00\x80\xc9C\x00\x00\xcaC\x00\x80\xe8C\x00\x80\xecC\x00\x80\xeeC\x00\x80\xf7C\x00\x80\xfcC\x00\x00\x01D\x00@\x02D\x00\x80\x05D\x00@\x08D\x00@\nD\x00@\x0cD\x00\x00<B\x00\x00@B\x00\x00lB\x00\x00\x8cB\x00\x00\x96B\x00\x00\xa4B\x00\x00\xdeB\x00\x00\xfeB\x00\x00\x12C\x00\x00,C\x00\x00.C\x00\x00/C\x00\x00LC\x00\x00OC\x00\x00YC\x00\x00_C\x00\x00pC\x00\x00wC\x00\x80\x81C\x00\x80\x8fC\x00\x80\x90C\x00\x80\x91C\x00\x80\x95C\x00\x00\x9bC\x00\x80\xa6C\x00\x00\xa7C\x00\x80\xafC\x00\x80\xb2C\x00\x00\xbdC\x00\x00\xc7C\x00\x00\xccC\x00\x80\xe2C\x00\x80\xffC\x00\x00\x02D\x00\x00\x03D\x00\x80\x0cD\x00\x00\rD\x00\xc0\x11D\x00@\x15D\x00\xc0\x15D\x00\x00@A\x00\x00\xc0A\x00\x00HB\x00\x00dB\x00\x00tB\x00\x00\x98B\x00\x00\xa0B\x00\x00\xaaB\x00\x00\xb4B\x00\x00\xd8B\x00\x00\xeaB\x00\x00\xf4B\x00\x00\x01C\x00\x00\x17C\x00\x00\x19C\x00\x00+C\x00\x00JC\x00\x00^C\x00\x00cC\x00\x00qC\x00\x00\x82C\x00\x80\x83C\x00\x80\x84C\x00\x00\x98C\x00\x80\x9eC\x00\x80\xa0C\x00\x00\xa1C\x00\x80\xa2C\x00\x80\xa5C\x00\x00\xaeC\x00\x00\xb8C\x00\x00\xc1C\x00\x80\xc1C\x00\x80\xc4C\x00\x80\xcdC\x00\x80\xd8C\x00\x80\xe5C\x00\x80\xeaC\x00@\tD\x00\x80\rD\x00\x00 A\x00\x00\x1cB\x00\x00DB\x00\x00\xbaB\x00\x00\xd6B\x00\x00\xe0B\x00\x00\xe2B\x00\x00\nC\x00\x00\x10C\x00\x00\x1bC\x00\x00\'C\x00\x008C\x00\x00DC\x00\x00EC\x00\x00\\C\x00\x00kC\x00\x00sC\x00\x00\x7fC\x00\x80\x80C\x00\x80\x87C\x00\x80\x8eC\x00\x80\x92C\x00\x80\x97C\x00\x00\x99C\x00\x80\xa7C\x00\x80\xaeC\x00\x00\xb1C\x00\x00\xc5C\x00\x00\xc8C\x00\x00\xd2C\x00\x80\xd6C\x00\x80\xdaC\x00\x80\xdfC\x00\x00\xf8C\x00\x80\xfeC\x00\x00\x04D\x00@\x04D\x00\x80\x04D\x00\x80\x10D\x00@\x12D\x00\x00\xe0@\x00\x00\xf8A\x00\x00$B\x00\x00\xbeB\x00\x00\xc6B\x00\x00\xf8B\x00\x00\xfcB\x00\x00\x00C\x00\x00\x1cC\x00\x00;C\x00\x00=C\x00\x00~C\x00\x00\x84C\x00\x00\x93C\x00\x80\xa8C\x00\x80\xb8C\x00\x00\xb9C\x00\x80\xb9C\x00\x80\xbdC\x00\x80\xcaC\x00\x80\xccC\x00\x80\xceC\x00\x80\xd0C\x00\x00\xe9C\x00\x00\xedC\x00\x00\xefC\x00\x80\xf3C\x00\x00\xf4C\x00\x80\xf8C\x00\x00\xfdC\x00\x80\xfdC\x00\x00\x00D\x00@\x00D\x00\xc0\x01D\x00\xc0\nD\x00\x80\x0bD\x00\xc0\x0bD\x00\x00\x0cD\x00\x80\x13D\x00\x80\x14D\x00\x00\x04B\x00\x00,B\x00\x00\xceB\x00\x00\xd0B\x00\x00\x03C\x00\x00\x06C\x00\x00\x0cC\x00\x00\x14C\x00\x00"C\x00\x00(C\x00\x000C\x00\x00ZC\x00\x00uC\x00\x00\x95C\x00\x80\x96C\x00\x80\xa3C\x00\x00\xa9C\x00\x00\xafC\x00\x00\xb4C\x00\x80\xb6C\x00\x00\xc2C\x00\x80\xc7C\x00\x00\xcdC\x00\x80\xd7C\x00\x00\xe0C\x00\x00\xe3C\x00\x00\xecC\x00\x00\xeeC\x00\x00\xf1C\x00\x80\xf2C\x00\x00\xf3C\x00\x00\xf6C\x00\xc0\x00D\x00\x80\x07D\x00\x80\nD\x00\xc0\x0cD\x00@\x0eD\x00@\x10D\x00\x00\x11D\x00@\x14D\x00\x00\xc0@\x00\x00\x00A\x00\x00PA\x00\x00\xa8A\x00\x00\xf0A\x00\x00\x00B\x00\x00\x80B\x00\x00\x88B\x00\x00\xa6B\x00\x00\xbcB\x00\x00%C\x00\x001C\x00\x00NC\x00\x00VC\x00\x00WC\x00\x00tC\x00\x00xC\x00\x00\x8dC\x00\x80\x8dC\x00\x00\x8fC\x00\x00\x94C\x00\x00\x96C\x00\x00\x9cC\x00\x80\xaaC\x00\x80\xadC\x00\x80\xb4C\x00\x00\xbbC\x00\x80\xbcC\x00\x00\xc3C\x00\x00\xc4C\x00\x00\xd0C\x00\x80\xe1C\x00\x00\xe2C\x00\x00\xe6C\x00\x80\xf6C\x00\x00\xfbC\x00\x80\x00D\x00\x00\x06D\x00\xc0\x08D\x00@\rD\x00\x00\x14B\x00\x00(B\x00\x00\x94B\x00\x00\x9aB\x00\x00\xb8B\x00\x00\xf6B\x00\x00)C\x00\x005C\x00\x00@C\x00\x00]C\x00\x00bC\x00\x00nC\x00\x00{C\x00\x00\x8cC\x00\x00\x91C\x00\x00\x92C\x00\x80\x94C\x00\x80\x9bC\x00\x80\x9fC\x00\x00\xa5C\x00\x80\xacC\x00\x00\xb0C\x00\x80\xb1C\x00\x00\xb3C\x00\x00\xbaC\x00\x80\xbfC\x00\x80\xc0C\x00\x80\xd1C\x00\x80\xd4C\x00\x00\xd6C\x00\x80\xdeC\x00\x80\xe6C\x00\x00\xebC\x00\x80\xefC\x00\x80\xf1C\x00\x80\xf9C\x00\x80\tD\x00\x00\nD\x00\xc0\rD\x00\xc0\x13D\x00\x00\xb0A\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x004B\x00\x008B\x00\x00hB\x00\x00xB\x00\x00\x9cB\x00\x00\xa2B\x00\x00\xc0B\x00\x00\xd4B\x00\x00\xecB\x00\x00\x08C\x00\x00\rC\x00\x00\x1dC\x00\x00GC\x00\x00eC\x00\x00fC\x00\x00zC\x00\x00\x80C\x00\x00\x85C\x00\x00\x87C\x00\x80\x9dC\x00\x00\x9eC\x00\x80\xa1C\x00\x00\xa2C\x00\x00\xa3C\x00\x80\xc2C\x00\x80\xc6C\x00\x80\xc8C\x00\x00\xdaC\x00\x00\xdcC\x00\x80\xe3C\x00\x00\xf9C\x00\x00\xffC\x00\x80\x01D\x00@\x06D\x00@\x0bD\x00@\x11D\x00\x00\x00@\x00\x00\xe0A\x00\x00\xe8A\x00\x00\x82B\x00\x00\x8aB\x00\x00\x90B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xfaB\x00\x00\x07C\x00\x00\x1fC\x00\x00 C\x00\x00#C\x00\x003C\x00\x00>C\x00\x00MC\x00\x00QC\x00\x00RC\x00\x00`C\x00\x00hC\x00\x00lC\x00\x80\x82C\x00\x80\x85C\x00\x00\x8aC\x00\x80\x9aC\x00\x00\xa0C\x00\x00\xa8C\x00\x00\xd7C\x00\x00\xd9C\x00\x80\xdcC\x00\x00\xdfC\x00\x00\xe8C\x00\x80\xf4C\x00\xc0\x02D\x00\x80\x06D\x00\xc0\x10D\x00\x00\x12D\x00\xc0\x12D\x00\x00\x14D\x00\x00\xa0@\x00\x00`A\x00\x00\xc8A\x00\x00LB\x00\x00XB\x00\x00\x8eB\x00\x00\xacB\x00\x00\x04C\x00\x00\x1aC\x00\x007C\x00\x00CC\x00\x00FC\x00\x00KC\x00\x00TC\x00\x00UC\x00\x00yC\x00\x80\x88C\x00\x00\x89C\x00\x80\x8cC\x00\x80\x93C\x00\x80\x98C\x00\x00\xabC\x00\x00\xacC\x00\x00\xb2C\x00\x00\xb5C\x00\x80\xbaC\x00\x80\xbbC\x00\x80\xbeC\x00\x80\xc3C\x00\x00\xcfC\x00\x80\xe7C\x00\x00\xeaC\x00\x80\xf0C\x00\x80\xf5C\x00\x80\xfaC\x00\x00\xfcC\x00@\x03D\x00@\x07D\x00\x00\x0eD\x00\xc0\x0eD\x00\x00@@\x00\x00\xd0A\x00\x000B\x00\x00|B\x00\x00\xeeB\x00\x00\x0bC\x00\x00\x11C\x00\x00$C\x00\x00&C\x00\x009C\x00\x00:C\x00\x00<C\x00\x00?C\x00\x00PC\x00\x00vC\x00\x00|C\x00\x00\x86C\x00\x80\x86C\x00\x00\x88C\x00\x80\x8aC\x00\x00\x8bC\x00\x80\x8bC\x00\x00\xa6C\x00\x00\xbeC\x00\x80\xcfC\x00\x00\xd1C\x00\x00\xd5C\x00\x00\xd8C\x00\x80\xdbC\x00\x00\xdeC\x00\x80\xe4C\x00\x00\xe5C\x00\x00\xe7C\x00\x00\xf7C\x00\x00\xfeC\x00@\x05D\x00\x00\x08D\x00\x00\x0fD\x00@\x0fD\x00\x80\x11D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I15
aI40
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I15
I40
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I1
aI0
aI9
aI11
aI3
aI4
aI5
aI1
aI0
aI12
aI2
aI9
aI2
aI13
aI12
aI2
aI4
aI6
aI11
aI6
aI9
aI11
aI10
aI10
aI8
aI13
aI9
aI7
aI6
aI0
aI1
aI3
aI1
aI3
aI11
aI13
aI0
aI7
aI1
aI6
aI3
aI3
aI7
aI11
aI5
aI5
aI0
aI11
aI0
aI11
aI5
aI14
aI10
aI6
aI0
aI10
aI5
aI11
aI6
aI9
aI8
aI11
aI5
aI3
aI9
aI3
aI13
aI2
aI2
aI11
aI9
aI7
aI13
aI6
aI4
aI2
aI13
aI1
aI13
aI0
aI12
aI0
aI9
aI4
aI11
aI10
aI10
aI6
aI5
aI0
aI2
aI6
aI2
aI6
aI13
aI5
aI2
aI6
aI14
aI4
aI1
aI5
aI14
aI9
aI13
aI9
aI9
aI2
aI0
aI6
aI9
aI0
aI8
aI7
aI7
aI1
aI8
aI11
aI14
aI12
aI14
aI2
aI8
aI4
aI14
aI11
aI6
aI5
aI10
aI6
aI5
aI8
aI13
aI13
aI13
aI0
aI6
aI2
aI13
aI0
aI6
aI3
aI4
aI5
aI3
aI4
aI5
aI4
aI0
aI2
aI4
aI13
aI10
aI11
aI7
aI6
aI1
aI7
aI14
aI1
aI2
aI0
aI11
aI6
aI9
aI2
aI9
aI0
aI7
aI14
aI13
aI10
aI6
aI11
aI9
aI11
aI9
aI4
aI13
aI4
aI5
aI10
aI4
aI6
aI1
aI7
aI6
aI7
aI2
aI14
aI8
aI5
aI2
aI10
aI9
aI6
aI14
aI7
aI0
aI1
aI13
aI2
aI11
aI5
aI12
aI5
aI7
aI2
aI12
aI8
aI6
aI0
aI14
aI3
aI9
aI11
aI8
aI5
aI3
aI10
aI13
aI12
aI6
aI8
aI8
aI14
aI2
aI8
aI10
aI11
aI11
aI10
aI8
aI2
aI8
aI6
aI3
aI7
aI1
aI7
aI9
aI9
aI11
aI13
aI3
aI11
aI11
aI4
aI7
aI11
aI7
aI5
aI14
aI0
aI1
aI0
aI14
aI12
aI12
aI4
aI6
aI5
aI12
aI4
aI2
aI13
aI3
aI5
aI14
aI12
aI1
aI0
aI8
aI13
aI3
aI0
aI0
aI3
aI1
aI10
aI7
aI11
aI10
aI3
aI0
aI4
aI1
aI6
aI4
aI1
aI11
aI4
aI7
aI5
aI4
aI12
aI4
aI1
aI14
aI10
aI3
aI5
aI7
aI10
aI2
aI0
aI11
aI1
aI1
aI2
aI14
aI8
aI7
aI9
aI1
aI2
aI9
aI4
aI8
aI12
aI9
aI0
aI3
aI1
aI9
aI9
aI0
aI6
aI7
aI1
aI2
aI0
aI14
aI13
aI8
aI1
aI9
aI5
aI14
aI6
aI2
aI11
aI8
aI2
aI5
aI10
aI4
aI7
aI10
aI1
aI14
aI3
aI7
aI0
aI11
aI14
aI1
aI8
aI6
aI8
aI3
aI5
aI6
aI13
aI12
aI2
aI7
aI0
aI5
aI6
aI12
aI4
aI7
aI4
aI3
aI2
aI13
aI7
aI14
aI7
aI12
aI11
aI0
aI6
aI7
aI3
aI8
aI13
aI6
aI14
aI5
aI7
aI12
aI13
aI7
aI3
aI5
aI4
aI12
aI7
aI6
aI13
aI3
aI0
aI4
aI5
aI12
aI0
aI3
aI14
aI12
aI4
aI12
aI12
aI6
aI6
aI11
aI5
aI10
aI13
aI4
aI5
aI0
aI10
aI7
aI10
aI6
aI14
aI12
aI10
aI9
aI2
aI1
aI3
aI4
aI1
aI10
aI9
aI8
aI1
aI3
aI14
aI7
aI0
aI13
aI13
aI12
aI1
aI8
aI4
aI0
aI8
aI14
aI9
aI10
aI12
aI10
aI11
aI13
aI9
aI10
aI11
aI9
aI13
aI7
aI5
aI11
aI9
aI8
aI12
aI10
aI8
aI13
aI7
aI3
aI9
aI1
aI5
aI11
aI2
aI5
aI2
aI10
aI5
aI12
aI1
aI12
aI5
aI13
aI2
aI8
aI9
aI10
aI4
aI5
aI3
aI14
aI12
aI9
aI10
aI9
aI8
aI13
aI4
aI10
aI5
aI2
aI7
aI14
aI6
aI14
aI3
aI8
aI7
aI2
aI11
aI10
aI10
aI14
aI4
aI9
aI12
aI8
aI11
aI1
aI2
aI8
aI11
aI3
aI8
aI12
aI3
aI1
aI14
aI4
aI10
aI0
aI14
aI9
aI8
aI3
aI1
aI3
aI10
aI13
aI8
aI3
aI14
aI5
aI8
aI13
aI7
aI9
aI14
aI12
aI12
aI3
aI13
aI4
aI1
aI13
aI12
aI14
aI4
aI10
aI0
aI8
aI14
aI8
aI3
aI14
aI12
aI1
aI12
aI12
aI2
aI7
aI14
aI2
aI4
aI2
aI1
aI13
aI3
aI9
aI11
aI3
aI10
aI12
aI1
aI12
aI10
aI14
aI6
aI4
aI0
aI8
aI8
aI12
aI4
atbsS'finished'
p74
I00
sS'nReps'
p75
I40
sS'nRemaining'
p76
I0
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p79
NsS'thisIndex'
p80
I4
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I14
sS'nTotal'
p83
I600
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I1
sS'.thisRepN'
p96
I0
sg30
Vm
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I1
sg15
(lp100
S'd'
asg17
S'N'
sg14
I1
sa(dp101
g16
(lp102
S'k'
asg95
I3
sS'.thisRepN'
p103
I0
sg30
Vm
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I3
sg15
(lp107
S'd'
asg17
S'N'
sg14
I1
sa(dp108
g16
(lp109
S'd'
asg18
S'Y'
sS'.thisRepN'
p110
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I12
sg15
(lp114
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp115
g16
(lp116
S'd'
asg18
S'N'
sS'.thisRepN'
p117
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I14
sg15
(lp121
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp122
S'space'
p123
asg95
I14
sa(dp124
g16
(lp125
S'd'
asg18
S'Y'
sS'.thisRepN'
p126
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p127
I4
sS'.thisN'
p128
I4
sS'.thisIndex'
p129
I2
sg15
(lp130
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp131
S'space'
p132
asg95
I2
sa(dp133
g16
(lp134
S'd'
asg18
S'N'
sS'.thisRepN'
p135
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p136
I5
sS'.thisN'
p137
I5
sS'.thisIndex'
p138
I13
sg15
(lp139
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp140
g16
(lp141
S'k'
asg18
S'Y'
sS'.thisRepN'
p142
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p143
I6
sS'.thisN'
p144
I6
sS'.thisIndex'
p145
I9
sg15
(lp146
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp147
g16
(lp148
S'd'
asg18
S'Y'
sS'.thisRepN'
p149
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p150
I7
sS'.thisN'
p151
I7
sS'.thisIndex'
p152
I7
sg15
(lp153
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp154
S'k'
asg95
I7
sa(dp155
g16
(lp156
S'k'
asg18
S'Y'
sS'.thisRepN'
p157
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p158
I8
sS'.thisN'
p159
I8
sS'.thisIndex'
p160
I9
sg15
(lp161
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp162
S'space'
p163
asg95
I9
sa(dp164
g16
(lp165
S'k'
asg18
S'N'
sS'.thisRepN'
p166
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p167
I9
sS'.thisN'
p168
I9
sS'.thisIndex'
p169
I3
sg15
(lp170
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp171
g16
(lp172
S'd'
asg18
S'Y'
sS'.thisRepN'
p173
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p174
I10
sS'.thisN'
p175
I10
sS'.thisIndex'
p176
I6
sg15
(lp177
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp178
S'space'
p179
asg95
I6
sa(dp180
g16
(lp181
S'd'
asg18
S'N'
sS'.thisRepN'
p182
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p183
I11
sS'.thisN'
p184
I11
sS'.thisIndex'
p185
I3
sg15
(lp186
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp187
g16
(lp188
S'd'
asg18
S'Y'
sS'.thisRepN'
p189
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p190
I12
sS'.thisN'
p191
I12
sS'.thisIndex'
p192
I5
sg15
(lp193
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp194
g16
(lp195
S'd'
asg18
S'Y'
sS'.thisRepN'
p196
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p197
I13
sS'.thisN'
p198
I13
sS'.thisIndex'
p199
I9
sg15
(lp200
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp201
g16
(lp202
S'd'
asg18
S'N'
sS'.thisRepN'
p203
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p204
I14
sS'.thisN'
p205
I14
sS'.thisIndex'
p206
I13
sg15
(lp207
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I13
sa(dp208
g16
(lp209
S'd'
asg18
S'N'
sS'.thisRepN'
p210
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p211
I0
sS'.thisN'
p212
I15
sS'.thisIndex'
p213
I0
sg15
(lp214
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp215
g16
(lp216
S'd'
asg18
S'N'
sS'.thisRepN'
p217
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p218
I1
sS'.thisN'
p219
I16
sS'.thisIndex'
p220
I3
sg15
(lp221
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp222
g16
(lp223
S'd'
asg18
S'N'
sS'.thisRepN'
p224
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p225
I2
sS'.thisN'
p226
I17
sS'.thisIndex'
p227
I0
sg15
(lp228
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp229
g16
(lp230
S'k'
asg18
S'Y'
sS'.thisRepN'
p231
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p232
I3
sS'.thisN'
p233
I18
sS'.thisIndex'
p234
I2
sg15
(lp235
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp236
S'space'
p237
asg95
I2
sa(dp238
g16
(lp239
S'd'
asg18
S'N'
sS'.thisRepN'
p240
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p241
I4
sS'.thisN'
p242
I19
sS'.thisIndex'
p243
I0
sg15
(lp244
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp245
S'space'
p246
asg95
I0
sa(dp247
g16
(lp248
S'd'
asg18
S'N'
sS'.thisRepN'
p249
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p250
I5
sS'.thisN'
p251
I20
sS'.thisIndex'
p252
I2
sg15
(lp253
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp254
g16
(lp255
S'k'
asg18
S'Y'
sS'.thisRepN'
p256
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p257
I6
sS'.thisN'
p258
I21
sS'.thisIndex'
p259
I9
sg15
(lp260
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp261
g16
(lp262
S'k'
asg18
S'N'
sS'.thisRepN'
p263
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p264
I7
sS'.thisN'
p265
I22
sS'.thisIndex'
p266
I11
sg15
(lp267
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I11
sa(dp268
g16
(lp269
S'k'
asg18
S'Y'
sS'.thisRepN'
p270
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p271
I8
sS'.thisN'
p272
I23
sS'.thisIndex'
p273
I0
sg15
(lp274
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp275
g16
(lp276
S'k'
asg18
S'Y'
sS'.thisRepN'
p277
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p278
I9
sS'.thisN'
p279
I24
sS'.thisIndex'
p280
I5
sg15
(lp281
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp282
g16
(lp283
S'd'
asg18
S'N'
sS'.thisRepN'
p284
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p285
I10
sS'.thisN'
p286
I25
sS'.thisIndex'
p287
I13
sg15
(lp288
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp289
g16
(lp290
S'd'
asg18
S'N'
sS'.thisRepN'
p291
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p292
I11
sS'.thisN'
p293
I26
sS'.thisIndex'
p294
I14
sg15
(lp295
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp296
g16
(lp297
S'd'
asg18
S'Y'
sS'.thisRepN'
p298
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p299
I12
sS'.thisN'
p300
I27
sS'.thisIndex'
p301
I2
sg15
(lp302
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp303
g16
(lp304
S'k'
asg18
S'Y'
sS'.thisRepN'
p305
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p306
I13
sS'.thisN'
p307
I28
sS'.thisIndex'
p308
I12
sg15
(lp309
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp310
g16
(lp311
S'k'
asg18
S'N'
sS'.thisRepN'
p312
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p313
I14
sS'.thisN'
p314
I29
sS'.thisIndex'
p315
I12
sg15
(lp316
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp317
g16
(lp318
S'k'
asg18
S'Y'
sS'.thisRepN'
p319
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p320
I0
sS'.thisN'
p321
I30
sS'.thisIndex'
p322
I9
sg15
(lp323
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp324
g16
(lp325
S'd'
asg18
S'Y'
sS'.thisRepN'
p326
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p327
I1
sS'.thisN'
p328
I31
sS'.thisIndex'
p329
I7
sg15
(lp330
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp331
S'space'
p332
asg95
I7
sa(dp333
g16
(lp334
S'd'
asg18
S'N'
sS'.thisRepN'
p335
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p336
I2
sS'.thisN'
p337
I32
sS'.thisIndex'
p338
I9
sg15
(lp339
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp340
g16
(lp341
S'k'
asg18
S'Y'
sS'.thisRepN'
p342
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p343
I3
sS'.thisN'
p344
I33
sS'.thisIndex'
p345
I8
sg15
(lp346
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp347
g16
(lp348
S'k'
asg18
S'N'
sS'.thisRepN'
p349
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p350
I4
sS'.thisN'
p351
I34
sS'.thisIndex'
p352
I11
sg15
(lp353
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp354
g16
(lp355
S'k'
asg18
S'Y'
sS'.thisRepN'
p356
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p357
I5
sS'.thisN'
p358
I35
sS'.thisIndex'
p359
I11
sg15
(lp360
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I11
sa(dp361
g16
(lp362
S'd'
asg18
S'Y'
sS'.thisRepN'
p363
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p364
I6
sS'.thisN'
p365
I36
sS'.thisIndex'
p366
I11
sg15
(lp367
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp368
g16
(lp369
S'd'
asg18
S'N'
sS'.thisRepN'
p370
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p371
I7
sS'.thisN'
p372
I37
sS'.thisIndex'
p373
I10
sg15
(lp374
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp375
g16
(lp376
S'd'
asg18
S'N'
sS'.thisRepN'
p377
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p378
I8
sS'.thisN'
p379
I38
sS'.thisIndex'
p380
I3
sg15
(lp381
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp382
g16
(lp383
S'd'
asg18
S'N'
sS'.thisRepN'
p384
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p385
I9
sS'.thisN'
p386
I39
sS'.thisIndex'
p387
I6
sg15
(lp388
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp389
g16
(lp390
S'd'
asg18
S'N'
sS'.thisRepN'
p391
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p392
I10
sS'.thisN'
p393
I40
sS'.thisIndex'
p394
I3
sg15
(lp395
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp396
g16
(lp397
S'd'
asg18
S'Y'
sS'.thisRepN'
p398
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p399
I11
sS'.thisN'
p400
I41
sS'.thisIndex'
p401
I7
sg15
(lp402
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp403
S'space'
p404
asg95
I7
sa(dp405
g16
(lp406
S'k'
asg18
S'Y'
sS'.thisRepN'
p407
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p408
I12
sS'.thisN'
p409
I42
sS'.thisIndex'
p410
I10
sg15
(lp411
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp412
S'space'
p413
asg95
I10
sa(dp414
g16
(lp415
S'd'
asg18
S'Y'
sS'.thisRepN'
p416
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p417
I13
sS'.thisN'
p418
I43
sS'.thisIndex'
p419
I8
sg15
(lp420
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp421
g16
(lp422
S'k'
asg18
S'Y'
sS'.thisRepN'
p423
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p424
I14
sS'.thisN'
p425
I44
sS'.thisIndex'
p426
I14
sg15
(lp427
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp428
g16
(lp429
S'd'
asg18
S'N'
sS'.thisRepN'
p430
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p431
I0
sS'.thisN'
p432
I45
sS'.thisIndex'
p433
I11
sg15
(lp434
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp435
g16
(lp436
S'd'
asg18
S'N'
sS'.thisRepN'
p437
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p438
I1
sS'.thisN'
p439
I46
sS'.thisIndex'
p440
I11
sg15
(lp441
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp442
g16
(lp443
S'd'
asg18
S'N'
sS'.thisRepN'
p444
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p445
I2
sS'.thisN'
p446
I47
sS'.thisIndex'
p447
I4
sg15
(lp448
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp449
g16
(lp450
S'k'
asg18
S'N'
sS'.thisRepN'
p451
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p452
I3
sS'.thisN'
p453
I48
sS'.thisIndex'
p454
I4
sg15
(lp455
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp456
g16
(lp457
S'k'
asg18
S'Y'
sg22
I30
sS'.thisN'
p458
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p459
I4
sS'.thisRepN'
p460
I3
sg21
I28
sS'.thisIndex'
p461
I6
sg23
I24
sg15
(lp462
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp463
S'space'
p464
asg95
I6
sa(dp465
g16
(lp466
S'k'
asg95
I5
sS'.thisRepN'
p467
I3
sg30
Vm
sg31
g32
sS'.thisTrialN'
p468
I5
sS'.thisN'
p469
I50
sS'.thisIndex'
p470
I5
sg15
(lp471
S'd'
asg17
S'N'
sg14
I2
sa(dp472
g16
(lp473
S'd'
asg95
I13
sS'.thisRepN'
p474
I3
sg30
Vm
sg31
g32
sS'.thisTrialN'
p475
I6
sS'.thisN'
p476
I51
sS'.thisIndex'
p477
I13
sg15
(lp478
S'd'
asg17
S'Y'
sg14
I2
sa(dp479
g16
(lp480
S'k'
asg18
S'Y'
sS'.thisRepN'
p481
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p482
I7
sS'.thisN'
p483
I52
sS'.thisIndex'
p484
I3
sg15
(lp485
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp486
S'space'
p487
asg95
I3
sa(dp488
g16
(lp489
S'k'
asg18
S'N'
sS'.thisRepN'
p490
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p491
I8
sS'.thisN'
p492
I53
sS'.thisIndex'
p493
I1
sg15
(lp494
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp495
S'space'
p496
asg95
I1
sa(dp497
g16
(lp498
S'k'
asg18
S'Y'
sS'.thisRepN'
p499
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p500
I9
sS'.thisN'
p501
I54
sS'.thisIndex'
p502
I13
sg15
(lp503
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp504
S'space'
p505
asg95
I13
sa(dp506
g16
(lp507
S'd'
asg18
S'N'
sS'.thisRepN'
p508
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p509
I10
sS'.thisN'
p510
I55
sS'.thisIndex'
p511
I0
sg15
(lp512
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp513
g16
(lp514
S'd'
asg18
S'Y'
sS'.thisRepN'
p515
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p516
I11
sS'.thisN'
p517
I56
sS'.thisIndex'
p518
I0
sg15
(lp519
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp520
g16
(lp521
S'k'
asg18
S'N'
sS'.thisRepN'
p522
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p523
I12
sS'.thisN'
p524
I57
sS'.thisIndex'
p525
I5
sg15
(lp526
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp527
S'space'
p528
asg95
I5
sa(dp529
g16
(lp530
S'd'
asg18
S'N'
sS'.thisRepN'
p531
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p532
I13
sS'.thisN'
p533
I58
sS'.thisIndex'
p534
I11
sg15
(lp535
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp536
g16
(lp537
S'k'
asg18
S'Y'
sS'.thisRepN'
p538
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p539
I14
sS'.thisN'
p540
I59
sS'.thisIndex'
p541
I4
sg15
(lp542
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp543
S'space'
p544
asg95
I4
sa(dp545
g16
(lp546
S'd'
asg18
S'N'
sS'.thisRepN'
p547
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p548
I0
sS'.thisN'
p549
I60
sS'.thisIndex'
p550
I3
sg15
(lp551
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp552
g16
(lp553
S'd'
asg18
S'N'
sS'.thisRepN'
p554
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p555
I1
sS'.thisN'
p556
I61
sS'.thisIndex'
p557
I5
sg15
(lp558
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp559
g16
(lp560
S'd'
asg18
S'N'
sS'.thisRepN'
p561
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p562
I2
sS'.thisN'
p563
I62
sS'.thisIndex'
p564
I11
sg15
(lp565
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp566
S'space'
p567
asg95
I11
sa(dp568
g16
(lp569
S'd'
asg18
S'Y'
sS'.thisRepN'
p570
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p571
I3
sS'.thisN'
p572
I63
sS'.thisIndex'
p573
I14
sg15
(lp574
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp575
g16
(lp576
S'k'
asg18
S'N'
sS'.thisRepN'
p577
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p578
I4
sS'.thisN'
p579
I64
sS'.thisIndex'
p580
I9
sg15
(lp581
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp582
g16
(lp583
S'd'
asg18
S'N'
sS'.thisRepN'
p584
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p585
I5
sS'.thisN'
p586
I65
sS'.thisIndex'
p587
I12
sg15
(lp588
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp589
g16
(lp590
S'k'
asg18
S'Y'
sS'.thisRepN'
p591
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p592
I6
sS'.thisN'
p593
I66
sS'.thisIndex'
p594
I3
sg15
(lp595
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp596
S'space'
p597
asg95
I3
sa(dp598
g16
(lp599
S'd'
asg18
S'N'
sS'.thisRepN'
p600
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p601
I7
sS'.thisN'
p602
I67
sS'.thisIndex'
p603
I0
sg15
(lp604
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp605
g16
(lp606
S'd'
asg18
S'Y'
sS'.thisRepN'
p607
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p608
I8
sS'.thisN'
p609
I68
sS'.thisIndex'
p610
I9
sg15
(lp611
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp612
S'space'
p613
asg95
I9
sa(dp614
g16
(lp615
S'd'
asg18
S'N'
sS'.thisRepN'
p616
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p617
I9
sS'.thisN'
p618
I69
sS'.thisIndex'
p619
I12
sg15
(lp620
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp621
S'space'
p622
asg95
I12
sa(dp623
g16
(lp624
S'd'
asg18
S'N'
sS'.thisRepN'
p625
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p626
I10
sS'.thisN'
p627
I70
sS'.thisIndex'
p628
I4
sg15
(lp629
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp630
g16
(lp631
S'k'
asg18
S'Y'
sS'.thisRepN'
p632
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p633
I11
sS'.thisN'
p634
I71
sS'.thisIndex'
p635
I13
sg15
(lp636
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I13
sa(dp637
g16
(lp638
S'd'
asg18
S'N'
sS'.thisRepN'
p639
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p640
I12
sS'.thisN'
p641
I72
sS'.thisIndex'
p642
I12
sg15
(lp643
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp644
g16
(lp645
S'd'
asg18
S'Y'
sS'.thisRepN'
p646
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p647
I13
sS'.thisN'
p648
I73
sS'.thisIndex'
p649
I1
sg15
(lp650
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp651
g16
(lp652
S'k'
asg18
S'N'
sS'.thisRepN'
p653
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p654
I14
sS'.thisN'
p655
I74
sS'.thisIndex'
p656
I10
sg15
(lp657
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I10
sa(dp658
g16
(lp659
S'd'
asg18
S'N'
sS'.thisRepN'
p660
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p661
I0
sS'.thisN'
p662
I75
sS'.thisIndex'
p663
I4
sg15
(lp664
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp665
g16
(lp666
S'k'
asg18
S'Y'
sS'.thisRepN'
p667
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p668
I1
sS'.thisN'
p669
I76
sS'.thisIndex'
p670
I5
sg15
(lp671
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp672
g16
(lp673
S'k'
asg18
S'N'
sS'.thisRepN'
p674
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p675
I2
sS'.thisN'
p676
I77
sS'.thisIndex'
p677
I10
sg15
(lp678
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp679
g16
(lp680
S'k'
asg18
S'N'
sS'.thisRepN'
p681
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p682
I3
sS'.thisN'
p683
I78
sS'.thisIndex'
p684
I11
sg15
(lp685
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp686
g16
(lp687
S'd'
asg18
S'N'
sS'.thisRepN'
p688
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p689
I4
sS'.thisN'
p690
I79
sS'.thisIndex'
p691
I2
sg15
(lp692
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp693
g16
(lp694
S'k'
asg18
S'N'
sS'.thisRepN'
p695
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p696
I5
sS'.thisN'
p697
I80
sS'.thisIndex'
p698
I5
sg15
(lp699
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp700
g16
(lp701
S'k'
asg18
S'Y'
sS'.thisRepN'
p702
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p703
I6
sS'.thisN'
p704
I81
sS'.thisIndex'
p705
I11
sg15
(lp706
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp707
S'space'
p708
asg95
I11
sa(dp709
g16
(lp710
S'k'
asg18
S'Y'
sS'.thisRepN'
p711
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p712
I7
sS'.thisN'
p713
I82
sS'.thisIndex'
p714
I4
sg15
(lp715
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp716
S'space'
p717
asg95
I4
sa(dp718
g16
(lp719
S'k'
asg18
S'N'
sS'.thisRepN'
p720
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p721
I8
sS'.thisN'
p722
I83
sS'.thisIndex'
p723
I9
sg15
(lp724
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp725
g16
(lp726
S'k'
asg18
S'N'
sS'.thisRepN'
p727
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p728
I9
sS'.thisN'
p729
I84
sS'.thisIndex'
p730
I2
sg15
(lp731
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp732
g16
(lp733
S'k'
asg18
S'N'
sS'.thisRepN'
p734
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p735
I10
sS'.thisN'
p736
I85
sS'.thisIndex'
p737
I5
sg15
(lp738
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp739
S'space'
p740
asg95
I5
sa(dp741
g16
(lp742
S'k'
asg18
S'N'
sS'.thisRepN'
p743
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p744
I11
sS'.thisN'
p745
I86
sS'.thisIndex'
p746
I13
sg15
(lp747
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I13
sa(dp748
g16
(lp749
S'k'
asg18
S'N'
sS'.thisRepN'
p750
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p751
I12
sS'.thisN'
p752
I87
sS'.thisIndex'
p753
I1
sg15
(lp754
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp755
g16
(lp756
S'd'
asg18
S'Y'
sS'.thisRepN'
p757
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p758
I13
sS'.thisN'
p759
I88
sS'.thisIndex'
p760
I2
sg15
(lp761
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp762
g16
(lp763
S'k'
asg18
S'N'
sS'.thisRepN'
p764
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p765
I14
sS'.thisN'
p766
I89
sS'.thisIndex'
p767
I0
sg15
(lp768
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp769
g16
(lp770
S'k'
asg18
S'Y'
sS'.thisRepN'
p771
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p772
I0
sS'.thisN'
p773
I90
sS'.thisIndex'
p774
I5
sg15
(lp775
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp776
S'space'
p777
asg95
I5
sa(dp778
g16
(lp779
S'k'
asg18
S'Y'
sS'.thisRepN'
p780
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p781
I1
sS'.thisN'
p782
I91
sS'.thisIndex'
p783
I0
sg15
(lp784
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp785
g16
(lp786
S'd'
asg18
S'Y'
sS'.thisRepN'
p787
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p788
I2
sS'.thisN'
p789
I92
sS'.thisIndex'
p790
I10
sg15
(lp791
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp792
g16
(lp793
S'k'
asg18
S'Y'
sS'.thisRepN'
p794
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p795
I3
sS'.thisN'
p796
I93
sS'.thisIndex'
p797
I6
sg15
(lp798
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp799
S'space'
p800
asg95
I6
sa(dp801
g16
(lp802
S'd'
asg18
S'Y'
sS'.thisRepN'
p803
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p804
I4
sS'.thisN'
p805
I94
sS'.thisIndex'
p806
I9
sg15
(lp807
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp808
S'space'
p809
asg95
I9
sa(dp810
g16
(lp811
S'k'
asg18
S'N'
sS'.thisRepN'
p812
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p813
I5
sS'.thisN'
p814
I95
sS'.thisIndex'
p815
I7
sg15
(lp816
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp817
g16
(lp818
S'd'
asg18
S'N'
sS'.thisRepN'
p819
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p820
I6
sS'.thisN'
p821
I96
sS'.thisIndex'
p822
I11
sg15
(lp823
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp824
g16
(lp825
S'k'
asg18
S'Y'
sS'.thisRepN'
p826
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p827
I7
sS'.thisN'
p828
I97
sS'.thisIndex'
p829
I1
sg15
(lp830
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp831
S'space'
p832
asg95
I1
sa(dp833
g16
(lp834
S'k'
asg18
S'N'
sS'.thisRepN'
p835
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p836
I8
sS'.thisN'
p837
I98
sS'.thisIndex'
p838
I0
sg15
(lp839
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp840
g16
(lp841
S'k'
asg18
S'Y'
sg22
I35
sS'.thisN'
p842
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p843
I9
sS'.thisRepN'
p844
I6
sg21
I44
sS'.thisIndex'
p845
I7
sg23
I20
sg15
(lp846
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp847
S'space'
p848
asg95
I7
sa(dp849
g16
(lp850
S'd'
asg95
I12
sS'.thisRepN'
p851
I6
sg30
Vm
sg31
g32
sS'.thisTrialN'
p852
I10
sS'.thisN'
p853
I100
sS'.thisIndex'
p854
I12
sg15
(lp855
S'd'
asg17
S'Y'
sg14
I3
sa(dp856
g16
(lp857
S'k'
asg95
I12
sS'.thisRepN'
p858
I6
sg30
Vm
sg31
g32
sS'.thisTrialN'
p859
I11
sS'.thisN'
p860
I101
sS'.thisIndex'
p861
I12
sg15
(lp862
S'k'
asg17
S'Y'
sg14
I3
sa(dp863
g16
(lp864
S'k'
asg18
S'Y'
sS'.thisRepN'
p865
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p866
I12
sS'.thisN'
p867
I102
sS'.thisIndex'
p868
I12
sg15
(lp869
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp870
S'space'
p871
asg95
I12
sa(dp872
g16
(lp873
S'k'
asg18
S'Y'
sS'.thisRepN'
p874
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p875
I13
sS'.thisN'
p876
I103
sS'.thisIndex'
p877
I8
sg15
(lp878
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp879
S'space'
p880
asg95
I8
sa(dp881
g16
(lp882
S'k'
asg18
S'Y'
sS'.thisRepN'
p883
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p884
I14
sS'.thisN'
p885
I104
sS'.thisIndex'
p886
I8
sg15
(lp887
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp888
S'space'
p889
asg95
I8
sa(dp890
g16
(lp891
S'd'
asg18
S'Y'
sS'.thisRepN'
p892
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p893
I0
sS'.thisN'
p894
I105
sS'.thisIndex'
p895
I1
sg15
(lp896
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp897
S'space'
p898
asg95
I1
sa(dp899
g16
(lp900
S'd'
asg18
S'N'
sS'.thisRepN'
p901
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p902
I1
sS'.thisN'
p903
I106
sS'.thisIndex'
p904
I11
sg15
(lp905
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp906
g16
(lp907
S'd'
asg18
S'Y'
sS'.thisRepN'
p908
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p909
I2
sS'.thisN'
p910
I107
sS'.thisIndex'
p911
I6
sg15
(lp912
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp913
S'space'
p914
asg95
I6
sa(dp915
g16
(lp916
S'd'
asg18
S'N'
sS'.thisRepN'
p917
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p918
I3
sS'.thisN'
p919
I108
sS'.thisIndex'
p920
I5
sg15
(lp921
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp922
g16
(lp923
S'k'
asg18
S'Y'
sS'.thisRepN'
p924
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p925
I4
sS'.thisN'
p926
I109
sS'.thisIndex'
p927
I0
sg15
(lp928
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp929
g16
(lp930
S'k'
asg18
S'Y'
sS'.thisRepN'
p931
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p932
I5
sS'.thisN'
p933
I110
sS'.thisIndex'
p934
I2
sg15
(lp935
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp936
g16
(lp937
S'k'
asg18
S'N'
sS'.thisRepN'
p938
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p939
I6
sS'.thisN'
p940
I111
sS'.thisIndex'
p941
I4
sg15
(lp942
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp943
g16
(lp944
S'd'
asg18
S'Y'
sS'.thisRepN'
p945
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p946
I7
sS'.thisN'
p947
I112
sS'.thisIndex'
p948
I6
sg15
(lp949
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp950
S'space'
p951
asg95
I6
sa(dp952
g16
(lp953
S'k'
asg18
S'N'
sS'.thisRepN'
p954
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p955
I8
sS'.thisN'
p956
I113
sS'.thisIndex'
p957
I6
sg15
(lp958
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp959
g16
(lp960
S'k'
asg18
S'N'
sS'.thisRepN'
p961
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p962
I9
sS'.thisN'
p963
I114
sS'.thisIndex'
p964
I0
sg15
(lp965
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp966
g16
(lp967
S'k'
asg18
S'N'
sS'.thisRepN'
p968
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p969
I10
sS'.thisN'
p970
I115
sS'.thisIndex'
p971
I0
sg15
(lp972
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp973
g16
(lp974
S'd'
asg18
S'Y'
sS'.thisRepN'
p975
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p976
I11
sS'.thisN'
p977
I116
sS'.thisIndex'
p978
I1
sg15
(lp979
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp980
g16
(lp981
S'k'
asg18
S'Y'
sS'.thisRepN'
p982
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p983
I12
sS'.thisN'
p984
I117
sS'.thisIndex'
p985
I5
sg15
(lp986
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp987
S'space'
p988
asg95
I5
sa(dp989
g16
(lp990
S'd'
asg18
S'N'
sS'.thisRepN'
p991
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p992
I13
sS'.thisN'
p993
I118
sS'.thisIndex'
p994
I11
sg15
(lp995
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp996
S'space'
p997
asg95
I11
sa(dp998
g16
(lp999
S'd'
asg18
S'N'
sS'.thisRepN'
p1000
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1001
I14
sS'.thisN'
p1002
I119
sS'.thisIndex'
p1003
I14
sg15
(lp1004
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I14
sa(dp1005
g16
(lp1006
S'd'
asg18
S'N'
sS'.thisRepN'
p1007
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1008
I0
sS'.thisN'
p1009
I120
sS'.thisIndex'
p1010
I0
sg15
(lp1011
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1012
S'space'
p1013
asg95
I0
sa(dp1014
g16
(lp1015
S'k'
asg18
S'Y'
sS'.thisRepN'
p1016
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1017
I1
sS'.thisN'
p1018
I121
sS'.thisIndex'
p1019
I0
sg15
(lp1020
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1021
S'space'
p1022
asg95
I0
sa(dp1023
g16
(lp1024
S'k'
asg18
S'N'
sS'.thisRepN'
p1025
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1026
I2
sS'.thisN'
p1027
I122
sS'.thisIndex'
p1028
I5
sg15
(lp1029
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1030
g16
(lp1031
S'k'
asg18
S'Y'
sS'.thisRepN'
p1032
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1033
I3
sS'.thisN'
p1034
I123
sS'.thisIndex'
p1035
I10
sg15
(lp1036
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1037
g16
(lp1038
S'd'
asg18
S'Y'
sS'.thisRepN'
p1039
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1040
I4
sS'.thisN'
p1041
I124
sS'.thisIndex'
p1042
I7
sg15
(lp1043
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1044
g16
(lp1045
S'k'
asg18
S'N'
sS'.thisRepN'
p1046
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1047
I5
sS'.thisN'
p1048
I125
sS'.thisIndex'
p1049
I12
sg15
(lp1050
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1051
g16
(lp1052
S'd'
asg18
S'N'
sS'.thisRepN'
p1053
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1054
I6
sS'.thisN'
p1055
I126
sS'.thisIndex'
p1056
I7
sg15
(lp1057
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp1058
S'space'
p1059
asg95
I7
sa(dp1060
g16
(lp1061
S'k'
asg18
S'N'
sS'.thisRepN'
p1062
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1063
I7
sS'.thisN'
p1064
I127
sS'.thisIndex'
p1065
I4
sg15
(lp1066
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1067
g16
(lp1068
S'd'
asg18
S'Y'
sS'.thisRepN'
p1069
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1070
I8
sS'.thisN'
p1071
I128
sS'.thisIndex'
p1072
I7
sg15
(lp1073
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1074
S'space'
p1075
asg95
I7
sa(dp1076
g16
(lp1077
S'd'
asg18
S'N'
sS'.thisRepN'
p1078
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1079
I9
sS'.thisN'
p1080
I129
sS'.thisIndex'
p1081
I5
sg15
(lp1082
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1083
g16
(lp1084
S'd'
asg18
S'N'
sS'.thisRepN'
p1085
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1086
I10
sS'.thisN'
p1087
I130
sS'.thisIndex'
p1088
I3
sg15
(lp1089
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1090
g16
(lp1091
S'd'
asg18
S'Y'
sS'.thisRepN'
p1092
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1093
I11
sS'.thisN'
p1094
I131
sS'.thisIndex'
p1095
I8
sg15
(lp1096
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1097
S'space'
p1098
asg95
I8
sa(dp1099
g16
(lp1100
S'd'
asg18
S'N'
sS'.thisRepN'
p1101
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1102
I12
sS'.thisN'
p1103
I132
sS'.thisIndex'
p1104
I13
sg15
(lp1105
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1106
g16
(lp1107
S'd'
asg18
S'Y'
sS'.thisRepN'
p1108
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1109
I13
sS'.thisN'
p1110
I133
sS'.thisIndex'
p1111
I3
sg15
(lp1112
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1113
S'space'
p1114
asg95
I3
sa(dp1115
g16
(lp1116
S'd'
asg18
S'Y'
sS'.thisRepN'
p1117
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1118
I14
sS'.thisN'
p1119
I134
sS'.thisIndex'
p1120
I8
sg15
(lp1121
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1122
g16
(lp1123
S'd'
asg18
S'N'
sS'.thisRepN'
p1124
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1125
I0
sS'.thisN'
p1126
I135
sS'.thisIndex'
p1127
I12
sg15
(lp1128
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1129
g16
(lp1130
S'd'
asg18
S'Y'
sS'.thisRepN'
p1131
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1132
I1
sS'.thisN'
p1133
I136
sS'.thisIndex'
p1134
I11
sg15
(lp1135
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp1136
g16
(lp1137
S'k'
asg18
S'Y'
sS'.thisRepN'
p1138
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1139
I2
sS'.thisN'
p1140
I137
sS'.thisIndex'
p1141
I0
sg15
(lp1142
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1143
g16
(lp1144
S'd'
asg18
S'Y'
sS'.thisRepN'
p1145
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1146
I3
sS'.thisN'
p1147
I138
sS'.thisIndex'
p1148
I6
sg15
(lp1149
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1150
S'space'
p1151
asg95
I6
sa(dp1152
g16
(lp1153
S'd'
asg18
S'Y'
sS'.thisRepN'
p1154
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1155
I4
sS'.thisN'
p1156
I139
sS'.thisIndex'
p1157
I14
sg15
(lp1158
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I14
sa(dp1159
g16
(lp1160
S'k'
asg18
S'Y'
sS'.thisRepN'
p1161
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1162
I5
sS'.thisN'
p1163
I140
sS'.thisIndex'
p1164
I8
sg15
(lp1165
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1166
g16
(lp1167
S'k'
asg18
S'Y'
sS'.thisRepN'
p1168
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1169
I6
sS'.thisN'
p1170
I141
sS'.thisIndex'
p1171
I11
sg15
(lp1172
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1173
S'space'
p1174
asg95
I11
sa(dp1175
g16
(lp1176
S'd'
asg18
S'N'
sS'.thisRepN'
p1177
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1178
I7
sS'.thisN'
p1179
I142
sS'.thisIndex'
p1180
I1
sg15
(lp1181
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1182
g16
(lp1183
S'k'
asg18
S'Y'
sS'.thisRepN'
p1184
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1185
I8
sS'.thisN'
p1186
I143
sS'.thisIndex'
p1187
I1
sg15
(lp1188
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1189
S'space'
p1190
asg95
I1
sa(dp1191
g16
(lp1192
S'k'
asg18
S'Y'
sS'.thisRepN'
p1193
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1194
I9
sS'.thisN'
p1195
I144
sS'.thisIndex'
p1196
I6
sg15
(lp1197
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1198
g16
(lp1199
S'd'
asg18
S'N'
sS'.thisRepN'
p1200
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1201
I10
sS'.thisN'
p1202
I145
sS'.thisIndex'
p1203
I14
sg15
(lp1204
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I14
sa(dp1205
g16
(lp1206
S'd'
asg18
S'N'
sS'.thisRepN'
p1207
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1208
I11
sS'.thisN'
p1209
I146
sS'.thisIndex'
p1210
I4
sg15
(lp1211
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1212
S'space'
p1213
asg95
I4
sa(dp1214
g16
(lp1215
S'd'
asg18
S'N'
sS'.thisRepN'
p1216
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1217
I12
sS'.thisN'
p1218
I147
sS'.thisIndex'
p1219
I2
sg15
(lp1220
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1221
g16
(lp1222
S'd'
asg18
S'N'
sS'.thisRepN'
p1223
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1224
I13
sS'.thisN'
p1225
I148
sS'.thisIndex'
p1226
I8
sg15
(lp1227
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1228
g16
(lp1229
S'd'
asg18
S'N'
sg22
I33
sS'.thisN'
p1230
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1231
I14
sS'.thisRepN'
p1232
I9
sg21
I48
sS'.thisIndex'
p1233
I3
sg23
I25
sg15
(lp1234
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1235
g16
(lp1236
S'd'
asg95
I2
sS'.thisRepN'
p1237
I10
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1238
I0
sS'.thisN'
p1239
I150
sS'.thisIndex'
p1240
I2
sg15
(lp1241
S'd'
asg17
S'Y'
sg14
I4
sa(dp1242
g16
(lp1243
S'k'
asg95
I5
sS'.thisRepN'
p1244
I10
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1245
I1
sS'.thisN'
p1246
I151
sS'.thisIndex'
p1247
I5
sg15
(lp1248
S'k'
asg17
S'Y'
sg14
I4
sa(dp1249
g16
(lp1250
S'k'
asg18
S'Y'
sS'.thisRepN'
p1251
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1252
I2
sS'.thisN'
p1253
I152
sS'.thisIndex'
p1254
I2
sg15
(lp1255
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1256
S'space'
p1257
asg95
I2
sa(dp1258
g16
(lp1259
S'd'
asg18
S'N'
sS'.thisRepN'
p1260
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1261
I3
sS'.thisN'
p1262
I153
sS'.thisIndex'
p1263
I5
sg15
(lp1264
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1265
g16
(lp1266
S'k'
asg18
S'N'
sS'.thisRepN'
p1267
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1268
I4
sS'.thisN'
p1269
I154
sS'.thisIndex'
p1270
I13
sg15
(lp1271
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1272
g16
(lp1273
S'd'
asg18
S'N'
sS'.thisRepN'
p1274
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1275
I5
sS'.thisN'
p1276
I155
sS'.thisIndex'
p1277
I6
sg15
(lp1278
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1279
g16
(lp1280
S'k'
asg18
S'N'
sS'.thisRepN'
p1281
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1282
I6
sS'.thisN'
p1283
I156
sS'.thisIndex'
p1284
I7
sg15
(lp1285
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1286
g16
(lp1287
S'd'
asg18
S'Y'
sS'.thisRepN'
p1288
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1289
I7
sS'.thisN'
p1290
I157
sS'.thisIndex'
p1291
I11
sg15
(lp1292
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1293
g16
(lp1294
S'd'
asg18
S'N'
sS'.thisRepN'
p1295
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1296
I8
sS'.thisN'
p1297
I158
sS'.thisIndex'
p1298
I2
sg15
(lp1299
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1300
g16
(lp1301
S'k'
asg18
S'Y'
sS'.thisRepN'
p1302
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1303
I9
sS'.thisN'
p1304
I159
sS'.thisIndex'
p1305
I12
sg15
(lp1306
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1307
S'space'
p1308
asg95
I12
sa(dp1309
g16
(lp1310
S'k'
asg18
S'N'
sS'.thisRepN'
p1311
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1312
I10
sS'.thisN'
p1313
I160
sS'.thisIndex'
p1314
I12
sg15
(lp1315
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1316
g16
(lp1317
S'k'
asg18
S'N'
sS'.thisRepN'
p1318
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1319
I11
sS'.thisN'
p1320
I161
sS'.thisIndex'
p1321
I0
sg15
(lp1322
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1323
g16
(lp1324
S'k'
asg18
S'N'
sS'.thisRepN'
p1325
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1326
I12
sS'.thisN'
p1327
I162
sS'.thisIndex'
p1328
I8
sg15
(lp1329
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1330
g16
(lp1331
S'k'
asg18
S'Y'
sS'.thisRepN'
p1332
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1333
I13
sS'.thisN'
p1334
I163
sS'.thisIndex'
p1335
I12
sg15
(lp1336
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1337
S'space'
p1338
asg95
I12
sa(dp1339
g16
(lp1340
S'k'
asg18
S'N'
sS'.thisRepN'
p1341
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1342
I14
sS'.thisN'
p1343
I164
sS'.thisIndex'
p1344
I14
sg15
(lp1345
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I14
sa(dp1346
g16
(lp1347
S'd'
asg18
S'Y'
sS'.thisRepN'
p1348
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1349
I0
sS'.thisN'
p1350
I165
sS'.thisIndex'
p1351
I9
sg15
(lp1352
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1353
S'space'
p1354
asg95
I9
sa(dp1355
g16
(lp1356
S'k'
asg18
S'Y'
sS'.thisRepN'
p1357
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1358
I1
sS'.thisN'
p1359
I166
sS'.thisIndex'
p1360
I14
sg15
(lp1361
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1362
S'space'
p1363
asg95
I14
sa(dp1364
g16
(lp1365
S'd'
asg18
S'Y'
sS'.thisRepN'
p1366
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1367
I2
sS'.thisN'
p1368
I167
sS'.thisIndex'
p1369
I6
sg15
(lp1370
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1371
S'space'
p1372
asg95
I6
sa(dp1373
g16
(lp1374
S'k'
asg18
S'Y'
sS'.thisRepN'
p1375
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1376
I3
sS'.thisN'
p1377
I168
sS'.thisIndex'
p1378
I8
sg15
(lp1379
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1380
S'space'
p1381
asg95
I8
sa(dp1382
g16
(lp1383
S'd'
asg18
S'N'
sS'.thisRepN'
p1384
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1385
I4
sS'.thisN'
p1386
I169
sS'.thisIndex'
p1387
I10
sg15
(lp1388
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1389
g16
(lp1390
S'k'
asg18
S'Y'
sS'.thisRepN'
p1391
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1392
I5
sS'.thisN'
p1393
I170
sS'.thisIndex'
p1394
I0
sg15
(lp1395
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1396
S'space'
p1397
asg95
I0
sa(dp1398
g16
(lp1399
S'k'
asg18
S'Y'
sS'.thisRepN'
p1400
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1401
I6
sS'.thisN'
p1402
I171
sS'.thisIndex'
p1403
I5
sg15
(lp1404
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1405
S'space'
p1406
asg95
I5
sa(dp1407
g16
(lp1408
S'd'
asg18
S'Y'
sS'.thisRepN'
p1409
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1410
I7
sS'.thisN'
p1411
I172
sS'.thisIndex'
p1412
I4
sg15
(lp1413
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1414
S'space'
p1415
asg95
I4
sa(dp1416
g16
(lp1417
S'k'
asg18
S'N'
sS'.thisRepN'
p1418
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1419
I8
sS'.thisN'
p1420
I173
sS'.thisIndex'
p1421
I0
sg15
(lp1422
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1423
g16
(lp1424
S'k'
asg18
S'N'
sS'.thisRepN'
p1425
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1426
I9
sS'.thisN'
p1427
I174
sS'.thisIndex'
p1428
I4
sg15
(lp1429
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1430
g16
(lp1431
S'k'
asg18
S'Y'
sS'.thisRepN'
p1432
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1433
I10
sS'.thisN'
p1434
I175
sS'.thisIndex'
p1435
I4
sg15
(lp1436
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1437
S'space'
p1438
asg95
I4
sa(dp1439
g16
(lp1440
S'k'
asg18
S'N'
sS'.thisRepN'
p1441
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1442
I11
sS'.thisN'
p1443
I176
sS'.thisIndex'
p1444
I8
sg15
(lp1445
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1446
g16
(lp1447
S'd'
asg18
S'Y'
sS'.thisRepN'
p1448
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1449
I12
sS'.thisN'
p1450
I177
sS'.thisIndex'
p1451
I9
sg15
(lp1452
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1453
S'space'
p1454
asg95
I9
sa(dp1455
g16
(lp1456
S'k'
asg18
S'Y'
sS'.thisRepN'
p1457
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1458
I13
sS'.thisN'
p1459
I178
sS'.thisIndex'
p1460
I3
sg15
(lp1461
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1462
g16
(lp1463
S'd'
asg18
S'N'
sS'.thisRepN'
p1464
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1465
I14
sS'.thisN'
p1466
I179
sS'.thisIndex'
p1467
I12
sg15
(lp1468
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1469
g16
(lp1470
S'k'
asg18
S'Y'
sS'.thisRepN'
p1471
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1472
I0
sS'.thisN'
p1473
I180
sS'.thisIndex'
p1474
I2
sg15
(lp1475
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1476
S'space'
p1477
asg95
I2
sa(dp1478
g16
(lp1479
S'k'
asg18
S'N'
sS'.thisRepN'
p1480
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1481
I1
sS'.thisN'
p1482
I181
sS'.thisIndex'
p1483
I10
sg15
(lp1484
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1485
g16
(lp1486
S'k'
asg18
S'Y'
sS'.thisRepN'
p1487
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1488
I2
sS'.thisN'
p1489
I182
sS'.thisIndex'
p1490
I2
sg15
(lp1491
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1492
S'space'
p1493
asg95
I2
sa(dp1494
g16
(lp1495
S'k'
asg18
S'N'
sS'.thisRepN'
p1496
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1497
I3
sS'.thisN'
p1498
I183
sS'.thisIndex'
p1499
I13
sg15
(lp1500
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1501
g16
(lp1502
S'k'
asg18
S'N'
sS'.thisRepN'
p1503
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1504
I4
sS'.thisN'
p1505
I184
sS'.thisIndex'
p1506
I6
sg15
(lp1507
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1508
g16
(lp1509
S'k'
asg18
S'Y'
sS'.thisRepN'
p1510
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1511
I5
sS'.thisN'
p1512
I185
sS'.thisIndex'
p1513
I14
sg15
(lp1514
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I14
sa(dp1515
g16
(lp1516
S'k'
asg18
S'Y'
sS'.thisRepN'
p1517
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1518
I6
sS'.thisN'
p1519
I186
sS'.thisIndex'
p1520
I14
sg15
(lp1521
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1522
S'space'
p1523
asg95
I14
sa(dp1524
g16
(lp1525
S'd'
asg18
S'N'
sS'.thisRepN'
p1526
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1527
I7
sS'.thisN'
p1528
I187
sS'.thisIndex'
p1529
I7
sg15
(lp1530
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1531
g16
(lp1532
S'd'
asg18
S'Y'
sS'.thisRepN'
p1533
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1534
I8
sS'.thisN'
p1535
I188
sS'.thisIndex'
p1536
I14
sg15
(lp1537
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1538
S'space'
p1539
asg95
I14
sa(dp1540
g16
(lp1541
S'k'
asg18
S'N'
sS'.thisRepN'
p1542
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1543
I9
sS'.thisN'
p1544
I189
sS'.thisIndex'
p1545
I7
sg15
(lp1546
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1547
g16
(lp1548
S'k'
asg18
S'Y'
sS'.thisRepN'
p1549
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1550
I10
sS'.thisN'
p1551
I190
sS'.thisIndex'
p1552
I12
sg15
(lp1553
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1554
S'space'
p1555
asg95
I12
sa(dp1556
g16
(lp1557
S'd'
asg18
S'Y'
sS'.thisRepN'
p1558
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1559
I11
sS'.thisN'
p1560
I191
sS'.thisIndex'
p1561
I14
sg15
(lp1562
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1563
S'space'
p1564
asg95
I14
sa(dp1565
g16
(lp1566
S'd'
asg18
S'N'
sS'.thisRepN'
p1567
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1568
I12
sS'.thisN'
p1569
I192
sS'.thisIndex'
p1570
I10
sg15
(lp1571
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1572
g16
(lp1573
S'k'
asg18
S'Y'
sS'.thisRepN'
p1574
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1575
I13
sS'.thisN'
p1576
I193
sS'.thisIndex'
p1577
I1
sg15
(lp1578
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1579
S'space'
p1580
asg95
I1
sa(dp1581
g16
(lp1582
S'd'
asg18
S'Y'
sS'.thisRepN'
p1583
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1584
I14
sS'.thisN'
p1585
I194
sS'.thisIndex'
p1586
I1
sg15
(lp1587
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1588
S'space'
p1589
asg95
I1
sa(dp1590
g16
(lp1591
S'd'
asg18
S'N'
sS'.thisRepN'
p1592
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1593
I0
sS'.thisN'
p1594
I195
sS'.thisIndex'
p1595
I13
sg15
(lp1596
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1597
g16
(lp1598
S'd'
asg18
S'Y'
sS'.thisRepN'
p1599
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1600
I1
sS'.thisN'
p1601
I196
sS'.thisIndex'
p1602
I6
sg15
(lp1603
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1604
S'space'
p1605
asg95
I6
sa(dp1606
g16
(lp1607
S'd'
asg18
S'Y'
sS'.thisRepN'
p1608
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1609
I2
sS'.thisN'
p1610
I197
sS'.thisIndex'
p1611
I6
sg15
(lp1612
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1613
S'space'
p1614
asg95
I6
sa(dp1615
g16
(lp1616
S'k'
asg18
S'N'
sS'.thisRepN'
p1617
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1618
I3
sS'.thisN'
p1619
I198
sS'.thisIndex'
p1620
I13
sg15
(lp1621
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1622
g16
(lp1623
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p1624
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1625
I4
sS'.thisRepN'
p1626
I13
sg21
I50
sS'.thisIndex'
p1627
I11
sg23
I25
sg15
(lp1628
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1629
g16
(lp1630
S'd'
asg95
I3
sS'.thisRepN'
p1631
I13
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1632
I5
sS'.thisN'
p1633
I200
sS'.thisIndex'
p1634
I3
sg15
(lp1635
S'd'
asg17
S'Y'
sg14
I5
sa(dp1636
g16
(lp1637
S'k'
asg95
I0
sS'.thisRepN'
p1638
I13
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1639
I6
sS'.thisN'
p1640
I201
sS'.thisIndex'
p1641
I0
sg15
(lp1642
S'k'
asg17
S'Y'
sg14
I5
sa(dp1643
g16
(lp1644
S'k'
asg18
S'Y'
sS'.thisRepN'
p1645
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1646
I7
sS'.thisN'
p1647
I202
sS'.thisIndex'
p1648
I5
sg15
(lp1649
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1650
S'space'
p1651
asg95
I5
sa(dp1652
g16
(lp1653
S'd'
asg18
S'Y'
sS'.thisRepN'
p1654
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1655
I8
sS'.thisN'
p1656
I203
sS'.thisIndex'
p1657
I13
sg15
(lp1658
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1659
S'space'
p1660
asg95
I13
sa(dp1661
g16
(lp1662
S'd'
asg18
S'Y'
sS'.thisRepN'
p1663
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1664
I9
sS'.thisN'
p1665
I204
sS'.thisIndex'
p1666
I4
sg15
(lp1667
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1668
S'space'
p1669
asg95
I4
sa(dp1670
g16
(lp1671
S'k'
asg18
S'Y'
sS'.thisRepN'
p1672
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1673
I10
sS'.thisN'
p1674
I205
sS'.thisIndex'
p1675
I12
sg15
(lp1676
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1677
S'space'
p1678
asg95
I12
sa(dp1679
g16
(lp1680
S'k'
asg18
S'Y'
sS'.thisRepN'
p1681
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1682
I11
sS'.thisN'
p1683
I206
sS'.thisIndex'
p1684
I9
sg15
(lp1685
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1686
S'space'
p1687
asg95
I9
sa(dp1688
g16
(lp1689
S'd'
asg18
S'Y'
sS'.thisRepN'
p1690
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1691
I12
sS'.thisN'
p1692
I207
sS'.thisIndex'
p1693
I4
sg15
(lp1694
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1695
S'space'
p1696
asg95
I4
sa(dp1697
g16
(lp1698
S'k'
asg18
S'N'
sS'.thisRepN'
p1699
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1700
I13
sS'.thisN'
p1701
I208
sS'.thisIndex'
p1702
I14
sg15
(lp1703
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1704
g16
(lp1705
S'd'
asg18
S'N'
sS'.thisRepN'
p1706
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1707
I14
sS'.thisN'
p1708
I209
sS'.thisIndex'
p1709
I12
sg15
(lp1710
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1711
g16
(lp1712
S'k'
asg18
S'Y'
sS'.thisRepN'
p1713
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1714
I0
sS'.thisN'
p1715
I210
sS'.thisIndex'
p1716
I12
sg15
(lp1717
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1718
g16
(lp1719
S'd'
asg18
S'Y'
sS'.thisRepN'
p1720
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1721
I1
sS'.thisN'
p1722
I211
sS'.thisIndex'
p1723
I0
sg15
(lp1724
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1725
S'space'
p1726
asg95
I0
sa(dp1727
g16
(lp1728
S'k'
asg18
S'N'
sS'.thisRepN'
p1729
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1730
I2
sS'.thisN'
p1731
I212
sS'.thisIndex'
p1732
I13
sg15
(lp1733
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1734
g16
(lp1735
S'd'
asg18
S'N'
sS'.thisRepN'
p1736
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1737
I3
sS'.thisN'
p1738
I213
sS'.thisIndex'
p1739
I13
sg15
(lp1740
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1741
g16
(lp1742
S'd'
asg18
S'N'
sS'.thisRepN'
p1743
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1744
I4
sS'.thisN'
p1745
I214
sS'.thisIndex'
p1746
I9
sg15
(lp1747
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1748
g16
(lp1749
S'd'
asg18
S'N'
sS'.thisRepN'
p1750
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1751
I5
sS'.thisN'
p1752
I215
sS'.thisIndex'
p1753
I9
sg15
(lp1754
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1755
S'space'
p1756
asg95
I9
sa(dp1757
g16
(lp1758
S'd'
asg18
S'Y'
sS'.thisRepN'
p1759
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1760
I6
sS'.thisN'
p1761
I216
sS'.thisIndex'
p1762
I1
sg15
(lp1763
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1764
S'space'
p1765
asg95
I1
sa(dp1766
g16
(lp1767
S'k'
asg18
S'N'
sS'.thisRepN'
p1768
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1769
I7
sS'.thisN'
p1770
I217
sS'.thisIndex'
p1771
I4
sg15
(lp1772
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1773
g16
(lp1774
S'k'
asg18
S'N'
sS'.thisRepN'
p1775
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1776
I8
sS'.thisN'
p1777
I218
sS'.thisIndex'
p1778
I8
sg15
(lp1779
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1780
g16
(lp1781
S'k'
asg18
S'Y'
sS'.thisRepN'
p1782
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1783
I9
sS'.thisN'
p1784
I219
sS'.thisIndex'
p1785
I3
sg15
(lp1786
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1787
S'space'
p1788
asg95
I3
sa(dp1789
g16
(lp1790
S'k'
asg18
S'Y'
sS'.thisRepN'
p1791
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1792
I10
sS'.thisN'
p1793
I220
sS'.thisIndex'
p1794
I6
sg15
(lp1795
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1796
S'space'
p1797
asg95
I6
sa(dp1798
g16
(lp1799
S'k'
asg18
S'Y'
sS'.thisRepN'
p1800
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1801
I11
sS'.thisN'
p1802
I221
sS'.thisIndex'
p1803
I10
sg15
(lp1804
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1805
S'space'
p1806
asg95
I10
sa(dp1807
g16
(lp1808
S'k'
asg18
S'N'
sS'.thisRepN'
p1809
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1810
I12
sS'.thisN'
p1811
I222
sS'.thisIndex'
p1812
I5
sg15
(lp1813
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1814
g16
(lp1815
S'k'
asg18
S'Y'
sS'.thisRepN'
p1816
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1817
I13
sS'.thisN'
p1818
I223
sS'.thisIndex'
p1819
I4
sg15
(lp1820
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1821
S'space'
p1822
asg95
I4
sa(dp1823
g16
(lp1824
S'k'
asg18
S'N'
sS'.thisRepN'
p1825
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1826
I14
sS'.thisN'
p1827
I224
sS'.thisIndex'
p1828
I12
sg15
(lp1829
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1830
g16
(lp1831
S'k'
asg18
S'N'
sS'.thisRepN'
p1832
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1833
I0
sS'.thisN'
p1834
I225
sS'.thisIndex'
p1835
I2
sg15
(lp1836
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1837
g16
(lp1838
S'd'
asg18
S'Y'
sS'.thisRepN'
p1839
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1840
I1
sS'.thisN'
p1841
I226
sS'.thisIndex'
p1842
I10
sg15
(lp1843
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1844
S'space'
p1845
asg95
I10
sa(dp1846
g16
(lp1847
S'd'
asg18
S'Y'
sS'.thisRepN'
p1848
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1849
I2
sS'.thisN'
p1850
I227
sS'.thisIndex'
p1851
I5
sg15
(lp1852
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1853
S'space'
p1854
asg95
I5
sa(dp1855
g16
(lp1856
S'd'
asg18
S'N'
sS'.thisRepN'
p1857
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1858
I3
sS'.thisN'
p1859
I228
sS'.thisIndex'
p1860
I0
sg15
(lp1861
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1862
g16
(lp1863
S'k'
asg18
S'N'
sS'.thisRepN'
p1864
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1865
I4
sS'.thisN'
p1866
I229
sS'.thisIndex'
p1867
I11
sg15
(lp1868
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I11
sa(dp1869
g16
(lp1870
S'd'
asg18
S'Y'
sS'.thisRepN'
p1871
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1872
I5
sS'.thisN'
p1873
I230
sS'.thisIndex'
p1874
I11
sg15
(lp1875
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1876
S'space'
p1877
asg95
I11
sa(dp1878
g16
(lp1879
S'd'
asg18
S'N'
sS'.thisRepN'
p1880
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1881
I6
sS'.thisN'
p1882
I231
sS'.thisIndex'
p1883
I0
sg15
(lp1884
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1885
g16
(lp1886
S'k'
asg18
S'N'
sS'.thisRepN'
p1887
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1888
I7
sS'.thisN'
p1889
I232
sS'.thisIndex'
p1890
I12
sg15
(lp1891
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1892
g16
(lp1893
S'd'
asg18
S'Y'
sS'.thisRepN'
p1894
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1895
I8
sS'.thisN'
p1896
I233
sS'.thisIndex'
p1897
I1
sg15
(lp1898
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1899
S'space'
p1900
asg95
I1
sa(dp1901
g16
(lp1902
S'k'
asg18
S'N'
sS'.thisRepN'
p1903
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1904
I9
sS'.thisN'
p1905
I234
sS'.thisIndex'
p1906
I2
sg15
(lp1907
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1908
g16
(lp1909
S'k'
asg18
S'Y'
sS'.thisRepN'
p1910
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1911
I10
sS'.thisN'
p1912
I235
sS'.thisIndex'
p1913
I6
sg15
(lp1914
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1915
S'space'
p1916
asg95
I6
sa(dp1917
g16
(lp1918
S'k'
asg18
S'Y'
sS'.thisRepN'
p1919
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1920
I11
sS'.thisN'
p1921
I236
sS'.thisIndex'
p1922
I12
sg15
(lp1923
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1924
S'space'
p1925
asg95
I12
sa(dp1926
g16
(lp1927
S'd'
asg18
S'N'
sS'.thisRepN'
p1928
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1929
I12
sS'.thisN'
p1930
I237
sS'.thisIndex'
p1931
I3
sg15
(lp1932
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1933
g16
(lp1934
S'k'
asg18
S'Y'
sS'.thisRepN'
p1935
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1936
I13
sS'.thisN'
p1937
I238
sS'.thisIndex'
p1938
I10
sg15
(lp1939
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1940
S'space'
p1941
asg95
I10
sa(dp1942
g16
(lp1943
S'd'
asg18
S'N'
sS'.thisRepN'
p1944
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1945
I14
sS'.thisN'
p1946
I239
sS'.thisIndex'
p1947
I2
sg15
(lp1948
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1949
g16
(lp1950
S'k'
asg18
S'Y'
sS'.thisRepN'
p1951
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1952
I0
sS'.thisN'
p1953
I240
sS'.thisIndex'
p1954
I4
sg15
(lp1955
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1956
S'space'
p1957
asg95
I4
sa(dp1958
g16
(lp1959
S'k'
asg18
S'N'
sS'.thisRepN'
p1960
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1961
I1
sS'.thisN'
p1962
I241
sS'.thisIndex'
p1963
I5
sg15
(lp1964
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1965
g16
(lp1966
S'k'
asg18
S'Y'
sS'.thisRepN'
p1967
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1968
I2
sS'.thisN'
p1969
I242
sS'.thisIndex'
p1970
I2
sg15
(lp1971
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1972
S'space'
p1973
asg95
I2
sa(dp1974
g16
(lp1975
S'k'
asg18
S'Y'
sS'.thisRepN'
p1976
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1977
I3
sS'.thisN'
p1978
I243
sS'.thisIndex'
p1979
I6
sg15
(lp1980
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1981
S'space'
p1982
asg95
I6
sa(dp1983
g16
(lp1984
S'k'
asg18
S'N'
sS'.thisRepN'
p1985
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1986
I4
sS'.thisN'
p1987
I244
sS'.thisIndex'
p1988
I9
sg15
(lp1989
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1990
g16
(lp1991
S'd'
asg18
S'N'
sS'.thisRepN'
p1992
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1993
I5
sS'.thisN'
p1994
I245
sS'.thisIndex'
p1995
I8
sg15
(lp1996
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1997
g16
(lp1998
S'd'
asg18
S'Y'
sS'.thisRepN'
p1999
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2000
I6
sS'.thisN'
p2001
I246
sS'.thisIndex'
p2002
I14
sg15
(lp2003
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp2004
S'space'
p2005
asg95
I14
sa(dp2006
g16
(lp2007
S'd'
asg18
S'N'
sS'.thisRepN'
p2008
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2009
I7
sS'.thisN'
p2010
I247
sS'.thisIndex'
p2011
I4
sg15
(lp2012
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp2013
g16
(lp2014
S'k'
asg18
S'N'
sS'.thisRepN'
p2015
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2016
I8
sS'.thisN'
p2017
I248
sS'.thisIndex'
p2018
I9
sg15
(lp2019
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp2020
g16
(lp2021
S'd'
asg18
S'Y'
sg22
I46
sS'.thisN'
p2022
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2023
I9
sS'.thisRepN'
p2024
I16
sg21
I48
sS'.thisIndex'
p2025
I13
sg23
I25
sg15
(lp2026
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp2027
S'space'
p2028
asg95
I13
sa(dp2029
g16
(lp2030
S'k'
asg95
I11
sS'.thisRepN'
p2031
I16
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2032
I10
sS'.thisN'
p2033
I250
sS'.thisIndex'
p2034
I11
sg15
(lp2035
S'k'
asg17
S'Y'
sg14
I6
sa(dp2036
g16
(lp2037
S'k'
asg95
I10
sS'.thisRepN'
p2038
I16
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2039
I11
sS'.thisN'
p2040
I251
sS'.thisIndex'
p2041
I10
sg15
(lp2042
S'k'
asg17
S'Y'
sg14
I6
sa(dp2043
g16
(lp2044
S'k'
asg18
S'Y'
sS'.thisRepN'
p2045
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2046
I12
sS'.thisN'
p2047
I252
sS'.thisIndex'
p2048
I14
sg15
(lp2049
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2050
S'space'
p2051
asg95
I14
sa(dp2052
g16
(lp2053
S'd'
asg18
S'N'
sS'.thisRepN'
p2054
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2055
I13
sS'.thisN'
p2056
I253
sS'.thisIndex'
p2057
I0
sg15
(lp2058
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2059
g16
(lp2060
S'd'
asg18
S'Y'
sS'.thisRepN'
p2061
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2062
I14
sS'.thisN'
p2063
I254
sS'.thisIndex'
p2064
I7
sg15
(lp2065
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2066
g16
(lp2067
S'k'
asg18
S'Y'
sS'.thisRepN'
p2068
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2069
I0
sS'.thisN'
p2070
I255
sS'.thisIndex'
p2071
I6
sg15
(lp2072
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2073
S'space'
p2074
asg95
I6
sa(dp2075
g16
(lp2076
S'd'
asg18
S'Y'
sS'.thisRepN'
p2077
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2078
I1
sS'.thisN'
p2079
I256
sS'.thisIndex'
p2080
I11
sg15
(lp2081
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2082
S'space'
p2083
asg95
I11
sa(dp2084
g16
(lp2085
S'k'
asg18
S'N'
sS'.thisRepN'
p2086
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2087
I2
sS'.thisN'
p2088
I257
sS'.thisIndex'
p2089
I6
sg15
(lp2090
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2091
g16
(lp2092
S'd'
asg18
S'Y'
sS'.thisRepN'
p2093
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2094
I3
sS'.thisN'
p2095
I258
sS'.thisIndex'
p2096
I2
sg15
(lp2097
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2098
S'space'
p2099
asg95
I2
sa(dp2100
g16
(lp2101
S'k'
asg18
S'Y'
sS'.thisRepN'
p2102
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2103
I4
sS'.thisN'
p2104
I259
sS'.thisIndex'
p2105
I4
sg15
(lp2106
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2107
S'space'
p2108
asg95
I4
sa(dp2109
g16
(lp2110
S'k'
asg18
S'N'
sS'.thisRepN'
p2111
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2112
I5
sS'.thisN'
p2113
I260
sS'.thisIndex'
p2114
I5
sg15
(lp2115
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2116
g16
(lp2117
S'k'
asg18
S'N'
sS'.thisRepN'
p2118
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2119
I6
sS'.thisN'
p2120
I261
sS'.thisIndex'
p2121
I12
sg15
(lp2122
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2123
g16
(lp2124
S'd'
asg18
S'Y'
sS'.thisRepN'
p2125
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2126
I7
sS'.thisN'
p2127
I262
sS'.thisIndex'
p2128
I1
sg15
(lp2129
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2130
S'space'
p2131
asg95
I1
sa(dp2132
g16
(lp2133
S'd'
asg18
S'Y'
sS'.thisRepN'
p2134
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2135
I8
sS'.thisN'
p2136
I263
sS'.thisIndex'
p2137
I5
sg15
(lp2138
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2139
S'k'
asg95
I5
sa(dp2140
g16
(lp2141
S'd'
asg18
S'Y'
sS'.thisRepN'
p2142
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2143
I9
sS'.thisN'
p2144
I264
sS'.thisIndex'
p2145
I7
sg15
(lp2146
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2147
g16
(lp2148
S'k'
asg18
S'Y'
sS'.thisRepN'
p2149
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2150
I10
sS'.thisN'
p2151
I265
sS'.thisIndex'
p2152
I5
sg15
(lp2153
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2154
S'space'
p2155
asg95
I5
sa(dp2156
g16
(lp2157
S'k'
asg18
S'Y'
sS'.thisRepN'
p2158
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2159
I11
sS'.thisN'
p2160
I266
sS'.thisIndex'
p2161
I11
sg15
(lp2162
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2163
S'space'
p2164
asg95
I11
sa(dp2165
g16
(lp2166
S'k'
asg18
S'Y'
sS'.thisRepN'
p2167
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2168
I12
sS'.thisN'
p2169
I267
sS'.thisIndex'
p2170
I12
sg15
(lp2171
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2172
S'space'
p2173
asg95
I12
sa(dp2174
g16
(lp2175
S'd'
asg18
S'N'
sS'.thisRepN'
p2176
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2177
I13
sS'.thisN'
p2178
I268
sS'.thisIndex'
p2179
I14
sg15
(lp2180
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I14
sa(dp2181
g16
(lp2182
S'd'
asg18
S'N'
sS'.thisRepN'
p2183
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2184
I14
sS'.thisN'
p2185
I269
sS'.thisIndex'
p2186
I14
sg15
(lp2187
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I14
sa(dp2188
g16
(lp2189
S'd'
asg18
S'N'
sS'.thisRepN'
p2190
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2191
I0
sS'.thisN'
p2192
I270
sS'.thisIndex'
p2193
I11
sg15
(lp2194
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2195
g16
(lp2196
S'k'
asg18
S'N'
sS'.thisRepN'
p2197
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2198
I1
sS'.thisN'
p2199
I271
sS'.thisIndex'
p2200
I6
sg15
(lp2201
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2202
g16
(lp2203
S'k'
asg18
S'N'
sS'.thisRepN'
p2204
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2205
I2
sS'.thisN'
p2206
I272
sS'.thisIndex'
p2207
I14
sg15
(lp2208
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2209
S'space'
p2210
asg95
I14
sa(dp2211
g16
(lp2212
S'k'
asg18
S'Y'
sS'.thisRepN'
p2213
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2214
I3
sS'.thisN'
p2215
I273
sS'.thisIndex'
p2216
I13
sg15
(lp2217
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2218
S'space'
p2219
asg95
I13
sa(dp2220
g16
(lp2221
S'd'
asg18
S'N'
sS'.thisRepN'
p2222
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2223
I4
sS'.thisN'
p2224
I274
sS'.thisIndex'
p2225
I13
sg15
(lp2226
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2227
g16
(lp2228
S'k'
asg18
S'N'
sS'.thisRepN'
p2229
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2230
I5
sS'.thisN'
p2231
I275
sS'.thisIndex'
p2232
I3
sg15
(lp2233
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2234
S'space'
p2235
asg95
I3
sa(dp2236
g16
(lp2237
S'k'
asg18
S'Y'
sS'.thisRepN'
p2238
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2239
I6
sS'.thisN'
p2240
I276
sS'.thisIndex'
p2241
I12
sg15
(lp2242
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2243
S'space'
p2244
asg95
I12
sa(dp2245
g16
(lp2246
S'k'
asg18
S'Y'
sS'.thisRepN'
p2247
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2248
I7
sS'.thisN'
p2249
I277
sS'.thisIndex'
p2250
I14
sg15
(lp2251
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2252
S'space'
p2253
asg95
I14
sa(dp2254
g16
(lp2255
S'k'
asg18
S'Y'
sS'.thisRepN'
p2256
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2257
I8
sS'.thisN'
p2258
I278
sS'.thisIndex'
p2259
I14
sg15
(lp2260
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2261
S'd'
asg95
I14
sa(dp2262
g16
(lp2263
S'k'
asg18
S'Y'
sS'.thisRepN'
p2264
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2265
I9
sS'.thisN'
p2266
I279
sS'.thisIndex'
p2267
I14
sg15
(lp2268
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2269
S'space'
p2270
asg95
I14
sa(dp2271
g16
(lp2272
S'k'
asg18
S'N'
sS'.thisRepN'
p2273
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2274
I10
sS'.thisN'
p2275
I280
sS'.thisIndex'
p2276
I10
sg15
(lp2277
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2278
g16
(lp2279
S'k'
asg18
S'Y'
sS'.thisRepN'
p2280
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2281
I11
sS'.thisN'
p2282
I281
sS'.thisIndex'
p2283
I13
sg15
(lp2284
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2285
S'space'
p2286
asg95
I13
sa(dp2287
g16
(lp2288
S'd'
asg18
S'Y'
sS'.thisRepN'
p2289
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2290
I12
sS'.thisN'
p2291
I282
sS'.thisIndex'
p2292
I9
sg15
(lp2293
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2294
S'space'
p2295
asg95
I9
sa(dp2296
g16
(lp2297
S'd'
asg18
S'N'
sS'.thisRepN'
p2298
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2299
I13
sS'.thisN'
p2300
I283
sS'.thisIndex'
p2301
I9
sg15
(lp2302
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2303
g16
(lp2304
S'k'
asg18
S'N'
sS'.thisRepN'
p2305
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2306
I14
sS'.thisN'
p2307
I284
sS'.thisIndex'
p2308
I2
sg15
(lp2309
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2310
g16
(lp2311
S'd'
asg18
S'N'
sS'.thisRepN'
p2312
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2313
I0
sS'.thisN'
p2314
I285
sS'.thisIndex'
p2315
I6
sg15
(lp2316
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2317
g16
(lp2318
S'd'
asg18
S'Y'
sS'.thisRepN'
p2319
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2320
I1
sS'.thisN'
p2321
I286
sS'.thisIndex'
p2322
I9
sg15
(lp2323
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2324
S'space'
p2325
asg95
I9
sa(dp2326
g16
(lp2327
S'd'
asg18
S'Y'
sS'.thisRepN'
p2328
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2329
I2
sS'.thisN'
p2330
I287
sS'.thisIndex'
p2331
I4
sg15
(lp2332
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2333
S'space'
p2334
asg95
I4
sa(dp2335
g16
(lp2336
S'd'
asg18
S'N'
sS'.thisRepN'
p2337
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2338
I3
sS'.thisN'
p2339
I288
sS'.thisIndex'
p2340
I0
sg15
(lp2341
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2342
g16
(lp2343
S'k'
asg18
S'N'
sS'.thisRepN'
p2344
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2345
I4
sS'.thisN'
p2346
I289
sS'.thisIndex'
p2347
I4
sg15
(lp2348
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2349
g16
(lp2350
S'd'
asg18
S'N'
sS'.thisRepN'
p2351
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2352
I5
sS'.thisN'
p2353
I290
sS'.thisIndex'
p2354
I10
sg15
(lp2355
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2356
g16
(lp2357
S'k'
asg18
S'Y'
sS'.thisRepN'
p2358
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2359
I6
sS'.thisN'
p2360
I291
sS'.thisIndex'
p2361
I4
sg15
(lp2362
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2363
S'space'
p2364
asg95
I4
sa(dp2365
g16
(lp2366
S'k'
asg18
S'N'
sS'.thisRepN'
p2367
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2368
I7
sS'.thisN'
p2369
I292
sS'.thisIndex'
p2370
I10
sg15
(lp2371
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2372
g16
(lp2373
S'd'
asg18
S'Y'
sS'.thisRepN'
p2374
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2375
I8
sS'.thisN'
p2376
I293
sS'.thisIndex'
p2377
I6
sg15
(lp2378
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2379
S'space'
p2380
asg95
I6
sa(dp2381
g16
(lp2382
S'd'
asg18
S'Y'
sS'.thisRepN'
p2383
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2384
I9
sS'.thisN'
p2385
I294
sS'.thisIndex'
p2386
I7
sg15
(lp2387
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2388
S'space'
p2389
asg95
I7
sa(dp2390
g16
(lp2391
S'k'
asg18
S'Y'
sS'.thisRepN'
p2392
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2393
I10
sS'.thisN'
p2394
I295
sS'.thisIndex'
p2395
I13
sg15
(lp2396
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2397
S'space'
p2398
asg95
I13
sa(dp2399
g16
(lp2400
S'k'
asg18
S'N'
sS'.thisRepN'
p2401
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2402
I11
sS'.thisN'
p2403
I296
sS'.thisIndex'
p2404
I9
sg15
(lp2405
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2406
g16
(lp2407
S'k'
asg18
S'N'
sS'.thisRepN'
p2408
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2409
I12
sS'.thisN'
p2410
I297
sS'.thisIndex'
p2411
I10
sg15
(lp2412
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2413
g16
(lp2414
S'd'
asg18
S'N'
sS'.thisRepN'
p2415
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2416
I13
sS'.thisN'
p2417
I298
sS'.thisIndex'
p2418
I8
sg15
(lp2419
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2420
g16
(lp2421
S'd'
asg18
S'N'
sg22
I42
sS'.thisN'
p2422
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2423
I14
sS'.thisRepN'
p2424
I19
sg21
I46
sS'.thisIndex'
p2425
I4
sg23
I25
sg15
(lp2426
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2427
g16
(lp2428
S'd'
asg95
I9
sS'.thisRepN'
p2429
I20
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2430
I0
sS'.thisN'
p2431
I300
sS'.thisIndex'
p2432
I9
sg15
(lp2433
S'd'
asg17
S'Y'
sg14
I7
sa(dp2434
g16
(lp2435
S'd'
asg95
I8
sS'.thisRepN'
p2436
I20
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2437
I1
sS'.thisN'
p2438
I301
sS'.thisIndex'
p2439
I8
sg15
(lp2440
S'd'
asg17
S'Y'
sg14
I7
sa(dp2441
g16
(lp2442
S'k'
asg18
S'Y'
sS'.thisRepN'
p2443
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2444
I2
sS'.thisN'
p2445
I302
sS'.thisIndex'
p2446
I1
sg15
(lp2447
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2448
S'space'
p2449
asg95
I1
sa(dp2450
g16
(lp2451
S'k'
asg18
S'N'
sS'.thisRepN'
p2452
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2453
I3
sS'.thisN'
p2454
I303
sS'.thisIndex'
p2455
I6
sg15
(lp2456
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2457
g16
(lp2458
S'k'
asg18
S'N'
sS'.thisRepN'
p2459
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2460
I4
sS'.thisN'
p2461
I304
sS'.thisIndex'
p2462
I5
sg15
(lp2463
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2464
g16
(lp2465
S'k'
asg18
S'Y'
sS'.thisRepN'
p2466
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2467
I5
sS'.thisN'
p2468
I305
sS'.thisIndex'
p2469
I13
sg15
(lp2470
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2471
S'space'
p2472
asg95
I13
sa(dp2473
g16
(lp2474
S'k'
asg18
S'Y'
sS'.thisRepN'
p2475
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2476
I6
sS'.thisN'
p2477
I306
sS'.thisIndex'
p2478
I6
sg15
(lp2479
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2480
S'space'
p2481
asg95
I6
sa(dp2482
g16
(lp2483
S'k'
asg18
S'Y'
sS'.thisRepN'
p2484
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2485
I7
sS'.thisN'
p2486
I307
sS'.thisIndex'
p2487
I3
sg15
(lp2488
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2489
S'space'
p2490
asg95
I3
sa(dp2491
g16
(lp2492
S'd'
asg18
S'N'
sS'.thisRepN'
p2493
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2494
I8
sS'.thisN'
p2495
I308
sS'.thisIndex'
p2496
I2
sg15
(lp2497
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2498
g16
(lp2499
S'k'
asg18
S'N'
sS'.thisRepN'
p2500
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2501
I9
sS'.thisN'
p2502
I309
sS'.thisIndex'
p2503
I12
sg15
(lp2504
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2505
g16
(lp2506
S'd'
asg18
S'N'
sS'.thisRepN'
p2507
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2508
I10
sS'.thisN'
p2509
I310
sS'.thisIndex'
p2510
I4
sg15
(lp2511
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2512
g16
(lp2513
S'k'
asg18
S'Y'
sS'.thisRepN'
p2514
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2515
I11
sS'.thisN'
p2516
I311
sS'.thisIndex'
p2517
I10
sg15
(lp2518
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2519
S'space'
p2520
asg95
I10
sa(dp2521
g16
(lp2522
S'd'
asg18
S'N'
sS'.thisRepN'
p2523
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2524
I12
sS'.thisN'
p2525
I312
sS'.thisIndex'
p2526
I9
sg15
(lp2527
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2528
g16
(lp2529
S'k'
asg18
S'Y'
sS'.thisRepN'
p2530
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2531
I13
sS'.thisN'
p2532
I313
sS'.thisIndex'
p2533
I3
sg15
(lp2534
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2535
S'space'
p2536
asg95
I3
sa(dp2537
g16
(lp2538
S'd'
asg18
S'Y'
sS'.thisRepN'
p2539
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2540
I14
sS'.thisN'
p2541
I314
sS'.thisIndex'
p2542
I2
sg15
(lp2543
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2544
S'space'
p2545
asg95
I2
sa(dp2546
g16
(lp2547
S'k'
asg18
S'N'
sS'.thisRepN'
p2548
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2549
I0
sS'.thisN'
p2550
I315
sS'.thisIndex'
p2551
I11
sg15
(lp2552
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2553
g16
(lp2554
S'd'
asg18
S'Y'
sS'.thisRepN'
p2555
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2556
I1
sS'.thisN'
p2557
I316
sS'.thisIndex'
p2558
I11
sg15
(lp2559
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2560
S'space'
p2561
asg95
I11
sa(dp2562
g16
(lp2563
S'd'
asg18
S'N'
sS'.thisRepN'
p2564
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2565
I2
sS'.thisN'
p2566
I317
sS'.thisIndex'
p2567
I5
sg15
(lp2568
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2569
g16
(lp2570
S'd'
asg18
S'N'
sS'.thisRepN'
p2571
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2572
I3
sS'.thisN'
p2573
I318
sS'.thisIndex'
p2574
I3
sg15
(lp2575
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2576
g16
(lp2577
S'k'
asg18
S'N'
sS'.thisRepN'
p2578
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2579
I4
sS'.thisN'
p2580
I319
sS'.thisIndex'
p2581
I10
sg15
(lp2582
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2583
g16
(lp2584
S'k'
asg18
S'N'
sS'.thisRepN'
p2585
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2586
I5
sS'.thisN'
p2587
I320
sS'.thisIndex'
p2588
I12
sg15
(lp2589
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2590
g16
(lp2591
S'k'
asg18
S'N'
sS'.thisRepN'
p2592
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2593
I6
sS'.thisN'
p2594
I321
sS'.thisIndex'
p2595
I5
sg15
(lp2596
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2597
g16
(lp2598
S'd'
asg18
S'N'
sS'.thisRepN'
p2599
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2600
I7
sS'.thisN'
p2601
I322
sS'.thisIndex'
p2602
I5
sg15
(lp2603
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2604
g16
(lp2605
S'd'
asg18
S'N'
sS'.thisRepN'
p2606
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2607
I8
sS'.thisN'
p2608
I323
sS'.thisIndex'
p2609
I11
sg15
(lp2610
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2611
g16
(lp2612
S'd'
asg18
S'N'
sS'.thisRepN'
p2613
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2614
I9
sS'.thisN'
p2615
I324
sS'.thisIndex'
p2616
I11
sg15
(lp2617
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2618
g16
(lp2619
S'd'
asg18
S'N'
sS'.thisRepN'
p2620
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2621
I10
sS'.thisN'
p2622
I325
sS'.thisIndex'
p2623
I5
sg15
(lp2624
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2625
g16
(lp2626
S'k'
asg18
S'N'
sS'.thisRepN'
p2627
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2628
I11
sS'.thisN'
p2629
I326
sS'.thisIndex'
p2630
I11
sg15
(lp2631
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2632
g16
(lp2633
S'd'
asg18
S'Y'
sS'.thisRepN'
p2634
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2635
I12
sS'.thisN'
p2636
I327
sS'.thisIndex'
p2637
I8
sg15
(lp2638
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2639
S'space'
p2640
asg95
I8
sa(dp2641
g16
(lp2642
S'k'
asg18
S'Y'
sS'.thisRepN'
p2643
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2644
I13
sS'.thisN'
p2645
I328
sS'.thisIndex'
p2646
I1
sg15
(lp2647
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2648
S'space'
p2649
asg95
I1
sa(dp2650
g16
(lp2651
S'd'
asg18
S'N'
sS'.thisRepN'
p2652
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2653
I14
sS'.thisN'
p2654
I329
sS'.thisIndex'
p2655
I1
sg15
(lp2656
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2657
g16
(lp2658
S'k'
asg18
S'N'
sS'.thisRepN'
p2659
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2660
I0
sS'.thisN'
p2661
I330
sS'.thisIndex'
p2662
I10
sg15
(lp2663
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2664
g16
(lp2665
S'd'
asg18
S'Y'
sS'.thisRepN'
p2666
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2667
I1
sS'.thisN'
p2668
I331
sS'.thisIndex'
p2669
I5
sg15
(lp2670
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2671
S'space'
p2672
asg95
I5
sa(dp2673
g16
(lp2674
S'd'
asg18
S'N'
sS'.thisRepN'
p2675
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2676
I2
sS'.thisN'
p2677
I332
sS'.thisIndex'
p2678
I14
sg15
(lp2679
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I14
sa(dp2680
g16
(lp2681
S'd'
asg18
S'N'
sS'.thisRepN'
p2682
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2683
I3
sS'.thisN'
p2684
I333
sS'.thisIndex'
p2685
I4
sg15
(lp2686
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2687
g16
(lp2688
S'k'
asg18
S'Y'
sS'.thisRepN'
p2689
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2690
I4
sS'.thisN'
p2691
I334
sS'.thisIndex'
p2692
I4
sg15
(lp2693
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2694
S'space'
p2695
asg95
I4
sa(dp2696
g16
(lp2697
S'k'
asg18
S'N'
sS'.thisRepN'
p2698
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2699
I5
sS'.thisN'
p2700
I335
sS'.thisIndex'
p2701
I6
sg15
(lp2702
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2703
g16
(lp2704
S'd'
asg18
S'N'
sS'.thisRepN'
p2705
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2706
I6
sS'.thisN'
p2707
I336
sS'.thisIndex'
p2708
I12
sg15
(lp2709
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2710
g16
(lp2711
S'k'
asg18
S'N'
sS'.thisRepN'
p2712
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2713
I7
sS'.thisN'
p2714
I337
sS'.thisIndex'
p2715
I7
sg15
(lp2716
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2717
g16
(lp2718
S'k'
asg18
S'Y'
sS'.thisRepN'
p2719
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2720
I8
sS'.thisN'
p2721
I338
sS'.thisIndex'
p2722
I8
sg15
(lp2723
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2724
S'space'
p2725
asg95
I8
sa(dp2726
g16
(lp2727
S'k'
asg18
S'Y'
sS'.thisRepN'
p2728
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2729
I9
sS'.thisN'
p2730
I339
sS'.thisIndex'
p2731
I0
sg15
(lp2732
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2733
S'space'
p2734
asg95
I0
sa(dp2735
g16
(lp2736
S'd'
asg18
S'Y'
sS'.thisRepN'
p2737
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2738
I10
sS'.thisN'
p2739
I340
sS'.thisIndex'
p2740
I0
sg15
(lp2741
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2742
S'space'
p2743
asg95
I0
sa(dp2744
g16
(lp2745
S'd'
asg18
S'Y'
sS'.thisRepN'
p2746
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2747
I11
sS'.thisN'
p2748
I341
sS'.thisIndex'
p2749
I9
sg15
(lp2750
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2751
S'space'
p2752
asg95
I9
sa(dp2753
g16
(lp2754
S'k'
asg18
S'Y'
sS'.thisRepN'
p2755
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2756
I12
sS'.thisN'
p2757
I342
sS'.thisIndex'
p2758
I13
sg15
(lp2759
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2760
S'space'
p2761
asg95
I13
sa(dp2762
g16
(lp2763
S'd'
asg18
S'Y'
sS'.thisRepN'
p2764
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2765
I13
sS'.thisN'
p2766
I343
sS'.thisIndex'
p2767
I3
sg15
(lp2768
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2769
S'space'
p2770
asg95
I3
sa(dp2771
g16
(lp2772
S'k'
asg18
S'N'
sS'.thisRepN'
p2773
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2774
I14
sS'.thisN'
p2775
I344
sS'.thisIndex'
p2776
I13
sg15
(lp2777
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I13
sa(dp2778
g16
(lp2779
S'd'
asg18
S'Y'
sS'.thisRepN'
p2780
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2781
I0
sS'.thisN'
p2782
I345
sS'.thisIndex'
p2783
I10
sg15
(lp2784
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2785
S'space'
p2786
asg95
I10
sa(dp2787
g16
(lp2788
S'd'
asg18
S'Y'
sS'.thisRepN'
p2789
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2790
I1
sS'.thisN'
p2791
I346
sS'.thisIndex'
p2792
I3
sg15
(lp2793
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2794
S'space'
p2795
asg95
I3
sa(dp2796
g16
(lp2797
S'd'
asg18
S'N'
sS'.thisRepN'
p2798
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2799
I2
sS'.thisN'
p2800
I347
sS'.thisIndex'
p2801
I9
sg15
(lp2802
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2803
g16
(lp2804
S'k'
asg18
S'N'
sS'.thisRepN'
p2805
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2806
I3
sS'.thisN'
p2807
I348
sS'.thisIndex'
p2808
I5
sg15
(lp2809
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2810
g16
(lp2811
S'k'
asg18
S'Y'
sg22
I48
sS'.thisN'
p2812
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2813
I4
sS'.thisRepN'
p2814
I23
sg21
I49
sS'.thisIndex'
p2815
I6
sg23
I21
sg15
(lp2816
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2817
S'space'
p2818
asg95
I6
sa(dp2819
g16
(lp2820
S'd'
asg95
I8
sS'.thisRepN'
p2821
I23
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2822
I5
sS'.thisN'
p2823
I350
sS'.thisIndex'
p2824
I8
sg15
(lp2825
S'd'
asg17
S'Y'
sg14
I8
sa(dp2826
g16
(lp2827
S'd'
asg95
I4
sS'.thisRepN'
p2828
I23
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2829
I6
sS'.thisN'
p2830
I351
sS'.thisIndex'
p2831
I4
sg15
(lp2832
S'd'
asg17
S'Y'
sg14
I8
sa(dp2833
g16
(lp2834
S'd'
asg18
S'N'
sS'.thisRepN'
p2835
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2836
I7
sS'.thisN'
p2837
I352
sS'.thisIndex'
p2838
I10
sg15
(lp2839
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I10
sa(dp2840
g16
(lp2841
S'k'
asg18
S'Y'
sS'.thisRepN'
p2842
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2843
I8
sS'.thisN'
p2844
I353
sS'.thisIndex'
p2845
I2
sg15
(lp2846
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2847
S'space'
p2848
asg95
I2
sa(dp2849
g16
(lp2850
S'd'
asg18
S'Y'
sS'.thisRepN'
p2851
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2852
I9
sS'.thisN'
p2853
I354
sS'.thisIndex'
p2854
I6
sg15
(lp2855
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2856
S'space'
p2857
asg95
I6
sa(dp2858
g16
(lp2859
S'd'
asg18
S'Y'
sS'.thisRepN'
p2860
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2861
I10
sS'.thisN'
p2862
I355
sS'.thisIndex'
p2863
I10
sg15
(lp2864
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2865
S'space'
p2866
asg95
I10
sa(dp2867
g16
(lp2868
S'd'
asg18
S'N'
sS'.thisRepN'
p2869
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2870
I11
sS'.thisN'
p2871
I356
sS'.thisIndex'
p2872
I13
sg15
(lp2873
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp2874
g16
(lp2875
S'k'
asg18
S'N'
sS'.thisRepN'
p2876
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2877
I12
sS'.thisN'
p2878
I357
sS'.thisIndex'
p2879
I4
sg15
(lp2880
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2881
g16
(lp2882
S'k'
asg18
S'N'
sS'.thisRepN'
p2883
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2884
I13
sS'.thisN'
p2885
I358
sS'.thisIndex'
p2886
I10
sg15
(lp2887
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp2888
g16
(lp2889
S'k'
asg18
S'Y'
sS'.thisRepN'
p2890
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2891
I14
sS'.thisN'
p2892
I359
sS'.thisIndex'
p2893
I3
sg15
(lp2894
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2895
S'space'
p2896
asg95
I3
sa(dp2897
g16
(lp2898
S'd'
asg18
S'Y'
sS'.thisRepN'
p2899
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2900
I0
sS'.thisN'
p2901
I360
sS'.thisIndex'
p2902
I8
sg15
(lp2903
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2904
S'd'
asg95
I8
sa(dp2905
g16
(lp2906
S'd'
asg18
S'Y'
sS'.thisRepN'
p2907
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2908
I1
sS'.thisN'
p2909
I361
sS'.thisIndex'
p2910
I9
sg15
(lp2911
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2912
S'k'
asg95
I9
sa(dp2913
g16
(lp2914
S'k'
asg18
S'N'
sS'.thisRepN'
p2915
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2916
I2
sS'.thisN'
p2917
I362
sS'.thisIndex'
p2918
I13
sg15
(lp2919
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp2920
g16
(lp2921
S'd'
asg18
S'Y'
sS'.thisRepN'
p2922
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2923
I3
sS'.thisN'
p2924
I363
sS'.thisIndex'
p2925
I3
sg15
(lp2926
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2927
S'space'
p2928
asg95
I3
sa(dp2929
g16
(lp2930
S'd'
asg18
S'Y'
sS'.thisRepN'
p2931
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2932
I4
sS'.thisN'
p2933
I364
sS'.thisIndex'
p2934
I1
sg15
(lp2935
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2936
S'space'
p2937
asg95
I1
sa(dp2938
g16
(lp2939
S'k'
asg18
S'Y'
sS'.thisRepN'
p2940
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2941
I5
sS'.thisN'
p2942
I365
sS'.thisIndex'
p2943
I8
sg15
(lp2944
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2945
S'space'
p2946
asg95
I8
sa(dp2947
g16
(lp2948
S'd'
asg18
S'Y'
sS'.thisRepN'
p2949
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2950
I6
sS'.thisN'
p2951
I366
sS'.thisIndex'
p2952
I2
sg15
(lp2953
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2954
S'space'
p2955
asg95
I2
sa(dp2956
g16
(lp2957
S'k'
asg18
S'N'
sS'.thisRepN'
p2958
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2959
I7
sS'.thisN'
p2960
I367
sS'.thisIndex'
p2961
I2
sg15
(lp2962
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2963
g16
(lp2964
S'd'
asg18
S'Y'
sS'.thisRepN'
p2965
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2966
I8
sS'.thisN'
p2967
I368
sS'.thisIndex'
p2968
I5
sg15
(lp2969
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2970
S'space'
p2971
asg95
I5
sa(dp2972
g16
(lp2973
S'd'
asg18
S'Y'
sS'.thisRepN'
p2974
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2975
I9
sS'.thisN'
p2976
I369
sS'.thisIndex'
p2977
I7
sg15
(lp2978
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2979
S'space'
p2980
asg95
I7
sa(dp2981
g16
(lp2982
S'd'
asg18
S'Y'
sS'.thisRepN'
p2983
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2984
I10
sS'.thisN'
p2985
I370
sS'.thisIndex'
p2986
I7
sg15
(lp2987
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2988
S'space'
p2989
asg95
I7
sa(dp2990
g16
(lp2991
S'k'
asg18
S'Y'
sS'.thisRepN'
p2992
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2993
I11
sS'.thisN'
p2994
I371
sS'.thisIndex'
p2995
I7
sg15
(lp2996
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2997
S'space'
p2998
asg95
I7
sa(dp2999
g16
(lp3000
S'k'
asg18
S'N'
sS'.thisRepN'
p3001
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3002
I12
sS'.thisN'
p3003
I372
sS'.thisIndex'
p3004
I10
sg15
(lp3005
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3006
g16
(lp3007
S'd'
asg18
S'Y'
sS'.thisRepN'
p3008
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3009
I13
sS'.thisN'
p3010
I373
sS'.thisIndex'
p3011
I13
sg15
(lp3012
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp3013
g16
(lp3014
S'k'
asg18
S'N'
sS'.thisRepN'
p3015
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3016
I14
sS'.thisN'
p3017
I374
sS'.thisIndex'
p3018
I9
sg15
(lp3019
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3020
g16
(lp3021
S'k'
asg18
S'N'
sS'.thisRepN'
p3022
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3023
I0
sS'.thisN'
p3024
I375
sS'.thisIndex'
p3025
I13
sg15
(lp3026
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp3027
g16
(lp3028
S'k'
asg18
S'Y'
sS'.thisRepN'
p3029
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3030
I1
sS'.thisN'
p3031
I376
sS'.thisIndex'
p3032
I3
sg15
(lp3033
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3034
S'space'
p3035
asg95
I3
sa(dp3036
g16
(lp3037
S'd'
asg18
S'Y'
sS'.thisRepN'
p3038
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3039
I2
sS'.thisN'
p3040
I377
sS'.thisIndex'
p3041
I9
sg15
(lp3042
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3043
S'space'
p3044
asg95
I9
sa(dp3045
g16
(lp3046
S'k'
asg18
S'Y'
sS'.thisRepN'
p3047
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3048
I3
sS'.thisN'
p3049
I378
sS'.thisIndex'
p3050
I4
sg15
(lp3051
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3052
S'space'
p3053
asg95
I4
sa(dp3054
g16
(lp3055
S'd'
asg18
S'N'
sS'.thisRepN'
p3056
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3057
I4
sS'.thisN'
p3058
I379
sS'.thisIndex'
p3059
I7
sg15
(lp3060
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3061
g16
(lp3062
S'd'
asg18
S'N'
sS'.thisRepN'
p3063
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3064
I5
sS'.thisN'
p3065
I380
sS'.thisIndex'
p3066
I14
sg15
(lp3067
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I14
sa(dp3068
g16
(lp3069
S'k'
asg18
S'Y'
sS'.thisRepN'
p3070
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3071
I6
sS'.thisN'
p3072
I381
sS'.thisIndex'
p3073
I13
sg15
(lp3074
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3075
S'space'
p3076
asg95
I13
sa(dp3077
g16
(lp3078
S'k'
asg18
S'Y'
sS'.thisRepN'
p3079
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3080
I7
sS'.thisN'
p3081
I382
sS'.thisIndex'
p3082
I0
sg15
(lp3083
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3084
S'space'
p3085
asg95
I0
sa(dp3086
g16
(lp3087
S'k'
asg18
S'Y'
sS'.thisRepN'
p3088
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3089
I8
sS'.thisN'
p3090
I383
sS'.thisIndex'
p3091
I10
sg15
(lp3092
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3093
S'space'
p3094
asg95
I10
sa(dp3095
g16
(lp3096
S'k'
asg18
S'Y'
sS'.thisRepN'
p3097
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3098
I9
sS'.thisN'
p3099
I384
sS'.thisIndex'
p3100
I3
sg15
(lp3101
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3102
S'space'
p3103
asg95
I3
sa(dp3104
g16
(lp3105
S'd'
asg18
S'N'
sS'.thisRepN'
p3106
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3107
I10
sS'.thisN'
p3108
I385
sS'.thisIndex'
p3109
I10
sg15
(lp3110
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3111
g16
(lp3112
S'k'
asg18
S'N'
sS'.thisRepN'
p3113
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3114
I11
sS'.thisN'
p3115
I386
sS'.thisIndex'
p3116
I5
sg15
(lp3117
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3118
g16
(lp3119
S'd'
asg18
S'N'
sS'.thisRepN'
p3120
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3121
I12
sS'.thisN'
p3122
I387
sS'.thisIndex'
p3123
I5
sg15
(lp3124
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3125
g16
(lp3126
S'd'
asg18
S'N'
sS'.thisRepN'
p3127
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3128
I13
sS'.thisN'
p3129
I388
sS'.thisIndex'
p3130
I8
sg15
(lp3131
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3132
g16
(lp3133
S'k'
asg18
S'N'
sS'.thisRepN'
p3134
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3135
I14
sS'.thisN'
p3136
I389
sS'.thisIndex'
p3137
I11
sg15
(lp3138
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp3139
g16
(lp3140
S'd'
asg18
S'N'
sS'.thisRepN'
p3141
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3142
I0
sS'.thisN'
p3143
I390
sS'.thisIndex'
p3144
I9
sg15
(lp3145
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3146
g16
(lp3147
S'k'
asg18
S'N'
sS'.thisRepN'
p3148
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3149
I1
sS'.thisN'
p3150
I391
sS'.thisIndex'
p3151
I13
sg15
(lp3152
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp3153
g16
(lp3154
S'k'
asg18
S'Y'
sS'.thisRepN'
p3155
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3156
I2
sS'.thisN'
p3157
I392
sS'.thisIndex'
p3158
I9
sg15
(lp3159
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3160
S'space'
p3161
asg95
I9
sa(dp3162
g16
(lp3163
S'd'
asg18
S'Y'
sS'.thisRepN'
p3164
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3165
I3
sS'.thisN'
p3166
I393
sS'.thisIndex'
p3167
I5
sg15
(lp3168
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3169
S'space'
p3170
asg95
I5
sa(dp3171
g16
(lp3172
S'd'
asg18
S'N'
sS'.thisRepN'
p3173
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3174
I4
sS'.thisN'
p3175
I394
sS'.thisIndex'
p3176
I6
sg15
(lp3177
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3178
g16
(lp3179
S'k'
asg18
S'Y'
sS'.thisRepN'
p3180
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3181
I5
sS'.thisN'
p3182
I395
sS'.thisIndex'
p3183
I2
sg15
(lp3184
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3185
g16
(lp3186
S'd'
asg18
S'N'
sS'.thisRepN'
p3187
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3188
I6
sS'.thisN'
p3189
I396
sS'.thisIndex'
p3190
I3
sg15
(lp3191
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3192
g16
(lp3193
S'd'
asg18
S'N'
sS'.thisRepN'
p3194
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3195
I7
sS'.thisN'
p3196
I397
sS'.thisIndex'
p3197
I11
sg15
(lp3198
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp3199
g16
(lp3200
S'k'
asg18
S'N'
sS'.thisRepN'
p3201
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3202
I8
sS'.thisN'
p3203
I398
sS'.thisIndex'
p3204
I4
sg15
(lp3205
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp3206
g16
(lp3207
S'k'
asg18
S'N'
sg22
I43
sS'.thisN'
p3208
I399
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3209
I9
sS'.thisRepN'
p3210
I26
sg21
I47
sS'.thisIndex'
p3211
I8
sg23
I25
sg15
(lp3212
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3213
S'space'
p3214
asg95
I8
sa(dp3215
g16
(lp3216
S'd'
asg95
I6
sS'.thisRepN'
p3217
I26
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3218
I10
sS'.thisN'
p3219
I400
sS'.thisIndex'
p3220
I6
sg15
(lp3221
S'd'
asg17
S'Y'
sg14
I9
sa(dp3222
g16
(lp3223
S'd'
asg95
I11
sS'.thisRepN'
p3224
I26
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3225
I11
sS'.thisN'
p3226
I401
sS'.thisIndex'
p3227
I11
sg15
(lp3228
S'd'
asg17
S'Y'
sg14
I9
sa(dp3229
g16
(lp3230
S'd'
asg18
S'Y'
sS'.thisRepN'
p3231
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3232
I12
sS'.thisN'
p3233
I402
sS'.thisIndex'
p3234
I2
sg15
(lp3235
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3236
S'space'
p3237
asg95
I2
sa(dp3238
g16
(lp3239
S'd'
asg18
S'N'
sS'.thisRepN'
p3240
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3241
I13
sS'.thisN'
p3242
I403
sS'.thisIndex'
p3243
I3
sg15
(lp3244
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3245
g16
(lp3246
S'd'
asg18
S'Y'
sS'.thisRepN'
p3247
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3248
I14
sS'.thisN'
p3249
I404
sS'.thisIndex'
p3250
I3
sg15
(lp3251
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3252
S'space'
p3253
asg95
I3
sa(dp3254
g16
(lp3255
S'd'
asg18
S'N'
sS'.thisRepN'
p3256
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3257
I0
sS'.thisN'
p3258
I405
sS'.thisIndex'
p3259
I7
sg15
(lp3260
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3261
g16
(lp3262
S'd'
asg18
S'Y'
sS'.thisRepN'
p3263
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3264
I1
sS'.thisN'
p3265
I406
sS'.thisIndex'
p3266
I2
sg15
(lp3267
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3268
S'space'
p3269
asg95
I2
sa(dp3270
g16
(lp3271
S'd'
asg18
S'N'
sS'.thisRepN'
p3272
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3273
I2
sS'.thisN'
p3274
I407
sS'.thisIndex'
p3275
I2
sg15
(lp3276
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3277
g16
(lp3278
S'k'
asg18
S'Y'
sS'.thisRepN'
p3279
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3280
I3
sS'.thisN'
p3281
I408
sS'.thisIndex'
p3282
I4
sg15
(lp3283
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3284
S'space'
p3285
asg95
I4
sa(dp3286
g16
(lp3287
S'd'
asg18
S'N'
sS'.thisRepN'
p3288
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3289
I4
sS'.thisN'
p3290
I409
sS'.thisIndex'
p3291
I7
sg15
(lp3292
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3293
S'space'
p3294
asg95
I7
sa(dp3295
g16
(lp3296
S'd'
asg18
S'N'
sS'.thisRepN'
p3297
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3298
I5
sS'.thisN'
p3299
I410
sS'.thisIndex'
p3300
I8
sg15
(lp3301
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3302
g16
(lp3303
S'k'
asg18
S'N'
sS'.thisRepN'
p3304
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3305
I6
sS'.thisN'
p3306
I411
sS'.thisIndex'
p3307
I5
sg15
(lp3308
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3309
g16
(lp3310
S'd'
asg18
S'Y'
sS'.thisRepN'
p3311
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3312
I7
sS'.thisN'
p3313
I412
sS'.thisIndex'
p3314
I1
sg15
(lp3315
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3316
S'space'
p3317
asg95
I1
sa(dp3318
g16
(lp3319
S'd'
asg18
S'N'
sS'.thisRepN'
p3320
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3321
I8
sS'.thisN'
p3322
I413
sS'.thisIndex'
p3323
I7
sg15
(lp3324
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I7
sa(dp3325
g16
(lp3326
S'k'
asg18
S'Y'
sS'.thisRepN'
p3327
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3328
I9
sS'.thisN'
p3329
I414
sS'.thisIndex'
p3330
I13
sg15
(lp3331
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3332
S'd'
asg95
I13
sa(dp3333
g16
(lp3334
S'd'
asg18
S'Y'
sS'.thisRepN'
p3335
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3336
I10
sS'.thisN'
p3337
I415
sS'.thisIndex'
p3338
I14
sg15
(lp3339
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3340
S'space'
p3341
asg95
I14
sa(dp3342
g16
(lp3343
S'k'
asg18
S'Y'
sS'.thisRepN'
p3344
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3345
I11
sS'.thisN'
p3346
I416
sS'.thisIndex'
p3347
I9
sg15
(lp3348
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3349
S'space'
p3350
asg95
I9
sa(dp3351
g16
(lp3352
S'k'
asg18
S'Y'
sS'.thisRepN'
p3353
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3354
I12
sS'.thisN'
p3355
I417
sS'.thisIndex'
p3356
I7
sg15
(lp3357
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3358
S'space'
p3359
asg95
I7
sa(dp3360
g16
(lp3361
S'd'
asg18
S'N'
sS'.thisRepN'
p3362
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3363
I13
sS'.thisN'
p3364
I418
sS'.thisIndex'
p3365
I14
sg15
(lp3366
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3367
g16
(lp3368
S'k'
asg18
S'N'
sS'.thisRepN'
p3369
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3370
I14
sS'.thisN'
p3371
I419
sS'.thisIndex'
p3372
I10
sg15
(lp3373
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3374
g16
(lp3375
S'd'
asg18
S'N'
sS'.thisRepN'
p3376
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3377
I0
sS'.thisN'
p3378
I420
sS'.thisIndex'
p3379
I6
sg15
(lp3380
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3381
g16
(lp3382
S'k'
asg18
S'Y'
sS'.thisRepN'
p3383
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3384
I1
sS'.thisN'
p3385
I421
sS'.thisIndex'
p3386
I2
sg15
(lp3387
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3388
S'space'
p3389
asg95
I2
sa(dp3390
g16
(lp3391
S'd'
asg18
S'N'
sS'.thisRepN'
p3392
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3393
I2
sS'.thisN'
p3394
I422
sS'.thisIndex'
p3395
I0
sg15
(lp3396
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3397
g16
(lp3398
S'd'
asg18
S'Y'
sS'.thisRepN'
p3399
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3400
I3
sS'.thisN'
p3401
I423
sS'.thisIndex'
p3402
I0
sg15
(lp3403
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3404
S'space'
p3405
asg95
I0
sa(dp3406
g16
(lp3407
S'd'
asg18
S'N'
sS'.thisRepN'
p3408
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3409
I4
sS'.thisN'
p3410
I424
sS'.thisIndex'
p3411
I2
sg15
(lp3412
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3413
S'space'
p3414
asg95
I2
sa(dp3415
g16
(lp3416
S'd'
asg18
S'N'
sS'.thisRepN'
p3417
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3418
I5
sS'.thisN'
p3419
I425
sS'.thisIndex'
p3420
I10
sg15
(lp3421
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3422
g16
(lp3423
S'k'
asg18
S'N'
sS'.thisRepN'
p3424
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3425
I6
sS'.thisN'
p3426
I426
sS'.thisIndex'
p3427
I14
sg15
(lp3428
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3429
g16
(lp3430
S'd'
asg18
S'N'
sS'.thisRepN'
p3431
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3432
I7
sS'.thisN'
p3433
I427
sS'.thisIndex'
p3434
I1
sg15
(lp3435
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3436
g16
(lp3437
S'k'
asg18
S'N'
sS'.thisRepN'
p3438
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3439
I8
sS'.thisN'
p3440
I428
sS'.thisIndex'
p3441
I10
sg15
(lp3442
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3443
g16
(lp3444
S'k'
asg18
S'N'
sS'.thisRepN'
p3445
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3446
I9
sS'.thisN'
p3447
I429
sS'.thisIndex'
p3448
I6
sg15
(lp3449
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3450
g16
(lp3451
S'd'
asg18
S'Y'
sS'.thisRepN'
p3452
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3453
I10
sS'.thisN'
p3454
I430
sS'.thisIndex'
p3455
I12
sg15
(lp3456
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3457
S'space'
p3458
asg95
I12
sa(dp3459
g16
(lp3460
S'k'
asg18
S'N'
sS'.thisRepN'
p3461
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3462
I11
sS'.thisN'
p3463
I431
sS'.thisIndex'
p3464
I8
sg15
(lp3465
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3466
g16
(lp3467
S'k'
asg18
S'Y'
sS'.thisRepN'
p3468
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3469
I12
sS'.thisN'
p3470
I432
sS'.thisIndex'
p3471
I14
sg15
(lp3472
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3473
S'space'
p3474
asg95
I14
sa(dp3475
g16
(lp3476
S'k'
asg18
S'Y'
sS'.thisRepN'
p3477
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3478
I13
sS'.thisN'
p3479
I433
sS'.thisIndex'
p3480
I5
sg15
(lp3481
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3482
S'space'
p3483
asg95
I5
sa(dp3484
g16
(lp3485
S'd'
asg18
S'Y'
sS'.thisRepN'
p3486
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3487
I14
sS'.thisN'
p3488
I434
sS'.thisIndex'
p3489
I12
sg15
(lp3490
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3491
S'space'
p3492
asg95
I12
sa(dp3493
g16
(lp3494
S'k'
asg18
S'Y'
sS'.thisRepN'
p3495
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3496
I0
sS'.thisN'
p3497
I435
sS'.thisIndex'
p3498
I0
sg15
(lp3499
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3500
S'space'
p3501
asg95
I0
sa(dp3502
g16
(lp3503
S'k'
asg18
S'Y'
sS'.thisRepN'
p3504
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3505
I1
sS'.thisN'
p3506
I436
sS'.thisIndex'
p3507
I11
sg15
(lp3508
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3509
S'space'
p3510
asg95
I11
sa(dp3511
g16
(lp3512
S'd'
asg18
S'Y'
sS'.thisRepN'
p3513
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3514
I2
sS'.thisN'
p3515
I437
sS'.thisIndex'
p3516
I6
sg15
(lp3517
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3518
S'space'
p3519
asg95
I6
sa(dp3520
g16
(lp3521
S'k'
asg18
S'Y'
sS'.thisRepN'
p3522
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3523
I3
sS'.thisN'
p3524
I438
sS'.thisIndex'
p3525
I2
sg15
(lp3526
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3527
S'space'
p3528
asg95
I2
sa(dp3529
g16
(lp3530
S'k'
asg18
S'N'
sS'.thisRepN'
p3531
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3532
I4
sS'.thisN'
p3533
I439
sS'.thisIndex'
p3534
I14
sg15
(lp3535
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3536
g16
(lp3537
S'd'
asg18
S'N'
sS'.thisRepN'
p3538
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3539
I5
sS'.thisN'
p3540
I440
sS'.thisIndex'
p3541
I11
sg15
(lp3542
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3543
g16
(lp3544
S'k'
asg18
S'N'
sS'.thisRepN'
p3545
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3546
I6
sS'.thisN'
p3547
I441
sS'.thisIndex'
p3548
I12
sg15
(lp3549
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3550
g16
(lp3551
S'k'
asg18
S'Y'
sS'.thisRepN'
p3552
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3553
I7
sS'.thisN'
p3554
I442
sS'.thisIndex'
p3555
I2
sg15
(lp3556
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3557
S'space'
p3558
asg95
I2
sa(dp3559
g16
(lp3560
S'd'
asg18
S'N'
sS'.thisRepN'
p3561
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3562
I8
sS'.thisN'
p3563
I443
sS'.thisIndex'
p3564
I1
sg15
(lp3565
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3566
g16
(lp3567
S'k'
asg18
S'Y'
sS'.thisRepN'
p3568
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3569
I9
sS'.thisN'
p3570
I444
sS'.thisIndex'
p3571
I14
sg15
(lp3572
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3573
S'space'
p3574
asg95
I14
sa(dp3575
g16
(lp3576
S'd'
asg18
S'Y'
sS'.thisRepN'
p3577
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3578
I10
sS'.thisN'
p3579
I445
sS'.thisIndex'
p3580
I10
sg15
(lp3581
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3582
S'space'
p3583
asg95
I10
sa(dp3584
g16
(lp3585
S'd'
asg18
S'Y'
sS'.thisRepN'
p3586
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3587
I11
sS'.thisN'
p3588
I446
sS'.thisIndex'
p3589
I12
sg15
(lp3590
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3591
S'space'
p3592
asg95
I12
sa(dp3593
g16
(lp3594
S'd'
asg18
S'Y'
sS'.thisRepN'
p3595
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3596
I12
sS'.thisN'
p3597
I447
sS'.thisIndex'
p3598
I6
sg15
(lp3599
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3600
S'k'
asg95
I6
sa(dp3601
g16
(lp3602
S'k'
asg18
S'Y'
sS'.thisRepN'
p3603
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3604
I13
sS'.thisN'
p3605
I448
sS'.thisIndex'
p3606
I8
sg15
(lp3607
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3608
S'space'
p3609
asg95
I8
sa(dp3610
g16
(lp3611
S'k'
asg18
S'N'
sg22
I44
sS'.thisN'
p3612
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3613
I14
sS'.thisRepN'
p3614
I29
sg21
I48
sS'.thisIndex'
p3615
I1
sg23
I25
sg15
(lp3616
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3617
g16
(lp3618
S'd'
asg95
I1
sS'.thisRepN'
p3619
I30
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3620
I0
sS'.thisN'
p3621
I450
sS'.thisIndex'
p3622
I1
sg15
(lp3623
S'd'
asg17
S'Y'
sg14
I10
sa(dp3624
g16
(lp3625
S'k'
asg95
I9
sS'.thisRepN'
p3626
I30
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3627
I1
sS'.thisN'
p3628
I451
sS'.thisIndex'
p3629
I9
sg15
(lp3630
S'k'
asg17
S'Y'
sg14
I10
sa(dp3631
g16
(lp3632
S'd'
asg18
S'Y'
sS'.thisRepN'
p3633
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3634
I2
sS'.thisN'
p3635
I452
sS'.thisIndex'
p3636
I9
sg15
(lp3637
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3638
S'space'
p3639
asg95
I9
sa(dp3640
g16
(lp3641
S'k'
asg18
S'N'
sS'.thisRepN'
p3642
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3643
I3
sS'.thisN'
p3644
I453
sS'.thisIndex'
p3645
I4
sg15
(lp3646
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3647
g16
(lp3648
S'k'
asg18
S'N'
sS'.thisRepN'
p3649
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3650
I4
sS'.thisN'
p3651
I454
sS'.thisIndex'
p3652
I8
sg15
(lp3653
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3654
g16
(lp3655
S'k'
asg18
S'N'
sS'.thisRepN'
p3656
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3657
I5
sS'.thisN'
p3658
I455
sS'.thisIndex'
p3659
I11
sg15
(lp3660
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3661
g16
(lp3662
S'd'
asg18
S'Y'
sS'.thisRepN'
p3663
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3664
I6
sS'.thisN'
p3665
I456
sS'.thisIndex'
p3666
I1
sg15
(lp3667
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3668
S'space'
p3669
asg95
I1
sa(dp3670
g16
(lp3671
S'd'
asg18
S'Y'
sS'.thisRepN'
p3672
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3673
I7
sS'.thisN'
p3674
I457
sS'.thisIndex'
p3675
I14
sg15
(lp3676
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3677
g16
(lp3678
S'k'
asg18
S'Y'
sS'.thisRepN'
p3679
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3680
I8
sS'.thisN'
p3681
I458
sS'.thisIndex'
p3682
I14
sg15
(lp3683
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3684
S'space'
p3685
asg95
I14
sa(dp3686
g16
(lp3687
S'k'
asg18
S'N'
sS'.thisRepN'
p3688
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3689
I9
sS'.thisN'
p3690
I459
sS'.thisIndex'
p3691
I5
sg15
(lp3692
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3693
g16
(lp3694
S'k'
asg18
S'N'
sS'.thisRepN'
p3695
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3696
I10
sS'.thisN'
p3697
I460
sS'.thisIndex'
p3698
I9
sg15
(lp3699
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3700
g16
(lp3701
S'd'
asg18
S'Y'
sS'.thisRepN'
p3702
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3703
I11
sS'.thisN'
p3704
I461
sS'.thisIndex'
p3705
I10
sg15
(lp3706
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3707
S'space'
p3708
asg95
I10
sa(dp3709
g16
(lp3710
S'k'
asg18
S'Y'
sS'.thisRepN'
p3711
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3712
I12
sS'.thisN'
p3713
I462
sS'.thisIndex'
p3714
I14
sg15
(lp3715
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3716
g16
(lp3717
S'd'
asg18
S'Y'
sS'.thisRepN'
p3718
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3719
I13
sS'.thisN'
p3720
I463
sS'.thisIndex'
p3721
I13
sg15
(lp3722
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3723
S'space'
p3724
asg95
I13
sa(dp3725
g16
(lp3726
S'd'
asg18
S'N'
sS'.thisRepN'
p3727
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3728
I14
sS'.thisN'
p3729
I464
sS'.thisIndex'
p3730
I12
sg15
(lp3731
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3732
g16
(lp3733
S'd'
asg18
S'Y'
sS'.thisRepN'
p3734
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3735
I0
sS'.thisN'
p3736
I465
sS'.thisIndex'
p3737
I3
sg15
(lp3738
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3739
S'd'
asg95
I3
sa(dp3740
g16
(lp3741
S'd'
asg18
S'Y'
sS'.thisRepN'
p3742
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3743
I1
sS'.thisN'
p3744
I466
sS'.thisIndex'
p3745
I7
sg15
(lp3746
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3747
S'space'
p3748
asg95
I7
sa(dp3749
g16
(lp3750
S'd'
asg18
S'Y'
sS'.thisRepN'
p3751
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3752
I2
sS'.thisN'
p3753
I467
sS'.thisIndex'
p3754
I0
sg15
(lp3755
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3756
S'space'
p3757
asg95
I0
sa(dp3758
g16
(lp3759
S'k'
asg18
S'Y'
sS'.thisRepN'
p3760
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3761
I3
sS'.thisN'
p3762
I468
sS'.thisIndex'
p3763
I13
sg15
(lp3764
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3765
S'space'
p3766
asg95
I13
sa(dp3767
g16
(lp3768
S'k'
asg18
S'Y'
sS'.thisRepN'
p3769
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3770
I4
sS'.thisN'
p3771
I469
sS'.thisIndex'
p3772
I5
sg15
(lp3773
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3774
S'space'
p3775
asg95
I5
sa(dp3776
g16
(lp3777
S'k'
asg18
S'N'
sS'.thisRepN'
p3778
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3779
I5
sS'.thisN'
p3780
I470
sS'.thisIndex'
p3781
I10
sg15
(lp3782
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3783
g16
(lp3784
S'd'
asg18
S'Y'
sS'.thisRepN'
p3785
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3786
I6
sS'.thisN'
p3787
I471
sS'.thisIndex'
p3788
I0
sg15
(lp3789
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3790
S'space'
p3791
asg95
I0
sa(dp3792
g16
(lp3793
S'd'
asg18
S'N'
sS'.thisRepN'
p3794
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3795
I7
sS'.thisN'
p3796
I472
sS'.thisIndex'
p3797
I8
sg15
(lp3798
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3799
g16
(lp3800
S'd'
asg18
S'N'
sS'.thisRepN'
p3801
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3802
I8
sS'.thisN'
p3803
I473
sS'.thisIndex'
p3804
I3
sg15
(lp3805
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3806
g16
(lp3807
S'd'
asg18
S'N'
sS'.thisRepN'
p3808
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3809
I9
sS'.thisN'
p3810
I474
sS'.thisIndex'
p3811
I7
sg15
(lp3812
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3813
g16
(lp3814
S'k'
asg18
S'Y'
sS'.thisRepN'
p3815
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3816
I10
sS'.thisN'
p3817
I475
sS'.thisIndex'
p3818
I2
sg15
(lp3819
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3820
S'space'
p3821
asg95
I2
sa(dp3822
g16
(lp3823
S'd'
asg18
S'N'
sS'.thisRepN'
p3824
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3825
I11
sS'.thisN'
p3826
I476
sS'.thisIndex'
p3827
I8
sg15
(lp3828
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3829
g16
(lp3830
S'd'
asg18
S'N'
sS'.thisRepN'
p3831
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3832
I12
sS'.thisN'
p3833
I477
sS'.thisIndex'
p3834
I3
sg15
(lp3835
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3836
g16
(lp3837
S'k'
asg18
S'Y'
sS'.thisRepN'
p3838
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3839
I13
sS'.thisN'
p3840
I478
sS'.thisIndex'
p3841
I7
sg15
(lp3842
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3843
S'space'
p3844
asg95
I7
sa(dp3845
g16
(lp3846
S'd'
asg18
S'Y'
sS'.thisRepN'
p3847
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3848
I14
sS'.thisN'
p3849
I479
sS'.thisIndex'
p3850
I10
sg15
(lp3851
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3852
S'space'
p3853
asg95
I10
sa(dp3854
g16
(lp3855
S'd'
asg18
S'N'
sS'.thisRepN'
p3856
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3857
I0
sS'.thisN'
p3858
I480
sS'.thisIndex'
p3859
I1
sg15
(lp3860
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3861
g16
(lp3862
S'd'
asg18
S'Y'
sS'.thisRepN'
p3863
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3864
I1
sS'.thisN'
p3865
I481
sS'.thisIndex'
p3866
I13
sg15
(lp3867
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3868
S'space'
p3869
asg95
I13
sa(dp3870
g16
(lp3871
S'd'
asg18
S'Y'
sS'.thisRepN'
p3872
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3873
I2
sS'.thisN'
p3874
I482
sS'.thisIndex'
p3875
I8
sg15
(lp3876
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3877
S'space'
p3878
asg95
I8
sa(dp3879
g16
(lp3880
S'k'
asg18
S'N'
sS'.thisRepN'
p3881
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3882
I3
sS'.thisN'
p3883
I483
sS'.thisIndex'
p3884
I10
sg15
(lp3885
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3886
g16
(lp3887
S'k'
asg18
S'Y'
sS'.thisRepN'
p3888
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3889
I4
sS'.thisN'
p3890
I484
sS'.thisIndex'
p3891
I2
sg15
(lp3892
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3893
S'space'
p3894
asg95
I2
sa(dp3895
g16
(lp3896
S'k'
asg18
S'Y'
sS'.thisRepN'
p3897
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3898
I5
sS'.thisN'
p3899
I485
sS'.thisIndex'
p3900
I8
sg15
(lp3901
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3902
S'space'
p3903
asg95
I8
sa(dp3904
g16
(lp3905
S'd'
asg18
S'N'
sS'.thisRepN'
p3906
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3907
I6
sS'.thisN'
p3908
I486
sS'.thisIndex'
p3909
I8
sg15
(lp3910
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3911
g16
(lp3912
S'k'
asg18
S'N'
sS'.thisRepN'
p3913
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3914
I7
sS'.thisN'
p3915
I487
sS'.thisIndex'
p3916
I7
sg15
(lp3917
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3918
g16
(lp3919
S'd'
asg18
S'Y'
sS'.thisRepN'
p3920
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3921
I8
sS'.thisN'
p3922
I488
sS'.thisIndex'
p3923
I7
sg15
(lp3924
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3925
S'space'
p3926
asg95
I7
sa(dp3927
g16
(lp3928
S'k'
asg18
S'Y'
sS'.thisRepN'
p3929
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3930
I9
sS'.thisN'
p3931
I489
sS'.thisIndex'
p3932
I12
sg15
(lp3933
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3934
g16
(lp3935
S'd'
asg18
S'N'
sS'.thisRepN'
p3936
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3937
I10
sS'.thisN'
p3938
I490
sS'.thisIndex'
p3939
I1
sg15
(lp3940
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3941
g16
(lp3942
S'k'
asg18
S'N'
sS'.thisRepN'
p3943
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3944
I11
sS'.thisN'
p3945
I491
sS'.thisIndex'
p3946
I13
sg15
(lp3947
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3948
g16
(lp3949
S'd'
asg18
S'N'
sS'.thisRepN'
p3950
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3951
I12
sS'.thisN'
p3952
I492
sS'.thisIndex'
p3953
I8
sg15
(lp3954
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3955
g16
(lp3956
S'k'
asg18
S'N'
sS'.thisRepN'
p3957
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3958
I13
sS'.thisN'
p3959
I493
sS'.thisIndex'
p3960
I9
sg15
(lp3961
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3962
g16
(lp3963
S'k'
asg18
S'N'
sS'.thisRepN'
p3964
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3965
I14
sS'.thisN'
p3966
I494
sS'.thisIndex'
p3967
I14
sg15
(lp3968
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3969
g16
(lp3970
S'k'
asg18
S'N'
sS'.thisRepN'
p3971
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3972
I0
sS'.thisN'
p3973
I495
sS'.thisIndex'
p3974
I3
sg15
(lp3975
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3976
g16
(lp3977
S'k'
asg18
S'Y'
sS'.thisRepN'
p3978
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3979
I1
sS'.thisN'
p3980
I496
sS'.thisIndex'
p3981
I6
sg15
(lp3982
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3983
S'space'
p3984
asg95
I6
sa(dp3985
g16
(lp3986
S'k'
asg18
S'Y'
sS'.thisRepN'
p3987
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3988
I2
sS'.thisN'
p3989
I497
sS'.thisIndex'
p3990
I7
sg15
(lp3991
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3992
S'space'
p3993
asg95
I7
sa(dp3994
g16
(lp3995
S'k'
asg18
S'N'
sS'.thisRepN'
p3996
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3997
I3
sS'.thisN'
p3998
I498
sS'.thisIndex'
p3999
I11
sg15
(lp4000
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp4001
g16
(lp4002
S'd'
asg18
S'N'
sg22
I44
sS'.thisN'
p4003
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4004
I4
sS'.thisRepN'
p4005
I33
sg21
I49
sS'.thisIndex'
p4006
I10
sg23
I24
sg15
(lp4007
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp4008
g16
(lp4009
S'k'
asS'.thisIndex'
p4010
I2
sS'.thisRepN'
p4011
I33
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p4012
I5
sS'.thisN'
p4013
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4014
S'd'
asg17
S'Y'
sg14
I11
sg95
I2
sa(dp4015
g16
(lp4016
S'k'
asS'.thisIndex'
p4017
I13
sS'.thisRepN'
p4018
I33
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p4019
I6
sS'.thisN'
p4020
I501
sg25
S'Y'
sg15
(lp4021
S'd'
asg17
S'Y'
sg14
I11
sg95
I13
sa(dp4022
g16
(lp4023
S'd'
asg18
S'Y'
sS'.thisRepN'
p4024
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4025
I7
sS'.thisN'
p4026
I502
sg25
S'Y'
sg15
(lp4027
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4028
S'space'
p4029
asg95
I9
sS'.thisIndex'
p4030
I9
sa(dp4031
g16
(lp4032
S'k'
asg18
S'Y'
sS'.thisRepN'
p4033
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4034
I8
sS'.thisN'
p4035
I503
sg25
S'Y'
sg15
(lp4036
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4037
S'space'
p4038
asg95
I0
sS'.thisIndex'
p4039
I0
sa(dp4040
g16
(lp4041
S'd'
asg18
S'Y'
sS'.thisRepN'
p4042
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4043
I9
sS'.thisN'
p4044
I504
sg25
S'Y'
sg15
(lp4045
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4046
S'space'
p4047
asg95
I13
sS'.thisIndex'
p4048
I13
sa(dp4049
g16
(lp4050
S'd'
asg18
S'N'
sS'.thisRepN'
p4051
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4052
I10
sS'.thisN'
p4053
I505
sg25
S'Y'
sg15
(lp4054
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4055
I3
sa(dp4056
g16
(lp4057
S'd'
asg18
S'N'
sS'.thisRepN'
p4058
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4059
I11
sS'.thisN'
p4060
I506
sg25
S'Y'
sg15
(lp4061
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4062
I7
sa(dp4063
g16
(lp4064
S'k'
asg18
S'Y'
sS'.thisRepN'
p4065
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4066
I12
sS'.thisN'
p4067
I507
sg25
S'Y'
sg15
(lp4068
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4069
S'space'
p4070
asg95
I7
sS'.thisIndex'
p4071
I7
sa(dp4072
g16
(lp4073
S'd'
asg18
S'Y'
sS'.thisRepN'
p4074
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4075
I13
sS'.thisN'
p4076
I508
sg25
S'Y'
sg15
(lp4077
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4078
S'space'
p4079
asg95
I14
sS'.thisIndex'
p4080
I14
sa(dp4081
g16
(lp4082
S'd'
asg18
S'Y'
sS'.thisRepN'
p4083
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4084
I14
sS'.thisN'
p4085
I509
sg25
S'Y'
sg15
(lp4086
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4087
S'space'
p4088
asg95
I6
sS'.thisIndex'
p4089
I6
sa(dp4090
g16
(lp4091
S'd'
asg18
S'N'
sS'.thisRepN'
p4092
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4093
I0
sS'.thisN'
p4094
I510
sg25
S'Y'
sg15
(lp4095
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4096
I11
sa(dp4097
g16
(lp4098
S'k'
asg18
S'Y'
sS'.thisRepN'
p4099
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4100
I1
sS'.thisN'
p4101
I511
sg25
S'Y'
sg15
(lp4102
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4103
S'space'
p4104
asg95
I4
sS'.thisIndex'
p4105
I4
sa(dp4106
g16
(lp4107
S'd'
asg18
S'N'
sS'.thisRepN'
p4108
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4109
I2
sS'.thisN'
p4110
I512
sg25
S'Y'
sg15
(lp4111
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4112
S'space'
p4113
asg95
I7
sS'.thisIndex'
p4114
I7
sa(dp4115
g16
(lp4116
S'k'
asg18
S'N'
sS'.thisRepN'
p4117
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4118
I3
sS'.thisN'
p4119
I513
sg25
S'Y'
sg15
(lp4120
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4121
I7
sa(dp4122
g16
(lp4123
S'd'
asg18
S'N'
sS'.thisRepN'
p4124
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4125
I4
sS'.thisN'
p4126
I514
sg25
S'Y'
sg15
(lp4127
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4128
I9
sa(dp4129
g16
(lp4130
S'k'
asg18
S'N'
sS'.thisRepN'
p4131
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4132
I5
sS'.thisN'
p4133
I515
sg25
S'Y'
sg15
(lp4134
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4135
I8
sa(dp4136
g16
(lp4137
S'd'
asg18
S'N'
sS'.thisRepN'
p4138
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4139
I6
sS'.thisN'
p4140
I516
sg25
S'Y'
sg15
(lp4141
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4142
I3
sa(dp4143
g16
(lp4144
S'k'
asg18
S'Y'
sS'.thisRepN'
p4145
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4146
I7
sS'.thisN'
p4147
I517
sg25
S'Y'
sg15
(lp4148
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4149
S'space'
p4150
asg95
I1
sS'.thisIndex'
p4151
I1
sa(dp4152
g16
(lp4153
S'd'
asg18
S'N'
sS'.thisRepN'
p4154
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4155
I8
sS'.thisN'
p4156
I518
sg25
S'Y'
sg15
(lp4157
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4158
I11
sa(dp4159
g18
S'Y'
sS'.thisRepN'
p4160
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4161
I9
sS'.thisN'
p4162
I519
sg25
S'Y'
sg15
Nsg30
Vm
sg17
S'Timed out'
p4163
sg14
I11
sg19
(lp4164
S'space'
p4165
asg95
I7
sS'.thisIndex'
p4166
I7
sa(dp4167
g16
(lp4168
S'd'
asg18
S'N'
sS'.thisRepN'
p4169
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4170
I10
sS'.thisN'
p4171
I520
sg25
S'Y'
sg15
(lp4172
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4173
I4
sa(dp4174
g16
(lp4175
S'd'
asg18
S'Y'
sS'.thisRepN'
p4176
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4177
I11
sS'.thisN'
p4178
I521
sg25
S'Y'
sg15
(lp4179
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4180
S'space'
p4181
asg95
I3
sS'.thisIndex'
p4182
I3
sa(dp4183
g16
(lp4184
S'd'
asg18
S'Y'
sS'.thisRepN'
p4185
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4186
I12
sS'.thisN'
p4187
I522
sg25
S'Y'
sg15
(lp4188
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4189
S'space'
p4190
asg95
I2
sS'.thisIndex'
p4191
I2
sa(dp4192
g16
(lp4193
S'd'
asg18
S'Y'
sS'.thisRepN'
p4194
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4195
I13
sS'.thisN'
p4196
I523
sg25
S'Y'
sg15
(lp4197
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4198
S'space'
p4199
asg95
I12
sS'.thisIndex'
p4200
I12
sa(dp4201
g16
(lp4202
S'k'
asg18
S'N'
sS'.thisRepN'
p4203
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4204
I14
sS'.thisN'
p4205
I524
sg25
S'Y'
sg15
(lp4206
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4207
I4
sa(dp4208
g16
(lp4209
S'd'
asg18
S'Y'
sS'.thisRepN'
p4210
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4211
I0
sS'.thisN'
p4212
I525
sg25
S'Y'
sg15
(lp4213
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4214
S'space'
p4215
asg95
I13
sS'.thisIndex'
p4216
I13
sa(dp4217
g16
(lp4218
S'k'
asg18
S'N'
sS'.thisRepN'
p4219
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4220
I1
sS'.thisN'
p4221
I526
sg25
S'Y'
sg15
(lp4222
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4223
I2
sa(dp4224
g16
(lp4225
S'd'
asg18
S'Y'
sS'.thisRepN'
p4226
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4227
I2
sS'.thisN'
p4228
I527
sg25
S'Y'
sg15
(lp4229
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4230
S'space'
p4231
asg95
I1
sS'.thisIndex'
p4232
I1
sa(dp4233
g16
(lp4234
S'k'
asg18
S'Y'
sS'.thisRepN'
p4235
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4236
I3
sS'.thisN'
p4237
I528
sg25
S'Y'
sg15
(lp4238
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4239
S'space'
p4240
asg95
I6
sS'.thisIndex'
p4241
I6
sa(dp4242
g16
(lp4243
S'd'
asg18
S'N'
sS'.thisRepN'
p4244
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4245
I4
sS'.thisN'
p4246
I529
sg25
S'Y'
sg15
(lp4247
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4248
I6
sa(dp4249
g16
(lp4250
S'k'
asg18
S'Y'
sS'.thisRepN'
p4251
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4252
I5
sS'.thisN'
p4253
I530
sg25
S'Y'
sg15
(lp4254
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4255
S'space'
p4256
asg95
I6
sS'.thisIndex'
p4257
I6
sa(dp4258
g16
(lp4259
S'k'
asg18
S'N'
sS'.thisRepN'
p4260
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4261
I6
sS'.thisN'
p4262
I531
sg25
S'Y'
sg15
(lp4263
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4264
I0
sa(dp4265
g16
(lp4266
S'k'
asg18
S'N'
sS'.thisRepN'
p4267
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4268
I7
sS'.thisN'
p4269
I532
sg25
S'Y'
sg15
(lp4270
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4271
I2
sa(dp4272
g16
(lp4273
S'k'
asg18
S'N'
sS'.thisRepN'
p4274
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4275
I8
sS'.thisN'
p4276
I533
sg25
S'Y'
sg15
(lp4277
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4278
I14
sa(dp4279
g16
(lp4280
S'd'
asg18
S'Y'
sS'.thisRepN'
p4281
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4282
I9
sS'.thisN'
p4283
I534
sg25
S'Y'
sg15
(lp4284
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4285
S'd'
asg95
I3
sS'.thisIndex'
p4286
I3
sa(dp4287
g16
(lp4288
S'd'
asg18
S'N'
sS'.thisRepN'
p4289
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4290
I10
sS'.thisN'
p4291
I535
sg25
S'Y'
sg15
(lp4292
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4293
I1
sa(dp4294
g16
(lp4295
S'd'
asg18
S'N'
sS'.thisRepN'
p4296
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4297
I11
sS'.thisN'
p4298
I536
sg25
S'Y'
sg15
(lp4299
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4300
I9
sa(dp4301
g16
(lp4302
S'k'
asg18
S'Y'
sS'.thisRepN'
p4303
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4304
I12
sS'.thisN'
p4305
I537
sg25
S'Y'
sg15
(lp4306
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4307
S'space'
p4308
asg95
I11
sS'.thisIndex'
p4309
I11
sa(dp4310
g16
(lp4311
S'k'
asg18
S'Y'
sS'.thisRepN'
p4312
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4313
I13
sS'.thisN'
p4314
I538
sg25
S'Y'
sg15
(lp4315
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4316
S'space'
p4317
asg95
I12
sS'.thisIndex'
p4318
I12
sa(dp4319
g16
(lp4320
S'k'
asg18
S'Y'
sS'.thisRepN'
p4321
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4322
I14
sS'.thisN'
p4323
I539
sg25
S'Y'
sg15
(lp4324
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4325
S'space'
p4326
asg95
I0
sS'.thisIndex'
p4327
I0
sa(dp4328
g16
(lp4329
S'k'
asg18
S'Y'
sS'.thisRepN'
p4330
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4331
I0
sS'.thisN'
p4332
I540
sg25
S'Y'
sg15
(lp4333
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4334
S'space'
p4335
asg95
I0
sS'.thisIndex'
p4336
I0
sa(dp4337
g16
(lp4338
S'k'
asg18
S'Y'
sS'.thisRepN'
p4339
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4340
I1
sS'.thisN'
p4341
I541
sg25
S'Y'
sg15
(lp4342
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4343
S'space'
p4344
asg95
I13
sS'.thisIndex'
p4345
I13
sa(dp4346
g16
(lp4347
S'k'
asg18
S'N'
sS'.thisRepN'
p4348
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4349
I2
sS'.thisN'
p4350
I542
sg25
S'Y'
sg15
(lp4351
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4352
I8
sa(dp4353
g16
(lp4354
S'd'
asg18
S'N'
sS'.thisRepN'
p4355
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4356
I3
sS'.thisN'
p4357
I543
sg25
S'Y'
sg15
(lp4358
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4359
I1
sa(dp4360
g16
(lp4361
S'd'
asg18
S'Y'
sS'.thisRepN'
p4362
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4363
I4
sS'.thisN'
p4364
I544
sg25
S'Y'
sg15
(lp4365
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4366
S'space'
p4367
asg95
I14
sS'.thisIndex'
p4368
I14
sa(dp4369
g16
(lp4370
S'd'
asg18
S'N'
sS'.thisRepN'
p4371
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4372
I5
sS'.thisN'
p4373
I545
sg25
S'Y'
sg15
(lp4374
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4375
I3
sa(dp4376
g16
(lp4377
S'k'
asg18
S'N'
sS'.thisRepN'
p4378
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4379
I6
sS'.thisN'
p4380
I546
sg25
S'Y'
sg15
(lp4381
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4382
I0
sa(dp4383
g16
(lp4384
S'k'
asg18
S'Y'
sS'.thisRepN'
p4385
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4386
I7
sS'.thisN'
p4387
I547
sg25
S'Y'
sg15
(lp4388
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4389
S'space'
p4390
asg95
I9
sS'.thisIndex'
p4391
I9
sa(dp4392
g16
(lp4393
S'k'
asg18
S'Y'
sS'.thisRepN'
p4394
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4395
I8
sS'.thisN'
p4396
I548
sg25
S'Y'
sg15
(lp4397
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4398
S'space'
p4399
asg95
I1
sS'.thisIndex'
p4400
I1
sa(dp4401
g16
(lp4402
S'k'
asg18
S'N'
sg22
I46
sg26
S'Y'
sS'.thisN'
p4403
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4404
I9
sS'.thisRepN'
p4405
I36
sg21
I45
sg25
S'Y'
sg23
I25
sg15
(lp4406
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4407
I5
sa(dp4408
g16
(lp4409
S'k'
asS'.thisIndex'
p4410
I10
sS'.thisRepN'
p4411
I36
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p4412
I10
sS'.thisN'
p4413
I550
sg25
S'Y'
sg15
(lp4414
S'd'
asg17
S'Y'
sg14
I12
sg95
I10
sa(dp4415
g16
(lp4416
S'k'
asS'.thisIndex'
p4417
I1
sS'.thisRepN'
p4418
I36
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p4419
I11
sS'.thisN'
p4420
I551
sg25
S'Y'
sg15
(lp4421
S'd'
asg17
S'Y'
sg14
I12
sg95
I1
sa(dp4422
g16
(lp4423
S'd'
asg18
S'Y'
sS'.thisRepN'
p4424
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4425
I12
sS'.thisN'
p4426
I552
sg25
S'Y'
sg15
(lp4427
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4428
I10
sa(dp4429
g16
(lp4430
S'd'
asg18
S'Y'
sS'.thisRepN'
p4431
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4432
I13
sS'.thisN'
p4433
I553
sg25
S'Y'
sg15
(lp4434
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4435
S'space'
p4436
asg95
I3
sS'.thisIndex'
p4437
I3
sa(dp4438
g16
(lp4439
S'd'
asg18
S'N'
sS'.thisRepN'
p4440
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4441
I14
sS'.thisN'
p4442
I554
sg25
S'Y'
sg15
(lp4443
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4444
I8
sa(dp4445
g16
(lp4446
S'd'
asg18
S'N'
sS'.thisRepN'
p4447
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4448
I0
sS'.thisN'
p4449
I555
sg25
S'Y'
sg15
(lp4450
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4451
I7
sa(dp4452
g16
(lp4453
S'k'
asg18
S'N'
sS'.thisRepN'
p4454
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4455
I1
sS'.thisN'
p4456
I556
sg25
S'Y'
sg15
(lp4457
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4458
S'space'
p4459
asg95
I1
sS'.thisIndex'
p4460
I1
sa(dp4461
g16
(lp4462
S'd'
asg18
S'N'
sS'.thisRepN'
p4463
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4464
I2
sS'.thisN'
p4465
I557
sg25
S'Y'
sg15
(lp4466
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4467
S'space'
p4468
asg95
I11
sS'.thisIndex'
p4469
I11
sa(dp4470
g16
(lp4471
S'k'
asg18
S'N'
sS'.thisRepN'
p4472
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4473
I3
sS'.thisN'
p4474
I558
sg25
S'Y'
sg15
(lp4475
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4476
I7
sa(dp4477
g18
S'N'
sS'.thisRepN'
p4478
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4479
I4
sS'.thisN'
p4480
I559
sg25
S'Y'
sg15
Nsg30
Vm
sg17
g4163
sg14
I12
sg19
(lp4481
S'space'
p4482
asg95
I7
sS'.thisIndex'
p4483
I7
sa(dp4484
g16
(lp4485
S'k'
asg18
S'Y'
sS'.thisRepN'
p4486
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4487
I5
sS'.thisN'
p4488
I560
sg25
S'Y'
sg15
(lp4489
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4490
S'space'
p4491
asg95
I7
sS'.thisIndex'
p4492
I7
sa(dp4493
g16
(lp4494
S'k'
asg18
S'Y'
sS'.thisRepN'
p4495
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4496
I6
sS'.thisN'
p4497
I561
sg25
S'Y'
sg15
(lp4498
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4499
S'space'
p4500
asg95
I3
sS'.thisIndex'
p4501
I3
sa(dp4502
g16
(lp4503
S'd'
asg18
S'N'
sS'.thisRepN'
p4504
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4505
I7
sS'.thisN'
p4506
I562
sg25
S'Y'
sg15
(lp4507
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4508
I4
sa(dp4509
g16
(lp4510
S'd'
asg18
S'N'
sS'.thisRepN'
p4511
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4512
I8
sS'.thisN'
p4513
I563
sg25
S'Y'
sg15
(lp4514
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4515
I8
sa(dp4516
g16
(lp4517
S'd'
asg18
S'Y'
sS'.thisRepN'
p4518
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4519
I9
sS'.thisN'
p4520
I564
sg25
S'Y'
sg15
(lp4521
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4522
S'space'
p4523
asg95
I4
sS'.thisIndex'
p4524
I4
sa(dp4525
g16
(lp4526
S'd'
asg18
S'N'
sS'.thisRepN'
p4527
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4528
I10
sS'.thisN'
p4529
I565
sg25
S'Y'
sg15
(lp4530
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4531
I9
sa(dp4532
g16
(lp4533
S'k'
asg18
S'Y'
sS'.thisRepN'
p4534
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4535
I11
sS'.thisN'
p4536
I566
sg25
S'Y'
sg15
(lp4537
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4538
S'space'
p4539
asg95
I5
sS'.thisIndex'
p4540
I5
sa(dp4541
g16
(lp4542
S'd'
asg18
S'N'
sS'.thisRepN'
p4543
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4544
I12
sS'.thisN'
p4545
I567
sg25
S'Y'
sg15
(lp4546
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4547
I10
sa(dp4548
g16
(lp4549
S'k'
asg18
S'Y'
sS'.thisRepN'
p4550
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4551
I13
sS'.thisN'
p4552
I568
sg25
S'Y'
sg15
(lp4553
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4554
S'space'
p4555
asg95
I13
sS'.thisIndex'
p4556
I13
sa(dp4557
g16
(lp4558
S'k'
asg18
S'N'
sS'.thisRepN'
p4559
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4560
I14
sS'.thisN'
p4561
I569
sg25
S'Y'
sg15
(lp4562
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4563
I8
sa(dp4564
g16
(lp4565
S'k'
asg18
S'Y'
sS'.thisRepN'
p4566
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4567
I0
sS'.thisN'
p4568
I570
sg25
S'Y'
sg15
(lp4569
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4570
S'space'
p4571
asg95
I1
sS'.thisIndex'
p4572
I1
sa(dp4573
g16
(lp4574
S'd'
asg18
S'N'
sS'.thisRepN'
p4575
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4576
I1
sS'.thisN'
p4577
I571
sg25
S'Y'
sg15
(lp4578
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4579
I13
sa(dp4580
g16
(lp4581
S'd'
asg18
S'Y'
sS'.thisRepN'
p4582
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4583
I2
sS'.thisN'
p4584
I572
sg25
S'Y'
sg15
(lp4585
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4586
S'space'
p4587
asg95
I14
sS'.thisIndex'
p4588
I14
sa(dp4589
g16
(lp4590
S'd'
asg18
S'N'
sS'.thisRepN'
p4591
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4592
I3
sS'.thisN'
p4593
I573
sg25
S'Y'
sg15
(lp4594
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I14
sS'.thisIndex'
p4595
I14
sa(dp4596
g16
(lp4597
S'k'
asg18
S'Y'
sS'.thisRepN'
p4598
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4599
I4
sS'.thisN'
p4600
I574
sg25
S'Y'
sg15
(lp4601
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4602
S'space'
p4603
asg95
I0
sS'.thisIndex'
p4604
I0
sa(dp4605
g16
(lp4606
S'k'
asg18
S'N'
sS'.thisRepN'
p4607
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4608
I5
sS'.thisN'
p4609
I575
sg25
S'Y'
sg15
(lp4610
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4611
I1
sa(dp4612
g16
(lp4613
S'd'
asg18
S'Y'
sS'.thisRepN'
p4614
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4615
I6
sS'.thisN'
p4616
I576
sg25
S'Y'
sg15
(lp4617
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4618
S'space'
p4619
asg95
I1
sS'.thisIndex'
p4620
I1
sa(dp4621
g16
(lp4622
S'k'
asg18
S'N'
sS'.thisRepN'
p4623
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4624
I7
sS'.thisN'
p4625
I577
sg25
S'Y'
sg15
(lp4626
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4627
I8
sa(dp4628
g16
(lp4629
S'k'
asg18
S'Y'
sS'.thisRepN'
p4630
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4631
I8
sS'.thisN'
p4632
I578
sg25
S'Y'
sg15
(lp4633
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4634
S'space'
p4635
asg95
I6
sS'.thisIndex'
p4636
I6
sa(dp4637
g16
(lp4638
S'd'
asg18
S'Y'
sS'.thisRepN'
p4639
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4640
I9
sS'.thisN'
p4641
I579
sg25
S'Y'
sg15
(lp4642
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4643
S'space'
p4644
asg95
I12
sS'.thisIndex'
p4645
I12
sa(dp4646
g16
(lp4647
S'k'
asg18
S'Y'
sS'.thisRepN'
p4648
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4649
I10
sS'.thisN'
p4650
I580
sg25
S'Y'
sg15
(lp4651
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4652
S'space'
p4653
asg95
I8
sS'.thisIndex'
p4654
I8
sa(dp4655
g16
(lp4656
S'k'
asg18
S'Y'
sS'.thisRepN'
p4657
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4658
I11
sS'.thisN'
p4659
I581
sg25
S'Y'
sg15
(lp4660
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4661
S'space'
p4662
asg95
I11
sS'.thisIndex'
p4663
I11
sa(dp4664
g16
(lp4665
S'd'
asg18
S'Y'
sS'.thisRepN'
p4666
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4667
I12
sS'.thisN'
p4668
I582
sg25
S'Y'
sg15
(lp4669
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4670
S'space'
p4671
asg95
I14
sS'.thisIndex'
p4672
I14
sa(dp4673
g16
(lp4674
S'k'
asg18
S'Y'
sS'.thisRepN'
p4675
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4676
I13
sS'.thisN'
p4677
I583
sg25
S'Y'
sg15
(lp4678
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4679
S'space'
p4680
asg95
I4
sS'.thisIndex'
p4681
I4
sa(dp4682
g16
(lp4683
S'd'
asg18
S'N'
sS'.thisRepN'
p4684
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4685
I14
sS'.thisN'
p4686
I584
sg25
S'Y'
sg15
(lp4687
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4688
I12
sa(dp4689
g16
(lp4690
S'd'
asg18
S'Y'
sS'.thisRepN'
p4691
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4692
I0
sS'.thisN'
p4693
I585
sg25
S'Y'
sg15
(lp4694
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4695
S'space'
p4696
asg95
I6
sS'.thisIndex'
p4697
I6
sa(dp4698
g16
(lp4699
S'k'
asg18
S'Y'
sS'.thisRepN'
p4700
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4701
I1
sS'.thisN'
p4702
I586
sg25
S'Y'
sg15
(lp4703
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4704
I0
sa(dp4705
g16
(lp4706
S'k'
asg18
S'Y'
sS'.thisRepN'
p4707
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4708
I2
sS'.thisN'
p4709
I587
sg25
S'Y'
sg15
(lp4710
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4711
S'space'
p4712
asg95
I12
sS'.thisIndex'
p4713
I12
sa(dp4714
g16
(lp4715
S'd'
asg18
S'N'
sS'.thisRepN'
p4716
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4717
I3
sS'.thisN'
p4718
I588
sg25
S'Y'
sg15
(lp4719
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4720
I1
sa(dp4721
g16
(lp4722
S'k'
asg18
S'Y'
sS'.thisRepN'
p4723
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4724
I4
sS'.thisN'
p4725
I589
sg25
S'Y'
sg15
(lp4726
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4727
S'space'
p4728
asg95
I1
sS'.thisIndex'
p4729
I1
sa(dp4730
g16
(lp4731
S'd'
asg18
S'Y'
sS'.thisRepN'
p4732
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4733
I5
sS'.thisN'
p4734
I590
sg25
S'Y'
sg15
(lp4735
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4736
S'space'
p4737
asg95
I7
sS'.thisIndex'
p4738
I7
sa(dp4739
g16
(lp4740
S'k'
asg18
S'N'
sS'.thisRepN'
p4741
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4742
I6
sS'.thisN'
p4743
I591
sg25
S'Y'
sg15
(lp4744
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4745
I10
sa(dp4746
g16
(lp4747
S'd'
asg18
S'N'
sS'.thisRepN'
p4748
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4749
I7
sS'.thisN'
p4750
I592
sg25
S'Y'
sg15
(lp4751
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4752
I12
sa(dp4753
g16
(lp4754
S'd'
asg18
S'N'
sS'.thisRepN'
p4755
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4756
I8
sS'.thisN'
p4757
I593
sg25
S'Y'
sg15
(lp4758
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4759
I8
sa(dp4760
g16
(lp4761
S'd'
asg18
S'N'
sS'.thisRepN'
p4762
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4763
I9
sS'.thisN'
p4764
I594
sg25
S'Y'
sg15
(lp4765
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4766
I7
sa(dp4767
g16
(lp4768
S'k'
asg18
S'N'
sS'.thisRepN'
p4769
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4770
I10
sS'.thisN'
p4771
I595
sg25
S'Y'
sg15
(lp4772
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4773
I1
sa(dp4774
g16
(lp4775
S'k'
asg18
S'N'
sS'.thisRepN'
p4776
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4777
I11
sS'.thisN'
p4778
I596
sg25
S'Y'
sg15
(lp4779
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4780
I2
sa(dp4781
g16
(lp4782
S'd'
asg18
S'Y'
sS'.thisRepN'
p4783
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4784
I12
sS'.thisN'
p4785
I597
sg25
S'Y'
sg15
(lp4786
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4787
S'space'
p4788
asg95
I4
sS'.thisIndex'
p4789
I4
sa(dp4790
g16
(lp4791
S'd'
asg18
S'Y'
sS'.thisRepN'
p4792
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4793
I13
sS'.thisN'
p4794
I598
sg25
S'Y'
sg15
(lp4795
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4796
S'space'
p4797
asg95
I1
sS'.thisIndex'
p4798
I1
sa(dp4799
g16
(lp4800
S'd'
asg18
S'N'
sg22
I43
sg26
S'Y'
sS'.thisN'
p4801
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4802
I14
sS'.thisRepN'
p4803
I39
sg21
I43
sg25
S'Y'
sg23
I24
sg15
(lp4804
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4805
I4
sasS'loops'
p4806
(lp4807
g1
(g35
g3
NtRp4808
(dp4809
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4810
sg40
(lp4811
sg41
I74398256
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4812
g48
g49
(g50
g51
g52
S'b'
tRp4813
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4814
(I1
(I600
I1
tg55
I00
S'\x00\x00\xc5C\x00\x80\x95C\x00\x00\xfdC\x00\x00$B\x00\x00\x02D\x00\x00@@\x00\x00\x93C\x00\x00\xd1C\x00\x00\xb6C\x00\x00\x95C\x00\x00\x06D\x00\x00\xd7C\x00\x80\x92C\x00\x00\xfcC\x00\x00\xa6C\x00\x00\xc2C\x00\x00\x9eC\x00\x00\xd2B\x00\x80\x8dC\x00\x00\x1cB\x00\x00\x00C\x00\x00\x10D\x00\x008B\x00\x80\xcaC\x00\x80\x13D\x00\x000A\x00\x00\xcaC\x00\x00LC\x00\x00|B\x00\xc0\nD\x00\x00\xeeC\x00\x00\xbcB\x00\x80\xe9C\x00\x80\xcfC\x00\x80\xdeC\x00\x00fC\x00\x80\x01D\x00\x00LB\x00\x00\x05C\x00\x80\xabC\x00\x00PA\x00\x00\xd0A\x00\x00\x1bC\x00\x80\x15D\x00\x80\xceC\x00\x00\x11C\x00@\x15D\x00\x00\x10B\x00\xc0\x02D\x00\x00\x01D\x00\x80\x8eC\x00\x00?C\x00\x00uC\x00\x00;C\x00\x80\xa1C\x00\x00\x91C\x00\x00\x80A\x00\x80\xb8C\x00\x00`A\x00\x00CC\x00\x80\xa5C\x00\x00\x9fC\x00\x00\x00D\x00\x00\x19C\x00\x00\xfeC\x00\x00\xc9C\x00\x00\xb1C\x00\x00\x9bC\x00\x80\xa3C\x00\x00,C\x00\xc0\x07D\x00\x00\xfbC\x00\xc0\x0eD\x00\x00\'C\x00\x00\xb2C\x00\x00\xd2C\x00@\x0bD\x00\x00\x80@\x00\x80\xa6C\x00\x00\xe0@\x00\x80\xc4C\x00\x80\xc6C\x00\x80\xaaC\x00\xc0\x15D\x00@\x04D\x00\x00\x8cB\x00\x00\x98A\x00@\x08D\x00\x00\x9eB\x00\x80\xadC\x00\x00\x08D\x00\x80\x83C\x00\x00\xd4B\x00\x80\xb1C\x00\x00\xe1C\x00\x00\xc6C\x00\x80\xbcC\x00\x80\xe6C\x00\x80\xa4C\x00\x00\xedC\x00\x00\x14C\x00\x00@C\x00\x00OC\x00\x00\xe9C\x00\x00\xe0B\x00\x00\xf1C\x00\x80\x96C\x00\x80\xafC\x00\x00\x80C\x00\x00\x86C\x00\x00\x14B\x00\x00\xd9C\x00\x00WC\x00\x00\xa8C\x00@\x02D\x00\x00\xf8B\x00\x00<B\x00\x00iC\x00\x00dC\x00\x00\xb4C\x00\x00\xbeC\x00\x80\x14D\x00\x00hB\x00\x00\xf0C\x00\x80\xd5C\x00\x80\nD\x00\x00XC\x00@\rD\x00\x00\xf8A\x00\xc0\x05D\x00\x80\xefC\x00\x00\x00@\x00\x00\x9cC\x00\x00\x1eC\x00\x80\xc9C\x00\x00VC\x00\x00\x96B\x00\x00\xd8A\x00\x00\xa2C\x00\x80\xdaC\x00\x00\xecB\x00\x00\xc8A\x00@\x14D\x00\x00UC\x00\x00EC\x00\x00)C\x00\x00\xe2C\x00\xc0\x10D\x00\x00\x18B\x00\x80\xccC\x00\x00\xd8B\x00\x00\xafC\x00\x00\x06C\x00\x00 A\x00\x80\xa2C\x00\x80\xacC\x00\x00\x0bC\x00@\x03D\x00\x00<C\x00\x00\xfcB\x00\x00\xcbC\x00\x00\xf4C\x00\x00\x92B\x00\x00DC\x00\x00\xcdC\x00\x80\xe4C\x00\x00\xeeB\x00\x00\xdfC\x00\x00\xb0C\x00\x00GC\x00\x00\x9aC\x00@\x0fD\x00\x00\xf0B\x00\xc0\x01D\x00\x00\xd3C\x00\x00\xaaC\x00\x00%C\x00\x80\xf9C\x00\x00\xf5C\x00\x00\xceC\x00\x00\x1dC\x00\x00\xb8C\x00\x00KC\x00\x00pB\x00\x00\x90B\x00\x00\x8aB\x00\x00\x87C\x00\x00\rD\x00@\nD\x00\x00\xe8C\x00\x00}C\x00\x80\xc0C\x00\x00\x88A\x00\x00\x82B\x00\x80\xb5C\x00\x00\x07C\x00\x00\x84C\x00\x00\xf6C\x00\xc0\rD\x00\x00\xd4C\x00\x80\x0cD\x00\x80\x11D\x00\x00yC\x00\x80\xebC\x00\x80\x9eC\x00\x00@A\x00\x00cC\x00\x00BC\x00\x80\xbaC\x00\x00xB\x00\x00\x83C\x00\x00\xe8B\x00\x00\xa0A\x00\x001C\x00\x00\xdcC\x00\x00\x9dC\x00\x00\xc3C\x00\x00\xb7C\x00\x00\x0fD\x00\x00\x89C\x00\x00\x15C\x00\x00bC\x00\x00\x13D\x00\x80\xfeC\x00\x00\x16C\x00\x00\xc0B\x00\x80\xdfC\x00\x80\xc8C\x00\x00\\B\x00\x00,B\x00\x00mC\x00\xc0\x0bD\x00\x80\xc1C\x00\x00\x81C\x00\x80\xd3C\x00\x00\x96C\x00\x00pA\x00\x00\x8dC\x00@\x12D\x00\x00\x0eC\x00\x00\nC\x00\x00\x86B\x00\x00HC\x00\x00\x12C\x00\x80\x05D\x00\x00\xb9C\x00\x00\xe4C\x00\x00\xc8B\x00\x00\xa1C\x00\x00\x04C\x00\x80\xfcC\x00\x80\xeeC\x00\x80\x8fC\x00\x00\xffC\x00\x00\x00B\x00\x00\x03C\x00\x00~C\x00\x00\xf3C\x00\x00oC\x00\x80\xd4C\x00\x00tB\x00\x00\xa0@\x00\x80\xe8C\x00\x00 B\x00\x003C\x00\x80\xf0C\x00\x00\xb0B\x00\x00QC\x00\x80\xddC\x00\x00\xecC\x00\x80\x86C\x00\x00`B\x00\x00\x13C\x00\x80\xb4C\x00\x80\xecC\x00\x00\xadC\x00\x00\nD\x00\x00\x8fC\x00\x00\x12D\x00\x00\xb8B\x00\x00\x08C\x00\x00SC\x00\x00vC\x00\x80\x02D\x00\x00\xd6B\x00\x00wC\x00\x00\x01C\x00\x00\x90C\x00\x80\xe7C\x00\x00\xc8C\x00\x80\xbdC\x00\x00\x88B\x00\xc0\x03D\x00\x80\x00D\x00\x00gC\x00\x00\x02C\x00\xc0\x0cD\x00\x004B\x00\x00\x14D\x00\x80\xcbC\x00\x00\xa2B\x00\x80\x87C\x00\x00\x11D\x00@\x07D\x00\x00\xa4C\x00\x80\xe3C\x00\x00\xd5C\x00\x00\x1cC\x00\x00\xe0A\x00\x00JC\x00@\x10D\x00\x00\xccB\x00\x00xC\x00\x00_C\x00\x80\xfbC\x00\x80\x0eD\x00\x00\x00\x00\x00\xc0\x08D\x00\x00\x98C\x00\x00\x7fC\x00\x80\xffC\x00\xc0\x13D\x00\x80\x90C\x00\x00\x8eB\x00\x80\x94C\x00\x00\xe6B\x00\x00\x80?\x00\x80\xc5C\x00\x00\xa9C\x00\x80\x8aC\x00\x00\xa8A\x00\x00\x18C\x00\x80\x10D\x00\x80\xaeC\x00\x80\xf3C\x00\x000B\x00\x80\xf6C\x00\x80\x9aC\x00\x80\xd8C\x00@\x13D\x00\x00^C\x00\x80\x0bD\x00\x00:C\x00\x00{C\x00\x00\x92C\x00\x00\x08B\x00\x00YC\x00\x00\xa0B\x00\x00|C\x00\x00\x85C\x00\x80\xd0C\x00\x00\x9cB\x00\x00\xdbC\x00\x00\xf8C\x00\x00\xaeC\x00\x80\tD\x00\x00\x0cC\x00\x00\x8aC\x00\x009C\x00\x00\x90A\x00\x00\xf7C\x00\x00\x9aB\x00\x00\x80B\x00\x00\xbcC\x00\x00\xb6B\x00\x00\xa5C\x00@\x00D\x00\x80\xf1C\x00\x80\xa8C\x00\x00\xc2B\x00\x00DB\x00\x00\x04D\x00\x80\x07D\x00\xc0\x0fD\x00\x80\xfdC\x00\x80\xdbC\x00\x00\xa0C\x00\x00\xe5C\x00\x00-C\x00\x00 C\x00\x00\xdaB\x00\x80\xedC\x00\x00\xc0C\x00\x00\tC\x00\x00rC\x00\x00\xf2B\x00\x00&C\x00\x00eC\x00\x80\x98C\x00\x00`C\x00\x00\xa8B\x00\x00\x97C\x00\x00\xddC\x00\xc0\x11D\x00\x00\xe3C\x00\x00ZC\x00\x00\xc4C\x00\x00lC\x00\x00\rC\x00\x00\xb2B\x00\x00@B\x00@\x0cD\x00\x80\x08D\x00\x00\xbfC\x00\x00\xa6B\x00\x80\xc2C\x00\x00\xbdC\x00\x00\xdcB\x00\x00TC\x00\x80\x9fC\x00\x80\x97C\x00\x80\x9bC\x00\x80\xbfC\x00\x00*C\x00@\x05D\x00\x00\x98B\x00\x00\xacC\x00\x80\xb9C\x00\x00\xdeC\x00\x00\xe4B\x00\x80\xc3C\x00\x00\xbaC\x00\x00\xacB\x00\x00hC\x00\x00qC\x00\x80\xe5C\x00\x00\xc0A\x00\x80\xe2C\x00\x00NC\x00\x00\xfeB\x00\x00\x1fC\x00\x80\x8bC\x00\x00\xb3C\x00\x00>C\x00\x00]C\x00\x80\x0fD\x00\x00\xf9C\x00\x00tC\x00\x80\xcdC\x00\x80\xb7C\x00\x00\xa4B\x00\x00\x94C\x00\x00\xe6C\x00\x80\xbbC\x00\x00PB\x00\x00\xf0A\x00\x80\x89C\x00\x00/C\x00\x00zC\x00\x00IC\x00\x80\x12D\x00\x00\xb0A\x00\x00\x1aC\x00\x00RC\x00\x00\xfaB\x00\xc0\x00D\x00\x000C\x00\x00XB\x00\x00sC\x00\x80\xb2C\x00\x80\xdcC\x00\x80\x8cC\x00\x00$C\x00\x00\xceB\x00\x80\x85C\x00@\x0eD\x00\x00kC\x00\x00\x82C\x00\x80\xd7C\x00\x00\xd0C\x00\x00\xb4B\x00\x00HB\x00\x00AC\x00\x00\xe7C\x00\x80\x82C\x00\x00=C\x00\x008C\x00\x80\xf2C\x00\x80\x88C\x00\x00\xa3C\x00\x80\x84C\x00\x00\x0bD\x00\x006C\x00\x00\xf2C\x00\x00\x94B\x00\x00pC\x00\x00PC\x00\x80\xfaC\x00\x00\x0cD\x00\x00\x8eC\x00\x00\x17C\x00\x00\xd8C\x00\x007C\x00\x00\xf4B\x00\x80\x99C\x00\x80\xe0C\x00\x00\x0eD\x00\x00\xe2B\x00\x80\xbeC\x00\x00!C\x00\x00\x8bC\x00\x00\xc4B\x00\x80\xd2C\x00\x00+C\x00\x80\x81C\x00\x00\x03D\x00\x80\x80C\x00\x00\xdaC\x00\x002C\x00\x00\x00A\x00\x00\xd6C\x00\x00\xd0B\x00\x00lB\x00\x00\x0fC\x00\x00\xa7C\x00\x00\xcaB\x00\x00\x15D\x00\x80\xc7C\x00\x80\xeaC\x00\x00\xeaB\x00\x00\x8cC\x00\x005C\x00@\x06D\x00\x80\xf7C\x00\x00\x88C\x00\x004C\x00\x00\x05D\x00\x00\x04B\x00\x00#C\x00\x00\xabC\x00\x00\xc7C\x00\x00.C\x00\x00\xb8A\x00@\tD\x00\x00\xefC\x00\x80\xf5C\x00@\x11D\x00\x00\x84B\x00\x00\xe8A\x00\x00MC\x00\x80\x04D\x00\x00(B\x00\x80\x9cC\x00\xc0\x12D\x00\x80\x93C\x00\x80\x91C\x00\x80\xf8C\x00\x80\xb3C\x00\x80\x06D\x00\x00\xc0@\x00\x80\xd1C\x00\x00\x10C\x00\x80\xa0C\x00\x00FC\x00\x00\xfaC\x00\x00\xc6B\x00\x80\xd9C\x00\xc0\tD\x00\x00"C\x00\x00TB\x00\xc0\x14D\x00\x00\x10A\x00\x80\rD\x00\xc0\x06D\x00\x80\xf4C\x00\x00\xccC\x00\x00jC\x00\xc0\x04D\x00\x00\xcfC\x00\x00\xeaC\x00\x00\xebC\x00\x00\xbbC\x00\x00\x07D\x00\x00\x99C\x00\x00\x0cB\x00\x00\xbaB\x00\x00\xbeB\x00\x00\xdeB\x00\x00dB\x00\x00\xf6B\x00\x00\\C\x00\x80\x9dC\x00\x00\xe0C\x00\x00\tD\x00\x00\xaeB\x00\x80\xd6C\x00\x00\xaaB\x00\x00\xb5C\x00\x00nC\x00\x80\xe1C\x00\x00[C\x00\x80\xb0C\x00\x00aC\x00\x00(C\x00\x80\xa9C\x00\x80\xb6C\x00@\x01D\x00\x80\x03D\x00\x00\xc1C\x00\x80\xa7C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4815
(dp4816
g60
(dp4817
g48
I01
sg56
I01
ssg62
g4808
sg63
(lp4818
g48
ag56
asg65
(lp4819
I600
aI1
asbsg67
S'random'
p4820
sg69
g70
(g51
(I0
tS'b'
tRp4821
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4822
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'<\x01\x00\x00F\x01\x00\x00\x83\x00\x00\x00\x05\x00\x00\x00M\x00\x00\x00\x05\x01\x00\x00%\x02\x00\x00O\x00\x00\x00\xfd\x01\x00\x001\x02\x00\x00\x99\x00\x00\x00\x19\x00\x00\x00\xcd\x00\x00\x00(\x00\x00\x00:\x00\x00\x00\xec\x00\x00\x008\x00\x00\x00\xc0\x00\x00\x00g\x01\x00\x00V\x00\x00\x00\xd4\x00\x00\x00J\x01\x00\x00\xc3\x01\x00\x00\x14\x02\x00\x00\xaa\x01\x00\x00\x8d\x00\x00\x00)\x00\x00\x00\x89\x00\x00\x004\x01\x00\x00\x1a\x02\x00\x00\xbd\x01\x00\x00\x80\x00\x00\x00\xfe\x00\x00\x00\x0f\x02\x00\x00Y\x01\x00\x00>\x02\x00\x00/\x00\x00\x00n\x00\x00\x00\x94\x00\x00\x00\x13\x00\x00\x00\x07\x01\x00\x00\x03\x00\x00\x00\x1d\x02\x00\x00\xe5\x00\x00\x00O\x01\x00\x00)\x01\x00\x00\x16\x00\x00\x00t\x00\x00\x00\x90\x01\x00\x00r\x01\x00\x00\xd7\x01\x00\x00%\x00\x00\x00\xbc\x01\x00\x00/\x02\x00\x00\xc9\x01\x00\x00\xe4\x00\x00\x00\x0f\x01\x00\x00B\x02\x00\x00z\x00\x00\x00\x00\x02\x00\x00\xb7\x00\x00\x00\x04\x01\x00\x00\xd1\x00\x00\x00\x1c\x00\x00\x00j\x01\x00\x00\xc1\x00\x00\x00\x19\x02\x00\x00\xf1\x00\x00\x00#\x01\x00\x00\xb9\x00\x00\x00U\x00\x00\x00C\x01\x00\x00\xb8\x00\x00\x00\xa2\x00\x00\x00\xe4\x01\x00\x00\x88\x00\x00\x00\x9f\x01\x00\x00i\x01\x00\x00_\x01\x00\x00X\x00\x00\x00[\x01\x00\x00,\x01\x00\x00\xb8\x01\x00\x00\x94\x01\x00\x00\x86\x01\x00\x00J\x02\x00\x00\xa6\x01\x00\x00H\x02\x00\x00\n\x01\x00\x00\x8f\x01\x00\x00\xd6\x01\x00\x00l\x01\x00\x00\x17\x01\x00\x00?\x02\x00\x00\x1f\x00\x00\x00@\x02\x00\x00\xe1\x00\x00\x00q\x01\x00\x00\xf5\x01\x00\x00+\x02\x00\x00\xf7\x00\x00\x00\x03\x02\x00\x007\x01\x00\x00\xcf\x01\x00\x00\xff\x01\x00\x00\x11\x00\x00\x00\\\x00\x00\x00\x1c\x01\x00\x00\x96\x00\x00\x00|\x01\x00\x00\x97\x01\x00\x00A\x02\x00\x00h\x00\x00\x00\xf1\x01\x00\x00\xa3\x01\x00\x00E\x01\x00\x00\xd3\x00\x00\x00\x07\x02\x00\x00\x8c\x00\x00\x00\xa6\x00\x00\x00\xac\x00\x00\x00\x81\x01\x00\x00\xed\x01\x00\x00C\x02\x00\x00s\x00\x00\x00\xc6\x01\x00\x00\x9f\x00\x00\x00\xad\x01\x00\x00\x14\x00\x00\x00\x1e\x01\x00\x00\'\x01\x00\x00\xff\x00\x00\x00\xf9\x00\x00\x00&\x00\x00\x00\x98\x00\x00\x00\xc3\x00\x00\x00\x18\x01\x00\x00\x7f\x01\x00\x00\xf0\x00\x00\x00\x9c\x00\x00\x00d\x01\x00\x00\x8e\x01\x00\x00\xef\x00\x00\x00\x01\x02\x00\x00\'\x02\x00\x00-\x00\x00\x00\xf3\x00\x00\x00\x10\x01\x00\x00d\x00\x00\x00\xdc\x00\x00\x00\xe0\x00\x00\x00\xea\x01\x00\x00K\x01\x00\x00?\x00\x00\x00\xc4\x01\x00\x00*\x00\x00\x003\x01\x00\x00\xb4\x00\x00\x00\x85\x00\x00\x00\xae\x01\x00\x00{\x01\x00\x00\xf3\x01\x00\x00.\x02\x00\x00\x10\x02\x00\x00\xce\x01\x00\x00\xb0\x00\x00\x00\x82\x01\x00\x00I\x00\x00\x00Q\x02\x00\x00\x91\x00\x00\x00\x9d\x01\x00\x00\xf7\x01\x00\x00E\x00\x00\x00z\x01\x00\x00\x13\x02\x00\x00\xbf\x01\x00\x00\xc8\x01\x00\x00\xd5\x00\x00\x00\xfc\x01\x00\x00\x08\x01\x00\x00\r\x02\x00\x00\t\x02\x00\x00\xe2\x01\x00\x00\xec\x01\x00\x00\xdc\x01\x00\x00f\x01\x00\x00V\x01\x00\x005\x00\x00\x00\x9e\x00\x00\x00\xdb\x01\x00\x00\xb1\x01\x00\x003\x00\x00\x00e\x00\x00\x00\xd8\x01\x00\x00\xcf\x00\x00\x00;\x00\x00\x00\xa3\x00\x00\x00\x90\x00\x00\x00)\x02\x00\x00\xa9\x00\x00\x00\xf2\x00\x00\x00\xc1\x01\x00\x005\x01\x00\x00\xb6\x00\x00\x00\x1b\x00\x00\x00\x1b\x02\x00\x00\xac\x01\x00\x00f\x00\x00\x00\xe6\x01\x00\x00\x0b\x01\x00\x00\xc5\x01\x00\x00\x19\x01\x00\x00\x98\x01\x00\x00\x8f\x00\x00\x00\x87\x00\x00\x00p\x00\x00\x00~\x00\x00\x00Z\x01\x00\x00\x8b\x01\x00\x00N\x02\x00\x00D\x02\x00\x00\xb2\x01\x00\x00T\x01\x00\x009\x01\x00\x00\x85\x01\x00\x00P\x02\x00\x00\xdd\x00\x00\x00\xce\x00\x00\x00v\x00\x00\x00\x83\x01\x00\x00#\x00\x00\x00&\x01\x00\x00\xa7\x01\x00\x00u\x00\x00\x006\x02\x00\x00\xd2\x01\x00\x00\x8d\x01\x00\x00\xe6\x00\x00\x00L\x02\x00\x00\x02\x01\x00\x00\xe5\x01\x00\x00\xa8\x01\x00\x00\x80\x01\x00\x00\xca\x01\x00\x00\xb5\x01\x00\x004\x00\x00\x00\x1a\x01\x00\x00\x1d\x01\x00\x008\x01\x00\x00\xca\x00\x00\x00\xc0\x01\x00\x00W\x01\x00\x00\\\x01\x00\x00\xbe\x00\x00\x00\x00\x01\x00\x00?\x01\x00\x00l\x00\x00\x00\xfa\x01\x00\x00\xe9\x00\x00\x00\xf8\x01\x00\x00\xd3\x01\x00\x00\xda\x01\x00\x00\xd2\x00\x00\x00[\x00\x00\x00\xc4\x00\x00\x00\xe0\x01\x00\x00]\x01\x00\x00\xd0\x01\x00\x00m\x00\x00\x00\x0e\x01\x00\x00\xba\x00\x00\x00-\x01\x00\x00\x0c\x02\x00\x00\xde\x01\x00\x00\xdb\x00\x00\x00\xbe\x01\x00\x00e\x01\x00\x00I\x01\x00\x00\xf4\x01\x00\x00\xaf\x01\x00\x00\x08\x02\x00\x00\xcd\x01\x00\x00\xed\x00\x00\x00\x12\x00\x00\x00\xe9\x01\x00\x002\x00\x00\x00\x15\x01\x00\x00\xfc\x00\x00\x00\x1f\x01\x00\x00B\x01\x00\x007\x00\x00\x00!\x02\x00\x00X\x01\x00\x00\x0c\x00\x00\x00\x06\x00\x00\x00 \x02\x00\x00\xb9\x01\x00\x00D\x01\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\xeb\x00\x00\x00j\x00\x00\x00\x87\x01\x00\x00\x9a\x01\x00\x00>\x01\x00\x00\x84\x01\x00\x00=\x02\x00\x00\xee\x01\x00\x00\xaa\x00\x00\x00Q\x01\x00\x00C\x00\x00\x00\x9b\x01\x00\x00\x84\x00\x00\x00\x1e\x02\x00\x00\xd7\x00\x00\x00E\x02\x00\x00\x10\x00\x00\x00\xcc\x00\x00\x00=\x00\x00\x00\x99\x01\x00\x00x\x01\x00\x00(\x02\x00\x00\xf8\x00\x00\x006\x00\x00\x00\x8a\x00\x00\x00\x9a\x00\x00\x00\xdf\x01\x00\x00D\x00\x00\x000\x01\x00\x00b\x00\x00\x00m\x01\x00\x00<\x00\x00\x00\x0e\x00\x00\x00N\x00\x00\x00\x02\x02\x00\x00W\x02\x00\x00q\x00\x00\x00p\x01\x00\x00H\x01\x00\x00R\x02\x00\x00\xaf\x00\x00\x00R\x00\x00\x00\x11\x02\x00\x00\'\x00\x00\x00\xa0\x01\x00\x00\x9b\x00\x00\x00\x13\x01\x00\x00Y\x00\x00\x00b\x01\x00\x00M\x01\x00\x00\x97\x00\x00\x00k\x00\x00\x00\xa8\x00\x00\x00O\x02\x00\x00B\x00\x00\x00]\x00\x00\x00J\x00\x00\x00\xcb\x01\x00\x00\xb0\x01\x00\x00#\x02\x00\x00w\x00\x00\x00\x11\x01\x00\x00K\x02\x00\x00\xc2\x00\x00\x00\x08\x00\x00\x00S\x02\x00\x00\xd9\x00\x00\x00\xb7\x01\x00\x00\xb5\x00\x00\x009\x00\x00\x00\xf5\x00\x00\x00\xa1\x01\x00\x00\xa5\x01\x00\x00\xd0\x00\x00\x00;\x02\x00\x00\xbb\x01\x00\x00k\x01\x00\x00`\x00\x00\x00\x96\x01\x00\x00"\x01\x00\x00x\x00\x00\x00\xf2\x01\x00\x00\x93\x01\x00\x00\x9c\x01\x00\x00~\x01\x00\x00\xbf\x00\x00\x00V\x02\x00\x00\xe8\x00\x00\x00\x0f\x00\x00\x00\x95\x01\x00\x00\xd8\x00\x00\x00\xa4\x01\x00\x00\x8c\x01\x00\x00P\x00\x00\x00\x00\x00\x00\x00G\x01\x00\x00_\x00\x00\x00Q\x00\x00\x00\x12\x02\x00\x00\x05\x02\x00\x00!\x01\x00\x00\xe3\x00\x00\x00A\x00\x00\x00\x86\x00\x00\x00\x1a\x00\x00\x00\x17\x00\x00\x00\xa0\x00\x00\x00+\x01\x00\x005\x02\x00\x00\x95\x00\x00\x00\xa4\x00\x00\x00\xb6\x01\x00\x00\xb3\x00\x00\x00,\x00\x00\x008\x02\x00\x00!\x00\x00\x00\xd5\x01\x00\x00^\x01\x00\x00\x07\x00\x00\x00&\x02\x00\x00K\x00\x00\x00\xf6\x01\x00\x00\xae\x00\x00\x00\xea\x00\x00\x00\xc7\x00\x00\x00\x03\x01\x00\x002\x01\x00\x00|\x00\x00\x00\xfe\x01\x00\x00I\x02\x00\x00\x0b\x00\x00\x00\xd4\x01\x00\x00\xeb\x01\x00\x00R\x01\x00\x00o\x00\x00\x00,\x02\x00\x00\xfb\x01\x00\x00\x8b\x00\x00\x00`\x01\x00\x00w\x01\x00\x00\xd6\x00\x00\x00\xcc\x01\x00\x00\x88\x01\x00\x00\x0c\x01\x00\x00\xa2\x01\x00\x00"\x00\x00\x00\xa7\x00\x00\x00\xe2\x00\x00\x00F\x02\x00\x00\xef\x01\x00\x00^\x00\x00\x00M\x02\x00\x00\x92\x00\x00\x00\xab\x01\x00\x00\x8a\x01\x00\x001\x01\x00\x00\xf6\x00\x00\x00\xa5\x00\x00\x00y\x01\x00\x00\xa9\x01\x00\x00\xba\x01\x00\x00a\x00\x00\x00\xd9\x01\x00\x00 \x01\x00\x00\xbd\x00\x00\x00\x06\x01\x00\x00g\x00\x00\x00 \x00\x00\x009\x02\x00\x00\x06\x02\x00\x00:\x02\x00\x00\xcb\x00\x00\x00\r\x01\x00\x00\x12\x01\x00\x00c\x00\x00\x00}\x01\x00\x00\x1e\x00\x00\x00\xfb\x00\x00\x00\x16\x02\x00\x00\x82\x00\x00\x00{\x00\x00\x00\t\x01\x00\x00i\x00\x00\x00o\x01\x00\x00\xe3\x01\x00\x00\xdd\x01\x00\x00\x01\x01\x00\x00N\x01\x00\x00\xa1\x00\x00\x004\x02\x00\x00\xb2\x00\x00\x00\x17\x02\x00\x00\xc5\x00\x00\x00P\x01\x00\x00h\x01\x00\x00\x0b\x02\x00\x00a\x01\x00\x00"\x02\x00\x00\xb4\x01\x00\x00\xb1\x00\x00\x00*\x02\x00\x00\xe7\x01\x00\x00G\x00\x00\x00:\x01\x00\x00\r\x00\x00\x00\xfa\x00\x00\x00\x02\x00\x00\x00v\x01\x00\x00@\x00\x00\x00\xdf\x00\x00\x00\xfd\x00\x00\x00@\x01\x00\x00>\x00\x00\x00n\x01\x00\x00%\x01\x00\x00\xc7\x01\x00\x001\x00\x00\x00T\x02\x00\x00$\x00\x00\x00\xad\x00\x00\x00\x04\x00\x00\x00r\x00\x00\x00\x1b\x01\x00\x000\x00\x00\x00\xf9\x01\x00\x00\x9d\x00\x00\x00U\x02\x00\x00$\x01\x00\x00s\x01\x00\x00T\x00\x00\x00\x1c\x02\x00\x007\x02\x00\x00\x0e\x02\x00\x00\x9e\x01\x00\x00\xf4\x00\x00\x00\x81\x00\x00\x00\n\x00\x00\x00\n\x02\x00\x00$\x02\x00\x003\x02\x00\x00<\x02\x00\x00/\x01\x00\x00t\x01\x00\x00F\x00\x00\x00Z\x00\x00\x00W\x00\x00\x00\x92\x01\x00\x00=\x01\x00\x00G\x02\x00\x00\x15\x02\x00\x00c\x01\x00\x00-\x02\x00\x00\x14\x01\x00\x00\xbc\x00\x00\x00}\x00\x00\x00\x1d\x00\x00\x00\xe1\x01\x00\x00L\x00\x00\x00U\x01\x00\x00\xe7\x00\x00\x00\xe8\x01\x00\x00\x91\x01\x00\x00\xc8\x00\x00\x00(\x01\x00\x00\xbb\x00\x00\x00\x7f\x00\x00\x002\x02\x00\x00\xc6\x00\x00\x00\xf0\x01\x00\x00\xd1\x01\x00\x00;\x01\x00\x00H\x00\x00\x00\xda\x00\x00\x00\xab\x00\x00\x00\xb3\x01\x00\x00u\x01\x00\x00\x15\x00\x00\x006\x01\x00\x00L\x01\x00\x00\x93\x00\x00\x00.\x01\x00\x00\x18\x02\x00\x00\xc9\x00\x00\x00\x89\x01\x00\x00\x16\x01\x00\x00\xee\x00\x00\x00\xc2\x01\x00\x00\x1f\x02\x00\x00\xde\x00\x00\x00S\x01\x00\x00\x18\x00\x00\x00A\x01\x00\x00*\x01\x00\x00\x8e\x00\x00\x00y\x00\x00\x000\x02\x00\x00\x04\x02\x00\x00.\x00\x00\x00+\x00\x00\x00S\x00\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4823
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4824
(g4822
S'S\x00\x00\x00'
tRp4825
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4826
I01
sb.