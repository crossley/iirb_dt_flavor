ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject644
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 644
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vmale
p31
sS'age'
p32
V19
p33
ssS'loopsUnfinished'
p34
(lp35
g1
(cpsychopy.data
TrialHandler
p36
g3
NtRp37
(dp38
S'origin'
p39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p40
sS'thisTrial'
p41
I6
sS'_exp'
p42
I73341488
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p43
sS'thisRepN'
p44
I39
sg27
I01
sg28
NsS'data'
p45
g1
(cpsychopy.data
DataHandler
p46
c__builtin__
dict
p47
(dp48
S'ran'
p49
cnumpy.ma.core
_mareconstruct
p50
(cnumpy.ma.core
MaskedArray
p51
cnumpy
ndarray
p52
(I0
tp53
S'b'
tRp54
(I1
(I15
I40
tcnumpy
dtype
p55
(S'f4'
I0
I1
tRp56
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p57
g50
(g51
g52
g53
S'b'
tRp58
(I1
(I15
I40
tg56
I00
S'\x00\x00\x80A\x00\x00\x98A\x00\x00\xa8A\x00\x00\xa6B\x00\x00\xb8B\x00\x00\xc2B\x00\x00\xf4B\x00\x00\x19C\x00\x00\x1bC\x00\x00\x1cC\x00\x00(C\x00\x00*C\x00\x00.C\x00\x00GC\x00\x00SC\x00\x00YC\x00\x00[C\x00\x00fC\x00\x00pC\x00\x00\x83C\x00\x80\x86C\x00\x80\x8aC\x00\x80\x91C\x00\x00\xacC\x00\x00\xb4C\x00\x80\xb4C\x00\x80\xccC\x00\x80\xcdC\x00\x00\xe7C\x00\x00\xe8C\x00\x00\xf1C\x00\x80\xf3C\x00\x80\xfdC\x00\x00\x02D\x00\x80\x04D\x00\x00\x06D\x00@\x08D\x00\x00\x10D\x00\xc0\x10D\x00\x80\x12D\x00\x00\x80?\x00\x000A\x00\x00\x00B\x00\x00\x1cB\x00\x004B\x00\x00TB\x00\x00|B\x00\x00\x82B\x00\x00\xb6B\x00\x00\xdeB\x00\x00\x01C\x00\x00\rC\x00\x00\x1fC\x00\x00&C\x00\x00<C\x00\x00QC\x00\x00oC\x00\x80\x90C\x00\x00\x91C\x00\x00\x92C\x00\x80\x98C\x00\x80\x9aC\x00\x80\x9cC\x00\x00\x9fC\x00\x80\xa0C\x00\x00\xb9C\x00\x00\xbdC\x00\x80\xbeC\x00\x80\xc3C\x00\x00\xc6C\x00\x00\xcdC\x00\x00\xd4C\x00\x00\xd6C\x00\x80\xdbC\x00\x80\xdcC\x00\x80\xe8C\x00\x80\xeeC\x00\x00\x00D\x00@\x04D\x00\x80\x07D\x00\x00\x90A\x00\x00\x14B\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00\x84B\x00\x00\x96B\x00\x00\xaaB\x00\x00\xbaB\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xe0B\x00\x00\xe6B\x00\x00;C\x00\x00AC\x00\x00CC\x00\x00NC\x00\x00aC\x00\x00rC\x00\x00sC\x00\x00yC\x00\x00\x81C\x00\x80\x81C\x00\x80\x8dC\x00\x00\x99C\x00\x00\xadC\x00\x80\xb8C\x00\x00\xd5C\x00\x80\xd5C\x00\x80\xd9C\x00\x00\xdcC\x00\x80\xf7C\x00\x80\x00D\x00\x80\x06D\x00\xc0\tD\x00\x80\x0cD\x00\xc0\x0eD\x00\x80\x0fD\x00\x80\x11D\x00\x00\x15D\x00\x00pA\x00\x00\x08B\x00\x00\x94B\x00\x00\xdaB\x00\x00\xf2B\x00\x00\xf8B\x00\x00\x08C\x00\x00\x1aC\x00\x00+C\x00\x00eC\x00\x00wC\x00\x00\x8dC\x00\x00\x8eC\x00\x80\x95C\x00\x00\x9cC\x00\x00\xabC\x00\x00\xb2C\x00\x80\xbcC\x00\x00\xc5C\x00\x80\xc9C\x00\x00\xcbC\x00\x00\xd1C\x00\x80\xd6C\x00\x00\xddC\x00\x80\xddC\x00\x00\xdeC\x00\x00\xe4C\x00\x80\xe5C\x00\x80\xecC\x00\x80\xf0C\x00\x80\xf1C\x00\x00\xfdC\x00\x80\xffC\x00@\x03D\x00@\x07D\x00\x00\x08D\x00\x00\tD\x00\xc0\nD\x00\xc0\rD\x00@\x0fD\x00\x00\xe0@\x00\x00\x10A\x00\x00$B\x00\x00,B\x00\x00DB\x00\x00dB\x00\x00tB\x00\x00\x8aB\x00\x00\x9eB\x00\x00\xd2B\x00\x00\xeaB\x00\x00\x03C\x00\x00\x15C\x00\x00\'C\x00\x00@C\x00\x00LC\x00\x00PC\x00\x00\\C\x00\x00dC\x00\x00}C\x00\x80\x83C\x00\x00\x8cC\x00\x80\x9dC\x00\x80\xa9C\x00\x00\xb1C\x00\x00\xbbC\x00\x80\xbdC\x00\x80\xc2C\x00\x80\xcfC\x00\x80\xe4C\x00\x00\xf4C\x00\x80\xf4C\x00\x00\xfcC\x00\x00\x04D\x00\x00\x05D\x00\x80\tD\x00\x00\x0bD\x00\x80\x0bD\x00\x00\x0cD\x00\xc0\x0fD\x00\x00@@\x00\x00PA\x00\x00\xf0A\x00\x00\x18B\x00\x00XB\x00\x00hB\x00\x00\xa4B\x00\x00\xc0B\x00\x00\x06C\x00\x00\x10C\x00\x00\x17C\x00\x00#C\x00\x00,C\x00\x000C\x00\x00xC\x00\x00~C\x00\x00\x8fC\x00\x80\x96C\x00\x00\x97C\x00\x80\xa5C\x00\x00\xa9C\x00\x80\xc1C\x00\x00\xc3C\x00\x00\xccC\x00\x80\xd2C\x00\x00\xd8C\x00\x80\xd8C\x00\x80\xeaC\x00\x00\xecC\x00\x00\xf2C\x00\x80\xf6C\x00\x00\xf8C\x00\x00\x01D\x00\x80\x03D\x00\x80\x05D\x00\xc0\x05D\x00\x00\nD\x00\xc0\x0cD\x00\x80\x0eD\x00\x00\x11D\x00\x00\xb8A\x00\x00\x10B\x00\x00\xa8B\x00\x00\x14C\x00\x00/C\x00\x004C\x00\x008C\x00\x00?C\x00\x00KC\x00\x00gC\x00\x00\x7fC\x00\x00\x80C\x00\x80\x80C\x00\x00\x82C\x00\x00\x8aC\x00\x80\x8bC\x00\x00\x95C\x00\x80\x9fC\x00\x00\xa0C\x00\x80\xa2C\x00\x00\xa6C\x00\x80\xa7C\x00\x80\xb3C\x00\x00\xb5C\x00\x80\xbbC\x00\x00\xbeC\x00\x80\xbfC\x00\x00\xc1C\x00\x80\xdfC\x00\x80\xe1C\x00\x00\xe2C\x00\x00\xeaC\x00\x80\xf5C\x00\x00\xf6C\x00\x80\xfcC\x00@\x05D\x00\xc0\x08D\x00@\tD\x00\xc0\x13D\x00\xc0\x15D\x00\x00\x00A\x00\x00\xe0A\x00\x00\xf8A\x00\x00<B\x00\x00\x8cB\x00\x00\x92B\x00\x00\x9cB\x00\x00\xccB\x00\x00\xd0B\x00\x00\xe8B\x00\x00\xfeB\x00\x00\x05C\x00\x00\x0eC\x00\x00\x13C\x00\x00$C\x00\x002C\x00\x006C\x00\x00OC\x00\x00kC\x00\x00tC\x00\x00{C\x00\x80\x82C\x00\x80\x85C\x00\x00\x8bC\x00\x80\x94C\x00\x80\x99C\x00\x80\xaeC\x00\x80\xafC\x00\x80\xb0C\x00\x00\xc2C\x00\x80\xc8C\x00\x80\xceC\x00\x80\xdaC\x00\x00\xebC\x00\x80\xedC\x00\x00\xf5C\x00\x00\xf7C\x00@\x0bD\x00\x00\x12D\x00@\x15D\x00\x00\x00\x00\x00\x00\x80@\x00\x00\xc0@\x00\x00\xa0A\x00\x00\xc0A\x00\x00\x0cB\x00\x00 B\x00\x00lB\x00\x00\x88B\x00\x00\xc6B\x00\x00\xd8B\x00\x00\xf6B\x00\x00\x0bC\x00\x00\x16C\x00\x00!C\x00\x00"C\x00\x003C\x00\x00>C\x00\x00MC\x00\x00RC\x00\x00]C\x00\x00vC\x00\x00\x84C\x00\x00\xb8C\x00\x80\xc5C\x00\x00\xd3C\x00\x00\xd7C\x00\x00\xdfC\x00\x80\xe7C\x00\x80\xe9C\x00\x00\xeeC\x00\x00\xefC\x00\x80\xefC\x00@\x00D\x00@\x02D\x00\xc0\x0bD\x00@\rD\x00\x00\x0eD\x00\x00\x0fD\x00@\x13D\x00\x00\xa0@\x00\x00\xd8A\x00\x00\xe8A\x00\x008B\x00\x00pB\x00\x00xB\x00\x00\x86B\x00\x00\x8eB\x00\x00\xb4B\x00\x00\xf0B\x00\x00\xfaB\x00\x001C\x00\x00:C\x00\x00IC\x00\x00WC\x00\x00iC\x00\x00jC\x00\x80\x89C\x00\x80\x92C\x00\x00\xb3C\x00\x80\xb9C\x00\x80\xc7C\x00\x00\xc9C\x00\x80\xcaC\x00\x00\xd2C\x00\x80\xe2C\x00\x00\xe3C\x00\x80\xebC\x00\x80\xf2C\x00\x00\xf3C\x00\x00\xfaC\x00\x00\xfeC\x00\x80\x02D\x00@\x0cD\x00\xc0\x11D\x00@\x12D\x00\x00\x13D\x00\x80\x13D\x00\xc0\x14D\x00\x80\x15D\x00\x00\x00@\x00\x00 A\x00\x00\x04B\x00\x000B\x00\x00\x90B\x00\x00\xb0B\x00\x00\xeeB\x00\x00\x00C\x00\x00\x04C\x00\x00\tC\x00\x00)C\x00\x00BC\x00\x00JC\x00\x00TC\x00\x00`C\x00\x00bC\x00\x00\x86C\x00\x00\x88C\x00\x80\x93C\x00\x00\x96C\x00\x00\x98C\x00\x00\x9aC\x00\x00\x9dC\x00\x00\xa5C\x00\x80\xa8C\x00\x80\xabC\x00\x80\xadC\x00\x00\xaeC\x00\x80\xb5C\x00\x00\xb6C\x00\x00\xbfC\x00\x00\xc7C\x00\x80\xd0C\x00\x80\xe0C\x00\x00\xe6C\x00\x80\xfaC\x00\x80\xfeC\x00\x00\x07D\x00@\x11D\x00\xc0\x12D\x00\x00\x88A\x00\x00\xd0A\x00\x00\x9aB\x00\x00\xacB\x00\x00\xc4B\x00\x00\x02C\x00\x00\x0cC\x00\x00%C\x00\x007C\x00\x00=C\x00\x00DC\x00\x00UC\x00\x00VC\x00\x00lC\x00\x00qC\x00\x00uC\x00\x80\x8fC\x00\x00\x90C\x00\x80\xa1C\x00\x00\xa2C\x00\x80\xa3C\x00\x00\xa4C\x00\x00\xa7C\x00\x80\xb2C\x00\x00\xb7C\x00\x00\xc4C\x00\x80\xc6C\x00\x80\xd3C\x00\x80\xd4C\x00\x00\xd9C\x00\x00\xdbC\x00\x80\xdeC\x00\x00\xe1C\x00\x00\xe9C\x00\x80\xf9C\x00\x00\xffC\x00\xc0\x01D\x00\xc0\x02D\x00\xc0\x04D\x00@\nD\x00\x00\xb0A\x00\x00@B\x00\x00\\B\x00\x00`B\x00\x00\xb2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xdcB\x00\x00\xe2B\x00\x00\xe4B\x00\x00 C\x00\x00hC\x00\x00nC\x00\x00|C\x00\x00\x85C\x00\x80\x87C\x00\x80\x88C\x00\x00\x93C\x00\x80\x9bC\x00\x00\x9eC\x00\x80\xa4C\x00\x80\xa6C\x00\x80\xaaC\x00\x00\xafC\x00\x80\xb6C\x00\x80\xb7C\x00\x80\xbaC\x00\x00\xc0C\x00\x00\xceC\x00\x00\xd0C\x00\x80\xd7C\x00\x80\xf8C\x00\xc0\x00D\x00\xc0\x03D\x00\x80\nD\x00\x00\rD\x00@\x0eD\x00\x80\x10D\x00\x00\x14D\x00@\x14D\x00\x00@A\x00\x00\xc8A\x00\x00(B\x00\x00\xa0B\x00\x00\xaeB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xecB\x00\x00\xfcB\x00\x00\x07C\x00\x00\x0fC\x00\x00\x11C\x00\x00\x12C\x00\x00\x18C\x00\x00\x1eC\x00\x005C\x00\x009C\x00\x00EC\x00\x00FC\x00\x00_C\x00\x00cC\x00\x00zC\x00\x00\x9bC\x00\x00\xa3C\x00\x00\xb0C\x00\x80\xb1C\x00\x00\xbaC\x00\x80\xc0C\x00\x80\xc4C\x00\x00\xcfC\x00\x00\xe0C\x00\x80\xe3C\x00\x00\xf9C\x00\x00\xfbC\x00@\x01D\x00\x00\x03D\x00\xc0\x07D\x00\x80\x08D\x00\x80\rD\x00\x80\x14D\x00\x00`A\x00\x00\x80B\x00\x00\x98B\x00\x00\xa2B\x00\x00\xceB\x00\x00\nC\x00\x00\x1dC\x00\x00-C\x00\x00HC\x00\x00XC\x00\x00ZC\x00\x00^C\x00\x00mC\x00\x80\x84C\x00\x00\x87C\x00\x00\x89C\x00\x80\x8cC\x00\x80\x8eC\x00\x00\x94C\x00\x80\x97C\x00\x80\x9eC\x00\x00\xa1C\x00\x00\xa8C\x00\x00\xaaC\x00\x80\xacC\x00\x00\xbcC\x00\x00\xc8C\x00\x00\xcaC\x00\x80\xcbC\x00\x80\xd1C\x00\x00\xdaC\x00\x00\xe5C\x00\x80\xe6C\x00\x00\xedC\x00\x00\xf0C\x00\x80\xfbC\x00\x80\x01D\x00@\x06D\x00\xc0\x06D\x00@\x10D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp59
(dp60
S'isNumeric'
p61
(dp62
g49
I01
sg57
I01
ssS'trials'
p63
g37
sS'dataTypes'
p64
(lp65
g49
ag57
asS'dataShape'
p66
(lp67
I15
aI40
asbsS'method'
p68
S'fullRandom'
p69
sS'sequenceIndices'
p70
cnumpy.core.multiarray
_reconstruct
p71
(g52
(I0
tS'b'
tRp72
(I1
(I15
I40
tg55
(S'O4'
I0
I1
tRp73
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp74
I8
aI3
aI5
aI1
aI9
aI2
aI9
aI4
aI9
aI13
aI8
aI11
aI6
aI2
aI8
aI2
aI0
aI6
aI14
aI14
aI10
aI4
aI10
aI14
aI0
aI6
aI5
aI9
aI9
aI2
aI11
aI1
aI14
aI2
aI11
aI3
aI10
aI3
aI5
aI9
aI1
aI0
aI7
aI9
aI4
aI14
aI1
aI12
aI3
aI3
aI5
aI1
aI13
aI11
aI0
aI10
aI11
aI6
aI12
aI5
aI5
aI12
aI5
aI2
aI0
aI14
aI1
aI3
aI5
aI14
aI6
aI11
aI3
aI5
aI3
aI5
aI3
aI4
aI2
aI0
aI10
aI11
aI1
aI7
aI9
aI11
aI0
aI12
aI0
aI10
aI13
aI4
aI7
aI13
aI10
aI13
aI2
aI6
aI10
aI11
aI5
aI14
aI6
aI10
aI6
aI3
aI11
aI14
aI8
aI7
aI6
aI8
aI0
aI12
aI1
aI12
aI1
aI7
aI8
aI10
aI5
aI2
aI10
aI12
aI1
aI7
aI2
aI8
aI8
aI14
aI0
aI0
aI11
aI13
aI11
aI4
aI2
aI2
aI12
aI11
aI14
aI1
aI12
aI10
aI10
aI1
aI13
aI5
aI11
aI11
aI9
aI6
aI3
aI13
aI8
aI4
aI13
aI4
aI3
aI9
aI8
aI0
aI3
aI4
aI14
aI4
aI13
aI3
aI3
aI8
aI3
aI10
aI6
aI0
aI11
aI3
aI7
aI2
aI14
aI1
aI10
aI6
aI11
aI7
aI10
aI4
aI3
aI0
aI1
aI1
aI9
aI5
aI5
aI11
aI2
aI1
aI3
aI8
aI2
aI8
aI9
aI8
aI8
aI2
aI1
aI13
aI13
aI12
aI9
aI11
aI0
aI0
aI13
aI14
aI9
aI0
aI11
aI6
aI9
aI1
aI1
aI6
aI6
aI12
aI12
aI6
aI8
aI1
aI11
aI2
aI13
aI7
aI9
aI9
aI12
aI0
aI0
aI4
aI4
aI9
aI8
aI0
aI6
aI2
aI2
aI14
aI5
aI1
aI13
aI1
aI0
aI3
aI9
aI9
aI14
aI6
aI8
aI7
aI6
aI0
aI2
aI1
aI14
aI7
aI11
aI1
aI1
aI0
aI2
aI1
aI3
aI9
aI9
aI10
aI5
aI11
aI13
aI9
aI0
aI6
aI4
aI12
aI2
aI2
aI9
aI5
aI0
aI2
aI7
aI7
aI14
aI5
aI2
aI10
aI0
aI12
aI3
aI0
aI0
aI1
aI7
aI14
aI10
aI13
aI12
aI10
aI11
aI12
aI2
aI3
aI4
aI5
aI0
aI13
aI13
aI4
aI6
aI2
aI14
aI12
aI7
aI6
aI5
aI1
aI8
aI0
aI11
aI12
aI10
aI13
aI13
aI14
aI1
aI6
aI14
aI9
aI5
aI4
aI7
aI9
aI10
aI11
aI5
aI7
aI8
aI6
aI10
aI7
aI1
aI3
aI14
aI3
aI4
aI14
aI14
aI6
aI3
aI5
aI12
aI12
aI4
aI8
aI1
aI5
aI4
aI6
aI8
aI12
aI1
aI5
aI1
aI0
aI11
aI4
aI0
aI9
aI2
aI8
aI6
aI12
aI1
aI11
aI4
aI4
aI2
aI12
aI9
aI13
aI3
aI3
aI3
aI14
aI4
aI4
aI11
aI5
aI6
aI12
aI0
aI13
aI10
aI13
aI8
aI12
aI7
aI2
aI2
aI2
aI11
aI13
aI12
aI6
aI8
aI8
aI4
aI7
aI13
aI14
aI4
aI10
aI13
aI6
aI14
aI13
aI1
aI13
aI14
aI4
aI8
aI11
aI10
aI7
aI7
aI6
aI0
aI5
aI4
aI8
aI5
aI9
aI1
aI11
aI4
aI12
aI9
aI11
aI2
aI7
aI4
aI13
aI8
aI5
aI6
aI2
aI8
aI11
aI7
aI12
aI14
aI14
aI12
aI13
aI12
aI3
aI9
aI6
aI7
aI12
aI12
aI8
aI14
aI8
aI6
aI3
aI8
aI0
aI2
aI13
aI10
aI2
aI13
aI9
aI13
aI4
aI10
aI13
aI7
aI4
aI10
aI7
aI8
aI9
aI4
aI7
aI14
aI14
aI12
aI7
aI3
aI7
aI3
aI11
aI3
aI11
aI13
aI5
aI9
aI10
aI5
aI6
aI0
aI1
aI6
aI0
aI9
aI14
aI5
aI3
aI2
aI7
aI5
aI7
aI4
aI5
aI7
aI10
aI14
aI13
aI7
aI6
aI5
aI7
aI2
aI4
aI13
aI12
aI4
aI10
aI2
aI6
aI1
aI11
aI10
aI9
aI12
aI7
aI3
aI3
aI5
aI13
aI8
aI8
aI5
aI9
aI11
aI2
aI11
aI8
aI9
aI9
aI14
aI9
aI10
aI8
aI3
aI12
aI7
aI10
aI5
aI4
aI7
aI8
aI10
aI1
aI10
aI1
aI5
aI0
aI3
aI3
aI10
aI12
aI0
aI6
aI4
aI4
aI14
aI14
aI11
aI10
aI0
aI8
aI7
aI10
aI13
aI14
aI12
aI12
aI7
aI6
atbsS'finished'
p75
I00
sS'nReps'
p76
I40
sS'nRemaining'
p77
I0
sS'trialList'
p78
(lp79
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p80
NsS'thisIndex'
p81
I6
sS'thisN'
p82
I599
sS'thisTrialN'
p83
I14
sS'nTotal'
p84
I600
sS'_warnUseOfNext'
p85
I01
sbasS'saveWideText'
p86
I01
sS'thisEntry'
p87
(dp88
sS'version'
p89
S''
sS'_paramNamesSoFar'
p90
(lp91
sS'entries'
p92
(lp93
(dp94
g16
(lp95
S'd'
asS'.thisTrial'
p96
I8
sS'.thisRepN'
p97
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p98
I0
sS'.thisN'
p99
I0
sS'.thisIndex'
p100
I8
sg15
(lp101
S'k'
asg17
S'N'
sg14
I1
sa(dp102
g16
(lp103
S'k'
asg96
I1
sS'.thisRepN'
p104
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p105
I1
sS'.thisN'
p106
I1
sS'.thisIndex'
p107
I1
sg15
(lp108
S'd'
asg17
S'N'
sg14
I1
sa(dp109
g16
(lp110
S'd'
asg18
S'N'
sS'.thisRepN'
p111
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p112
I2
sS'.thisN'
p113
I2
sS'.thisIndex'
p114
I10
sg15
(lp115
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I10
sa(dp116
g16
(lp117
S'd'
asg18
S'N'
sS'.thisRepN'
p118
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p119
I3
sS'.thisN'
p120
I3
sS'.thisIndex'
p121
I5
sg15
(lp122
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I5
sa(dp123
g16
(lp124
S'k'
asg18
S'N'
sS'.thisRepN'
p125
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p126
I4
sS'.thisN'
p127
I4
sS'.thisIndex'
p128
I8
sg15
(lp129
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I8
sa(dp130
g16
(lp131
S'd'
asg18
S'Y'
sS'.thisRepN'
p132
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p133
I5
sS'.thisN'
p134
I5
sS'.thisIndex'
p135
I9
sg15
(lp136
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp137
S'k'
asg96
I9
sa(dp138
g16
(lp139
S'd'
asg18
S'N'
sS'.thisRepN'
p140
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p141
I6
sS'.thisN'
p142
I6
sS'.thisIndex'
p143
I8
sg15
(lp144
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I8
sa(dp145
g16
(lp146
S'd'
asg18
S'N'
sS'.thisRepN'
p147
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p148
I7
sS'.thisN'
p149
I7
sS'.thisIndex'
p150
I4
sg15
(lp151
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I4
sa(dp152
g16
(lp153
S'k'
asg18
S'N'
sS'.thisRepN'
p154
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p155
I8
sS'.thisN'
p156
I8
sS'.thisIndex'
p157
I7
sg15
(lp158
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I7
sa(dp159
g16
(lp160
S'd'
asg18
S'Y'
sS'.thisRepN'
p161
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p162
I9
sS'.thisN'
p163
I9
sS'.thisIndex'
p164
I4
sg15
(lp165
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I4
sa(dp166
g16
(lp167
S'd'
asg18
S'Y'
sS'.thisRepN'
p168
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p169
I10
sS'.thisN'
p170
I10
sS'.thisIndex'
p171
I10
sg15
(lp172
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp173
S'space'
p174
asg96
I10
sa(dp175
g16
(lp176
S'k'
asg18
S'Y'
sS'.thisRepN'
p177
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p178
I11
sS'.thisN'
p179
I11
sS'.thisIndex'
p180
I1
sg15
(lp181
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I1
sa(dp182
g16
(lp183
S'k'
asg18
S'Y'
sS'.thisRepN'
p184
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p185
I12
sS'.thisN'
p186
I12
sS'.thisIndex'
p187
I13
sg15
(lp188
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I13
sa(dp189
g18
S'N'
sS'.thisRepN'
p190
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p191
I13
sS'.thisN'
p192
I13
sS'.thisIndex'
p193
I5
sg15
Nsg30
g31
sg17
S'Timed out'
p194
sg14
I1
sg19
Nsg96
I5
sa(dp195
g16
(lp196
S'd'
asg18
S'Y'
sS'.thisRepN'
p197
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p198
I14
sS'.thisN'
p199
I14
sS'.thisIndex'
p200
I14
sg15
(lp201
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I14
sa(dp202
g16
(lp203
S'k'
asg18
S'N'
sS'.thisRepN'
p204
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p205
I0
sS'.thisN'
p206
I15
sS'.thisIndex'
p207
I3
sg15
(lp208
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I3
sa(dp209
g16
(lp210
S'd'
asg18
S'Y'
sS'.thisRepN'
p211
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p212
I1
sS'.thisN'
p213
I16
sS'.thisIndex'
p214
I0
sg15
(lp215
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I0
sa(dp216
g16
(lp217
S'd'
asg18
S'Y'
sS'.thisRepN'
p218
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p219
I2
sS'.thisN'
p220
I17
sS'.thisIndex'
p221
I11
sg15
(lp222
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I11
sa(dp223
g16
(lp224
S'k'
asg18
S'N'
sS'.thisRepN'
p225
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p226
I3
sS'.thisN'
p227
I18
sS'.thisIndex'
p228
I2
sg15
(lp229
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp230
g16
(lp231
S'd'
asg18
S'Y'
sS'.thisRepN'
p232
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p233
I4
sS'.thisN'
p234
I19
sS'.thisIndex'
p235
I0
sg15
(lp236
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I0
sa(dp237
g16
(lp238
S'k'
asg18
S'N'
sS'.thisRepN'
p239
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p240
I5
sS'.thisN'
p241
I20
sS'.thisIndex'
p242
I8
sg15
(lp243
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I8
sa(dp244
g16
(lp245
S'k'
asg18
S'Y'
sS'.thisRepN'
p246
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p247
I6
sS'.thisN'
p248
I21
sS'.thisIndex'
p249
I0
sg15
(lp250
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I0
sa(dp251
g16
(lp252
S'k'
asg18
S'Y'
sS'.thisRepN'
p253
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p254
I7
sS'.thisN'
p255
I22
sS'.thisIndex'
p256
I12
sg15
(lp257
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I12
sa(dp258
g16
(lp259
S'd'
asg18
S'Y'
sS'.thisRepN'
p260
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p261
I8
sS'.thisN'
p262
I23
sS'.thisIndex'
p263
I6
sg15
(lp264
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I6
sa(dp265
g16
(lp266
S'd'
asg18
S'Y'
sS'.thisRepN'
p267
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p268
I9
sS'.thisN'
p269
I24
sS'.thisIndex'
p270
I8
sg15
(lp271
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I8
sa(dp272
g16
(lp273
S'k'
asg18
S'N'
sS'.thisRepN'
p274
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p275
I10
sS'.thisN'
p276
I25
sS'.thisIndex'
p277
I13
sg15
(lp278
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I13
sa(dp279
g16
(lp280
S'k'
asg18
S'Y'
sS'.thisRepN'
p281
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p282
I11
sS'.thisN'
p283
I26
sS'.thisIndex'
p284
I11
sg15
(lp285
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I11
sa(dp286
g16
(lp287
S'k'
asg18
S'Y'
sS'.thisRepN'
p288
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p289
I12
sS'.thisN'
p290
I27
sS'.thisIndex'
p291
I9
sg15
(lp292
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I9
sa(dp293
g16
(lp294
S'd'
asg18
S'N'
sS'.thisRepN'
p295
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p296
I13
sS'.thisN'
p297
I28
sS'.thisIndex'
p298
I7
sg15
(lp299
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I7
sa(dp300
g16
(lp301
S'd'
asg18
S'N'
sS'.thisRepN'
p302
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p303
I14
sS'.thisN'
p304
I29
sS'.thisIndex'
p305
I9
sg15
(lp306
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I9
sa(dp307
g16
(lp308
S'k'
asg18
S'N'
sS'.thisRepN'
p309
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p310
I0
sS'.thisN'
p311
I30
sS'.thisIndex'
p312
I5
sg15
(lp313
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I5
sa(dp314
g16
(lp315
S'k'
asg18
S'Y'
sS'.thisRepN'
p316
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p317
I1
sS'.thisN'
p318
I31
sS'.thisIndex'
p319
I7
sg15
(lp320
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I7
sa(dp321
g16
(lp322
S'k'
asg18
S'N'
sS'.thisRepN'
p323
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p324
I2
sS'.thisN'
p325
I32
sS'.thisIndex'
p326
I1
sg15
(lp327
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I1
sa(dp328
g16
(lp329
S'd'
asg18
S'Y'
sS'.thisRepN'
p330
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p331
I3
sS'.thisN'
p332
I33
sS'.thisIndex'
p333
I10
sg15
(lp334
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I10
sa(dp335
g16
(lp336
S'd'
asg18
S'Y'
sS'.thisRepN'
p337
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p338
I4
sS'.thisN'
p339
I34
sS'.thisIndex'
p340
I3
sg15
(lp341
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I3
sa(dp342
g16
(lp343
S'd'
asg18
S'N'
sS'.thisRepN'
p344
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p345
I5
sS'.thisN'
p346
I35
sS'.thisIndex'
p347
I8
sg15
(lp348
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I8
sa(dp349
g16
(lp350
S'k'
asg18
S'N'
sS'.thisRepN'
p351
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p352
I6
sS'.thisN'
p353
I36
sS'.thisIndex'
p354
I6
sg15
(lp355
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp356
g16
(lp357
S'd'
asg18
S'N'
sS'.thisRepN'
p358
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p359
I7
sS'.thisN'
p360
I37
sS'.thisIndex'
p361
I2
sg15
(lp362
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp363
g16
(lp364
S'd'
asg18
S'N'
sS'.thisRepN'
p365
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p366
I8
sS'.thisN'
p367
I38
sS'.thisIndex'
p368
I5
sg15
(lp369
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I5
sa(dp370
g16
(lp371
S'k'
asg18
S'Y'
sS'.thisRepN'
p372
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p373
I9
sS'.thisN'
p374
I39
sS'.thisIndex'
p375
I1
sg15
(lp376
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp377
S'space'
p378
asg96
I1
sa(dp379
g16
(lp380
S'd'
asg18
S'N'
sS'.thisRepN'
p381
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p382
I10
sS'.thisN'
p383
I40
sS'.thisIndex'
p384
I8
sg15
(lp385
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I8
sa(dp386
g16
(lp387
S'd'
asg18
S'Y'
sS'.thisRepN'
p388
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p389
I11
sS'.thisN'
p390
I41
sS'.thisIndex'
p391
I4
sg15
(lp392
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp393
S'space'
p394
asg96
I4
sa(dp395
g16
(lp396
S'k'
asg18
S'N'
sS'.thisRepN'
p397
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p398
I12
sS'.thisN'
p399
I42
sS'.thisIndex'
p400
I13
sg15
(lp401
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I13
sa(dp402
g16
(lp403
S'k'
asg18
S'N'
sS'.thisRepN'
p404
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p405
I13
sS'.thisN'
p406
I43
sS'.thisIndex'
p407
I4
sg15
(lp408
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I4
sa(dp409
g16
(lp410
S'k'
asg18
S'Y'
sS'.thisRepN'
p411
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p412
I14
sS'.thisN'
p413
I44
sS'.thisIndex'
p414
I10
sg15
(lp415
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I10
sa(dp416
g16
(lp417
S'k'
asg18
S'Y'
sS'.thisRepN'
p418
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p419
I0
sS'.thisN'
p420
I45
sS'.thisIndex'
p421
I1
sg15
(lp422
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I1
sa(dp423
g16
(lp424
S'k'
asg18
S'N'
sS'.thisRepN'
p425
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p426
I1
sS'.thisN'
p427
I46
sS'.thisIndex'
p428
I9
sg15
(lp429
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I9
sa(dp430
g16
(lp431
S'k'
asg18
S'N'
sS'.thisRepN'
p432
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p433
I2
sS'.thisN'
p434
I47
sS'.thisIndex'
p435
I7
sg15
(lp436
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I7
sa(dp437
g16
(lp438
S'd'
asg18
S'Y'
sS'.thisRepN'
p439
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p440
I3
sS'.thisN'
p441
I48
sS'.thisIndex'
p442
I12
sg15
(lp443
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp444
S'space'
p445
asg96
I12
sa(dp446
g16
(lp447
S'k'
asg18
S'N'
sg22
I29
sS'.thisN'
p448
I49
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p449
I4
sS'.thisRepN'
p450
I3
sg21
I28
sS'.thisIndex'
p451
I4
sg23
I23
sg15
(lp452
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I4
sa(dp453
g16
(lp454
S'd'
asg96
I2
sS'.thisRepN'
p455
I3
sg30
g31
sg32
g33
sS'.thisTrialN'
p456
I5
sS'.thisN'
p457
I50
sS'.thisIndex'
p458
I2
sg15
(lp459
S'k'
asg17
S'N'
sg14
I2
sa(dp460
g16
(lp461
S'd'
asg96
I2
sS'.thisRepN'
p462
I3
sg30
g31
sg32
g33
sS'.thisTrialN'
p463
I6
sS'.thisN'
p464
I51
sS'.thisIndex'
p465
I2
sg15
(lp466
S'k'
asg17
S'N'
sg14
I2
sa(dp467
g16
(lp468
S'd'
asg18
S'Y'
sS'.thisRepN'
p469
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p470
I7
sS'.thisN'
p471
I52
sS'.thisIndex'
p472
I2
sg15
(lp473
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp474
S'space'
p475
asg96
I2
sa(dp476
g16
(lp477
S'd'
asg18
S'N'
sS'.thisRepN'
p478
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p479
I8
sS'.thisN'
p480
I53
sS'.thisIndex'
p481
I1
sg15
(lp482
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp483
g18
S'N'
sS'.thisRepN'
p484
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p485
I9
sS'.thisN'
p486
I54
sS'.thisIndex'
p487
I5
sg15
Nsg30
g31
sg17
g194
sg14
I2
sg19
Nsg96
I5
sa(dp488
g16
(lp489
S'k'
asg18
S'Y'
sS'.thisRepN'
p490
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p491
I10
sS'.thisN'
p492
I55
sS'.thisIndex'
p493
I12
sg15
(lp494
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I12
sa(dp495
g16
(lp496
S'd'
asg18
S'N'
sS'.thisRepN'
p497
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p498
I11
sS'.thisN'
p499
I56
sS'.thisIndex'
p500
I12
sg15
(lp501
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I12
sa(dp502
g16
(lp503
S'k'
asg18
S'N'
sS'.thisRepN'
p504
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p505
I12
sS'.thisN'
p506
I57
sS'.thisIndex'
p507
I4
sg15
(lp508
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I4
sa(dp509
g16
(lp510
S'k'
asg18
S'N'
sS'.thisRepN'
p511
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p512
I13
sS'.thisN'
p513
I58
sS'.thisIndex'
p514
I5
sg15
(lp515
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp516
S'space'
p517
asg96
I5
sa(dp518
g16
(lp519
S'k'
asg18
S'Y'
sS'.thisRepN'
p520
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p521
I14
sS'.thisN'
p522
I59
sS'.thisIndex'
p523
I8
sg15
(lp524
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I8
sa(dp525
g16
(lp526
S'd'
asg18
S'Y'
sS'.thisRepN'
p527
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p528
I0
sS'.thisN'
p529
I60
sS'.thisIndex'
p530
I9
sg15
(lp531
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I9
sa(dp532
g16
(lp533
S'k'
asg18
S'N'
sS'.thisRepN'
p534
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p535
I1
sS'.thisN'
p536
I61
sS'.thisIndex'
p537
I4
sg15
(lp538
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I4
sa(dp539
g16
(lp540
S'd'
asg18
S'Y'
sS'.thisRepN'
p541
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p542
I2
sS'.thisN'
p543
I62
sS'.thisIndex'
p544
I9
sg15
(lp545
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I9
sa(dp546
g16
(lp547
S'k'
asg18
S'N'
sS'.thisRepN'
p548
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p549
I3
sS'.thisN'
p550
I63
sS'.thisIndex'
p551
I1
sg15
(lp552
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp553
g16
(lp554
S'k'
asg18
S'N'
sS'.thisRepN'
p555
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p556
I4
sS'.thisN'
p557
I64
sS'.thisIndex'
p558
I14
sg15
(lp559
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I14
sa(dp560
g16
(lp561
S'k'
asg18
S'Y'
sS'.thisRepN'
p562
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p563
I5
sS'.thisN'
p564
I65
sS'.thisIndex'
p565
I1
sg15
(lp566
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I1
sa(dp567
g16
(lp568
S'd'
asg18
S'N'
sS'.thisRepN'
p569
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p570
I6
sS'.thisN'
p571
I66
sS'.thisIndex'
p572
I2
sg15
(lp573
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I2
sa(dp574
g16
(lp575
S'd'
asg18
S'Y'
sS'.thisRepN'
p576
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p577
I7
sS'.thisN'
p578
I67
sS'.thisIndex'
p579
I9
sg15
(lp580
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp581
S'space'
p582
asg96
I9
sa(dp583
g16
(lp584
S'k'
asg18
S'N'
sS'.thisRepN'
p585
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p586
I8
sS'.thisN'
p587
I68
sS'.thisIndex'
p588
I8
sg15
(lp589
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I8
sa(dp590
g16
(lp591
S'k'
asg18
S'N'
sS'.thisRepN'
p592
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p593
I9
sS'.thisN'
p594
I69
sS'.thisIndex'
p595
I4
sg15
(lp596
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I4
sa(dp597
g16
(lp598
S'd'
asg18
S'N'
sS'.thisRepN'
p599
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p600
I10
sS'.thisN'
p601
I70
sS'.thisIndex'
p602
I7
sg15
(lp603
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I7
sa(dp604
g16
(lp605
S'd'
asg18
S'N'
sS'.thisRepN'
p606
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p607
I11
sS'.thisN'
p608
I71
sS'.thisIndex'
p609
I9
sg15
(lp610
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I9
sa(dp611
g16
(lp612
S'd'
asg18
S'Y'
sS'.thisRepN'
p613
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p614
I12
sS'.thisN'
p615
I72
sS'.thisIndex'
p616
I10
sg15
(lp617
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp618
g16
(lp619
S'd'
asg18
S'N'
sS'.thisRepN'
p620
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p621
I13
sS'.thisN'
p622
I73
sS'.thisIndex'
p623
I7
sg15
(lp624
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I7
sa(dp625
g16
(lp626
S'k'
asg18
S'N'
sS'.thisRepN'
p627
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p628
I14
sS'.thisN'
p629
I74
sS'.thisIndex'
p630
I3
sg15
(lp631
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I3
sa(dp632
g16
(lp633
S'd'
asg18
S'N'
sS'.thisRepN'
p634
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p635
I0
sS'.thisN'
p636
I75
sS'.thisIndex'
p637
I2
sg15
(lp638
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I2
sa(dp639
g16
(lp640
S'k'
asg18
S'Y'
sS'.thisRepN'
p641
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p642
I1
sS'.thisN'
p643
I76
sS'.thisIndex'
p644
I14
sg15
(lp645
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I14
sa(dp646
g16
(lp647
S'd'
asg18
S'N'
sS'.thisRepN'
p648
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p649
I2
sS'.thisN'
p650
I77
sS'.thisIndex'
p651
I11
sg15
(lp652
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I11
sa(dp653
g16
(lp654
S'k'
asg18
S'Y'
sS'.thisRepN'
p655
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p656
I3
sS'.thisN'
p657
I78
sS'.thisIndex'
p658
I7
sg15
(lp659
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I7
sa(dp660
g16
(lp661
S'd'
asg18
S'Y'
sS'.thisRepN'
p662
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p663
I4
sS'.thisN'
p664
I79
sS'.thisIndex'
p665
I4
sg15
(lp666
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I4
sa(dp667
g16
(lp668
S'd'
asg18
S'N'
sS'.thisRepN'
p669
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p670
I5
sS'.thisN'
p671
I80
sS'.thisIndex'
p672
I13
sg15
(lp673
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I13
sa(dp674
g16
(lp675
S'd'
asg18
S'Y'
sS'.thisRepN'
p676
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p677
I6
sS'.thisN'
p678
I81
sS'.thisIndex'
p679
I14
sg15
(lp680
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I14
sa(dp681
g16
(lp682
S'd'
asg18
S'Y'
sS'.thisRepN'
p683
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p684
I7
sS'.thisN'
p685
I82
sS'.thisIndex'
p686
I5
sg15
(lp687
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I5
sa(dp688
g16
(lp689
S'k'
asg18
S'Y'
sS'.thisRepN'
p690
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p691
I8
sS'.thisN'
p692
I83
sS'.thisIndex'
p693
I0
sg15
(lp694
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp695
g16
(lp696
S'k'
asg18
S'Y'
sS'.thisRepN'
p697
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p698
I9
sS'.thisN'
p699
I84
sS'.thisIndex'
p700
I6
sg15
(lp701
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I6
sa(dp702
g16
(lp703
S'k'
asg18
S'N'
sS'.thisRepN'
p704
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p705
I10
sS'.thisN'
p706
I85
sS'.thisIndex'
p707
I2
sg15
(lp708
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp709
g16
(lp710
S'd'
asg18
S'N'
sS'.thisRepN'
p711
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p712
I11
sS'.thisN'
p713
I86
sS'.thisIndex'
p714
I11
sg15
(lp715
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I11
sa(dp716
g16
(lp717
S'd'
asg18
S'N'
sS'.thisRepN'
p718
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p719
I12
sS'.thisN'
p720
I87
sS'.thisIndex'
p721
I13
sg15
(lp722
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I13
sa(dp723
g16
(lp724
S'k'
asg18
S'N'
sS'.thisRepN'
p725
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p726
I13
sS'.thisN'
p727
I88
sS'.thisIndex'
p728
I10
sg15
(lp729
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp730
g16
(lp731
S'k'
asg18
S'Y'
sS'.thisRepN'
p732
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p733
I14
sS'.thisN'
p734
I89
sS'.thisIndex'
p735
I12
sg15
(lp736
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp737
S'space'
p738
asg96
I12
sa(dp739
g18
S'Y'
sS'.thisRepN'
p740
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p741
I0
sS'.thisN'
p742
I90
sS'.thisIndex'
p743
I9
sg15
Nsg30
g31
sg17
g194
sg14
I2
sg19
Nsg96
I9
sa(dp744
g16
(lp745
S'd'
asg18
S'N'
sS'.thisRepN'
p746
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p747
I1
sS'.thisN'
p748
I91
sS'.thisIndex'
p749
I1
sg15
(lp750
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I1
sa(dp751
g16
(lp752
S'd'
asg18
S'Y'
sS'.thisRepN'
p753
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p754
I2
sS'.thisN'
p755
I92
sS'.thisIndex'
p756
I0
sg15
(lp757
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp758
g16
(lp759
S'k'
asg18
S'Y'
sS'.thisRepN'
p760
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p761
I3
sS'.thisN'
p762
I93
sS'.thisIndex'
p763
I2
sg15
(lp764
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp765
S'space'
p766
asg96
I2
sa(dp767
g16
(lp768
S'd'
asg18
S'N'
sS'.thisRepN'
p769
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p770
I4
sS'.thisN'
p771
I94
sS'.thisIndex'
p772
I13
sg15
(lp773
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I13
sa(dp774
g16
(lp775
S'k'
asg18
S'Y'
sS'.thisRepN'
p776
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p777
I5
sS'.thisN'
p778
I95
sS'.thisIndex'
p779
I13
sg15
(lp780
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp781
S'space'
p782
asg96
I13
sa(dp783
g16
(lp784
S'k'
asg18
S'Y'
sS'.thisRepN'
p785
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p786
I6
sS'.thisN'
p787
I96
sS'.thisIndex'
p788
I5
sg15
(lp789
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp790
S'space'
p791
asg96
I5
sa(dp792
g16
(lp793
S'd'
asg18
S'N'
sS'.thisRepN'
p794
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p795
I7
sS'.thisN'
p796
I97
sS'.thisIndex'
p797
I0
sg15
(lp798
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I0
sa(dp799
g16
(lp800
S'd'
asg18
S'N'
sS'.thisRepN'
p801
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p802
I8
sS'.thisN'
p803
I98
sS'.thisIndex'
p804
I11
sg15
(lp805
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp806
S'space'
p807
asg96
I11
sa(dp808
g16
(lp809
S'd'
asg18
S'Y'
sg22
I30
sS'.thisN'
p810
I99
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p811
I9
sS'.thisRepN'
p812
I6
sg21
I23
sS'.thisIndex'
p813
I8
sg23
I22
sg15
(lp814
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I8
sa(dp815
g16
(lp816
S'd'
asg96
I2
sS'.thisRepN'
p817
I6
sg30
g31
sg32
g33
sS'.thisTrialN'
p818
I10
sS'.thisN'
p819
I100
sS'.thisIndex'
p820
I2
sg15
(lp821
S'k'
asg17
S'N'
sg14
I3
sa(dp822
g16
(lp823
S'd'
asg96
I2
sS'.thisRepN'
p824
I6
sg30
g31
sg32
g33
sS'.thisTrialN'
p825
I11
sS'.thisN'
p826
I101
sS'.thisIndex'
p827
I2
sg15
(lp828
S'd'
asg17
S'Y'
sg14
I3
sa(dp829
g16
(lp830
S'd'
asg18
S'Y'
sS'.thisRepN'
p831
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p832
I12
sS'.thisN'
p833
I102
sS'.thisIndex'
p834
I7
sg15
(lp835
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp836
S'space'
p837
asg96
I7
sa(dp838
g16
(lp839
S'k'
asg18
S'Y'
sS'.thisRepN'
p840
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p841
I13
sS'.thisN'
p842
I103
sS'.thisIndex'
p843
I14
sg15
(lp844
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp845
S'space'
p846
asg96
I14
sa(dp847
g16
(lp848
S'k'
asg18
S'N'
sS'.thisRepN'
p849
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p850
I14
sS'.thisN'
p851
I104
sS'.thisIndex'
p852
I7
sg15
(lp853
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp854
g16
(lp855
S'k'
asg18
S'Y'
sS'.thisRepN'
p856
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p857
I0
sS'.thisN'
p858
I105
sS'.thisIndex'
p859
I4
sg15
(lp860
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp861
S'space'
p862
asg96
I4
sa(dp863
g16
(lp864
S'd'
asg18
S'Y'
sS'.thisRepN'
p865
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p866
I1
sS'.thisN'
p867
I106
sS'.thisIndex'
p868
I12
sg15
(lp869
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp870
S'space'
p871
asg96
I12
sa(dp872
g16
(lp873
S'd'
asg18
S'Y'
sS'.thisRepN'
p874
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p875
I2
sS'.thisN'
p876
I107
sS'.thisIndex'
p877
I12
sg15
(lp878
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp879
S'space'
p880
asg96
I12
sa(dp881
g16
(lp882
S'd'
asg18
S'Y'
sS'.thisRepN'
p883
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p884
I3
sS'.thisN'
p885
I108
sS'.thisIndex'
p886
I8
sg15
(lp887
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp888
S'space'
p889
asg96
I8
sa(dp890
g16
(lp891
S'k'
asg18
S'Y'
sS'.thisRepN'
p892
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p893
I4
sS'.thisN'
p894
I109
sS'.thisIndex'
p895
I3
sg15
(lp896
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp897
S'space'
p898
asg96
I3
sa(dp899
g16
(lp900
S'd'
asg18
S'N'
sS'.thisRepN'
p901
I7
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p902
I5
sS'.thisN'
p903
I110
sS'.thisIndex'
p904
I12
sg15
(lp905
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp906
S'space'
p907
asg96
I12
sa(dp908
g16
(lp909
S'k'
asg18
S'N'
sS'.thisRepN'
p910
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p911
I6
sS'.thisN'
p912
I111
sS'.thisIndex'
p913
I1
sg15
(lp914
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp915
g16
(lp916
S'k'
asg18
S'N'
sS'.thisRepN'
p917
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p918
I7
sS'.thisN'
p919
I112
sS'.thisIndex'
p920
I2
sg15
(lp921
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I2
sa(dp922
g16
(lp923
S'k'
asg18
S'N'
sS'.thisRepN'
p924
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p925
I8
sS'.thisN'
p926
I113
sS'.thisIndex'
p927
I12
sg15
(lp928
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I12
sa(dp929
g16
(lp930
S'k'
asg18
S'Y'
sS'.thisRepN'
p931
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p932
I9
sS'.thisN'
p933
I114
sS'.thisIndex'
p934
I12
sg15
(lp935
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp936
S'space'
p937
asg96
I12
sa(dp938
g16
(lp939
S'k'
asg18
S'Y'
sS'.thisRepN'
p940
I7
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p941
I10
sS'.thisN'
p942
I115
sS'.thisIndex'
p943
I2
sg15
(lp944
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I2
sa(dp945
g16
(lp946
S'k'
asg18
S'Y'
sS'.thisRepN'
p947
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p948
I11
sS'.thisN'
p949
I116
sS'.thisIndex'
p950
I7
sg15
(lp951
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp952
S'space'
p953
asg96
I7
sa(dp954
g16
(lp955
S'd'
asg18
S'Y'
sS'.thisRepN'
p956
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p957
I12
sS'.thisN'
p958
I117
sS'.thisIndex'
p959
I4
sg15
(lp960
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp961
S'space'
p962
asg96
I4
sa(dp963
g16
(lp964
S'k'
asg18
S'N'
sS'.thisRepN'
p965
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p966
I13
sS'.thisN'
p967
I118
sS'.thisIndex'
p968
I13
sg15
(lp969
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I13
sa(dp970
g16
(lp971
S'd'
asg18
S'N'
sS'.thisRepN'
p972
I7
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p973
I14
sS'.thisN'
p974
I119
sS'.thisIndex'
p975
I10
sg15
(lp976
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp977
S'space'
p978
asg96
I10
sa(dp979
g18
S'N'
sS'.thisRepN'
p980
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p981
I0
sS'.thisN'
p982
I120
sS'.thisIndex'
p983
I9
sg15
Nsg30
g31
sg17
g194
sg14
I3
sg19
Nsg96
I9
sa(dp984
g16
(lp985
S'k'
asg18
S'Y'
sS'.thisRepN'
p986
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p987
I1
sS'.thisN'
p988
I121
sS'.thisIndex'
p989
I3
sg15
(lp990
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp991
g16
(lp992
S'k'
asg18
S'Y'
sS'.thisRepN'
p993
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p994
I2
sS'.thisN'
p995
I122
sS'.thisIndex'
p996
I0
sg15
(lp997
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp998
S'space'
p999
asg96
I0
sa(dp1000
g16
(lp1001
S'd'
asg18
S'N'
sS'.thisRepN'
p1002
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1003
I3
sS'.thisN'
p1004
I123
sS'.thisIndex'
p1005
I8
sg15
(lp1006
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I8
sa(dp1007
g16
(lp1008
S'k'
asg18
S'Y'
sS'.thisRepN'
p1009
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1010
I4
sS'.thisN'
p1011
I124
sS'.thisIndex'
p1012
I3
sg15
(lp1013
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp1014
g16
(lp1015
S'k'
asg18
S'Y'
sS'.thisRepN'
p1016
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1017
I5
sS'.thisN'
p1018
I125
sS'.thisIndex'
p1019
I9
sg15
(lp1020
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp1021
g16
(lp1022
S'k'
asg18
S'Y'
sS'.thisRepN'
p1023
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1024
I6
sS'.thisN'
p1025
I126
sS'.thisIndex'
p1026
I13
sg15
(lp1027
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I13
sa(dp1028
g16
(lp1029
S'd'
asg18
S'Y'
sS'.thisRepN'
p1030
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1031
I7
sS'.thisN'
p1032
I127
sS'.thisIndex'
p1033
I7
sg15
(lp1034
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1035
S'space'
p1036
asg96
I7
sa(dp1037
g16
(lp1038
S'k'
asg18
S'Y'
sS'.thisRepN'
p1039
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1040
I8
sS'.thisN'
p1041
I128
sS'.thisIndex'
p1042
I10
sg15
(lp1043
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp1044
g16
(lp1045
S'k'
asg18
S'N'
sS'.thisRepN'
p1046
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1047
I9
sS'.thisN'
p1048
I129
sS'.thisIndex'
p1049
I1
sg15
(lp1050
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1051
g16
(lp1052
S'd'
asg18
S'Y'
sS'.thisRepN'
p1053
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1054
I10
sS'.thisN'
p1055
I130
sS'.thisIndex'
p1056
I11
sg15
(lp1057
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1058
S'space'
p1059
asg96
I11
sa(dp1060
g16
(lp1061
S'k'
asg18
S'Y'
sS'.thisRepN'
p1062
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1063
I11
sS'.thisN'
p1064
I131
sS'.thisIndex'
p1065
I4
sg15
(lp1066
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1067
S'space'
p1068
asg96
I4
sa(dp1069
g16
(lp1070
S'k'
asg18
S'N'
sS'.thisRepN'
p1071
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1072
I12
sS'.thisN'
p1073
I132
sS'.thisIndex'
p1074
I10
sg15
(lp1075
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1076
S'space'
p1077
asg96
I10
sa(dp1078
g16
(lp1079
S'k'
asg18
S'N'
sS'.thisRepN'
p1080
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1081
I13
sS'.thisN'
p1082
I133
sS'.thisIndex'
p1083
I7
sg15
(lp1084
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp1085
g16
(lp1086
S'd'
asg18
S'Y'
sS'.thisRepN'
p1087
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1088
I14
sS'.thisN'
p1089
I134
sS'.thisIndex'
p1090
I5
sg15
(lp1091
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1092
S'space'
p1093
asg96
I5
sa(dp1094
g16
(lp1095
S'd'
asg18
S'N'
sS'.thisRepN'
p1096
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1097
I0
sS'.thisN'
p1098
I135
sS'.thisIndex'
p1099
I13
sg15
(lp1100
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I13
sa(dp1101
g16
(lp1102
S'k'
asg18
S'N'
sS'.thisRepN'
p1103
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1104
I1
sS'.thisN'
p1105
I136
sS'.thisIndex'
p1106
I3
sg15
(lp1107
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp1108
g16
(lp1109
S'k'
asg18
S'N'
sS'.thisRepN'
p1110
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1111
I2
sS'.thisN'
p1112
I137
sS'.thisIndex'
p1113
I10
sg15
(lp1114
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp1115
g16
(lp1116
S'd'
asg18
S'Y'
sS'.thisRepN'
p1117
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1118
I3
sS'.thisN'
p1119
I138
sS'.thisIndex'
p1120
I14
sg15
(lp1121
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1122
S'space'
p1123
asg96
I14
sa(dp1124
g16
(lp1125
S'd'
asg18
S'N'
sS'.thisRepN'
p1126
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1127
I4
sS'.thisN'
p1128
I139
sS'.thisIndex'
p1129
I8
sg15
(lp1130
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I8
sa(dp1131
g16
(lp1132
S'k'
asg18
S'Y'
sS'.thisRepN'
p1133
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1134
I5
sS'.thisN'
p1135
I140
sS'.thisIndex'
p1136
I11
sg15
(lp1137
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1138
S'space'
p1139
asg96
I11
sa(dp1140
g16
(lp1141
S'd'
asg18
S'N'
sS'.thisRepN'
p1142
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1143
I6
sS'.thisN'
p1144
I141
sS'.thisIndex'
p1145
I1
sg15
(lp1146
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1147
g16
(lp1148
S'd'
asg18
S'Y'
sS'.thisRepN'
p1149
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1150
I7
sS'.thisN'
p1151
I142
sS'.thisIndex'
p1152
I7
sg15
(lp1153
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1154
S'space'
p1155
asg96
I7
sa(dp1156
g16
(lp1157
S'k'
asg18
S'N'
sS'.thisRepN'
p1158
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1159
I8
sS'.thisN'
p1160
I143
sS'.thisIndex'
p1161
I13
sg15
(lp1162
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I13
sa(dp1163
g16
(lp1164
S'd'
asg18
S'Y'
sS'.thisRepN'
p1165
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1166
I9
sS'.thisN'
p1167
I144
sS'.thisIndex'
p1168
I5
sg15
(lp1169
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1170
S'space'
p1171
asg96
I5
sa(dp1172
g16
(lp1173
S'k'
asg18
S'N'
sS'.thisRepN'
p1174
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1175
I10
sS'.thisN'
p1176
I145
sS'.thisIndex'
p1177
I13
sg15
(lp1178
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I13
sa(dp1179
g16
(lp1180
S'k'
asg18
S'N'
sS'.thisRepN'
p1181
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1182
I11
sS'.thisN'
p1183
I146
sS'.thisIndex'
p1184
I13
sg15
(lp1185
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I13
sa(dp1186
g16
(lp1187
S'd'
asg18
S'N'
sS'.thisRepN'
p1188
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1189
I12
sS'.thisN'
p1190
I147
sS'.thisIndex'
p1191
I7
sg15
(lp1192
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp1193
g16
(lp1194
S'd'
asg18
S'N'
sS'.thisRepN'
p1195
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1196
I13
sS'.thisN'
p1197
I148
sS'.thisIndex'
p1198
I6
sg15
(lp1199
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1200
S'space'
p1201
asg96
I6
sa(dp1202
g16
(lp1203
S'k'
asg18
S'N'
sg22
I38
sS'.thisN'
p1204
I149
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1205
I14
sS'.thisRepN'
p1206
I9
sg21
I43
sS'.thisIndex'
p1207
I4
sg23
I25
sg15
(lp1208
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I4
sa(dp1209
g16
(lp1210
S'k'
asg96
I8
sS'.thisRepN'
p1211
I10
sg30
g31
sg32
g33
sS'.thisTrialN'
p1212
I0
sS'.thisN'
p1213
I150
sS'.thisIndex'
p1214
I8
sg15
(lp1215
S'k'
asg17
S'Y'
sg14
I4
sa(dp1216
g16
(lp1217
S'd'
asg96
I5
sS'.thisRepN'
p1218
I10
sg30
g31
sg32
g33
sS'.thisTrialN'
p1219
I1
sS'.thisN'
p1220
I151
sS'.thisIndex'
p1221
I5
sg15
(lp1222
S'd'
asg17
S'Y'
sg14
I4
sa(dp1223
g16
(lp1224
S'd'
asg18
S'Y'
sS'.thisRepN'
p1225
I10
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1226
I2
sS'.thisN'
p1227
I152
sS'.thisIndex'
p1228
I13
sg15
(lp1229
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I13
sa(dp1230
g16
(lp1231
S'k'
asg18
S'Y'
sS'.thisRepN'
p1232
I10
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1233
I3
sS'.thisN'
p1234
I153
sS'.thisIndex'
p1235
I0
sg15
(lp1236
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1237
g16
(lp1238
S'd'
asg18
S'Y'
sS'.thisRepN'
p1239
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1240
I4
sS'.thisN'
p1241
I154
sS'.thisIndex'
p1242
I3
sg15
(lp1243
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1244
S'space'
p1245
asg96
I3
sa(dp1246
g16
(lp1247
S'd'
asg18
S'Y'
sS'.thisRepN'
p1248
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1249
I5
sS'.thisN'
p1250
I155
sS'.thisIndex'
p1251
I0
sg15
(lp1252
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1253
S'space'
p1254
asg96
I0
sa(dp1255
g16
(lp1256
S'd'
asg18
S'N'
sS'.thisRepN'
p1257
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1258
I6
sS'.thisN'
p1259
I156
sS'.thisIndex'
p1260
I0
sg15
(lp1261
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1262
g16
(lp1263
S'k'
asg18
S'Y'
sS'.thisRepN'
p1264
I10
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1265
I7
sS'.thisN'
p1266
I157
sS'.thisIndex'
p1267
I14
sg15
(lp1268
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I14
sa(dp1269
g16
(lp1270
S'd'
asg18
S'N'
sS'.thisRepN'
p1271
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1272
I8
sS'.thisN'
p1273
I158
sS'.thisIndex'
p1274
I13
sg15
(lp1275
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I13
sa(dp1276
g16
(lp1277
S'd'
asg18
S'Y'
sS'.thisRepN'
p1278
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1279
I9
sS'.thisN'
p1280
I159
sS'.thisIndex'
p1281
I1
sg15
(lp1282
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1283
S'space'
p1284
asg96
I1
sa(dp1285
g16
(lp1286
S'd'
asg18
S'Y'
sS'.thisRepN'
p1287
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1288
I10
sS'.thisN'
p1289
I160
sS'.thisIndex'
p1290
I12
sg15
(lp1291
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1292
S'space'
p1293
asg96
I12
sa(dp1294
g16
(lp1295
S'd'
asg18
S'Y'
sS'.thisRepN'
p1296
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1297
I11
sS'.thisN'
p1298
I161
sS'.thisIndex'
p1299
I8
sg15
(lp1300
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1301
S'space'
p1302
asg96
I8
sa(dp1303
g16
(lp1304
S'd'
asg18
S'N'
sS'.thisRepN'
p1305
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1306
I12
sS'.thisN'
p1307
I162
sS'.thisIndex'
p1308
I8
sg15
(lp1309
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1310
g16
(lp1311
S'k'
asg18
S'N'
sS'.thisRepN'
p1312
I10
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1313
I13
sS'.thisN'
p1314
I163
sS'.thisIndex'
p1315
I5
sg15
(lp1316
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1317
S'space'
p1318
asg96
I5
sa(dp1319
g16
(lp1320
S'd'
asg18
S'Y'
sS'.thisRepN'
p1321
I10
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1322
I14
sS'.thisN'
p1323
I164
sS'.thisIndex'
p1324
I7
sg15
(lp1325
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1326
g16
(lp1327
S'k'
asg18
S'Y'
sS'.thisRepN'
p1328
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1329
I0
sS'.thisN'
p1330
I165
sS'.thisIndex'
p1331
I11
sg15
(lp1332
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I11
sa(dp1333
g16
(lp1334
S'k'
asg18
S'N'
sS'.thisRepN'
p1335
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1336
I1
sS'.thisN'
p1337
I166
sS'.thisIndex'
p1338
I1
sg15
(lp1339
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1340
g16
(lp1341
S'd'
asg18
S'N'
sS'.thisRepN'
p1342
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1343
I2
sS'.thisN'
p1344
I167
sS'.thisIndex'
p1345
I4
sg15
(lp1346
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1347
g16
(lp1348
S'k'
asg18
S'Y'
sS'.thisRepN'
p1349
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1350
I3
sS'.thisN'
p1351
I168
sS'.thisIndex'
p1352
I0
sg15
(lp1353
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1354
g16
(lp1355
S'k'
asg18
S'Y'
sS'.thisRepN'
p1356
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1357
I4
sS'.thisN'
p1358
I169
sS'.thisIndex'
p1359
I10
sg15
(lp1360
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1361
S'space'
p1362
asg96
I10
sa(dp1363
g16
(lp1364
S'd'
asg18
S'N'
sS'.thisRepN'
p1365
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1366
I5
sS'.thisN'
p1367
I170
sS'.thisIndex'
p1368
I0
sg15
(lp1369
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1370
g16
(lp1371
S'k'
asg18
S'N'
sS'.thisRepN'
p1372
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1373
I6
sS'.thisN'
p1374
I171
sS'.thisIndex'
p1375
I3
sg15
(lp1376
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1377
g16
(lp1378
S'k'
asg18
S'Y'
sS'.thisRepN'
p1379
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1380
I7
sS'.thisN'
p1381
I172
sS'.thisIndex'
p1382
I5
sg15
(lp1383
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I5
sa(dp1384
g16
(lp1385
S'k'
asg18
S'N'
sS'.thisRepN'
p1386
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1387
I8
sS'.thisN'
p1388
I173
sS'.thisIndex'
p1389
I14
sg15
(lp1390
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I14
sa(dp1391
g16
(lp1392
S'd'
asg18
S'N'
sS'.thisRepN'
p1393
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1394
I9
sS'.thisN'
p1395
I174
sS'.thisIndex'
p1396
I0
sg15
(lp1397
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1398
g16
(lp1399
S'd'
asg18
S'N'
sS'.thisRepN'
p1400
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1401
I10
sS'.thisN'
p1402
I175
sS'.thisIndex'
p1403
I6
sg15
(lp1404
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1405
g16
(lp1406
S'd'
asg18
S'N'
sS'.thisRepN'
p1407
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1408
I11
sS'.thisN'
p1409
I176
sS'.thisIndex'
p1410
I5
sg15
(lp1411
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I5
sa(dp1412
g16
(lp1413
S'k'
asg18
S'N'
sS'.thisRepN'
p1414
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1415
I12
sS'.thisN'
p1416
I177
sS'.thisIndex'
p1417
I9
sg15
(lp1418
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1419
g16
(lp1420
S'd'
asg18
S'Y'
sS'.thisRepN'
p1421
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1422
I13
sS'.thisN'
p1423
I178
sS'.thisIndex'
p1424
I7
sg15
(lp1425
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1426
g16
(lp1427
S'd'
asg18
S'N'
sS'.thisRepN'
p1428
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1429
I14
sS'.thisN'
p1430
I179
sS'.thisIndex'
p1431
I8
sg15
(lp1432
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1433
g16
(lp1434
S'd'
asg18
S'Y'
sS'.thisRepN'
p1435
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1436
I0
sS'.thisN'
p1437
I180
sS'.thisIndex'
p1438
I6
sg15
(lp1439
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I6
sa(dp1440
g16
(lp1441
S'd'
asg18
S'Y'
sS'.thisRepN'
p1442
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1443
I1
sS'.thisN'
p1444
I181
sS'.thisIndex'
p1445
I13
sg15
(lp1446
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I13
sa(dp1447
g16
(lp1448
S'k'
asg18
S'N'
sS'.thisRepN'
p1449
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1450
I2
sS'.thisN'
p1451
I182
sS'.thisIndex'
p1452
I7
sg15
(lp1453
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1454
g16
(lp1455
S'd'
asg18
S'Y'
sS'.thisRepN'
p1456
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1457
I3
sS'.thisN'
p1458
I183
sS'.thisIndex'
p1459
I11
sg15
(lp1460
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I11
sa(dp1461
g16
(lp1462
S'k'
asg18
S'Y'
sS'.thisRepN'
p1463
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1464
I4
sS'.thisN'
p1465
I184
sS'.thisIndex'
p1466
I6
sg15
(lp1467
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1468
g16
(lp1469
S'k'
asg18
S'N'
sS'.thisRepN'
p1470
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1471
I5
sS'.thisN'
p1472
I185
sS'.thisIndex'
p1473
I13
sg15
(lp1474
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I13
sa(dp1475
g16
(lp1476
S'd'
asg18
S'Y'
sS'.thisRepN'
p1477
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1478
I6
sS'.thisN'
p1479
I186
sS'.thisIndex'
p1480
I9
sg15
(lp1481
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1482
g16
(lp1483
S'd'
asg18
S'N'
sS'.thisRepN'
p1484
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1485
I7
sS'.thisN'
p1486
I187
sS'.thisIndex'
p1487
I2
sg15
(lp1488
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1489
g16
(lp1490
S'd'
asg18
S'Y'
sS'.thisRepN'
p1491
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1492
I8
sS'.thisN'
p1493
I188
sS'.thisIndex'
p1494
I1
sg15
(lp1495
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I1
sa(dp1496
g16
(lp1497
S'd'
asg18
S'N'
sS'.thisRepN'
p1498
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1499
I9
sS'.thisN'
p1500
I189
sS'.thisIndex'
p1501
I11
sg15
(lp1502
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I11
sa(dp1503
g16
(lp1504
S'k'
asg18
S'Y'
sS'.thisRepN'
p1505
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1506
I10
sS'.thisN'
p1507
I190
sS'.thisIndex'
p1508
I8
sg15
(lp1509
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1510
g16
(lp1511
S'd'
asg18
S'N'
sS'.thisRepN'
p1512
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1513
I11
sS'.thisN'
p1514
I191
sS'.thisIndex'
p1515
I6
sg15
(lp1516
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1517
g16
(lp1518
S'd'
asg18
S'Y'
sS'.thisRepN'
p1519
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1520
I12
sS'.thisN'
p1521
I192
sS'.thisIndex'
p1522
I4
sg15
(lp1523
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1524
g16
(lp1525
S'd'
asg18
S'Y'
sS'.thisRepN'
p1526
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1527
I13
sS'.thisN'
p1528
I193
sS'.thisIndex'
p1529
I2
sg15
(lp1530
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1531
S'space'
p1532
asg96
I2
sa(dp1533
g16
(lp1534
S'd'
asg18
S'N'
sS'.thisRepN'
p1535
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1536
I14
sS'.thisN'
p1537
I194
sS'.thisIndex'
p1538
I10
sg15
(lp1539
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I10
sa(dp1540
g16
(lp1541
S'd'
asg18
S'Y'
sS'.thisRepN'
p1542
I13
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1543
I0
sS'.thisN'
p1544
I195
sS'.thisIndex'
p1545
I2
sg15
(lp1546
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1547
g16
(lp1548
S'd'
asg18
S'Y'
sS'.thisRepN'
p1549
I13
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1550
I1
sS'.thisN'
p1551
I196
sS'.thisIndex'
p1552
I11
sg15
(lp1553
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I11
sa(dp1554
g16
(lp1555
S'd'
asg18
S'N'
sS'.thisRepN'
p1556
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1557
I2
sS'.thisN'
p1558
I197
sS'.thisIndex'
p1559
I13
sg15
(lp1560
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I13
sa(dp1561
g16
(lp1562
S'd'
asg18
S'N'
sS'.thisRepN'
p1563
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1564
I3
sS'.thisN'
p1565
I198
sS'.thisIndex'
p1566
I13
sg15
(lp1567
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I13
sa(dp1568
g16
(lp1569
S'd'
asg18
S'N'
sg22
I29
sS'.thisN'
p1570
I199
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1571
I4
sS'.thisRepN'
p1572
I13
sg21
I43
sS'.thisIndex'
p1573
I0
sg23
I25
sg15
(lp1574
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1575
g16
(lp1576
S'k'
asg96
I14
sS'.thisRepN'
p1577
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1578
I5
sS'.thisN'
p1579
I200
sS'.thisIndex'
p1580
I14
sg15
(lp1581
S'k'
asg17
S'Y'
sg14
I5
sa(dp1582
g16
(lp1583
S'k'
asg96
I9
sS'.thisRepN'
p1584
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1585
I6
sS'.thisN'
p1586
I201
sS'.thisIndex'
p1587
I9
sg15
(lp1588
S'k'
asg17
S'Y'
sg14
I5
sa(dp1589
g16
(lp1590
S'k'
asg18
S'N'
sS'.thisRepN'
p1591
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1592
I7
sS'.thisN'
p1593
I202
sS'.thisIndex'
p1594
I10
sg15
(lp1595
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1596
g16
(lp1597
S'd'
asg18
S'Y'
sS'.thisRepN'
p1598
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1599
I8
sS'.thisN'
p1600
I203
sS'.thisIndex'
p1601
I6
sg15
(lp1602
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1603
S'space'
p1604
asg96
I6
sa(dp1605
g16
(lp1606
S'd'
asg18
S'Y'
sS'.thisRepN'
p1607
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1608
I9
sS'.thisN'
p1609
I204
sS'.thisIndex'
p1610
I4
sg15
(lp1611
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1612
S'space'
p1613
asg96
I4
sa(dp1614
g16
(lp1615
S'd'
asg18
S'N'
sS'.thisRepN'
p1616
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1617
I10
sS'.thisN'
p1618
I205
sS'.thisIndex'
p1619
I8
sg15
(lp1620
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1621
g16
(lp1622
S'd'
asg18
S'Y'
sS'.thisRepN'
p1623
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1624
I11
sS'.thisN'
p1625
I206
sS'.thisIndex'
p1626
I2
sg15
(lp1627
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1628
S'space'
p1629
asg96
I2
sa(dp1630
g16
(lp1631
S'k'
asg18
S'Y'
sS'.thisRepN'
p1632
I13
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1633
I12
sS'.thisN'
p1634
I207
sS'.thisIndex'
p1635
I7
sg15
(lp1636
S'd'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I7
sa(dp1637
g16
(lp1638
S'k'
asg18
S'N'
sS'.thisRepN'
p1639
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1640
I13
sS'.thisN'
p1641
I208
sS'.thisIndex'
p1642
I4
sg15
(lp1643
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp1644
g16
(lp1645
S'd'
asg18
S'N'
sS'.thisRepN'
p1646
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1647
I14
sS'.thisN'
p1648
I209
sS'.thisIndex'
p1649
I1
sg15
(lp1650
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I1
sa(dp1651
g16
(lp1652
S'k'
asg18
S'N'
sS'.thisRepN'
p1653
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1654
I0
sS'.thisN'
p1655
I210
sS'.thisIndex'
p1656
I8
sg15
(lp1657
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1658
g16
(lp1659
S'k'
asg18
S'N'
sS'.thisRepN'
p1660
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1661
I1
sS'.thisN'
p1662
I211
sS'.thisIndex'
p1663
I0
sg15
(lp1664
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1665
g16
(lp1666
S'k'
asg18
S'Y'
sS'.thisRepN'
p1667
I14
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1668
I2
sS'.thisN'
p1669
I212
sS'.thisIndex'
p1670
I10
sg15
(lp1671
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1672
g16
(lp1673
S'k'
asg18
S'N'
sS'.thisRepN'
p1674
I14
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1675
I3
sS'.thisN'
p1676
I213
sS'.thisIndex'
p1677
I11
sg15
(lp1678
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1679
S'space'
p1680
asg96
I11
sa(dp1681
g16
(lp1682
S'k'
asg18
S'N'
sS'.thisRepN'
p1683
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1684
I4
sS'.thisN'
p1685
I214
sS'.thisIndex'
p1686
I11
sg15
(lp1687
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I11
sa(dp1688
g16
(lp1689
S'd'
asg18
S'Y'
sS'.thisRepN'
p1690
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1691
I5
sS'.thisN'
p1692
I215
sS'.thisIndex'
p1693
I9
sg15
(lp1694
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1695
S'space'
p1696
asg96
I9
sa(dp1697
g16
(lp1698
S'k'
asg18
S'Y'
sS'.thisRepN'
p1699
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1700
I6
sS'.thisN'
p1701
I216
sS'.thisIndex'
p1702
I14
sg15
(lp1703
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1704
S'space'
p1705
asg96
I14
sa(dp1706
g16
(lp1707
S'k'
asg18
S'N'
sS'.thisRepN'
p1708
I14
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1709
I7
sS'.thisN'
p1710
I217
sS'.thisIndex'
p1711
I0
sg15
(lp1712
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1713
S'space'
p1714
asg96
I0
sa(dp1715
g16
(lp1716
S'k'
asg18
S'N'
sS'.thisRepN'
p1717
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1718
I8
sS'.thisN'
p1719
I218
sS'.thisIndex'
p1720
I14
sg15
(lp1721
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I14
sa(dp1722
g16
(lp1723
S'd'
asg18
S'Y'
sS'.thisRepN'
p1724
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1725
I9
sS'.thisN'
p1726
I219
sS'.thisIndex'
p1727
I0
sg15
(lp1728
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1729
S'space'
p1730
asg96
I0
sa(dp1731
g16
(lp1732
S'k'
asg18
S'N'
sS'.thisRepN'
p1733
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1734
I10
sS'.thisN'
p1735
I220
sS'.thisIndex'
p1736
I4
sg15
(lp1737
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp1738
g16
(lp1739
S'k'
asg18
S'N'
sS'.thisRepN'
p1740
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1741
I11
sS'.thisN'
p1742
I221
sS'.thisIndex'
p1743
I8
sg15
(lp1744
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1745
g16
(lp1746
S'k'
asg18
S'Y'
sS'.thisRepN'
p1747
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1748
I12
sS'.thisN'
p1749
I222
sS'.thisIndex'
p1750
I14
sg15
(lp1751
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1752
S'space'
p1753
asg96
I14
sa(dp1754
g16
(lp1755
S'k'
asg18
S'N'
sS'.thisRepN'
p1756
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1757
I13
sS'.thisN'
p1758
I223
sS'.thisIndex'
p1759
I13
sg15
(lp1760
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I13
sa(dp1761
g16
(lp1762
S'd'
asg18
S'N'
sS'.thisRepN'
p1763
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1764
I14
sS'.thisN'
p1765
I224
sS'.thisIndex'
p1766
I10
sg15
(lp1767
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1768
g16
(lp1769
S'd'
asg18
S'Y'
sS'.thisRepN'
p1770
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1771
I0
sS'.thisN'
p1772
I225
sS'.thisIndex'
p1773
I2
sg15
(lp1774
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp1775
g16
(lp1776
S'k'
asg18
S'N'
sS'.thisRepN'
p1777
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1778
I1
sS'.thisN'
p1779
I226
sS'.thisIndex'
p1780
I10
sg15
(lp1781
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1782
g16
(lp1783
S'd'
asg18
S'N'
sS'.thisRepN'
p1784
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1785
I2
sS'.thisN'
p1786
I227
sS'.thisIndex'
p1787
I13
sg15
(lp1788
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1789
S'space'
p1790
asg96
I13
sa(dp1791
g16
(lp1792
S'd'
asg18
S'N'
sS'.thisRepN'
p1793
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1794
I3
sS'.thisN'
p1795
I228
sS'.thisIndex'
p1796
I4
sg15
(lp1797
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp1798
g16
(lp1799
S'k'
asg18
S'N'
sS'.thisRepN'
p1800
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1801
I4
sS'.thisN'
p1802
I229
sS'.thisIndex'
p1803
I3
sg15
(lp1804
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1805
g16
(lp1806
S'k'
asg18
S'N'
sS'.thisRepN'
p1807
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1808
I5
sS'.thisN'
p1809
I230
sS'.thisIndex'
p1810
I0
sg15
(lp1811
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1812
g16
(lp1813
S'k'
asg18
S'N'
sS'.thisRepN'
p1814
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1815
I6
sS'.thisN'
p1816
I231
sS'.thisIndex'
p1817
I6
sg15
(lp1818
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I6
sa(dp1819
g16
(lp1820
S'k'
asg18
S'N'
sS'.thisRepN'
p1821
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1822
I7
sS'.thisN'
p1823
I232
sS'.thisIndex'
p1824
I12
sg15
(lp1825
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1826
S'd'
asg96
I12
sa(dp1827
g16
(lp1828
S'd'
asg18
S'N'
sS'.thisRepN'
p1829
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1830
I8
sS'.thisN'
p1831
I233
sS'.thisIndex'
p1832
I9
sg15
(lp1833
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I9
sa(dp1834
g16
(lp1835
S'k'
asg18
S'N'
sS'.thisRepN'
p1836
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1837
I9
sS'.thisN'
p1838
I234
sS'.thisIndex'
p1839
I9
sg15
(lp1840
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1841
g16
(lp1842
S'k'
asg18
S'Y'
sS'.thisRepN'
p1843
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1844
I10
sS'.thisN'
p1845
I235
sS'.thisIndex'
p1846
I7
sg15
(lp1847
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1848
g16
(lp1849
S'k'
asg18
S'N'
sS'.thisRepN'
p1850
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1851
I11
sS'.thisN'
p1852
I236
sS'.thisIndex'
p1853
I11
sg15
(lp1854
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1855
S'k'
asg96
I11
sa(dp1856
g16
(lp1857
S'd'
asg18
S'Y'
sS'.thisRepN'
p1858
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1859
I12
sS'.thisN'
p1860
I237
sS'.thisIndex'
p1861
I14
sg15
(lp1862
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1863
S'k'
asg96
I14
sa(dp1864
g16
(lp1865
S'd'
asg18
S'N'
sS'.thisRepN'
p1866
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1867
I13
sS'.thisN'
p1868
I238
sS'.thisIndex'
p1869
I12
sg15
(lp1870
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I12
sa(dp1871
g16
(lp1872
S'd'
asg18
S'Y'
sS'.thisRepN'
p1873
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1874
I14
sS'.thisN'
p1875
I239
sS'.thisIndex'
p1876
I1
sg15
(lp1877
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I1
sa(dp1878
g16
(lp1879
S'd'
asg18
S'N'
sS'.thisRepN'
p1880
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1881
I0
sS'.thisN'
p1882
I240
sS'.thisIndex'
p1883
I0
sg15
(lp1884
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I0
sa(dp1885
g16
(lp1886
S'k'
asg18
S'N'
sS'.thisRepN'
p1887
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1888
I1
sS'.thisN'
p1889
I241
sS'.thisIndex'
p1890
I11
sg15
(lp1891
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1892
S'space'
p1893
asg96
I11
sa(dp1894
g16
(lp1895
S'd'
asg18
S'N'
sS'.thisRepN'
p1896
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1897
I2
sS'.thisN'
p1898
I242
sS'.thisIndex'
p1899
I2
sg15
(lp1900
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp1901
g16
(lp1902
S'k'
asg18
S'Y'
sS'.thisRepN'
p1903
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1904
I3
sS'.thisN'
p1905
I243
sS'.thisIndex'
p1906
I2
sg15
(lp1907
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp1908
g16
(lp1909
S'd'
asg18
S'Y'
sS'.thisRepN'
p1910
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1911
I4
sS'.thisN'
p1912
I244
sS'.thisIndex'
p1913
I7
sg15
(lp1914
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1915
S'space'
p1916
asg96
I7
sa(dp1917
g16
(lp1918
S'd'
asg18
S'Y'
sS'.thisRepN'
p1919
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1920
I5
sS'.thisN'
p1921
I245
sS'.thisIndex'
p1922
I11
sg15
(lp1923
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I11
sa(dp1924
g16
(lp1925
S'k'
asg18
S'N'
sS'.thisRepN'
p1926
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1927
I6
sS'.thisN'
p1928
I246
sS'.thisIndex'
p1929
I8
sg15
(lp1930
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1931
g16
(lp1932
S'd'
asg18
S'Y'
sS'.thisRepN'
p1933
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1934
I7
sS'.thisN'
p1935
I247
sS'.thisIndex'
p1936
I3
sg15
(lp1937
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1938
g16
(lp1939
S'k'
asg18
S'Y'
sS'.thisRepN'
p1940
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1941
I8
sS'.thisN'
p1942
I248
sS'.thisIndex'
p1943
I5
sg15
(lp1944
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I5
sa(dp1945
g16
(lp1946
S'd'
asg18
S'Y'
sg22
I31
sS'.thisN'
p1947
I249
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1948
I9
sS'.thisRepN'
p1949
I16
sg21
I44
sS'.thisIndex'
p1950
I2
sg23
I19
sg15
(lp1951
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp1952
g16
(lp1953
S'k'
asg96
I13
sS'.thisRepN'
p1954
I16
sg30
g31
sg32
g33
sS'.thisTrialN'
p1955
I10
sS'.thisN'
p1956
I250
sS'.thisIndex'
p1957
I13
sg15
(lp1958
S'k'
asg17
S'Y'
sg14
I6
sa(dp1959
g16
(lp1960
S'k'
asg96
I7
sS'.thisRepN'
p1961
I16
sg30
g31
sg32
g33
sS'.thisTrialN'
p1962
I11
sS'.thisN'
p1963
I251
sS'.thisIndex'
p1964
I7
sg15
(lp1965
S'k'
asg17
S'Y'
sg14
I6
sa(dp1966
g16
(lp1967
S'k'
asg18
S'Y'
sS'.thisRepN'
p1968
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1969
I12
sS'.thisN'
p1970
I252
sS'.thisIndex'
p1971
I12
sg15
(lp1972
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp1973
g16
(lp1974
S'k'
asg18
S'Y'
sS'.thisRepN'
p1975
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1976
I13
sS'.thisN'
p1977
I253
sS'.thisIndex'
p1978
I4
sg15
(lp1979
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I4
sa(dp1980
g16
(lp1981
S'k'
asg18
S'Y'
sS'.thisRepN'
p1982
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1983
I14
sS'.thisN'
p1984
I254
sS'.thisIndex'
p1985
I5
sg15
(lp1986
S'd'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp1987
S'space'
p1988
asg96
I5
sa(dp1989
g16
(lp1990
S'd'
asg18
S'N'
sS'.thisRepN'
p1991
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1992
I0
sS'.thisN'
p1993
I255
sS'.thisIndex'
p1994
I6
sg15
(lp1995
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I6
sa(dp1996
g16
(lp1997
S'd'
asg18
S'N'
sS'.thisRepN'
p1998
I17
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1999
I1
sS'.thisN'
p2000
I256
sS'.thisIndex'
p2001
I6
sg15
(lp2002
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2003
S'space'
p2004
asg96
I6
sa(dp2005
g16
(lp2006
S'k'
asg18
S'Y'
sS'.thisRepN'
p2007
I17
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2008
I2
sS'.thisN'
p2009
I257
sS'.thisIndex'
p2010
I6
sg15
(lp2011
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2012
g16
(lp2013
S'k'
asg18
S'N'
sS'.thisRepN'
p2014
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2015
I3
sS'.thisN'
p2016
I258
sS'.thisIndex'
p2017
I2
sg15
(lp2018
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2019
g16
(lp2020
S'k'
asg18
S'Y'
sS'.thisRepN'
p2021
I17
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2022
I4
sS'.thisN'
p2023
I259
sS'.thisIndex'
p2024
I2
sg15
(lp2025
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2026
g16
(lp2027
S'd'
asg18
S'N'
sS'.thisRepN'
p2028
I17
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2029
I5
sS'.thisN'
p2030
I260
sS'.thisIndex'
p2031
I6
sg15
(lp2032
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2033
S'space'
p2034
asg96
I6
sa(dp2035
g16
(lp2036
S'd'
asg18
S'N'
sS'.thisRepN'
p2037
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2038
I6
sS'.thisN'
p2039
I261
sS'.thisIndex'
p2040
I7
sg15
(lp2041
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I7
sa(dp2042
g16
(lp2043
S'd'
asg18
S'N'
sS'.thisRepN'
p2044
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2045
I7
sS'.thisN'
p2046
I262
sS'.thisIndex'
p2047
I0
sg15
(lp2048
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2049
g16
(lp2050
S'k'
asg18
S'N'
sS'.thisRepN'
p2051
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2052
I8
sS'.thisN'
p2053
I263
sS'.thisIndex'
p2054
I4
sg15
(lp2055
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I4
sa(dp2056
g16
(lp2057
S'k'
asg18
S'N'
sS'.thisRepN'
p2058
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2059
I9
sS'.thisN'
p2060
I264
sS'.thisIndex'
p2061
I8
sg15
(lp2062
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2063
g16
(lp2064
S'd'
asg18
S'Y'
sS'.thisRepN'
p2065
I17
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2066
I10
sS'.thisN'
p2067
I265
sS'.thisIndex'
p2068
I14
sg15
(lp2069
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I14
sa(dp2070
g16
(lp2071
S'k'
asg18
S'N'
sS'.thisRepN'
p2072
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2073
I11
sS'.thisN'
p2074
I266
sS'.thisIndex'
p2075
I12
sg15
(lp2076
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp2077
g16
(lp2078
S'k'
asg18
S'N'
sS'.thisRepN'
p2079
I17
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2080
I12
sS'.thisN'
p2081
I267
sS'.thisIndex'
p2082
I7
sg15
(lp2083
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2084
S'space'
p2085
asg96
I7
sa(dp2086
g16
(lp2087
S'd'
asg18
S'Y'
sS'.thisRepN'
p2088
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2089
I13
sS'.thisN'
p2090
I268
sS'.thisIndex'
p2091
I10
sg15
(lp2092
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2093
S'space'
p2094
asg96
I10
sa(dp2095
g16
(lp2096
S'k'
asg18
S'Y'
sS'.thisRepN'
p2097
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2098
I14
sS'.thisN'
p2099
I269
sS'.thisIndex'
p2100
I0
sg15
(lp2101
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2102
S'space'
p2103
asg96
I0
sa(dp2104
g16
(lp2105
S'k'
asg18
S'N'
sS'.thisRepN'
p2106
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2107
I0
sS'.thisN'
p2108
I270
sS'.thisIndex'
p2109
I14
sg15
(lp2110
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I14
sa(dp2111
g16
(lp2112
S'k'
asg18
S'N'
sS'.thisRepN'
p2113
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2114
I1
sS'.thisN'
p2115
I271
sS'.thisIndex'
p2116
I12
sg15
(lp2117
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2118
S'space'
p2119
asg96
I12
sa(dp2120
g16
(lp2121
S'd'
asg18
S'Y'
sS'.thisRepN'
p2122
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2123
I2
sS'.thisN'
p2124
I272
sS'.thisIndex'
p2125
I10
sg15
(lp2126
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I10
sa(dp2127
g16
(lp2128
S'k'
asg18
S'N'
sS'.thisRepN'
p2129
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2130
I3
sS'.thisN'
p2131
I273
sS'.thisIndex'
p2132
I12
sg15
(lp2133
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp2134
g16
(lp2135
S'd'
asg18
S'Y'
sS'.thisRepN'
p2136
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2137
I4
sS'.thisN'
p2138
I274
sS'.thisIndex'
p2139
I14
sg15
(lp2140
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I14
sa(dp2141
g16
(lp2142
S'd'
asg18
S'N'
sS'.thisRepN'
p2143
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2144
I5
sS'.thisN'
p2145
I275
sS'.thisIndex'
p2146
I9
sg15
(lp2147
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2148
g16
(lp2149
S'k'
asg18
S'Y'
sS'.thisRepN'
p2150
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2151
I6
sS'.thisN'
p2152
I276
sS'.thisIndex'
p2153
I6
sg15
(lp2154
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2155
S'space'
p2156
asg96
I6
sa(dp2157
g16
(lp2158
S'd'
asg18
S'N'
sS'.thisRepN'
p2159
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2160
I7
sS'.thisN'
p2161
I277
sS'.thisIndex'
p2162
I0
sg15
(lp2163
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2164
g16
(lp2165
S'k'
asg18
S'Y'
sS'.thisRepN'
p2166
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2167
I8
sS'.thisN'
p2168
I278
sS'.thisIndex'
p2169
I7
sg15
(lp2170
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I7
sa(dp2171
g16
(lp2172
S'k'
asg18
S'N'
sS'.thisRepN'
p2173
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2174
I9
sS'.thisN'
p2175
I279
sS'.thisIndex'
p2176
I6
sg15
(lp2177
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2178
g16
(lp2179
S'k'
asg18
S'Y'
sS'.thisRepN'
p2180
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2181
I10
sS'.thisN'
p2182
I280
sS'.thisIndex'
p2183
I4
sg15
(lp2184
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I4
sa(dp2185
g16
(lp2186
S'k'
asg18
S'N'
sS'.thisRepN'
p2187
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2188
I11
sS'.thisN'
p2189
I281
sS'.thisIndex'
p2190
I14
sg15
(lp2191
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2192
S'space'
p2193
asg96
I14
sa(dp2194
g16
(lp2195
S'k'
asg18
S'N'
sS'.thisRepN'
p2196
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2197
I12
sS'.thisN'
p2198
I282
sS'.thisIndex'
p2199
I3
sg15
(lp2200
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2201
S'space'
p2202
asg96
I3
sa(dp2203
g16
(lp2204
S'd'
asg18
S'N'
sS'.thisRepN'
p2205
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2206
I13
sS'.thisN'
p2207
I283
sS'.thisIndex'
p2208
I2
sg15
(lp2209
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2210
g16
(lp2211
S'k'
asg18
S'N'
sS'.thisRepN'
p2212
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2213
I14
sS'.thisN'
p2214
I284
sS'.thisIndex'
p2215
I3
sg15
(lp2216
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I3
sa(dp2217
g16
(lp2218
S'k'
asg18
S'N'
sS'.thisRepN'
p2219
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2220
I0
sS'.thisN'
p2221
I285
sS'.thisIndex'
p2222
I14
sg15
(lp2223
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I14
sa(dp2224
g16
(lp2225
S'k'
asg18
S'Y'
sS'.thisRepN'
p2226
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2227
I1
sS'.thisN'
p2228
I286
sS'.thisIndex'
p2229
I5
sg15
(lp2230
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2231
S'space'
p2232
asg96
I5
sa(dp2233
g16
(lp2234
S'k'
asg18
S'N'
sS'.thisRepN'
p2235
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2236
I2
sS'.thisN'
p2237
I287
sS'.thisIndex'
p2238
I11
sg15
(lp2239
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I11
sa(dp2240
g16
(lp2241
S'd'
asg18
S'N'
sS'.thisRepN'
p2242
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2243
I3
sS'.thisN'
p2244
I288
sS'.thisIndex'
p2245
I11
sg15
(lp2246
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I11
sa(dp2247
g16
(lp2248
S'd'
asg18
S'Y'
sS'.thisRepN'
p2249
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2250
I4
sS'.thisN'
p2251
I289
sS'.thisIndex'
p2252
I1
sg15
(lp2253
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2254
S'space'
p2255
asg96
I1
sa(dp2256
g16
(lp2257
S'k'
asg18
S'N'
sS'.thisRepN'
p2258
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2259
I5
sS'.thisN'
p2260
I290
sS'.thisIndex'
p2261
I1
sg15
(lp2262
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2263
g16
(lp2264
S'd'
asg18
S'N'
sS'.thisRepN'
p2265
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2266
I6
sS'.thisN'
p2267
I291
sS'.thisIndex'
p2268
I0
sg15
(lp2269
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2270
g16
(lp2271
S'k'
asg18
S'N'
sS'.thisRepN'
p2272
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2273
I7
sS'.thisN'
p2274
I292
sS'.thisIndex'
p2275
I1
sg15
(lp2276
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2277
g16
(lp2278
S'k'
asg18
S'N'
sS'.thisRepN'
p2279
I19
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2280
I8
sS'.thisN'
p2281
I293
sS'.thisIndex'
p2282
I9
sg15
(lp2283
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2284
S'space'
p2285
asg96
I9
sa(dp2286
g16
(lp2287
S'k'
asg18
S'Y'
sS'.thisRepN'
p2288
I19
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2289
I9
sS'.thisN'
p2290
I294
sS'.thisIndex'
p2291
I12
sg15
(lp2292
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp2293
g16
(lp2294
S'k'
asg18
S'Y'
sS'.thisRepN'
p2295
I19
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2296
I10
sS'.thisN'
p2297
I295
sS'.thisIndex'
p2298
I10
sg15
(lp2299
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2300
g16
(lp2301
S'd'
asg18
S'Y'
sS'.thisRepN'
p2302
I19
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2303
I11
sS'.thisN'
p2304
I296
sS'.thisIndex'
p2305
I14
sg15
(lp2306
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I14
sa(dp2307
g16
(lp2308
S'k'
asg18
S'N'
sS'.thisRepN'
p2309
I19
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2310
I12
sS'.thisN'
p2311
I297
sS'.thisIndex'
p2312
I7
sg15
(lp2313
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2314
S'space'
p2315
asg96
I7
sa(dp2316
g16
(lp2317
S'k'
asg18
S'N'
sS'.thisRepN'
p2318
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2319
I13
sS'.thisN'
p2320
I298
sS'.thisIndex'
p2321
I6
sg15
(lp2322
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2323
g16
(lp2324
S'k'
asg18
S'Y'
sg22
I27
sS'.thisN'
p2325
I299
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2326
I14
sS'.thisRepN'
p2327
I19
sg21
I46
sS'.thisIndex'
p2328
I3
sg23
I19
sg15
(lp2329
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I3
sa(dp2330
g16
(lp2331
S'k'
asg96
I10
sS'.thisRepN'
p2332
I20
sg30
g31
sg32
g33
sS'.thisTrialN'
p2333
I0
sS'.thisN'
p2334
I300
sS'.thisIndex'
p2335
I10
sg15
(lp2336
S'k'
asg17
S'Y'
sg14
I7
sa(dp2337
g16
(lp2338
S'k'
asg96
I5
sS'.thisRepN'
p2339
I20
sg30
g31
sg32
g33
sS'.thisTrialN'
p2340
I1
sS'.thisN'
p2341
I301
sS'.thisIndex'
p2342
I5
sg15
(lp2343
S'k'
asg17
S'Y'
sg14
I7
sa(dp2344
g16
(lp2345
S'd'
asg18
S'Y'
sS'.thisRepN'
p2346
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2347
I2
sS'.thisN'
p2348
I302
sS'.thisIndex'
p2349
I5
sg15
(lp2350
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2351
S'space'
p2352
asg96
I5
sa(dp2353
g16
(lp2354
S'k'
asg18
S'N'
sS'.thisRepN'
p2355
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2356
I3
sS'.thisN'
p2357
I303
sS'.thisIndex'
p2358
I14
sg15
(lp2359
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I14
sa(dp2360
g16
(lp2361
S'd'
asg18
S'Y'
sS'.thisRepN'
p2362
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2363
I4
sS'.thisN'
p2364
I304
sS'.thisIndex'
p2365
I10
sg15
(lp2366
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2367
S'space'
p2368
asg96
I10
sa(dp2369
g16
(lp2370
S'k'
asg18
S'N'
sS'.thisRepN'
p2371
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2372
I5
sS'.thisN'
p2373
I305
sS'.thisIndex'
p2374
I1
sg15
(lp2375
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2376
g16
(lp2377
S'd'
asg18
S'N'
sS'.thisRepN'
p2378
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2379
I6
sS'.thisN'
p2380
I306
sS'.thisIndex'
p2381
I2
sg15
(lp2382
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2383
g16
(lp2384
S'd'
asg18
S'N'
sS'.thisRepN'
p2385
I20
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2386
I7
sS'.thisN'
p2387
I307
sS'.thisIndex'
p2388
I7
sg15
(lp2389
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2390
S'space'
p2391
asg96
I7
sa(dp2392
g16
(lp2393
S'k'
asg18
S'Y'
sS'.thisRepN'
p2394
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2395
I8
sS'.thisN'
p2396
I308
sS'.thisIndex'
p2397
I10
sg15
(lp2398
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2399
S'space'
p2400
asg96
I10
sa(dp2401
g16
(lp2402
S'k'
asg18
S'Y'
sS'.thisRepN'
p2403
I20
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2404
I9
sS'.thisN'
p2405
I309
sS'.thisIndex'
p2406
I1
sg15
(lp2407
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2408
g16
(lp2409
S'k'
asg18
S'Y'
sS'.thisRepN'
p2410
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2411
I10
sS'.thisN'
p2412
I310
sS'.thisIndex'
p2413
I13
sg15
(lp2414
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2415
S'space'
p2416
asg96
I13
sa(dp2417
g16
(lp2418
S'd'
asg18
S'Y'
sS'.thisRepN'
p2419
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2420
I11
sS'.thisN'
p2421
I311
sS'.thisIndex'
p2422
I12
sg15
(lp2423
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2424
S'space'
p2425
asg96
I12
sa(dp2426
g16
(lp2427
S'k'
asg18
S'Y'
sS'.thisRepN'
p2428
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2429
I12
sS'.thisN'
p2430
I312
sS'.thisIndex'
p2431
I3
sg15
(lp2432
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2433
S'space'
p2434
asg96
I3
sa(dp2435
g16
(lp2436
S'k'
asg18
S'N'
sS'.thisRepN'
p2437
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2438
I13
sS'.thisN'
p2439
I313
sS'.thisIndex'
p2440
I1
sg15
(lp2441
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2442
g16
(lp2443
S'd'
asg18
S'N'
sS'.thisRepN'
p2444
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2445
I14
sS'.thisN'
p2446
I314
sS'.thisIndex'
p2447
I10
sg15
(lp2448
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I10
sa(dp2449
g16
(lp2450
S'd'
asg18
S'Y'
sS'.thisRepN'
p2451
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2452
I0
sS'.thisN'
p2453
I315
sS'.thisIndex'
p2454
I4
sg15
(lp2455
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I4
sa(dp2456
g16
(lp2457
S'd'
asg18
S'N'
sS'.thisRepN'
p2458
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2459
I1
sS'.thisN'
p2460
I316
sS'.thisIndex'
p2461
I12
sg15
(lp2462
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I12
sa(dp2463
g16
(lp2464
S'd'
asg18
S'N'
sS'.thisRepN'
p2465
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2466
I2
sS'.thisN'
p2467
I317
sS'.thisIndex'
p2468
I14
sg15
(lp2469
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I14
sa(dp2470
g16
(lp2471
S'd'
asg18
S'N'
sS'.thisRepN'
p2472
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2473
I3
sS'.thisN'
p2474
I318
sS'.thisIndex'
p2475
I1
sg15
(lp2476
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2477
g16
(lp2478
S'd'
asg18
S'Y'
sS'.thisRepN'
p2479
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2480
I4
sS'.thisN'
p2481
I319
sS'.thisIndex'
p2482
I6
sg15
(lp2483
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2484
S'space'
p2485
asg96
I6
sa(dp2486
g16
(lp2487
S'k'
asg18
S'Y'
sS'.thisRepN'
p2488
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2489
I5
sS'.thisN'
p2490
I320
sS'.thisIndex'
p2491
I6
sg15
(lp2492
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2493
S'space'
p2494
asg96
I6
sa(dp2495
g16
(lp2496
S'd'
asg18
S'Y'
sS'.thisRepN'
p2497
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2498
I6
sS'.thisN'
p2499
I321
sS'.thisIndex'
p2500
I1
sg15
(lp2501
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2502
S'space'
p2503
asg96
I1
sa(dp2504
g16
(lp2505
S'd'
asg18
S'Y'
sS'.thisRepN'
p2506
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2507
I7
sS'.thisN'
p2508
I322
sS'.thisIndex'
p2509
I14
sg15
(lp2510
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2511
S'space'
p2512
asg96
I14
sa(dp2513
g16
(lp2514
S'k'
asg18
S'N'
sS'.thisRepN'
p2515
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2516
I8
sS'.thisN'
p2517
I323
sS'.thisIndex'
p2518
I11
sg15
(lp2519
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I11
sa(dp2520
g16
(lp2521
S'd'
asg18
S'Y'
sS'.thisRepN'
p2522
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2523
I9
sS'.thisN'
p2524
I324
sS'.thisIndex'
p2525
I11
sg15
(lp2526
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2527
S'space'
p2528
asg96
I11
sa(dp2529
g16
(lp2530
S'k'
asg18
S'N'
sS'.thisRepN'
p2531
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2532
I10
sS'.thisN'
p2533
I325
sS'.thisIndex'
p2534
I6
sg15
(lp2535
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I6
sa(dp2536
g16
(lp2537
S'd'
asg18
S'Y'
sS'.thisRepN'
p2538
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2539
I11
sS'.thisN'
p2540
I326
sS'.thisIndex'
p2541
I13
sg15
(lp2542
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I13
sa(dp2543
g16
(lp2544
S'd'
asg18
S'Y'
sS'.thisRepN'
p2545
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2546
I12
sS'.thisN'
p2547
I327
sS'.thisIndex'
p2548
I11
sg15
(lp2549
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I11
sa(dp2550
g16
(lp2551
S'k'
asg18
S'Y'
sS'.thisRepN'
p2552
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2553
I13
sS'.thisN'
p2554
I328
sS'.thisIndex'
p2555
I11
sg15
(lp2556
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I11
sa(dp2557
g16
(lp2558
S'k'
asg18
S'N'
sS'.thisRepN'
p2559
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2560
I14
sS'.thisN'
p2561
I329
sS'.thisIndex'
p2562
I12
sg15
(lp2563
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2564
S'space'
p2565
asg96
I12
sa(dp2566
g16
(lp2567
S'd'
asg18
S'Y'
sS'.thisRepN'
p2568
I22
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2569
I0
sS'.thisN'
p2570
I330
sS'.thisIndex'
p2571
I10
sg15
(lp2572
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2573
g16
(lp2574
S'd'
asg18
S'Y'
sS'.thisRepN'
p2575
I22
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2576
I1
sS'.thisN'
p2577
I331
sS'.thisIndex'
p2578
I5
sg15
(lp2579
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2580
g16
(lp2581
S'k'
asg18
S'Y'
sS'.thisRepN'
p2582
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2583
I2
sS'.thisN'
p2584
I332
sS'.thisIndex'
p2585
I6
sg15
(lp2586
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2587
S'space'
p2588
asg96
I6
sa(dp2589
g16
(lp2590
S'k'
asg18
S'N'
sS'.thisRepN'
p2591
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2592
I3
sS'.thisN'
p2593
I333
sS'.thisIndex'
p2594
I12
sg15
(lp2595
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I12
sa(dp2596
g16
(lp2597
S'd'
asg18
S'N'
sS'.thisRepN'
p2598
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2599
I4
sS'.thisN'
p2600
I334
sS'.thisIndex'
p2601
I11
sg15
(lp2602
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I11
sa(dp2603
g16
(lp2604
S'k'
asg18
S'Y'
sS'.thisRepN'
p2605
I22
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2606
I5
sS'.thisN'
p2607
I335
sS'.thisIndex'
p2608
I6
sg15
(lp2609
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I6
sa(dp2610
g16
(lp2611
S'k'
asg18
S'Y'
sS'.thisRepN'
p2612
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2613
I6
sS'.thisN'
p2614
I336
sS'.thisIndex'
p2615
I14
sg15
(lp2616
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2617
S'space'
p2618
asg96
I14
sa(dp2619
g16
(lp2620
S'k'
asg18
S'Y'
sS'.thisRepN'
p2621
I22
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2622
I7
sS'.thisN'
p2623
I337
sS'.thisIndex'
p2624
I10
sg15
(lp2625
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2626
g16
(lp2627
S'k'
asg18
S'N'
sS'.thisRepN'
p2628
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2629
I8
sS'.thisN'
p2630
I338
sS'.thisIndex'
p2631
I5
sg15
(lp2632
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2633
g16
(lp2634
S'k'
asg18
S'Y'
sS'.thisRepN'
p2635
I22
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2636
I9
sS'.thisN'
p2637
I339
sS'.thisIndex'
p2638
I4
sg15
(lp2639
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2640
g16
(lp2641
S'k'
asg18
S'Y'
sS'.thisRepN'
p2642
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2643
I10
sS'.thisN'
p2644
I340
sS'.thisIndex'
p2645
I14
sg15
(lp2646
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2647
S'space'
p2648
asg96
I14
sa(dp2649
g16
(lp2650
S'k'
asg18
S'N'
sS'.thisRepN'
p2651
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2652
I11
sS'.thisN'
p2653
I341
sS'.thisIndex'
p2654
I12
sg15
(lp2655
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I12
sa(dp2656
g16
(lp2657
S'k'
asg18
S'Y'
sS'.thisRepN'
p2658
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2659
I12
sS'.thisN'
p2660
I342
sS'.thisIndex'
p2661
I3
sg15
(lp2662
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2663
S'space'
p2664
asg96
I3
sa(dp2665
g16
(lp2666
S'd'
asg18
S'N'
sS'.thisRepN'
p2667
I22
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2668
I13
sS'.thisN'
p2669
I343
sS'.thisIndex'
p2670
I10
sg15
(lp2671
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2672
S'space'
p2673
asg96
I10
sa(dp2674
g16
(lp2675
S'd'
asg18
S'N'
sS'.thisRepN'
p2676
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2677
I14
sS'.thisN'
p2678
I344
sS'.thisIndex'
p2679
I0
sg15
(lp2680
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I0
sa(dp2681
g16
(lp2682
S'd'
asg18
S'N'
sS'.thisRepN'
p2683
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2684
I0
sS'.thisN'
p2685
I345
sS'.thisIndex'
p2686
I14
sg15
(lp2687
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I14
sa(dp2688
g16
(lp2689
S'd'
asg18
S'N'
sS'.thisRepN'
p2690
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2691
I1
sS'.thisN'
p2692
I346
sS'.thisIndex'
p2693
I2
sg15
(lp2694
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2695
g16
(lp2696
S'k'
asg18
S'N'
sS'.thisRepN'
p2697
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2698
I2
sS'.thisN'
p2699
I347
sS'.thisIndex'
p2700
I10
sg15
(lp2701
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2702
g16
(lp2703
S'd'
asg18
S'N'
sS'.thisRepN'
p2704
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2705
I3
sS'.thisN'
p2706
I348
sS'.thisIndex'
p2707
I10
sg15
(lp2708
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2709
g16
(lp2710
S'd'
asg18
S'N'
sg22
I34
sS'.thisN'
p2711
I349
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2712
I4
sS'.thisRepN'
p2713
I23
sg21
I42
sS'.thisIndex'
p2714
I7
sg23
I25
sg15
(lp2715
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2716
S'k'
asg96
I7
sa(dp2717
g16
(lp2718
S'd'
asg96
I12
sS'.thisRepN'
p2719
I23
sg30
g31
sg32
g33
sS'.thisTrialN'
p2720
I5
sS'.thisN'
p2721
I350
sS'.thisIndex'
p2722
I12
sg15
(lp2723
S'd'
asg17
S'Y'
sg14
I8
sa(dp2724
g16
(lp2725
S'k'
asg96
I7
sS'.thisRepN'
p2726
I23
sg30
g31
sg32
g33
sS'.thisTrialN'
p2727
I6
sS'.thisN'
p2728
I351
sS'.thisIndex'
p2729
I7
sg15
(lp2730
S'k'
asg17
S'Y'
sg14
I8
sa(dp2731
g16
(lp2732
S'd'
asg18
S'Y'
sS'.thisRepN'
p2733
I23
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2734
I7
sS'.thisN'
p2735
I352
sS'.thisIndex'
p2736
I13
sg15
(lp2737
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I13
sa(dp2738
g16
(lp2739
S'd'
asg18
S'Y'
sS'.thisRepN'
p2740
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2741
I8
sS'.thisN'
p2742
I353
sS'.thisIndex'
p2743
I7
sg15
(lp2744
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2745
S'space'
p2746
asg96
I7
sa(dp2747
g16
(lp2748
S'k'
asg18
S'Y'
sS'.thisRepN'
p2749
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2750
I9
sS'.thisN'
p2751
I354
sS'.thisIndex'
p2752
I4
sg15
(lp2753
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2754
S'space'
p2755
asg96
I4
sa(dp2756
g16
(lp2757
S'k'
asg18
S'N'
sS'.thisRepN'
p2758
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2759
I10
sS'.thisN'
p2760
I355
sS'.thisIndex'
p2761
I13
sg15
(lp2762
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I13
sa(dp2763
g16
(lp2764
S'd'
asg18
S'N'
sS'.thisRepN'
p2765
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2766
I11
sS'.thisN'
p2767
I356
sS'.thisIndex'
p2768
I3
sg15
(lp2769
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp2770
g16
(lp2771
S'd'
asg18
S'Y'
sS'.thisRepN'
p2772
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2773
I12
sS'.thisN'
p2774
I357
sS'.thisIndex'
p2775
I11
sg15
(lp2776
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2777
S'space'
p2778
asg96
I11
sa(dp2779
g16
(lp2780
S'd'
asg18
S'N'
sS'.thisRepN'
p2781
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2782
I13
sS'.thisN'
p2783
I358
sS'.thisIndex'
p2784
I9
sg15
(lp2785
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp2786
g16
(lp2787
S'd'
asg18
S'Y'
sS'.thisRepN'
p2788
I23
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2789
I14
sS'.thisN'
p2790
I359
sS'.thisIndex'
p2791
I6
sg15
(lp2792
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp2793
g16
(lp2794
S'k'
asg18
S'Y'
sS'.thisRepN'
p2795
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2796
I0
sS'.thisN'
p2797
I360
sS'.thisIndex'
p2798
I0
sg15
(lp2799
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp2800
g16
(lp2801
S'k'
asg18
S'N'
sS'.thisRepN'
p2802
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2803
I1
sS'.thisN'
p2804
I361
sS'.thisIndex'
p2805
I0
sg15
(lp2806
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp2807
g16
(lp2808
S'd'
asg18
S'N'
sS'.thisRepN'
p2809
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2810
I2
sS'.thisN'
p2811
I362
sS'.thisIndex'
p2812
I6
sg15
(lp2813
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2814
S'space'
p2815
asg96
I6
sa(dp2816
g16
(lp2817
S'k'
asg18
S'N'
sS'.thisRepN'
p2818
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2819
I3
sS'.thisN'
p2820
I363
sS'.thisIndex'
p2821
I10
sg15
(lp2822
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2823
S'space'
p2824
asg96
I10
sa(dp2825
g16
(lp2826
S'd'
asg18
S'Y'
sS'.thisRepN'
p2827
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2828
I4
sS'.thisN'
p2829
I364
sS'.thisIndex'
p2830
I10
sg15
(lp2831
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp2832
g16
(lp2833
S'k'
asg18
S'Y'
sS'.thisRepN'
p2834
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2835
I5
sS'.thisN'
p2836
I365
sS'.thisIndex'
p2837
I12
sg15
(lp2838
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I12
sa(dp2839
g16
(lp2840
S'k'
asg18
S'N'
sS'.thisRepN'
p2841
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2842
I6
sS'.thisN'
p2843
I366
sS'.thisIndex'
p2844
I11
sg15
(lp2845
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I11
sa(dp2846
g16
(lp2847
S'd'
asg18
S'Y'
sS'.thisRepN'
p2848
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2849
I7
sS'.thisN'
p2850
I367
sS'.thisIndex'
p2851
I12
sg15
(lp2852
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2853
S'space'
p2854
asg96
I12
sa(dp2855
g16
(lp2856
S'k'
asg18
S'Y'
sS'.thisRepN'
p2857
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2858
I8
sS'.thisN'
p2859
I368
sS'.thisIndex'
p2860
I8
sg15
(lp2861
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I8
sa(dp2862
g16
(lp2863
S'k'
asg18
S'Y'
sS'.thisRepN'
p2864
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2865
I9
sS'.thisN'
p2866
I369
sS'.thisIndex'
p2867
I2
sg15
(lp2868
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2869
S'space'
p2870
asg96
I2
sa(dp2871
g16
(lp2872
S'k'
asg18
S'N'
sS'.thisRepN'
p2873
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2874
I10
sS'.thisN'
p2875
I370
sS'.thisIndex'
p2876
I1
sg15
(lp2877
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp2878
g16
(lp2879
S'd'
asg18
S'N'
sS'.thisRepN'
p2880
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2881
I11
sS'.thisN'
p2882
I371
sS'.thisIndex'
p2883
I9
sg15
(lp2884
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I9
sa(dp2885
g16
(lp2886
S'd'
asg18
S'Y'
sS'.thisRepN'
p2887
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2888
I12
sS'.thisN'
p2889
I372
sS'.thisIndex'
p2890
I13
sg15
(lp2891
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2892
S'space'
p2893
asg96
I13
sa(dp2894
g16
(lp2895
S'd'
asg18
S'Y'
sS'.thisRepN'
p2896
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2897
I13
sS'.thisN'
p2898
I373
sS'.thisIndex'
p2899
I12
sg15
(lp2900
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2901
S'space'
p2902
asg96
I12
sa(dp2903
g16
(lp2904
S'd'
asg18
S'N'
sS'.thisRepN'
p2905
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2906
I14
sS'.thisN'
p2907
I374
sS'.thisIndex'
p2908
I4
sg15
(lp2909
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I4
sa(dp2910
g16
(lp2911
S'd'
asg18
S'N'
sS'.thisRepN'
p2912
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2913
I0
sS'.thisN'
p2914
I375
sS'.thisIndex'
p2915
I6
sg15
(lp2916
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2917
S'space'
p2918
asg96
I6
sa(dp2919
g16
(lp2920
S'k'
asg18
S'Y'
sS'.thisRepN'
p2921
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2922
I1
sS'.thisN'
p2923
I376
sS'.thisIndex'
p2924
I14
sg15
(lp2925
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2926
S'space'
p2927
asg96
I14
sa(dp2928
g16
(lp2929
S'k'
asg18
S'Y'
sS'.thisRepN'
p2930
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2931
I2
sS'.thisN'
p2932
I377
sS'.thisIndex'
p2933
I3
sg15
(lp2934
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2935
S'space'
p2936
asg96
I3
sa(dp2937
g16
(lp2938
S'd'
asg18
S'N'
sS'.thisRepN'
p2939
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2940
I3
sS'.thisN'
p2941
I378
sS'.thisIndex'
p2942
I1
sg15
(lp2943
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp2944
g16
(lp2945
S'k'
asg18
S'N'
sS'.thisRepN'
p2946
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2947
I4
sS'.thisN'
p2948
I379
sS'.thisIndex'
p2949
I4
sg15
(lp2950
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I4
sa(dp2951
g16
(lp2952
S'd'
asg18
S'N'
sS'.thisRepN'
p2953
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2954
I5
sS'.thisN'
p2955
I380
sS'.thisIndex'
p2956
I6
sg15
(lp2957
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp2958
g16
(lp2959
S'd'
asg18
S'N'
sS'.thisRepN'
p2960
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2961
I6
sS'.thisN'
p2962
I381
sS'.thisIndex'
p2963
I1
sg15
(lp2964
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I1
sa(dp2965
g16
(lp2966
S'k'
asg18
S'N'
sS'.thisRepN'
p2967
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2968
I7
sS'.thisN'
p2969
I382
sS'.thisIndex'
p2970
I10
sg15
(lp2971
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2972
S'space'
p2973
asg96
I10
sa(dp2974
g16
(lp2975
S'k'
asg18
S'N'
sS'.thisRepN'
p2976
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2977
I8
sS'.thisN'
p2978
I383
sS'.thisIndex'
p2979
I6
sg15
(lp2980
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp2981
g16
(lp2982
S'd'
asg18
S'N'
sS'.thisRepN'
p2983
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2984
I9
sS'.thisN'
p2985
I384
sS'.thisIndex'
p2986
I12
sg15
(lp2987
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2988
S'space'
p2989
asg96
I12
sa(dp2990
g16
(lp2991
S'k'
asg18
S'N'
sS'.thisRepN'
p2992
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2993
I10
sS'.thisN'
p2994
I385
sS'.thisIndex'
p2995
I13
sg15
(lp2996
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I13
sa(dp2997
g16
(lp2998
S'k'
asg18
S'N'
sS'.thisRepN'
p2999
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3000
I11
sS'.thisN'
p3001
I386
sS'.thisIndex'
p3002
I6
sg15
(lp3003
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3004
S'space'
p3005
asg96
I6
sa(dp3006
g16
(lp3007
S'k'
asg18
S'N'
sS'.thisRepN'
p3008
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3009
I12
sS'.thisN'
p3010
I387
sS'.thisIndex'
p3011
I5
sg15
(lp3012
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3013
S'space'
p3014
asg96
I5
sa(dp3015
g16
(lp3016
S'd'
asg18
S'N'
sS'.thisRepN'
p3017
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3018
I13
sS'.thisN'
p3019
I388
sS'.thisIndex'
p3020
I7
sg15
(lp3021
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3022
S'space'
p3023
asg96
I7
sa(dp3024
g16
(lp3025
S'd'
asg18
S'N'
sS'.thisRepN'
p3026
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3027
I14
sS'.thisN'
p3028
I389
sS'.thisIndex'
p3029
I4
sg15
(lp3030
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I4
sa(dp3031
g16
(lp3032
S'k'
asg18
S'N'
sS'.thisRepN'
p3033
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3034
I0
sS'.thisN'
p3035
I390
sS'.thisIndex'
p3036
I5
sg15
(lp3037
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp3038
g16
(lp3039
S'd'
asg18
S'Y'
sS'.thisRepN'
p3040
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3041
I1
sS'.thisN'
p3042
I391
sS'.thisIndex'
p3043
I1
sg15
(lp3044
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3045
S'space'
p3046
asg96
I1
sa(dp3047
g16
(lp3048
S'k'
asg18
S'N'
sS'.thisRepN'
p3049
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3050
I2
sS'.thisN'
p3051
I392
sS'.thisIndex'
p3052
I11
sg15
(lp3053
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I11
sa(dp3054
g16
(lp3055
S'k'
asg18
S'N'
sS'.thisRepN'
p3056
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3057
I3
sS'.thisN'
p3058
I393
sS'.thisIndex'
p3059
I13
sg15
(lp3060
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I13
sa(dp3061
g16
(lp3062
S'd'
asg18
S'N'
sS'.thisRepN'
p3063
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3064
I4
sS'.thisN'
p3065
I394
sS'.thisIndex'
p3066
I3
sg15
(lp3067
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3068
g16
(lp3069
S'd'
asg18
S'N'
sS'.thisRepN'
p3070
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3071
I5
sS'.thisN'
p3072
I395
sS'.thisIndex'
p3073
I8
sg15
(lp3074
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I8
sa(dp3075
g16
(lp3076
S'k'
asg18
S'N'
sS'.thisRepN'
p3077
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3078
I6
sS'.thisN'
p3079
I396
sS'.thisIndex'
p3080
I1
sg15
(lp3081
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp3082
g16
(lp3083
S'k'
asg18
S'Y'
sS'.thisRepN'
p3084
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3085
I7
sS'.thisN'
p3086
I397
sS'.thisIndex'
p3087
I11
sg15
(lp3088
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3089
S'space'
p3090
asg96
I11
sa(dp3091
g16
(lp3092
S'd'
asg18
S'Y'
sS'.thisRepN'
p3093
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3094
I8
sS'.thisN'
p3095
I398
sS'.thisIndex'
p3096
I10
sg15
(lp3097
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3098
S'space'
p3099
asg96
I10
sa(dp3100
g16
(lp3101
S'd'
asg18
S'N'
sg22
I34
sS'.thisN'
p3102
I399
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3103
I9
sS'.thisRepN'
p3104
I26
sg21
I45
sS'.thisIndex'
p3105
I9
sg23
I18
sg15
(lp3106
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3107
g16
(lp3108
S'd'
asg96
I14
sS'.thisRepN'
p3109
I26
sg30
g31
sg32
g33
sS'.thisTrialN'
p3110
I10
sS'.thisN'
p3111
I400
sS'.thisIndex'
p3112
I14
sg15
(lp3113
S'd'
asg17
S'Y'
sg14
I9
sa(dp3114
g16
(lp3115
S'd'
asg96
I7
sS'.thisRepN'
p3116
I26
sg30
g31
sg32
g33
sS'.thisTrialN'
p3117
I11
sS'.thisN'
p3118
I401
sS'.thisIndex'
p3119
I7
sg15
(lp3120
S'd'
asg17
S'Y'
sg14
I9
sa(dp3121
g16
(lp3122
S'k'
asg18
S'N'
sS'.thisRepN'
p3123
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3124
I12
sS'.thisN'
p3125
I402
sS'.thisIndex'
p3126
I9
sg15
(lp3127
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3128
g16
(lp3129
S'd'
asg18
S'Y'
sS'.thisRepN'
p3130
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3131
I13
sS'.thisN'
p3132
I403
sS'.thisIndex'
p3133
I3
sg15
(lp3134
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3135
S'space'
p3136
asg96
I3
sa(dp3137
g16
(lp3138
S'k'
asg18
S'Y'
sS'.thisRepN'
p3139
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3140
I14
sS'.thisN'
p3141
I404
sS'.thisIndex'
p3142
I14
sg15
(lp3143
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I14
sa(dp3144
g16
(lp3145
S'k'
asg18
S'N'
sS'.thisRepN'
p3146
I27
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3147
I0
sS'.thisN'
p3148
I405
sS'.thisIndex'
p3149
I9
sg15
(lp3150
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3151
S'space'
p3152
asg96
I9
sa(dp3153
g16
(lp3154
S'k'
asg18
S'Y'
sS'.thisRepN'
p3155
I27
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3156
I1
sS'.thisN'
p3157
I406
sS'.thisIndex'
p3158
I3
sg15
(lp3159
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3160
g16
(lp3161
S'd'
asg18
S'Y'
sS'.thisRepN'
p3162
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3163
I2
sS'.thisN'
p3164
I407
sS'.thisIndex'
p3165
I14
sg15
(lp3166
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3167
S'space'
p3168
asg96
I14
sa(dp3169
g16
(lp3170
S'k'
asg18
S'Y'
sS'.thisRepN'
p3171
I27
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3172
I3
sS'.thisN'
p3173
I408
sS'.thisIndex'
p3174
I5
sg15
(lp3175
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3176
g16
(lp3177
S'd'
asg18
S'N'
sS'.thisRepN'
p3178
I27
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3179
I4
sS'.thisN'
p3180
I409
sS'.thisIndex'
p3181
I0
sg15
(lp3182
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3183
S'space'
p3184
asg96
I0
sa(dp3185
g16
(lp3186
S'd'
asg18
S'N'
sS'.thisRepN'
p3187
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3188
I5
sS'.thisN'
p3189
I410
sS'.thisIndex'
p3190
I1
sg15
(lp3191
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I1
sa(dp3192
g16
(lp3193
S'd'
asg18
S'N'
sS'.thisRepN'
p3194
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3195
I6
sS'.thisN'
p3196
I411
sS'.thisIndex'
p3197
I0
sg15
(lp3198
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I0
sa(dp3199
g16
(lp3200
S'k'
asg18
S'Y'
sS'.thisRepN'
p3201
I27
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3202
I7
sS'.thisN'
p3203
I412
sS'.thisIndex'
p3204
I12
sg15
(lp3205
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I12
sa(dp3206
g16
(lp3207
S'd'
asg18
S'N'
sS'.thisRepN'
p3208
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3209
I8
sS'.thisN'
p3210
I413
sS'.thisIndex'
p3211
I7
sg15
(lp3212
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3213
g16
(lp3214
S'd'
asg18
S'Y'
sS'.thisRepN'
p3215
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3216
I9
sS'.thisN'
p3217
I414
sS'.thisIndex'
p3218
I13
sg15
(lp3219
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3220
S'space'
p3221
asg96
I13
sa(dp3222
g16
(lp3223
S'k'
asg18
S'N'
sS'.thisRepN'
p3224
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3225
I10
sS'.thisN'
p3226
I415
sS'.thisIndex'
p3227
I4
sg15
(lp3228
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I4
sa(dp3229
g16
(lp3230
S'd'
asg18
S'Y'
sS'.thisRepN'
p3231
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3232
I11
sS'.thisN'
p3233
I416
sS'.thisIndex'
p3234
I12
sg15
(lp3235
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3236
S'space'
p3237
asg96
I12
sa(dp3238
g16
(lp3239
S'd'
asg18
S'Y'
sS'.thisRepN'
p3240
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3241
I12
sS'.thisN'
p3242
I417
sS'.thisIndex'
p3243
I10
sg15
(lp3244
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3245
S'space'
p3246
asg96
I10
sa(dp3247
g16
(lp3248
S'd'
asg18
S'N'
sS'.thisRepN'
p3249
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3250
I13
sS'.thisN'
p3251
I418
sS'.thisIndex'
p3252
I3
sg15
(lp3253
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3254
g16
(lp3255
S'k'
asg18
S'Y'
sS'.thisRepN'
p3256
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3257
I14
sS'.thisN'
p3258
I419
sS'.thisIndex'
p3259
I14
sg15
(lp3260
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3261
S'space'
p3262
asg96
I14
sa(dp3263
g16
(lp3264
S'k'
asg18
S'N'
sS'.thisRepN'
p3265
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3266
I0
sS'.thisN'
p3267
I420
sS'.thisIndex'
p3268
I9
sg15
(lp3269
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I9
sa(dp3270
g16
(lp3271
S'k'
asg18
S'Y'
sS'.thisRepN'
p3272
I28
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3273
I1
sS'.thisN'
p3274
I421
sS'.thisIndex'
p3275
I5
sg15
(lp3276
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I5
sa(dp3277
g16
(lp3278
S'k'
asg18
S'Y'
sS'.thisRepN'
p3279
I28
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3280
I2
sS'.thisN'
p3281
I422
sS'.thisIndex'
p3282
I8
sg15
(lp3283
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3284
g16
(lp3285
S'd'
asg18
S'Y'
sS'.thisRepN'
p3286
I28
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3287
I3
sS'.thisN'
p3288
I423
sS'.thisIndex'
p3289
I11
sg15
(lp3290
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I11
sa(dp3291
g16
(lp3292
S'd'
asg18
S'N'
sS'.thisRepN'
p3293
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3294
I4
sS'.thisN'
p3295
I424
sS'.thisIndex'
p3296
I1
sg15
(lp3297
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3298
g16
(lp3299
S'd'
asg18
S'N'
sS'.thisRepN'
p3300
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3301
I5
sS'.thisN'
p3302
I425
sS'.thisIndex'
p3303
I11
sg15
(lp3304
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I11
sa(dp3305
g16
(lp3306
S'd'
asg18
S'Y'
sS'.thisRepN'
p3307
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3308
I6
sS'.thisN'
p3309
I426
sS'.thisIndex'
p3310
I2
sg15
(lp3311
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3312
S'space'
p3313
asg96
I2
sa(dp3314
g16
(lp3315
S'd'
asg18
S'N'
sS'.thisRepN'
p3316
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3317
I7
sS'.thisN'
p3318
I427
sS'.thisIndex'
p3319
I2
sg15
(lp3320
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3321
g16
(lp3322
S'k'
asg18
S'N'
sS'.thisRepN'
p3323
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3324
I8
sS'.thisN'
p3325
I428
sS'.thisIndex'
p3326
I1
sg15
(lp3327
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I1
sa(dp3328
g16
(lp3329
S'k'
asg18
S'Y'
sS'.thisRepN'
p3330
I28
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3331
I9
sS'.thisN'
p3332
I429
sS'.thisIndex'
p3333
I3
sg15
(lp3334
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3335
g16
(lp3336
S'k'
asg18
S'Y'
sS'.thisRepN'
p3337
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3338
I10
sS'.thisN'
p3339
I430
sS'.thisIndex'
p3340
I8
sg15
(lp3341
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3342
S'space'
p3343
asg96
I8
sa(dp3344
g16
(lp3345
S'd'
asg18
S'N'
sS'.thisRepN'
p3346
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3347
I11
sS'.thisN'
p3348
I431
sS'.thisIndex'
p3349
I12
sg15
(lp3350
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I12
sa(dp3351
g16
(lp3352
S'd'
asg18
S'N'
sS'.thisRepN'
p3353
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3354
I12
sS'.thisN'
p3355
I432
sS'.thisIndex'
p3356
I5
sg15
(lp3357
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3358
g16
(lp3359
S'd'
asg18
S'N'
sS'.thisRepN'
p3360
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3361
I13
sS'.thisN'
p3362
I433
sS'.thisIndex'
p3363
I5
sg15
(lp3364
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I5
sa(dp3365
g16
(lp3366
S'd'
asg18
S'N'
sS'.thisRepN'
p3367
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3368
I14
sS'.thisN'
p3369
I434
sS'.thisIndex'
p3370
I11
sg15
(lp3371
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I11
sa(dp3372
g16
(lp3373
S'k'
asg18
S'Y'
sS'.thisRepN'
p3374
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3375
I0
sS'.thisN'
p3376
I435
sS'.thisIndex'
p3377
I2
sg15
(lp3378
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3379
S'space'
p3380
asg96
I2
sa(dp3381
g16
(lp3382
S'k'
asg18
S'N'
sS'.thisRepN'
p3383
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3384
I1
sS'.thisN'
p3385
I436
sS'.thisIndex'
p3386
I14
sg15
(lp3387
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I14
sa(dp3388
g16
(lp3389
S'k'
asg18
S'Y'
sS'.thisRepN'
p3390
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3391
I2
sS'.thisN'
p3392
I437
sS'.thisIndex'
p3393
I7
sg15
(lp3394
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3395
S'space'
p3396
asg96
I7
sa(dp3397
g16
(lp3398
S'k'
asg18
S'Y'
sS'.thisRepN'
p3399
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3400
I3
sS'.thisN'
p3401
I438
sS'.thisIndex'
p3402
I11
sg15
(lp3403
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3404
S'space'
p3405
asg96
I11
sa(dp3406
g16
(lp3407
S'k'
asg18
S'Y'
sS'.thisRepN'
p3408
I29
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3409
I4
sS'.thisN'
p3410
I439
sS'.thisIndex'
p3411
I1
sg15
(lp3412
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3413
g16
(lp3414
S'd'
asg18
S'N'
sS'.thisRepN'
p3415
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3416
I5
sS'.thisN'
p3417
I440
sS'.thisIndex'
p3418
I2
sg15
(lp3419
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3420
g16
(lp3421
S'k'
asg18
S'Y'
sS'.thisRepN'
p3422
I29
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3423
I6
sS'.thisN'
p3424
I441
sS'.thisIndex'
p3425
I1
sg15
(lp3426
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3427
S'k'
asg96
I1
sa(dp3428
g16
(lp3429
S'd'
asg18
S'N'
sS'.thisRepN'
p3430
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3431
I7
sS'.thisN'
p3432
I442
sS'.thisIndex'
p3433
I3
sg15
(lp3434
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3435
g16
(lp3436
S'd'
asg18
S'Y'
sS'.thisRepN'
p3437
I29
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3438
I8
sS'.thisN'
p3439
I443
sS'.thisIndex'
p3440
I3
sg15
(lp3441
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I3
sa(dp3442
g16
(lp3443
S'k'
asg18
S'N'
sS'.thisRepN'
p3444
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3445
I9
sS'.thisN'
p3446
I444
sS'.thisIndex'
p3447
I3
sg15
(lp3448
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3449
g16
(lp3450
S'k'
asg18
S'N'
sS'.thisRepN'
p3451
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3452
I10
sS'.thisN'
p3453
I445
sS'.thisIndex'
p3454
I11
sg15
(lp3455
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I11
sa(dp3456
g16
(lp3457
S'd'
asg18
S'Y'
sS'.thisRepN'
p3458
I29
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3459
I11
sS'.thisN'
p3460
I446
sS'.thisIndex'
p3461
I8
sg15
(lp3462
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3463
g16
(lp3464
S'k'
asg18
S'Y'
sS'.thisRepN'
p3465
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3466
I12
sS'.thisN'
p3467
I447
sS'.thisIndex'
p3468
I6
sg15
(lp3469
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3470
S'space'
p3471
asg96
I6
sa(dp3472
g16
(lp3473
S'k'
asg18
S'N'
sS'.thisRepN'
p3474
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3475
I13
sS'.thisN'
p3476
I448
sS'.thisIndex'
p3477
I13
sg15
(lp3478
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I13
sa(dp3479
g16
(lp3480
S'd'
asg18
S'N'
sg22
I33
sS'.thisN'
p3481
I449
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3482
I14
sS'.thisRepN'
p3483
I29
sg21
I41
sS'.thisIndex'
p3484
I10
sg23
I24
sg15
(lp3485
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3486
S'space'
p3487
asg96
I10
sa(dp3488
g16
(lp3489
S'k'
asg96
I11
sS'.thisRepN'
p3490
I30
sg30
g31
sg32
g33
sS'.thisTrialN'
p3491
I0
sS'.thisN'
p3492
I450
sS'.thisIndex'
p3493
I11
sg15
(lp3494
S'k'
asg17
S'Y'
sg14
I10
sa(dp3495
g16
(lp3496
S'd'
asg96
I6
sS'.thisRepN'
p3497
I30
sg30
g31
sg32
g33
sS'.thisTrialN'
p3498
I1
sS'.thisN'
p3499
I451
sS'.thisIndex'
p3500
I6
sg15
(lp3501
S'd'
asg17
S'Y'
sg14
I10
sa(dp3502
g16
(lp3503
S'k'
asg18
S'Y'
sS'.thisRepN'
p3504
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3505
I2
sS'.thisN'
p3506
I452
sS'.thisIndex'
p3507
I6
sg15
(lp3508
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3509
S'space'
p3510
asg96
I6
sa(dp3511
g16
(lp3512
S'd'
asg18
S'Y'
sS'.thisRepN'
p3513
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3514
I3
sS'.thisN'
p3515
I453
sS'.thisIndex'
p3516
I9
sg15
(lp3517
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3518
S'space'
p3519
asg96
I9
sa(dp3520
g16
(lp3521
S'd'
asg18
S'N'
sS'.thisRepN'
p3522
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3523
I4
sS'.thisN'
p3524
I454
sS'.thisIndex'
p3525
I9
sg15
(lp3526
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3527
S'space'
p3528
asg96
I9
sa(dp3529
g16
(lp3530
S'k'
asg18
S'Y'
sS'.thisRepN'
p3531
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3532
I5
sS'.thisN'
p3533
I455
sS'.thisIndex'
p3534
I13
sg15
(lp3535
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3536
S'space'
p3537
asg96
I13
sa(dp3538
g16
(lp3539
S'k'
asg18
S'Y'
sS'.thisRepN'
p3540
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3541
I6
sS'.thisN'
p3542
I456
sS'.thisIndex'
p3543
I3
sg15
(lp3544
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3545
S'space'
p3546
asg96
I3
sa(dp3547
g16
(lp3548
S'd'
asg18
S'N'
sS'.thisRepN'
p3549
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3550
I7
sS'.thisN'
p3551
I457
sS'.thisIndex'
p3552
I4
sg15
(lp3553
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3554
g16
(lp3555
S'k'
asg18
S'Y'
sS'.thisRepN'
p3556
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3557
I8
sS'.thisN'
p3558
I458
sS'.thisIndex'
p3559
I14
sg15
(lp3560
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I14
sa(dp3561
g16
(lp3562
S'k'
asg18
S'Y'
sS'.thisRepN'
p3563
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3564
I9
sS'.thisN'
p3565
I459
sS'.thisIndex'
p3566
I3
sg15
(lp3567
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3568
g16
(lp3569
S'd'
asg18
S'Y'
sS'.thisRepN'
p3570
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3571
I10
sS'.thisN'
p3572
I460
sS'.thisIndex'
p3573
I10
sg15
(lp3574
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3575
S'space'
p3576
asg96
I10
sa(dp3577
g16
(lp3578
S'k'
asg18
S'N'
sS'.thisRepN'
p3579
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3580
I11
sS'.thisN'
p3581
I461
sS'.thisIndex'
p3582
I14
sg15
(lp3583
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I14
sa(dp3584
g16
(lp3585
S'k'
asg18
S'N'
sS'.thisRepN'
p3586
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3587
I12
sS'.thisN'
p3588
I462
sS'.thisIndex'
p3589
I0
sg15
(lp3590
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3591
S'space'
p3592
asg96
I0
sa(dp3593
g16
(lp3594
S'd'
asg18
S'N'
sS'.thisRepN'
p3595
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3596
I13
sS'.thisN'
p3597
I463
sS'.thisIndex'
p3598
I8
sg15
(lp3599
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3600
g16
(lp3601
S'k'
asg18
S'N'
sS'.thisRepN'
p3602
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3603
I14
sS'.thisN'
p3604
I464
sS'.thisIndex'
p3605
I0
sg15
(lp3606
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I0
sa(dp3607
g16
(lp3608
S'd'
asg18
S'N'
sS'.thisRepN'
p3609
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3610
I0
sS'.thisN'
p3611
I465
sS'.thisIndex'
p3612
I1
sg15
(lp3613
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3614
g16
(lp3615
S'k'
asg18
S'N'
sS'.thisRepN'
p3616
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3617
I1
sS'.thisN'
p3618
I466
sS'.thisIndex'
p3619
I11
sg15
(lp3620
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I11
sa(dp3621
g16
(lp3622
S'd'
asg18
S'Y'
sS'.thisRepN'
p3623
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3624
I2
sS'.thisN'
p3625
I467
sS'.thisIndex'
p3626
I8
sg15
(lp3627
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3628
S'space'
p3629
asg96
I8
sa(dp3630
g16
(lp3631
S'k'
asg18
S'Y'
sS'.thisRepN'
p3632
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3633
I3
sS'.thisN'
p3634
I468
sS'.thisIndex'
p3635
I6
sg15
(lp3636
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3637
S'space'
p3638
asg96
I6
sa(dp3639
g16
(lp3640
S'k'
asg18
S'N'
sS'.thisRepN'
p3641
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3642
I4
sS'.thisN'
p3643
I469
sS'.thisIndex'
p3644
I5
sg15
(lp3645
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3646
g16
(lp3647
S'd'
asg18
S'Y'
sS'.thisRepN'
p3648
I31
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3649
I5
sS'.thisN'
p3650
I470
sS'.thisIndex'
p3651
I7
sg15
(lp3652
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I7
sa(dp3653
g16
(lp3654
S'd'
asg18
S'N'
sS'.thisRepN'
p3655
I31
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3656
I6
sS'.thisN'
p3657
I471
sS'.thisIndex'
p3658
I9
sg15
(lp3659
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3660
S'space'
p3661
asg96
I9
sa(dp3662
g16
(lp3663
S'k'
asg18
S'Y'
sS'.thisRepN'
p3664
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3665
I7
sS'.thisN'
p3666
I472
sS'.thisIndex'
p3667
I5
sg15
(lp3668
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3669
S'space'
p3670
asg96
I5
sa(dp3671
g16
(lp3672
S'k'
asg18
S'Y'
sS'.thisRepN'
p3673
I31
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3674
I8
sS'.thisN'
p3675
I473
sS'.thisIndex'
p3676
I3
sg15
(lp3677
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3678
g16
(lp3679
S'k'
asg18
S'Y'
sS'.thisRepN'
p3680
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3681
I9
sS'.thisN'
p3682
I474
sS'.thisIndex'
p3683
I14
sg15
(lp3684
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3685
S'space'
p3686
asg96
I14
sa(dp3687
g16
(lp3688
S'k'
asg18
S'N'
sS'.thisRepN'
p3689
I31
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3690
I10
sS'.thisN'
p3691
I475
sS'.thisIndex'
p3692
I7
sg15
(lp3693
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3694
S'space'
p3695
asg96
I7
sa(dp3696
g16
(lp3697
S'k'
asg18
S'Y'
sS'.thisRepN'
p3698
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3699
I11
sS'.thisN'
p3700
I476
sS'.thisIndex'
p3701
I8
sg15
(lp3702
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3703
S'space'
p3704
asg96
I8
sa(dp3705
g16
(lp3706
S'k'
asg18
S'Y'
sS'.thisRepN'
p3707
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3708
I12
sS'.thisN'
p3709
I477
sS'.thisIndex'
p3710
I1
sg15
(lp3711
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3712
S'space'
p3713
asg96
I1
sa(dp3714
g16
(lp3715
S'k'
asg18
S'Y'
sS'.thisRepN'
p3716
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3717
I13
sS'.thisN'
p3718
I478
sS'.thisIndex'
p3719
I8
sg15
(lp3720
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3721
S'space'
p3722
asg96
I8
sa(dp3723
g16
(lp3724
S'd'
asg18
S'Y'
sS'.thisRepN'
p3725
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3726
I14
sS'.thisN'
p3727
I479
sS'.thisIndex'
p3728
I8
sg15
(lp3729
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3730
S'space'
p3731
asg96
I8
sa(dp3732
g16
(lp3733
S'd'
asg18
S'Y'
sS'.thisRepN'
p3734
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3735
I0
sS'.thisN'
p3736
I480
sS'.thisIndex'
p3737
I14
sg15
(lp3738
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3739
S'space'
p3740
asg96
I14
sa(dp3741
g16
(lp3742
S'k'
asg18
S'N'
sS'.thisRepN'
p3743
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3744
I1
sS'.thisN'
p3745
I481
sS'.thisIndex'
p3746
I3
sg15
(lp3747
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3748
g16
(lp3749
S'k'
asg18
S'Y'
sS'.thisRepN'
p3750
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3751
I2
sS'.thisN'
p3752
I482
sS'.thisIndex'
p3753
I0
sg15
(lp3754
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3755
S'space'
p3756
asg96
I0
sa(dp3757
g16
(lp3758
S'k'
asg18
S'Y'
sS'.thisRepN'
p3759
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3760
I3
sS'.thisN'
p3761
I483
sS'.thisIndex'
p3762
I3
sg15
(lp3763
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3764
S'space'
p3765
asg96
I3
sa(dp3766
g16
(lp3767
S'k'
asg18
S'N'
sS'.thisRepN'
p3768
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3769
I4
sS'.thisN'
p3770
I484
sS'.thisIndex'
p3771
I5
sg15
(lp3772
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3773
g16
(lp3774
S'd'
asg18
S'N'
sS'.thisRepN'
p3775
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3776
I5
sS'.thisN'
p3777
I485
sS'.thisIndex'
p3778
I9
sg15
(lp3779
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3780
g16
(lp3781
S'd'
asg18
S'N'
sS'.thisRepN'
p3782
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3783
I6
sS'.thisN'
p3784
I486
sS'.thisIndex'
p3785
I9
sg15
(lp3786
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3787
g16
(lp3788
S'k'
asg18
S'N'
sS'.thisRepN'
p3789
I32
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3790
I7
sS'.thisN'
p3791
I487
sS'.thisIndex'
p3792
I0
sg15
(lp3793
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3794
S'space'
p3795
asg96
I0
sa(dp3796
g16
(lp3797
S'k'
asg18
S'Y'
sS'.thisRepN'
p3798
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3799
I8
sS'.thisN'
p3800
I488
sS'.thisIndex'
p3801
I4
sg15
(lp3802
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3803
S'space'
p3804
asg96
I4
sa(dp3805
g16
(lp3806
S'k'
asg18
S'N'
sS'.thisRepN'
p3807
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3808
I9
sS'.thisN'
p3809
I489
sS'.thisIndex'
p3810
I4
sg15
(lp3811
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3812
g16
(lp3813
S'd'
asg18
S'N'
sS'.thisRepN'
p3814
I32
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3815
I10
sS'.thisN'
p3816
I490
sS'.thisIndex'
p3817
I7
sg15
(lp3818
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3819
S'space'
p3820
asg96
I7
sa(dp3821
g16
(lp3822
S'k'
asg18
S'N'
sS'.thisRepN'
p3823
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3824
I11
sS'.thisN'
p3825
I491
sS'.thisIndex'
p3826
I6
sg15
(lp3827
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I6
sa(dp3828
g16
(lp3829
S'k'
asg18
S'Y'
sS'.thisRepN'
p3830
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3831
I12
sS'.thisN'
p3832
I492
sS'.thisIndex'
p3833
I6
sg15
(lp3834
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3835
S'space'
p3836
asg96
I6
sa(dp3837
g16
(lp3838
S'k'
asg18
S'N'
sS'.thisRepN'
p3839
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3840
I13
sS'.thisN'
p3841
I493
sS'.thisIndex'
p3842
I5
sg15
(lp3843
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3844
g16
(lp3845
S'd'
asg18
S'Y'
sS'.thisRepN'
p3846
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3847
I14
sS'.thisN'
p3848
I494
sS'.thisIndex'
p3849
I7
sg15
(lp3850
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3851
S'space'
p3852
asg96
I7
sa(dp3853
g16
(lp3854
S'd'
asg18
S'Y'
sS'.thisRepN'
p3855
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3856
I0
sS'.thisN'
p3857
I495
sS'.thisIndex'
p3858
I2
sg15
(lp3859
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3860
S'space'
p3861
asg96
I2
sa(dp3862
g16
(lp3863
S'd'
asg18
S'Y'
sS'.thisRepN'
p3864
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3865
I1
sS'.thisN'
p3866
I496
sS'.thisIndex'
p3867
I5
sg15
(lp3868
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3869
S'space'
p3870
asg96
I5
sa(dp3871
g16
(lp3872
S'd'
asg18
S'N'
sS'.thisRepN'
p3873
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3874
I2
sS'.thisN'
p3875
I497
sS'.thisIndex'
p3876
I12
sg15
(lp3877
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I12
sa(dp3878
g16
(lp3879
S'd'
asg18
S'N'
sS'.thisRepN'
p3880
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3881
I3
sS'.thisN'
p3882
I498
sS'.thisIndex'
p3883
I13
sg15
(lp3884
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I13
sa(dp3885
g16
(lp3886
S'd'
asg18
S'N'
sg22
I38
sS'.thisN'
p3887
I499
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3888
I4
sS'.thisRepN'
p3889
I33
sg21
I48
sS'.thisIndex'
p3890
I11
sg23
I25
sg15
(lp3891
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I11
sa(dp3892
S'.thisIndex'
p3893
I9
sS'.thisRepN'
p3894
I33
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p3895
I5
sS'.thisN'
p3896
I500
sg25
S'Y'
sg24
S'Y'
sg15
Nsg17
g194
sg14
I11
sg96
I9
sa(dp3897
g16
(lp3898
S'k'
asS'.thisIndex'
p3899
I10
sS'.thisRepN'
p3900
I33
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p3901
I6
sS'.thisN'
p3902
I501
sg25
S'Y'
sg15
(lp3903
S'd'
asg17
S'Y'
sg14
I11
sg96
I10
sa(dp3904
g16
(lp3905
S'k'
asg18
S'Y'
sS'.thisRepN'
p3906
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3907
I7
sS'.thisN'
p3908
I502
sg25
S'Y'
sg15
(lp3909
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp3910
S'space'
p3911
asg96
I13
sS'.thisIndex'
p3912
I13
sa(dp3913
g16
(lp3914
S'k'
asg18
S'N'
sS'.thisRepN'
p3915
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3916
I8
sS'.thisN'
p3917
I503
sg25
S'Y'
sg15
(lp3918
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I14
sS'.thisIndex'
p3919
I14
sa(dp3920
g16
(lp3921
S'd'
asg18
S'Y'
sS'.thisRepN'
p3922
I33
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3923
I9
sS'.thisN'
p3924
I504
sg25
S'Y'
sg15
(lp3925
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp3926
S'k'
asg96
I4
sS'.thisIndex'
p3927
I4
sa(dp3928
g16
(lp3929
S'd'
asg18
S'N'
sS'.thisRepN'
p3930
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3931
I10
sS'.thisN'
p3932
I505
sg25
S'Y'
sg15
(lp3933
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p3934
I6
sa(dp3935
g16
(lp3936
S'd'
asg18
S'Y'
sS'.thisRepN'
p3937
I33
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3938
I11
sS'.thisN'
p3939
I506
sg25
S'Y'
sg15
(lp3940
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp3941
S'k'
asg96
I3
sS'.thisIndex'
p3942
I3
sa(dp3943
g16
(lp3944
S'd'
asg18
S'Y'
sS'.thisRepN'
p3945
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3946
I12
sS'.thisN'
p3947
I507
sg25
S'Y'
sg15
(lp3948
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp3949
S'space'
p3950
asg96
I0
sS'.thisIndex'
p3951
I0
sa(dp3952
g18
S'Y'
sS'.thisRepN'
p3953
I33
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3954
I13
sS'.thisN'
p3955
I508
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I11
sg19
Nsg96
I9
sS'.thisIndex'
p3956
I9
sa(dp3957
g16
(lp3958
S'd'
asg18
S'Y'
sS'.thisRepN'
p3959
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3960
I14
sS'.thisN'
p3961
I509
sg25
S'Y'
sg15
(lp3962
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp3963
S'space'
p3964
asg96
I10
sS'.thisIndex'
p3965
I10
sa(dp3966
g16
(lp3967
S'd'
asg18
S'N'
sS'.thisRepN'
p3968
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3969
I0
sS'.thisN'
p3970
I510
sg25
S'Y'
sg15
(lp3971
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I11
sS'.thisIndex'
p3972
I11
sa(dp3973
g16
(lp3974
S'k'
asg18
S'N'
sS'.thisRepN'
p3975
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3976
I1
sS'.thisN'
p3977
I511
sg25
S'Y'
sg15
(lp3978
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p3979
I3
sa(dp3980
g18
S'N'
sS'.thisRepN'
p3981
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3982
I2
sS'.thisN'
p3983
I512
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p3984
I1
sa(dp3985
g16
(lp3986
S'k'
asg18
S'Y'
sS'.thisRepN'
p3987
I34
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3988
I3
sS'.thisN'
p3989
I513
sg25
S'Y'
sg15
(lp3990
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p3991
I8
sa(dp3992
g16
(lp3993
S'k'
asg18
S'N'
sS'.thisRepN'
p3994
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3995
I4
sS'.thisN'
p3996
I514
sg25
S'Y'
sg15
(lp3997
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p3998
I2
sa(dp3999
g16
(lp4000
S'k'
asg18
S'Y'
sS'.thisRepN'
p4001
I34
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4002
I5
sS'.thisN'
p4003
I515
sg25
S'Y'
sg15
(lp4004
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I12
sS'.thisIndex'
p4005
I12
sa(dp4006
g16
(lp4007
S'd'
asg18
S'Y'
sS'.thisRepN'
p4008
I34
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4009
I6
sS'.thisN'
p4010
I516
sg25
S'Y'
sg15
(lp4011
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I5
sS'.thisIndex'
p4012
I5
sa(dp4013
g16
(lp4014
S'k'
asg18
S'N'
sS'.thisRepN'
p4015
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4016
I7
sS'.thisN'
p4017
I517
sg25
S'Y'
sg15
(lp4018
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I13
sS'.thisIndex'
p4019
I13
sa(dp4020
g16
(lp4021
S'd'
asg18
S'Y'
sS'.thisRepN'
p4022
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4023
I8
sS'.thisN'
p4024
I518
sg25
S'Y'
sg15
(lp4025
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4026
S'space'
p4027
asg96
I14
sS'.thisIndex'
p4028
I14
sa(dp4029
g16
(lp4030
S'd'
asg18
S'N'
sS'.thisRepN'
p4031
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4032
I9
sS'.thisN'
p4033
I519
sg25
S'Y'
sg15
(lp4034
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I11
sS'.thisIndex'
p4035
I11
sa(dp4036
g16
(lp4037
S'k'
asg18
S'Y'
sS'.thisRepN'
p4038
I34
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4039
I10
sS'.thisN'
p4040
I520
sg25
S'Y'
sg15
(lp4041
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4042
I0
sa(dp4043
g18
S'Y'
sS'.thisRepN'
p4044
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4045
I11
sS'.thisN'
p4046
I521
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I11
sg19
(lp4047
S'space'
p4048
asg96
I8
sS'.thisIndex'
p4049
I8
sa(dp4050
g16
(lp4051
S'd'
asg18
S'Y'
sS'.thisRepN'
p4052
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4053
I12
sS'.thisN'
p4054
I522
sg25
S'Y'
sg15
(lp4055
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4056
S'space'
p4057
asg96
I9
sS'.thisIndex'
p4058
I9
sa(dp4059
g16
(lp4060
S'k'
asg18
S'Y'
sS'.thisRepN'
p4061
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4062
I13
sS'.thisN'
p4063
I523
sg25
S'Y'
sg15
(lp4064
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4065
S'space'
p4066
asg96
I11
sS'.thisIndex'
p4067
I11
sa(dp4068
g16
(lp4069
S'd'
asg18
S'Y'
sS'.thisRepN'
p4070
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4071
I14
sS'.thisN'
p4072
I524
sg25
S'Y'
sg15
(lp4073
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4074
S'space'
p4075
asg96
I13
sS'.thisIndex'
p4076
I13
sa(dp4077
g18
S'Y'
sS'.thisRepN'
p4078
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4079
I0
sS'.thisN'
p4080
I525
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I11
sg19
(lp4081
S'space'
p4082
asg96
I3
sS'.thisIndex'
p4083
I3
sa(dp4084
g16
(lp4085
S'd'
asg18
S'Y'
sS'.thisRepN'
p4086
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4087
I1
sS'.thisN'
p4088
I526
sg25
S'Y'
sg15
(lp4089
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4090
S'space'
p4091
asg96
I5
sS'.thisIndex'
p4092
I5
sa(dp4093
g18
S'N'
sS'.thisRepN'
p4094
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4095
I2
sS'.thisN'
p4096
I527
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I11
sg19
Nsg96
I12
sS'.thisIndex'
p4097
I12
sa(dp4098
g16
(lp4099
S'k'
asg18
S'N'
sS'.thisRepN'
p4100
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4101
I3
sS'.thisN'
p4102
I528
sg25
S'Y'
sg15
(lp4103
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4104
I4
sa(dp4105
g16
(lp4106
S'k'
asg18
S'N'
sS'.thisRepN'
p4107
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4108
I4
sS'.thisN'
p4109
I529
sg25
S'Y'
sg15
(lp4110
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4111
I1
sa(dp4112
g18
S'Y'
sS'.thisRepN'
p4113
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4114
I5
sS'.thisN'
p4115
I530
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I11
sg19
(lp4116
S'space'
p4117
asg96
I0
sS'.thisIndex'
p4118
I0
sa(dp4119
g16
(lp4120
S'k'
asg18
S'Y'
sS'.thisRepN'
p4121
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4122
I6
sS'.thisN'
p4123
I531
sg25
S'Y'
sg15
(lp4124
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4125
S'space'
p4126
asg96
I11
sS'.thisIndex'
p4127
I11
sa(dp4128
g18
S'Y'
sS'.thisRepN'
p4129
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4130
I7
sS'.thisN'
p4131
I532
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I11
sg19
(lp4132
S'space'
p4133
asg96
I4
sS'.thisIndex'
p4134
I4
sa(dp4135
g16
(lp4136
S'k'
asg18
S'Y'
sS'.thisRepN'
p4137
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4138
I8
sS'.thisN'
p4139
I533
sg25
S'Y'
sg15
(lp4140
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4141
S'space'
p4142
asg96
I6
sS'.thisIndex'
p4143
I6
sa(dp4144
g16
(lp4145
S'd'
asg18
S'Y'
sS'.thisRepN'
p4146
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4147
I9
sS'.thisN'
p4148
I534
sg25
S'Y'
sg15
(lp4149
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4150
S'space'
p4151
asg96
I5
sS'.thisIndex'
p4152
I5
sa(dp4153
g16
(lp4154
S'k'
asg18
S'N'
sS'.thisRepN'
p4155
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4156
I10
sS'.thisN'
p4157
I535
sg25
S'Y'
sg15
(lp4158
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I5
sS'.thisIndex'
p4159
I5
sa(dp4160
g18
S'N'
sS'.thisRepN'
p4161
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4162
I11
sS'.thisN'
p4163
I536
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4164
I0
sa(dp4165
g18
S'N'
sS'.thisRepN'
p4166
I35
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4167
I12
sS'.thisN'
p4168
I537
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I11
sg19
(lp4169
S'space'
p4170
asg96
I14
sS'.thisIndex'
p4171
I14
sa(dp4172
g16
(lp4173
S'd'
asg18
S'Y'
sS'.thisRepN'
p4174
I35
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4175
I13
sS'.thisN'
p4176
I538
sg25
S'Y'
sg15
(lp4177
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4178
I2
sa(dp4179
g16
(lp4180
S'k'
asg18
S'Y'
sS'.thisRepN'
p4181
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4182
I14
sS'.thisN'
p4183
I539
sg25
S'Y'
sg15
(lp4184
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4185
S'space'
p4186
asg96
I14
sS'.thisIndex'
p4187
I14
sa(dp4188
g16
(lp4189
S'd'
asg18
S'N'
sS'.thisRepN'
p4190
I36
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4191
I0
sS'.thisN'
p4192
I540
sg25
S'Y'
sg15
(lp4193
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4194
S'space'
p4195
asg96
I10
sS'.thisIndex'
p4196
I10
sa(dp4197
g16
(lp4198
S'd'
asg18
S'Y'
sS'.thisRepN'
p4199
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4200
I1
sS'.thisN'
p4201
I541
sg25
S'Y'
sg15
(lp4202
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4203
S'space'
p4204
asg96
I3
sS'.thisIndex'
p4205
I3
sa(dp4206
g16
(lp4207
S'k'
asg18
S'N'
sS'.thisRepN'
p4208
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4209
I2
sS'.thisN'
p4210
I542
sg25
S'Y'
sg15
(lp4211
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4212
I1
sa(dp4213
g16
(lp4214
S'd'
asg18
S'N'
sS'.thisRepN'
p4215
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4216
I3
sS'.thisN'
p4217
I543
sg25
S'Y'
sg15
(lp4218
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I13
sS'.thisIndex'
p4219
I13
sa(dp4220
g16
(lp4221
S'k'
asg18
S'N'
sS'.thisRepN'
p4222
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4223
I4
sS'.thisN'
p4224
I544
sg25
S'Y'
sg15
(lp4225
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p4226
I3
sa(dp4227
g16
(lp4228
S'd'
asg18
S'N'
sS'.thisRepN'
p4229
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4230
I5
sS'.thisN'
p4231
I545
sg25
S'Y'
sg15
(lp4232
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4233
I0
sa(dp4234
g16
(lp4235
S'd'
asg18
S'N'
sS'.thisRepN'
p4236
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4237
I6
sS'.thisN'
p4238
I546
sg25
S'Y'
sg15
(lp4239
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I13
sS'.thisIndex'
p4240
I13
sa(dp4241
g16
(lp4242
S'k'
asg18
S'N'
sS'.thisRepN'
p4243
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4244
I7
sS'.thisN'
p4245
I547
sg25
S'Y'
sg15
(lp4246
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I6
sS'.thisIndex'
p4247
I6
sa(dp4248
g16
(lp4249
S'd'
asg18
S'N'
sS'.thisRepN'
p4250
I36
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4251
I8
sS'.thisN'
p4252
I548
sg25
S'Y'
sg15
(lp4253
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4254
S'space'
p4255
asg96
I3
sS'.thisIndex'
p4256
I3
sa(dp4257
g23
I25
sg18
S'N'
sg22
I36
sg26
S'Y'
sS'.thisN'
p4258
I549
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4259
I9
sS'.thisRepN'
p4260
I36
sg21
I30
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I11
sg19
(lp4261
S'space'
p4262
asg96
I6
sS'.thisIndex'
p4263
I6
sa(dp4264
g16
(lp4265
S'd'
asS'.thisIndex'
p4266
I4
sS'.thisRepN'
p4267
I36
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4268
I10
sS'.thisN'
p4269
I550
sg25
S'Y'
sg15
(lp4270
S'k'
asg17
S'Y'
sg14
I12
sg96
I4
sa(dp4271
S'.thisIndex'
p4272
I2
sS'.thisRepN'
p4273
I36
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4274
I11
sS'.thisN'
p4275
I551
sg25
S'Y'
sg15
Nsg17
g194
sg14
I12
sg96
I2
sa(dp4276
g16
(lp4277
S'k'
asg18
S'Y'
sS'.thisRepN'
p4278
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4279
I12
sS'.thisN'
p4280
I552
sg25
S'Y'
sg15
(lp4281
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4282
S'space'
p4283
asg96
I5
sS'.thisIndex'
p4284
I5
sa(dp4285
g16
(lp4286
S'k'
asg18
S'N'
sS'.thisRepN'
p4287
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4288
I13
sS'.thisN'
p4289
I553
sg25
S'Y'
sg15
(lp4290
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I11
sS'.thisIndex'
p4291
I11
sa(dp4292
g16
(lp4293
S'k'
asg18
S'N'
sS'.thisRepN'
p4294
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4295
I14
sS'.thisN'
p4296
I554
sg25
S'Y'
sg15
(lp4297
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I12
sS'.thisIndex'
p4298
I12
sa(dp4299
g16
(lp4300
S'k'
asg18
S'Y'
sS'.thisRepN'
p4301
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4302
I0
sS'.thisN'
p4303
I555
sg25
S'Y'
sg15
(lp4304
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4305
I3
sa(dp4306
g16
(lp4307
S'd'
asg18
S'Y'
sS'.thisRepN'
p4308
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4309
I1
sS'.thisN'
p4310
I556
sg25
S'Y'
sg15
(lp4311
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4312
S'space'
p4313
asg96
I4
sS'.thisIndex'
p4314
I4
sa(dp4315
g16
(lp4316
S'd'
asg18
S'N'
sS'.thisRepN'
p4317
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4318
I2
sS'.thisN'
p4319
I557
sg25
S'Y'
sg15
(lp4320
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4321
S'space'
p4322
asg96
I7
sS'.thisIndex'
p4323
I7
sa(dp4324
g16
(lp4325
S'd'
asg18
S'N'
sS'.thisRepN'
p4326
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4327
I3
sS'.thisN'
p4328
I558
sg25
S'Y'
sg15
(lp4329
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4330
I4
sa(dp4331
g16
(lp4332
S'd'
asg18
S'Y'
sS'.thisRepN'
p4333
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4334
I4
sS'.thisN'
p4335
I559
sg25
S'Y'
sg15
(lp4336
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I8
sS'.thisIndex'
p4337
I8
sa(dp4338
g18
S'Y'
sS'.thisRepN'
p4339
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4340
I5
sS'.thisN'
p4341
I560
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I12
sg19
(lp4342
S'space'
p4343
asg96
I4
sS'.thisIndex'
p4344
I4
sa(dp4345
g16
(lp4346
S'k'
asg18
S'N'
sS'.thisRepN'
p4347
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4348
I6
sS'.thisN'
p4349
I561
sg25
S'Y'
sg15
(lp4350
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4351
S'space'
p4352
asg96
I9
sS'.thisIndex'
p4353
I9
sa(dp4354
g16
(lp4355
S'd'
asg18
S'Y'
sS'.thisRepN'
p4356
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4357
I7
sS'.thisN'
p4358
I562
sg25
S'Y'
sg15
(lp4359
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4360
S'space'
p4361
asg96
I2
sS'.thisIndex'
p4362
I2
sa(dp4363
g16
(lp4364
S'k'
asg18
S'Y'
sS'.thisRepN'
p4365
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4366
I8
sS'.thisN'
p4367
I563
sg25
S'Y'
sg15
(lp4368
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4369
S'space'
p4370
asg96
I5
sS'.thisIndex'
p4371
I5
sa(dp4372
g16
(lp4373
S'k'
asg18
S'Y'
sS'.thisRepN'
p4374
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4375
I9
sS'.thisN'
p4376
I564
sg25
S'Y'
sg15
(lp4377
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I12
sS'.thisIndex'
p4378
I12
sa(dp4379
g16
(lp4380
S'k'
asg18
S'Y'
sS'.thisRepN'
p4381
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4382
I10
sS'.thisN'
p4383
I565
sg25
S'Y'
sg15
(lp4384
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4385
S'space'
p4386
asg96
I8
sS'.thisIndex'
p4387
I8
sa(dp4388
g16
(lp4389
S'k'
asg18
S'N'
sS'.thisRepN'
p4390
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4391
I11
sS'.thisN'
p4392
I566
sg25
S'Y'
sg15
(lp4393
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4394
S'j'
asg96
I13
sS'.thisIndex'
p4395
I13
sa(dp4396
g18
S'Y'
sS'.thisRepN'
p4397
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4398
I12
sS'.thisN'
p4399
I567
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I12
sg19
(lp4400
S'space'
p4401
asg96
I3
sS'.thisIndex'
p4402
I3
sa(dp4403
g16
(lp4404
S'd'
asg18
S'N'
sS'.thisRepN'
p4405
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4406
I13
sS'.thisN'
p4407
I568
sg25
S'Y'
sg15
(lp4408
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I8
sS'.thisIndex'
p4409
I8
sa(dp4410
g18
S'Y'
sS'.thisRepN'
p4411
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4412
I14
sS'.thisN'
p4413
I569
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I12
sg19
Nsg96
I12
sS'.thisIndex'
p4414
I12
sa(dp4415
g16
(lp4416
S'k'
asg18
S'Y'
sS'.thisRepN'
p4417
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4418
I0
sS'.thisN'
p4419
I570
sg25
S'Y'
sg15
(lp4420
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4421
S'space'
p4422
asg96
I5
sS'.thisIndex'
p4423
I5
sa(dp4424
g16
(lp4425
S'd'
asg18
S'Y'
sS'.thisRepN'
p4426
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4427
I1
sS'.thisN'
p4428
I571
sg25
S'Y'
sg15
(lp4429
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4430
S'space'
p4431
asg96
I2
sS'.thisIndex'
p4432
I2
sa(dp4433
g16
(lp4434
S'd'
asg18
S'N'
sS'.thisRepN'
p4435
I38
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4436
I2
sS'.thisN'
p4437
I572
sg25
S'Y'
sg15
(lp4438
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4439
S'space'
p4440
asg96
I8
sS'.thisIndex'
p4441
I8
sa(dp4442
g16
(lp4443
S'd'
asg18
S'N'
sS'.thisRepN'
p4444
I38
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4445
I3
sS'.thisN'
p4446
I573
sg25
S'Y'
sg15
(lp4447
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4448
S'space'
p4449
asg96
I3
sS'.thisIndex'
p4450
I3
sa(dp4451
g16
(lp4452
S'd'
asg18
S'N'
sS'.thisRepN'
p4453
I38
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4454
I4
sS'.thisN'
p4455
I574
sg25
S'Y'
sg15
(lp4456
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4457
S'space'
p4458
asg96
I2
sS'.thisIndex'
p4459
I2
sa(dp4460
g16
(lp4461
S'd'
asg18
S'N'
sS'.thisRepN'
p4462
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4463
I5
sS'.thisN'
p4464
I575
sg25
S'Y'
sg15
(lp4465
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4466
I4
sa(dp4467
g16
(lp4468
S'd'
asg18
S'N'
sS'.thisRepN'
p4469
I38
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4470
I6
sS'.thisN'
p4471
I576
sg25
S'Y'
sg15
(lp4472
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4473
S'space'
p4474
asg96
I0
sS'.thisIndex'
p4475
I0
sa(dp4476
g16
(lp4477
S'd'
asg18
S'Y'
sS'.thisRepN'
p4478
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4479
I7
sS'.thisN'
p4480
I577
sg25
S'Y'
sg15
(lp4481
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4482
S'space'
p4483
asg96
I14
sS'.thisIndex'
p4484
I14
sa(dp4485
g16
(lp4486
S'd'
asg18
S'Y'
sS'.thisRepN'
p4487
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4488
I8
sS'.thisN'
p4489
I578
sg25
S'Y'
sg15
(lp4490
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4491
S'space'
p4492
asg96
I12
sS'.thisIndex'
p4493
I12
sa(dp4494
g16
(lp4495
S'd'
asg18
S'N'
sS'.thisRepN'
p4496
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4497
I9
sS'.thisN'
p4498
I579
sg25
S'Y'
sg15
(lp4499
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4500
I0
sa(dp4501
g18
S'Y'
sS'.thisRepN'
p4502
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4503
I10
sS'.thisN'
p4504
I580
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I12
sg19
(lp4505
S'space'
p4506
asg96
I5
sS'.thisIndex'
p4507
I5
sa(dp4508
g16
(lp4509
S'd'
asg18
S'Y'
sS'.thisRepN'
p4510
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4511
I11
sS'.thisN'
p4512
I581
sg25
S'Y'
sg15
(lp4513
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4514
S'space'
p4515
asg96
I10
sS'.thisIndex'
p4516
I10
sa(dp4517
g16
(lp4518
S'k'
asg18
S'Y'
sS'.thisRepN'
p4519
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4520
I12
sS'.thisN'
p4521
I582
sg25
S'Y'
sg15
(lp4522
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4523
S'space'
p4524
asg96
I2
sS'.thisIndex'
p4525
I2
sa(dp4526
g16
(lp4527
S'd'
asg18
S'Y'
sS'.thisRepN'
p4528
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4529
I13
sS'.thisN'
p4530
I583
sg25
S'Y'
sg15
(lp4531
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4532
S'space'
p4533
asg96
I9
sS'.thisIndex'
p4534
I9
sa(dp4535
g16
(lp4536
S'd'
asg18
S'Y'
sS'.thisRepN'
p4537
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4538
I14
sS'.thisN'
p4539
I584
sg25
S'Y'
sg15
(lp4540
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4541
S'space'
p4542
asg96
I7
sS'.thisIndex'
p4543
I7
sa(dp4544
g16
(lp4545
S'd'
asg18
S'N'
sS'.thisRepN'
p4546
I39
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4547
I0
sS'.thisN'
p4548
I585
sg25
S'Y'
sg15
(lp4549
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4550
S'space'
p4551
asg96
I9
sS'.thisIndex'
p4552
I9
sa(dp4553
g16
(lp4554
S'd'
asg18
S'Y'
sS'.thisRepN'
p4555
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4556
I1
sS'.thisN'
p4557
I586
sg25
S'Y'
sg15
(lp4558
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4559
S'space'
p4560
asg96
I0
sS'.thisIndex'
p4561
I0
sa(dp4562
g16
(lp4563
S'k'
asg18
S'Y'
sS'.thisRepN'
p4564
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4565
I2
sS'.thisN'
p4566
I587
sg25
S'Y'
sg15
(lp4567
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4568
S'space'
p4569
asg96
I10
sS'.thisIndex'
p4570
I10
sa(dp4571
g16
(lp4572
S'k'
asg18
S'Y'
sS'.thisRepN'
p4573
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4574
I3
sS'.thisN'
p4575
I588
sg25
S'Y'
sg15
(lp4576
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4577
S'space'
p4578
asg96
I9
sS'.thisIndex'
p4579
I9
sa(dp4580
g16
(lp4581
S'd'
asg18
S'Y'
sS'.thisRepN'
p4582
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4583
I4
sS'.thisN'
p4584
I589
sg25
S'Y'
sg15
(lp4585
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4586
S'space'
p4587
asg96
I8
sS'.thisIndex'
p4588
I8
sa(dp4589
g16
(lp4590
S'd'
asg18
S'N'
sS'.thisRepN'
p4591
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4592
I5
sS'.thisN'
p4593
I590
sg25
S'Y'
sg15
(lp4594
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4595
I9
sa(dp4596
g16
(lp4597
S'k'
asg18
S'N'
sS'.thisRepN'
p4598
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4599
I6
sS'.thisN'
p4600
I591
sg25
S'Y'
sg15
(lp4601
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I6
sS'.thisIndex'
p4602
I6
sa(dp4603
g16
(lp4604
S'd'
asg18
S'N'
sS'.thisRepN'
p4605
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4606
I7
sS'.thisN'
p4607
I592
sg25
S'Y'
sg15
(lp4608
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I12
sS'.thisIndex'
p4609
I12
sa(dp4610
g16
(lp4611
S'd'
asg18
S'N'
sS'.thisRepN'
p4612
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4613
I8
sS'.thisN'
p4614
I593
sg25
S'Y'
sg15
(lp4615
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I12
sS'.thisIndex'
p4616
I12
sa(dp4617
g18
S'Y'
sS'.thisRepN'
p4618
I39
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4619
I9
sS'.thisN'
p4620
I594
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I12
sg19
(lp4621
S'k'
asg96
I13
sS'.thisIndex'
p4622
I13
sa(dp4623
g16
(lp4624
S'd'
asg18
S'N'
sS'.thisRepN'
p4625
I39
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4626
I10
sS'.thisN'
p4627
I595
sg25
S'Y'
sg15
(lp4628
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4629
S'k'
asg96
I9
sS'.thisIndex'
p4630
I9
sa(dp4631
g16
(lp4632
S'k'
asg18
S'N'
sS'.thisRepN'
p4633
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4634
I11
sS'.thisN'
p4635
I596
sg25
S'Y'
sg15
(lp4636
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4637
I2
sa(dp4638
g18
S'N'
sS'.thisRepN'
p4639
I39
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4640
I12
sS'.thisN'
p4641
I597
sg25
S'Y'
sg15
Nsg30
g31
sg17
g194
sg14
I12
sg19
(lp4642
S'k'
asg96
I7
sS'.thisIndex'
p4643
I7
sa(dp4644
g16
(lp4645
S'd'
asg18
S'N'
sS'.thisRepN'
p4646
I39
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4647
I13
sS'.thisN'
p4648
I598
sg25
S'Y'
sg15
(lp4649
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4650
S'k'
asg96
I9
sS'.thisIndex'
p4651
I9
sa(dp4652
g16
(lp4653
S'd'
asg18
S'N'
sg22
I32
sg26
S'Y'
sS'.thisN'
p4654
I599
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4655
I14
sS'.thisRepN'
p4656
I39
sg21
I38
sg25
S'Y'
sg23
I25
sg15
(lp4657
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I6
sS'.thisIndex'
p4658
I6
sasS'loops'
p4659
(lp4660
g1
(g36
g3
NtRp4661
(dp4662
g39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4663
sg41
(lp4664
sg42
I73341488
sg10
S''
sg6
g43
sg44
I1
sg27
I01
sg28
Nsg45
g1
(g46
g47
(dp4665
g49
g50
(g51
g52
g53
S'b'
tRp4666
(I1
(I600
I1
tg56
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg57
g50
(g51
g52
g53
S'b'
tRp4667
(I1
(I600
I1
tg56
I00
S'\x00\x00\xe3C\x00\x80\xc3C\x00\x80\x9bC\x00\x00[C\x00\x00\xe6C\x00\x00\x88C\x00\x80\xfcC\x00\x00\xb4B\x00\x00\x02C\x00\x00\xacC\x00\x00mC\x00\x00\x8eB\x00\x00iC\x00\x004C\x00\x00LB\x00\x00cC\x00\x80\xf8C\x00\x00\xcfC\x00\x00\x98C\x00\x00\xb3C\x00\x00\x1fC\x00\x00`B\x00\x00\xd9C\x00\x003C\x00\x80\xcdC\x00\x00\xc2C\x00\x00\x18C\x00\x80\xf7C\x00\x00\xa2C\x00\x00=C\x00\x005C\x00\x80\xbeC\x00\x00\x1eC\x00\x80\x8dC\x00@\x10D\x00\x80\x91C\x00\x00\xffC\x00\x00\xc0C\x00\x00\nC\x00\x00\x90B\x00\x80\x99C\x00\x00QC\x00\xc0\x0fD\x00@\x07D\x00\x00\xeeB\x00\x80\x8aC\x00\x80\x0cD\x00\x00\xb6B\x00\x00\xc2B\x00\x00\x13C\x00\x00\x1cC\x00\x00\x14C\x00\x00\xaeC\x00\x00\xfaC\x00\x80\xfeC\x00\x80\x9fC\x00\x00\x0fD\x00\xc0\tD\x00\x00 A\x00\x00\x10A\x00\x00\xc7C\x00\x00\x7fC\x00\x00\xb8A\x00\x80\xd5C\x00\x00!C\x00\x00\xc0A\x00\x80\xa5C\x00\x80\xfdC\x00\x00\xafC\x00\x00\x9aB\x00\x00\xf3C\x00\x80\x90C\x00\xc0\x0eD\x00\x00GC\x00\x00\xd6B\x00\x00tC\x00\x00\x90C\x00\x00\xfeB\x00\x80\xe9C\x00\x00\xbdC\x00\x00/C\x00\x80\xddC\x00@\x12D\x00\x80\x15D\x00\x00\x92B\x00\x00\x99C\x00\x00\x07C\x00\x80\xc8C\x00\x00\xc5C\x00\xc0\rD\x00\x80\x0fD\x00\x00\xe0A\x00\x80\x84C\x00\x80\xd3C\x00\x00\x18B\x00\x00\xa7C\x00\x00\xf5C\x00\x00\xb8B\x00\x00\tD\x00\x00\xf8C\x00\x00oC\x00\x00yC\x00\x00\x14B\x00\x00\x94C\x00\x00nC\x00\x000C\x00\x00\xaeB\x00\x80\xe8C\x00\x00\xa1C\x00\x00\x83C\x00\x00\x88A\x00\x00\x86B\x00\x00\x07D\x00\x80\x10D\x00\xc0\x0bD\x00\x00\x00@\x00\x00\xd0C\x00\x00\xfcC\x00\x80\xc5C\x00\x80\x12D\x00\x00\xd1C\x00\x00\xf0C\x00\x00*C\x00\x00wC\x00\x80\xacC\x00\x00\xd5C\x00\x00<C\x00\x00.C\x00\x00\xa4B\x00\x00\x14D\x00\x00\xbeC\x00\x00\xdcB\x00\x00\x84B\x00\x00\x96B\x00\x00\xe8A\x00\x00\x17C\x00\x00\xc8C\x00\x00MC\x00\x80\xd7C\x00@\x0bD\x00\x00\x05D\x00@\x14D\x00\x00\x04B\x00\x00dC\x00\x00\xc8B\x00@\x0fD\x00\x00DC\x00\x00xB\x00\x00\xa0@\x00\x80\xe7C\x00\xc0\x10D\x00\x00EC\x00\x80\xb2C\x00\x00\x03D\x00\x80\xc2C\x00\x00\xeaB\x00\x00\xd4B\x00\x00@C\x00\x00@@\x00\x00\x80C\x00\x80\xc7C\x00\x00\xc4B\x00\x00\xbcB\x00\x80\xe4C\x00\x00\xdcC\x00\x00\x9dC\x00\x80\xb3C\x00\x00\xd8C\x00\x00\xf9C\x00\x00\rC\x00\x00\x0eD\x00\x00\x11D\x00\x80\xd0C\x00\x00\xa3C\x00\x00\xccB\x00\x80\xe2C\x00\x00\x1aC\x00\x00\xbaC\x00\x00\x08B\x00\x00\xa5C\x00\x80\xa0C\x00\x80\x08D\x00\x80\x02D\x00\x00:C\x00\xc0\x14D\x00\x80\x03D\x00\x00HB\x00\x00`A\x00\x00\x0bD\x00\x00KC\x00\xc0\x07D\x00\x80\xd4C\x00\x00uC\x00\x00\xa0B\x00\x80\xa3C\x00\x00\x97C\x00\x80\xabC\x00\x00"C\x00\x00AC\x00\xc0\x01D\x00\x00 C\x00\xc0\x15D\x00\x00aC\x00\x00\x9fC\x00\x00\xd4C\x00\x00\x8cB\x00\x00\x0eC\x00\x00\x0cD\x00\x80\xccC\x00\x80\x89C\x00\x80\xb0C\x00\x00\xfeC\x00\x80\xe1C\x00\x00LC\x00\x80\xebC\x00\x80\xe0C\x00\x00\xdfC\x00\x80\xb7C\x00\x00\xcdC\x00\x00?C\x00\x80\tD\x00\x00\x00\x00\x00\x80\xefC\x00\x00\x9eB\x00\x007C\x00\x00pC\x00\x80\xb9C\x00\x00\x0cB\x00\x00\x12D\x00\x80\x82C\x00\x80\xceC\x00\x002C\x00\x80\x13D\x00\x00\xa2B\x00\x00\x89C\x00\x80\xf9C\x00\x00$B\x00\x00\x86C\x00\x80\xf2C\x00\x00\xc0@\x00\x00\xddC\x00\x00\xf6B\x00\x00\xcaB\x00\x80\xbaC\x00\x80\x01D\x00\x80\x0bD\x00\x00NC\x00\x00\xadC\x00\x00\x82C\x00\x00rC\x00\x00\xe0@\x00\x00PB\x00\x80\xbbC\x00\x00\xacB\x00\x00\x1bC\x00\x00\xb0C\x00\x00FC\x00\x00\x9eC\x00\x00\x10C\x00\x80\xaeC\x00\x00BC\x00\x00pB\x00\x00\x0bC\x00\x00CC\x00\x80\x9eC\x00\x80\x05D\x00\x00\x98A\x00@\x08D\x00\x80\x06D\x00\x00\xebC\x00\x00\xb5C\x00\x00`C\x00\xc0\x11D\x00\x00@B\x00\x00\xf0B\x00\x00TB\x00@\x03D\x00\x00\xbbC\x00\x80\xcbC\x00\x00\x06C\x00\x80\xd8C\x00\x00\xb2C\x00@\x11D\x00\x00\xfdC\x00\x00\x01D\x00@\x13D\x00\x00WC\x00\x00 B\x00\x80\xc9C\x00\x00\xd8B\x00\x00\x80A\x00\x00\x10D\x00\x00;C\x00\x00\xc6B\x00\x80\x9dC\x00\x00\xb6C\x00\x00$C\x00\x00\x00D\x00\x00\'C\x00\x00\xf7C\x00@\x01D\x00\x00\xfaB\x00\xc0\x04D\x00\xc0\x02D\x00\x80\xc6C\x00\x00\x13D\x00\x00vC\x00\x00\xd0A\x00\x80\xdcC\x00\x00\x91C\x00\x80\xe3C\x00\x00\x04D\x00\x80\xf4C\x00\x00kC\x00\x80\xd1C\x00\x80\xc1C\x00\x00\xb1C\x00\x00\xaaB\x00\x80\xdeC\x00\x00\x05C\x00\xc0\nD\x00\x80\xcfC\x00\x80\x8fC\x00\x00PA\x00\x00\xefC\x00\x80\x94C\x00\x00lC\x00\x00\x93C\x00\xc0\x0cD\x00\x00jC\x00\x00\x98B\x00\x006C\x00\x00gC\x00\x00dB\x00\x00\xe1C\x00\x00\xaaC\x00\x00qC\x00\x80\rD\x00\x00\x10B\x00\x80\xbdC\x00\x80\xeaC\x00@\x00D\x00\x00\xa8B\x00\x00|C\x00\x00+C\x00\x80\nD\x00\x00-C\x00\x00lB\x00\x00\xa0C\x00\x00\xeaC\x00\x00\xf4C\x00\x00\xccC\x00\x00\xecC\x00\x80\x00D\x00\x00\xb0A\x00\x00VC\x00\x00\xdaB\x00\x00\xe9C\x00\x00\xc6C\x00\x00HC\x00\x00}C\x00@\x04D\x00\x00PC\x00\x00^C\x00\x00\xe8C\x00\x00\x8fC\x00\x80\x9cC\x00\x80\xafC\x00\x00\xe0C\x00\x00\xe4C\x00\x80\x97C\x00\x00\x00B\x00\x00\x85C\x00\x00\xdeB\x00\x00\x94B\x00\x80\xdbC\x00\x00\x9aC\x00\xc0\x00D\x00\x00\x1cB\x00\x00(C\x00\x00\xe7C\x00\x80\xbcC\x00\x80\xdfC\x00\x00XC\x00\x00>C\x00\x00\xbcC\x00\x00\x0cC\x00\x00\xb9C\x00\x00\xceC\x00\x80\x87C\x00\x80\xc4C\x00\x00\x19C\x00\x00\xd7C\x00@\nD\x00\x80\xa7C\x00\x00\x8eC\x00\x80\xd9C\x00\xc0\x05D\x00\x00\xb4C\x00\x00\x1dC\x00\x00\xeeC\x00\x00\x08D\x00\x80\xd6C\x00\x00DB\x00\x00\xbaB\x00\x00\xc9C\x00\x80\xa9C\x00\x00\xc0B\x00\x00\x80B\x00\xc0\x13D\x00\x80\xf3C\x00\x00\xfbC\x00\x80\xffC\x00\x00\xdaC\x00\x00{C\x00\x00)C\x00\x80\x85C\x00\x00RC\x00\x80\x92C\x00\x00\x01C\x00\x00\xa0A\x00\x00pA\x00\x00,C\x00\x80\xa1C\x00\x00\xf2C\x00\x00\x90A\x00\x00\xe8B\x00\x80\xa8C\x00\x80\xf0C\x00\x80\x81C\x00\x00\x8aC\x00\x00\\C\x00\x00\x15C\x00\xc0\x03D\x00\x00XB\x00\x00\x80?\x00\x80\x04D\x00\x80\xdaC\x00\x00\xc4C\x00\x80\xedC\x00\x80\x8bC\x00\x00\\B\x00\x00YC\x00\x00\xd3C\x00\x00\nD\x00@\x0eD\x00\x00OC\x00\x00\xabC\x00\x00\x15D\x00\x00zC\x00\x000B\x00\x00\xb8C\x00@\x06D\x00\x80\xc0C\x00\x00\x8dC\x00\x00\xcbC\x00\x80\x8cC\x00\x00\xedC\x00\x00\xf2B\x00\xc0\x08D\x00\x80\x88C\x00\x00_C\x00\x00\xa8C\x00\x80\xf1C\x00\x00hB\x00\x80\x86C\x00\x00\x96C\x00\x00hC\x00\x00\x04C\x00\x00\x12C\x00\x00\x9cC\x00\x00\xe0B\x00\x00ZC\x00\x00\x03C\x00\x80\xaaC\x00\x80\xa6C\x00\x00\xa4C\x00\x00\xf4B\x00\x00\xb0B\x00\x80\x93C\x00\x80\xb8C\x00\x00\xd2B\x00\x00\xfcB\x00\x009C\x00\x80\xd2C\x00\x00\xc3C\x00\x00\xb7C\x00\x00\x06D\x00\x00\rD\x00\x00\xf6C\x00\x00\x88B\x00\x80\x11D\x00\x00\xceB\x00\x00\xe2C\x00\x00\xf1C\x00\x00\x9bC\x00\x00fC\x00\x80\xb1C\x00\x00tB\x00\x00\xcaC\x00\x00\x82B\x00\x80\xfaC\x00\x00%C\x00\x00\x11C\x00\x00\x92C\x00\x80\x98C\x00\x00\xa6B\x00\x00\x80@\x00\x80\xfbC\x00\x00\x08C\x00\x00\x8cC\x00\x80\xb4C\x00\x80\xf6C\x00\x00\xe4B\x00\x00SC\x00\x00\x81C\x00@\x05D\x00\x80\x8eC\x00\x00\x16C\x00@\x02D\x00\x00\xdbC\x00\x00\x84C\x00\x00\xd6C\x00\x80\x95C\x00\x00\xe6B\x00\x80\xcaC\x00\x00\x8bC\x00\x00#C\x00\x00\x02D\x00\x00TC\x00\x00UC\x00\x00\xf8B\x00\x00\x8aB\x00\x00\xbfC\x00\x00\x87C\x00\x80\xeeC\x00\x00\xe2B\x00\x00\xd2C\x00\x008B\x00\x80\x0eD\x00\xc0\x06D\x00\x00sC\x00\x80\x80C\x00\x00\xf8A\x00\x00bC\x00\x00&C\x00\x00JC\x00\x00\xe5C\x00\x80\x83C\x00\x00|B\x00\x00\xc8A\x00\x00\xa6C\x00\x80\x9aC\x00\x00\xc1C\x00\x00xC\x00\x00\tC\x00\x008C\x00\x00\xdeC\x00\x00\x00C\x00\x00<B\x00\x80\xe5C\x00@\x15D\x00\x00\x00A\x00\x00\xd8A\x00@\tD\x00\x00\xbeB\x00\x80\xbfC\x00\x00(B\x00\x00,B\x00@\x0cD\x00\x00\xa8A\x00\x80\xf5C\x00\x80\xb5C\x00\x001C\x00\x80\x96C\x00\x80\x14D\x00\x80\x07D\x00\x00~C\x00\x00\xb2B\x00@\rD\x00\x004B\x00\x00IC\x00\x00\xa9C\x00\x00@A\x00\x00\x9cB\x00\x80\xecC\x00\x00\xd0B\x00\x00]C\x00\x00\x95C\x00\x80\xa4C\x00\x00\xf0A\x00\x00\xecB\x00\x000A\x00\x80\xadC\x00\x00\x0fC\x00\x80\xe6C\x00\x80\xa2C\x00\x00eC\x00\xc0\x12D\x00\x80\xb6C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4668
(dp4669
g61
(dp4670
g49
I01
sg57
I01
ssg63
g4661
sg64
(lp4671
g49
ag57
asg66
(lp4672
I600
aI1
asbsg68
S'random'
p4673
sg70
g71
(g52
(I0
tS'b'
tRp4674
(I1
(I600
I1
tg55
(S'i4'
I0
I1
tRp4675
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\xdd\x00\x00\x00\xb3\x01\x00\x00s\x00\x00\x00\x9e\x00\x00\x00\xfb\x01\x00\x00\x94\x00\x00\x00\xef\x00\x00\x00\xfa\x00\x00\x002\x02\x00\x00;\x00\x00\x00:\x00\x00\x00P\x02\x00\x00G\x02\x00\x00C\x01\x00\x00\xbb\x00\x00\x00\xa5\x01\x00\x00"\x01\x00\x00n\x00\x00\x00\xa9\x01\x00\x00\n\x01\x00\x00\xa4\x01\x00\x00:\x02\x00\x00b\x01\x00\x00>\x00\x00\x00A\x00\x00\x00&\x02\x00\x003\x01\x00\x003\x02\x00\x00[\x00\x00\x00\x86\x00\x00\x00N\x02\x00\x00\x1f\x02\x00\x00s\x01\x00\x00\x8e\x00\x00\x00\xb2\x00\x00\x00\xe3\x00\x00\x00R\x01\x00\x00f\x00\x00\x00^\x00\x00\x00z\x01\x00\x00\x1f\x01\x00\x00\xec\x00\x00\x007\x02\x00\x008\x02\x00\x00\xc2\x01\x00\x00D\x02\x00\x00\x1a\x02\x00\x00/\x02\x00\x00\x11\x01\x00\x00\x93\x01\x00\x00\xba\x00\x00\x00\x0e\x00\x00\x00\xfb\x00\x00\x00\x13\x01\x00\x00\xb2\x01\x00\x00\xb9\x01\x00\x00\x15\x00\x00\x00M\x01\x00\x00\xd0\x01\x00\x00[\x01\x00\x00\x05\x01\x00\x00\xf2\x01\x00\x00\x93\x00\x00\x00%\x02\x00\x00\x98\x01\x00\x00\xf4\x01\x00\x00\x84\x00\x00\x00o\x00\x00\x00\xea\x01\x00\x00\x14\x02\x00\x00\xcd\x00\x00\x00\x0b\x00\x00\x00\'\x00\x00\x00T\x00\x00\x00v\x01\x00\x00\x85\x00\x00\x00J\x01\x00\x00E\x00\x00\x00H\x02\x00\x00\xdf\x00\x00\x00\xc1\x00\x00\x00\xe9\x00\x00\x00\x80\x00\x00\x00\xfa\x01\x00\x00V\x01\x00\x00=\x01\x00\x00\xfd\x00\x00\x00j\x00\x00\x00\xde\x01\x00\x00B\x02\x00\x00\x07\x00\x00\x00/\x00\x00\x00a\x00\x00\x00\x94\x01\x00\x00\xa2\x00\x00\x005\x02\x00\x00\x97\x01\x00\x000\x00\x00\x00\xa1\x00\x00\x00%\x01\x00\x00\x90\x00\x00\x00\xf2\x00\x00\x00\xae\x00\x00\x00\xec\x01\x00\x00J\x02\x00\x00\xe1\x01\x00\x00\x9c\x00\x00\x00J\x00\x00\x00!\x01\x00\x00d\x01\x00\x00\x83\x00\x00\x00u\x01\x00\x00\xd7\x01\x00\x00\x18\x02\x00\x00\x01\x02\x00\x00\x0c\x02\x00\x00\xaa\x01\x00\x00\x9b\x00\x00\x00O\x02\x00\x00,\x00\x00\x00\x12\x01\x00\x00\xca\x01\x00\x00\xdd\x01\x00\x00\xf1\x00\x00\x00\x13\x02\x00\x00-\x01\x00\x00\xe2\x01\x00\x00M\x00\x00\x00.\x02\x00\x00\xa3\x01\x00\x00\x08\x00\x00\x00\xd9\x01\x00\x00\xd4\x01\x00\x00?\x01\x00\x00\x17\x01\x00\x00V\x00\x00\x00\xfd\x01\x00\x00+\x02\x00\x00&\x00\x00\x00\x06\x01\x00\x00\x82\x01\x00\x00\xa9\x00\x00\x00\xce\x00\x00\x00R\x02\x00\x00\x02\x01\x00\x00\xf7\x01\x00\x00\xd5\x01\x00\x001\x00\x00\x003\x00\x00\x00\xb0\x01\x00\x00\x06\x02\x00\x00\x87\x00\x00\x00\x1a\x00\x00\x00\x87\x01\x00\x00\xb0\x00\x00\x00\xfe\x00\x00\x002\x00\x00\x00\x8f\x01\x00\x00 \x00\x00\x00\x14\x00\x00\x00\xc8\x00\x00\x00@\x00\x00\x00\xc5\x00\x00\x00\x0f\x02\x00\x00(\x01\x00\x00\xf6\x01\x00\x00!\x02\x00\x00*\x01\x00\x00{\x01\x00\x00\x9f\x01\x00\x00z\x00\x00\x00X\x01\x00\x00\xa6\x01\x00\x00Z\x01\x00\x00\x7f\x00\x00\x00P\x00\x00\x00i\x00\x00\x00=\x02\x00\x00\xe7\x00\x00\x00\x17\x00\x00\x00\r\x00\x00\x00\x1e\x00\x00\x00K\x01\x00\x00\xe0\x00\x00\x00,\x02\x00\x00\xe3\x01\x00\x00\xb7\x00\x00\x00$\x01\x00\x00~\x00\x00\x00\x1d\x00\x00\x00\x80\x01\x00\x00\xdb\x00\x00\x00\x9d\x00\x00\x00\xc6\x00\x00\x00\x04\x01\x00\x00\x07\x01\x00\x00\x92\x00\x00\x00\x97\x00\x00\x00\x00\x01\x00\x00I\x00\x00\x00g\x01\x00\x00E\x02\x00\x00"\x02\x00\x00\xbd\x00\x00\x00\xd5\x00\x00\x00\x89\x00\x00\x00\xf6\x00\x00\x00\xbe\x01\x00\x00j\x01\x00\x00)\x00\x00\x00\xa1\x01\x00\x00\x02\x02\x00\x00\x11\x02\x00\x00\x12\x02\x00\x00c\x01\x00\x00\x1e\x01\x00\x00\x7f\x01\x00\x00\xba\x01\x00\x00\xd8\x01\x00\x00\x03\x00\x00\x00\xaf\x01\x00\x00K\x02\x00\x00k\x01\x00\x00\xcd\x01\x00\x00\x0f\x01\x00\x00\xca\x00\x00\x00 \x02\x00\x00\x0f\x00\x00\x00\x8f\x00\x00\x00U\x02\x00\x00\xf0\x01\x00\x00L\x01\x00\x00\xd3\x01\x00\x00\x0c\x00\x00\x00I\x01\x00\x009\x01\x00\x00F\x01\x00\x00\n\x00\x00\x00h\x00\x00\x00d\x00\x00\x00\xe1\x00\x00\x00P\x01\x00\x00\xf9\x00\x00\x00\x1d\x02\x00\x00K\x00\x00\x00\xc0\x00\x00\x002\x01\x00\x00{\x00\x00\x00*\x02\x00\x00e\x00\x00\x00\xc1\x01\x00\x00\x9e\x01\x00\x00W\x01\x00\x00h\x01\x00\x00A\x02\x00\x00=\x00\x00\x00\x9f\x00\x00\x00\x1e\x02\x00\x00\x03\x02\x00\x00\xad\x01\x00\x00\xf8\x00\x00\x00\xe5\x00\x00\x00m\x00\x00\x00$\x02\x00\x00\t\x02\x00\x00\\\x00\x00\x00t\x01\x00\x00\xa0\x01\x00\x00\xed\x00\x00\x00\xd1\x01\x00\x00\x16\x02\x00\x00\x85\x01\x00\x00\x05\x00\x00\x00\xcc\x01\x00\x00\xea\x00\x00\x00\xd1\x00\x00\x00\xae\x01\x00\x00-\x00\x00\x00\x0e\x02\x00\x00\xb8\x01\x00\x00\xfe\x01\x00\x00\xc8\x01\x00\x00\xc6\x01\x00\x00!\x00\x00\x00\x8b\x01\x00\x00\x05\x02\x00\x00m\x01\x00\x00B\x01\x00\x00L\x00\x00\x00G\x00\x00\x005\x01\x00\x00#\x00\x00\x00\xf8\x01\x00\x00\xa2\x01\x00\x00G\x01\x00\x00\xdf\x01\x00\x00g\x00\x00\x00E\x01\x00\x00L\x02\x00\x00\x0b\x02\x00\x00\xd2\x01\x00\x00>\x02\x00\x00\xc3\x00\x00\x00r\x01\x00\x00\x12\x00\x00\x00\xf9\x01\x00\x00U\x00\x00\x00(\x00\x00\x00x\x01\x00\x00(\x02\x00\x00\xef\x01\x00\x00\x02\x00\x00\x00\xd6\x01\x00\x00n\x01\x00\x00\xa5\x00\x00\x00&\x01\x00\x00\x01\x01\x00\x00\x08\x01\x00\x00\xcb\x00\x00\x007\x00\x00\x00\\\x01\x00\x00\xb4\x00\x00\x00l\x00\x00\x00\xa7\x01\x00\x00\x1c\x00\x00\x00T\x02\x00\x00\xad\x00\x00\x00\xc2\x00\x00\x00\xdc\x01\x00\x00M\x02\x00\x00\xb3\x00\x00\x00B\x00\x00\x00\'\x02\x00\x00\xdb\x01\x00\x00_\x00\x00\x00\x8a\x01\x00\x00\xce\x01\x00\x00\xab\x01\x00\x00F\x02\x00\x00\x96\x01\x00\x00O\x01\x00\x00\xda\x01\x00\x00\xbf\x01\x00\x00\xc4\x00\x00\x00\t\x00\x00\x00|\x00\x00\x00\xf7\x00\x00\x00Q\x02\x00\x004\x00\x00\x00\x03\x01\x00\x00D\x00\x00\x00o\x01\x00\x00\xff\x00\x00\x00\xd2\x00\x00\x00<\x01\x00\x00\xf1\x01\x00\x00\x19\x01\x00\x00\x98\x00\x00\x00\x13\x00\x00\x00\xa6\x00\x00\x00\x8e\x01\x00\x00\xff\x01\x00\x00\x0e\x01\x00\x00<\x02\x00\x00\'\x01\x00\x00W\x02\x00\x00\xe6\x01\x00\x00\xd9\x00\x00\x00\xc3\x01\x00\x00\xe0\x01\x00\x00\x83\x01\x00\x00\xe2\x00\x00\x00\xb1\x00\x00\x00\xf3\x00\x00\x00\x15\x01\x00\x00\xfc\x00\x00\x00\x81\x01\x00\x00}\x01\x00\x00O\x00\x00\x00S\x01\x00\x00\x82\x00\x00\x00\x1f\x00\x00\x00\x15\x02\x00\x006\x02\x00\x00%\x00\x00\x00\xc5\x01\x00\x00)\x02\x00\x00;\x01\x00\x00\x19\x00\x00\x00\x9a\x00\x00\x00\xe5\x01\x00\x00\x01\x00\x00\x00\xb6\x01\x00\x00\x86\x01\x00\x00X\x00\x00\x00v\x00\x00\x00f\x01\x00\x000\x01\x00\x00<\x00\x00\x00\xa0\x00\x00\x00\x88\x00\x00\x00W\x00\x00\x00\x95\x01\x00\x00 \x01\x00\x00\xf3\x01\x00\x00\r\x02\x00\x00\xc7\x01\x00\x00\x16\x01\x00\x00_\x01\x00\x00\xd0\x00\x00\x00\xda\x00\x00\x00\x18\x00\x00\x00\x84\x01\x00\x00\xe6\x00\x00\x00\x11\x00\x00\x00A\x01\x00\x00t\x00\x00\x00\xac\x00\x00\x00x\x00\x00\x00:\x01\x00\x00\x19\x02\x00\x00\xe4\x01\x00\x00\xbb\x01\x00\x00]\x00\x00\x00\xcc\x00\x00\x00\xbf\x00\x00\x00}\x00\x00\x00?\x00\x00\x00\n\x02\x00\x00\x92\x01\x00\x00\x88\x01\x00\x00\x8a\x00\x00\x00\xa7\x00\x00\x00\x18\x01\x00\x00\x16\x00\x00\x00\x8c\x01\x00\x00\x9d\x01\x00\x00\xb5\x01\x00\x00\x08\x02\x00\x00w\x01\x00\x00\xa4\x00\x00\x004\x01\x00\x00\xf0\x00\x00\x00Q\x00\x00\x00-\x02\x00\x00>\x01\x00\x00\xd8\x00\x00\x00~\x01\x00\x00p\x01\x00\x00\xd7\x00\x00\x00N\x01\x00\x00\xd4\x00\x00\x00\xed\x01\x00\x00\xaf\x00\x00\x00\x00\x00\x00\x006\x01\x00\x00q\x01\x00\x00\xa3\x00\x00\x00#\x02\x00\x000\x02\x00\x00\x04\x00\x00\x00S\x02\x00\x00|\x01\x00\x00\x95\x00\x00\x00l\x01\x00\x00k\x00\x00\x00e\x01\x00\x00N\x00\x00\x00]\x01\x00\x00T\x01\x00\x00\r\x01\x00\x00\xd6\x00\x00\x00`\x01\x00\x00I\x02\x00\x00\xc9\x01\x00\x00\xb7\x01\x00\x00\x90\x01\x00\x00\x17\x02\x00\x00D\x01\x00\x00\xde\x00\x00\x00y\x00\x00\x00\xac\x01\x00\x00\xee\x01\x00\x00\xcf\x01\x00\x00\xa8\x01\x00\x00\xee\x00\x00\x00F\x00\x00\x00\x9a\x01\x00\x00^\x01\x00\x008\x01\x00\x00`\x00\x00\x00;\x02\x00\x00\xe9\x01\x00\x00\x00\x02\x00\x00+\x01\x00\x00\x1b\x00\x00\x00c\x00\x00\x00\x10\x00\x00\x00\xa8\x00\x00\x00\xeb\x00\x00\x005\x00\x00\x00\xf5\x01\x00\x00\x9b\x01\x00\x00\xfc\x01\x00\x00u\x00\x00\x00\x06\x00\x00\x00\x1b\x01\x00\x00C\x00\x00\x00\xd3\x00\x00\x006\x00\x00\x00$\x00\x00\x00\x9c\x01\x00\x00)\x01\x00\x00U\x01\x00\x00a\x01\x00\x00y\x01\x00\x00\x1c\x01\x00\x00,\x01\x00\x00\xf4\x00\x00\x00\xc7\x00\x00\x00\x10\x02\x00\x00\x07\x02\x00\x00\xb6\x00\x00\x00/\x01\x00\x00\x99\x00\x00\x00\x14\x01\x00\x00\xb9\x00\x00\x00\xb1\x01\x00\x007\x01\x00\x00i\x01\x00\x00\xb4\x01\x00\x00.\x01\x00\x00\x8c\x00\x00\x00\x04\x02\x00\x00\t\x01\x00\x00\x8d\x01\x00\x00\xe7\x01\x00\x00\xc4\x01\x00\x00\x0c\x01\x00\x00\x1c\x02\x00\x00p\x00\x00\x00+\x00\x00\x00@\x02\x00\x00\xbe\x00\x00\x00\x91\x01\x00\x00\x0b\x01\x00\x00\xb5\x00\x00\x00\xcb\x01\x00\x00b\x00\x00\x004\x02\x00\x00\xdc\x00\x00\x009\x00\x00\x00\xbc\x01\x00\x00\x89\x01\x00\x00Y\x01\x00\x00@\x01\x00\x00\xbc\x00\x00\x00\x8b\x00\x00\x00\xf5\x00\x00\x00r\x00\x00\x00\xcf\x00\x00\x009\x02\x00\x00.\x00\x00\x00H\x01\x00\x00\xe8\x01\x00\x00C\x02\x00\x00Q\x01\x00\x00Y\x00\x00\x00\xaa\x00\x00\x00\xbd\x01\x00\x00\x1b\x02\x00\x00H\x00\x00\x008\x00\x00\x00\x91\x00\x00\x00Z\x00\x00\x00*\x00\x00\x00#\x01\x00\x00"\x00\x00\x00q\x00\x00\x00\x96\x00\x00\x00\xab\x00\x00\x00\x1a\x01\x00\x00\xeb\x01\x00\x00\x10\x01\x00\x00\xe4\x00\x00\x00R\x00\x00\x00w\x00\x00\x00V\x02\x00\x001\x01\x00\x00\x1d\x01\x00\x00\xe8\x00\x00\x00\x99\x01\x00\x00\x81\x00\x00\x00\x8d\x00\x00\x00?\x02\x00\x00\xb8\x00\x00\x00\xc0\x01\x00\x001\x02\x00\x00S\x00\x00\x00\xc9\x00\x00\x00'
tbsg75
I01
sg76
I1
sg77
I-1
sg78
(lp4676
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg80
Nsg81
cnumpy.core.multiarray
scalar
p4677
(g4675
S'\xc9\x00\x00\x00'
tRp4678
sg82
I600
sg83
I0
sg84
I600
sg85
I01
sbag37
asS'savePickle'
p4679
I01
sb.