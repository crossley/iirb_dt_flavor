ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject648
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 648
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VF
sS'age'
p31
V20
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I4
sS'_exp'
p41
I75676208
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I39
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I15
I40
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I15
I40
tg55
I00
S'\x00\x00\x80@\x00\x00\xa0@\x00\x00\x80A\x00\x00\xb0A\x00\x00\xe0A\x00\x00\x86B\x00\x00\xd8B\x00\x00\x1bC\x00\x00!C\x00\x00(C\x00\x001C\x00\x005C\x00\x00DC\x00\x00\\C\x00\x00_C\x00\x80\x81C\x00\x80\x8cC\x00\x80\x96C\x00\x80\xa1C\x00\x00\xa3C\x00\x00\xa7C\x00\x00\xa8C\x00\x80\xabC\x00\x00\xafC\x00\x80\xafC\x00\x00\xb3C\x00\x00\xb5C\x00\x80\xb5C\x00\x00\xb7C\x00\x00\xbaC\x00\x00\xbdC\x00\x00\xc7C\x00\x80\xd6C\x00\x80\xf6C\x00\x80\xf9C\x00\xc0\x01D\x00\xc0\x04D\x00\x80\x05D\x00@\x0cD\x00\x00\x0eD\x00\x00\xc0@\x00\x00@A\x00\x00\x18B\x00\x00\x96B\x00\x00\xc0B\x00\x00\xccB\x00\x00\xd2B\x00\x00\xd6B\x00\x00\x07C\x00\x00\x12C\x00\x00\x13C\x00\x00\x15C\x00\x00<C\x00\x00FC\x00\x00aC\x00\x00dC\x00\x00rC\x00\x00sC\x00\x80\x8aC\x00\x00\x8eC\x00\x80\x94C\x00\x80\x97C\x00\x80\xa2C\x00\x80\xa9C\x00\x00\xacC\x00\x80\xadC\x00\x00\xbfC\x00\x80\xd5C\x00\x00\xdfC\x00\x00\xe0C\x00\x80\xe1C\x00\x00\xe3C\x00\x00\xfbC\x00@\x00D\x00\xc0\x03D\x00\x80\x07D\x00\x80\x0cD\x00\xc0\x10D\x00\x00\x12D\x00\x00\x15D\x00\x00\x00A\x00\x00\xa0A\x00\x00\xb8A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\x1cB\x00\x00\x92B\x00\x00\xd4B\x00\x00\xeaB\x00\x00\rC\x00\x00\x1eC\x00\x002C\x00\x006C\x00\x00BC\x00\x00IC\x00\x00OC\x00\x00RC\x00\x00TC\x00\x00VC\x00\x00]C\x00\x00`C\x00\x00cC\x00\x00jC\x00\x00oC\x00\x00\x87C\x00\x80\x90C\x00\x00\x97C\x00\x80\x99C\x00\x00\xb4C\x00\x00\xb6C\x00\x00\xc0C\x00\x80\xc0C\x00\x80\xcaC\x00\x00\xccC\x00\x00\xecC\x00\x80\xf0C\x00\x00\xfcC\x00\x00\x03D\x00\xc0\x08D\x00\x80\x13D\x00\x00\x10A\x00\x00\x98A\x00\x00 B\x00\x00dB\x00\x00\x8eB\x00\x00\x9cB\x00\x00\xc6B\x00\x00\xfcB\x00\x00\x00C\x00\x00\x02C\x00\x00\nC\x00\x00\x0fC\x00\x00\x17C\x00\x00#C\x00\x00>C\x00\x00?C\x00\x00EC\x00\x00ZC\x00\x00\x84C\x00\x00\x8bC\x00\x00\x91C\x00\x00\x96C\x00\x00\x9bC\x00\x80\xa6C\x00\x80\xaeC\x00\x00\xc1C\x00\x00\xc8C\x00\x00\xcbC\x00\x80\xcfC\x00\x80\xd8C\x00\x80\xddC\x00@\x03D\x00\x00\tD\x00\x80\tD\x00\x80\nD\x00\x00\x0fD\x00\xc0\x12D\x00@\x13D\x00\x80\x14D\x00@\x15D\x00\x00@@\x00\x00`A\x00\x00\xd8A\x00\x004B\x00\x00PB\x00\x00pB\x00\x00\x8aB\x00\x00\x98B\x00\x00\xa2B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xb4B\x00\x00\xf4B\x00\x00\xfaB\x00\x00\x0eC\x00\x00$C\x00\x00)C\x00\x00*C\x00\x008C\x00\x00gC\x00\x00uC\x00\x00}C\x00\x00\x81C\x00\x80\x89C\x00\x00\x8aC\x00\x00\x8cC\x00\x00\xadC\x00\x80\xc5C\x00\x00\xd6C\x00\x80\xe2C\x00\x00\xe6C\x00\x00\xe7C\x00\x80\xe8C\x00\x80\xe9C\x00\x00\xf9C\x00\x80\x06D\x00\x00\x08D\x00\x00\x0bD\x00@\x11D\x00\xc0\x15D\x00\x00LB\x00\x00lB\x00\x00\x94B\x00\x00\xdaB\x00\x00\xf8B\x00\x00\x04C\x00\x00\x05C\x00\x00\x08C\x00\x00:C\x00\x00LC\x00\x00MC\x00\x00WC\x00\x00YC\x00\x00^C\x00\x00zC\x00\x00~C\x00\x00\x7fC\x00\x00\x82C\x00\x80\x8bC\x00\x80\x8eC\x00\x80\x98C\x00\x80\x9aC\x00\x00\x9cC\x00\x00\xa2C\x00\x80\xa5C\x00\x80\xb0C\x00\x80\xb6C\x00\x00\xc9C\x00\x00\xcaC\x00\x00\xceC\x00\x00\xdbC\x00\x80\xdeC\x00\x00\xe2C\x00\x00\xe8C\x00\x00\xf0C\x00\x80\xf1C\x00\x80\xf7C\x00\x00\x04D\x00\xc0\nD\x00\xc0\x0cD\x00\x00pA\x00\x00\xc0A\x00\x00\x04B\x00\x00HB\x00\x00`B\x00\x00\x82B\x00\x00\x9aB\x00\x00\x9eB\x00\x00\xa6B\x00\x00\xb6B\x00\x00\xeeB\x00\x00\xf2B\x00\x00\tC\x00\x00\x18C\x00\x00%C\x00\x004C\x00\x00@C\x00\x00pC\x00\x00tC\x00\x00vC\x00\x00\x99C\x00\x80\x9eC\x00\x80\xaaC\x00\x80\xacC\x00\x80\xc7C\x00\x80\xc9C\x00\x00\xd3C\x00\x80\xd4C\x00\x80\xdcC\x00\x00\xe9C\x00\x00\xebC\x00\x00\xf6C\x00\x80\xfaC\x00\x80\xfbC\x00\xc0\x05D\x00\x80\x08D\x00\x00\nD\x00\x80\x0bD\x00\x80\x0fD\x00\xc0\x0fD\x00\x00PA\x00\x00\xe8A\x00\x00\x00B\x00\x00$B\x00\x00\x8cB\x00\x00\xb0B\x00\x00\xb8B\x00\x00\xe8B\x00\x00\xf6B\x00\x00\x11C\x00\x00\x1aC\x00\x00\x89C\x00\x00\x8fC\x00\x00\x92C\x00\x80\x93C\x00\x00\xa0C\x00\x80\xa0C\x00\x80\xa3C\x00\x00\xa4C\x00\x00\xa6C\x00\x00\xabC\x00\x00\xb0C\x00\x80\xb2C\x00\x00\xb8C\x00\x00\xb9C\x00\x00\xbcC\x00\x80\xc1C\x00\x80\xcbC\x00\x00\xd4C\x00\x80\xd7C\x00\x00\xdcC\x00\x00\xddC\x00\x80\xe6C\x00\x00\xf3C\x00\x80\xfeC\x00@\x01D\x00\x00\x07D\x00@\nD\x00@\x0bD\x00\x00\x11D\x00\x00\xa8A\x00\x00\xf0A\x00\x00\x10B\x00\x00<B\x00\x00hB\x00\x00\x90B\x00\x00\xbeB\x00\x00\xcaB\x00\x00\xf0B\x00\x00\x03C\x00\x00\x06C\x00\x00&C\x00\x00CC\x00\x00KC\x00\x00bC\x00\x00fC\x00\x00nC\x00\x00\x86C\x00\x80\x88C\x00\x00\x95C\x00\x80\x95C\x00\x80\x9bC\x00\x00\xa1C\x00\x00\xaeC\x00\x00\xb2C\x00\x80\xb7C\x00\x80\xc2C\x00\x00\xcdC\x00\x00\xcfC\x00\x00\xeeC\x00\x80\xefC\x00\x00\xf4C\x00\x00\xf7C\x00\x80\xf8C\x00\x00\x02D\x00@\x02D\x00\x80\x02D\x00\xc0\x06D\x00@\rD\x00\x00\x14D\x00\x00\xf8A\x00\x00(B\x00\x00XB\x00\x00|B\x00\x00\xa4B\x00\x00\xbaB\x00\x00\xc2B\x00\x00\xc8B\x00\x00\xe4B\x00\x00\x0cC\x00\x00.C\x00\x00=C\x00\x00GC\x00\x00[C\x00\x00iC\x00\x00qC\x00\x80\x82C\x00\x80\x83C\x00\x80\x84C\x00\x80\x8fC\x00\x00\x9dC\x00\x80\x9fC\x00\x80\xbaC\x00\x00\xc3C\x00\x80\xc8C\x00\x00\xd1C\x00\x80\xd1C\x00\x00\xd2C\x00\x00\xd9C\x00\x00\xe4C\x00\x00\xeaC\x00\x80\xf3C\x00\x00\xf5C\x00\x80\xf5C\x00\x00\xfeC\x00@\x06D\x00@\x08D\x00\xc0\x0bD\x00\x80\x0eD\x00\x80\x12D\x00\x00\xe0@\x00\x00TB\x00\x00tB\x00\x00\x84B\x00\x00\xd0B\x00\x00\xe6B\x00\x00\x14C\x00\x00\x16C\x00\x00 C\x00\x00+C\x00\x00-C\x00\x000C\x00\x00NC\x00\x00PC\x00\x00wC\x00\x00\x83C\x00\x00\x90C\x00\x80\x91C\x00\x00\x93C\x00\x80\x9cC\x00\x00\xaaC\x00\x00\xb1C\x00\x80\xb4C\x00\x80\xb8C\x00\x00\xbbC\x00\x80\xbbC\x00\x00\xbeC\x00\x00\xc2C\x00\x00\xd7C\x00\x00\xdeC\x00\x00\xefC\x00\x80\xfdC\x00\x80\x00D\x00\xc0\x00D\x00\x80\x01D\x00\x00\x0cD\x00\x00\rD\x00\x80\rD\x00@\x0fD\x00\x00\x10D\x00\x00\x00\x00\x00\x00\x0cB\x00\x008B\x00\x00DB\x00\x00\\B\x00\x00\x80B\x00\x00\xc4B\x00\x00\x1cC\x00\x007C\x00\x00;C\x00\x00QC\x00\x00mC\x00\x00|C\x00\x80\x80C\x00\x80\x85C\x00\x80\x86C\x00\x00\x88C\x00\x00\x98C\x00\x80\x9dC\x00\x80\xa4C\x00\x80\xb1C\x00\x80\xb9C\x00\x80\xbdC\x00\x00\xc4C\x00\x80\xd2C\x00\x00\xd5C\x00\x00\xd8C\x00\x00\xdaC\x00\x80\xdfC\x00\x80\xe0C\x00\x80\xe3C\x00\x80\xe5C\x00\x80\xebC\x00\x00\xedC\x00\x80\xf2C\x00\x80\xffC\x00\x00\x00D\x00\xc0\x07D\x00\x00\x13D\x00\xc0\x14D\x00\x00\x00@\x00\x00 A\x00\x000A\x00\x00\x08B\x00\x00,B\x00\x000B\x00\x00xB\x00\x00\xaeB\x00\x00\xb2B\x00\x00\xceB\x00\x00\x19C\x00\x00\x1dC\x00\x00\'C\x00\x00,C\x00\x009C\x00\x00SC\x00\x00xC\x00\x00\x8dC\x00\x80\x92C\x00\x00\x9aC\x00\x80\xa7C\x00\x80\xbeC\x00\x80\xc3C\x00\x80\xccC\x00\x80\xcdC\x00\x80\xceC\x00\x80\xd3C\x00\x80\xdbC\x00\x80\xe4C\x00\x80\xeaC\x00\x80\xedC\x00\x00\xfdC\x00\x00\xffC\x00\x80\x03D\x00@\x04D\x00\x00\x06D\x00@\x07D\x00\x80\x10D\x00\xc0\x11D\x00@\x12D\x00\x00\x80?\x00\x00\x88A\x00\x00@B\x00\x00\xa0B\x00\x00\xbcB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xecB\x00\x00\x01C\x00\x00\x0bC\x00\x00\x10C\x00\x00"C\x00\x00/C\x00\x003C\x00\x00HC\x00\x00XC\x00\x00lC\x00\x00\x80C\x00\x00\x94C\x00\x00\x9fC\x00\x00\xa5C\x00\x00\xa9C\x00\x80\xb3C\x00\x80\xbfC\x00\x00\xc6C\x00\x80\xd0C\x00\x80\xd9C\x00\x80\xecC\x00\x00\xf2C\x00\x00\x01D\x00\x00\x05D\x00@\x05D\x00\xc0\tD\x00@\x0eD\x00\xc0\x0eD\x00@\x10D\x00\x80\x11D\x00\x80\x15D\x00\x00\x90A\x00\x00\x14B\x00\x00\x88B\x00\x00\xacB\x00\x00\xfeB\x00\x00\x1fC\x00\x00AC\x00\x00JC\x00\x00UC\x00\x00eC\x00\x00hC\x00\x00kC\x00\x00yC\x00\x00{C\x00\x00\x85C\x00\x80\x87C\x00\x80\x8dC\x00\x00\x9eC\x00\x80\xa8C\x00\x80\xbcC\x00\x80\xc4C\x00\x00\xc5C\x00\x80\xc6C\x00\x00\xd0C\x00\x80\xdaC\x00\x00\xe1C\x00\x00\xe5C\x00\x80\xe7C\x00\x80\xeeC\x00\x00\xf1C\x00\x80\xf4C\x00\x00\xf8C\x00\x00\xfaC\x00\x80\xfcC\x00\xc0\x02D\x00\x80\x04D\x00@\tD\x00\xc0\rD\x00\xc0\x13D\x00@\x14D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I15
aI40
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I15
I40
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I11
aI6
aI8
aI4
aI4
aI1
aI4
aI1
aI8
aI1
aI10
aI6
aI6
aI8
aI2
aI1
aI6
aI5
aI2
aI5
aI3
aI11
aI13
aI6
aI2
aI10
aI9
aI2
aI9
aI13
aI14
aI4
aI5
aI5
aI12
aI3
aI7
aI5
aI9
aI12
aI13
aI0
aI9
aI11
aI10
aI4
aI6
aI2
aI6
aI5
aI3
aI8
aI0
aI0
aI12
aI8
aI9
aI13
aI14
aI7
aI0
aI14
aI5
aI4
aI10
aI7
aI12
aI3
aI11
aI11
aI1
aI6
aI2
aI14
aI11
aI12
aI12
aI4
aI13
aI9
aI12
aI13
aI7
aI8
aI12
aI6
aI7
aI1
aI4
aI6
aI6
aI12
aI2
aI3
aI2
aI2
aI1
aI11
aI11
aI9
aI2
aI6
aI7
aI1
aI0
aI14
aI11
aI7
aI6
aI14
aI5
aI4
aI14
aI8
aI11
aI1
aI1
aI7
aI3
aI3
aI4
aI14
aI6
aI13
aI9
aI3
aI9
aI0
aI7
aI3
aI12
aI0
aI11
aI1
aI14
aI1
aI1
aI4
aI8
aI10
aI1
aI13
aI3
aI8
aI0
aI0
aI14
aI2
aI12
aI5
aI4
aI9
aI5
aI4
aI1
aI5
aI11
aI6
aI10
aI11
aI0
aI3
aI12
aI11
aI11
aI6
aI13
aI5
aI5
aI13
aI7
aI4
aI4
aI9
aI2
aI14
aI6
aI0
aI7
aI2
aI11
aI9
aI0
aI3
aI2
aI11
aI14
aI12
aI7
aI12
aI1
aI12
aI13
aI0
aI10
aI12
aI4
aI9
aI6
aI3
aI0
aI2
aI11
aI6
aI6
aI13
aI8
aI13
aI4
aI9
aI0
aI4
aI12
aI13
aI5
aI8
aI4
aI5
aI4
aI3
aI5
aI7
aI12
aI0
aI5
aI10
aI4
aI8
aI6
aI7
aI11
aI6
aI11
aI14
aI10
aI14
aI9
aI10
aI6
aI2
aI1
aI8
aI8
aI5
aI10
aI4
aI1
aI13
aI3
aI2
aI11
aI10
aI5
aI2
aI13
aI4
aI6
aI9
aI4
aI10
aI6
aI7
aI0
aI0
aI0
aI12
aI13
aI12
aI11
aI6
aI9
aI11
aI7
aI6
aI13
aI0
aI6
aI0
aI10
aI14
aI10
aI0
aI14
aI4
aI0
aI9
aI9
aI13
aI14
aI4
aI12
aI12
aI11
aI14
aI5
aI14
aI10
aI10
aI1
aI7
aI2
aI8
aI14
aI7
aI8
aI1
aI14
aI5
aI1
aI7
aI12
aI2
aI9
aI1
aI7
aI13
aI2
aI1
aI13
aI8
aI2
aI2
aI1
aI10
aI14
aI6
aI11
aI13
aI3
aI3
aI2
aI10
aI1
aI8
aI3
aI9
aI12
aI9
aI3
aI12
aI12
aI0
aI13
aI5
aI7
aI13
aI0
aI12
aI4
aI3
aI14
aI13
aI8
aI6
aI10
aI13
aI3
aI5
aI12
aI14
aI3
aI6
aI2
aI9
aI4
aI4
aI3
aI9
aI13
aI13
aI14
aI9
aI9
aI5
aI9
aI2
aI14
aI3
aI5
aI10
aI5
aI5
aI1
aI10
aI10
aI2
aI6
aI8
aI0
aI10
aI11
aI11
aI14
aI2
aI0
aI0
aI14
aI10
aI1
aI3
aI12
aI2
aI3
aI11
aI7
aI4
aI9
aI10
aI3
aI7
aI10
aI13
aI3
aI5
aI0
aI14
aI5
aI9
aI4
aI7
aI3
aI1
aI10
aI11
aI7
aI2
aI3
aI3
aI10
aI5
aI4
aI12
aI9
aI14
aI8
aI6
aI3
aI8
aI7
aI11
aI12
aI2
aI7
aI6
aI3
aI14
aI8
aI7
aI8
aI1
aI0
aI10
aI3
aI10
aI2
aI13
aI14
aI14
aI0
aI13
aI8
aI0
aI6
aI8
aI11
aI3
aI9
aI14
aI7
aI1
aI7
aI8
aI9
aI12
aI8
aI12
aI13
aI10
aI4
aI1
aI1
aI4
aI9
aI3
aI8
aI12
aI1
aI2
aI5
aI1
aI13
aI0
aI6
aI2
aI5
aI11
aI11
aI11
aI12
aI1
aI5
aI7
aI7
aI7
aI0
aI7
aI5
aI13
aI11
aI11
aI4
aI14
aI6
aI10
aI8
aI9
aI6
aI14
aI13
aI3
aI7
aI0
aI12
aI8
aI2
aI7
aI12
aI13
aI5
aI10
aI3
aI2
aI14
aI10
aI0
aI8
aI4
aI8
aI14
aI8
aI10
aI7
aI0
aI0
aI9
aI10
aI6
aI9
aI3
aI1
aI14
aI10
aI0
aI9
aI14
aI4
aI7
aI0
aI12
aI13
aI4
aI7
aI12
aI5
aI5
aI12
aI10
aI6
aI8
aI1
aI4
aI13
aI2
aI11
aI2
aI2
aI5
aI11
aI1
aI8
aI9
aI11
aI1
aI13
aI10
aI8
aI5
aI9
aI9
aI11
aI5
aI8
aI8
aI7
aI2
aI8
aI3
aI13
aI1
aI4
atbsS'finished'
p74
I00
sS'nReps'
p75
I40
sS'nRemaining'
p76
I0
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p79
NsS'thisIndex'
p80
I4
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I14
sS'nTotal'
p83
I600
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I11
sS'.thisRepN'
p96
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I11
sg15
(lp100
S'd'
asg17
S'N'
sg14
I1
sa(dp101
g16
(lp102
S'k'
asg95
I13
sS'.thisRepN'
p103
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I13
sg15
(lp107
S'd'
asg17
S'N'
sg14
I1
sa(dp108
g16
(lp109
S'd'
asg18
S'N'
sS'.thisRepN'
p110
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I12
sg15
(lp114
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp115
g16
(lp116
S'k'
asg18
S'Y'
sS'.thisRepN'
p117
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I4
sg15
(lp121
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp122
g16
(lp123
S'd'
asg18
S'N'
sS'.thisRepN'
p124
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p125
I4
sS'.thisN'
p126
I4
sS'.thisIndex'
p127
I0
sg15
(lp128
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp129
S'space'
p130
asg95
I0
sa(dp131
g16
(lp132
S'k'
asg18
S'Y'
sS'.thisRepN'
p133
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p134
I5
sS'.thisN'
p135
I5
sS'.thisIndex'
p136
I0
sg15
(lp137
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp138
S'space'
p139
asg95
I0
sa(dp140
g16
(lp141
S'k'
asg18
S'N'
sS'.thisRepN'
p142
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p143
I6
sS'.thisN'
p144
I6
sS'.thisIndex'
p145
I1
sg15
(lp146
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp147
g16
(lp148
S'k'
asg18
S'N'
sS'.thisRepN'
p149
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p150
I7
sS'.thisN'
p151
I7
sS'.thisIndex'
p152
I10
sg15
(lp153
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp154
g16
(lp155
S'k'
asg18
S'Y'
sS'.thisRepN'
p156
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p157
I8
sS'.thisN'
p158
I8
sS'.thisIndex'
p159
I2
sg15
(lp160
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp161
S'space'
p162
asg95
I2
sa(dp163
g16
(lp164
S'd'
asg18
S'N'
sS'.thisRepN'
p165
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p166
I9
sS'.thisN'
p167
I9
sS'.thisIndex'
p168
I3
sg15
(lp169
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp170
g16
(lp171
S'k'
asg18
S'Y'
sS'.thisRepN'
p172
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p173
I10
sS'.thisN'
p174
I10
sS'.thisIndex'
p175
I12
sg15
(lp176
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp177
g16
(lp178
S'd'
asg18
S'Y'
sS'.thisRepN'
p179
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p180
I11
sS'.thisN'
p181
I11
sS'.thisIndex'
p182
I12
sg15
(lp183
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp184
g16
(lp185
S'k'
asg18
S'Y'
sS'.thisRepN'
p186
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p187
I12
sS'.thisN'
p188
I12
sS'.thisIndex'
p189
I1
sg15
(lp190
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp191
S'space'
p192
asg95
I1
sa(dp193
g16
(lp194
S'd'
asg18
S'Y'
sS'.thisRepN'
p195
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p196
I13
sS'.thisN'
p197
I13
sS'.thisIndex'
p198
I7
sg15
(lp199
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp200
S'space'
p201
asg95
I7
sa(dp202
g16
(lp203
S'd'
asg18
S'Y'
sS'.thisRepN'
p204
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p205
I14
sS'.thisN'
p206
I14
sS'.thisIndex'
p207
I4
sg15
(lp208
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp209
g16
(lp210
S'k'
asg18
S'N'
sS'.thisRepN'
p211
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p212
I0
sS'.thisN'
p213
I15
sS'.thisIndex'
p214
I6
sg15
(lp215
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp216
S'space'
p217
asg95
I6
sa(dp218
g16
(lp219
S'k'
asg18
S'Y'
sS'.thisRepN'
p220
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p221
I1
sS'.thisN'
p222
I16
sS'.thisIndex'
p223
I0
sg15
(lp224
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp225
g16
(lp226
S'k'
asg18
S'Y'
sS'.thisRepN'
p227
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p228
I2
sS'.thisN'
p229
I17
sS'.thisIndex'
p230
I13
sg15
(lp231
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I13
sa(dp232
g16
(lp233
S'k'
asg18
S'N'
sS'.thisRepN'
p234
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p235
I3
sS'.thisN'
p236
I18
sS'.thisIndex'
p237
I14
sg15
(lp238
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp239
g16
(lp240
S'k'
asg18
S'N'
sS'.thisRepN'
p241
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p242
I4
sS'.thisN'
p243
I19
sS'.thisIndex'
p244
I3
sg15
(lp245
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp246
g16
(lp247
S'k'
asg18
S'Y'
sS'.thisRepN'
p248
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p249
I5
sS'.thisN'
p250
I20
sS'.thisIndex'
p251
I2
sg15
(lp252
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp253
g16
(lp254
S'k'
asg18
S'Y'
sS'.thisRepN'
p255
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p256
I6
sS'.thisN'
p257
I21
sS'.thisIndex'
p258
I8
sg15
(lp259
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp260
S'space'
p261
asg95
I8
sa(dp262
g16
(lp263
S'd'
asg18
S'N'
sS'.thisRepN'
p264
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p265
I7
sS'.thisN'
p266
I22
sS'.thisIndex'
p267
I0
sg15
(lp268
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp269
S'space'
p270
asg95
I0
sa(dp271
g16
(lp272
S'k'
asg18
S'N'
sS'.thisRepN'
p273
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p274
I8
sS'.thisN'
p275
I23
sS'.thisIndex'
p276
I2
sg15
(lp277
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp278
g16
(lp279
S'k'
asg18
S'Y'
sS'.thisRepN'
p280
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p281
I9
sS'.thisN'
p282
I24
sS'.thisIndex'
p283
I6
sg15
(lp284
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp285
S'k'
asg95
I6
sa(dp286
g16
(lp287
S'd'
asg18
S'N'
sS'.thisRepN'
p288
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p289
I10
sS'.thisN'
p290
I25
sS'.thisIndex'
p291
I2
sg15
(lp292
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp293
g16
(lp294
S'd'
asg18
S'Y'
sS'.thisRepN'
p295
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p296
I11
sS'.thisN'
p297
I26
sS'.thisIndex'
p298
I2
sg15
(lp299
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp300
g16
(lp301
S'd'
asg18
S'N'
sS'.thisRepN'
p302
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p303
I12
sS'.thisN'
p304
I27
sS'.thisIndex'
p305
I4
sg15
(lp306
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp307
g16
(lp308
S'd'
asg18
S'Y'
sS'.thisRepN'
p309
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p310
I13
sS'.thisN'
p311
I28
sS'.thisIndex'
p312
I0
sg15
(lp313
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp314
g16
(lp315
S'k'
asg18
S'N'
sS'.thisRepN'
p316
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p317
I14
sS'.thisN'
p318
I29
sS'.thisIndex'
p319
I7
sg15
(lp320
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp321
g16
(lp322
S'd'
asg18
S'Y'
sS'.thisRepN'
p323
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p324
I0
sS'.thisN'
p325
I30
sS'.thisIndex'
p326
I8
sg15
(lp327
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp328
S'space'
p329
asg95
I8
sa(dp330
g16
(lp331
S'd'
asg18
S'N'
sS'.thisRepN'
p332
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p333
I1
sS'.thisN'
p334
I31
sS'.thisIndex'
p335
I9
sg15
(lp336
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp337
g16
(lp338
S'k'
asg18
S'Y'
sS'.thisRepN'
p339
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p340
I2
sS'.thisN'
p341
I32
sS'.thisIndex'
p342
I7
sg15
(lp343
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp344
S'space'
p345
asg95
I7
sa(dp346
g16
(lp347
S'k'
asg18
S'Y'
sS'.thisRepN'
p348
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p349
I3
sS'.thisN'
p350
I33
sS'.thisIndex'
p351
I6
sg15
(lp352
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp353
g16
(lp354
S'k'
asg18
S'N'
sS'.thisRepN'
p355
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p356
I4
sS'.thisN'
p357
I34
sS'.thisIndex'
p358
I12
sg15
(lp359
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp360
g16
(lp361
S'd'
asg18
S'Y'
sS'.thisRepN'
p362
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p363
I5
sS'.thisN'
p364
I35
sS'.thisIndex'
p365
I11
sg15
(lp366
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp367
g16
(lp368
S'd'
asg18
S'Y'
sS'.thisRepN'
p369
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p370
I6
sS'.thisN'
p371
I36
sS'.thisIndex'
p372
I8
sg15
(lp373
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I8
sa(dp374
g16
(lp375
S'd'
asg18
S'N'
sS'.thisRepN'
p376
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p377
I7
sS'.thisN'
p378
I37
sS'.thisIndex'
p379
I14
sg15
(lp380
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp381
g16
(lp382
S'k'
asg18
S'Y'
sS'.thisRepN'
p383
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p384
I8
sS'.thisN'
p385
I38
sS'.thisIndex'
p386
I1
sg15
(lp387
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp388
g16
(lp389
S'k'
asg18
S'N'
sS'.thisRepN'
p390
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p391
I9
sS'.thisN'
p392
I39
sS'.thisIndex'
p393
I2
sg15
(lp394
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp395
g16
(lp396
S'k'
asg18
S'N'
sS'.thisRepN'
p397
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p398
I10
sS'.thisN'
p399
I40
sS'.thisIndex'
p400
I3
sg15
(lp401
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp402
S'k'
asg95
I3
sa(dp403
g16
(lp404
S'd'
asg18
S'Y'
sS'.thisRepN'
p405
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p406
I11
sS'.thisN'
p407
I41
sS'.thisIndex'
p408
I7
sg15
(lp409
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp410
g16
(lp411
S'd'
asg18
S'Y'
sS'.thisRepN'
p412
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p413
I12
sS'.thisN'
p414
I42
sS'.thisIndex'
p415
I9
sg15
(lp416
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp417
g16
(lp418
S'k'
asg18
S'Y'
sS'.thisRepN'
p419
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p420
I13
sS'.thisN'
p421
I43
sS'.thisIndex'
p422
I12
sg15
(lp423
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp424
g16
(lp425
S'k'
asg18
S'N'
sS'.thisRepN'
p426
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p427
I14
sS'.thisN'
p428
I44
sS'.thisIndex'
p429
I12
sg15
(lp430
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp431
g16
(lp432
S'k'
asg18
S'Y'
sS'.thisRepN'
p433
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p434
I0
sS'.thisN'
p435
I45
sS'.thisIndex'
p436
I4
sg15
(lp437
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp438
g16
(lp439
S'k'
asg18
S'N'
sS'.thisRepN'
p440
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p441
I1
sS'.thisN'
p442
I46
sS'.thisIndex'
p443
I11
sg15
(lp444
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp445
g16
(lp446
S'd'
asg18
S'N'
sS'.thisRepN'
p447
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p448
I2
sS'.thisN'
p449
I47
sS'.thisIndex'
p450
I8
sg15
(lp451
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp452
g16
(lp453
S'd'
asg18
S'N'
sS'.thisRepN'
p454
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p455
I3
sS'.thisN'
p456
I48
sS'.thisIndex'
p457
I13
sg15
(lp458
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I13
sa(dp459
g16
(lp460
S'd'
asg18
S'N'
sg22
I26
sS'.thisN'
p461
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p462
I4
sS'.thisRepN'
p463
I3
sg21
I23
sS'.thisIndex'
p464
I11
sg23
I25
sg15
(lp465
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp466
g16
(lp467
S'd'
asg95
I6
sS'.thisRepN'
p468
I3
sg30
VF
sg31
g32
sS'.thisTrialN'
p469
I5
sS'.thisN'
p470
I50
sS'.thisIndex'
p471
I6
sg15
(lp472
S'k'
asg17
S'N'
sg14
I2
sa(dp473
g16
(lp474
S'k'
asg95
I5
sS'.thisRepN'
p475
I3
sg30
VF
sg31
g32
sS'.thisTrialN'
p476
I6
sS'.thisN'
p477
I51
sS'.thisIndex'
p478
I5
sg15
(lp479
S'd'
asg17
S'N'
sg14
I2
sa(dp480
g16
(lp481
S'k'
asg18
S'N'
sS'.thisRepN'
p482
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p483
I7
sS'.thisN'
p484
I52
sS'.thisIndex'
p485
I4
sg15
(lp486
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp487
g16
(lp488
S'd'
asg18
S'N'
sS'.thisRepN'
p489
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p490
I8
sS'.thisN'
p491
I53
sS'.thisIndex'
p492
I10
sg15
(lp493
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp494
g16
(lp495
S'k'
asg18
S'Y'
sS'.thisRepN'
p496
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p497
I9
sS'.thisN'
p498
I54
sS'.thisIndex'
p499
I9
sg15
(lp500
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp501
g16
(lp502
S'd'
asg18
S'Y'
sS'.thisRepN'
p503
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p504
I10
sS'.thisN'
p505
I55
sS'.thisIndex'
p506
I11
sg15
(lp507
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp508
g16
(lp509
S'k'
asg18
S'Y'
sS'.thisRepN'
p510
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p511
I11
sS'.thisN'
p512
I56
sS'.thisIndex'
p513
I6
sg15
(lp514
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp515
S'space'
p516
asg95
I6
sa(dp517
g16
(lp518
S'k'
asg18
S'N'
sS'.thisRepN'
p519
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p520
I12
sS'.thisN'
p521
I57
sS'.thisIndex'
p522
I3
sg15
(lp523
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp524
g16
(lp525
S'd'
asg18
S'N'
sS'.thisRepN'
p526
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p527
I13
sS'.thisN'
p528
I58
sS'.thisIndex'
p529
I8
sg15
(lp530
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I8
sa(dp531
g16
(lp532
S'd'
asg18
S'Y'
sS'.thisRepN'
p533
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p534
I14
sS'.thisN'
p535
I59
sS'.thisIndex'
p536
I5
sg15
(lp537
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp538
g16
(lp539
S'd'
asg18
S'Y'
sS'.thisRepN'
p540
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p541
I0
sS'.thisN'
p542
I60
sS'.thisIndex'
p543
I4
sg15
(lp544
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp545
g16
(lp546
S'd'
asg18
S'Y'
sS'.thisRepN'
p547
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p548
I1
sS'.thisN'
p549
I61
sS'.thisIndex'
p550
I10
sg15
(lp551
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp552
g16
(lp553
S'd'
asg18
S'N'
sS'.thisRepN'
p554
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p555
I2
sS'.thisN'
p556
I62
sS'.thisIndex'
p557
I12
sg15
(lp558
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp559
g16
(lp560
S'k'
asg18
S'N'
sS'.thisRepN'
p561
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p562
I3
sS'.thisN'
p563
I63
sS'.thisIndex'
p564
I9
sg15
(lp565
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp566
g16
(lp567
S'k'
asg18
S'Y'
sS'.thisRepN'
p568
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p569
I4
sS'.thisN'
p570
I64
sS'.thisIndex'
p571
I11
sg15
(lp572
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp573
g16
(lp574
S'k'
asg18
S'N'
sS'.thisRepN'
p575
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p576
I5
sS'.thisN'
p577
I65
sS'.thisIndex'
p578
I6
sg15
(lp579
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp580
g16
(lp581
S'd'
asg18
S'N'
sS'.thisRepN'
p582
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p583
I6
sS'.thisN'
p584
I66
sS'.thisIndex'
p585
I10
sg15
(lp586
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I10
sa(dp587
g16
(lp588
S'k'
asg18
S'N'
sS'.thisRepN'
p589
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p590
I7
sS'.thisN'
p591
I67
sS'.thisIndex'
p592
I0
sg15
(lp593
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I0
sa(dp594
g16
(lp595
S'k'
asg18
S'N'
sS'.thisRepN'
p596
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p597
I8
sS'.thisN'
p598
I68
sS'.thisIndex'
p599
I14
sg15
(lp600
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp601
g16
(lp602
S'k'
asg18
S'N'
sS'.thisRepN'
p603
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p604
I9
sS'.thisN'
p605
I69
sS'.thisIndex'
p606
I4
sg15
(lp607
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp608
g16
(lp609
S'k'
asg18
S'Y'
sS'.thisRepN'
p610
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p611
I10
sS'.thisN'
p612
I70
sS'.thisIndex'
p613
I7
sg15
(lp614
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp615
g16
(lp616
S'd'
asg18
S'N'
sS'.thisRepN'
p617
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p618
I11
sS'.thisN'
p619
I71
sS'.thisIndex'
p620
I3
sg15
(lp621
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp622
g16
(lp623
S'd'
asg18
S'Y'
sS'.thisRepN'
p624
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p625
I12
sS'.thisN'
p626
I72
sS'.thisIndex'
p627
I8
sg15
(lp628
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I8
sa(dp629
g16
(lp630
S'd'
asg18
S'N'
sS'.thisRepN'
p631
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p632
I13
sS'.thisN'
p633
I73
sS'.thisIndex'
p634
I2
sg15
(lp635
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp636
g16
(lp637
S'k'
asg18
S'N'
sS'.thisRepN'
p638
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p639
I14
sS'.thisN'
p640
I74
sS'.thisIndex'
p641
I5
sg15
(lp642
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp643
S'space'
p644
asg95
I5
sa(dp645
g16
(lp646
S'd'
asg18
S'Y'
sS'.thisRepN'
p647
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p648
I0
sS'.thisN'
p649
I75
sS'.thisIndex'
p650
I1
sg15
(lp651
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp652
S'space'
p653
asg95
I1
sa(dp654
g16
(lp655
S'k'
asg18
S'Y'
sS'.thisRepN'
p656
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p657
I1
sS'.thisN'
p658
I76
sS'.thisIndex'
p659
I4
sg15
(lp660
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp661
S'space'
p662
asg95
I4
sa(dp663
g16
(lp664
S'k'
asg18
S'Y'
sS'.thisRepN'
p665
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p666
I2
sS'.thisN'
p667
I77
sS'.thisIndex'
p668
I6
sg15
(lp669
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp670
S'space'
p671
asg95
I6
sa(dp672
g16
(lp673
S'd'
asg18
S'Y'
sS'.thisRepN'
p674
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p675
I3
sS'.thisN'
p676
I78
sS'.thisIndex'
p677
I3
sg15
(lp678
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp679
S'space'
p680
asg95
I3
sa(dp681
g16
(lp682
S'd'
asg18
S'N'
sS'.thisRepN'
p683
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p684
I4
sS'.thisN'
p685
I79
sS'.thisIndex'
p686
I6
sg15
(lp687
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp688
g16
(lp689
S'd'
asg18
S'Y'
sS'.thisRepN'
p690
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p691
I5
sS'.thisN'
p692
I80
sS'.thisIndex'
p693
I13
sg15
(lp694
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I13
sa(dp695
g16
(lp696
S'k'
asg18
S'N'
sS'.thisRepN'
p697
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p698
I6
sS'.thisN'
p699
I81
sS'.thisIndex'
p700
I4
sg15
(lp701
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp702
g16
(lp703
S'd'
asg18
S'N'
sS'.thisRepN'
p704
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p705
I7
sS'.thisN'
p706
I82
sS'.thisIndex'
p707
I9
sg15
(lp708
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp709
g16
(lp710
S'k'
asg18
S'Y'
sS'.thisRepN'
p711
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p712
I8
sS'.thisN'
p713
I83
sS'.thisIndex'
p714
I6
sg15
(lp715
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp716
g16
(lp717
S'k'
asg18
S'N'
sS'.thisRepN'
p718
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p719
I9
sS'.thisN'
p720
I84
sS'.thisIndex'
p721
I4
sg15
(lp722
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp723
g16
(lp724
S'd'
asg18
S'N'
sS'.thisRepN'
p725
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p726
I10
sS'.thisN'
p727
I85
sS'.thisIndex'
p728
I4
sg15
(lp729
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp730
g16
(lp731
S'k'
asg18
S'Y'
sS'.thisRepN'
p732
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p733
I11
sS'.thisN'
p734
I86
sS'.thisIndex'
p735
I14
sg15
(lp736
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp737
S'space'
p738
asg95
I14
sa(dp739
g16
(lp740
S'd'
asg18
S'Y'
sS'.thisRepN'
p741
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p742
I12
sS'.thisN'
p743
I87
sS'.thisIndex'
p744
I12
sg15
(lp745
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp746
S'space'
p747
asg95
I12
sa(dp748
g16
(lp749
S'd'
asg18
S'N'
sS'.thisRepN'
p750
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p751
I13
sS'.thisN'
p752
I88
sS'.thisIndex'
p753
I7
sg15
(lp754
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp755
S'd'
asg95
I7
sa(dp756
g16
(lp757
S'k'
asg18
S'N'
sS'.thisRepN'
p758
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p759
I14
sS'.thisN'
p760
I89
sS'.thisIndex'
p761
I12
sg15
(lp762
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp763
g16
(lp764
S'd'
asg18
S'Y'
sS'.thisRepN'
p765
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p766
I0
sS'.thisN'
p767
I90
sS'.thisIndex'
p768
I4
sg15
(lp769
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp770
S'space'
p771
asg95
I4
sa(dp772
g16
(lp773
S'd'
asg18
S'Y'
sS'.thisRepN'
p774
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p775
I1
sS'.thisN'
p776
I91
sS'.thisIndex'
p777
I6
sg15
(lp778
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp779
S'space'
p780
asg95
I6
sa(dp781
g16
(lp782
S'k'
asg18
S'N'
sS'.thisRepN'
p783
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p784
I2
sS'.thisN'
p785
I92
sS'.thisIndex'
p786
I7
sg15
(lp787
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I7
sa(dp788
g16
(lp789
S'd'
asg18
S'Y'
sS'.thisRepN'
p790
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p791
I3
sS'.thisN'
p792
I93
sS'.thisIndex'
p793
I9
sg15
(lp794
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp795
S'space'
p796
asg95
I9
sa(dp797
g16
(lp798
S'd'
asg18
S'N'
sS'.thisRepN'
p799
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p800
I4
sS'.thisN'
p801
I94
sS'.thisIndex'
p802
I13
sg15
(lp803
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp804
S'd'
asg95
I13
sa(dp805
g16
(lp806
S'd'
asg18
S'N'
sS'.thisRepN'
p807
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p808
I5
sS'.thisN'
p809
I95
sS'.thisIndex'
p810
I8
sg15
(lp811
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I8
sa(dp812
g16
(lp813
S'd'
asg18
S'Y'
sS'.thisRepN'
p814
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p815
I6
sS'.thisN'
p816
I96
sS'.thisIndex'
p817
I1
sg15
(lp818
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp819
S'space'
p820
asg95
I1
sa(dp821
g16
(lp822
S'd'
asg18
S'N'
sS'.thisRepN'
p823
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p824
I7
sS'.thisN'
p825
I97
sS'.thisIndex'
p826
I9
sg15
(lp827
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp828
g16
(lp829
S'k'
asg18
S'N'
sS'.thisRepN'
p830
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p831
I8
sS'.thisN'
p832
I98
sS'.thisIndex'
p833
I11
sg15
(lp834
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I11
sa(dp835
g16
(lp836
S'k'
asg18
S'N'
sg22
I35
sS'.thisN'
p837
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p838
I9
sS'.thisRepN'
p839
I6
sg21
I26
sS'.thisIndex'
p840
I3
sg23
I21
sg15
(lp841
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp842
g16
(lp843
S'd'
asg95
I9
sS'.thisRepN'
p844
I6
sg30
VF
sg31
g32
sS'.thisTrialN'
p845
I10
sS'.thisN'
p846
I100
sS'.thisIndex'
p847
I9
sg15
(lp848
S'd'
asg17
S'Y'
sg14
I3
sa(dp849
g16
(lp850
S'd'
asg95
I8
sS'.thisRepN'
p851
I6
sg30
VF
sg31
g32
sS'.thisTrialN'
p852
I11
sS'.thisN'
p853
I101
sS'.thisIndex'
p854
I8
sg15
(lp855
S'k'
asg17
S'N'
sg14
I3
sa(dp856
g16
(lp857
S'k'
asg18
S'Y'
sS'.thisRepN'
p858
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p859
I12
sS'.thisN'
p860
I102
sS'.thisIndex'
p861
I1
sg15
(lp862
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp863
g16
(lp864
S'k'
asg18
S'Y'
sS'.thisRepN'
p865
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p866
I13
sS'.thisN'
p867
I103
sS'.thisIndex'
p868
I12
sg15
(lp869
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp870
g16
(lp871
S'k'
asg18
S'Y'
sS'.thisRepN'
p872
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p873
I14
sS'.thisN'
p874
I104
sS'.thisIndex'
p875
I10
sg15
(lp876
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp877
S'space'
p878
asg95
I10
sa(dp879
g16
(lp880
S'k'
asg18
S'Y'
sS'.thisRepN'
p881
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p882
I0
sS'.thisN'
p883
I105
sS'.thisIndex'
p884
I1
sg15
(lp885
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp886
g16
(lp887
S'd'
asg18
S'N'
sS'.thisRepN'
p888
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p889
I1
sS'.thisN'
p890
I106
sS'.thisIndex'
p891
I2
sg15
(lp892
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp893
g16
(lp894
S'k'
asg18
S'Y'
sS'.thisRepN'
p895
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p896
I2
sS'.thisN'
p897
I107
sS'.thisIndex'
p898
I1
sg15
(lp899
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp900
S'space'
p901
asg95
I1
sa(dp902
g16
(lp903
S'k'
asg18
S'Y'
sS'.thisRepN'
p904
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p905
I3
sS'.thisN'
p906
I108
sS'.thisIndex'
p907
I0
sg15
(lp908
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp909
S'space'
p910
asg95
I0
sa(dp911
g16
(lp912
S'k'
asg18
S'N'
sS'.thisRepN'
p913
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p914
I4
sS'.thisN'
p915
I109
sS'.thisIndex'
p916
I5
sg15
(lp917
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I5
sa(dp918
g16
(lp919
S'd'
asg18
S'Y'
sS'.thisRepN'
p920
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p921
I5
sS'.thisN'
p922
I110
sS'.thisIndex'
p923
I13
sg15
(lp924
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp925
S'space'
p926
asg95
I13
sa(dp927
g16
(lp928
S'd'
asg18
S'N'
sS'.thisRepN'
p929
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p930
I6
sS'.thisN'
p931
I111
sS'.thisIndex'
p932
I13
sg15
(lp933
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp934
g16
(lp935
S'k'
asg18
S'N'
sS'.thisRepN'
p936
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p937
I7
sS'.thisN'
p938
I112
sS'.thisIndex'
p939
I13
sg15
(lp940
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp941
g16
(lp942
S'd'
asg18
S'Y'
sS'.thisRepN'
p943
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p944
I8
sS'.thisN'
p945
I113
sS'.thisIndex'
p946
I13
sg15
(lp947
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp948
S'space'
p949
asg95
I13
sa(dp950
g16
(lp951
S'k'
asg18
S'Y'
sS'.thisRepN'
p952
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p953
I9
sS'.thisN'
p954
I114
sS'.thisIndex'
p955
I9
sg15
(lp956
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp957
S'space'
p958
asg95
I9
sa(dp959
g16
(lp960
S'd'
asg18
S'Y'
sS'.thisRepN'
p961
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p962
I10
sS'.thisN'
p963
I115
sS'.thisIndex'
p964
I10
sg15
(lp965
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp966
S'space'
p967
asg95
I10
sa(dp968
g16
(lp969
S'k'
asg18
S'Y'
sS'.thisRepN'
p970
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p971
I11
sS'.thisN'
p972
I116
sS'.thisIndex'
p973
I7
sg15
(lp974
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp975
g16
(lp976
S'd'
asg18
S'N'
sS'.thisRepN'
p977
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p978
I12
sS'.thisN'
p979
I117
sS'.thisIndex'
p980
I2
sg15
(lp981
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp982
S'space'
p983
asg95
I2
sa(dp984
g16
(lp985
S'k'
asg18
S'N'
sS'.thisRepN'
p986
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p987
I13
sS'.thisN'
p988
I118
sS'.thisIndex'
p989
I13
sg15
(lp990
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp991
g16
(lp992
S'd'
asg18
S'N'
sS'.thisRepN'
p993
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p994
I14
sS'.thisN'
p995
I119
sS'.thisIndex'
p996
I6
sg15
(lp997
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp998
g16
(lp999
S'k'
asg18
S'Y'
sS'.thisRepN'
p1000
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1001
I0
sS'.thisN'
p1002
I120
sS'.thisIndex'
p1003
I8
sg15
(lp1004
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1005
g16
(lp1006
S'k'
asg18
S'Y'
sS'.thisRepN'
p1007
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1008
I1
sS'.thisN'
p1009
I121
sS'.thisIndex'
p1010
I6
sg15
(lp1011
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1012
g16
(lp1013
S'k'
asg18
S'Y'
sS'.thisRepN'
p1014
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1015
I2
sS'.thisN'
p1016
I122
sS'.thisIndex'
p1017
I4
sg15
(lp1018
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp1019
g16
(lp1020
S'd'
asg18
S'Y'
sS'.thisRepN'
p1021
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1022
I3
sS'.thisN'
p1023
I123
sS'.thisIndex'
p1024
I7
sg15
(lp1025
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp1026
g16
(lp1027
S'd'
asg18
S'Y'
sS'.thisRepN'
p1028
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1029
I4
sS'.thisN'
p1030
I124
sS'.thisIndex'
p1031
I5
sg15
(lp1032
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I5
sa(dp1033
g16
(lp1034
S'd'
asg18
S'N'
sS'.thisRepN'
p1035
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1036
I5
sS'.thisN'
p1037
I125
sS'.thisIndex'
p1038
I4
sg15
(lp1039
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1040
g16
(lp1041
S'k'
asg18
S'N'
sS'.thisRepN'
p1042
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1043
I6
sS'.thisN'
p1044
I126
sS'.thisIndex'
p1045
I3
sg15
(lp1046
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1047
g16
(lp1048
S'd'
asg18
S'Y'
sS'.thisRepN'
p1049
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1050
I7
sS'.thisN'
p1051
I127
sS'.thisIndex'
p1052
I14
sg15
(lp1053
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1054
S'space'
p1055
asg95
I14
sa(dp1056
g16
(lp1057
S'k'
asg18
S'Y'
sS'.thisRepN'
p1058
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1059
I8
sS'.thisN'
p1060
I128
sS'.thisIndex'
p1061
I3
sg15
(lp1062
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1063
g16
(lp1064
S'd'
asg18
S'N'
sS'.thisRepN'
p1065
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1066
I9
sS'.thisN'
p1067
I129
sS'.thisIndex'
p1068
I13
sg15
(lp1069
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1070
g16
(lp1071
S'd'
asg18
S'Y'
sS'.thisRepN'
p1072
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1073
I10
sS'.thisN'
p1074
I130
sS'.thisIndex'
p1075
I3
sg15
(lp1076
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1077
g16
(lp1078
S'd'
asg18
S'Y'
sS'.thisRepN'
p1079
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1080
I11
sS'.thisN'
p1081
I131
sS'.thisIndex'
p1082
I8
sg15
(lp1083
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1084
S'space'
p1085
asg95
I8
sa(dp1086
g16
(lp1087
S'd'
asg18
S'N'
sS'.thisRepN'
p1088
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1089
I12
sS'.thisN'
p1090
I132
sS'.thisIndex'
p1091
I5
sg15
(lp1092
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1093
g16
(lp1094
S'd'
asg18
S'Y'
sS'.thisRepN'
p1095
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1096
I13
sS'.thisN'
p1097
I133
sS'.thisIndex'
p1098
I5
sg15
(lp1099
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1100
S'space'
p1101
asg95
I5
sa(dp1102
g16
(lp1103
S'k'
asg18
S'N'
sS'.thisRepN'
p1104
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1105
I14
sS'.thisN'
p1106
I134
sS'.thisIndex'
p1107
I8
sg15
(lp1108
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I8
sa(dp1109
g16
(lp1110
S'k'
asg18
S'N'
sS'.thisRepN'
p1111
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1112
I0
sS'.thisN'
p1113
I135
sS'.thisIndex'
p1114
I1
sg15
(lp1115
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1116
g16
(lp1117
S'd'
asg18
S'N'
sS'.thisRepN'
p1118
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1119
I1
sS'.thisN'
p1120
I136
sS'.thisIndex'
p1121
I5
sg15
(lp1122
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1123
S'space'
p1124
asg95
I5
sa(dp1125
g16
(lp1126
S'd'
asg18
S'Y'
sS'.thisRepN'
p1127
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1128
I2
sS'.thisN'
p1129
I137
sS'.thisIndex'
p1130
I6
sg15
(lp1131
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp1132
g16
(lp1133
S'd'
asg18
S'N'
sS'.thisRepN'
p1134
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1135
I3
sS'.thisN'
p1136
I138
sS'.thisIndex'
p1137
I3
sg15
(lp1138
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1139
S'd'
asg95
I3
sa(dp1140
g16
(lp1141
S'd'
asg18
S'Y'
sS'.thisRepN'
p1142
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1143
I4
sS'.thisN'
p1144
I139
sS'.thisIndex'
p1145
I13
sg15
(lp1146
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1147
g16
(lp1148
S'k'
asg18
S'N'
sS'.thisRepN'
p1149
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1150
I5
sS'.thisN'
p1151
I140
sS'.thisIndex'
p1152
I9
sg15
(lp1153
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp1154
g16
(lp1155
S'd'
asg18
S'Y'
sS'.thisRepN'
p1156
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1157
I6
sS'.thisN'
p1158
I141
sS'.thisIndex'
p1159
I2
sg15
(lp1160
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1161
g16
(lp1162
S'd'
asg18
S'N'
sS'.thisRepN'
p1163
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1164
I7
sS'.thisN'
p1165
I142
sS'.thisIndex'
p1166
I4
sg15
(lp1167
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1168
S'space'
p1169
asg95
I4
sa(dp1170
g16
(lp1171
S'k'
asg18
S'Y'
sS'.thisRepN'
p1172
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1173
I8
sS'.thisN'
p1174
I143
sS'.thisIndex'
p1175
I3
sg15
(lp1176
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1177
g16
(lp1178
S'd'
asg18
S'N'
sS'.thisRepN'
p1179
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1180
I9
sS'.thisN'
p1181
I144
sS'.thisIndex'
p1182
I13
sg15
(lp1183
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I13
sa(dp1184
g16
(lp1185
S'd'
asg18
S'N'
sS'.thisRepN'
p1186
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1187
I10
sS'.thisN'
p1188
I145
sS'.thisIndex'
p1189
I7
sg15
(lp1190
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1191
g16
(lp1192
S'd'
asg18
S'N'
sS'.thisRepN'
p1193
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1194
I11
sS'.thisN'
p1195
I146
sS'.thisIndex'
p1196
I1
sg15
(lp1197
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp1198
g16
(lp1199
S'k'
asg18
S'N'
sS'.thisRepN'
p1200
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1201
I12
sS'.thisN'
p1202
I147
sS'.thisIndex'
p1203
I1
sg15
(lp1204
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp1205
g16
(lp1206
S'k'
asg18
S'N'
sS'.thisRepN'
p1207
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1208
I13
sS'.thisN'
p1209
I148
sS'.thisIndex'
p1210
I10
sg15
(lp1211
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1212
g16
(lp1213
S'k'
asg18
S'N'
sg22
I29
sS'.thisN'
p1214
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1215
I14
sS'.thisRepN'
p1216
I9
sg21
I24
sS'.thisIndex'
p1217
I1
sg23
I25
sg15
(lp1218
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp1219
g16
(lp1220
S'k'
asg95
I10
sS'.thisRepN'
p1221
I10
sg30
VF
sg31
g32
sS'.thisTrialN'
p1222
I0
sS'.thisN'
p1223
I150
sS'.thisIndex'
p1224
I10
sg15
(lp1225
S'k'
asg17
S'Y'
sg14
I4
sa(dp1226
g16
(lp1227
S'd'
asg95
I3
sS'.thisRepN'
p1228
I10
sg30
VF
sg31
g32
sS'.thisTrialN'
p1229
I1
sS'.thisN'
p1230
I151
sS'.thisIndex'
p1231
I3
sg15
(lp1232
S'd'
asg17
S'Y'
sg14
I4
sa(dp1233
g16
(lp1234
S'k'
asg18
S'N'
sS'.thisRepN'
p1235
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1236
I2
sS'.thisN'
p1237
I152
sS'.thisIndex'
p1238
I6
sg15
(lp1239
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I6
sa(dp1240
g16
(lp1241
S'd'
asg18
S'Y'
sS'.thisRepN'
p1242
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1243
I3
sS'.thisN'
p1244
I153
sS'.thisIndex'
p1245
I12
sg15
(lp1246
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1247
g16
(lp1248
S'k'
asg18
S'Y'
sS'.thisRepN'
p1249
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1250
I4
sS'.thisN'
p1251
I154
sS'.thisIndex'
p1252
I7
sg15
(lp1253
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1254
S'space'
p1255
asg95
I7
sa(dp1256
g16
(lp1257
S'd'
asg18
S'N'
sS'.thisRepN'
p1258
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1259
I5
sS'.thisN'
p1260
I155
sS'.thisIndex'
p1261
I0
sg15
(lp1262
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1263
g16
(lp1264
S'd'
asg18
S'N'
sS'.thisRepN'
p1265
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1266
I6
sS'.thisN'
p1267
I156
sS'.thisIndex'
p1268
I11
sg15
(lp1269
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I11
sa(dp1270
g16
(lp1271
S'k'
asg18
S'N'
sS'.thisRepN'
p1272
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1273
I7
sS'.thisN'
p1274
I157
sS'.thisIndex'
p1275
I12
sg15
(lp1276
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I12
sa(dp1277
g16
(lp1278
S'd'
asg18
S'N'
sS'.thisRepN'
p1279
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1280
I8
sS'.thisN'
p1281
I158
sS'.thisIndex'
p1282
I2
sg15
(lp1283
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1284
g16
(lp1285
S'd'
asg18
S'Y'
sS'.thisRepN'
p1286
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1287
I9
sS'.thisN'
p1288
I159
sS'.thisIndex'
p1289
I14
sg15
(lp1290
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I14
sa(dp1291
g16
(lp1292
S'd'
asg18
S'N'
sS'.thisRepN'
p1293
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1294
I10
sS'.thisN'
p1295
I160
sS'.thisIndex'
p1296
I10
sg15
(lp1297
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I10
sa(dp1298
g16
(lp1299
S'd'
asg18
S'N'
sS'.thisRepN'
p1300
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1301
I11
sS'.thisN'
p1302
I161
sS'.thisIndex'
p1303
I0
sg15
(lp1304
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1305
g16
(lp1306
S'k'
asg18
S'N'
sS'.thisRepN'
p1307
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1308
I12
sS'.thisN'
p1309
I162
sS'.thisIndex'
p1310
I13
sg15
(lp1311
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I13
sa(dp1312
g16
(lp1313
S'd'
asg18
S'Y'
sS'.thisRepN'
p1314
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1315
I13
sS'.thisN'
p1316
I163
sS'.thisIndex'
p1317
I3
sg15
(lp1318
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1319
S'space'
p1320
asg95
I3
sa(dp1321
g16
(lp1322
S'k'
asg18
S'N'
sS'.thisRepN'
p1323
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1324
I14
sS'.thisN'
p1325
I164
sS'.thisIndex'
p1326
I4
sg15
(lp1327
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I4
sa(dp1328
g16
(lp1329
S'k'
asg18
S'N'
sS'.thisRepN'
p1330
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1331
I0
sS'.thisN'
p1332
I165
sS'.thisIndex'
p1333
I6
sg15
(lp1334
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1335
g16
(lp1336
S'd'
asg18
S'Y'
sS'.thisRepN'
p1337
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1338
I1
sS'.thisN'
p1339
I166
sS'.thisIndex'
p1340
I8
sg15
(lp1341
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1342
g16
(lp1343
S'd'
asg18
S'N'
sS'.thisRepN'
p1344
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1345
I2
sS'.thisN'
p1346
I167
sS'.thisIndex'
p1347
I12
sg15
(lp1348
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1349
g16
(lp1350
S'd'
asg18
S'Y'
sS'.thisRepN'
p1351
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1352
I3
sS'.thisN'
p1353
I168
sS'.thisIndex'
p1354
I0
sg15
(lp1355
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1356
S'space'
p1357
asg95
I0
sa(dp1358
g16
(lp1359
S'k'
asg18
S'Y'
sS'.thisRepN'
p1360
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1361
I4
sS'.thisN'
p1362
I169
sS'.thisIndex'
p1363
I4
sg15
(lp1364
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1365
S'space'
p1366
asg95
I4
sa(dp1367
g16
(lp1368
S'd'
asg18
S'Y'
sS'.thisRepN'
p1369
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1370
I5
sS'.thisN'
p1371
I170
sS'.thisIndex'
p1372
I4
sg15
(lp1373
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1374
g16
(lp1375
S'd'
asg18
S'N'
sS'.thisRepN'
p1376
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1377
I6
sS'.thisN'
p1378
I171
sS'.thisIndex'
p1379
I10
sg15
(lp1380
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1381
S'space'
p1382
asg95
I10
sa(dp1383
g16
(lp1384
S'k'
asg18
S'N'
sS'.thisRepN'
p1385
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1386
I7
sS'.thisN'
p1387
I172
sS'.thisIndex'
p1388
I12
sg15
(lp1389
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1390
S'space'
p1391
asg95
I12
sa(dp1392
g16
(lp1393
S'd'
asg18
S'Y'
sS'.thisRepN'
p1394
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1395
I8
sS'.thisN'
p1396
I173
sS'.thisIndex'
p1397
I10
sg15
(lp1398
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1399
S'space'
p1400
asg95
I10
sa(dp1401
g16
(lp1402
S'd'
asg18
S'N'
sS'.thisRepN'
p1403
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1404
I9
sS'.thisN'
p1405
I174
sS'.thisIndex'
p1406
I9
sg15
(lp1407
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1408
g16
(lp1409
S'k'
asg18
S'Y'
sS'.thisRepN'
p1410
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1411
I10
sS'.thisN'
p1412
I175
sS'.thisIndex'
p1413
I13
sg15
(lp1414
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1415
S'space'
p1416
asg95
I13
sa(dp1417
g16
(lp1418
S'k'
asg18
S'Y'
sS'.thisRepN'
p1419
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1420
I11
sS'.thisN'
p1421
I176
sS'.thisIndex'
p1422
I10
sg15
(lp1423
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1424
g16
(lp1425
S'd'
asg18
S'Y'
sS'.thisRepN'
p1426
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1427
I12
sS'.thisN'
p1428
I177
sS'.thisIndex'
p1429
I0
sg15
(lp1430
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1431
S'space'
p1432
asg95
I0
sa(dp1433
g16
(lp1434
S'd'
asg18
S'Y'
sS'.thisRepN'
p1435
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1436
I13
sS'.thisN'
p1437
I178
sS'.thisIndex'
p1438
I2
sg15
(lp1439
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1440
g16
(lp1441
S'd'
asg18
S'N'
sS'.thisRepN'
p1442
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1443
I14
sS'.thisN'
p1444
I179
sS'.thisIndex'
p1445
I13
sg15
(lp1446
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1447
g16
(lp1448
S'd'
asg18
S'N'
sS'.thisRepN'
p1449
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1450
I0
sS'.thisN'
p1451
I180
sS'.thisIndex'
p1452
I6
sg15
(lp1453
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1454
g16
(lp1455
S'k'
asg18
S'N'
sS'.thisRepN'
p1456
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1457
I1
sS'.thisN'
p1458
I181
sS'.thisIndex'
p1459
I0
sg15
(lp1460
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1461
g16
(lp1462
S'k'
asg18
S'Y'
sS'.thisRepN'
p1463
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1464
I2
sS'.thisN'
p1465
I182
sS'.thisIndex'
p1466
I2
sg15
(lp1467
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1468
S'space'
p1469
asg95
I2
sa(dp1470
g16
(lp1471
S'd'
asg18
S'N'
sS'.thisRepN'
p1472
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1473
I3
sS'.thisN'
p1474
I183
sS'.thisIndex'
p1475
I11
sg15
(lp1476
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1477
g16
(lp1478
S'k'
asg18
S'N'
sS'.thisRepN'
p1479
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1480
I4
sS'.thisN'
p1481
I184
sS'.thisIndex'
p1482
I4
sg15
(lp1483
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1484
g16
(lp1485
S'k'
asg18
S'Y'
sS'.thisRepN'
p1486
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1487
I5
sS'.thisN'
p1488
I185
sS'.thisIndex'
p1489
I12
sg15
(lp1490
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1491
S'space'
p1492
asg95
I12
sa(dp1493
g16
(lp1494
S'k'
asg18
S'Y'
sS'.thisRepN'
p1495
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1496
I6
sS'.thisN'
p1497
I186
sS'.thisIndex'
p1498
I5
sg15
(lp1499
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1500
g16
(lp1501
S'd'
asg18
S'Y'
sS'.thisRepN'
p1502
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1503
I7
sS'.thisN'
p1504
I187
sS'.thisIndex'
p1505
I11
sg15
(lp1506
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1507
S'space'
p1508
asg95
I11
sa(dp1509
g16
(lp1510
S'd'
asg18
S'N'
sS'.thisRepN'
p1511
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1512
I8
sS'.thisN'
p1513
I188
sS'.thisIndex'
p1514
I1
sg15
(lp1515
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1516
g16
(lp1517
S'k'
asg18
S'N'
sS'.thisRepN'
p1518
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1519
I9
sS'.thisN'
p1520
I189
sS'.thisIndex'
p1521
I9
sg15
(lp1522
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1523
g16
(lp1524
S'k'
asg18
S'N'
sS'.thisRepN'
p1525
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1526
I10
sS'.thisN'
p1527
I190
sS'.thisIndex'
p1528
I3
sg15
(lp1529
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1530
g16
(lp1531
S'k'
asg18
S'Y'
sS'.thisRepN'
p1532
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1533
I11
sS'.thisN'
p1534
I191
sS'.thisIndex'
p1535
I3
sg15
(lp1536
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1537
S'space'
p1538
asg95
I3
sa(dp1539
g16
(lp1540
S'k'
asg18
S'N'
sS'.thisRepN'
p1541
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1542
I12
sS'.thisN'
p1543
I192
sS'.thisIndex'
p1544
I6
sg15
(lp1545
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1546
S'space'
p1547
asg95
I6
sa(dp1548
g16
(lp1549
S'd'
asg18
S'N'
sS'.thisRepN'
p1550
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1551
I13
sS'.thisN'
p1552
I193
sS'.thisIndex'
p1553
I14
sg15
(lp1554
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I14
sa(dp1555
g16
(lp1556
S'k'
asg18
S'Y'
sS'.thisRepN'
p1557
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1558
I14
sS'.thisN'
p1559
I194
sS'.thisIndex'
p1560
I2
sg15
(lp1561
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1562
S'space'
p1563
asg95
I2
sa(dp1564
g16
(lp1565
S'd'
asg18
S'Y'
sS'.thisRepN'
p1566
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1567
I0
sS'.thisN'
p1568
I195
sS'.thisIndex'
p1569
I8
sg15
(lp1570
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1571
g16
(lp1572
S'd'
asg18
S'Y'
sS'.thisRepN'
p1573
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1574
I1
sS'.thisN'
p1575
I196
sS'.thisIndex'
p1576
I0
sg15
(lp1577
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1578
S'space'
p1579
asg95
I0
sa(dp1580
g16
(lp1581
S'd'
asg18
S'N'
sS'.thisRepN'
p1582
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1583
I2
sS'.thisN'
p1584
I197
sS'.thisIndex'
p1585
I3
sg15
(lp1586
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1587
g16
(lp1588
S'd'
asg18
S'N'
sS'.thisRepN'
p1589
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1590
I3
sS'.thisN'
p1591
I198
sS'.thisIndex'
p1592
I1
sg15
(lp1593
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I1
sa(dp1594
g16
(lp1595
S'k'
asg18
S'N'
sg22
I37
sS'.thisN'
p1596
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1597
I4
sS'.thisRepN'
p1598
I13
sg21
I40
sS'.thisIndex'
p1599
I9
sg23
I21
sg15
(lp1600
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1601
g16
(lp1602
S'k'
asg95
I13
sS'.thisRepN'
p1603
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1604
I5
sS'.thisN'
p1605
I200
sS'.thisIndex'
p1606
I13
sg15
(lp1607
S'd'
asg17
S'N'
sg14
I5
sa(dp1608
g16
(lp1609
S'd'
asg95
I2
sS'.thisRepN'
p1610
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1611
I6
sS'.thisN'
p1612
I201
sS'.thisIndex'
p1613
I2
sg15
(lp1614
S'd'
asg17
S'Y'
sg14
I5
sa(dp1615
g16
(lp1616
S'd'
asg18
S'N'
sS'.thisRepN'
p1617
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1618
I7
sS'.thisN'
p1619
I202
sS'.thisIndex'
p1620
I14
sg15
(lp1621
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I14
sa(dp1622
g16
(lp1623
S'k'
asg18
S'Y'
sS'.thisRepN'
p1624
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1625
I8
sS'.thisN'
p1626
I203
sS'.thisIndex'
p1627
I8
sg15
(lp1628
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1629
g16
(lp1630
S'k'
asg18
S'Y'
sS'.thisRepN'
p1631
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1632
I9
sS'.thisN'
p1633
I204
sS'.thisIndex'
p1634
I5
sg15
(lp1635
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp1636
g16
(lp1637
S'k'
asg18
S'Y'
sS'.thisRepN'
p1638
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1639
I10
sS'.thisN'
p1640
I205
sS'.thisIndex'
p1641
I5
sg15
(lp1642
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1643
g16
(lp1644
S'd'
asg18
S'N'
sS'.thisRepN'
p1645
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1646
I11
sS'.thisN'
p1647
I206
sS'.thisIndex'
p1648
I10
sg15
(lp1649
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1650
g16
(lp1651
S'd'
asg18
S'N'
sS'.thisRepN'
p1652
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1653
I12
sS'.thisN'
p1654
I207
sS'.thisIndex'
p1655
I2
sg15
(lp1656
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1657
g16
(lp1658
S'd'
asg18
S'N'
sS'.thisRepN'
p1659
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1660
I13
sS'.thisN'
p1661
I208
sS'.thisIndex'
p1662
I10
sg15
(lp1663
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1664
g16
(lp1665
S'd'
asg18
S'Y'
sS'.thisRepN'
p1666
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1667
I14
sS'.thisN'
p1668
I209
sS'.thisIndex'
p1669
I11
sg15
(lp1670
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1671
S'space'
p1672
asg95
I11
sa(dp1673
g16
(lp1674
S'k'
asg18
S'N'
sS'.thisRepN'
p1675
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1676
I0
sS'.thisN'
p1677
I210
sS'.thisIndex'
p1678
I2
sg15
(lp1679
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1680
g16
(lp1681
S'd'
asg18
S'Y'
sS'.thisRepN'
p1682
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1683
I1
sS'.thisN'
p1684
I211
sS'.thisIndex'
p1685
I12
sg15
(lp1686
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1687
g16
(lp1688
S'd'
asg18
S'N'
sS'.thisRepN'
p1689
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1690
I2
sS'.thisN'
p1691
I212
sS'.thisIndex'
p1692
I2
sg15
(lp1693
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I2
sa(dp1694
g16
(lp1695
S'd'
asg18
S'N'
sS'.thisRepN'
p1696
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1697
I3
sS'.thisN'
p1698
I213
sS'.thisIndex'
p1699
I14
sg15
(lp1700
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1701
g16
(lp1702
S'd'
asg18
S'Y'
sS'.thisRepN'
p1703
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1704
I4
sS'.thisN'
p1705
I214
sS'.thisIndex'
p1706
I2
sg15
(lp1707
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1708
g16
(lp1709
S'd'
asg18
S'N'
sS'.thisRepN'
p1710
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1711
I5
sS'.thisN'
p1712
I215
sS'.thisIndex'
p1713
I5
sg15
(lp1714
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1715
g16
(lp1716
S'd'
asg18
S'N'
sS'.thisRepN'
p1717
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1718
I6
sS'.thisN'
p1719
I216
sS'.thisIndex'
p1720
I13
sg15
(lp1721
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1722
S'space'
p1723
asg95
I13
sa(dp1724
g16
(lp1725
S'k'
asg18
S'Y'
sS'.thisRepN'
p1726
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1727
I7
sS'.thisN'
p1728
I217
sS'.thisIndex'
p1729
I5
sg15
(lp1730
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1731
g16
(lp1732
S'k'
asg18
S'N'
sS'.thisRepN'
p1733
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1734
I8
sS'.thisN'
p1735
I218
sS'.thisIndex'
p1736
I3
sg15
(lp1737
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1738
g16
(lp1739
S'd'
asg18
S'Y'
sS'.thisRepN'
p1740
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1741
I9
sS'.thisN'
p1742
I219
sS'.thisIndex'
p1743
I9
sg15
(lp1744
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1745
g16
(lp1746
S'd'
asg18
S'Y'
sS'.thisRepN'
p1747
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1748
I10
sS'.thisN'
p1749
I220
sS'.thisIndex'
p1750
I0
sg15
(lp1751
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1752
S'space'
p1753
asg95
I0
sa(dp1754
g16
(lp1755
S'k'
asg18
S'Y'
sS'.thisRepN'
p1756
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1757
I11
sS'.thisN'
p1758
I221
sS'.thisIndex'
p1759
I2
sg15
(lp1760
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1761
g16
(lp1762
S'k'
asg18
S'Y'
sS'.thisRepN'
p1763
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1764
I12
sS'.thisN'
p1765
I222
sS'.thisIndex'
p1766
I5
sg15
(lp1767
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1768
S'space'
p1769
asg95
I5
sa(dp1770
g16
(lp1771
S'k'
asg18
S'N'
sS'.thisRepN'
p1772
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1773
I13
sS'.thisN'
p1774
I223
sS'.thisIndex'
p1775
I0
sg15
(lp1776
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1777
S'space'
p1778
asg95
I0
sa(dp1779
g16
(lp1780
S'k'
asg18
S'N'
sS'.thisRepN'
p1781
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1782
I14
sS'.thisN'
p1783
I224
sS'.thisIndex'
p1784
I2
sg15
(lp1785
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1786
S'space'
p1787
asg95
I2
sa(dp1788
g16
(lp1789
S'd'
asg18
S'Y'
sS'.thisRepN'
p1790
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1791
I0
sS'.thisN'
p1792
I225
sS'.thisIndex'
p1793
I1
sg15
(lp1794
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1795
g16
(lp1796
S'k'
asg18
S'Y'
sS'.thisRepN'
p1797
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1798
I1
sS'.thisN'
p1799
I226
sS'.thisIndex'
p1800
I8
sg15
(lp1801
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1802
S'space'
p1803
asg95
I8
sa(dp1804
g16
(lp1805
S'd'
asg18
S'Y'
sS'.thisRepN'
p1806
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1807
I2
sS'.thisN'
p1808
I227
sS'.thisIndex'
p1809
I2
sg15
(lp1810
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1811
g16
(lp1812
S'k'
asg18
S'N'
sS'.thisRepN'
p1813
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1814
I3
sS'.thisN'
p1815
I228
sS'.thisIndex'
p1816
I1
sg15
(lp1817
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1818
g16
(lp1819
S'k'
asg18
S'Y'
sS'.thisRepN'
p1820
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1821
I4
sS'.thisN'
p1822
I229
sS'.thisIndex'
p1823
I14
sg15
(lp1824
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1825
S'space'
p1826
asg95
I14
sa(dp1827
g16
(lp1828
S'k'
asg18
S'Y'
sS'.thisRepN'
p1829
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1830
I5
sS'.thisN'
p1831
I230
sS'.thisIndex'
p1832
I8
sg15
(lp1833
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1834
g16
(lp1835
S'k'
asg18
S'N'
sS'.thisRepN'
p1836
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1837
I6
sS'.thisN'
p1838
I231
sS'.thisIndex'
p1839
I4
sg15
(lp1840
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I4
sa(dp1841
g16
(lp1842
S'd'
asg18
S'N'
sS'.thisRepN'
p1843
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1844
I7
sS'.thisN'
p1845
I232
sS'.thisIndex'
p1846
I14
sg15
(lp1847
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1848
g16
(lp1849
S'k'
asg18
S'Y'
sS'.thisRepN'
p1850
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1851
I8
sS'.thisN'
p1852
I233
sS'.thisIndex'
p1853
I9
sg15
(lp1854
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1855
S'space'
p1856
asg95
I9
sa(dp1857
g16
(lp1858
S'k'
asg18
S'Y'
sS'.thisRepN'
p1859
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1860
I9
sS'.thisN'
p1861
I234
sS'.thisIndex'
p1862
I2
sg15
(lp1863
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1864
g16
(lp1865
S'd'
asg18
S'N'
sS'.thisRepN'
p1866
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1867
I10
sS'.thisN'
p1868
I235
sS'.thisIndex'
p1869
I14
sg15
(lp1870
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1871
S'space'
p1872
asg95
I14
sa(dp1873
g16
(lp1874
S'k'
asg18
S'Y'
sS'.thisRepN'
p1875
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1876
I11
sS'.thisN'
p1877
I236
sS'.thisIndex'
p1878
I13
sg15
(lp1879
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1880
g16
(lp1881
S'd'
asg18
S'Y'
sS'.thisRepN'
p1882
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1883
I12
sS'.thisN'
p1884
I237
sS'.thisIndex'
p1885
I11
sg15
(lp1886
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1887
S'space'
p1888
asg95
I11
sa(dp1889
g16
(lp1890
S'k'
asg18
S'Y'
sS'.thisRepN'
p1891
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1892
I13
sS'.thisN'
p1893
I238
sS'.thisIndex'
p1894
I8
sg15
(lp1895
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1896
S'space'
p1897
asg95
I8
sa(dp1898
g16
(lp1899
S'k'
asg18
S'Y'
sS'.thisRepN'
p1900
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1901
I14
sS'.thisN'
p1902
I239
sS'.thisIndex'
p1903
I2
sg15
(lp1904
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1905
S'space'
p1906
asg95
I2
sa(dp1907
g16
(lp1908
S'k'
asg18
S'Y'
sS'.thisRepN'
p1909
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1910
I0
sS'.thisN'
p1911
I240
sS'.thisIndex'
p1912
I6
sg15
(lp1913
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1914
S'space'
p1915
asg95
I6
sa(dp1916
g16
(lp1917
S'd'
asg18
S'N'
sS'.thisRepN'
p1918
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1919
I1
sS'.thisN'
p1920
I241
sS'.thisIndex'
p1921
I9
sg15
(lp1922
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1923
g16
(lp1924
S'd'
asg18
S'Y'
sS'.thisRepN'
p1925
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1926
I2
sS'.thisN'
p1927
I242
sS'.thisIndex'
p1928
I1
sg15
(lp1929
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I1
sa(dp1930
g16
(lp1931
S'd'
asg18
S'Y'
sS'.thisRepN'
p1932
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1933
I3
sS'.thisN'
p1934
I243
sS'.thisIndex'
p1935
I1
sg15
(lp1936
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1937
g16
(lp1938
S'd'
asg18
S'N'
sS'.thisRepN'
p1939
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1940
I4
sS'.thisN'
p1941
I244
sS'.thisIndex'
p1942
I6
sg15
(lp1943
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1944
g16
(lp1945
S'd'
asg18
S'N'
sS'.thisRepN'
p1946
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1947
I5
sS'.thisN'
p1948
I245
sS'.thisIndex'
p1949
I4
sg15
(lp1950
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1951
S'space'
p1952
asg95
I4
sa(dp1953
g16
(lp1954
S'k'
asg18
S'N'
sS'.thisRepN'
p1955
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1956
I6
sS'.thisN'
p1957
I246
sS'.thisIndex'
p1958
I6
sg15
(lp1959
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1960
g16
(lp1961
S'k'
asg18
S'N'
sS'.thisRepN'
p1962
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1963
I7
sS'.thisN'
p1964
I247
sS'.thisIndex'
p1965
I10
sg15
(lp1966
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1967
S'space'
p1968
asg95
I10
sa(dp1969
g16
(lp1970
S'd'
asg18
S'N'
sS'.thisRepN'
p1971
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1972
I8
sS'.thisN'
p1973
I248
sS'.thisIndex'
p1974
I12
sg15
(lp1975
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1976
g16
(lp1977
S'd'
asg18
S'N'
sg22
I27
sS'.thisN'
p1978
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1979
I9
sS'.thisRepN'
p1980
I16
sg21
I43
sS'.thisIndex'
p1981
I14
sg23
I25
sg15
(lp1982
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1983
g16
(lp1984
S'k'
asg95
I5
sS'.thisRepN'
p1985
I16
sg30
VF
sg31
g32
sS'.thisTrialN'
p1986
I10
sS'.thisN'
p1987
I250
sS'.thisIndex'
p1988
I5
sg15
(lp1989
S'k'
asg17
S'Y'
sg14
I6
sa(dp1990
g16
(lp1991
S'k'
asg95
I14
sS'.thisRepN'
p1992
I16
sg30
VF
sg31
g32
sS'.thisTrialN'
p1993
I11
sS'.thisN'
p1994
I251
sS'.thisIndex'
p1995
I14
sg15
(lp1996
S'd'
asg17
S'N'
sg14
I6
sa(dp1997
g16
(lp1998
S'd'
asg18
S'Y'
sS'.thisRepN'
p1999
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2000
I12
sS'.thisN'
p2001
I252
sS'.thisIndex'
p2002
I11
sg15
(lp2003
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2004
g16
(lp2005
S'k'
asg18
S'N'
sS'.thisRepN'
p2006
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2007
I13
sS'.thisN'
p2008
I253
sS'.thisIndex'
p2009
I4
sg15
(lp2010
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2011
g16
(lp2012
S'k'
asg18
S'N'
sS'.thisRepN'
p2013
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2014
I14
sS'.thisN'
p2015
I254
sS'.thisIndex'
p2016
I5
sg15
(lp2017
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2018
S'space'
p2019
asg95
I5
sa(dp2020
g16
(lp2021
S'd'
asg18
S'N'
sS'.thisRepN'
p2022
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2023
I0
sS'.thisN'
p2024
I255
sS'.thisIndex'
p2025
I5
sg15
(lp2026
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2027
g16
(lp2028
S'd'
asg18
S'N'
sS'.thisRepN'
p2029
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2030
I1
sS'.thisN'
p2031
I256
sS'.thisIndex'
p2032
I13
sg15
(lp2033
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2034
g16
(lp2035
S'k'
asg18
S'N'
sS'.thisRepN'
p2036
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2037
I2
sS'.thisN'
p2038
I257
sS'.thisIndex'
p2039
I11
sg15
(lp2040
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2041
g16
(lp2042
S'd'
asg18
S'N'
sS'.thisRepN'
p2043
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2044
I3
sS'.thisN'
p2045
I258
sS'.thisIndex'
p2046
I4
sg15
(lp2047
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2048
S'space'
p2049
asg95
I4
sa(dp2050
g16
(lp2051
S'k'
asg18
S'Y'
sS'.thisRepN'
p2052
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2053
I4
sS'.thisN'
p2054
I259
sS'.thisIndex'
p2055
I0
sg15
(lp2056
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2057
S'space'
p2058
asg95
I0
sa(dp2059
g16
(lp2060
S'k'
asg18
S'N'
sS'.thisRepN'
p2061
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2062
I5
sS'.thisN'
p2063
I260
sS'.thisIndex'
p2064
I5
sg15
(lp2065
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2066
g16
(lp2067
S'k'
asg18
S'N'
sS'.thisRepN'
p2068
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2069
I6
sS'.thisN'
p2070
I261
sS'.thisIndex'
p2071
I9
sg15
(lp2072
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2073
g16
(lp2074
S'k'
asg18
S'N'
sS'.thisRepN'
p2075
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2076
I7
sS'.thisN'
p2077
I262
sS'.thisIndex'
p2078
I10
sg15
(lp2079
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2080
g16
(lp2081
S'd'
asg18
S'N'
sS'.thisRepN'
p2082
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2083
I8
sS'.thisN'
p2084
I263
sS'.thisIndex'
p2085
I9
sg15
(lp2086
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2087
S'space'
p2088
asg95
I9
sa(dp2089
g16
(lp2090
S'd'
asg18
S'Y'
sS'.thisRepN'
p2091
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2092
I9
sS'.thisN'
p2093
I264
sS'.thisIndex'
p2094
I3
sg15
(lp2095
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2096
g16
(lp2097
S'k'
asg18
S'Y'
sS'.thisRepN'
p2098
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2099
I10
sS'.thisN'
p2100
I265
sS'.thisIndex'
p2101
I9
sg15
(lp2102
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2103
S'space'
p2104
asg95
I9
sa(dp2105
g16
(lp2106
S'k'
asg18
S'N'
sS'.thisRepN'
p2107
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2108
I11
sS'.thisN'
p2109
I266
sS'.thisIndex'
p2110
I14
sg15
(lp2111
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I14
sa(dp2112
g16
(lp2113
S'd'
asg18
S'Y'
sS'.thisRepN'
p2114
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2115
I12
sS'.thisN'
p2116
I267
sS'.thisIndex'
p2117
I11
sg15
(lp2118
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2119
S'space'
p2120
asg95
I11
sa(dp2121
g16
(lp2122
S'k'
asg18
S'Y'
sS'.thisRepN'
p2123
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2124
I13
sS'.thisN'
p2125
I268
sS'.thisIndex'
p2126
I8
sg15
(lp2127
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2128
S'space'
p2129
asg95
I8
sa(dp2130
g16
(lp2131
S'd'
asg18
S'N'
sS'.thisRepN'
p2132
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2133
I14
sS'.thisN'
p2134
I269
sS'.thisIndex'
p2135
I11
sg15
(lp2136
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2137
g16
(lp2138
S'd'
asg18
S'N'
sS'.thisRepN'
p2139
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2140
I0
sS'.thisN'
p2141
I270
sS'.thisIndex'
p2142
I2
sg15
(lp2143
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2144
g16
(lp2145
S'd'
asg18
S'N'
sS'.thisRepN'
p2146
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2147
I1
sS'.thisN'
p2148
I271
sS'.thisIndex'
p2149
I14
sg15
(lp2150
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2151
S'space'
p2152
asg95
I14
sa(dp2153
g16
(lp2154
S'k'
asg18
S'Y'
sS'.thisRepN'
p2155
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2156
I2
sS'.thisN'
p2157
I272
sS'.thisIndex'
p2158
I11
sg15
(lp2159
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2160
S'space'
p2161
asg95
I11
sa(dp2162
g16
(lp2163
S'd'
asg18
S'Y'
sS'.thisRepN'
p2164
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2165
I3
sS'.thisN'
p2166
I273
sS'.thisIndex'
p2167
I8
sg15
(lp2168
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2169
S'space'
p2170
asg95
I8
sa(dp2171
g16
(lp2172
S'd'
asg18
S'Y'
sS'.thisRepN'
p2173
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2174
I4
sS'.thisN'
p2175
I274
sS'.thisIndex'
p2176
I7
sg15
(lp2177
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2178
S'space'
p2179
asg95
I7
sa(dp2180
g16
(lp2181
S'k'
asg18
S'Y'
sS'.thisRepN'
p2182
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2183
I5
sS'.thisN'
p2184
I275
sS'.thisIndex'
p2185
I4
sg15
(lp2186
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2187
S'space'
p2188
asg95
I4
sa(dp2189
g16
(lp2190
S'k'
asg18
S'N'
sS'.thisRepN'
p2191
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2192
I6
sS'.thisN'
p2193
I276
sS'.thisIndex'
p2194
I4
sg15
(lp2195
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2196
g16
(lp2197
S'k'
asg18
S'N'
sS'.thisRepN'
p2198
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2199
I7
sS'.thisN'
p2200
I277
sS'.thisIndex'
p2201
I1
sg15
(lp2202
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2203
g16
(lp2204
S'd'
asg18
S'Y'
sS'.thisRepN'
p2205
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2206
I8
sS'.thisN'
p2207
I278
sS'.thisIndex'
p2208
I3
sg15
(lp2209
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2210
S'space'
p2211
asg95
I3
sa(dp2212
g16
(lp2213
S'k'
asg18
S'N'
sS'.thisRepN'
p2214
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2215
I9
sS'.thisN'
p2216
I279
sS'.thisIndex'
p2217
I5
sg15
(lp2218
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2219
g16
(lp2220
S'd'
asg18
S'Y'
sS'.thisRepN'
p2221
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2222
I10
sS'.thisN'
p2223
I280
sS'.thisIndex'
p2224
I4
sg15
(lp2225
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2226
S'space'
p2227
asg95
I4
sa(dp2228
g16
(lp2229
S'd'
asg18
S'Y'
sS'.thisRepN'
p2230
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2231
I11
sS'.thisN'
p2232
I281
sS'.thisIndex'
p2233
I0
sg15
(lp2234
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2235
S'space'
p2236
asg95
I0
sa(dp2237
g16
(lp2238
S'k'
asg18
S'N'
sS'.thisRepN'
p2239
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2240
I12
sS'.thisN'
p2241
I282
sS'.thisIndex'
p2242
I12
sg15
(lp2243
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2244
g16
(lp2245
S'k'
asg18
S'Y'
sS'.thisRepN'
p2246
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2247
I13
sS'.thisN'
p2248
I283
sS'.thisIndex'
p2249
I14
sg15
(lp2250
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2251
S'space'
p2252
asg95
I14
sa(dp2253
g16
(lp2254
S'k'
asg18
S'Y'
sS'.thisRepN'
p2255
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2256
I14
sS'.thisN'
p2257
I284
sS'.thisIndex'
p2258
I1
sg15
(lp2259
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2260
S'space'
p2261
asg95
I1
sa(dp2262
g16
(lp2263
S'd'
asg18
S'N'
sS'.thisRepN'
p2264
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2265
I0
sS'.thisN'
p2266
I285
sS'.thisIndex'
p2267
I5
sg15
(lp2268
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2269
g16
(lp2270
S'k'
asg18
S'N'
sS'.thisRepN'
p2271
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2272
I1
sS'.thisN'
p2273
I286
sS'.thisIndex'
p2274
I7
sg15
(lp2275
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2276
g16
(lp2277
S'k'
asg18
S'Y'
sS'.thisRepN'
p2278
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2279
I2
sS'.thisN'
p2280
I287
sS'.thisIndex'
p2281
I9
sg15
(lp2282
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2283
S'space'
p2284
asg95
I9
sa(dp2285
g16
(lp2286
S'k'
asg18
S'Y'
sS'.thisRepN'
p2287
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2288
I3
sS'.thisN'
p2289
I288
sS'.thisIndex'
p2290
I10
sg15
(lp2291
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2292
S'space'
p2293
asg95
I10
sa(dp2294
g16
(lp2295
S'k'
asg18
S'Y'
sS'.thisRepN'
p2296
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2297
I4
sS'.thisN'
p2298
I289
sS'.thisIndex'
p2299
I2
sg15
(lp2300
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2301
S'space'
p2302
asg95
I2
sa(dp2303
g16
(lp2304
S'k'
asg18
S'N'
sS'.thisRepN'
p2305
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2306
I5
sS'.thisN'
p2307
I290
sS'.thisIndex'
p2308
I3
sg15
(lp2309
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2310
g16
(lp2311
S'd'
asg18
S'N'
sS'.thisRepN'
p2312
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2313
I6
sS'.thisN'
p2314
I291
sS'.thisIndex'
p2315
I10
sg15
(lp2316
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2317
g16
(lp2318
S'd'
asg18
S'Y'
sS'.thisRepN'
p2319
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2320
I7
sS'.thisN'
p2321
I292
sS'.thisIndex'
p2322
I7
sg15
(lp2323
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2324
S'space'
p2325
asg95
I7
sa(dp2326
g16
(lp2327
S'd'
asg18
S'N'
sS'.thisRepN'
p2328
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2329
I8
sS'.thisN'
p2330
I293
sS'.thisIndex'
p2331
I12
sg15
(lp2332
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2333
g16
(lp2334
S'd'
asg18
S'N'
sS'.thisRepN'
p2335
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2336
I9
sS'.thisN'
p2337
I294
sS'.thisIndex'
p2338
I10
sg15
(lp2339
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2340
S'space'
p2341
asg95
I10
sa(dp2342
g16
(lp2343
S'd'
asg18
S'N'
sS'.thisRepN'
p2344
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2345
I10
sS'.thisN'
p2346
I295
sS'.thisIndex'
p2347
I7
sg15
(lp2348
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I7
sa(dp2349
g16
(lp2350
S'd'
asg18
S'N'
sS'.thisRepN'
p2351
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2352
I11
sS'.thisN'
p2353
I296
sS'.thisIndex'
p2354
I13
sg15
(lp2355
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2356
g16
(lp2357
S'd'
asg18
S'N'
sS'.thisRepN'
p2358
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2359
I12
sS'.thisN'
p2360
I297
sS'.thisIndex'
p2361
I1
sg15
(lp2362
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I1
sa(dp2363
g16
(lp2364
S'd'
asg18
S'Y'
sS'.thisRepN'
p2365
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2366
I13
sS'.thisN'
p2367
I298
sS'.thisIndex'
p2368
I8
sg15
(lp2369
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2370
g16
(lp2371
S'd'
asg18
S'N'
sg22
I40
sS'.thisN'
p2372
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2373
I14
sS'.thisRepN'
p2374
I19
sg21
I41
sS'.thisIndex'
p2375
I8
sg23
I20
sg15
(lp2376
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I8
sa(dp2377
g16
(lp2378
S'd'
asg95
I3
sS'.thisRepN'
p2379
I20
sg30
VF
sg31
g32
sS'.thisTrialN'
p2380
I0
sS'.thisN'
p2381
I300
sS'.thisIndex'
p2382
I3
sg15
(lp2383
S'k'
asg17
S'N'
sg14
I7
sa(dp2384
g16
(lp2385
S'k'
asg95
I0
sS'.thisRepN'
p2386
I20
sg30
VF
sg31
g32
sS'.thisTrialN'
p2387
I1
sS'.thisN'
p2388
I301
sS'.thisIndex'
p2389
I0
sg15
(lp2390
S'k'
asg17
S'Y'
sg14
I7
sa(dp2391
g16
(lp2392
S'd'
asg18
S'Y'
sS'.thisRepN'
p2393
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2394
I2
sS'.thisN'
p2395
I302
sS'.thisIndex'
p2396
I2
sg15
(lp2397
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2398
S'space'
p2399
asg95
I2
sa(dp2400
g16
(lp2401
S'd'
asg18
S'N'
sS'.thisRepN'
p2402
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2403
I3
sS'.thisN'
p2404
I303
sS'.thisIndex'
p2405
I1
sg15
(lp2406
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I1
sa(dp2407
g16
(lp2408
S'k'
asg18
S'N'
sS'.thisRepN'
p2409
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2410
I4
sS'.thisN'
p2411
I304
sS'.thisIndex'
p2412
I11
sg15
(lp2413
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2414
g16
(lp2415
S'd'
asg18
S'Y'
sS'.thisRepN'
p2416
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2417
I5
sS'.thisN'
p2418
I305
sS'.thisIndex'
p2419
I5
sg15
(lp2420
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2421
g16
(lp2422
S'k'
asg18
S'Y'
sS'.thisRepN'
p2423
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2424
I6
sS'.thisN'
p2425
I306
sS'.thisIndex'
p2426
I6
sg15
(lp2427
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2428
S'space'
p2429
asg95
I6
sa(dp2430
g16
(lp2431
S'k'
asg18
S'N'
sS'.thisRepN'
p2432
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2433
I7
sS'.thisN'
p2434
I307
sS'.thisIndex'
p2435
I2
sg15
(lp2436
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2437
g16
(lp2438
S'd'
asg18
S'N'
sS'.thisRepN'
p2439
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2440
I8
sS'.thisN'
p2441
I308
sS'.thisIndex'
p2442
I12
sg15
(lp2443
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2444
g16
(lp2445
S'd'
asg18
S'Y'
sS'.thisRepN'
p2446
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2447
I9
sS'.thisN'
p2448
I309
sS'.thisIndex'
p2449
I5
sg15
(lp2450
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2451
S'space'
p2452
asg95
I5
sa(dp2453
g16
(lp2454
S'k'
asg18
S'Y'
sS'.thisRepN'
p2455
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2456
I10
sS'.thisN'
p2457
I310
sS'.thisIndex'
p2458
I3
sg15
(lp2459
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2460
S'space'
p2461
asg95
I3
sa(dp2462
g16
(lp2463
S'd'
asg18
S'N'
sS'.thisRepN'
p2464
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2465
I11
sS'.thisN'
p2466
I311
sS'.thisIndex'
p2467
I8
sg15
(lp2468
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2469
g18
S'N'
sS'.thisRepN'
p2470
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2471
I12
sS'.thisN'
p2472
I312
sS'.thisIndex'
p2473
I5
sg15
Nsg30
VF
sg17
S'Timed out'
p2474
sg14
I7
sg19
Nsg95
I5
sa(dp2475
g16
(lp2476
S'd'
asg18
S'N'
sS'.thisRepN'
p2477
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2478
I13
sS'.thisN'
p2479
I313
sS'.thisIndex'
p2480
I10
sg15
(lp2481
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2482
g16
(lp2483
S'd'
asg18
S'N'
sS'.thisRepN'
p2484
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2485
I14
sS'.thisN'
p2486
I314
sS'.thisIndex'
p2487
I9
sg15
(lp2488
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I9
sa(dp2489
g16
(lp2490
S'd'
asg18
S'N'
sS'.thisRepN'
p2491
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2492
I0
sS'.thisN'
p2493
I315
sS'.thisIndex'
p2494
I11
sg15
(lp2495
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2496
g16
(lp2497
S'k'
asg18
S'Y'
sS'.thisRepN'
p2498
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2499
I1
sS'.thisN'
p2500
I316
sS'.thisIndex'
p2501
I14
sg15
(lp2502
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2503
S'space'
p2504
asg95
I14
sa(dp2505
g16
(lp2506
S'd'
asg18
S'N'
sS'.thisRepN'
p2507
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2508
I2
sS'.thisN'
p2509
I317
sS'.thisIndex'
p2510
I6
sg15
(lp2511
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2512
g16
(lp2513
S'k'
asg18
S'N'
sS'.thisRepN'
p2514
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2515
I3
sS'.thisN'
p2516
I318
sS'.thisIndex'
p2517
I13
sg15
(lp2518
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I13
sa(dp2519
g16
(lp2520
S'k'
asg18
S'Y'
sS'.thisRepN'
p2521
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2522
I4
sS'.thisN'
p2523
I319
sS'.thisIndex'
p2524
I9
sg15
(lp2525
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2526
S'space'
p2527
asg95
I9
sa(dp2528
g16
(lp2529
S'd'
asg18
S'Y'
sS'.thisRepN'
p2530
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2531
I5
sS'.thisN'
p2532
I320
sS'.thisIndex'
p2533
I7
sg15
(lp2534
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2535
S'space'
p2536
asg95
I7
sa(dp2537
g16
(lp2538
S'd'
asg18
S'Y'
sS'.thisRepN'
p2539
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2540
I6
sS'.thisN'
p2541
I321
sS'.thisIndex'
p2542
I7
sg15
(lp2543
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2544
S'space'
p2545
asg95
I7
sa(dp2546
g16
(lp2547
S'k'
asg18
S'N'
sS'.thisRepN'
p2548
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2549
I7
sS'.thisN'
p2550
I322
sS'.thisIndex'
p2551
I8
sg15
(lp2552
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2553
S'space'
p2554
asg95
I8
sa(dp2555
g16
(lp2556
S'd'
asg18
S'Y'
sS'.thisRepN'
p2557
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2558
I8
sS'.thisN'
p2559
I323
sS'.thisIndex'
p2560
I0
sg15
(lp2561
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2562
S'space'
p2563
asg95
I0
sa(dp2564
g16
(lp2565
S'd'
asg18
S'N'
sS'.thisRepN'
p2566
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2567
I9
sS'.thisN'
p2568
I324
sS'.thisIndex'
p2569
I5
sg15
(lp2570
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I5
sa(dp2571
g16
(lp2572
S'k'
asg18
S'Y'
sS'.thisRepN'
p2573
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2574
I10
sS'.thisN'
p2575
I325
sS'.thisIndex'
p2576
I1
sg15
(lp2577
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2578
S'space'
p2579
asg95
I1
sa(dp2580
g16
(lp2581
S'k'
asg18
S'N'
sS'.thisRepN'
p2582
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2583
I11
sS'.thisN'
p2584
I326
sS'.thisIndex'
p2585
I0
sg15
(lp2586
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2587
g16
(lp2588
S'k'
asg18
S'N'
sS'.thisRepN'
p2589
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2590
I12
sS'.thisN'
p2591
I327
sS'.thisIndex'
p2592
I7
sg15
(lp2593
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2594
g16
(lp2595
S'd'
asg18
S'N'
sS'.thisRepN'
p2596
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2597
I13
sS'.thisN'
p2598
I328
sS'.thisIndex'
p2599
I7
sg15
(lp2600
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2601
S'space'
p2602
asg95
I7
sa(dp2603
g16
(lp2604
S'd'
asg18
S'N'
sS'.thisRepN'
p2605
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2606
I14
sS'.thisN'
p2607
I329
sS'.thisIndex'
p2608
I11
sg15
(lp2609
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2610
g16
(lp2611
S'k'
asg18
S'Y'
sS'.thisRepN'
p2612
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2613
I0
sS'.thisN'
p2614
I330
sS'.thisIndex'
p2615
I13
sg15
(lp2616
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2617
S'space'
p2618
asg95
I13
sa(dp2619
g16
(lp2620
S'd'
asg18
S'Y'
sS'.thisRepN'
p2621
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2622
I1
sS'.thisN'
p2623
I331
sS'.thisIndex'
p2624
I5
sg15
(lp2625
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2626
g16
(lp2627
S'k'
asg18
S'N'
sS'.thisRepN'
p2628
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2629
I2
sS'.thisN'
p2630
I332
sS'.thisIndex'
p2631
I7
sg15
(lp2632
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2633
S'space'
p2634
asg95
I7
sa(dp2635
g16
(lp2636
S'd'
asg18
S'Y'
sS'.thisRepN'
p2637
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2638
I3
sS'.thisN'
p2639
I333
sS'.thisIndex'
p2640
I3
sg15
(lp2641
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2642
g16
(lp2643
S'k'
asg18
S'Y'
sS'.thisRepN'
p2644
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2645
I4
sS'.thisN'
p2646
I334
sS'.thisIndex'
p2647
I0
sg15
(lp2648
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2649
S'space'
p2650
asg95
I0
sa(dp2651
g16
(lp2652
S'd'
asg18
S'N'
sS'.thisRepN'
p2653
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2654
I5
sS'.thisN'
p2655
I335
sS'.thisIndex'
p2656
I12
sg15
(lp2657
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2658
g16
(lp2659
S'k'
asg18
S'N'
sS'.thisRepN'
p2660
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2661
I6
sS'.thisN'
p2662
I336
sS'.thisIndex'
p2663
I0
sg15
(lp2664
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2665
g16
(lp2666
S'd'
asg18
S'Y'
sS'.thisRepN'
p2667
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2668
I7
sS'.thisN'
p2669
I337
sS'.thisIndex'
p2670
I14
sg15
(lp2671
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2672
S'space'
p2673
asg95
I14
sa(dp2674
g16
(lp2675
S'k'
asg18
S'Y'
sS'.thisRepN'
p2676
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2677
I8
sS'.thisN'
p2678
I338
sS'.thisIndex'
p2679
I13
sg15
(lp2680
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I13
sa(dp2681
g16
(lp2682
S'k'
asg18
S'N'
sS'.thisRepN'
p2683
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2684
I9
sS'.thisN'
p2685
I339
sS'.thisIndex'
p2686
I1
sg15
(lp2687
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I1
sa(dp2688
g16
(lp2689
S'd'
asg18
S'N'
sS'.thisRepN'
p2690
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2691
I10
sS'.thisN'
p2692
I340
sS'.thisIndex'
p2693
I10
sg15
(lp2694
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2695
g16
(lp2696
S'd'
asg18
S'N'
sS'.thisRepN'
p2697
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2698
I11
sS'.thisN'
p2699
I341
sS'.thisIndex'
p2700
I6
sg15
(lp2701
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2702
g16
(lp2703
S'k'
asg18
S'N'
sS'.thisRepN'
p2704
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2705
I12
sS'.thisN'
p2706
I342
sS'.thisIndex'
p2707
I7
sg15
(lp2708
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2709
g16
(lp2710
S'd'
asg18
S'N'
sS'.thisRepN'
p2711
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2712
I13
sS'.thisN'
p2713
I343
sS'.thisIndex'
p2714
I0
sg15
(lp2715
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2716
g16
(lp2717
S'k'
asg18
S'N'
sS'.thisRepN'
p2718
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2719
I14
sS'.thisN'
p2720
I344
sS'.thisIndex'
p2721
I1
sg15
(lp2722
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2723
S'space'
p2724
asg95
I1
sa(dp2725
g16
(lp2726
S'k'
asg18
S'Y'
sS'.thisRepN'
p2727
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2728
I0
sS'.thisN'
p2729
I345
sS'.thisIndex'
p2730
I6
sg15
(lp2731
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2732
S'space'
p2733
asg95
I6
sa(dp2734
g16
(lp2735
S'k'
asg18
S'N'
sS'.thisRepN'
p2736
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2737
I1
sS'.thisN'
p2738
I346
sS'.thisIndex'
p2739
I4
sg15
(lp2740
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2741
g16
(lp2742
S'd'
asg18
S'N'
sS'.thisRepN'
p2743
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2744
I2
sS'.thisN'
p2745
I347
sS'.thisIndex'
p2746
I1
sg15
(lp2747
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2748
S'space'
p2749
asg95
I1
sa(dp2750
g16
(lp2751
S'd'
asg18
S'Y'
sS'.thisRepN'
p2752
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2753
I3
sS'.thisN'
p2754
I348
sS'.thisIndex'
p2755
I8
sg15
(lp2756
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2757
S'space'
p2758
asg95
I8
sa(dp2759
g16
(lp2760
S'k'
asg18
S'N'
sg22
I39
sS'.thisN'
p2761
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2762
I4
sS'.thisRepN'
p2763
I23
sg21
I36
sS'.thisIndex'
p2764
I3
sg23
I19
sg15
(lp2765
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2766
g16
(lp2767
S'd'
asg95
I0
sS'.thisRepN'
p2768
I23
sg30
VF
sg31
g32
sS'.thisTrialN'
p2769
I5
sS'.thisN'
p2770
I350
sS'.thisIndex'
p2771
I0
sg15
(lp2772
S'd'
asg17
S'Y'
sg14
I8
sa(dp2773
g16
(lp2774
S'k'
asg95
I0
sS'.thisRepN'
p2775
I23
sg30
VF
sg31
g32
sS'.thisTrialN'
p2776
I6
sS'.thisN'
p2777
I351
sS'.thisIndex'
p2778
I0
sg15
(lp2779
S'k'
asg17
S'Y'
sg14
I8
sa(dp2780
g16
(lp2781
S'k'
asg18
S'N'
sS'.thisRepN'
p2782
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2783
I7
sS'.thisN'
p2784
I352
sS'.thisIndex'
p2785
I7
sg15
(lp2786
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2787
g16
(lp2788
S'd'
asg18
S'N'
sS'.thisRepN'
p2789
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2790
I8
sS'.thisN'
p2791
I353
sS'.thisIndex'
p2792
I5
sg15
(lp2793
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2794
g16
(lp2795
S'k'
asg18
S'N'
sS'.thisRepN'
p2796
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2797
I9
sS'.thisN'
p2798
I354
sS'.thisIndex'
p2799
I10
sg15
(lp2800
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp2801
g16
(lp2802
S'd'
asg18
S'Y'
sS'.thisRepN'
p2803
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2804
I10
sS'.thisN'
p2805
I355
sS'.thisIndex'
p2806
I11
sg15
(lp2807
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp2808
g16
(lp2809
S'd'
asg18
S'N'
sS'.thisRepN'
p2810
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2811
I11
sS'.thisN'
p2812
I356
sS'.thisIndex'
p2813
I8
sg15
(lp2814
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2815
g16
(lp2816
S'd'
asg18
S'Y'
sS'.thisRepN'
p2817
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2818
I12
sS'.thisN'
p2819
I357
sS'.thisIndex'
p2820
I7
sg15
(lp2821
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2822
S'space'
p2823
asg95
I7
sa(dp2824
g16
(lp2825
S'k'
asg18
S'N'
sS'.thisRepN'
p2826
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2827
I13
sS'.thisN'
p2828
I358
sS'.thisIndex'
p2829
I0
sg15
(lp2830
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2831
g16
(lp2832
S'd'
asg18
S'N'
sS'.thisRepN'
p2833
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2834
I14
sS'.thisN'
p2835
I359
sS'.thisIndex'
p2836
I13
sg15
(lp2837
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp2838
g16
(lp2839
S'k'
asg18
S'Y'
sS'.thisRepN'
p2840
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2841
I0
sS'.thisN'
p2842
I360
sS'.thisIndex'
p2843
I2
sg15
(lp2844
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2845
S'space'
p2846
asg95
I2
sa(dp2847
g16
(lp2848
S'k'
asg18
S'Y'
sS'.thisRepN'
p2849
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2850
I1
sS'.thisN'
p2851
I361
sS'.thisIndex'
p2852
I10
sg15
(lp2853
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2854
S'space'
p2855
asg95
I10
sa(dp2856
g16
(lp2857
S'k'
asg18
S'Y'
sS'.thisRepN'
p2858
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2859
I2
sS'.thisN'
p2860
I362
sS'.thisIndex'
p2861
I0
sg15
(lp2862
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2863
S'space'
p2864
asg95
I0
sa(dp2865
g16
(lp2866
S'd'
asg18
S'Y'
sS'.thisRepN'
p2867
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2868
I3
sS'.thisN'
p2869
I363
sS'.thisIndex'
p2870
I0
sg15
(lp2871
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2872
S'space'
p2873
asg95
I0
sa(dp2874
g16
(lp2875
S'k'
asg18
S'N'
sS'.thisRepN'
p2876
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2877
I4
sS'.thisN'
p2878
I364
sS'.thisIndex'
p2879
I2
sg15
(lp2880
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2881
g16
(lp2882
S'd'
asg18
S'N'
sS'.thisRepN'
p2883
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2884
I5
sS'.thisN'
p2885
I365
sS'.thisIndex'
p2886
I5
sg15
(lp2887
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2888
S'space'
p2889
asg95
I5
sa(dp2890
g16
(lp2891
S'd'
asg18
S'Y'
sS'.thisRepN'
p2892
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2893
I6
sS'.thisN'
p2894
I366
sS'.thisIndex'
p2895
I0
sg15
(lp2896
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2897
g16
(lp2898
S'd'
asg18
S'N'
sS'.thisRepN'
p2899
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2900
I7
sS'.thisN'
p2901
I367
sS'.thisIndex'
p2902
I8
sg15
(lp2903
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2904
g16
(lp2905
S'k'
asg18
S'N'
sS'.thisRepN'
p2906
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2907
I8
sS'.thisN'
p2908
I368
sS'.thisIndex'
p2909
I7
sg15
(lp2910
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2911
S'space'
p2912
asg95
I7
sa(dp2913
g16
(lp2914
S'k'
asg18
S'Y'
sS'.thisRepN'
p2915
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2916
I9
sS'.thisN'
p2917
I369
sS'.thisIndex'
p2918
I10
sg15
(lp2919
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2920
S'space'
p2921
asg95
I10
sa(dp2922
g16
(lp2923
S'd'
asg18
S'Y'
sS'.thisRepN'
p2924
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2925
I10
sS'.thisN'
p2926
I370
sS'.thisIndex'
p2927
I7
sg15
(lp2928
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2929
S'space'
p2930
asg95
I7
sa(dp2931
g16
(lp2932
S'k'
asg18
S'N'
sS'.thisRepN'
p2933
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2934
I11
sS'.thisN'
p2935
I371
sS'.thisIndex'
p2936
I11
sg15
(lp2937
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp2938
g16
(lp2939
S'k'
asg18
S'N'
sS'.thisRepN'
p2940
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2941
I12
sS'.thisN'
p2942
I372
sS'.thisIndex'
p2943
I0
sg15
(lp2944
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I0
sa(dp2945
g16
(lp2946
S'k'
asg18
S'Y'
sS'.thisRepN'
p2947
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2948
I13
sS'.thisN'
p2949
I373
sS'.thisIndex'
p2950
I9
sg15
(lp2951
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2952
g16
(lp2953
S'd'
asg18
S'Y'
sS'.thisRepN'
p2954
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2955
I14
sS'.thisN'
p2956
I374
sS'.thisIndex'
p2957
I10
sg15
(lp2958
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2959
S'space'
p2960
asg95
I10
sa(dp2961
g16
(lp2962
S'k'
asg18
S'N'
sS'.thisRepN'
p2963
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2964
I0
sS'.thisN'
p2965
I375
sS'.thisIndex'
p2966
I10
sg15
(lp2967
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp2968
g16
(lp2969
S'k'
asg18
S'Y'
sS'.thisRepN'
p2970
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2971
I1
sS'.thisN'
p2972
I376
sS'.thisIndex'
p2973
I7
sg15
(lp2974
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2975
S'space'
p2976
asg95
I7
sa(dp2977
g16
(lp2978
S'k'
asg18
S'Y'
sS'.thisRepN'
p2979
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2980
I2
sS'.thisN'
p2981
I377
sS'.thisIndex'
p2982
I14
sg15
(lp2983
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2984
S'space'
p2985
asg95
I14
sa(dp2986
g16
(lp2987
S'k'
asg18
S'N'
sS'.thisRepN'
p2988
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2989
I3
sS'.thisN'
p2990
I378
sS'.thisIndex'
p2991
I0
sg15
(lp2992
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2993
g16
(lp2994
S'd'
asg18
S'N'
sS'.thisRepN'
p2995
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2996
I4
sS'.thisN'
p2997
I379
sS'.thisIndex'
p2998
I11
sg15
(lp2999
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp3000
g16
(lp3001
S'd'
asg18
S'Y'
sS'.thisRepN'
p3002
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3003
I5
sS'.thisN'
p3004
I380
sS'.thisIndex'
p3005
I10
sg15
(lp3006
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3007
g16
(lp3008
S'k'
asg18
S'N'
sS'.thisRepN'
p3009
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3010
I6
sS'.thisN'
p3011
I381
sS'.thisIndex'
p3012
I12
sg15
(lp3013
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I12
sa(dp3014
g16
(lp3015
S'k'
asg18
S'Y'
sS'.thisRepN'
p3016
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3017
I7
sS'.thisN'
p3018
I382
sS'.thisIndex'
p3019
I1
sg15
(lp3020
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3021
g16
(lp3022
S'd'
asg18
S'Y'
sS'.thisRepN'
p3023
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3024
I8
sS'.thisN'
p3025
I383
sS'.thisIndex'
p3026
I13
sg15
(lp3027
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3028
S'space'
p3029
asg95
I13
sa(dp3030
g16
(lp3031
S'k'
asg18
S'Y'
sS'.thisRepN'
p3032
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3033
I9
sS'.thisN'
p3034
I384
sS'.thisIndex'
p3035
I2
sg15
(lp3036
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3037
S'space'
p3038
asg95
I2
sa(dp3039
g16
(lp3040
S'd'
asg18
S'Y'
sS'.thisRepN'
p3041
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3042
I10
sS'.thisN'
p3043
I385
sS'.thisIndex'
p3044
I2
sg15
(lp3045
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3046
S'space'
p3047
asg95
I2
sa(dp3048
g16
(lp3049
S'k'
asg18
S'Y'
sS'.thisRepN'
p3050
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3051
I11
sS'.thisN'
p3052
I386
sS'.thisIndex'
p3053
I3
sg15
(lp3054
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3055
S'space'
p3056
asg95
I3
sa(dp3057
g16
(lp3058
S'k'
asg18
S'N'
sS'.thisRepN'
p3059
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3060
I12
sS'.thisN'
p3061
I387
sS'.thisIndex'
p3062
I7
sg15
(lp3063
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I7
sa(dp3064
g16
(lp3065
S'd'
asg18
S'N'
sS'.thisRepN'
p3066
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3067
I13
sS'.thisN'
p3068
I388
sS'.thisIndex'
p3069
I10
sg15
(lp3070
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3071
g16
(lp3072
S'd'
asg18
S'Y'
sS'.thisRepN'
p3073
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3074
I14
sS'.thisN'
p3075
I389
sS'.thisIndex'
p3076
I8
sg15
(lp3077
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3078
g16
(lp3079
S'k'
asg18
S'Y'
sS'.thisRepN'
p3080
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3081
I0
sS'.thisN'
p3082
I390
sS'.thisIndex'
p3083
I9
sg15
(lp3084
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3085
S'space'
p3086
asg95
I9
sa(dp3087
g16
(lp3088
S'd'
asg18
S'N'
sS'.thisRepN'
p3089
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3090
I1
sS'.thisN'
p3091
I391
sS'.thisIndex'
p3092
I12
sg15
(lp3093
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp3094
g16
(lp3095
S'd'
asg18
S'N'
sS'.thisRepN'
p3096
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3097
I2
sS'.thisN'
p3098
I392
sS'.thisIndex'
p3099
I11
sg15
(lp3100
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp3101
g16
(lp3102
S'k'
asg18
S'Y'
sS'.thisRepN'
p3103
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3104
I3
sS'.thisN'
p3105
I393
sS'.thisIndex'
p3106
I14
sg15
(lp3107
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3108
S'space'
p3109
asg95
I14
sa(dp3110
g16
(lp3111
S'd'
asg18
S'Y'
sS'.thisRepN'
p3112
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3113
I4
sS'.thisN'
p3114
I394
sS'.thisIndex'
p3115
I14
sg15
(lp3116
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3117
S'space'
p3118
asg95
I14
sa(dp3119
g16
(lp3120
S'd'
asg18
S'N'
sS'.thisRepN'
p3121
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3122
I5
sS'.thisN'
p3123
I395
sS'.thisIndex'
p3124
I4
sg15
(lp3125
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp3126
g16
(lp3127
S'k'
asg18
S'Y'
sS'.thisRepN'
p3128
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3129
I6
sS'.thisN'
p3130
I396
sS'.thisIndex'
p3131
I13
sg15
(lp3132
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I13
sa(dp3133
g16
(lp3134
S'd'
asg18
S'N'
sS'.thisRepN'
p3135
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3136
I7
sS'.thisN'
p3137
I397
sS'.thisIndex'
p3138
I14
sg15
(lp3139
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I14
sa(dp3140
g16
(lp3141
S'k'
asg18
S'Y'
sS'.thisRepN'
p3142
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3143
I8
sS'.thisN'
p3144
I398
sS'.thisIndex'
p3145
I0
sg15
(lp3146
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3147
S'space'
p3148
asg95
I0
sa(dp3149
g16
(lp3150
S'k'
asg18
S'N'
sg22
I39
sS'.thisN'
p3151
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3152
I9
sS'.thisRepN'
p3153
I26
sg21
I42
sS'.thisIndex'
p3154
I6
sg23
I25
sg15
(lp3155
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3156
g16
(lp3157
S'd'
asg95
I3
sS'.thisRepN'
p3158
I26
sg30
VF
sg31
g32
sS'.thisTrialN'
p3159
I10
sS'.thisN'
p3160
I400
sS'.thisIndex'
p3161
I3
sg15
(lp3162
S'd'
asg17
S'Y'
sg14
I9
sa(dp3163
g16
(lp3164
S'k'
asg95
I9
sS'.thisRepN'
p3165
I26
sg30
VF
sg31
g32
sS'.thisTrialN'
p3166
I11
sS'.thisN'
p3167
I401
sS'.thisIndex'
p3168
I9
sg15
(lp3169
S'k'
asg17
S'Y'
sg14
I9
sa(dp3170
g16
(lp3171
S'd'
asg18
S'Y'
sS'.thisRepN'
p3172
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3173
I12
sS'.thisN'
p3174
I402
sS'.thisIndex'
p3175
I5
sg15
(lp3176
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3177
S'space'
p3178
asg95
I5
sa(dp3179
g16
(lp3180
S'd'
asg18
S'Y'
sS'.thisRepN'
p3181
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3182
I13
sS'.thisN'
p3183
I403
sS'.thisIndex'
p3184
I6
sg15
(lp3185
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3186
S'space'
p3187
asg95
I6
sa(dp3188
g16
(lp3189
S'd'
asg18
S'N'
sS'.thisRepN'
p3190
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3191
I14
sS'.thisN'
p3192
I404
sS'.thisIndex'
p3193
I5
sg15
(lp3194
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3195
g16
(lp3196
S'd'
asg18
S'N'
sS'.thisRepN'
p3197
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3198
I0
sS'.thisN'
p3199
I405
sS'.thisIndex'
p3200
I2
sg15
(lp3201
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3202
g16
(lp3203
S'k'
asg18
S'N'
sS'.thisRepN'
p3204
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3205
I1
sS'.thisN'
p3206
I406
sS'.thisIndex'
p3207
I3
sg15
(lp3208
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3209
g16
(lp3210
S'd'
asg18
S'Y'
sS'.thisRepN'
p3211
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3212
I2
sS'.thisN'
p3213
I407
sS'.thisIndex'
p3214
I7
sg15
(lp3215
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3216
S'space'
p3217
asg95
I7
sa(dp3218
g16
(lp3219
S'k'
asg18
S'Y'
sS'.thisRepN'
p3220
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3221
I3
sS'.thisN'
p3222
I408
sS'.thisIndex'
p3223
I2
sg15
(lp3224
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3225
S'space'
p3226
asg95
I2
sa(dp3227
g16
(lp3228
S'k'
asg18
S'N'
sS'.thisRepN'
p3229
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3230
I4
sS'.thisN'
p3231
I409
sS'.thisIndex'
p3232
I12
sg15
(lp3233
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3234
g16
(lp3235
S'k'
asg18
S'Y'
sS'.thisRepN'
p3236
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3237
I5
sS'.thisN'
p3238
I410
sS'.thisIndex'
p3239
I8
sg15
(lp3240
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3241
S'space'
p3242
asg95
I8
sa(dp3243
g16
(lp3244
S'k'
asg18
S'N'
sS'.thisRepN'
p3245
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3246
I6
sS'.thisN'
p3247
I411
sS'.thisIndex'
p3248
I12
sg15
(lp3249
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I12
sa(dp3250
g16
(lp3251
S'd'
asg18
S'Y'
sS'.thisRepN'
p3252
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3253
I7
sS'.thisN'
p3254
I412
sS'.thisIndex'
p3255
I5
sg15
(lp3256
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3257
g16
(lp3258
S'd'
asg18
S'N'
sS'.thisRepN'
p3259
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3260
I8
sS'.thisN'
p3261
I413
sS'.thisIndex'
p3262
I12
sg15
(lp3263
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3264
S'space'
p3265
asg95
I12
sa(dp3266
g16
(lp3267
S'k'
asg18
S'N'
sS'.thisRepN'
p3268
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3269
I9
sS'.thisN'
p3270
I414
sS'.thisIndex'
p3271
I8
sg15
(lp3272
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3273
g16
(lp3274
S'd'
asg18
S'N'
sS'.thisRepN'
p3275
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3276
I10
sS'.thisN'
p3277
I415
sS'.thisIndex'
p3278
I3
sg15
(lp3279
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3280
g16
(lp3281
S'd'
asg18
S'N'
sS'.thisRepN'
p3282
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3283
I11
sS'.thisN'
p3284
I416
sS'.thisIndex'
p3285
I14
sg15
(lp3286
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3287
g16
(lp3288
S'k'
asg18
S'N'
sS'.thisRepN'
p3289
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3290
I12
sS'.thisN'
p3291
I417
sS'.thisIndex'
p3292
I13
sg15
(lp3293
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I13
sa(dp3294
g16
(lp3295
S'd'
asg18
S'N'
sS'.thisRepN'
p3296
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3297
I13
sS'.thisN'
p3298
I418
sS'.thisIndex'
p3299
I9
sg15
(lp3300
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3301
g16
(lp3302
S'k'
asg18
S'N'
sS'.thisRepN'
p3303
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3304
I14
sS'.thisN'
p3305
I419
sS'.thisIndex'
p3306
I9
sg15
(lp3307
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3308
g16
(lp3309
S'k'
asg18
S'N'
sS'.thisRepN'
p3310
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3311
I0
sS'.thisN'
p3312
I420
sS'.thisIndex'
p3313
I9
sg15
(lp3314
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3315
g16
(lp3316
S'd'
asg18
S'N'
sS'.thisRepN'
p3317
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3318
I1
sS'.thisN'
p3319
I421
sS'.thisIndex'
p3320
I11
sg15
(lp3321
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3322
g16
(lp3323
S'd'
asg18
S'N'
sS'.thisRepN'
p3324
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3325
I2
sS'.thisN'
p3326
I422
sS'.thisIndex'
p3327
I6
sg15
(lp3328
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3329
g16
(lp3330
S'd'
asg18
S'Y'
sS'.thisRepN'
p3331
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3332
I3
sS'.thisN'
p3333
I423
sS'.thisIndex'
p3334
I12
sg15
(lp3335
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3336
S'space'
p3337
asg95
I12
sa(dp3338
g16
(lp3339
S'k'
asg18
S'N'
sS'.thisRepN'
p3340
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3341
I4
sS'.thisN'
p3342
I424
sS'.thisIndex'
p3343
I7
sg15
(lp3344
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3345
g16
(lp3346
S'k'
asg18
S'Y'
sS'.thisRepN'
p3347
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3348
I5
sS'.thisN'
p3349
I425
sS'.thisIndex'
p3350
I6
sg15
(lp3351
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3352
S'space'
p3353
asg95
I6
sa(dp3354
g18
S'N'
sS'.thisRepN'
p3355
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3356
I6
sS'.thisN'
p3357
I426
sS'.thisIndex'
p3358
I11
sg15
Nsg30
VF
sg17
g2474
sg14
I9
sg19
Nsg95
I11
sa(dp3359
g16
(lp3360
S'd'
asg18
S'Y'
sS'.thisRepN'
p3361
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3362
I7
sS'.thisN'
p3363
I427
sS'.thisIndex'
p3364
I1
sg15
(lp3365
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I1
sa(dp3366
g16
(lp3367
S'd'
asg18
S'Y'
sS'.thisRepN'
p3368
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3369
I8
sS'.thisN'
p3370
I428
sS'.thisIndex'
p3371
I4
sg15
(lp3372
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3373
g16
(lp3374
S'k'
asg18
S'N'
sS'.thisRepN'
p3375
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3376
I9
sS'.thisN'
p3377
I429
sS'.thisIndex'
p3378
I0
sg15
(lp3379
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3380
g16
(lp3381
S'k'
asg18
S'Y'
sS'.thisRepN'
p3382
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3383
I10
sS'.thisN'
p3384
I430
sS'.thisIndex'
p3385
I10
sg15
(lp3386
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3387
S'space'
p3388
asg95
I10
sa(dp3389
g16
(lp3390
S'd'
asg18
S'N'
sS'.thisRepN'
p3391
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3392
I11
sS'.thisN'
p3393
I431
sS'.thisIndex'
p3394
I7
sg15
(lp3395
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I7
sa(dp3396
g16
(lp3397
S'k'
asg18
S'Y'
sS'.thisRepN'
p3398
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3399
I12
sS'.thisN'
p3400
I432
sS'.thisIndex'
p3401
I11
sg15
(lp3402
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3403
S'space'
p3404
asg95
I11
sa(dp3405
g16
(lp3406
S'd'
asg18
S'Y'
sS'.thisRepN'
p3407
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3408
I13
sS'.thisN'
p3409
I433
sS'.thisIndex'
p3410
I3
sg15
(lp3411
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3412
g16
(lp3413
S'd'
asg18
S'N'
sS'.thisRepN'
p3414
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3415
I14
sS'.thisN'
p3416
I434
sS'.thisIndex'
p3417
I9
sg15
(lp3418
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3419
g16
(lp3420
S'k'
asg18
S'N'
sS'.thisRepN'
p3421
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3422
I0
sS'.thisN'
p3423
I435
sS'.thisIndex'
p3424
I13
sg15
(lp3425
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I13
sa(dp3426
g16
(lp3427
S'k'
asg18
S'Y'
sS'.thisRepN'
p3428
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3429
I1
sS'.thisN'
p3430
I436
sS'.thisIndex'
p3431
I11
sg15
(lp3432
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3433
S'space'
p3434
asg95
I11
sa(dp3435
g16
(lp3436
S'k'
asg18
S'Y'
sS'.thisRepN'
p3437
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3438
I2
sS'.thisN'
p3439
I437
sS'.thisIndex'
p3440
I14
sg15
(lp3441
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3442
S'space'
p3443
asg95
I14
sa(dp3444
g16
(lp3445
S'd'
asg18
S'Y'
sS'.thisRepN'
p3446
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3447
I3
sS'.thisN'
p3448
I438
sS'.thisIndex'
p3449
I5
sg15
(lp3450
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3451
S'space'
p3452
asg95
I5
sa(dp3453
g16
(lp3454
S'd'
asg18
S'N'
sS'.thisRepN'
p3455
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3456
I4
sS'.thisN'
p3457
I439
sS'.thisIndex'
p3458
I12
sg15
(lp3459
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3460
g16
(lp3461
S'd'
asg18
S'Y'
sS'.thisRepN'
p3462
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3463
I5
sS'.thisN'
p3464
I440
sS'.thisIndex'
p3465
I7
sg15
(lp3466
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3467
S'space'
p3468
asg95
I7
sa(dp3469
g16
(lp3470
S'd'
asg18
S'Y'
sS'.thisRepN'
p3471
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3472
I6
sS'.thisN'
p3473
I441
sS'.thisIndex'
p3474
I6
sg15
(lp3475
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3476
S'space'
p3477
asg95
I6
sa(dp3478
g16
(lp3479
S'd'
asg18
S'Y'
sS'.thisRepN'
p3480
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3481
I7
sS'.thisN'
p3482
I442
sS'.thisIndex'
p3483
I7
sg15
(lp3484
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3485
S'space'
p3486
asg95
I7
sa(dp3487
g16
(lp3488
S'd'
asg18
S'N'
sS'.thisRepN'
p3489
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3490
I8
sS'.thisN'
p3491
I443
sS'.thisIndex'
p3492
I3
sg15
(lp3493
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3494
g16
(lp3495
S'd'
asg18
S'N'
sS'.thisRepN'
p3496
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3497
I9
sS'.thisN'
p3498
I444
sS'.thisIndex'
p3499
I10
sg15
(lp3500
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3501
g16
(lp3502
S'd'
asg18
S'Y'
sS'.thisRepN'
p3503
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3504
I10
sS'.thisN'
p3505
I445
sS'.thisIndex'
p3506
I5
sg15
(lp3507
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3508
g16
(lp3509
S'k'
asg18
S'N'
sS'.thisRepN'
p3510
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3511
I11
sS'.thisN'
p3512
I446
sS'.thisIndex'
p3513
I1
sg15
(lp3514
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3515
g16
(lp3516
S'd'
asg18
S'N'
sS'.thisRepN'
p3517
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3518
I12
sS'.thisN'
p3519
I447
sS'.thisIndex'
p3520
I11
sg15
(lp3521
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3522
g16
(lp3523
S'd'
asg18
S'N'
sS'.thisRepN'
p3524
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3525
I13
sS'.thisN'
p3526
I448
sS'.thisIndex'
p3527
I1
sg15
(lp3528
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3529
g16
(lp3530
S'd'
asg18
S'N'
sg22
I42
sS'.thisN'
p3531
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3532
I14
sS'.thisRepN'
p3533
I29
sg21
I43
sS'.thisIndex'
p3534
I11
sg23
I20
sg15
(lp3535
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3536
g16
(lp3537
S'k'
asg95
I14
sS'.thisRepN'
p3538
I30
sg30
VF
sg31
g32
sS'.thisTrialN'
p3539
I0
sS'.thisN'
p3540
I450
sS'.thisIndex'
p3541
I14
sg15
(lp3542
S'k'
asg17
S'Y'
sg14
I10
sa(dp3543
g16
(lp3544
S'k'
asg95
I1
sS'.thisRepN'
p3545
I30
sg30
VF
sg31
g32
sS'.thisTrialN'
p3546
I1
sS'.thisN'
p3547
I451
sS'.thisIndex'
p3548
I1
sg15
(lp3549
S'k'
asg17
S'Y'
sg14
I10
sa(dp3550
g16
(lp3551
S'k'
asg18
S'Y'
sS'.thisRepN'
p3552
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3553
I2
sS'.thisN'
p3554
I452
sS'.thisIndex'
p3555
I5
sg15
(lp3556
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3557
S'space'
p3558
asg95
I5
sa(dp3559
g16
(lp3560
S'k'
asg18
S'Y'
sS'.thisRepN'
p3561
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3562
I3
sS'.thisN'
p3563
I453
sS'.thisIndex'
p3564
I4
sg15
(lp3565
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3566
S'space'
p3567
asg95
I4
sa(dp3568
g16
(lp3569
S'k'
asg18
S'N'
sS'.thisRepN'
p3570
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3571
I4
sS'.thisN'
p3572
I454
sS'.thisIndex'
p3573
I1
sg15
(lp3574
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3575
g16
(lp3576
S'k'
asg18
S'N'
sS'.thisRepN'
p3577
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3578
I5
sS'.thisN'
p3579
I455
sS'.thisIndex'
p3580
I11
sg15
(lp3581
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3582
g16
(lp3583
S'd'
asg18
S'Y'
sS'.thisRepN'
p3584
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3585
I6
sS'.thisN'
p3586
I456
sS'.thisIndex'
p3587
I9
sg15
(lp3588
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3589
g16
(lp3590
S'k'
asg18
S'Y'
sS'.thisRepN'
p3591
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3592
I7
sS'.thisN'
p3593
I457
sS'.thisIndex'
p3594
I12
sg15
(lp3595
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3596
g16
(lp3597
S'd'
asg18
S'N'
sS'.thisRepN'
p3598
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3599
I8
sS'.thisN'
p3600
I458
sS'.thisIndex'
p3601
I14
sg15
(lp3602
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3603
S'space'
p3604
asg95
I14
sa(dp3605
g16
(lp3606
S'd'
asg18
S'Y'
sS'.thisRepN'
p3607
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3608
I9
sS'.thisN'
p3609
I459
sS'.thisIndex'
p3610
I11
sg15
(lp3611
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3612
S'space'
p3613
asg95
I11
sa(dp3614
g16
(lp3615
S'k'
asg18
S'N'
sS'.thisRepN'
p3616
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3617
I10
sS'.thisN'
p3618
I460
sS'.thisIndex'
p3619
I4
sg15
(lp3620
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3621
g16
(lp3622
S'd'
asg18
S'N'
sS'.thisRepN'
p3623
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3624
I11
sS'.thisN'
p3625
I461
sS'.thisIndex'
p3626
I7
sg15
(lp3627
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3628
g16
(lp3629
S'd'
asg18
S'Y'
sS'.thisRepN'
p3630
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3631
I12
sS'.thisN'
p3632
I462
sS'.thisIndex'
p3633
I4
sg15
(lp3634
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3635
S'space'
p3636
asg95
I4
sa(dp3637
g16
(lp3638
S'k'
asg18
S'N'
sS'.thisRepN'
p3639
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3640
I13
sS'.thisN'
p3641
I463
sS'.thisIndex'
p3642
I14
sg15
(lp3643
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3644
S'space'
p3645
asg95
I14
sa(dp3646
g16
(lp3647
S'd'
asg18
S'Y'
sS'.thisRepN'
p3648
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3649
I14
sS'.thisN'
p3650
I464
sS'.thisIndex'
p3651
I5
sg15
(lp3652
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3653
S'space'
p3654
asg95
I5
sa(dp3655
g16
(lp3656
S'd'
asg18
S'N'
sS'.thisRepN'
p3657
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3658
I0
sS'.thisN'
p3659
I465
sS'.thisIndex'
p3660
I4
sg15
(lp3661
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3662
g16
(lp3663
S'k'
asg18
S'Y'
sS'.thisRepN'
p3664
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3665
I1
sS'.thisN'
p3666
I466
sS'.thisIndex'
p3667
I6
sg15
(lp3668
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3669
S'space'
p3670
asg95
I6
sa(dp3671
g16
(lp3672
S'k'
asg18
S'N'
sS'.thisRepN'
p3673
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3674
I2
sS'.thisN'
p3675
I467
sS'.thisIndex'
p3676
I4
sg15
(lp3677
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3678
g16
(lp3679
S'k'
asg18
S'N'
sS'.thisRepN'
p3680
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3681
I3
sS'.thisN'
p3682
I468
sS'.thisIndex'
p3683
I9
sg15
(lp3684
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3685
g16
(lp3686
S'k'
asg18
S'N'
sS'.thisRepN'
p3687
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3688
I4
sS'.thisN'
p3689
I469
sS'.thisIndex'
p3690
I12
sg15
(lp3691
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3692
g16
(lp3693
S'd'
asg18
S'Y'
sS'.thisRepN'
p3694
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3695
I5
sS'.thisN'
p3696
I470
sS'.thisIndex'
p3697
I6
sg15
(lp3698
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3699
S'space'
p3700
asg95
I6
sa(dp3701
g16
(lp3702
S'k'
asg18
S'N'
sS'.thisRepN'
p3703
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3704
I6
sS'.thisN'
p3705
I471
sS'.thisIndex'
p3706
I11
sg15
(lp3707
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3708
S'space'
p3709
asg95
I11
sa(dp3710
g16
(lp3711
S'd'
asg18
S'N'
sS'.thisRepN'
p3712
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3713
I7
sS'.thisN'
p3714
I472
sS'.thisIndex'
p3715
I2
sg15
(lp3716
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3717
g16
(lp3718
S'k'
asg18
S'Y'
sS'.thisRepN'
p3719
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3720
I8
sS'.thisN'
p3721
I473
sS'.thisIndex'
p3722
I13
sg15
(lp3723
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3724
g16
(lp3725
S'k'
asg18
S'N'
sS'.thisRepN'
p3726
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3727
I9
sS'.thisN'
p3728
I474
sS'.thisIndex'
p3729
I11
sg15
(lp3730
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3731
g16
(lp3732
S'k'
asg18
S'Y'
sS'.thisRepN'
p3733
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3734
I10
sS'.thisN'
p3735
I475
sS'.thisIndex'
p3736
I12
sg15
(lp3737
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3738
S'space'
p3739
asg95
I12
sa(dp3740
g16
(lp3741
S'd'
asg18
S'N'
sS'.thisRepN'
p3742
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3743
I11
sS'.thisN'
p3744
I476
sS'.thisIndex'
p3745
I8
sg15
(lp3746
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3747
g16
(lp3748
S'd'
asg18
S'N'
sS'.thisRepN'
p3749
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3750
I12
sS'.thisN'
p3751
I477
sS'.thisIndex'
p3752
I14
sg15
(lp3753
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3754
g16
(lp3755
S'd'
asg18
S'Y'
sS'.thisRepN'
p3756
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3757
I13
sS'.thisN'
p3758
I478
sS'.thisIndex'
p3759
I10
sg15
(lp3760
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3761
S'space'
p3762
asg95
I10
sa(dp3763
g16
(lp3764
S'd'
asg18
S'Y'
sS'.thisRepN'
p3765
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3766
I14
sS'.thisN'
p3767
I479
sS'.thisIndex'
p3768
I8
sg15
(lp3769
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3770
S'space'
p3771
asg95
I8
sa(dp3772
g16
(lp3773
S'd'
asg18
S'N'
sS'.thisRepN'
p3774
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3775
I0
sS'.thisN'
p3776
I480
sS'.thisIndex'
p3777
I5
sg15
(lp3778
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I5
sa(dp3779
g16
(lp3780
S'k'
asg18
S'N'
sS'.thisRepN'
p3781
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3782
I1
sS'.thisN'
p3783
I481
sS'.thisIndex'
p3784
I2
sg15
(lp3785
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3786
g16
(lp3787
S'k'
asg18
S'Y'
sS'.thisRepN'
p3788
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3789
I2
sS'.thisN'
p3790
I482
sS'.thisIndex'
p3791
I14
sg15
(lp3792
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3793
g16
(lp3794
S'k'
asg18
S'N'
sS'.thisRepN'
p3795
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3796
I3
sS'.thisN'
p3797
I483
sS'.thisIndex'
p3798
I5
sg15
(lp3799
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3800
S'space'
p3801
asg95
I5
sa(dp3802
g16
(lp3803
S'k'
asg18
S'Y'
sS'.thisRepN'
p3804
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3805
I4
sS'.thisN'
p3806
I484
sS'.thisIndex'
p3807
I13
sg15
(lp3808
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3809
g16
(lp3810
S'k'
asg18
S'N'
sS'.thisRepN'
p3811
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3812
I5
sS'.thisN'
p3813
I485
sS'.thisIndex'
p3814
I11
sg15
(lp3815
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3816
g16
(lp3817
S'd'
asg18
S'Y'
sS'.thisRepN'
p3818
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3819
I6
sS'.thisN'
p3820
I486
sS'.thisIndex'
p3821
I7
sg15
(lp3822
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3823
g16
(lp3824
S'd'
asg18
S'Y'
sS'.thisRepN'
p3825
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3826
I7
sS'.thisN'
p3827
I487
sS'.thisIndex'
p3828
I9
sg15
(lp3829
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3830
S'space'
p3831
asg95
I9
sa(dp3832
g16
(lp3833
S'k'
asg18
S'Y'
sS'.thisRepN'
p3834
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3835
I8
sS'.thisN'
p3836
I488
sS'.thisIndex'
p3837
I8
sg15
(lp3838
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3839
g16
(lp3840
S'k'
asg18
S'Y'
sS'.thisRepN'
p3841
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3842
I9
sS'.thisN'
p3843
I489
sS'.thisIndex'
p3844
I14
sg15
(lp3845
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3846
g16
(lp3847
S'k'
asg18
S'Y'
sS'.thisRepN'
p3848
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3849
I10
sS'.thisN'
p3850
I490
sS'.thisIndex'
p3851
I9
sg15
(lp3852
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3853
S'k'
asg95
I9
sa(dp3854
g16
(lp3855
S'k'
asg18
S'Y'
sS'.thisRepN'
p3856
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3857
I11
sS'.thisN'
p3858
I491
sS'.thisIndex'
p3859
I9
sg15
(lp3860
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3861
S'space'
p3862
asg95
I9
sa(dp3863
g16
(lp3864
S'd'
asg18
S'N'
sS'.thisRepN'
p3865
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3866
I12
sS'.thisN'
p3867
I492
sS'.thisIndex'
p3868
I6
sg15
(lp3869
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3870
g16
(lp3871
S'd'
asg18
S'N'
sS'.thisRepN'
p3872
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3873
I13
sS'.thisN'
p3874
I493
sS'.thisIndex'
p3875
I0
sg15
(lp3876
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3877
g16
(lp3878
S'd'
asg18
S'Y'
sS'.thisRepN'
p3879
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3880
I14
sS'.thisN'
p3881
I494
sS'.thisIndex'
p3882
I8
sg15
(lp3883
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3884
S'space'
p3885
asg95
I8
sa(dp3886
g16
(lp3887
S'd'
asg18
S'N'
sS'.thisRepN'
p3888
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3889
I0
sS'.thisN'
p3890
I495
sS'.thisIndex'
p3891
I5
sg15
(lp3892
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3893
g16
(lp3894
S'k'
asg18
S'Y'
sS'.thisRepN'
p3895
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3896
I1
sS'.thisN'
p3897
I496
sS'.thisIndex'
p3898
I14
sg15
(lp3899
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3900
S'space'
p3901
asg95
I14
sa(dp3902
g16
(lp3903
S'k'
asg18
S'Y'
sS'.thisRepN'
p3904
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3905
I2
sS'.thisN'
p3906
I497
sS'.thisIndex'
p3907
I8
sg15
(lp3908
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3909
g16
(lp3910
S'k'
asg18
S'Y'
sS'.thisRepN'
p3911
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3912
I3
sS'.thisN'
p3913
I498
sS'.thisIndex'
p3914
I4
sg15
(lp3915
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3916
S'space'
p3917
asg95
I4
sa(dp3918
g16
(lp3919
S'd'
asg18
S'N'
sg22
I34
sS'.thisN'
p3920
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3921
I4
sS'.thisRepN'
p3922
I33
sg21
I48
sS'.thisIndex'
p3923
I0
sg23
I25
sg15
(lp3924
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3925
g16
(lp3926
S'd'
asS'.thisIndex'
p3927
I14
sS'.thisRepN'
p3928
I33
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p3929
I5
sS'.thisN'
p3930
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp3931
S'd'
asg17
S'N'
sg14
I11
sg95
I14
sa(dp3932
g16
(lp3933
S'd'
asS'.thisIndex'
p3934
I6
sS'.thisRepN'
p3935
I33
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p3936
I6
sS'.thisN'
p3937
I501
sg25
S'Y'
sg15
(lp3938
S'k'
asg17
S'Y'
sg14
I11
sg95
I6
sa(dp3939
g18
S'N'
sS'.thisRepN'
p3940
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3941
I7
sS'.thisN'
p3942
I502
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2474
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p3943
I1
sa(dp3944
g16
(lp3945
S'd'
asg18
S'Y'
sS'.thisRepN'
p3946
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3947
I8
sS'.thisN'
p3948
I503
sg25
S'Y'
sg15
(lp3949
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp3950
S'space'
p3951
asg95
I6
sS'.thisIndex'
p3952
I6
sa(dp3953
g16
(lp3954
S'k'
asg18
S'Y'
sS'.thisRepN'
p3955
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3956
I9
sS'.thisN'
p3957
I504
sg25
S'Y'
sg15
(lp3958
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p3959
I2
sa(dp3960
g16
(lp3961
S'd'
asg18
S'N'
sS'.thisRepN'
p3962
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3963
I10
sS'.thisN'
p3964
I505
sg25
S'Y'
sg15
(lp3965
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp3966
S'space'
p3967
asg95
I14
sS'.thisIndex'
p3968
I14
sa(dp3969
g16
(lp3970
S'd'
asg18
S'Y'
sS'.thisRepN'
p3971
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3972
I11
sS'.thisN'
p3973
I506
sg25
S'Y'
sg15
(lp3974
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p3975
I12
sa(dp3976
g16
(lp3977
S'd'
asg18
S'N'
sS'.thisRepN'
p3978
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3979
I12
sS'.thisN'
p3980
I507
sg25
S'Y'
sg15
(lp3981
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp3982
S'space'
p3983
asg95
I10
sS'.thisIndex'
p3984
I10
sa(dp3985
g18
S'N'
sS'.thisRepN'
p3986
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3987
I13
sS'.thisN'
p3988
I508
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2474
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p3989
I9
sa(dp3990
g16
(lp3991
S'd'
asg18
S'N'
sS'.thisRepN'
p3992
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3993
I14
sS'.thisN'
p3994
I509
sg25
S'Y'
sg15
(lp3995
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p3996
I7
sa(dp3997
g16
(lp3998
S'k'
asg18
S'Y'
sS'.thisRepN'
p3999
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4000
I0
sS'.thisN'
p4001
I510
sg25
S'Y'
sg15
(lp4002
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4003
S'space'
p4004
asg95
I12
sS'.thisIndex'
p4005
I12
sa(dp4006
g16
(lp4007
S'd'
asg18
S'Y'
sS'.thisRepN'
p4008
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4009
I1
sS'.thisN'
p4010
I511
sg25
S'Y'
sg15
(lp4011
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4012
S'space'
p4013
asg95
I11
sS'.thisIndex'
p4014
I11
sa(dp4015
g16
(lp4016
S'k'
asg18
S'Y'
sS'.thisRepN'
p4017
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4018
I2
sS'.thisN'
p4019
I512
sg25
S'Y'
sg15
(lp4020
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4021
S'space'
p4022
asg95
I11
sS'.thisIndex'
p4023
I11
sa(dp4024
g16
(lp4025
S'k'
asg18
S'N'
sS'.thisRepN'
p4026
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4027
I3
sS'.thisN'
p4028
I513
sg25
S'Y'
sg15
(lp4029
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4030
I1
sa(dp4031
g18
S'Y'
sS'.thisRepN'
p4032
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4033
I4
sS'.thisN'
p4034
I514
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2474
sg14
I11
sg19
(lp4035
S'space'
p4036
asg95
I10
sS'.thisIndex'
p4037
I10
sa(dp4038
g16
(lp4039
S'd'
asg18
S'Y'
sS'.thisRepN'
p4040
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4041
I5
sS'.thisN'
p4042
I515
sg25
S'Y'
sg15
(lp4043
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4044
S'space'
p4045
asg95
I10
sS'.thisIndex'
p4046
I10
sa(dp4047
g16
(lp4048
S'd'
asg18
S'Y'
sS'.thisRepN'
p4049
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4050
I6
sS'.thisN'
p4051
I516
sg25
S'Y'
sg15
(lp4052
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4053
S'space'
p4054
asg95
I13
sS'.thisIndex'
p4055
I13
sa(dp4056
g16
(lp4057
S'k'
asg18
S'N'
sS'.thisRepN'
p4058
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4059
I7
sS'.thisN'
p4060
I517
sg25
S'Y'
sg15
(lp4061
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4062
I7
sa(dp4063
g16
(lp4064
S'k'
asg18
S'Y'
sS'.thisRepN'
p4065
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4066
I8
sS'.thisN'
p4067
I518
sg25
S'Y'
sg15
(lp4068
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4069
S'space'
p4070
asg95
I10
sS'.thisIndex'
p4071
I10
sa(dp4072
g18
S'N'
sS'.thisRepN'
p4073
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4074
I9
sS'.thisN'
p4075
I519
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2474
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4076
I0
sa(dp4077
g16
(lp4078
S'k'
asg18
S'N'
sS'.thisRepN'
p4079
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4080
I10
sS'.thisN'
p4081
I520
sg25
S'Y'
sg15
(lp4082
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4083
S'space'
p4084
asg95
I8
sS'.thisIndex'
p4085
I8
sa(dp4086
g16
(lp4087
S'k'
asg18
S'Y'
sS'.thisRepN'
p4088
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4089
I11
sS'.thisN'
p4090
I521
sg25
S'Y'
sg15
(lp4091
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4092
S'space'
p4093
asg95
I8
sS'.thisIndex'
p4094
I8
sa(dp4095
g16
(lp4096
S'd'
asg18
S'N'
sS'.thisRepN'
p4097
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4098
I12
sS'.thisN'
p4099
I522
sg25
S'Y'
sg15
(lp4100
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4101
I8
sa(dp4102
g16
(lp4103
S'k'
asg18
S'N'
sS'.thisRepN'
p4104
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4105
I13
sS'.thisN'
p4106
I523
sg25
S'Y'
sg15
(lp4107
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4108
I14
sa(dp4109
g16
(lp4110
S'd'
asg18
S'N'
sS'.thisRepN'
p4111
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4112
I14
sS'.thisN'
p4113
I524
sg25
S'Y'
sg15
(lp4114
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4115
I2
sa(dp4116
g16
(lp4117
S'd'
asg18
S'N'
sS'.thisRepN'
p4118
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4119
I0
sS'.thisN'
p4120
I525
sg25
S'Y'
sg15
(lp4121
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4122
I3
sa(dp4123
g16
(lp4124
S'd'
asg18
S'Y'
sS'.thisRepN'
p4125
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4126
I1
sS'.thisN'
p4127
I526
sg25
S'Y'
sg15
(lp4128
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4129
S'space'
p4130
asg95
I12
sS'.thisIndex'
p4131
I12
sa(dp4132
g16
(lp4133
S'd'
asg18
S'Y'
sS'.thisRepN'
p4134
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4135
I2
sS'.thisN'
p4136
I527
sg25
S'Y'
sg15
(lp4137
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4138
S'space'
p4139
asg95
I1
sS'.thisIndex'
p4140
I1
sa(dp4141
g16
(lp4142
S'k'
asg18
S'Y'
sS'.thisRepN'
p4143
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4144
I3
sS'.thisN'
p4145
I528
sg25
S'Y'
sg15
(lp4146
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4147
S'space'
p4148
asg95
I5
sS'.thisIndex'
p4149
I5
sa(dp4150
g16
(lp4151
S'd'
asg18
S'N'
sS'.thisRepN'
p4152
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4153
I4
sS'.thisN'
p4154
I529
sg25
S'Y'
sg15
(lp4155
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4156
I12
sa(dp4157
g16
(lp4158
S'k'
asg18
S'Y'
sS'.thisRepN'
p4159
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4160
I5
sS'.thisN'
p4161
I530
sg25
S'Y'
sg15
(lp4162
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4163
S'space'
p4164
asg95
I14
sS'.thisIndex'
p4165
I14
sa(dp4166
g16
(lp4167
S'k'
asg18
S'N'
sS'.thisRepN'
p4168
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4169
I6
sS'.thisN'
p4170
I531
sg25
S'Y'
sg15
(lp4171
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4172
I0
sa(dp4173
g16
(lp4174
S'k'
asg18
S'Y'
sS'.thisRepN'
p4175
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4176
I7
sS'.thisN'
p4177
I532
sg25
S'Y'
sg15
(lp4178
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4179
S'space'
p4180
asg95
I13
sS'.thisIndex'
p4181
I13
sa(dp4182
g16
(lp4183
S'k'
asg18
S'N'
sS'.thisRepN'
p4184
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4185
I8
sS'.thisN'
p4186
I533
sg25
S'Y'
sg15
(lp4187
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4188
I13
sa(dp4189
g16
(lp4190
S'd'
asg18
S'Y'
sS'.thisRepN'
p4191
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4192
I9
sS'.thisN'
p4193
I534
sg25
S'Y'
sg15
(lp4194
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4195
S'space'
p4196
asg95
I0
sS'.thisIndex'
p4197
I0
sa(dp4198
g16
(lp4199
S'k'
asg18
S'Y'
sS'.thisRepN'
p4200
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4201
I10
sS'.thisN'
p4202
I535
sg25
S'Y'
sg15
(lp4203
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4204
I6
sa(dp4205
g16
(lp4206
S'k'
asg18
S'N'
sS'.thisRepN'
p4207
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4208
I11
sS'.thisN'
p4209
I536
sg25
S'Y'
sg15
(lp4210
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4211
S'space'
p4212
asg95
I12
sS'.thisIndex'
p4213
I12
sa(dp4214
g16
(lp4215
S'k'
asg18
S'Y'
sS'.thisRepN'
p4216
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4217
I12
sS'.thisN'
p4218
I537
sg25
S'Y'
sg15
(lp4219
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4220
I9
sa(dp4221
g16
(lp4222
S'k'
asg18
S'Y'
sS'.thisRepN'
p4223
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4224
I13
sS'.thisN'
p4225
I538
sg25
S'Y'
sg15
(lp4226
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4227
S'space'
p4228
asg95
I4
sS'.thisIndex'
p4229
I4
sa(dp4230
g16
(lp4231
S'k'
asg18
S'N'
sS'.thisRepN'
p4232
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4233
I14
sS'.thisN'
p4234
I539
sg25
S'Y'
sg15
(lp4235
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4236
S'space'
p4237
asg95
I8
sS'.thisIndex'
p4238
I8
sa(dp4239
g16
(lp4240
S'd'
asg18
S'N'
sS'.thisRepN'
p4241
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4242
I0
sS'.thisN'
p4243
I540
sg25
S'Y'
sg15
(lp4244
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4245
I7
sa(dp4246
g16
(lp4247
S'd'
asg18
S'Y'
sS'.thisRepN'
p4248
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4249
I1
sS'.thisN'
p4250
I541
sg25
S'Y'
sg15
(lp4251
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4252
S'space'
p4253
asg95
I12
sS'.thisIndex'
p4254
I12
sa(dp4255
g18
S'N'
sS'.thisRepN'
p4256
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4257
I2
sS'.thisN'
p4258
I542
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2474
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4259
I1
sa(dp4260
g16
(lp4261
S'k'
asg18
S'Y'
sS'.thisRepN'
p4262
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4263
I3
sS'.thisN'
p4264
I543
sg25
S'Y'
sg15
(lp4265
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4266
S'space'
p4267
asg95
I11
sS'.thisIndex'
p4268
I11
sa(dp4269
g16
(lp4270
S'd'
asg18
S'Y'
sS'.thisRepN'
p4271
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4272
I4
sS'.thisN'
p4273
I544
sg25
S'Y'
sg15
(lp4274
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4275
S'space'
p4276
asg95
I4
sS'.thisIndex'
p4277
I4
sa(dp4278
g16
(lp4279
S'k'
asg18
S'N'
sS'.thisRepN'
p4280
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4281
I5
sS'.thisN'
p4282
I545
sg25
S'Y'
sg15
(lp4283
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4284
I9
sa(dp4285
g16
(lp4286
S'd'
asg18
S'Y'
sS'.thisRepN'
p4287
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4288
I6
sS'.thisN'
p4289
I546
sg25
S'Y'
sg15
(lp4290
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4291
S'space'
p4292
asg95
I6
sS'.thisIndex'
p4293
I6
sa(dp4294
g16
(lp4295
S'k'
asg18
S'Y'
sS'.thisRepN'
p4296
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4297
I7
sS'.thisN'
p4298
I547
sg25
S'Y'
sg15
(lp4299
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4300
S'space'
p4301
asg95
I2
sS'.thisIndex'
p4302
I2
sa(dp4303
g18
S'N'
sS'.thisRepN'
p4304
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4305
I8
sS'.thisN'
p4306
I548
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2474
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4307
I3
sa(dp4308
g16
(lp4309
S'k'
asg18
S'N'
sg22
I39
sg26
S'Y'
sS'.thisN'
p4310
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4311
I9
sS'.thisRepN'
p4312
I36
sg21
I36
sg25
S'Y'
sg23
I25
sg15
(lp4313
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4314
I14
sa(dp4315
g16
(lp4316
S'd'
asS'.thisIndex'
p4317
I3
sS'.thisRepN'
p4318
I36
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4319
I10
sS'.thisN'
p4320
I550
sg25
S'Y'
sg15
(lp4321
S'k'
asg17
S'Y'
sg14
I12
sg95
I3
sa(dp4322
g16
(lp4323
S'k'
asS'.thisIndex'
p4324
I13
sS'.thisRepN'
p4325
I36
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4326
I11
sS'.thisN'
p4327
I551
sg25
S'Y'
sg15
(lp4328
S'd'
asg17
S'Y'
sg14
I12
sg95
I13
sa(dp4329
g18
S'N'
sS'.thisRepN'
p4330
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4331
I12
sS'.thisN'
p4332
I552
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2474
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4333
I6
sa(dp4334
g16
(lp4335
S'k'
asg18
S'N'
sS'.thisRepN'
p4336
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4337
I13
sS'.thisN'
p4338
I553
sg25
S'Y'
sg15
(lp4339
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4340
I7
sa(dp4341
g16
(lp4342
S'd'
asg18
S'N'
sS'.thisRepN'
p4343
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4344
I14
sS'.thisN'
p4345
I554
sg25
S'Y'
sg15
(lp4346
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4347
S'space'
p4348
asg95
I3
sS'.thisIndex'
p4349
I3
sa(dp4350
g16
(lp4351
S'd'
asg18
S'Y'
sS'.thisRepN'
p4352
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4353
I0
sS'.thisN'
p4354
I555
sg25
S'Y'
sg15
(lp4355
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4356
S'space'
p4357
asg95
I5
sS'.thisIndex'
p4358
I5
sa(dp4359
g16
(lp4360
S'k'
asg18
S'Y'
sS'.thisRepN'
p4361
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4362
I1
sS'.thisN'
p4363
I556
sg25
S'Y'
sg15
(lp4364
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4365
S'space'
p4366
asg95
I4
sS'.thisIndex'
p4367
I4
sa(dp4368
g16
(lp4369
S'k'
asg18
S'Y'
sS'.thisRepN'
p4370
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4371
I2
sS'.thisN'
p4372
I557
sg25
S'Y'
sg15
(lp4373
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4374
S'space'
p4375
asg95
I7
sS'.thisIndex'
p4376
I7
sa(dp4377
g16
(lp4378
S'd'
asg18
S'N'
sS'.thisRepN'
p4379
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4380
I3
sS'.thisN'
p4381
I558
sg25
S'Y'
sg15
(lp4382
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4383
I6
sa(dp4384
g16
(lp4385
S'd'
asg18
S'N'
sS'.thisRepN'
p4386
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4387
I4
sS'.thisN'
p4388
I559
sg25
S'Y'
sg15
(lp4389
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4390
I9
sa(dp4391
g16
(lp4392
S'd'
asg18
S'Y'
sS'.thisRepN'
p4393
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4394
I5
sS'.thisN'
p4395
I560
sg25
S'Y'
sg15
(lp4396
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4397
S'space'
p4398
asg95
I10
sS'.thisIndex'
p4399
I10
sa(dp4400
g16
(lp4401
S'd'
asg18
S'N'
sS'.thisRepN'
p4402
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4403
I6
sS'.thisN'
p4404
I561
sg25
S'Y'
sg15
(lp4405
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4406
I0
sa(dp4407
g16
(lp4408
S'd'
asg18
S'Y'
sS'.thisRepN'
p4409
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4410
I7
sS'.thisN'
p4411
I562
sg25
S'Y'
sg15
(lp4412
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4413
I1
sa(dp4414
g16
(lp4415
S'd'
asg18
S'N'
sS'.thisRepN'
p4416
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4417
I8
sS'.thisN'
p4418
I563
sg25
S'Y'
sg15
(lp4419
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4420
I5
sa(dp4421
g16
(lp4422
S'k'
asg18
S'N'
sS'.thisRepN'
p4423
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4424
I9
sS'.thisN'
p4425
I564
sg25
S'Y'
sg15
(lp4426
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4427
I10
sa(dp4428
g16
(lp4429
S'd'
asg18
S'N'
sS'.thisRepN'
p4430
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4431
I10
sS'.thisN'
p4432
I565
sg25
S'Y'
sg15
(lp4433
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4434
I8
sa(dp4435
g16
(lp4436
S'k'
asg18
S'Y'
sS'.thisRepN'
p4437
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4438
I11
sS'.thisN'
p4439
I566
sg25
S'Y'
sg15
(lp4440
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4441
S'space'
p4442
asg95
I10
sS'.thisIndex'
p4443
I10
sa(dp4444
g16
(lp4445
S'd'
asg18
S'Y'
sS'.thisRepN'
p4446
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4447
I12
sS'.thisN'
p4448
I567
sg25
S'Y'
sg15
(lp4449
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4450
S'space'
p4451
asg95
I14
sS'.thisIndex'
p4452
I14
sa(dp4453
g16
(lp4454
S'k'
asg18
S'Y'
sS'.thisRepN'
p4455
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4456
I13
sS'.thisN'
p4457
I568
sg25
S'Y'
sg15
(lp4458
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4459
S'space'
p4460
asg95
I0
sS'.thisIndex'
p4461
I0
sa(dp4462
g16
(lp4463
S'd'
asg18
S'Y'
sS'.thisRepN'
p4464
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4465
I14
sS'.thisN'
p4466
I569
sg25
S'Y'
sg15
(lp4467
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4468
I13
sa(dp4469
g16
(lp4470
S'd'
asg18
S'Y'
sS'.thisRepN'
p4471
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4472
I0
sS'.thisN'
p4473
I570
sg25
S'Y'
sg15
(lp4474
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4475
S'space'
p4476
asg95
I9
sS'.thisIndex'
p4477
I9
sa(dp4478
g16
(lp4479
S'k'
asg18
S'N'
sS'.thisRepN'
p4480
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4481
I1
sS'.thisN'
p4482
I571
sg25
S'Y'
sg15
(lp4483
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4484
I13
sa(dp4485
g16
(lp4486
S'd'
asg18
S'Y'
sS'.thisRepN'
p4487
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4488
I2
sS'.thisN'
p4489
I572
sg25
S'Y'
sg15
(lp4490
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4491
S'space'
p4492
asg95
I3
sS'.thisIndex'
p4493
I3
sa(dp4494
g16
(lp4495
S'k'
asg18
S'N'
sS'.thisRepN'
p4496
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4497
I3
sS'.thisN'
p4498
I573
sg25
S'Y'
sg15
(lp4499
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4500
I10
sa(dp4501
g16
(lp4502
S'k'
asg18
S'Y'
sS'.thisRepN'
p4503
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4504
I4
sS'.thisN'
p4505
I574
sg25
S'Y'
sg15
(lp4506
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4507
S'space'
p4508
asg95
I6
sS'.thisIndex'
p4509
I6
sa(dp4510
g16
(lp4511
S'd'
asg18
S'Y'
sS'.thisRepN'
p4512
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4513
I5
sS'.thisN'
p4514
I575
sg25
S'Y'
sg15
(lp4515
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4516
S'space'
p4517
asg95
I6
sS'.thisIndex'
p4518
I6
sa(dp4519
g16
(lp4520
S'k'
asg18
S'N'
sS'.thisRepN'
p4521
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4522
I6
sS'.thisN'
p4523
I576
sg25
S'Y'
sg15
(lp4524
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4525
I10
sa(dp4526
g16
(lp4527
S'k'
asg18
S'N'
sS'.thisRepN'
p4528
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4529
I7
sS'.thisN'
p4530
I577
sg25
S'Y'
sg15
(lp4531
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4532
I13
sa(dp4533
g16
(lp4534
S'k'
asg18
S'N'
sS'.thisRepN'
p4535
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4536
I8
sS'.thisN'
p4537
I578
sg25
S'Y'
sg15
(lp4538
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4539
I12
sa(dp4540
g16
(lp4541
S'd'
asg18
S'Y'
sS'.thisRepN'
p4542
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4543
I9
sS'.thisN'
p4544
I579
sg25
S'Y'
sg15
(lp4545
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4546
S'space'
p4547
asg95
I1
sS'.thisIndex'
p4548
I1
sa(dp4549
g16
(lp4550
S'k'
asg18
S'N'
sS'.thisRepN'
p4551
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4552
I10
sS'.thisN'
p4553
I580
sg25
S'Y'
sg15
(lp4554
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4555
I7
sa(dp4556
g16
(lp4557
S'd'
asg18
S'Y'
sS'.thisRepN'
p4558
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4559
I11
sS'.thisN'
p4560
I581
sg25
S'Y'
sg15
(lp4561
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4562
S'space'
p4563
asg95
I4
sS'.thisIndex'
p4564
I4
sa(dp4565
g16
(lp4566
S'k'
asg18
S'Y'
sS'.thisRepN'
p4567
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4568
I12
sS'.thisN'
p4569
I582
sg25
S'Y'
sg15
(lp4570
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4571
S'space'
p4572
asg95
I13
sS'.thisIndex'
p4573
I13
sa(dp4574
g16
(lp4575
S'd'
asg18
S'Y'
sS'.thisRepN'
p4576
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4577
I13
sS'.thisN'
p4578
I583
sg25
S'Y'
sg15
(lp4579
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4580
S'space'
p4581
asg95
I12
sS'.thisIndex'
p4582
I12
sa(dp4583
g16
(lp4584
S'k'
asg18
S'N'
sS'.thisRepN'
p4585
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4586
I14
sS'.thisN'
p4587
I584
sg25
S'Y'
sg15
(lp4588
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4589
I1
sa(dp4590
g16
(lp4591
S'k'
asg18
S'Y'
sS'.thisRepN'
p4592
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4593
I0
sS'.thisN'
p4594
I585
sg25
S'Y'
sg15
(lp4595
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4596
S'space'
p4597
asg95
I12
sS'.thisIndex'
p4598
I12
sa(dp4599
g16
(lp4600
S'k'
asg18
S'Y'
sS'.thisRepN'
p4601
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4602
I1
sS'.thisN'
p4603
I586
sg25
S'Y'
sg15
(lp4604
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4605
S'space'
p4606
asg95
I9
sS'.thisIndex'
p4607
I9
sa(dp4608
g16
(lp4609
S'k'
asg18
S'N'
sS'.thisRepN'
p4610
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4611
I2
sS'.thisN'
p4612
I587
sg25
S'Y'
sg15
(lp4613
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4614
I3
sa(dp4615
g16
(lp4616
S'd'
asg18
S'Y'
sS'.thisRepN'
p4617
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4618
I3
sS'.thisN'
p4619
I588
sg25
S'Y'
sg15
(lp4620
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4621
S'space'
p4622
asg95
I11
sS'.thisIndex'
p4623
I11
sa(dp4624
g16
(lp4625
S'k'
asg18
S'N'
sS'.thisRepN'
p4626
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4627
I4
sS'.thisN'
p4628
I589
sg25
S'Y'
sg15
(lp4629
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4630
I3
sa(dp4631
g16
(lp4632
S'k'
asg18
S'Y'
sS'.thisRepN'
p4633
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4634
I5
sS'.thisN'
p4635
I590
sg25
S'Y'
sg15
(lp4636
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4637
S'space'
p4638
asg95
I2
sS'.thisIndex'
p4639
I2
sa(dp4640
g16
(lp4641
S'k'
asg18
S'N'
sS'.thisRepN'
p4642
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4643
I6
sS'.thisN'
p4644
I591
sg25
S'Y'
sg15
(lp4645
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I14
sS'.thisIndex'
p4646
I14
sa(dp4647
g16
(lp4648
S'd'
asg18
S'N'
sS'.thisRepN'
p4649
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4650
I7
sS'.thisN'
p4651
I592
sg25
S'Y'
sg15
(lp4652
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4653
S'space'
p4654
asg95
I8
sS'.thisIndex'
p4655
I8
sa(dp4656
g16
(lp4657
S'd'
asg18
S'Y'
sS'.thisRepN'
p4658
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4659
I8
sS'.thisN'
p4660
I593
sg25
S'Y'
sg15
(lp4661
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4662
S'space'
p4663
asg95
I14
sS'.thisIndex'
p4664
I14
sa(dp4665
g16
(lp4666
S'k'
asg18
S'Y'
sS'.thisRepN'
p4667
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4668
I9
sS'.thisN'
p4669
I594
sg25
S'Y'
sg15
(lp4670
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4671
S'space'
p4672
asg95
I3
sS'.thisIndex'
p4673
I3
sa(dp4674
g16
(lp4675
S'k'
asg18
S'N'
sS'.thisRepN'
p4676
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4677
I10
sS'.thisN'
p4678
I595
sg25
S'Y'
sg15
(lp4679
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4680
I11
sa(dp4681
g16
(lp4682
S'k'
asg18
S'N'
sS'.thisRepN'
p4683
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4684
I11
sS'.thisN'
p4685
I596
sg25
S'Y'
sg15
(lp4686
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4687
I1
sa(dp4688
g16
(lp4689
S'd'
asg18
S'Y'
sS'.thisRepN'
p4690
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4691
I12
sS'.thisN'
p4692
I597
sg25
S'Y'
sg15
(lp4693
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4694
I3
sa(dp4695
g18
S'N'
sS'.thisRepN'
p4696
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4697
I13
sS'.thisN'
p4698
I598
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2474
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4699
I13
sa(dp4700
g16
(lp4701
S'k'
asg18
S'N'
sg22
I43
sg26
S'Y'
sS'.thisN'
p4702
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4703
I14
sS'.thisRepN'
p4704
I39
sg21
I38
sg25
S'Y'
sg23
I24
sg15
(lp4705
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4706
I4
sasS'loops'
p4707
(lp4708
g1
(g35
g3
NtRp4709
(dp4710
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4711
sg40
(lp4712
sg41
I75676208
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4713
g48
g49
(g50
g51
g52
S'b'
tRp4714
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4715
(I1
(I600
I1
tg55
I00
S'\x00\x00\x9eB\x00\x80\x15D\x00\x80\x97C\x00\x00tB\x00\x00xC\x00\x80\xceC\x00\x00\x14B\x00\x80\xaaC\x00\x00\xc4C\x00\x00VC\x00\xc0\nD\x00\x00-C\x00\x00.C\x00\x00AC\x00\x80\x9aC\x00\x00\xbaB\x00\x80\xb2C\x00\x80\xfaC\x00\x00HB\x00\x004C\x00\x80\xf3C\x00\x00\xf0C\x00\x00\xc8A\x00\x00\xd6C\x00\x00!C\x00\x00\xdeC\x00\x00\x9cB\x00\x00`A\x00\x00\x08C\x00\x00TC\x00\x80\xcbC\x00\x00\xd1C\x00\x80\xe6C\x00\x00\x1cC\x00\x00\xd4B\x00\x00\xf6C\x00\x00@B\x00\x80\xdcC\x00\x00\xd8A\x00\x80\x0eD\x00\x00FC\x00\x80\x03D\x00\x00\xd9C\x00\x80\x94C\x00\x00WC\x00\x00\xb0A\x00\x00\x95C\x00\x00\xbeB\x00\x00\x02C\x00\x80\xa5C\x00\x00\x10B\x00\x80\xbfC\x00\x80\xb7C\x00\x00\x17C\x00\x80\xfbC\x00\x003C\x00\x00\xdcB\x00\x00\x89C\x00\x00<B\x00\x00\x92B\x00\x80\x95C\x00\x00NC\x00\x00tC\x00\x00\xa4C\x00\x00hC\x00\x00\x0fD\x00\x00\xe6B\x00\x00\x0bC\x00\x00\xaaC\x00\x00(C\x00\x80\xd2C\x00\x00\x10A\x00\x00\xe2B\x00\x00\xfaC\x00\x00\xcaC\x00\x00\x94C\x00\x80\xc5C\x00\x00\xa4B\x00\x80\xa8C\x00\x80\xf6C\x00\x00hB\x00\x00\x1eC\x00\x80\xa0C\x00\x80\xa6C\x00\x80\xddC\x00\x00\xdbC\x00\x80\xc6C\x00\x80\x86C\x00\x80\xe8C\x00\x00\xe7C\x00\x00\xe4C\x00@\x14D\x00\x80\x9dC\x00\xc0\x11D\x00\x00\xb0B\x00\x80\x92C\x00\x00\xf8B\x00\x00 C\x00@\rD\x00\x80\xc2C\x00\x00*C\x00\x00\xf3C\x00\x00yC\x00\x00PC\x00\x80\xd3C\x00\x80\xfeC\x00\x00\x80@\x00\x00\xf8A\x00\x80\x8cC\x00\xc0\x0bD\x00\x80\x8eC\x00\x80\xd5C\x00\x00\xbcB\x00\x00\xb9C\x00\x00\xebC\x00\x00\x0cB\x00\x00lB\x00\x00uC\x00\x80\x9eC\x00@\x15D\x00\x80\xc3C\x00\x80\x0bD\x00\x00\xb7C\x00\x00pB\x00\x00\xc8B\x00\x00\xe0A\x00\x00\xe5C\x00\x00DC\x00\x00#C\x00\x80\xcfC\x00\x00\x8cC\x00\x00\xa0B\x00\x00\tD\x00\x80\x83C\x00\x00\x10C\x00\x00\x01D\x00\x80\xb5C\x00\x00\xf0A\x00\x00\x96B\x00\x00\\C\x00\x00\x11C\x00\x00\xe0C\x00\x00\xafC\x00\x80\xc9C\x00\x00qC\x00\x00\xddC\x00\x80\xb0C\x00\x00\xeeB\x00\x80\xcaC\x00\x001C\x00\x00\x03C\x00\x00\xc8C\x00\x00\rC\x00\x80\x05D\x00\x00CC\x00\x80\xb3C\x00\x00\x84B\x00@\x04D\x00\x00\x08D\x00\x00UC\x00\x00\xdeB\x00\x80\x85C\x00\x00\x87C\x00\x00\xa2C\x00\x00\xa0C\x00\x00\xe8C\x00\x00\x92C\x00\x00\x80C\x00\x00\'C\x00\x00\x07D\x00\x80\xffC\x00\x80\x88C\x00\x00\xefC\x00\x00&C\x00\x00\x90B\x00\x80\x9cC\x00\x00\xdcC\x00\x00SC\x00\xc0\x0cD\x00\xc0\x10D\x00\x80\xd8C\x00\x00DB\x00\x00\xc9C\x00\x00\xc2B\x00\x80\xdeC\x00\x00\x9aC\x00\x00\x1bC\x00\x00\xc5C\x00\x00\nC\x00\x00XC\x00\x00\x96C\x00\x80\xadC\x00\x00\x8bC\x00\x00\xbbC\x00\x00\xd0A\x00\xc0\x03D\x00\x80\xa7C\x00\x00JC\x00\x00mC\x00\x00\x14D\x00\x00\xeaB\x00\x00\x0cD\x00\x80\x87C\x00\x00\xecC\x00\x00\x0eC\x00\x00QC\x00\x00\x04C\x00\x80\x98C\x00\x00\xaaB\x00@\x11D\x00\x80\xefC\x00\x00\xc0B\x00\xc0\x00D\x00\x00\x03D\x00\x80\xe5C\x00@\x0cD\x00\xc0\rD\x00\x00\xbeC\x00\x00\xfaB\x00\x00\xfeB\x00\x00\x84C\x00\x80\xa4C\x00\x00kC\x00\x00\x97C\x00\x00rC\x00\x80\x02D\x00\x00\x93C\x00\x00\xb6B\x00\x80\xb1C\x00\x00;C\x00\x80\xc0C\x00\x002C\x00\x00EC\x00\x80\xf9C\x00\x007C\x00\x00\xb4B\x00\x80\x9bC\x00\x00\xaeB\x00\x80\x0cD\x00\x80\xb6C\x00\x00\x81C\x00\x00\xf6B\x00@\x03D\x00\x80\xeeC\x00\x00\xaeC\x00\x00\\B\x00\x80\xdfC\x00@\x0eD\x00\x00\x01C\x00\x00\x12C\x00\x00\tC\x00\x00\xb2C\x00\x00[C\x00\x00xB\x00@\x07D\x00\x00$B\x00\x80\xe0C\x00\x00<C\x00\x00\x9dC\x00\x00sC\x00\x00\nD\x00\x80\xfdC\x00\x80\nD\x00\x00+C\x00\x80\xf7C\x00\x00\x7fC\x00\x80\xabC\x00\x00cC\x00\x00\xd3C\x00\x00PA\x00\xc0\x0fD\x00\x00\xf7C\x00\x00\xfdC\x00\x00\x1fC\x00\x00(B\x00\x80\xfcC\x00\x00IC\x00\x00|C\x00\x00\xc2C\x00\x00\xceC\x00\x80\xa1C\x00\x00\x05C\x00\x80\x93C\x00\x00\xcaB\x00\x80\xbdC\x00\x00aC\x00\x00OC\x00\x00\xeeC\x00\x000A\x00\x00\xd0C\x00\x00\x00@\x00\x00\x19C\x00\x80\x08D\x00\x00\x13D\x00\x80\x91C\x00\x00TB\x00\x80\tD\x00\x80\xd7C\x00\x00\x8eB\x00\x80\xdbC\x00\x00\xd0B\x00\x00\xfcC\x00\x00RC\x00\x00\x88B\x00\x80\xccC\x00\x00\x86B\x00\x00\xa5C\x00@\x13D\x00\x80\xc7C\x00\x00\x9fC\x00\x009C\x00@\x0bD\x00\x00\x04B\x00\x006C\x00\x00\x80B\x00\x80\xb4C\x00\x80\x8dC\x00\x00\xf1C\x00\xc0\x14D\x00\x00\x9cC\x00\x00\x08B\x00\x00)C\x00\x00,C\x00\x80\x89C\x00\x00\xcfC\x00\x00,B\x00\x80\xaeC\x00\x00\x04D\x00\x00\xeaC\x00\x00BC\x00\x00}C\x00\x00\x00A\x00\x00\xf9C\x00\x00vC\x00\x80\x90C\x00\x00\x00C\x00\x00\xb8C\x00\x004B\x00\x00\xc1C\x00\x80\x06D\x00\x00XB\x00\x00\xc3C\x00\x80\x11D\x00\xc0\x08D\x00\x00\x98B\x00\x00\xe0@\x00\xc0\x15D\x00\x00jC\x00\x00$C\x00\x00\xabC\x00\x00\x9eC\x00\x80\xf2C\x00\x80\x00D\x00\x00~C\x00\x80\xafC\x00\x80\x8fC\x00\x00\xb0C\x00\x80\xd0C\x00\x00\xe8B\x00\x00dC\x00\x000C\x00\x80\xe3C\x00\x00\xf4C\x00\xc0\x02D\x00\x80\xf4C\x00\x00\x90A\x00\x00\xccB\x00\x00\x05D\x00\x00MC\x00\x00\xbaC\x00\x008C\x00\x00 A\x00@\x06D\x00\x80\x81C\x00\x00\xa8A\x00\x00\xe6C\x00\x80\rD\x00\x00\xc0A\x00\x00KC\x00\x80\x0fD\x00\xc0\x05D\x00\x00\xf2B\x00\x00\xb2B\x00@\x10D\x00\x80\x99C\x00\x00\x1cB\x00\x00eC\x00\x00\xe8A\x00\x00\x98A\x00\x00\xa7C\x00\x00pA\x00\x00=C\x00\x00\xa3C\x00\x00pC\x00\x00\xa6C\x00\x80\xeaC\x00\x00\xfeC\x00@\nD\x00\x00\xbcC\x00\x00\xbdC\x00\x00@C\x00\x00\xc6B\x00\xc0\x01D\x00\x00PB\x00\x80\x01D\x00\x80\xe7C\x00\x00\xacB\x00\x00\xb8B\x00\x00\xe2C\x00\x00\xd6B\x00\x00\x12D\x00\x00\x14C\x00\x00_C\x00\x00\x9aB\x00\x00\xd5C\x00\x00GC\x00\x00oC\x00\x00\x0cC\x00\x80\xf5C\x00\x80\xa9C\x00\x80\x13D\x00\x80\xb8C\x00\x008B\x00\x00nC\x00\x00\xb5C\x00\x80\xe4C\x00\x00\xc0C\x00\x00\x0eD\x00\x00?C\x00\x80\xbaC\x00\x00"C\x00\x00\x07C\x00\x80\x04D\x00\x80\xbeC\x00\x00{C\x00\x00 B\x00\x00\rD\x00\x80\x8bC\x00\x80\xcdC\x00\x80\x80C\x00\x00bC\x00\x80\xe2C\x00\x00\x88A\x00\x00\x16C\x00\x00\xa0@\x00\x00iC\x00\x00\x0bD\x00\x00\x18C\x00\xc0\x13D\x00\x80\xa2C\x00\x00\xb8A\x00\x00\xd2C\x00@\x05D\x00\x80\xd6C\x00\x00\x8cB\x00\x00>C\x00\x00\x18B\x00\x00\xc7C\x00\x00\xb3C\x00\x80\xdaC\x00\x80\xebC\x00\x00\xcdC\x00\x00\xccC\x00\x00\x9bC\x00\x00YC\x00\x80\xd1C\x00\x00\x8dC\x00\x00\xacC\x00\x00dB\x00\xc0\x04D\x00\x80\x8aC\x00\x00\xa0A\x00\x80\x07D\x00\x80\xe9C\x00\x00\xe0B\x00\x00\x10D\x00\x00\xa6B\x00\x00\x15D\x00\x00\xfcB\x00@\x00D\x00\x00\x91C\x00@\x01D\x00\x00LB\x00\x00|B\x00\xc0\x0eD\x00\x80\x12D\x00\x80\x96C\x00\x80\x10D\x00\x80\xa3C\x00\x00\x8eC\x00\x00\xf0B\x00\x80\x84C\x00\x00\xd7C\x00@\tD\x00\x00\x82B\x00\x00HC\x00\x00\xd8C\x00\x80\x14D\x00\x00\xc6C\x00\x00^C\x00\x00\x1aC\x00\x80\xd9C\x00\x00\xa1C\x00\x00\x85C\x00\x00@A\x00\x00\x00B\x00\x00\xfbC\x00\x00\x06D\x00\x00\x15C\x00\x00\xdfC\x00\x00\xb4C\x00\x00]C\x00\x00\xf4B\x00\x00\x8aB\x00\x80\xd4C\x00\x00\x90C\x00\x80\xe1C\x00\x00%C\x00\x80\xbbC\x00\x00\xa8C\x00\x00\x86C\x00\xc0\tD\x00\x00\xf5C\x00\x00zC\x00\x00\xf2C\x00\x80\xacC\x00\x00\xffC\x00\x80\xc1C\x00\x00\xe3C\x00\x00\x11D\x00\x00\xb1C\x00\x00\x8fC\x00\x80\xf1C\x00@\x0fD\x00\x00\x99C\x00\x00\xedC\x00\x80\xf0C\x00\x00\xd2B\x00\x00\xadC\x00\x00\x1dC\x00\x00wC\x00\x00\xceB\x00\x00\x82C\x00\x00\x8aC\x00\x00lC\x00\x00\xc0@\x00\x80\xc8C\x00\x80\xedC\x00\x00LC\x00\x00\x0fC\x00\x00\xa8B\x00\x00:C\x00\x80\xecC\x00\x00\x00D\x00\x00\x13C\x00\x00\x94B\x00\x00\x88C\x00\x00@@\x00\x00\xdaB\x00@\x02D\x00\x00\xdaC\x00\x80\xf8C\x00\x00\xe4B\x00\x000B\x00\x00\xe1C\x00\x80\x9fC\x00\x00\xc4B\x00\xc0\x07D\x00\x00`B\x00\x00\xa2B\x00\x00\xb6C\x00@\x12D\x00\x00ZC\x00\x00\x06C\x00\x80\xc4C\x00\x005C\x00\x00\xcbC\x00\x00\x00\x00\x00\x00\x02D\x00\xc0\x06D\x00\x00`C\x00\x00\xa9C\x00\x00\xd8B\x00@\x08D\x00\x00gC\x00\x00\xd4C\x00\x00fC\x00\x00\xbfC\x00\x00/C\x00\x00\xecB\x00\x00\xe9C\x00\x00\x80?\x00\x80\x82C\x00\xc0\x12D\x00\x00\xf8C\x00\x80\xbcC\x00\x00\x98C\x00\x00\x83C\x00\x80\xb9C\x00\x00\x80A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4716
(dp4717
g60
(dp4718
g48
I01
sg56
I01
ssg62
g4709
sg63
(lp4719
g48
ag56
asg65
(lp4720
I600
aI1
asbsg67
S'random'
p4721
sg69
g70
(g51
(I0
tS'b'
tRp4722
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4723
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'A\x02\x00\x00O\x02\x00\x00"\x01\x00\x00-\x02\x00\x00j\x00\x00\x00\xbc\x01\x00\x00!\x02\x00\x00Y\x01\x00\x00K\x01\x00\x00G\x00\x00\x00s\x01\x00\x00 \x01\x00\x00\xf8\x01\x00\x00\r\x01\x00\x00\x1b\x00\x00\x00\x86\x01\x00\x00W\x02\x00\x00\xba\x01\x00\x00m\x01\x00\x00\x84\x01\x00\x00\xd7\x01\x00\x00v\x01\x00\x00-\x00\x00\x00\xc2\x01\x00\x00y\x01\x00\x00\x16\x00\x00\x00\xc2\x00\x00\x00&\x00\x00\x00}\x00\x00\x00\x83\x01\x00\x00\x89\x00\x00\x00k\x00\x00\x00\xf9\x01\x00\x008\x01\x00\x00@\x01\x00\x00s\x00\x00\x002\x00\x00\x00\x06\x00\x00\x00\xc8\x01\x00\x00\x81\x01\x00\x00\xb3\x01\x00\x00\xff\x00\x00\x00\x12\x01\x00\x00E\x01\x00\x003\x02\x00\x00Q\x01\x00\x00\xa6\x01\x00\x00:\x00\x00\x00$\x00\x00\x00\xb5\x00\x00\x00\x12\x00\x00\x00\xe2\x01\x00\x00\x93\x01\x00\x00\'\x01\x00\x00T\x01\x00\x00\xf5\x00\x00\x008\x02\x00\x00\xd4\x01\x00\x00P\x00\x00\x00t\x00\x00\x00{\x00\x00\x00\x03\x00\x00\x00\xfd\x00\x00\x00\xe3\x01\x00\x00:\x01\x00\x00\xee\x01\x00\x00\x9c\x00\x00\x001\x01\x00\x00/\x01\x00\x00\x01\x02\x00\x00\xc6\x01\x00\x00*\x01\x00\x00\xae\x00\x00\x00;\x00\x00\x00+\x02\x00\x00\x8a\x00\x00\x00X\x01\x00\x00\x9d\x01\x00\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x83\x00\x00\x009\x02\x00\x00M\x00\x00\x00\xdc\x01\x00\x00&\x02\x00\x00\xd0\x00\x00\x00\x96\x01\x00\x00\xed\x00\x00\x00^\x00\x00\x00~\x01\x00\x00\xeb\x00\x00\x00\xe3\x00\x00\x00\x97\x01\x00\x00\x0f\x00\x00\x00p\x00\x00\x00/\x00\x00\x00\xd3\x00\x00\x00\xb7\x00\x00\x006\x02\x00\x00\x91\x01\x00\x00|\x00\x00\x00\x1b\x01\x00\x00n\x01\x00\x00\x1d\x02\x00\x00,\x01\x00\x00\x19\x02\x00\x00"\x00\x00\x00\x99\x01\x00\x00F\x02\x00\x00.\x02\x00\x008\x00\x00\x00\xa0\x00\x00\x00\xda\x01\x00\x00H\x00\x00\x002\x02\x00\x00B\x00\x00\x00f\x01\x00\x00\xc8\x00\x00\x00M\x02\x00\x00\x93\x00\x00\x00\xea\x01\x00\x00}\x01\x00\x00\x00\x02\x00\x00\xf1\x00\x00\x00`\x00\x00\x00\xda\x00\x00\x00\xde\x01\x00\x00\xdb\x00\x00\x00O\x01\x00\x00\xf8\x00\x00\x000\x00\x00\x00\x96\x00\x00\x00\xce\x00\x00\x00\x19\x01\x00\x00=\x02\x00\x00\xaf\x01\x00\x00\x1c\x00\x00\x00\xfa\x00\x00\x00\xbc\x00\x00\x00C\x00\x00\x00\xa1\x01\x00\x00\x98\x00\x00\x00\xcc\x00\x00\x00%\x02\x00\x00\x86\x00\x00\x00\x8c\x00\x00\x00\xf9\x00\x00\x00*\x02\x00\x00\x9b\x01\x00\x00\xfc\x01\x00\x00\xbb\x01\x00\x005\x00\x00\x00\xbf\x01\x00\x00#\x01\x00\x00\xf4\x01\x00\x00\xba\x00\x00\x00!\x00\x00\x00\x1b\x02\x00\x00Q\x00\x00\x00\x11\x01\x00\x00a\x00\x00\x00\x18\x00\x00\x00\xae\x01\x00\x00\x80\x00\x00\x00\\\x01\x00\x00\x05\x02\x00\x00\xad\x00\x00\x00\xa8\x00\x00\x00E\x00\x00\x00A\x01\x00\x00d\x00\x00\x00\x07\x01\x00\x00B\x01\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00L\x02\x00\x00h\x01\x00\x00\x95\x00\x00\x00\xe7\x00\x00\x007\x00\x00\x00\x13\x00\x00\x00?\x02\x00\x009\x01\x00\x00\xea\x00\x00\x00r\x01\x00\x006\x01\x00\x00\'\x02\x00\x00\xe5\x00\x00\x00\x01\x01\x00\x00\x87\x01\x00\x00\xc7\x01\x00\x00\xac\x01\x00\x00\x90\x01\x00\x00\r\x00\x00\x00I\x01\x00\x00\x9a\x00\x00\x00\x7f\x00\x00\x00\xe8\x00\x00\x00(\x00\x00\x00\x9f\x01\x00\x00\xef\x01\x00\x00\x14\x01\x00\x00\xc5\x00\x00\x00z\x01\x00\x00$\x02\x00\x00p\x01\x00\x00=\x00\x00\x00\x1e\x01\x00\x00g\x00\x00\x00\xcd\x00\x00\x00.\x01\x00\x00\xb1\x00\x00\x00\x1d\x00\x00\x00\x9f\x00\x00\x00\t\x00\x00\x00,\x00\x00\x00\xbd\x00\x00\x00\xd0\x01\x00\x00<\x02\x00\x00\xfc\x00\x00\x00\x8b\x00\x00\x00\xff\x01\x00\x00\xf3\x01\x00\x00\x9c\x01\x00\x00D\x02\x00\x00\x1d\x01\x00\x00\xb8\x01\x00\x00\x0b\x01\x00\x00g\x01\x00\x00\x82\x01\x00\x00J\x02\x00\x00H\x02\x00\x00@\x00\x00\x00\xbd\x01\x00\x00[\x01\x00\x00\xde\x00\x00\x00 \x02\x00\x00\xc6\x00\x00\x00\xa7\x01\x00\x00\xa0\x01\x00\x00\x89\x01\x00\x00\x90\x00\x00\x00\xe0\x00\x00\x00\x03\x01\x00\x00>\x00\x00\x00u\x00\x00\x00M\x01\x00\x00\x1c\x02\x00\x00\x04\x00\x00\x00f\x00\x00\x00\x0b\x02\x00\x00\xb2\x01\x00\x00\x15\x01\x00\x00J\x01\x00\x00a\x01\x00\x00\t\x01\x00\x00\xa7\x00\x00\x00\xb7\x01\x00\x00\xf0\x00\x00\x00u\x01\x00\x00\x1e\x02\x00\x00P\x02\x00\x00U\x02\x00\x00\x85\x00\x00\x00\xdc\x00\x00\x00\xeb\x01\x00\x00\xf7\x01\x00\x00\xa1\x00\x00\x00\x08\x02\x00\x00W\x00\x00\x00\xa2\x00\x00\x00\xca\x00\x00\x00,\x02\x00\x00\xab\x00\x00\x009\x00\x00\x00C\x01\x00\x00\x1f\x02\x00\x00\xd6\x01\x00\x00\xc0\x00\x00\x00\xb5\x01\x00\x00\x82\x00\x00\x00l\x00\x00\x00\xd2\x01\x00\x00<\x01\x00\x00\xe9\x01\x00\x00n\x00\x00\x00\x13\x02\x00\x00c\x01\x00\x00\x03\x02\x00\x00N\x01\x00\x00\xe0\x01\x00\x00&\x01\x00\x00\xa6\x00\x00\x00_\x00\x00\x00\xe2\x00\x00\x00\x1a\x01\x00\x00K\x00\x00\x00+\x00\x00\x00.\x00\x00\x00<\x00\x00\x00\xbe\x00\x00\x00\xe6\x01\x00\x00\xdf\x00\x00\x00\x02\x00\x00\x00T\x02\x00\x00\xcf\x00\x00\x00\x16\x02\x00\x00\x80\x01\x00\x00\xb9\x00\x00\x00\x0e\x00\x00\x00\xcf\x01\x00\x00\xec\x00\x00\x00?\x01\x00\x00\xaf\x00\x00\x00\x02\x01\x00\x00\\\x00\x00\x00^\x01\x00\x00v\x00\x00\x005\x01\x00\x005\x02\x00\x00\xa4\x00\x00\x00R\x00\x00\x00\xf6\x01\x00\x00\x18\x01\x00\x00\xa3\x00\x00\x00\xc1\x01\x00\x00\x88\x01\x00\x00\xe8\x01\x00\x00?\x00\x00\x00\xdd\x00\x00\x002\x01\x00\x001\x00\x00\x00\x8a\x01\x00\x00S\x00\x00\x00\x85\x01\x00\x00\xc4\x00\x00\x00\x07\x02\x00\x00N\x00\x00\x00E\x02\x00\x00\xa3\x01\x00\x00D\x00\x00\x00\x07\x00\x00\x00]\x01\x00\x00\n\x01\x00\x00\xd3\x01\x00\x00\r\x02\x00\x00\x1a\x02\x00\x00\xbf\x00\x00\x00\xf4\x00\x00\x00F\x01\x00\x00\x8e\x00\x00\x00b\x01\x00\x00d\x01\x00\x00\x92\x00\x00\x00\x12\x02\x00\x00\xe4\x00\x00\x00\xfb\x00\x00\x00\x10\x00\x00\x00\xca\x01\x00\x00\x9b\x00\x00\x00\xfe\x01\x00\x00;\x01\x00\x00\xa8\x01\x00\x00\x88\x00\x00\x00:\x02\x00\x00\xef\x00\x00\x00z\x00\x00\x004\x00\x00\x00P\x01\x00\x00\xa5\x01\x00\x00q\x00\x00\x00V\x02\x00\x00q\x01\x00\x00\xad\x01\x00\x00\xc1\x00\x00\x00\x06\x02\x00\x00\x8e\x01\x00\x00S\x02\x00\x00\x8f\x01\x00\x00\x1c\x01\x00\x00\xd9\x00\x00\x00\xb1\x01\x00\x00K\x02\x00\x003\x00\x00\x00\xaa\x01\x00\x00\xe6\x00\x00\x00R\x01\x00\x00\x0f\x02\x00\x00\x16\x01\x00\x00c\x00\x00\x00U\x01\x00\x00x\x00\x00\x00\x08\x00\x00\x00>\x02\x00\x00\xbb\x00\x00\x00L\x00\x00\x00\xf2\x01\x00\x00V\x00\x00\x00\xc9\x01\x00\x004\x01\x00\x00\x97\x00\x00\x00"\x02\x00\x00\xb6\x00\x00\x00\x8f\x00\x00\x00J\x00\x00\x00\x94\x00\x00\x00@\x02\x00\x00\x1e\x00\x00\x00\xce\x01\x00\x000\x01\x00\x00\xcd\x01\x00\x00\xb6\x01\x00\x00\x17\x01\x00\x00\x05\x00\x00\x00D\x01\x00\x00\x81\x00\x00\x00!\x01\x00\x00e\x01\x00\x00\x1f\x00\x00\x00\xd1\x01\x00\x00\xc3\x01\x00\x00F\x00\x00\x00\x0c\x01\x00\x00h\x00\x00\x00I\x02\x00\x00\x02\x02\x00\x00\x9e\x01\x00\x00o\x00\x00\x00\x17\x00\x00\x00\xc5\x01\x00\x00\xec\x01\x00\x00)\x01\x00\x00\xf0\x01\x00\x00\xb4\x00\x00\x00*\x00\x00\x00\xf5\x01\x00\x000\x02\x00\x00\xcb\x01\x00\x00U\x00\x00\x00+\x01\x00\x00\xb0\x00\x00\x00%\x00\x00\x00\x91\x00\x00\x00T\x00\x00\x00\x19\x00\x00\x00\xb8\x00\x00\x00\xfd\x01\x00\x00\xf6\x00\x00\x00\x8d\x00\x00\x00\x00\x01\x00\x004\x02\x00\x00\x04\x02\x00\x00\x98\x01\x00\x00\xb9\x01\x00\x00\x10\x02\x00\x00i\x01\x00\x00Z\x00\x00\x00\xa9\x01\x00\x00~\x00\x00\x00\xd6\x00\x00\x00w\x01\x00\x00 \x00\x00\x00Y\x00\x00\x00\x95\x01\x00\x00\xa5\x00\x00\x00X\x00\x00\x00N\x02\x00\x00\xd9\x01\x00\x00H\x01\x00\x00\x8b\x01\x00\x00r\x00\x00\x00\xcc\x01\x00\x00\xcb\x00\x00\x00(\x02\x00\x00\x17\x02\x00\x00#\x02\x00\x00\x1f\x01\x00\x00\xf3\x00\x00\x00\xac\x00\x00\x00\xd2\x00\x00\x00\x15\x00\x00\x00\x18\x02\x00\x00=\x01\x00\x00\x14\x02\x00\x00\x0c\x02\x00\x00_\x01\x00\x00e\x00\x00\x00\x14\x00\x00\x00j\x01\x00\x00l\x01\x00\x00\n\x02\x00\x00\xa2\x01\x00\x00#\x00\x00\x00O\x00\x00\x00\x0f\x01\x00\x00\x08\x01\x00\x00R\x02\x00\x001\x02\x00\x00L\x01\x00\x00\xe9\x00\x00\x00I\x00\x00\x00\x11\x00\x00\x00\xfa\x01\x00\x006\x00\x00\x00-\x01\x00\x00\x13\x01\x00\x00\x10\x01\x00\x00\x05\x01\x00\x00\x8c\x01\x00\x00i\x00\x00\x00\x0e\x02\x00\x00\xaa\x00\x00\x00)\x02\x00\x00\xdf\x01\x00\x00`\x01\x00\x00\xd4\x00\x00\x00\x87\x00\x00\x00\xe1\x01\x00\x00\x94\x01\x00\x00\x92\x01\x00\x00B\x02\x00\x00/\x02\x00\x00\xe1\x00\x00\x00k\x01\x00\x00\xd5\x00\x00\x00\xf2\x00\x00\x00)\x00\x00\x00\xc3\x00\x00\x00G\x01\x00\x00\x9d\x00\x00\x00\xb0\x01\x00\x00\xd5\x01\x00\x00o\x01\x00\x00\xc4\x01\x00\x00\x99\x00\x00\x00|\x01\x00\x00\xfb\x01\x00\x00t\x01\x00\x00S\x01\x00\x00C\x02\x00\x00\xa9\x00\x00\x00\xfe\x00\x00\x00\xd8\x01\x00\x007\x02\x00\x00\x9e\x00\x00\x00G\x02\x00\x00$\x01\x00\x00W\x01\x00\x00\x84\x00\x00\x00\xed\x01\x00\x00(\x01\x00\x00\t\x02\x00\x00\x04\x01\x00\x00\x8d\x01\x00\x00\x06\x01\x00\x00\n\x00\x00\x00\xbe\x01\x00\x007\x01\x00\x00y\x00\x00\x00m\x00\x00\x00\xc9\x00\x00\x00\xd7\x00\x00\x00\xee\x00\x00\x00\xb2\x00\x00\x00\xb4\x01\x00\x00b\x00\x00\x00x\x01\x00\x00\xd8\x00\x00\x00\xab\x01\x00\x00\xf7\x00\x00\x00\'\x00\x00\x00\xe4\x01\x00\x00A\x00\x00\x00\x15\x02\x00\x00{\x01\x00\x00\x0e\x01\x00\x00\xdb\x01\x00\x00\x7f\x01\x00\x00\xe7\x01\x00\x00\xb3\x00\x00\x00\x11\x02\x00\x00\xd1\x00\x00\x00V\x01\x00\x00]\x00\x00\x00\x9a\x01\x00\x00;\x02\x00\x00\xe5\x01\x00\x00Q\x02\x00\x00%\x01\x00\x003\x01\x00\x00\xa4\x01\x00\x00\xc0\x01\x00\x00\xc7\x00\x00\x00[\x00\x00\x00\xf1\x01\x00\x00>\x01\x00\x00\xdd\x01\x00\x00w\x00\x00\x00\x01\x00\x00\x00Z\x01\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4724
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4725
(g4723
S'Z\x01\x00\x00'
tRp4726
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4727
I01
sb.